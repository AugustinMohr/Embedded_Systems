
Labo4_LCD.elf:     file format elf32-littlenios2
Labo4_LCD.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10100244

Program Header:
    LOAD off    0x00001000 vaddr 0x10100000 paddr 0x10100000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10100020 paddr 0x10100020 align 2**12
         filesz 0x0001054c memsz 0x0001054c flags r-x
    LOAD off    0x0001156c vaddr 0x1011056c paddr 0x101120c8 align 2**12
         filesz 0x00001b5c memsz 0x00001b5c flags rw-
    LOAD off    0x00013c24 vaddr 0x10113c24 paddr 0x10113c24 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10100000  10100000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  10100020  10100020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000ffb8  10100244  10100244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000370  101101fc  101101fc  000111fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b5c  1011056c  101120c8  0001156c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  10113c24  10113c24  00013c24  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  10113d84  10113d84  000130c8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000130c8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000ed8  00000000  00000000  000130f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002424f  00000000  00000000  00013fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009238  00000000  00000000  00038217  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000b71f  00000000  00000000  0004144f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000230c  00000000  00000000  0004cb70  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000038c8  00000000  00000000  0004ee7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017868  00000000  00000000  00052744  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00069fac  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000018c0  00000000  00000000  00069fe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006ebde  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0006ebe1  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006ebed  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006ebee  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0006ebef  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0006ebfa  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0006ec05  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000a  00000000  00000000  0006ec10  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000059  00000000  00000000  0006ec1a  2**0
                  CONTENTS, READONLY
 26 .jdi          00007004  00000000  00000000  0006ec73  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0028112c  00000000  00000000  00075c77  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10100000 l    d  .entry	00000000 .entry
10100020 l    d  .exceptions	00000000 .exceptions
10100244 l    d  .text	00000000 .text
101101fc l    d  .rodata	00000000 .rodata
1011056c l    d  .rwdata	00000000 .rwdata
10113c24 l    d  .bss	00000000 .bss
10113d84 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/nicca/DeskDoc/EmbeddedSystems/Embedded_Systems/lab_4_project_template/sw/nios/Labo4_LCD_bsp//obj/HAL/src/crt0.o
1010028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
101102a6 l     O .rodata	00000010 zeroes.4404
101032cc l     F .text	000000bc __sbprintf
101102b6 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
101034dc l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1010500c l     F .text	00000008 __fp_unlock
10105020 l     F .text	0000019c __sinit.part.1
101051bc l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
1011056c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
101109b0 l     O .rwdata	00000020 lc_ctype_charset
10110990 l     O .rwdata	00000020 lc_message_charset
101109d0 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
101102e8 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
101085b8 l     F .text	000000fc __sprint_r.part.0
1011041c l     O .rodata	00000010 blanks.4348
1011040c l     O .rodata	00000010 zeroes.4349
10109b44 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
1010d64c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1010d758 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1010d784 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
1010d870 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1010d950 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
1010da3c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
1010dc10 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10112070 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
1010de5c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
1010df90 l     F .text	00000034 alt_dev_reg
10110fb8 l     O .rwdata	00001060 jtag_uart_0
10112018 l     O .rwdata	00000028 altera_hostfs
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
1010e274 l     F .text	0000020c altera_avalon_jtag_uart_irq
1010e480 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_hostfs.c
10112074 l     O .rwdata	00000009 hcinfo.2538
10112080 l     O .rwdata	0000000a hcinfo.2551
1011208c l     O .rwdata	00000009 hcinfo.2560
10112098 l     O .rwdata	0000000a hcinfo.2573
101120a4 l     O .rwdata	0000000a hcinfo.2586
101120b0 l     O .rwdata	0000000a hcinfo.2612
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
1010f0b0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_fs_reg.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
1010f5a4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
1010f6e4 l     F .text	0000003c alt_get_errno
1010f720 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10113c58 g     O .bss	00000004 alt_instruction_exception_handler
10107bfc g     F .text	00000074 _mprec_log10
10107ce8 g     F .text	0000008c __any_on
1010a0e0 g     F .text	00000054 _isatty_r
101102f4 g     O .rodata	00000028 __mprec_tinytens
1010db4c g     F .text	0000007c alt_main
10100f4c g     F .text	000000c0 _puts_r
10113c84 g     O .bss	00000100 alt_irq
1010a134 g     F .text	00000060 _lseek_r
101120c8 g       *ABS*	00000000 __flash_rwdata_start
1010c178 g     F .text	00000088 .hidden __eqdf2
10113d84 g       *ABS*	00000000 __alt_heap_start
10100f10 g     F .text	0000003c printf
1010a34c g     F .text	0000009c _wcrtomb_r
10108478 g     F .text	0000005c __sseek
1010535c g     F .text	00000010 __sinit
1010a1f4 g     F .text	00000140 __swbuf_r
10105e24 g     F .text	0000007c _setlocale_r
101051c4 g     F .text	00000068 __sfmoreglue
1010dbec g     F .text	00000024 __malloc_unlock
1010eab8 g     F .text	0000011c alt_hostfs_open
10106af4 g     F .text	0000015c memmove
10105344 g     F .text	00000018 _cleanup
10106d78 g     F .text	000000a8 _Balloc
1010c200 g     F .text	000000dc .hidden __gtdf2
1010fadc g     F .text	00000024 altera_nios2_gen2_irq_init
10100290 g     F .text	00000058 waitms
10100000 g     F .entry	0000001c __reset
10100020 g       *ABS*	00000000 __flash_exceptions_start
101006dc g     F .text	00000070 LCD_Clear
1010a084 g     F .text	0000005c _fstat_r
10113c3c g     O .bss	00000004 errno
101083f4 g     F .text	00000008 __seofread
10100318 g     F .text	00000030 LCD_WR_REG
10113c44 g     O .bss	00000004 alt_argv
1011a040 g       *ABS*	00000000 _gp
10110e38 g     O .rwdata	00000180 alt_fd_list
1010ecf0 g     F .text	00000068 alt_hostfs_seek
1010fb00 g     F .text	00000090 alt_find_dev
101069ac g     F .text	00000148 memcpy
10105014 g     F .text	0000000c _cleanup_r
1010d464 g     F .text	000000dc .hidden __floatsidf
1010f250 g     F .text	00000080 alt_fs_reg
1010f668 g     F .text	0000007c alt_io_redirect
1010c2dc g     F .text	000000f4 .hidden __ltdf2
101101fc g       *ABS*	00000000 __DTOR_END__
1010100c g     F .text	00000014 puts
1010fdcc g     F .text	0000009c alt_exception_cause_generated_bad_addr
101082d8 g     F .text	00000074 __fpclassifyd
10107b58 g     F .text	000000a4 __ratio
10109b28 g     F .text	0000001c __vfiprintf_internal
1010e678 g     F .text	0000021c altera_avalon_jtag_uart_read
10100ee0 g     F .text	00000030 _printf_r
10100000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
10100e24 g     F .text	00000064 .hidden __udivsi3
1010d8ac g     F .text	000000a4 isatty
10110344 g     O .rodata	000000c8 __mprec_tens
10100a98 g     F .text	00000030 BUFF_ADD_WR
10105ea0 g     F .text	0000000c __locale_charset
1010fd3c g     F .text	00000090 alt_icache_flush
10113c38 g     O .bss	00000004 __malloc_top_pad
10112048 g     O .rwdata	00000004 __mb_cur_max
10105ed0 g     F .text	0000000c _localeconv_r
10107184 g     F .text	0000003c __i2b
101057e0 g     F .text	000004bc __sfvwrite_r
1010834c g     F .text	00000054 _sbrk_r
1010ec18 g     F .text	0000006c alt_hostfs_read
1010a194 g     F .text	00000060 _read_r
10112068 g     O .rwdata	00000004 alt_max_fd
10109d78 g     F .text	000000f0 _fclose_r
10104fdc g     F .text	00000030 fflush
10113c34 g     O .bss	00000004 __malloc_max_sbrked_mem
1010afe4 g     F .text	000008ac .hidden __adddf3
10107900 g     F .text	0000010c __b2d
1010aaac g     F .text	00000538 .hidden __umoddi3
1010da78 g     F .text	000000d4 lseek
10112040 g     O .rwdata	00000004 _global_impure_ptr
10107d74 g     F .text	00000564 _realloc_r
10113d84 g       *ABS*	00000000 __bss_end
1010f4b4 g     F .text	000000f0 alt_iic_isr_register
1010f9d4 g     F .text	00000108 alt_tick
1010a534 g     F .text	00000578 .hidden __udivdi3
10109fe0 g     F .text	00000024 _fputwc_r
1011031c g     O .rodata	00000028 __mprec_bigtens
10106f68 g     F .text	00000104 __s2b
1010d540 g     F .text	000000a8 .hidden __floatunsidf
10107640 g     F .text	00000060 __mcmp
1010537c g     F .text	00000018 __fp_lock_all
1010f468 g     F .text	0000004c alt_ic_irq_enabled
1010f938 g     F .text	0000009c alt_alarm_stop
10113c4c g     O .bss	00000004 alt_irq_active
1010ebd4 g     F .text	00000044 alt_hostfs_close
101000fc g     F .exceptions	000000d4 alt_irq_handler
10110e10 g     O .rwdata	00000028 alt_dev_null
1010f068 g     F .text	00000048 alt_dcache_flush_all
1010706c g     F .text	00000068 __hi0bits
1010d3e4 g     F .text	00000080 .hidden __fixdfsi
101120c8 g       *ABS*	00000000 __ram_rwdata_end
101002e8 g     F .text	00000030 LCD_WR_DATA
10112060 g     O .rwdata	00000008 alt_dev_list
1010de98 g     F .text	000000f8 write
1011056c g       *ABS*	00000000 __ram_rodata_end
1010d7c0 g     F .text	000000b0 fstat
1010c2dc g     F .text	000000f4 .hidden __ledf2
101073b8 g     F .text	00000140 __pow5mult
101086cc g     F .text	0000145c ___vfiprintf_internal_r
10113c2c g     O .bss	00000004 __nlocale_changed
10100e88 g     F .text	00000058 .hidden __umodsi3
10113d84 g       *ABS*	00000000 end
1010e1b4 g     F .text	000000c0 altera_avalon_jtag_uart_init
101001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
101101fc g       *ABS*	00000000 __CTOR_LIST__
10120000 g       *ABS*	00000000 __alt_stack_pointer
1010d5e8 g     F .text	00000064 .hidden __clzsi2
1010e894 g     F .text	00000224 altera_avalon_jtag_uart_write
1010536c g     F .text	00000004 __sfp_lock_acquire
101068c8 g     F .text	000000e4 memchr
101010b8 g     F .text	000021f8 ___vfprintf_internal_r
101054d0 g     F .text	00000310 _free_r
10105eac g     F .text	00000010 __locale_mb_cur_max
10100a30 g     F .text	0000002c LCD_reset
1010074c g     F .text	00000088 LCD_SetCursor
10110048 g     F .text	00000180 __call_exitprocs
10100b28 g     F .text	0000018c test
10113c28 g     O .bss	00000004 __mlocale_changed
1011204c g     O .rwdata	00000004 __malloc_sbrk_base
10100244 g     F .text	0000004c _start
10113c50 g     O .bss	00000004 _alt_tick_rate
101074f8 g     F .text	00000148 __lshift
10113c54 g     O .bss	00000004 _alt_nticks
1010dc4c g     F .text	000000fc read
1010dffc g     F .text	00000054 alt_sys_init
1010ff30 g     F .text	00000118 __register_exitproc
101071c0 g     F .text	000001f8 __multiply
1010e520 g     F .text	00000068 altera_avalon_jtag_uart_close
1011056c g       *ABS*	00000000 __ram_rwdata_start
101101fc g       *ABS*	00000000 __ram_rodata_start
10113c5c g     O .bss	00000028 __malloc_current_mallinfo
10107a0c g     F .text	0000014c __d2b
1010e050 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
1010fc98 g     F .text	000000a4 alt_get_fd
10109c60 g     F .text	00000054 _close_r
1010feb4 g     F .text	0000007c memcmp
1010e110 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10113d84 g       *ABS*	00000000 __alt_stack_base
1010e160 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10103388 g     F .text	00000154 __swsetup_r
1010b890 g     F .text	000008e8 .hidden __divdf3
1010522c g     F .text	00000118 __sfp
10107c70 g     F .text	00000078 __copybits
10110a08 g     O .rwdata	00000408 __malloc_av_
10105378 g     F .text	00000004 __sinit_lock_release
1010c3d0 g     F .text	00000718 .hidden __muldf3
101083a0 g     F .text	00000054 __sread
1010fb90 g     F .text	00000108 alt_find_file
1010f0ec g     F .text	000000a4 alt_dev_llist_insert
1010dbc8 g     F .text	00000024 __malloc_lock
1010ddac g     F .text	000000b0 sbrk
10104f80 g     F .text	0000005c _fflush_r
10109cb4 g     F .text	000000c4 _calloc_r
10113c24 g       *ABS*	00000000 __bss_start
10100348 g     F .text	00000394 LCD_Init
10106c50 g     F .text	00000128 memset
10100af8 g     F .text	00000030 BURST_COUNT_WR
10100cb4 g     F .text	00000078 main
10113c48 g     O .bss	00000004 alt_envp
10113c30 g     O .bss	00000004 __malloc_max_total_mem
10100ac8 g     F .text	00000030 BUFF_LEN_WR
1010e0b0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
1010a334 g     F .text	00000018 __swbuf
101084d4 g     F .text	00000008 __sclose
10120000 g       *ABS*	00000000 __alt_heap_limit
10109e68 g     F .text	00000014 fclose
101036dc g     F .text	00001688 _dtoa_r
101060bc g     F .text	0000080c _malloc_r
1010a4a8 g     F .text	00000030 __ascii_wctomb
1011206c g     O .rwdata	00000004 alt_errno
10105c9c g     F .text	000000c4 _fwalk
10100d2c g     F .text	00000084 .hidden __divsi3
101053ac g     F .text	00000124 _malloc_trim_r
101101fc g       *ABS*	00000000 __CTOR_END__
101084dc g     F .text	000000dc strcmp
101101fc g       *ABS*	00000000 __flash_rodata_start
101101fc g       *ABS*	00000000 __DTOR_LIST__
1010c178 g     F .text	00000088 .hidden __nedf2
1010dfc4 g     F .text	00000038 alt_irq_init
1010dd48 g     F .text	00000064 alt_release_fd
1011042c g     O .rodata	00000100 .hidden __clz_tab
10113c24 g     O .bss	00000004 _PathLocale
1010fe68 g     F .text	00000014 atexit
10109c00 g     F .text	00000060 _write_r
10105edc g     F .text	00000018 setlocale
10112044 g     O .rwdata	00000004 _impure_ptr
10113c40 g     O .bss	00000004 alt_argc
10104d64 g     F .text	0000021c __sflush_r
1010f1f0 g     F .text	00000060 _do_dtors
10105ec8 g     F .text	00000008 __locale_cjk_lang
10100020 g       .exceptions	00000000 alt_irq_entry
1010789c g     F .text	00000064 __ulp
10105394 g     F .text	00000018 __fp_unlock_all
10112058 g     O .rwdata	00000008 alt_fs_list
1010ec84 g     F .text	0000006c alt_hostfs_write
10100020 g       *ABS*	00000000 __ram_exceptions_start
10105ef4 g     F .text	0000000c localeconv
1010f304 g     F .text	00000050 alt_ic_isr_register
101120c8 g       *ABS*	00000000 _edata
10113d84 g       *ABS*	00000000 _end
10109e7c g     F .text	00000164 __fputwc
10100244 g       *ABS*	00000000 __ram_exceptions_end
1010e588 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
1010f3dc g     F .text	0000008c alt_ic_irq_disable
101083fc g     F .text	0000007c __swrite
10112050 g     O .rwdata	00000004 __malloc_trim_threshold
10105ebc g     F .text	0000000c __locale_msgcharset
1010fe7c g     F .text	00000038 exit
10105d60 g     F .text	000000c4 _fwalk_reent
101076a0 g     F .text	000001fc __mdiff
10100db0 g     F .text	00000074 .hidden __modsi3
10120000 g       *ABS*	00000000 __alt_data_end
10100020 g     F .exceptions	00000000 alt_exception
10105370 g     F .text	00000004 __sfp_lock_release
101101c8 g     F .text	00000034 _exit
1010ef3c g     F .text	0000012c alt_alarm_start
10105f00 g     F .text	000001bc __smakebuf_r
10101020 g     F .text	00000098 strlen
1010f7e4 g     F .text	00000154 open
1010c200 g     F .text	000000dc .hidden __gedf2
10112054 g     O .rwdata	00000004 __wctomb
101086b4 g     F .text	00000018 __sprint_r
1010f2d0 g     F .text	00000034 alt_icache_flush_all
10100a5c g     F .text	0000003c MEM_WR
101120bc g     O .rwdata	00000004 alt_priority_mask
1010f354 g     F .text	00000088 alt_ic_irq_enable
101032b0 g     F .text	0000001c __vfprintf_internal
1010a4d8 g     F .text	0000005c _wctomb_r
1010cae8 g     F .text	000008fc .hidden __subdf3
101070d4 g     F .text	000000b0 __lo0bits
101120c0 g     O .rwdata	00000008 alt_alarm_list
1010f190 g     F .text	00000060 _do_ctors
1010a3e8 g     F .text	000000c0 wcrtomb
1010d688 g     F .text	000000d0 close
1010d9b8 g     F .text	00000084 alt_load
101007d4 g     F .text	0000025c LCD_Swiss
1010a004 g     F .text	00000080 fputwc
10105374 g     F .text	00000004 __sinit_lock_acquire
10106e48 g     F .text	00000120 __multadd
10106e20 g     F .text	00000028 _Bfree
1010ed58 g     F .text	000001e4 alt_hostfs_fstat



Disassembly of section .entry:

10100000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
10100000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
10100004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
10100008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
1010000c:	00bffd16 	blt	zero,r2,10100004 <__alt_data_end+0xfffe0004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10100010:	00440434 	movhi	at,4112
    ori r1, r1, %lo(_start)
10100014:	08409114 	ori	at,at,580
    jmp r1
10100018:	0800683a 	jmp	at
1010001c:	00000000 	call	10000000 <__reset-0x100000>

Disassembly of section .exceptions:

10100020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10100020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10100024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10100028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1010002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10100030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10100034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10100038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1010003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10100040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10100044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10100048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1010004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10100050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10100054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10100058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1010005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10100060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10100064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10100068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1010006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10100070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10100074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10100078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1010007c:	10000326 	beq	r2,zero,1010008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10100080:	20000226 	beq	r4,zero,1010008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10100084:	01000fc0 	call	101000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10100088:	00000706 	br	101000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1010008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10100090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10100094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10100098:	01001d00 	call	101001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1010009c:	1000021e 	bne	r2,zero,101000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
101000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
101000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
101000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
101000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
101000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
101000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
101000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
101000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
101000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
101000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
101000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
101000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
101000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
101000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
101000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
101000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
101000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
101000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
101000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
101000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
101000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
101000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
101000f8:	ef80083a 	eret

101000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
101000fc:	defff904 	addi	sp,sp,-28
10100100:	dfc00615 	stw	ra,24(sp)
10100104:	df000515 	stw	fp,20(sp)
10100108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1010010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10100110:	0005313a 	rdctl	r2,ipending
10100114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10100118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1010011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10100120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10100124:	00800044 	movi	r2,1
10100128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1010012c:	e0fffb17 	ldw	r3,-20(fp)
10100130:	e0bffc17 	ldw	r2,-16(fp)
10100134:	1884703a 	and	r2,r3,r2
10100138:	10001426 	beq	r2,zero,1010018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1010013c:	00840474 	movhi	r2,4113
10100140:	108f2104 	addi	r2,r2,15492
10100144:	e0fffd17 	ldw	r3,-12(fp)
10100148:	180690fa 	slli	r3,r3,3
1010014c:	10c5883a 	add	r2,r2,r3
10100150:	10c00017 	ldw	r3,0(r2)
10100154:	00840474 	movhi	r2,4113
10100158:	108f2104 	addi	r2,r2,15492
1010015c:	e13ffd17 	ldw	r4,-12(fp)
10100160:	200890fa 	slli	r4,r4,3
10100164:	1105883a 	add	r2,r2,r4
10100168:	10800104 	addi	r2,r2,4
1010016c:	10800017 	ldw	r2,0(r2)
10100170:	1009883a 	mov	r4,r2
10100174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10100178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1010017c:	0005313a 	rdctl	r2,ipending
10100180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10100184:	e0bfff17 	ldw	r2,-4(fp)
10100188:	00000706 	br	101001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1010018c:	e0bffc17 	ldw	r2,-16(fp)
10100190:	1085883a 	add	r2,r2,r2
10100194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10100198:	e0bffd17 	ldw	r2,-12(fp)
1010019c:	10800044 	addi	r2,r2,1
101001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
101001a4:	003fe106 	br	1010012c <__alt_data_end+0xfffe012c>

    active = alt_irq_pending ();
101001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
101001ac:	e0bffb17 	ldw	r2,-20(fp)
101001b0:	103fdb1e 	bne	r2,zero,10100120 <__alt_data_end+0xfffe0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
101001b4:	0001883a 	nop
}
101001b8:	0001883a 	nop
101001bc:	e037883a 	mov	sp,fp
101001c0:	dfc00117 	ldw	ra,4(sp)
101001c4:	df000017 	ldw	fp,0(sp)
101001c8:	dec00204 	addi	sp,sp,8
101001cc:	f800283a 	ret

101001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
101001d0:	defffb04 	addi	sp,sp,-20
101001d4:	dfc00415 	stw	ra,16(sp)
101001d8:	df000315 	stw	fp,12(sp)
101001dc:	df000304 	addi	fp,sp,12
101001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
101001e4:	000531fa 	rdctl	r2,exception
101001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
101001ec:	e0bffd17 	ldw	r2,-12(fp)
101001f0:	10801f0c 	andi	r2,r2,124
101001f4:	1004d0ba 	srli	r2,r2,2
101001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
101001fc:	0005333a 	rdctl	r2,badaddr
10100200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
10100204:	d0a70617 	ldw	r2,-25576(gp)
10100208:	10000726 	beq	r2,zero,10100228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
1010020c:	d0a70617 	ldw	r2,-25576(gp)
10100210:	e0fffd17 	ldw	r3,-12(fp)
10100214:	e1bffe17 	ldw	r6,-8(fp)
10100218:	e17fff17 	ldw	r5,-4(fp)
1010021c:	1809883a 	mov	r4,r3
10100220:	103ee83a 	callr	r2
10100224:	00000206 	br	10100230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10100228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
1010022c:	0005883a 	mov	r2,zero
}
10100230:	e037883a 	mov	sp,fp
10100234:	dfc00117 	ldw	ra,4(sp)
10100238:	df000017 	ldw	fp,0(sp)
1010023c:	dec00204 	addi	sp,sp,8
10100240:	f800283a 	ret

Disassembly of section .text:

10100244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
10100244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
10100248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
1010024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
10100250:	00bffd16 	blt	zero,r2,10100248 <__alt_data_end+0xfffe0248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10100254:	06c404b4 	movhi	sp,4114
    ori sp, sp, %lo(__alt_stack_pointer)
10100258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
1010025c:	06840474 	movhi	gp,4113
    ori gp, gp, %lo(_gp)
10100260:	d6a81014 	ori	gp,gp,41024
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10100264:	00840474 	movhi	r2,4113
    ori r2, r2, %lo(__bss_start)
10100268:	108f0914 	ori	r2,r2,15396

    movhi r3, %hi(__bss_end)
1010026c:	00c40474 	movhi	r3,4113
    ori r3, r3, %lo(__bss_end)
10100270:	18cf6114 	ori	r3,r3,15748

    beq r2, r3, 1f
10100274:	10c00326 	beq	r2,r3,10100284 <_start+0x40>

0:
    stw zero, (r2)
10100278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
1010027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
10100280:	10fffd36 	bltu	r2,r3,10100278 <__alt_data_end+0xfffe0278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10100284:	010d9b80 	call	1010d9b8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10100288:	010db4c0 	call	1010db4c <alt_main>

1010028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
1010028c:	003fff06 	br	1010028c <__alt_data_end+0xfffe028c>

10100290 <waitms>:
#define GREEN 0x07e0
#define BLUE 0x001f
#define BLACK  0x0000
#define WHITE 0xffff

void waitms(int t) {
10100290:	defffd04 	addi	sp,sp,-12
10100294:	df000215 	stw	fp,8(sp)
10100298:	df000204 	addi	fp,sp,8
1010029c:	e13fff15 	stw	r4,-4(fp)
    while(t--) {
101002a0:	00000806 	br	101002c4 <waitms+0x34>
        for(int i = 0; i < 3125; i++) {
101002a4:	e03ffe15 	stw	zero,-8(fp)
101002a8:	00000306 	br	101002b8 <waitms+0x28>
101002ac:	e0bffe17 	ldw	r2,-8(fp)
101002b0:	10800044 	addi	r2,r2,1
101002b4:	e0bffe15 	stw	r2,-8(fp)
101002b8:	e0bffe17 	ldw	r2,-8(fp)
101002bc:	10830d50 	cmplti	r2,r2,3125
101002c0:	103ffa1e 	bne	r2,zero,101002ac <__alt_data_end+0xfffe02ac>
#define BLUE 0x001f
#define BLACK  0x0000
#define WHITE 0xffff

void waitms(int t) {
    while(t--) {
101002c4:	e0bfff17 	ldw	r2,-4(fp)
101002c8:	10ffffc4 	addi	r3,r2,-1
101002cc:	e0ffff15 	stw	r3,-4(fp)
101002d0:	103ff41e 	bne	r2,zero,101002a4 <__alt_data_end+0xfffe02a4>
        for(int i = 0; i < 3125; i++) {
            ;
        }
    }
}
101002d4:	0001883a 	nop
101002d8:	e037883a 	mov	sp,fp
101002dc:	df000017 	ldw	fp,0(sp)
101002e0:	dec00104 	addi	sp,sp,4
101002e4:	f800283a 	ret

101002e8 <LCD_WR_DATA>:

void LCD_WR_DATA(uint data) {
101002e8:	defffe04 	addi	sp,sp,-8
101002ec:	df000115 	stw	fp,4(sp)
101002f0:	df000104 	addi	fp,sp,4
101002f4:	e13fff15 	stw	r4,-4(fp)
    IOWR_32DIRECT(LCD_CONTROLLER_0_BASE, LCD_DATA_OFFSET, data);
101002f8:	e0ffff17 	ldw	r3,-4(fp)
101002fc:	00800304 	movi	r2,12
10100300:	10c00035 	stwio	r3,0(r2)
}
10100304:	0001883a 	nop
10100308:	e037883a 	mov	sp,fp
1010030c:	df000017 	ldw	fp,0(sp)
10100310:	dec00104 	addi	sp,sp,4
10100314:	f800283a 	ret

10100318 <LCD_WR_REG>:

void LCD_WR_REG(uint data) {
10100318:	defffe04 	addi	sp,sp,-8
1010031c:	df000115 	stw	fp,4(sp)
10100320:	df000104 	addi	fp,sp,4
10100324:	e13fff15 	stw	r4,-4(fp)
    IOWR_32DIRECT(LCD_CONTROLLER_0_BASE, LCD_COMMAND_OFFSET, data);
10100328:	e0ffff17 	ldw	r3,-4(fp)
1010032c:	00800204 	movi	r2,8
10100330:	10c00035 	stwio	r3,0(r2)
}
10100334:	0001883a 	nop
10100338:	e037883a 	mov	sp,fp
1010033c:	df000017 	ldw	fp,0(sp)
10100340:	dec00104 	addi	sp,sp,4
10100344:	f800283a 	ret

10100348 <LCD_Init>:

void LCD_Init(void) {
10100348:	defffe04 	addi	sp,sp,-8
1010034c:	dfc00115 	stw	ra,4(sp)
10100350:	df000015 	stw	fp,0(sp)
10100354:	d839883a 	mov	fp,sp

    // software reset
    LCD_reset();
10100358:	0100a300 	call	10100a30 <LCD_reset>
    waitms(120);
1010035c:	01001e04 	movi	r4,120
10100360:	01002900 	call	10100290 <waitms>

    LCD_WR_REG(0x0011); //Exit Sleep
10100364:	01000444 	movi	r4,17
10100368:	01003180 	call	10100318 <LCD_WR_REG>
    LCD_WR_REG(0x00CF);
1010036c:	010033c4 	movi	r4,207
10100370:	01003180 	call	10100318 <LCD_WR_REG>
        LCD_WR_DATA(0x0000);
10100374:	0009883a 	mov	r4,zero
10100378:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0081);
1010037c:	01002044 	movi	r4,129
10100380:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0X00c0);
10100384:	01003004 	movi	r4,192
10100388:	01002e80 	call	101002e8 <LCD_WR_DATA>

    LCD_WR_REG(0x00ED);
1010038c:	01003b44 	movi	r4,237
10100390:	01003180 	call	10100318 <LCD_WR_REG>
        LCD_WR_DATA(0x0064);
10100394:	01001904 	movi	r4,100
10100398:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0003);
1010039c:	010000c4 	movi	r4,3
101003a0:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0X0012);
101003a4:	01000484 	movi	r4,18
101003a8:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0X0081);
101003ac:	01002044 	movi	r4,129
101003b0:	01002e80 	call	101002e8 <LCD_WR_DATA>

    LCD_WR_REG(0x00E8);
101003b4:	01003a04 	movi	r4,232
101003b8:	01003180 	call	10100318 <LCD_WR_REG>
        LCD_WR_DATA(0x0085);
101003bc:	01002144 	movi	r4,133
101003c0:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0001);
101003c4:	01000044 	movi	r4,1
101003c8:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00798);
101003cc:	0101e604 	movi	r4,1944
101003d0:	01002e80 	call	101002e8 <LCD_WR_DATA>

    LCD_WR_REG(0x00CB);
101003d4:	010032c4 	movi	r4,203
101003d8:	01003180 	call	10100318 <LCD_WR_REG>
        LCD_WR_DATA(0x0039);
101003dc:	01000e44 	movi	r4,57
101003e0:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x002C);
101003e4:	01000b04 	movi	r4,44
101003e8:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0000);
101003ec:	0009883a 	mov	r4,zero
101003f0:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0034);
101003f4:	01000d04 	movi	r4,52
101003f8:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0002);
101003fc:	01000084 	movi	r4,2
10100400:	01002e80 	call	101002e8 <LCD_WR_DATA>

    LCD_WR_REG(0x00F7);
10100404:	01003dc4 	movi	r4,247
10100408:	01003180 	call	10100318 <LCD_WR_REG>
        LCD_WR_DATA(0x0020);
1010040c:	01000804 	movi	r4,32
10100410:	01002e80 	call	101002e8 <LCD_WR_DATA>

    LCD_WR_REG(0x00EA);
10100414:	01003a84 	movi	r4,234
10100418:	01003180 	call	10100318 <LCD_WR_REG>
        LCD_WR_DATA(0x0000);
1010041c:	0009883a 	mov	r4,zero
10100420:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0000);
10100424:	0009883a 	mov	r4,zero
10100428:	01002e80 	call	101002e8 <LCD_WR_DATA>

    LCD_WR_REG(0x00B1);
1010042c:	01002c44 	movi	r4,177
10100430:	01003180 	call	10100318 <LCD_WR_REG>
        LCD_WR_DATA(0x0000);
10100434:	0009883a 	mov	r4,zero
10100438:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x001b);
1010043c:	010006c4 	movi	r4,27
10100440:	01002e80 	call	101002e8 <LCD_WR_DATA>

    LCD_WR_REG(0x00B6);
10100444:	01002d84 	movi	r4,182
10100448:	01003180 	call	10100318 <LCD_WR_REG>
        LCD_WR_DATA(0x000A);
1010044c:	01000284 	movi	r4,10
10100450:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00A2);
10100454:	01002884 	movi	r4,162
10100458:	01002e80 	call	101002e8 <LCD_WR_DATA>

    LCD_WR_REG(0x00C0);    //Power control
1010045c:	01003004 	movi	r4,192
10100460:	01003180 	call	10100318 <LCD_WR_REG>
        LCD_WR_DATA(0x0005);   //VRH[5:0]
10100464:	01000144 	movi	r4,5
10100468:	01002e80 	call	101002e8 <LCD_WR_DATA>

    LCD_WR_REG(0x00C1);    //Power control
1010046c:	01003044 	movi	r4,193
10100470:	01003180 	call	10100318 <LCD_WR_REG>
        LCD_WR_DATA(0x0011);   //SAP[2:0];BT[3:0]
10100474:	01000444 	movi	r4,17
10100478:	01002e80 	call	101002e8 <LCD_WR_DATA>

    LCD_WR_REG(0x00C5);    //VCM control
1010047c:	01003144 	movi	r4,197
10100480:	01003180 	call	10100318 <LCD_WR_REG>
        LCD_WR_DATA(0x0045);       //3F
10100484:	01001144 	movi	r4,69
10100488:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0045);       //3C
1010048c:	01001144 	movi	r4,69
10100490:	01002e80 	call	101002e8 <LCD_WR_DATA>

     LCD_WR_REG(0x00C7);    //VCM control2
10100494:	010031c4 	movi	r4,199
10100498:	01003180 	call	10100318 <LCD_WR_REG>
         LCD_WR_DATA(0X00a2);
1010049c:	01002884 	movi	r4,162
101004a0:	01002e80 	call	101002e8 <LCD_WR_DATA>

    LCD_WR_REG(0x0036);    // Memory Access Control
101004a4:	01000d84 	movi	r4,54
101004a8:	01003180 	call	10100318 <LCD_WR_REG>
        LCD_WR_DATA(0x0008);//48
101004ac:	01000204 	movi	r4,8
101004b0:	01002e80 	call	101002e8 <LCD_WR_DATA>

    LCD_WR_REG(0x00F2);    // 3Gamma Function Disable
101004b4:	01003c84 	movi	r4,242
101004b8:	01003180 	call	10100318 <LCD_WR_REG>
        LCD_WR_DATA(0x0000);
101004bc:	0009883a 	mov	r4,zero
101004c0:	01002e80 	call	101002e8 <LCD_WR_DATA>

    LCD_WR_REG(0x0026);    //Gamma curve selected
101004c4:	01000984 	movi	r4,38
101004c8:	01003180 	call	10100318 <LCD_WR_REG>
        LCD_WR_DATA(0x0001);
101004cc:	01000044 	movi	r4,1
101004d0:	01002e80 	call	101002e8 <LCD_WR_DATA>

    LCD_WR_REG(0x00E0);    //Set Gamma
101004d4:	01003804 	movi	r4,224
101004d8:	01003180 	call	10100318 <LCD_WR_REG>
        LCD_WR_DATA(0x000F);
101004dc:	010003c4 	movi	r4,15
101004e0:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0026);
101004e4:	01000984 	movi	r4,38
101004e8:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0024);
101004ec:	01000904 	movi	r4,36
101004f0:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x000b);
101004f4:	010002c4 	movi	r4,11
101004f8:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x000E);
101004fc:	01000384 	movi	r4,14
10100500:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0008);
10100504:	01000204 	movi	r4,8
10100508:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x004b);
1010050c:	010012c4 	movi	r4,75
10100510:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0X00a8);
10100514:	01002a04 	movi	r4,168
10100518:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x003b);
1010051c:	01000ec4 	movi	r4,59
10100520:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x000a);
10100524:	01000284 	movi	r4,10
10100528:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0014);
1010052c:	01000504 	movi	r4,20
10100530:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0006);
10100534:	01000184 	movi	r4,6
10100538:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0010);
1010053c:	01000404 	movi	r4,16
10100540:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0009);
10100544:	01000244 	movi	r4,9
10100548:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0000);
1010054c:	0009883a 	mov	r4,zero
10100550:	01002e80 	call	101002e8 <LCD_WR_DATA>

    LCD_WR_REG(0X00E1);    //Set Gamma
10100554:	01003844 	movi	r4,225
10100558:	01003180 	call	10100318 <LCD_WR_REG>
        LCD_WR_DATA(0x0000);
1010055c:	0009883a 	mov	r4,zero
10100560:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x001c);
10100564:	01000704 	movi	r4,28
10100568:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0020);
1010056c:	01000804 	movi	r4,32
10100570:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0004);
10100574:	01000104 	movi	r4,4
10100578:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0010);
1010057c:	01000404 	movi	r4,16
10100580:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0008);
10100584:	01000204 	movi	r4,8
10100588:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0034);
1010058c:	01000d04 	movi	r4,52
10100590:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0047);
10100594:	010011c4 	movi	r4,71
10100598:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0044);
1010059c:	01001104 	movi	r4,68
101005a0:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0005);
101005a4:	01000144 	movi	r4,5
101005a8:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x000b);
101005ac:	010002c4 	movi	r4,11
101005b0:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0009);
101005b4:	01000244 	movi	r4,9
101005b8:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x002f);
101005bc:	01000bc4 	movi	r4,47
101005c0:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0036);
101005c4:	01000d84 	movi	r4,54
101005c8:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x000f);
101005cc:	010003c4 	movi	r4,15
101005d0:	01002e80 	call	101002e8 <LCD_WR_DATA>

    LCD_WR_REG(0x002A);
101005d4:	01000a84 	movi	r4,42
101005d8:	01003180 	call	10100318 <LCD_WR_REG>
        LCD_WR_DATA(0x0000);
101005dc:	0009883a 	mov	r4,zero
101005e0:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0000);
101005e4:	0009883a 	mov	r4,zero
101005e8:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0000);
101005ec:	0009883a 	mov	r4,zero
101005f0:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00ef);
101005f4:	01003bc4 	movi	r4,239
101005f8:	01002e80 	call	101002e8 <LCD_WR_DATA>

     LCD_WR_REG(0x002B);
101005fc:	01000ac4 	movi	r4,43
10100600:	01003180 	call	10100318 <LCD_WR_REG>
        LCD_WR_DATA(0x0000);
10100604:	0009883a 	mov	r4,zero
10100608:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0000);
1010060c:	0009883a 	mov	r4,zero
10100610:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0001);
10100614:	01000044 	movi	r4,1
10100618:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x003f);
1010061c:	01000fc4 	movi	r4,63
10100620:	01002e80 	call	101002e8 <LCD_WR_DATA>

    LCD_WR_REG(0x003A);
10100624:	01000e84 	movi	r4,58
10100628:	01003180 	call	10100318 <LCD_WR_REG>
        LCD_WR_DATA(0x0055);
1010062c:	01001544 	movi	r4,85
10100630:	01002e80 	call	101002e8 <LCD_WR_DATA>

    LCD_WR_REG(0x00f6);
10100634:	01003d84 	movi	r4,246
10100638:	01003180 	call	10100318 <LCD_WR_REG>
        LCD_WR_DATA(0x0001);
1010063c:	01000044 	movi	r4,1
10100640:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0030);
10100644:	01000c04 	movi	r4,48
10100648:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0000);
1010064c:	0009883a 	mov	r4,zero
10100650:	01002e80 	call	101002e8 <LCD_WR_DATA>

    LCD_WR_REG(0x0029); //display on
10100654:	01000a44 	movi	r4,41
10100658:	01003180 	call	10100318 <LCD_WR_REG>


    LCD_WR_REG(0x0036); // Memory access control (MADCTL B5 = 1)
1010065c:	01000d84 	movi	r4,54
10100660:	01003180 	call	10100318 <LCD_WR_REG>
        LCD_WR_DATA(0x0028); // MY MX MV ML_BGR MH 0 0 -> 0b0010 1000
10100664:	01000a04 	movi	r4,40
10100668:	01002e80 	call	101002e8 <LCD_WR_DATA>


    LCD_WR_REG(0x002A); // Column Address Set
1010066c:	01000a84 	movi	r4,42
10100670:	01003180 	call	10100318 <LCD_WR_REG>
        LCD_WR_DATA(0x0000); // SC0-7
10100674:	0009883a 	mov	r4,zero
10100678:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0000); // SC8-15 -> 0x0000
1010067c:	0009883a 	mov	r4,zero
10100680:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0001); // EC0-7
10100684:	01000044 	movi	r4,1
10100688:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x003F); // EC8-15 -> 0x013F
1010068c:	01000fc4 	movi	r4,63
10100690:	01002e80 	call	101002e8 <LCD_WR_DATA>


    LCD_WR_REG(0x002B); // Page Address Set
10100694:	01000ac4 	movi	r4,43
10100698:	01003180 	call	10100318 <LCD_WR_REG>
        LCD_WR_DATA(0x0000); // SP0-7
1010069c:	0009883a 	mov	r4,zero
101006a0:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0000); // SP8-15 -> 0x0000
101006a4:	0009883a 	mov	r4,zero
101006a8:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0000); // EP0-7
101006ac:	0009883a 	mov	r4,zero
101006b0:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00EF); // EP8-15 -> 0x00EF
101006b4:	01003bc4 	movi	r4,239
101006b8:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_REG(0x0029);
101006bc:	01000a44 	movi	r4,41
101006c0:	01003180 	call	10100318 <LCD_WR_REG>
}
101006c4:	0001883a 	nop
101006c8:	e037883a 	mov	sp,fp
101006cc:	dfc00117 	ldw	ra,4(sp)
101006d0:	df000017 	ldw	fp,0(sp)
101006d4:	dec00204 	addi	sp,sp,8
101006d8:	f800283a 	ret

101006dc <LCD_Clear>:

void LCD_Clear(uint Color)
{
101006dc:	defffc04 	addi	sp,sp,-16
101006e0:	dfc00315 	stw	ra,12(sp)
101006e4:	df000215 	stw	fp,8(sp)
101006e8:	df000204 	addi	fp,sp,8
101006ec:	e13fff15 	stw	r4,-4(fp)
        uint index=0;
101006f0:	e03ffe15 	stw	zero,-8(fp)
        LCD_SetCursor(0x00,0x0000);
101006f4:	000b883a 	mov	r5,zero
101006f8:	0009883a 	mov	r4,zero
101006fc:	010074c0 	call	1010074c <LCD_SetCursor>
        LCD_WR_REG(0x002C);
10100700:	01000b04 	movi	r4,44
10100704:	01003180 	call	10100318 <LCD_WR_REG>
        for(index=0;index<76800;index++)
10100708:	e03ffe15 	stw	zero,-8(fp)
1010070c:	00000506 	br	10100724 <LCD_Clear+0x48>
        {
            LCD_WR_DATA(Color);
10100710:	e13fff17 	ldw	r4,-4(fp)
10100714:	01002e80 	call	101002e8 <LCD_WR_DATA>
void LCD_Clear(uint Color)
{
        uint index=0;
        LCD_SetCursor(0x00,0x0000);
        LCD_WR_REG(0x002C);
        for(index=0;index<76800;index++)
10100718:	e0bffe17 	ldw	r2,-8(fp)
1010071c:	10800044 	addi	r2,r2,1
10100720:	e0bffe15 	stw	r2,-8(fp)
10100724:	e0fffe17 	ldw	r3,-8(fp)
10100728:	00800074 	movhi	r2,1
1010072c:	108affc4 	addi	r2,r2,11263
10100730:	10fff72e 	bgeu	r2,r3,10100710 <__alt_data_end+0xfffe0710>
        {
            LCD_WR_DATA(Color);
        }
}
10100734:	0001883a 	nop
10100738:	e037883a 	mov	sp,fp
1010073c:	dfc00117 	ldw	ra,4(sp)
10100740:	df000017 	ldw	fp,0(sp)
10100744:	dec00204 	addi	sp,sp,8
10100748:	f800283a 	ret

1010074c <LCD_SetCursor>:

void LCD_SetCursor(uint Xpos, uint Ypos)
{
1010074c:	defffc04 	addi	sp,sp,-16
10100750:	dfc00315 	stw	ra,12(sp)
10100754:	df000215 	stw	fp,8(sp)
10100758:	df000204 	addi	fp,sp,8
1010075c:	e13ffe15 	stw	r4,-8(fp)
10100760:	e17fff15 	stw	r5,-4(fp)
     LCD_WR_REG(0x002A);
10100764:	01000a84 	movi	r4,42
10100768:	01003180 	call	10100318 <LCD_WR_REG>
         LCD_WR_DATA(Xpos>>8);
1010076c:	e0bffe17 	ldw	r2,-8(fp)
10100770:	1004d23a 	srli	r2,r2,8
10100774:	1009883a 	mov	r4,r2
10100778:	01002e80 	call	101002e8 <LCD_WR_DATA>
         LCD_WR_DATA(Xpos&0XFF);
1010077c:	e0bffe17 	ldw	r2,-8(fp)
10100780:	10803fcc 	andi	r2,r2,255
10100784:	1009883a 	mov	r4,r2
10100788:	01002e80 	call	101002e8 <LCD_WR_DATA>
     LCD_WR_REG(0x002B);
1010078c:	01000ac4 	movi	r4,43
10100790:	01003180 	call	10100318 <LCD_WR_REG>
         LCD_WR_DATA(Ypos>>8);
10100794:	e0bfff17 	ldw	r2,-4(fp)
10100798:	1004d23a 	srli	r2,r2,8
1010079c:	1009883a 	mov	r4,r2
101007a0:	01002e80 	call	101002e8 <LCD_WR_DATA>
         LCD_WR_DATA(Ypos&0XFF);
101007a4:	e0bfff17 	ldw	r2,-4(fp)
101007a8:	10803fcc 	andi	r2,r2,255
101007ac:	1009883a 	mov	r4,r2
101007b0:	01002e80 	call	101002e8 <LCD_WR_DATA>
     LCD_WR_REG(0x002C);
101007b4:	01000b04 	movi	r4,44
101007b8:	01003180 	call	10100318 <LCD_WR_REG>
}
101007bc:	0001883a 	nop
101007c0:	e037883a 	mov	sp,fp
101007c4:	dfc00117 	ldw	ra,4(sp)
101007c8:	df000017 	ldw	fp,0(sp)
101007cc:	dec00204 	addi	sp,sp,8
101007d0:	f800283a 	ret

101007d4 <LCD_Swiss>:

void LCD_Swiss(uint size) {
101007d4:	defff704 	addi	sp,sp,-36
101007d8:	dfc00815 	stw	ra,32(sp)
101007dc:	df000715 	stw	fp,28(sp)
101007e0:	df000704 	addi	fp,sp,28
101007e4:	e13fff15 	stw	r4,-4(fp)

    LCD_WR_REG(0x002c);
101007e8:	01000b04 	movi	r4,44
101007ec:	01003180 	call	10100318 <LCD_WR_REG>
    LCD_Clear(RED);
101007f0:	013e0014 	movui	r4,63488
101007f4:	01006dc0 	call	101006dc <LCD_Clear>
    // 140 - 180, 60 - 140
    LCD_SetCursor(160 - size * 1/2 , 120 - size * 3/2);
101007f8:	e0bfff17 	ldw	r2,-4(fp)
101007fc:	1004d07a 	srli	r2,r2,1
10100800:	00c02804 	movi	r3,160
10100804:	1889c83a 	sub	r4,r3,r2
10100808:	e0ffff17 	ldw	r3,-4(fp)
1010080c:	1805883a 	mov	r2,r3
10100810:	1085883a 	add	r2,r2,r2
10100814:	10c5883a 	add	r2,r2,r3
10100818:	1004d07a 	srli	r2,r2,1
1010081c:	00c01e04 	movi	r3,120
10100820:	1885c83a 	sub	r2,r3,r2
10100824:	100b883a 	mov	r5,r2
10100828:	010074c0 	call	1010074c <LCD_SetCursor>
    for(int i = 0; i < size; i++) {
1010082c:	e03ff915 	stw	zero,-28(fp)
10100830:	00001c06 	br	101008a4 <LCD_Swiss+0xd0>
        for(int j = 0; j < size; j++) {
10100834:	e03ffa15 	stw	zero,-24(fp)
10100838:	00000506 	br	10100850 <LCD_Swiss+0x7c>
            LCD_WR_DATA(WHITE);
1010083c:	013fffd4 	movui	r4,65535
10100840:	01002e80 	call	101002e8 <LCD_WR_DATA>
    LCD_WR_REG(0x002c);
    LCD_Clear(RED);
    // 140 - 180, 60 - 140
    LCD_SetCursor(160 - size * 1/2 , 120 - size * 3/2);
    for(int i = 0; i < size; i++) {
        for(int j = 0; j < size; j++) {
10100844:	e0bffa17 	ldw	r2,-24(fp)
10100848:	10800044 	addi	r2,r2,1
1010084c:	e0bffa15 	stw	r2,-24(fp)
10100850:	e0fffa17 	ldw	r3,-24(fp)
10100854:	e0bfff17 	ldw	r2,-4(fp)
10100858:	18bff836 	bltu	r3,r2,1010083c <__alt_data_end+0xfffe083c>
            LCD_WR_DATA(WHITE);
        }
        LCD_SetCursor(160 - size * 1/2, 120 - size * 3/2 + i);
1010085c:	e0bfff17 	ldw	r2,-4(fp)
10100860:	1004d07a 	srli	r2,r2,1
10100864:	00c02804 	movi	r3,160
10100868:	188dc83a 	sub	r6,r3,r2
1010086c:	e13ff917 	ldw	r4,-28(fp)
10100870:	e0ffff17 	ldw	r3,-4(fp)
10100874:	1805883a 	mov	r2,r3
10100878:	1085883a 	add	r2,r2,r2
1010087c:	10c5883a 	add	r2,r2,r3
10100880:	1004d07a 	srli	r2,r2,1
10100884:	2085c83a 	sub	r2,r4,r2
10100888:	10801e04 	addi	r2,r2,120
1010088c:	100b883a 	mov	r5,r2
10100890:	3009883a 	mov	r4,r6
10100894:	010074c0 	call	1010074c <LCD_SetCursor>

    LCD_WR_REG(0x002c);
    LCD_Clear(RED);
    // 140 - 180, 60 - 140
    LCD_SetCursor(160 - size * 1/2 , 120 - size * 3/2);
    for(int i = 0; i < size; i++) {
10100898:	e0bff917 	ldw	r2,-28(fp)
1010089c:	10800044 	addi	r2,r2,1
101008a0:	e0bff915 	stw	r2,-28(fp)
101008a4:	e0fff917 	ldw	r3,-28(fp)
101008a8:	e0bfff17 	ldw	r2,-4(fp)
101008ac:	18bfe136 	bltu	r3,r2,10100834 <__alt_data_end+0xfffe0834>
            LCD_WR_DATA(WHITE);
        }
        LCD_SetCursor(160 - size * 1/2, 120 - size * 3/2 + i);
    }

    LCD_SetCursor(160 - size * 3/2 , 120 - size * 1/2);
101008b0:	e0ffff17 	ldw	r3,-4(fp)
101008b4:	1805883a 	mov	r2,r3
101008b8:	1085883a 	add	r2,r2,r2
101008bc:	10c5883a 	add	r2,r2,r3
101008c0:	1004d07a 	srli	r2,r2,1
101008c4:	00c02804 	movi	r3,160
101008c8:	1889c83a 	sub	r4,r3,r2
101008cc:	e0bfff17 	ldw	r2,-4(fp)
101008d0:	1004d07a 	srli	r2,r2,1
101008d4:	00c01e04 	movi	r3,120
101008d8:	1885c83a 	sub	r2,r3,r2
101008dc:	100b883a 	mov	r5,r2
101008e0:	010074c0 	call	1010074c <LCD_SetCursor>
    for(int i = 0; i < size; i++) {
101008e4:	e03ffb15 	stw	zero,-20(fp)
101008e8:	00001e06 	br	10100964 <LCD_Swiss+0x190>
        for(int j = 0; j < 3*size; j++) {
101008ec:	e03ffc15 	stw	zero,-16(fp)
101008f0:	00000506 	br	10100908 <LCD_Swiss+0x134>
            LCD_WR_DATA(WHITE);
101008f4:	013fffd4 	movui	r4,65535
101008f8:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_SetCursor(160 - size * 1/2, 120 - size * 3/2 + i);
    }

    LCD_SetCursor(160 - size * 3/2 , 120 - size * 1/2);
    for(int i = 0; i < size; i++) {
        for(int j = 0; j < 3*size; j++) {
101008fc:	e0bffc17 	ldw	r2,-16(fp)
10100900:	10800044 	addi	r2,r2,1
10100904:	e0bffc15 	stw	r2,-16(fp)
10100908:	e0ffff17 	ldw	r3,-4(fp)
1010090c:	1805883a 	mov	r2,r3
10100910:	1085883a 	add	r2,r2,r2
10100914:	10c5883a 	add	r2,r2,r3
10100918:	e0fffc17 	ldw	r3,-16(fp)
1010091c:	18bff536 	bltu	r3,r2,101008f4 <__alt_data_end+0xfffe08f4>
            LCD_WR_DATA(WHITE);
        }
        LCD_SetCursor(160 - size * 3/2, 120 - size * 1/2 + i);
10100920:	e0ffff17 	ldw	r3,-4(fp)
10100924:	1805883a 	mov	r2,r3
10100928:	1085883a 	add	r2,r2,r2
1010092c:	10c5883a 	add	r2,r2,r3
10100930:	1004d07a 	srli	r2,r2,1
10100934:	00c02804 	movi	r3,160
10100938:	1889c83a 	sub	r4,r3,r2
1010093c:	e0fffb17 	ldw	r3,-20(fp)
10100940:	e0bfff17 	ldw	r2,-4(fp)
10100944:	1004d07a 	srli	r2,r2,1
10100948:	1885c83a 	sub	r2,r3,r2
1010094c:	10801e04 	addi	r2,r2,120
10100950:	100b883a 	mov	r5,r2
10100954:	010074c0 	call	1010074c <LCD_SetCursor>
        }
        LCD_SetCursor(160 - size * 1/2, 120 - size * 3/2 + i);
    }

    LCD_SetCursor(160 - size * 3/2 , 120 - size * 1/2);
    for(int i = 0; i < size; i++) {
10100958:	e0bffb17 	ldw	r2,-20(fp)
1010095c:	10800044 	addi	r2,r2,1
10100960:	e0bffb15 	stw	r2,-20(fp)
10100964:	e0fffb17 	ldw	r3,-20(fp)
10100968:	e0bfff17 	ldw	r2,-4(fp)
1010096c:	18bfdf36 	bltu	r3,r2,101008ec <__alt_data_end+0xfffe08ec>
            LCD_WR_DATA(WHITE);
        }
        LCD_SetCursor(160 - size * 3/2, 120 - size * 1/2 + i);
    }

    LCD_SetCursor(160 - size * 1/2 , 120 + size * 1/2);
10100970:	e0bfff17 	ldw	r2,-4(fp)
10100974:	1004d07a 	srli	r2,r2,1
10100978:	00c02804 	movi	r3,160
1010097c:	1887c83a 	sub	r3,r3,r2
10100980:	e0bfff17 	ldw	r2,-4(fp)
10100984:	1004d07a 	srli	r2,r2,1
10100988:	10801e04 	addi	r2,r2,120
1010098c:	100b883a 	mov	r5,r2
10100990:	1809883a 	mov	r4,r3
10100994:	010074c0 	call	1010074c <LCD_SetCursor>
   for(int i = 0; i < size; i++) {
10100998:	e03ffd15 	stw	zero,-12(fp)
1010099c:	00001806 	br	10100a00 <LCD_Swiss+0x22c>
       for(int j = 0; j < size; j++) {
101009a0:	e03ffe15 	stw	zero,-8(fp)
101009a4:	00000506 	br	101009bc <LCD_Swiss+0x1e8>
           LCD_WR_DATA(WHITE);
101009a8:	013fffd4 	movui	r4,65535
101009ac:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_SetCursor(160 - size * 3/2, 120 - size * 1/2 + i);
    }

    LCD_SetCursor(160 - size * 1/2 , 120 + size * 1/2);
   for(int i = 0; i < size; i++) {
       for(int j = 0; j < size; j++) {
101009b0:	e0bffe17 	ldw	r2,-8(fp)
101009b4:	10800044 	addi	r2,r2,1
101009b8:	e0bffe15 	stw	r2,-8(fp)
101009bc:	e0fffe17 	ldw	r3,-8(fp)
101009c0:	e0bfff17 	ldw	r2,-4(fp)
101009c4:	18bff836 	bltu	r3,r2,101009a8 <__alt_data_end+0xfffe09a8>
           LCD_WR_DATA(WHITE);
       }
       LCD_SetCursor(160 - size * 1/2, 120 + size * 1/2 + i);
101009c8:	e0bfff17 	ldw	r2,-4(fp)
101009cc:	1004d07a 	srli	r2,r2,1
101009d0:	00c02804 	movi	r3,160
101009d4:	1889c83a 	sub	r4,r3,r2
101009d8:	e0bfff17 	ldw	r2,-4(fp)
101009dc:	1006d07a 	srli	r3,r2,1
101009e0:	e0bffd17 	ldw	r2,-12(fp)
101009e4:	1885883a 	add	r2,r3,r2
101009e8:	10801e04 	addi	r2,r2,120
101009ec:	100b883a 	mov	r5,r2
101009f0:	010074c0 	call	1010074c <LCD_SetCursor>
        }
        LCD_SetCursor(160 - size * 3/2, 120 - size * 1/2 + i);
    }

    LCD_SetCursor(160 - size * 1/2 , 120 + size * 1/2);
   for(int i = 0; i < size; i++) {
101009f4:	e0bffd17 	ldw	r2,-12(fp)
101009f8:	10800044 	addi	r2,r2,1
101009fc:	e0bffd15 	stw	r2,-12(fp)
10100a00:	e0fffd17 	ldw	r3,-12(fp)
10100a04:	e0bfff17 	ldw	r2,-4(fp)
10100a08:	18bfe536 	bltu	r3,r2,101009a0 <__alt_data_end+0xfffe09a0>
       for(int j = 0; j < size; j++) {
           LCD_WR_DATA(WHITE);
       }
       LCD_SetCursor(160 - size * 1/2, 120 + size * 1/2 + i);
   }
   LCD_SetCursor(0,0);
10100a0c:	000b883a 	mov	r5,zero
10100a10:	0009883a 	mov	r4,zero
10100a14:	010074c0 	call	1010074c <LCD_SetCursor>
}
10100a18:	0001883a 	nop
10100a1c:	e037883a 	mov	sp,fp
10100a20:	dfc00117 	ldw	ra,4(sp)
10100a24:	df000017 	ldw	fp,0(sp)
10100a28:	dec00204 	addi	sp,sp,8
10100a2c:	f800283a 	ret

10100a30 <LCD_reset>:

void LCD_reset(void) {
10100a30:	deffff04 	addi	sp,sp,-4
10100a34:	df000015 	stw	fp,0(sp)
10100a38:	d839883a 	mov	fp,sp
    IOWR_32DIRECT(LCD_CONTROLLER_0_BASE, LCD_COMMAND_OFFSET, 0x0001);
10100a3c:	00c00044 	movi	r3,1
10100a40:	00800204 	movi	r2,8
10100a44:	10c00035 	stwio	r3,0(r2)
}
10100a48:	0001883a 	nop
10100a4c:	e037883a 	mov	sp,fp
10100a50:	df000017 	ldw	fp,0(sp)
10100a54:	dec00104 	addi	sp,sp,4
10100a58:	f800283a 	ret

10100a5c <MEM_WR>:

void MEM_WR(uint offset, uint data) {
10100a5c:	defffd04 	addi	sp,sp,-12
10100a60:	df000215 	stw	fp,8(sp)
10100a64:	df000204 	addi	fp,sp,8
10100a68:	e13ffe15 	stw	r4,-8(fp)
10100a6c:	e17fff15 	stw	r5,-4(fp)
    IOWR_32DIRECT(HPS_0_BRIDGES_BASE, offset, data);
10100a70:	e0fffe17 	ldw	r3,-8(fp)
10100a74:	00900034 	movhi	r2,16384
10100a78:	1885883a 	add	r2,r3,r2
10100a7c:	e0ffff17 	ldw	r3,-4(fp)
10100a80:	10c00035 	stwio	r3,0(r2)
}
10100a84:	0001883a 	nop
10100a88:	e037883a 	mov	sp,fp
10100a8c:	df000017 	ldw	fp,0(sp)
10100a90:	dec00104 	addi	sp,sp,4
10100a94:	f800283a 	ret

10100a98 <BUFF_ADD_WR>:

void BUFF_ADD_WR(uint data){
10100a98:	defffe04 	addi	sp,sp,-8
10100a9c:	df000115 	stw	fp,4(sp)
10100aa0:	df000104 	addi	fp,sp,4
10100aa4:	e13fff15 	stw	r4,-4(fp)
    IOWR_32DIRECT(LCD_CONTROLLER_0_BASE, BUFFER_ADDRESS_OFFSET, data);
10100aa8:	e0bfff17 	ldw	r2,-4(fp)
10100aac:	0007883a 	mov	r3,zero
10100ab0:	18800035 	stwio	r2,0(r3)
}
10100ab4:	0001883a 	nop
10100ab8:	e037883a 	mov	sp,fp
10100abc:	df000017 	ldw	fp,0(sp)
10100ac0:	dec00104 	addi	sp,sp,4
10100ac4:	f800283a 	ret

10100ac8 <BUFF_LEN_WR>:

void BUFF_LEN_WR(uint data){
10100ac8:	defffe04 	addi	sp,sp,-8
10100acc:	df000115 	stw	fp,4(sp)
10100ad0:	df000104 	addi	fp,sp,4
10100ad4:	e13fff15 	stw	r4,-4(fp)
    IOWR_32DIRECT(LCD_CONTROLLER_0_BASE, BUFFER_LENGTH_OFFSET, data);
10100ad8:	e0ffff17 	ldw	r3,-4(fp)
10100adc:	00800104 	movi	r2,4
10100ae0:	10c00035 	stwio	r3,0(r2)
}
10100ae4:	0001883a 	nop
10100ae8:	e037883a 	mov	sp,fp
10100aec:	df000017 	ldw	fp,0(sp)
10100af0:	dec00104 	addi	sp,sp,4
10100af4:	f800283a 	ret

10100af8 <BURST_COUNT_WR>:

void BURST_COUNT_WR(uint data){
10100af8:	defffe04 	addi	sp,sp,-8
10100afc:	df000115 	stw	fp,4(sp)
10100b00:	df000104 	addi	fp,sp,4
10100b04:	e13fff15 	stw	r4,-4(fp)
    IOWR_32DIRECT(LCD_CONTROLLER_0_BASE, BURST_COUNT_OFFSET, data);
10100b08:	e0ffff17 	ldw	r3,-4(fp)
10100b0c:	00800404 	movi	r2,16
10100b10:	10c00035 	stwio	r3,0(r2)
}
10100b14:	0001883a 	nop
10100b18:	e037883a 	mov	sp,fp
10100b1c:	df000017 	ldw	fp,0(sp)
10100b20:	dec00104 	addi	sp,sp,4
10100b24:	f800283a 	ret

10100b28 <test>:

void test(void) {
10100b28:	defff904 	addi	sp,sp,-28
10100b2c:	dfc00615 	stw	ra,24(sp)
10100b30:	df000515 	stw	fp,20(sp)
10100b34:	df000504 	addi	fp,sp,20
    int verbose = 0;
10100b38:	e03ffe15 	stw	zero,-8(fp)
    printf("sending data to SDRAM... \n");
10100b3c:	01040474 	movhi	r4,4113
10100b40:	21007f04 	addi	r4,r4,508
10100b44:	010100c0 	call	1010100c <puts>
    // write to SDRAM
    for(int i = 0; i < BUFFER_LENGTH * 4; i = i + 4){
10100b48:	e03ffb15 	stw	zero,-20(fp)
10100b4c:	00000706 	br	10100b6c <test+0x44>
        MEM_WR(BUFFER1_OFFSET + i, 0x00000000);
10100b50:	e0bffb17 	ldw	r2,-20(fp)
10100b54:	000b883a 	mov	r5,zero
10100b58:	1009883a 	mov	r4,r2
10100b5c:	0100a5c0 	call	10100a5c <MEM_WR>

void test(void) {
    int verbose = 0;
    printf("sending data to SDRAM... \n");
    // write to SDRAM
    for(int i = 0; i < BUFFER_LENGTH * 4; i = i + 4){
10100b60:	e0bffb17 	ldw	r2,-20(fp)
10100b64:	10800104 	addi	r2,r2,4
10100b68:	e0bffb15 	stw	r2,-20(fp)
10100b6c:	e0fffb17 	ldw	r3,-20(fp)
10100b70:	00800274 	movhi	r2,9
10100b74:	1097ffc4 	addi	r2,r2,24575
10100b78:	10fff50e 	bge	r2,r3,10100b50 <__alt_data_end+0xfffe0b50>
        MEM_WR(BUFFER1_OFFSET + i, 0x00000000);
    }

    for(int i = 0; i < BUFFER_LENGTH; i = i + 4){
10100b7c:	e03ffc15 	stw	zero,-16(fp)
10100b80:	00001f06 	br	10100c00 <test+0xd8>
        if(i%3 == 0) {
10100b84:	e0bffc17 	ldw	r2,-16(fp)
10100b88:	014000c4 	movi	r5,3
10100b8c:	1009883a 	mov	r4,r2
10100b90:	0100db00 	call	10100db0 <__modsi3>
10100b94:	1000061e 	bne	r2,zero,10100bb0 <test+0x88>
            MEM_WR(BUFFER1_OFFSET + i, 0x07e0f800);
10100b98:	e0bffc17 	ldw	r2,-16(fp)
10100b9c:	0141f874 	movhi	r5,2017
10100ba0:	297e0004 	addi	r5,r5,-2048
10100ba4:	1009883a 	mov	r4,r2
10100ba8:	0100a5c0 	call	10100a5c <MEM_WR>
10100bac:	00001106 	br	10100bf4 <test+0xcc>
        } else if(i%3 == 1) {
10100bb0:	e0bffc17 	ldw	r2,-16(fp)
10100bb4:	014000c4 	movi	r5,3
10100bb8:	1009883a 	mov	r4,r2
10100bbc:	0100db00 	call	10100db0 <__modsi3>
10100bc0:	10800058 	cmpnei	r2,r2,1
10100bc4:	1000061e 	bne	r2,zero,10100be0 <test+0xb8>
            MEM_WR(BUFFER1_OFFSET + i, 0xf800008f);
10100bc8:	e0bffc17 	ldw	r2,-16(fp)
10100bcc:	017e0034 	movhi	r5,63488
10100bd0:	294023c4 	addi	r5,r5,143
10100bd4:	1009883a 	mov	r4,r2
10100bd8:	0100a5c0 	call	10100a5c <MEM_WR>
10100bdc:	00000506 	br	10100bf4 <test+0xcc>
        } else {
            MEM_WR(BUFFER1_OFFSET + i, 0x008f07e0);
10100be0:	e0bffc17 	ldw	r2,-16(fp)
10100be4:	014023f4 	movhi	r5,143
10100be8:	2941f804 	addi	r5,r5,2016
10100bec:	1009883a 	mov	r4,r2
10100bf0:	0100a5c0 	call	10100a5c <MEM_WR>
    // write to SDRAM
    for(int i = 0; i < BUFFER_LENGTH * 4; i = i + 4){
        MEM_WR(BUFFER1_OFFSET + i, 0x00000000);
    }

    for(int i = 0; i < BUFFER_LENGTH; i = i + 4){
10100bf4:	e0bffc17 	ldw	r2,-16(fp)
10100bf8:	10800104 	addi	r2,r2,4
10100bfc:	e0bffc15 	stw	r2,-16(fp)
10100c00:	e0fffc17 	ldw	r3,-16(fp)
10100c04:	008000b4 	movhi	r2,2
10100c08:	1095ffc4 	addi	r2,r2,22527
10100c0c:	10ffdd0e 	bge	r2,r3,10100b84 <__alt_data_end+0xfffe0b84>
            MEM_WR(BUFFER1_OFFSET + i, 0xf800008f);
        } else {
            MEM_WR(BUFFER1_OFFSET + i, 0x008f07e0);
        }
    }
    printf("Data successfully sent. reading \n");
10100c10:	01040474 	movhi	r4,4113
10100c14:	21008604 	addi	r4,r4,536
10100c18:	010100c0 	call	1010100c <puts>

    if(verbose == 1){
10100c1c:	e0bffe17 	ldw	r2,-8(fp)
10100c20:	10800058 	cmpnei	r2,r2,1
10100c24:	1000131e 	bne	r2,zero,10100c74 <test+0x14c>
        unsigned char r;
        for(int i = 0; i < BUFFER_LENGTH ; i = i + 4){
10100c28:	e03ffd15 	stw	zero,-12(fp)
10100c2c:	00000d06 	br	10100c64 <test+0x13c>
            r =  IORD_32DIRECT(HPS_0_BRIDGES_BASE, BUFFER1_OFFSET + i);
10100c30:	e0fffd17 	ldw	r3,-12(fp)
10100c34:	00900034 	movhi	r2,16384
10100c38:	1885883a 	add	r2,r3,r2
10100c3c:	10800037 	ldwio	r2,0(r2)
10100c40:	e0bfff05 	stb	r2,-4(fp)
            printf("%x \n", r);
10100c44:	e0bfff03 	ldbu	r2,-4(fp)
10100c48:	100b883a 	mov	r5,r2
10100c4c:	01040474 	movhi	r4,4113
10100c50:	21008f04 	addi	r4,r4,572
10100c54:	0100f100 	call	10100f10 <printf>
    }
    printf("Data successfully sent. reading \n");

    if(verbose == 1){
        unsigned char r;
        for(int i = 0; i < BUFFER_LENGTH ; i = i + 4){
10100c58:	e0bffd17 	ldw	r2,-12(fp)
10100c5c:	10800104 	addi	r2,r2,4
10100c60:	e0bffd15 	stw	r2,-12(fp)
10100c64:	e0fffd17 	ldw	r3,-12(fp)
10100c68:	008000b4 	movhi	r2,2
10100c6c:	1095ffc4 	addi	r2,r2,22527
10100c70:	10ffef0e 	bge	r2,r3,10100c30 <__alt_data_end+0xfffe0c30>
            printf("%x \n", r);
        }
    }

    // buffer address
    BUFF_ADD_WR(BUFFER1_OFFSET);
10100c74:	0009883a 	mov	r4,zero
10100c78:	0100a980 	call	10100a98 <BUFF_ADD_WR>
    waitms(1);
10100c7c:	01000044 	movi	r4,1
10100c80:	01002900 	call	10100290 <waitms>
    // buffer length
    BUFF_LEN_WR(BUFFER_LENGTH - 256);
10100c84:	010000b4 	movhi	r4,2
10100c88:	2115c004 	addi	r4,r4,22272
10100c8c:	0100ac80 	call	10100ac8 <BUFF_LEN_WR>

    printf("Buffer info sent. \n");
10100c90:	01040474 	movhi	r4,4113
10100c94:	21009104 	addi	r4,r4,580
10100c98:	010100c0 	call	1010100c <puts>
}
10100c9c:	0001883a 	nop
10100ca0:	e037883a 	mov	sp,fp
10100ca4:	dfc00117 	ldw	ra,4(sp)
10100ca8:	df000017 	ldw	fp,0(sp)
10100cac:	dec00204 	addi	sp,sp,8
10100cb0:	f800283a 	ret

10100cb4 <main>:

int main(void)
{
10100cb4:	defffe04 	addi	sp,sp,-8
10100cb8:	dfc00115 	stw	ra,4(sp)
10100cbc:	df000015 	stw	fp,0(sp)
10100cc0:	d839883a 	mov	fp,sp
    printf("start:\n");
10100cc4:	01040474 	movhi	r4,4113
10100cc8:	21009604 	addi	r4,r4,600
10100ccc:	010100c0 	call	1010100c <puts>
    LCD_Init();
10100cd0:	01003480 	call	10100348 <LCD_Init>
    BURST_COUNT_WR(16);
10100cd4:	01000404 	movi	r4,16
10100cd8:	0100af80 	call	10100af8 <BURST_COUNT_WR>
    LCD_Clear(0x0000);
10100cdc:	0009883a 	mov	r4,zero
10100ce0:	01006dc0 	call	101006dc <LCD_Clear>
    IOWR_8DIRECT(PIO_LEDS_BASE, 1, 0x0);
10100ce4:	0007883a 	mov	r3,zero
10100ce8:	00840034 	movhi	r2,4096
10100cec:	10820444 	addi	r2,r2,2065
10100cf0:	10c00025 	stbio	r3,0(r2)

    //LCD_Swiss(50);
    test();
10100cf4:	0100b280 	call	10100b28 <test>
    while(1) {
        IOWR_8DIRECT(PIO_LEDS_BASE, 1, 0xAA);
10100cf8:	00ffea84 	movi	r3,-86
10100cfc:	00840034 	movhi	r2,4096
10100d00:	10820444 	addi	r2,r2,2065
10100d04:	10c00025 	stbio	r3,0(r2)
        waitms(1000);
10100d08:	0100fa04 	movi	r4,1000
10100d0c:	01002900 	call	10100290 <waitms>
        IOWR_8DIRECT(PIO_LEDS_BASE, 1, 0x55);
10100d10:	00c01544 	movi	r3,85
10100d14:	00840034 	movhi	r2,4096
10100d18:	10820444 	addi	r2,r2,2065
10100d1c:	10c00025 	stbio	r3,0(r2)
        waitms(1000);
10100d20:	0100fa04 	movi	r4,1000
10100d24:	01002900 	call	10100290 <waitms>
    }
10100d28:	003ff306 	br	10100cf8 <__alt_data_end+0xfffe0cf8>

10100d2c <__divsi3>:
10100d2c:	20001b16 	blt	r4,zero,10100d9c <__divsi3+0x70>
10100d30:	000f883a 	mov	r7,zero
10100d34:	28001616 	blt	r5,zero,10100d90 <__divsi3+0x64>
10100d38:	200d883a 	mov	r6,r4
10100d3c:	29001a2e 	bgeu	r5,r4,10100da8 <__divsi3+0x7c>
10100d40:	00800804 	movi	r2,32
10100d44:	00c00044 	movi	r3,1
10100d48:	00000106 	br	10100d50 <__divsi3+0x24>
10100d4c:	10000d26 	beq	r2,zero,10100d84 <__divsi3+0x58>
10100d50:	294b883a 	add	r5,r5,r5
10100d54:	10bfffc4 	addi	r2,r2,-1
10100d58:	18c7883a 	add	r3,r3,r3
10100d5c:	293ffb36 	bltu	r5,r4,10100d4c <__alt_data_end+0xfffe0d4c>
10100d60:	0005883a 	mov	r2,zero
10100d64:	18000726 	beq	r3,zero,10100d84 <__divsi3+0x58>
10100d68:	0005883a 	mov	r2,zero
10100d6c:	31400236 	bltu	r6,r5,10100d78 <__divsi3+0x4c>
10100d70:	314dc83a 	sub	r6,r6,r5
10100d74:	10c4b03a 	or	r2,r2,r3
10100d78:	1806d07a 	srli	r3,r3,1
10100d7c:	280ad07a 	srli	r5,r5,1
10100d80:	183ffa1e 	bne	r3,zero,10100d6c <__alt_data_end+0xfffe0d6c>
10100d84:	38000126 	beq	r7,zero,10100d8c <__divsi3+0x60>
10100d88:	0085c83a 	sub	r2,zero,r2
10100d8c:	f800283a 	ret
10100d90:	014bc83a 	sub	r5,zero,r5
10100d94:	39c0005c 	xori	r7,r7,1
10100d98:	003fe706 	br	10100d38 <__alt_data_end+0xfffe0d38>
10100d9c:	0109c83a 	sub	r4,zero,r4
10100da0:	01c00044 	movi	r7,1
10100da4:	003fe306 	br	10100d34 <__alt_data_end+0xfffe0d34>
10100da8:	00c00044 	movi	r3,1
10100dac:	003fee06 	br	10100d68 <__alt_data_end+0xfffe0d68>

10100db0 <__modsi3>:
10100db0:	20001716 	blt	r4,zero,10100e10 <__modsi3+0x60>
10100db4:	000f883a 	mov	r7,zero
10100db8:	2005883a 	mov	r2,r4
10100dbc:	28001216 	blt	r5,zero,10100e08 <__modsi3+0x58>
10100dc0:	2900162e 	bgeu	r5,r4,10100e1c <__modsi3+0x6c>
10100dc4:	01800804 	movi	r6,32
10100dc8:	00c00044 	movi	r3,1
10100dcc:	00000106 	br	10100dd4 <__modsi3+0x24>
10100dd0:	30000a26 	beq	r6,zero,10100dfc <__modsi3+0x4c>
10100dd4:	294b883a 	add	r5,r5,r5
10100dd8:	31bfffc4 	addi	r6,r6,-1
10100ddc:	18c7883a 	add	r3,r3,r3
10100de0:	293ffb36 	bltu	r5,r4,10100dd0 <__alt_data_end+0xfffe0dd0>
10100de4:	18000526 	beq	r3,zero,10100dfc <__modsi3+0x4c>
10100de8:	1806d07a 	srli	r3,r3,1
10100dec:	11400136 	bltu	r2,r5,10100df4 <__modsi3+0x44>
10100df0:	1145c83a 	sub	r2,r2,r5
10100df4:	280ad07a 	srli	r5,r5,1
10100df8:	183ffb1e 	bne	r3,zero,10100de8 <__alt_data_end+0xfffe0de8>
10100dfc:	38000126 	beq	r7,zero,10100e04 <__modsi3+0x54>
10100e00:	0085c83a 	sub	r2,zero,r2
10100e04:	f800283a 	ret
10100e08:	014bc83a 	sub	r5,zero,r5
10100e0c:	003fec06 	br	10100dc0 <__alt_data_end+0xfffe0dc0>
10100e10:	0109c83a 	sub	r4,zero,r4
10100e14:	01c00044 	movi	r7,1
10100e18:	003fe706 	br	10100db8 <__alt_data_end+0xfffe0db8>
10100e1c:	00c00044 	movi	r3,1
10100e20:	003ff106 	br	10100de8 <__alt_data_end+0xfffe0de8>

10100e24 <__udivsi3>:
10100e24:	200d883a 	mov	r6,r4
10100e28:	2900152e 	bgeu	r5,r4,10100e80 <__udivsi3+0x5c>
10100e2c:	28001416 	blt	r5,zero,10100e80 <__udivsi3+0x5c>
10100e30:	00800804 	movi	r2,32
10100e34:	00c00044 	movi	r3,1
10100e38:	00000206 	br	10100e44 <__udivsi3+0x20>
10100e3c:	10000e26 	beq	r2,zero,10100e78 <__udivsi3+0x54>
10100e40:	28000516 	blt	r5,zero,10100e58 <__udivsi3+0x34>
10100e44:	294b883a 	add	r5,r5,r5
10100e48:	10bfffc4 	addi	r2,r2,-1
10100e4c:	18c7883a 	add	r3,r3,r3
10100e50:	293ffa36 	bltu	r5,r4,10100e3c <__alt_data_end+0xfffe0e3c>
10100e54:	18000826 	beq	r3,zero,10100e78 <__udivsi3+0x54>
10100e58:	0005883a 	mov	r2,zero
10100e5c:	31400236 	bltu	r6,r5,10100e68 <__udivsi3+0x44>
10100e60:	314dc83a 	sub	r6,r6,r5
10100e64:	10c4b03a 	or	r2,r2,r3
10100e68:	1806d07a 	srli	r3,r3,1
10100e6c:	280ad07a 	srli	r5,r5,1
10100e70:	183ffa1e 	bne	r3,zero,10100e5c <__alt_data_end+0xfffe0e5c>
10100e74:	f800283a 	ret
10100e78:	0005883a 	mov	r2,zero
10100e7c:	f800283a 	ret
10100e80:	00c00044 	movi	r3,1
10100e84:	003ff406 	br	10100e58 <__alt_data_end+0xfffe0e58>

10100e88 <__umodsi3>:
10100e88:	2005883a 	mov	r2,r4
10100e8c:	2900122e 	bgeu	r5,r4,10100ed8 <__umodsi3+0x50>
10100e90:	28001116 	blt	r5,zero,10100ed8 <__umodsi3+0x50>
10100e94:	01800804 	movi	r6,32
10100e98:	00c00044 	movi	r3,1
10100e9c:	00000206 	br	10100ea8 <__umodsi3+0x20>
10100ea0:	30000c26 	beq	r6,zero,10100ed4 <__umodsi3+0x4c>
10100ea4:	28000516 	blt	r5,zero,10100ebc <__umodsi3+0x34>
10100ea8:	294b883a 	add	r5,r5,r5
10100eac:	31bfffc4 	addi	r6,r6,-1
10100eb0:	18c7883a 	add	r3,r3,r3
10100eb4:	293ffa36 	bltu	r5,r4,10100ea0 <__alt_data_end+0xfffe0ea0>
10100eb8:	18000626 	beq	r3,zero,10100ed4 <__umodsi3+0x4c>
10100ebc:	1806d07a 	srli	r3,r3,1
10100ec0:	11400136 	bltu	r2,r5,10100ec8 <__umodsi3+0x40>
10100ec4:	1145c83a 	sub	r2,r2,r5
10100ec8:	280ad07a 	srli	r5,r5,1
10100ecc:	183ffb1e 	bne	r3,zero,10100ebc <__alt_data_end+0xfffe0ebc>
10100ed0:	f800283a 	ret
10100ed4:	f800283a 	ret
10100ed8:	00c00044 	movi	r3,1
10100edc:	003ff706 	br	10100ebc <__alt_data_end+0xfffe0ebc>

10100ee0 <_printf_r>:
10100ee0:	defffd04 	addi	sp,sp,-12
10100ee4:	2805883a 	mov	r2,r5
10100ee8:	dfc00015 	stw	ra,0(sp)
10100eec:	d9800115 	stw	r6,4(sp)
10100ef0:	d9c00215 	stw	r7,8(sp)
10100ef4:	21400217 	ldw	r5,8(r4)
10100ef8:	d9c00104 	addi	r7,sp,4
10100efc:	100d883a 	mov	r6,r2
10100f00:	01010b80 	call	101010b8 <___vfprintf_internal_r>
10100f04:	dfc00017 	ldw	ra,0(sp)
10100f08:	dec00304 	addi	sp,sp,12
10100f0c:	f800283a 	ret

10100f10 <printf>:
10100f10:	defffc04 	addi	sp,sp,-16
10100f14:	dfc00015 	stw	ra,0(sp)
10100f18:	d9400115 	stw	r5,4(sp)
10100f1c:	d9800215 	stw	r6,8(sp)
10100f20:	d9c00315 	stw	r7,12(sp)
10100f24:	00840474 	movhi	r2,4113
10100f28:	10881104 	addi	r2,r2,8260
10100f2c:	10800017 	ldw	r2,0(r2)
10100f30:	200b883a 	mov	r5,r4
10100f34:	d9800104 	addi	r6,sp,4
10100f38:	11000217 	ldw	r4,8(r2)
10100f3c:	01032b00 	call	101032b0 <__vfprintf_internal>
10100f40:	dfc00017 	ldw	ra,0(sp)
10100f44:	dec00404 	addi	sp,sp,16
10100f48:	f800283a 	ret

10100f4c <_puts_r>:
10100f4c:	defff604 	addi	sp,sp,-40
10100f50:	dc000715 	stw	r16,28(sp)
10100f54:	2021883a 	mov	r16,r4
10100f58:	2809883a 	mov	r4,r5
10100f5c:	dc400815 	stw	r17,32(sp)
10100f60:	dfc00915 	stw	ra,36(sp)
10100f64:	2823883a 	mov	r17,r5
10100f68:	01010200 	call	10101020 <strlen>
10100f6c:	10c00044 	addi	r3,r2,1
10100f70:	d8800115 	stw	r2,4(sp)
10100f74:	00840474 	movhi	r2,4113
10100f78:	10809804 	addi	r2,r2,608
10100f7c:	d8800215 	stw	r2,8(sp)
10100f80:	00800044 	movi	r2,1
10100f84:	d8800315 	stw	r2,12(sp)
10100f88:	00800084 	movi	r2,2
10100f8c:	dc400015 	stw	r17,0(sp)
10100f90:	d8c00615 	stw	r3,24(sp)
10100f94:	dec00415 	stw	sp,16(sp)
10100f98:	d8800515 	stw	r2,20(sp)
10100f9c:	80000226 	beq	r16,zero,10100fa8 <_puts_r+0x5c>
10100fa0:	80800e17 	ldw	r2,56(r16)
10100fa4:	10001426 	beq	r2,zero,10100ff8 <_puts_r+0xac>
10100fa8:	81400217 	ldw	r5,8(r16)
10100fac:	2880030b 	ldhu	r2,12(r5)
10100fb0:	10c8000c 	andi	r3,r2,8192
10100fb4:	1800061e 	bne	r3,zero,10100fd0 <_puts_r+0x84>
10100fb8:	29001917 	ldw	r4,100(r5)
10100fbc:	00f7ffc4 	movi	r3,-8193
10100fc0:	10880014 	ori	r2,r2,8192
10100fc4:	20c6703a 	and	r3,r4,r3
10100fc8:	2880030d 	sth	r2,12(r5)
10100fcc:	28c01915 	stw	r3,100(r5)
10100fd0:	d9800404 	addi	r6,sp,16
10100fd4:	8009883a 	mov	r4,r16
10100fd8:	01057e00 	call	101057e0 <__sfvwrite_r>
10100fdc:	1000091e 	bne	r2,zero,10101004 <_puts_r+0xb8>
10100fe0:	00800284 	movi	r2,10
10100fe4:	dfc00917 	ldw	ra,36(sp)
10100fe8:	dc400817 	ldw	r17,32(sp)
10100fec:	dc000717 	ldw	r16,28(sp)
10100ff0:	dec00a04 	addi	sp,sp,40
10100ff4:	f800283a 	ret
10100ff8:	8009883a 	mov	r4,r16
10100ffc:	010535c0 	call	1010535c <__sinit>
10101000:	003fe906 	br	10100fa8 <__alt_data_end+0xfffe0fa8>
10101004:	00bfffc4 	movi	r2,-1
10101008:	003ff606 	br	10100fe4 <__alt_data_end+0xfffe0fe4>

1010100c <puts>:
1010100c:	00840474 	movhi	r2,4113
10101010:	10881104 	addi	r2,r2,8260
10101014:	200b883a 	mov	r5,r4
10101018:	11000017 	ldw	r4,0(r2)
1010101c:	0100f4c1 	jmpi	10100f4c <_puts_r>

10101020 <strlen>:
10101020:	208000cc 	andi	r2,r4,3
10101024:	10002026 	beq	r2,zero,101010a8 <strlen+0x88>
10101028:	20800007 	ldb	r2,0(r4)
1010102c:	10002026 	beq	r2,zero,101010b0 <strlen+0x90>
10101030:	2005883a 	mov	r2,r4
10101034:	00000206 	br	10101040 <strlen+0x20>
10101038:	10c00007 	ldb	r3,0(r2)
1010103c:	18001826 	beq	r3,zero,101010a0 <strlen+0x80>
10101040:	10800044 	addi	r2,r2,1
10101044:	10c000cc 	andi	r3,r2,3
10101048:	183ffb1e 	bne	r3,zero,10101038 <__alt_data_end+0xfffe1038>
1010104c:	10c00017 	ldw	r3,0(r2)
10101050:	01ffbff4 	movhi	r7,65279
10101054:	39ffbfc4 	addi	r7,r7,-257
10101058:	00ca303a 	nor	r5,zero,r3
1010105c:	01a02074 	movhi	r6,32897
10101060:	19c7883a 	add	r3,r3,r7
10101064:	31a02004 	addi	r6,r6,-32640
10101068:	1946703a 	and	r3,r3,r5
1010106c:	1986703a 	and	r3,r3,r6
10101070:	1800091e 	bne	r3,zero,10101098 <strlen+0x78>
10101074:	10800104 	addi	r2,r2,4
10101078:	10c00017 	ldw	r3,0(r2)
1010107c:	19cb883a 	add	r5,r3,r7
10101080:	00c6303a 	nor	r3,zero,r3
10101084:	28c6703a 	and	r3,r5,r3
10101088:	1986703a 	and	r3,r3,r6
1010108c:	183ff926 	beq	r3,zero,10101074 <__alt_data_end+0xfffe1074>
10101090:	00000106 	br	10101098 <strlen+0x78>
10101094:	10800044 	addi	r2,r2,1
10101098:	10c00007 	ldb	r3,0(r2)
1010109c:	183ffd1e 	bne	r3,zero,10101094 <__alt_data_end+0xfffe1094>
101010a0:	1105c83a 	sub	r2,r2,r4
101010a4:	f800283a 	ret
101010a8:	2005883a 	mov	r2,r4
101010ac:	003fe706 	br	1010104c <__alt_data_end+0xfffe104c>
101010b0:	0005883a 	mov	r2,zero
101010b4:	f800283a 	ret

101010b8 <___vfprintf_internal_r>:
101010b8:	deffb804 	addi	sp,sp,-288
101010bc:	dfc04715 	stw	ra,284(sp)
101010c0:	ddc04515 	stw	r23,276(sp)
101010c4:	dd404315 	stw	r21,268(sp)
101010c8:	d9002c15 	stw	r4,176(sp)
101010cc:	282f883a 	mov	r23,r5
101010d0:	302b883a 	mov	r21,r6
101010d4:	d9c02d15 	stw	r7,180(sp)
101010d8:	df004615 	stw	fp,280(sp)
101010dc:	dd804415 	stw	r22,272(sp)
101010e0:	dd004215 	stw	r20,264(sp)
101010e4:	dcc04115 	stw	r19,260(sp)
101010e8:	dc804015 	stw	r18,256(sp)
101010ec:	dc403f15 	stw	r17,252(sp)
101010f0:	dc003e15 	stw	r16,248(sp)
101010f4:	0105ed00 	call	10105ed0 <_localeconv_r>
101010f8:	10800017 	ldw	r2,0(r2)
101010fc:	1009883a 	mov	r4,r2
10101100:	d8803415 	stw	r2,208(sp)
10101104:	01010200 	call	10101020 <strlen>
10101108:	d8803715 	stw	r2,220(sp)
1010110c:	d8802c17 	ldw	r2,176(sp)
10101110:	10000226 	beq	r2,zero,1010111c <___vfprintf_internal_r+0x64>
10101114:	10800e17 	ldw	r2,56(r2)
10101118:	1000f926 	beq	r2,zero,10101500 <___vfprintf_internal_r+0x448>
1010111c:	b880030b 	ldhu	r2,12(r23)
10101120:	10c8000c 	andi	r3,r2,8192
10101124:	1800061e 	bne	r3,zero,10101140 <___vfprintf_internal_r+0x88>
10101128:	b9001917 	ldw	r4,100(r23)
1010112c:	00f7ffc4 	movi	r3,-8193
10101130:	10880014 	ori	r2,r2,8192
10101134:	20c6703a 	and	r3,r4,r3
10101138:	b880030d 	sth	r2,12(r23)
1010113c:	b8c01915 	stw	r3,100(r23)
10101140:	10c0020c 	andi	r3,r2,8
10101144:	1800c126 	beq	r3,zero,1010144c <___vfprintf_internal_r+0x394>
10101148:	b8c00417 	ldw	r3,16(r23)
1010114c:	1800bf26 	beq	r3,zero,1010144c <___vfprintf_internal_r+0x394>
10101150:	1080068c 	andi	r2,r2,26
10101154:	00c00284 	movi	r3,10
10101158:	10c0c426 	beq	r2,r3,1010146c <___vfprintf_internal_r+0x3b4>
1010115c:	d8c00404 	addi	r3,sp,16
10101160:	05040474 	movhi	r20,4113
10101164:	d9001e04 	addi	r4,sp,120
10101168:	a500a984 	addi	r20,r20,678
1010116c:	d8c01e15 	stw	r3,120(sp)
10101170:	d8002015 	stw	zero,128(sp)
10101174:	d8001f15 	stw	zero,124(sp)
10101178:	d8003315 	stw	zero,204(sp)
1010117c:	d8003615 	stw	zero,216(sp)
10101180:	d8003815 	stw	zero,224(sp)
10101184:	1811883a 	mov	r8,r3
10101188:	d8003915 	stw	zero,228(sp)
1010118c:	d8003a15 	stw	zero,232(sp)
10101190:	d8002f15 	stw	zero,188(sp)
10101194:	d9002815 	stw	r4,160(sp)
10101198:	a8800007 	ldb	r2,0(r21)
1010119c:	10027b26 	beq	r2,zero,10101b8c <___vfprintf_internal_r+0xad4>
101011a0:	00c00944 	movi	r3,37
101011a4:	a821883a 	mov	r16,r21
101011a8:	10c0021e 	bne	r2,r3,101011b4 <___vfprintf_internal_r+0xfc>
101011ac:	00001406 	br	10101200 <___vfprintf_internal_r+0x148>
101011b0:	10c00326 	beq	r2,r3,101011c0 <___vfprintf_internal_r+0x108>
101011b4:	84000044 	addi	r16,r16,1
101011b8:	80800007 	ldb	r2,0(r16)
101011bc:	103ffc1e 	bne	r2,zero,101011b0 <__alt_data_end+0xfffe11b0>
101011c0:	8563c83a 	sub	r17,r16,r21
101011c4:	88000e26 	beq	r17,zero,10101200 <___vfprintf_internal_r+0x148>
101011c8:	d8c02017 	ldw	r3,128(sp)
101011cc:	d8801f17 	ldw	r2,124(sp)
101011d0:	45400015 	stw	r21,0(r8)
101011d4:	1c47883a 	add	r3,r3,r17
101011d8:	10800044 	addi	r2,r2,1
101011dc:	d8c02015 	stw	r3,128(sp)
101011e0:	44400115 	stw	r17,4(r8)
101011e4:	d8801f15 	stw	r2,124(sp)
101011e8:	00c001c4 	movi	r3,7
101011ec:	1880a716 	blt	r3,r2,1010148c <___vfprintf_internal_r+0x3d4>
101011f0:	42000204 	addi	r8,r8,8
101011f4:	d9402f17 	ldw	r5,188(sp)
101011f8:	2c4b883a 	add	r5,r5,r17
101011fc:	d9402f15 	stw	r5,188(sp)
10101200:	80800007 	ldb	r2,0(r16)
10101204:	1000a826 	beq	r2,zero,101014a8 <___vfprintf_internal_r+0x3f0>
10101208:	84400047 	ldb	r17,1(r16)
1010120c:	00bfffc4 	movi	r2,-1
10101210:	85400044 	addi	r21,r16,1
10101214:	d8002785 	stb	zero,158(sp)
10101218:	0007883a 	mov	r3,zero
1010121c:	000f883a 	mov	r7,zero
10101220:	d8802915 	stw	r2,164(sp)
10101224:	d8003115 	stw	zero,196(sp)
10101228:	0025883a 	mov	r18,zero
1010122c:	01401604 	movi	r5,88
10101230:	01800244 	movi	r6,9
10101234:	02800a84 	movi	r10,42
10101238:	02401b04 	movi	r9,108
1010123c:	ad400044 	addi	r21,r21,1
10101240:	88bff804 	addi	r2,r17,-32
10101244:	28830436 	bltu	r5,r2,10101e58 <___vfprintf_internal_r+0xda0>
10101248:	100490ba 	slli	r2,r2,2
1010124c:	01040434 	movhi	r4,4112
10101250:	21049804 	addi	r4,r4,4704
10101254:	1105883a 	add	r2,r2,r4
10101258:	10800017 	ldw	r2,0(r2)
1010125c:	1000683a 	jmp	r2
10101260:	10101d78 	rdprs	zero,r2,16501
10101264:	10101e58 	cmpnei	zero,r2,16505
10101268:	10101e58 	cmpnei	zero,r2,16505
1010126c:	10101d98 	cmpnei	zero,r2,16502
10101270:	10101e58 	cmpnei	zero,r2,16505
10101274:	10101e58 	cmpnei	zero,r2,16505
10101278:	10101e58 	cmpnei	zero,r2,16505
1010127c:	10101e58 	cmpnei	zero,r2,16505
10101280:	10101e58 	cmpnei	zero,r2,16505
10101284:	10101e58 	cmpnei	zero,r2,16505
10101288:	1010150c 	andi	zero,r2,16468
1010128c:	10101cb4 	orhi	zero,r2,16498
10101290:	10101e58 	cmpnei	zero,r2,16505
10101294:	101013d4 	ori	zero,r2,16463
10101298:	10101534 	orhi	zero,r2,16468
1010129c:	10101e58 	cmpnei	zero,r2,16505
101012a0:	10101574 	orhi	zero,r2,16469
101012a4:	10101580 	call	11010158 <__alt_data_end+0xef0158>
101012a8:	10101580 	call	11010158 <__alt_data_end+0xef0158>
101012ac:	10101580 	call	11010158 <__alt_data_end+0xef0158>
101012b0:	10101580 	call	11010158 <__alt_data_end+0xef0158>
101012b4:	10101580 	call	11010158 <__alt_data_end+0xef0158>
101012b8:	10101580 	call	11010158 <__alt_data_end+0xef0158>
101012bc:	10101580 	call	11010158 <__alt_data_end+0xef0158>
101012c0:	10101580 	call	11010158 <__alt_data_end+0xef0158>
101012c4:	10101580 	call	11010158 <__alt_data_end+0xef0158>
101012c8:	10101e58 	cmpnei	zero,r2,16505
101012cc:	10101e58 	cmpnei	zero,r2,16505
101012d0:	10101e58 	cmpnei	zero,r2,16505
101012d4:	10101e58 	cmpnei	zero,r2,16505
101012d8:	10101e58 	cmpnei	zero,r2,16505
101012dc:	10101e58 	cmpnei	zero,r2,16505
101012e0:	10101e58 	cmpnei	zero,r2,16505
101012e4:	10101e58 	cmpnei	zero,r2,16505
101012e8:	10101e58 	cmpnei	zero,r2,16505
101012ec:	10101e58 	cmpnei	zero,r2,16505
101012f0:	101015b4 	orhi	zero,r2,16470
101012f4:	10101670 	cmpltui	zero,r2,16473
101012f8:	10101e58 	cmpnei	zero,r2,16505
101012fc:	10101670 	cmpltui	zero,r2,16473
10101300:	10101e58 	cmpnei	zero,r2,16505
10101304:	10101e58 	cmpnei	zero,r2,16505
10101308:	10101e58 	cmpnei	zero,r2,16505
1010130c:	10101e58 	cmpnei	zero,r2,16505
10101310:	10101710 	cmplti	zero,r2,16476
10101314:	10101e58 	cmpnei	zero,r2,16505
10101318:	10101e58 	cmpnei	zero,r2,16505
1010131c:	1010171c 	xori	zero,r2,16476
10101320:	10101e58 	cmpnei	zero,r2,16505
10101324:	10101e58 	cmpnei	zero,r2,16505
10101328:	10101e58 	cmpnei	zero,r2,16505
1010132c:	10101e58 	cmpnei	zero,r2,16505
10101330:	10101e58 	cmpnei	zero,r2,16505
10101334:	10101b94 	ori	zero,r2,16494
10101338:	10101e58 	cmpnei	zero,r2,16505
1010133c:	10101e58 	cmpnei	zero,r2,16505
10101340:	10101bf4 	orhi	zero,r2,16495
10101344:	10101e58 	cmpnei	zero,r2,16505
10101348:	10101e58 	cmpnei	zero,r2,16505
1010134c:	10101e58 	cmpnei	zero,r2,16505
10101350:	10101e58 	cmpnei	zero,r2,16505
10101354:	10101e58 	cmpnei	zero,r2,16505
10101358:	10101e58 	cmpnei	zero,r2,16505
1010135c:	10101e58 	cmpnei	zero,r2,16505
10101360:	10101e58 	cmpnei	zero,r2,16505
10101364:	10101e58 	cmpnei	zero,r2,16505
10101368:	10101e58 	cmpnei	zero,r2,16505
1010136c:	10101e04 	addi	zero,r2,16504
10101370:	10101da4 	muli	zero,r2,16502
10101374:	10101670 	cmpltui	zero,r2,16473
10101378:	10101670 	cmpltui	zero,r2,16473
1010137c:	10101670 	cmpltui	zero,r2,16473
10101380:	10101db4 	orhi	zero,r2,16502
10101384:	10101da4 	muli	zero,r2,16502
10101388:	10101e58 	cmpnei	zero,r2,16505
1010138c:	10101e58 	cmpnei	zero,r2,16505
10101390:	10101dc0 	call	110101dc <__alt_data_end+0xef01dc>
10101394:	10101e58 	cmpnei	zero,r2,16505
10101398:	10101dd0 	cmplti	zero,r2,16503
1010139c:	10101ca4 	muli	zero,r2,16498
101013a0:	101013e0 	cmpeqi	zero,r2,16463
101013a4:	10101cc4 	addi	zero,r2,16499
101013a8:	10101e58 	cmpnei	zero,r2,16505
101013ac:	10101cd0 	cmplti	zero,r2,16499
101013b0:	10101e58 	cmpnei	zero,r2,16505
101013b4:	10101d2c 	andhi	zero,r2,16500
101013b8:	10101e58 	cmpnei	zero,r2,16505
101013bc:	10101e58 	cmpnei	zero,r2,16505
101013c0:	10101d3c 	xorhi	zero,r2,16500
101013c4:	d9003117 	ldw	r4,196(sp)
101013c8:	d8802d15 	stw	r2,180(sp)
101013cc:	0109c83a 	sub	r4,zero,r4
101013d0:	d9003115 	stw	r4,196(sp)
101013d4:	94800114 	ori	r18,r18,4
101013d8:	ac400007 	ldb	r17,0(r21)
101013dc:	003f9706 	br	1010123c <__alt_data_end+0xfffe123c>
101013e0:	00800c04 	movi	r2,48
101013e4:	d9002d17 	ldw	r4,180(sp)
101013e8:	d9402917 	ldw	r5,164(sp)
101013ec:	d8802705 	stb	r2,156(sp)
101013f0:	00801e04 	movi	r2,120
101013f4:	d8802745 	stb	r2,157(sp)
101013f8:	d8002785 	stb	zero,158(sp)
101013fc:	20c00104 	addi	r3,r4,4
10101400:	24c00017 	ldw	r19,0(r4)
10101404:	002d883a 	mov	r22,zero
10101408:	90800094 	ori	r2,r18,2
1010140c:	28029a16 	blt	r5,zero,10101e78 <___vfprintf_internal_r+0xdc0>
10101410:	00bfdfc4 	movi	r2,-129
10101414:	90a4703a 	and	r18,r18,r2
10101418:	d8c02d15 	stw	r3,180(sp)
1010141c:	94800094 	ori	r18,r18,2
10101420:	9802871e 	bne	r19,zero,10101e40 <___vfprintf_internal_r+0xd88>
10101424:	00840474 	movhi	r2,4113
10101428:	1080a204 	addi	r2,r2,648
1010142c:	d8803915 	stw	r2,228(sp)
10101430:	04401e04 	movi	r17,120
10101434:	d8802917 	ldw	r2,164(sp)
10101438:	0039883a 	mov	fp,zero
1010143c:	1001e926 	beq	r2,zero,10101be4 <___vfprintf_internal_r+0xb2c>
10101440:	0027883a 	mov	r19,zero
10101444:	002d883a 	mov	r22,zero
10101448:	00020506 	br	10101c60 <___vfprintf_internal_r+0xba8>
1010144c:	d9002c17 	ldw	r4,176(sp)
10101450:	b80b883a 	mov	r5,r23
10101454:	01033880 	call	10103388 <__swsetup_r>
10101458:	1005ac1e 	bne	r2,zero,10102b0c <___vfprintf_internal_r+0x1a54>
1010145c:	b880030b 	ldhu	r2,12(r23)
10101460:	00c00284 	movi	r3,10
10101464:	1080068c 	andi	r2,r2,26
10101468:	10ff3c1e 	bne	r2,r3,1010115c <__alt_data_end+0xfffe115c>
1010146c:	b880038f 	ldh	r2,14(r23)
10101470:	103f3a16 	blt	r2,zero,1010115c <__alt_data_end+0xfffe115c>
10101474:	d9c02d17 	ldw	r7,180(sp)
10101478:	d9002c17 	ldw	r4,176(sp)
1010147c:	a80d883a 	mov	r6,r21
10101480:	b80b883a 	mov	r5,r23
10101484:	01032cc0 	call	101032cc <__sbprintf>
10101488:	00001106 	br	101014d0 <___vfprintf_internal_r+0x418>
1010148c:	d9002c17 	ldw	r4,176(sp)
10101490:	d9801e04 	addi	r6,sp,120
10101494:	b80b883a 	mov	r5,r23
10101498:	01086b40 	call	101086b4 <__sprint_r>
1010149c:	1000081e 	bne	r2,zero,101014c0 <___vfprintf_internal_r+0x408>
101014a0:	da000404 	addi	r8,sp,16
101014a4:	003f5306 	br	101011f4 <__alt_data_end+0xfffe11f4>
101014a8:	d8802017 	ldw	r2,128(sp)
101014ac:	10000426 	beq	r2,zero,101014c0 <___vfprintf_internal_r+0x408>
101014b0:	d9002c17 	ldw	r4,176(sp)
101014b4:	d9801e04 	addi	r6,sp,120
101014b8:	b80b883a 	mov	r5,r23
101014bc:	01086b40 	call	101086b4 <__sprint_r>
101014c0:	b880030b 	ldhu	r2,12(r23)
101014c4:	1080100c 	andi	r2,r2,64
101014c8:	1005901e 	bne	r2,zero,10102b0c <___vfprintf_internal_r+0x1a54>
101014cc:	d8802f17 	ldw	r2,188(sp)
101014d0:	dfc04717 	ldw	ra,284(sp)
101014d4:	df004617 	ldw	fp,280(sp)
101014d8:	ddc04517 	ldw	r23,276(sp)
101014dc:	dd804417 	ldw	r22,272(sp)
101014e0:	dd404317 	ldw	r21,268(sp)
101014e4:	dd004217 	ldw	r20,264(sp)
101014e8:	dcc04117 	ldw	r19,260(sp)
101014ec:	dc804017 	ldw	r18,256(sp)
101014f0:	dc403f17 	ldw	r17,252(sp)
101014f4:	dc003e17 	ldw	r16,248(sp)
101014f8:	dec04804 	addi	sp,sp,288
101014fc:	f800283a 	ret
10101500:	d9002c17 	ldw	r4,176(sp)
10101504:	010535c0 	call	1010535c <__sinit>
10101508:	003f0406 	br	1010111c <__alt_data_end+0xfffe111c>
1010150c:	d8802d17 	ldw	r2,180(sp)
10101510:	d9002d17 	ldw	r4,180(sp)
10101514:	10800017 	ldw	r2,0(r2)
10101518:	d8803115 	stw	r2,196(sp)
1010151c:	20800104 	addi	r2,r4,4
10101520:	d9003117 	ldw	r4,196(sp)
10101524:	203fa716 	blt	r4,zero,101013c4 <__alt_data_end+0xfffe13c4>
10101528:	d8802d15 	stw	r2,180(sp)
1010152c:	ac400007 	ldb	r17,0(r21)
10101530:	003f4206 	br	1010123c <__alt_data_end+0xfffe123c>
10101534:	ac400007 	ldb	r17,0(r21)
10101538:	aac00044 	addi	r11,r21,1
1010153c:	8a872826 	beq	r17,r10,101031e0 <___vfprintf_internal_r+0x2128>
10101540:	88bff404 	addi	r2,r17,-48
10101544:	0009883a 	mov	r4,zero
10101548:	30867d36 	bltu	r6,r2,10102f40 <___vfprintf_internal_r+0x1e88>
1010154c:	5c400007 	ldb	r17,0(r11)
10101550:	210002a4 	muli	r4,r4,10
10101554:	5d400044 	addi	r21,r11,1
10101558:	a817883a 	mov	r11,r21
1010155c:	2089883a 	add	r4,r4,r2
10101560:	88bff404 	addi	r2,r17,-48
10101564:	30bff92e 	bgeu	r6,r2,1010154c <__alt_data_end+0xfffe154c>
10101568:	2005c916 	blt	r4,zero,10102c90 <___vfprintf_internal_r+0x1bd8>
1010156c:	d9002915 	stw	r4,164(sp)
10101570:	003f3306 	br	10101240 <__alt_data_end+0xfffe1240>
10101574:	94802014 	ori	r18,r18,128
10101578:	ac400007 	ldb	r17,0(r21)
1010157c:	003f2f06 	br	1010123c <__alt_data_end+0xfffe123c>
10101580:	a809883a 	mov	r4,r21
10101584:	d8003115 	stw	zero,196(sp)
10101588:	88bff404 	addi	r2,r17,-48
1010158c:	0017883a 	mov	r11,zero
10101590:	24400007 	ldb	r17,0(r4)
10101594:	5ac002a4 	muli	r11,r11,10
10101598:	ad400044 	addi	r21,r21,1
1010159c:	a809883a 	mov	r4,r21
101015a0:	12d7883a 	add	r11,r2,r11
101015a4:	88bff404 	addi	r2,r17,-48
101015a8:	30bff92e 	bgeu	r6,r2,10101590 <__alt_data_end+0xfffe1590>
101015ac:	dac03115 	stw	r11,196(sp)
101015b0:	003f2306 	br	10101240 <__alt_data_end+0xfffe1240>
101015b4:	18c03fcc 	andi	r3,r3,255
101015b8:	18072b1e 	bne	r3,zero,10103268 <___vfprintf_internal_r+0x21b0>
101015bc:	94800414 	ori	r18,r18,16
101015c0:	9080080c 	andi	r2,r18,32
101015c4:	10037b26 	beq	r2,zero,101023b4 <___vfprintf_internal_r+0x12fc>
101015c8:	d9402d17 	ldw	r5,180(sp)
101015cc:	28800117 	ldw	r2,4(r5)
101015d0:	2cc00017 	ldw	r19,0(r5)
101015d4:	29400204 	addi	r5,r5,8
101015d8:	d9402d15 	stw	r5,180(sp)
101015dc:	102d883a 	mov	r22,r2
101015e0:	10044b16 	blt	r2,zero,10102710 <___vfprintf_internal_r+0x1658>
101015e4:	d9402917 	ldw	r5,164(sp)
101015e8:	df002783 	ldbu	fp,158(sp)
101015ec:	2803bc16 	blt	r5,zero,101024e0 <___vfprintf_internal_r+0x1428>
101015f0:	00ffdfc4 	movi	r3,-129
101015f4:	9d84b03a 	or	r2,r19,r22
101015f8:	90e4703a 	and	r18,r18,r3
101015fc:	10017726 	beq	r2,zero,10101bdc <___vfprintf_internal_r+0xb24>
10101600:	b0038326 	beq	r22,zero,10102410 <___vfprintf_internal_r+0x1358>
10101604:	dc402a15 	stw	r17,168(sp)
10101608:	dc001e04 	addi	r16,sp,120
1010160c:	b023883a 	mov	r17,r22
10101610:	402d883a 	mov	r22,r8
10101614:	9809883a 	mov	r4,r19
10101618:	880b883a 	mov	r5,r17
1010161c:	01800284 	movi	r6,10
10101620:	000f883a 	mov	r7,zero
10101624:	010aaac0 	call	1010aaac <__umoddi3>
10101628:	10800c04 	addi	r2,r2,48
1010162c:	843fffc4 	addi	r16,r16,-1
10101630:	9809883a 	mov	r4,r19
10101634:	880b883a 	mov	r5,r17
10101638:	80800005 	stb	r2,0(r16)
1010163c:	01800284 	movi	r6,10
10101640:	000f883a 	mov	r7,zero
10101644:	010a5340 	call	1010a534 <__udivdi3>
10101648:	1027883a 	mov	r19,r2
1010164c:	10c4b03a 	or	r2,r2,r3
10101650:	1823883a 	mov	r17,r3
10101654:	103fef1e 	bne	r2,zero,10101614 <__alt_data_end+0xfffe1614>
10101658:	d8c02817 	ldw	r3,160(sp)
1010165c:	dc402a17 	ldw	r17,168(sp)
10101660:	b011883a 	mov	r8,r22
10101664:	1c07c83a 	sub	r3,r3,r16
10101668:	d8c02e15 	stw	r3,184(sp)
1010166c:	00005906 	br	101017d4 <___vfprintf_internal_r+0x71c>
10101670:	18c03fcc 	andi	r3,r3,255
10101674:	1806fa1e 	bne	r3,zero,10103260 <___vfprintf_internal_r+0x21a8>
10101678:	9080020c 	andi	r2,r18,8
1010167c:	10048a26 	beq	r2,zero,101028a8 <___vfprintf_internal_r+0x17f0>
10101680:	d8c02d17 	ldw	r3,180(sp)
10101684:	d9002d17 	ldw	r4,180(sp)
10101688:	d9402d17 	ldw	r5,180(sp)
1010168c:	18c00017 	ldw	r3,0(r3)
10101690:	21000117 	ldw	r4,4(r4)
10101694:	29400204 	addi	r5,r5,8
10101698:	d8c03615 	stw	r3,216(sp)
1010169c:	d9003815 	stw	r4,224(sp)
101016a0:	d9402d15 	stw	r5,180(sp)
101016a4:	d9003617 	ldw	r4,216(sp)
101016a8:	d9403817 	ldw	r5,224(sp)
101016ac:	da003d15 	stw	r8,244(sp)
101016b0:	04000044 	movi	r16,1
101016b4:	01082d80 	call	101082d8 <__fpclassifyd>
101016b8:	da003d17 	ldw	r8,244(sp)
101016bc:	14041f1e 	bne	r2,r16,1010273c <___vfprintf_internal_r+0x1684>
101016c0:	d9003617 	ldw	r4,216(sp)
101016c4:	d9403817 	ldw	r5,224(sp)
101016c8:	000d883a 	mov	r6,zero
101016cc:	000f883a 	mov	r7,zero
101016d0:	010c2dc0 	call	1010c2dc <__ledf2>
101016d4:	da003d17 	ldw	r8,244(sp)
101016d8:	1005be16 	blt	r2,zero,10102dd4 <___vfprintf_internal_r+0x1d1c>
101016dc:	df002783 	ldbu	fp,158(sp)
101016e0:	008011c4 	movi	r2,71
101016e4:	1445330e 	bge	r2,r17,10102bb4 <___vfprintf_internal_r+0x1afc>
101016e8:	04040474 	movhi	r16,4113
101016ec:	84009a04 	addi	r16,r16,616
101016f0:	00c000c4 	movi	r3,3
101016f4:	00bfdfc4 	movi	r2,-129
101016f8:	d8c02a15 	stw	r3,168(sp)
101016fc:	90a4703a 	and	r18,r18,r2
10101700:	d8c02e15 	stw	r3,184(sp)
10101704:	d8002915 	stw	zero,164(sp)
10101708:	d8003215 	stw	zero,200(sp)
1010170c:	00003706 	br	101017ec <___vfprintf_internal_r+0x734>
10101710:	94800214 	ori	r18,r18,8
10101714:	ac400007 	ldb	r17,0(r21)
10101718:	003ec806 	br	1010123c <__alt_data_end+0xfffe123c>
1010171c:	18c03fcc 	andi	r3,r3,255
10101720:	1806db1e 	bne	r3,zero,10103290 <___vfprintf_internal_r+0x21d8>
10101724:	94800414 	ori	r18,r18,16
10101728:	9080080c 	andi	r2,r18,32
1010172c:	1002d826 	beq	r2,zero,10102290 <___vfprintf_internal_r+0x11d8>
10101730:	d9402d17 	ldw	r5,180(sp)
10101734:	d8c02917 	ldw	r3,164(sp)
10101738:	d8002785 	stb	zero,158(sp)
1010173c:	28800204 	addi	r2,r5,8
10101740:	2cc00017 	ldw	r19,0(r5)
10101744:	2d800117 	ldw	r22,4(r5)
10101748:	18048f16 	blt	r3,zero,10102988 <___vfprintf_internal_r+0x18d0>
1010174c:	013fdfc4 	movi	r4,-129
10101750:	9d86b03a 	or	r3,r19,r22
10101754:	d8802d15 	stw	r2,180(sp)
10101758:	9124703a 	and	r18,r18,r4
1010175c:	1802d91e 	bne	r3,zero,101022c4 <___vfprintf_internal_r+0x120c>
10101760:	d8c02917 	ldw	r3,164(sp)
10101764:	0039883a 	mov	fp,zero
10101768:	1805c326 	beq	r3,zero,10102e78 <___vfprintf_internal_r+0x1dc0>
1010176c:	0027883a 	mov	r19,zero
10101770:	002d883a 	mov	r22,zero
10101774:	dc001e04 	addi	r16,sp,120
10101778:	9806d0fa 	srli	r3,r19,3
1010177c:	b008977a 	slli	r4,r22,29
10101780:	b02cd0fa 	srli	r22,r22,3
10101784:	9cc001cc 	andi	r19,r19,7
10101788:	98800c04 	addi	r2,r19,48
1010178c:	843fffc4 	addi	r16,r16,-1
10101790:	20e6b03a 	or	r19,r4,r3
10101794:	80800005 	stb	r2,0(r16)
10101798:	9d86b03a 	or	r3,r19,r22
1010179c:	183ff61e 	bne	r3,zero,10101778 <__alt_data_end+0xfffe1778>
101017a0:	90c0004c 	andi	r3,r18,1
101017a4:	18013b26 	beq	r3,zero,10101c94 <___vfprintf_internal_r+0xbdc>
101017a8:	10803fcc 	andi	r2,r2,255
101017ac:	1080201c 	xori	r2,r2,128
101017b0:	10bfe004 	addi	r2,r2,-128
101017b4:	00c00c04 	movi	r3,48
101017b8:	10c13626 	beq	r2,r3,10101c94 <___vfprintf_internal_r+0xbdc>
101017bc:	80ffffc5 	stb	r3,-1(r16)
101017c0:	d8c02817 	ldw	r3,160(sp)
101017c4:	80bfffc4 	addi	r2,r16,-1
101017c8:	1021883a 	mov	r16,r2
101017cc:	1887c83a 	sub	r3,r3,r2
101017d0:	d8c02e15 	stw	r3,184(sp)
101017d4:	d8802e17 	ldw	r2,184(sp)
101017d8:	d9002917 	ldw	r4,164(sp)
101017dc:	1100010e 	bge	r2,r4,101017e4 <___vfprintf_internal_r+0x72c>
101017e0:	2005883a 	mov	r2,r4
101017e4:	d8802a15 	stw	r2,168(sp)
101017e8:	d8003215 	stw	zero,200(sp)
101017ec:	e7003fcc 	andi	fp,fp,255
101017f0:	e700201c 	xori	fp,fp,128
101017f4:	e73fe004 	addi	fp,fp,-128
101017f8:	e0000326 	beq	fp,zero,10101808 <___vfprintf_internal_r+0x750>
101017fc:	d8c02a17 	ldw	r3,168(sp)
10101800:	18c00044 	addi	r3,r3,1
10101804:	d8c02a15 	stw	r3,168(sp)
10101808:	90c0008c 	andi	r3,r18,2
1010180c:	d8c02b15 	stw	r3,172(sp)
10101810:	18000326 	beq	r3,zero,10101820 <___vfprintf_internal_r+0x768>
10101814:	d8c02a17 	ldw	r3,168(sp)
10101818:	18c00084 	addi	r3,r3,2
1010181c:	d8c02a15 	stw	r3,168(sp)
10101820:	90c0210c 	andi	r3,r18,132
10101824:	d8c03015 	stw	r3,192(sp)
10101828:	1801a31e 	bne	r3,zero,10101eb8 <___vfprintf_internal_r+0xe00>
1010182c:	d9003117 	ldw	r4,196(sp)
10101830:	d8c02a17 	ldw	r3,168(sp)
10101834:	20e7c83a 	sub	r19,r4,r3
10101838:	04c19f0e 	bge	zero,r19,10101eb8 <___vfprintf_internal_r+0xe00>
1010183c:	02400404 	movi	r9,16
10101840:	d8c02017 	ldw	r3,128(sp)
10101844:	d8801f17 	ldw	r2,124(sp)
10101848:	4cc50d0e 	bge	r9,r19,10102c80 <___vfprintf_internal_r+0x1bc8>
1010184c:	01440474 	movhi	r5,4113
10101850:	2940ad84 	addi	r5,r5,694
10101854:	dc403b15 	stw	r17,236(sp)
10101858:	d9403515 	stw	r5,212(sp)
1010185c:	9823883a 	mov	r17,r19
10101860:	482d883a 	mov	r22,r9
10101864:	9027883a 	mov	r19,r18
10101868:	070001c4 	movi	fp,7
1010186c:	8025883a 	mov	r18,r16
10101870:	dc002c17 	ldw	r16,176(sp)
10101874:	00000306 	br	10101884 <___vfprintf_internal_r+0x7cc>
10101878:	8c7ffc04 	addi	r17,r17,-16
1010187c:	42000204 	addi	r8,r8,8
10101880:	b440130e 	bge	r22,r17,101018d0 <___vfprintf_internal_r+0x818>
10101884:	01040474 	movhi	r4,4113
10101888:	18c00404 	addi	r3,r3,16
1010188c:	10800044 	addi	r2,r2,1
10101890:	2100ad84 	addi	r4,r4,694
10101894:	41000015 	stw	r4,0(r8)
10101898:	45800115 	stw	r22,4(r8)
1010189c:	d8c02015 	stw	r3,128(sp)
101018a0:	d8801f15 	stw	r2,124(sp)
101018a4:	e0bff40e 	bge	fp,r2,10101878 <__alt_data_end+0xfffe1878>
101018a8:	d9801e04 	addi	r6,sp,120
101018ac:	b80b883a 	mov	r5,r23
101018b0:	8009883a 	mov	r4,r16
101018b4:	01086b40 	call	101086b4 <__sprint_r>
101018b8:	103f011e 	bne	r2,zero,101014c0 <__alt_data_end+0xfffe14c0>
101018bc:	8c7ffc04 	addi	r17,r17,-16
101018c0:	d8c02017 	ldw	r3,128(sp)
101018c4:	d8801f17 	ldw	r2,124(sp)
101018c8:	da000404 	addi	r8,sp,16
101018cc:	b47fed16 	blt	r22,r17,10101884 <__alt_data_end+0xfffe1884>
101018d0:	9021883a 	mov	r16,r18
101018d4:	9825883a 	mov	r18,r19
101018d8:	8827883a 	mov	r19,r17
101018dc:	dc403b17 	ldw	r17,236(sp)
101018e0:	d9403517 	ldw	r5,212(sp)
101018e4:	98c7883a 	add	r3,r19,r3
101018e8:	10800044 	addi	r2,r2,1
101018ec:	41400015 	stw	r5,0(r8)
101018f0:	44c00115 	stw	r19,4(r8)
101018f4:	d8c02015 	stw	r3,128(sp)
101018f8:	d8801f15 	stw	r2,124(sp)
101018fc:	010001c4 	movi	r4,7
10101900:	2082a316 	blt	r4,r2,10102390 <___vfprintf_internal_r+0x12d8>
10101904:	df002787 	ldb	fp,158(sp)
10101908:	42000204 	addi	r8,r8,8
1010190c:	e0000c26 	beq	fp,zero,10101940 <___vfprintf_internal_r+0x888>
10101910:	d8801f17 	ldw	r2,124(sp)
10101914:	d9002784 	addi	r4,sp,158
10101918:	18c00044 	addi	r3,r3,1
1010191c:	10800044 	addi	r2,r2,1
10101920:	41000015 	stw	r4,0(r8)
10101924:	01000044 	movi	r4,1
10101928:	41000115 	stw	r4,4(r8)
1010192c:	d8c02015 	stw	r3,128(sp)
10101930:	d8801f15 	stw	r2,124(sp)
10101934:	010001c4 	movi	r4,7
10101938:	20823c16 	blt	r4,r2,1010222c <___vfprintf_internal_r+0x1174>
1010193c:	42000204 	addi	r8,r8,8
10101940:	d8802b17 	ldw	r2,172(sp)
10101944:	10000c26 	beq	r2,zero,10101978 <___vfprintf_internal_r+0x8c0>
10101948:	d8801f17 	ldw	r2,124(sp)
1010194c:	d9002704 	addi	r4,sp,156
10101950:	18c00084 	addi	r3,r3,2
10101954:	10800044 	addi	r2,r2,1
10101958:	41000015 	stw	r4,0(r8)
1010195c:	01000084 	movi	r4,2
10101960:	41000115 	stw	r4,4(r8)
10101964:	d8c02015 	stw	r3,128(sp)
10101968:	d8801f15 	stw	r2,124(sp)
1010196c:	010001c4 	movi	r4,7
10101970:	20823616 	blt	r4,r2,1010224c <___vfprintf_internal_r+0x1194>
10101974:	42000204 	addi	r8,r8,8
10101978:	d9003017 	ldw	r4,192(sp)
1010197c:	00802004 	movi	r2,128
10101980:	20819926 	beq	r4,r2,10101fe8 <___vfprintf_internal_r+0xf30>
10101984:	d9402917 	ldw	r5,164(sp)
10101988:	d8802e17 	ldw	r2,184(sp)
1010198c:	28adc83a 	sub	r22,r5,r2
10101990:	0580310e 	bge	zero,r22,10101a58 <___vfprintf_internal_r+0x9a0>
10101994:	07000404 	movi	fp,16
10101998:	d8801f17 	ldw	r2,124(sp)
1010199c:	e584140e 	bge	fp,r22,101029f0 <___vfprintf_internal_r+0x1938>
101019a0:	01440474 	movhi	r5,4113
101019a4:	2940a984 	addi	r5,r5,678
101019a8:	dc402915 	stw	r17,164(sp)
101019ac:	d9402b15 	stw	r5,172(sp)
101019b0:	b023883a 	mov	r17,r22
101019b4:	04c001c4 	movi	r19,7
101019b8:	a82d883a 	mov	r22,r21
101019bc:	902b883a 	mov	r21,r18
101019c0:	8025883a 	mov	r18,r16
101019c4:	dc002c17 	ldw	r16,176(sp)
101019c8:	00000306 	br	101019d8 <___vfprintf_internal_r+0x920>
101019cc:	8c7ffc04 	addi	r17,r17,-16
101019d0:	42000204 	addi	r8,r8,8
101019d4:	e440110e 	bge	fp,r17,10101a1c <___vfprintf_internal_r+0x964>
101019d8:	18c00404 	addi	r3,r3,16
101019dc:	10800044 	addi	r2,r2,1
101019e0:	45000015 	stw	r20,0(r8)
101019e4:	47000115 	stw	fp,4(r8)
101019e8:	d8c02015 	stw	r3,128(sp)
101019ec:	d8801f15 	stw	r2,124(sp)
101019f0:	98bff60e 	bge	r19,r2,101019cc <__alt_data_end+0xfffe19cc>
101019f4:	d9801e04 	addi	r6,sp,120
101019f8:	b80b883a 	mov	r5,r23
101019fc:	8009883a 	mov	r4,r16
10101a00:	01086b40 	call	101086b4 <__sprint_r>
10101a04:	103eae1e 	bne	r2,zero,101014c0 <__alt_data_end+0xfffe14c0>
10101a08:	8c7ffc04 	addi	r17,r17,-16
10101a0c:	d8c02017 	ldw	r3,128(sp)
10101a10:	d8801f17 	ldw	r2,124(sp)
10101a14:	da000404 	addi	r8,sp,16
10101a18:	e47fef16 	blt	fp,r17,101019d8 <__alt_data_end+0xfffe19d8>
10101a1c:	9021883a 	mov	r16,r18
10101a20:	a825883a 	mov	r18,r21
10101a24:	b02b883a 	mov	r21,r22
10101a28:	882d883a 	mov	r22,r17
10101a2c:	dc402917 	ldw	r17,164(sp)
10101a30:	d9002b17 	ldw	r4,172(sp)
10101a34:	1d87883a 	add	r3,r3,r22
10101a38:	10800044 	addi	r2,r2,1
10101a3c:	41000015 	stw	r4,0(r8)
10101a40:	45800115 	stw	r22,4(r8)
10101a44:	d8c02015 	stw	r3,128(sp)
10101a48:	d8801f15 	stw	r2,124(sp)
10101a4c:	010001c4 	movi	r4,7
10101a50:	2081ee16 	blt	r4,r2,1010220c <___vfprintf_internal_r+0x1154>
10101a54:	42000204 	addi	r8,r8,8
10101a58:	9080400c 	andi	r2,r18,256
10101a5c:	1001181e 	bne	r2,zero,10101ec0 <___vfprintf_internal_r+0xe08>
10101a60:	d9402e17 	ldw	r5,184(sp)
10101a64:	d8801f17 	ldw	r2,124(sp)
10101a68:	44000015 	stw	r16,0(r8)
10101a6c:	1947883a 	add	r3,r3,r5
10101a70:	10800044 	addi	r2,r2,1
10101a74:	41400115 	stw	r5,4(r8)
10101a78:	d8c02015 	stw	r3,128(sp)
10101a7c:	d8801f15 	stw	r2,124(sp)
10101a80:	010001c4 	movi	r4,7
10101a84:	2081d316 	blt	r4,r2,101021d4 <___vfprintf_internal_r+0x111c>
10101a88:	42000204 	addi	r8,r8,8
10101a8c:	9480010c 	andi	r18,r18,4
10101a90:	90003226 	beq	r18,zero,10101b5c <___vfprintf_internal_r+0xaa4>
10101a94:	d9403117 	ldw	r5,196(sp)
10101a98:	d8802a17 	ldw	r2,168(sp)
10101a9c:	28a1c83a 	sub	r16,r5,r2
10101aa0:	04002e0e 	bge	zero,r16,10101b5c <___vfprintf_internal_r+0xaa4>
10101aa4:	04400404 	movi	r17,16
10101aa8:	d8801f17 	ldw	r2,124(sp)
10101aac:	8c04a20e 	bge	r17,r16,10102d38 <___vfprintf_internal_r+0x1c80>
10101ab0:	01440474 	movhi	r5,4113
10101ab4:	2940ad84 	addi	r5,r5,694
10101ab8:	d9403515 	stw	r5,212(sp)
10101abc:	048001c4 	movi	r18,7
10101ac0:	dcc02c17 	ldw	r19,176(sp)
10101ac4:	00000306 	br	10101ad4 <___vfprintf_internal_r+0xa1c>
10101ac8:	843ffc04 	addi	r16,r16,-16
10101acc:	42000204 	addi	r8,r8,8
10101ad0:	8c00130e 	bge	r17,r16,10101b20 <___vfprintf_internal_r+0xa68>
10101ad4:	01040474 	movhi	r4,4113
10101ad8:	18c00404 	addi	r3,r3,16
10101adc:	10800044 	addi	r2,r2,1
10101ae0:	2100ad84 	addi	r4,r4,694
10101ae4:	41000015 	stw	r4,0(r8)
10101ae8:	44400115 	stw	r17,4(r8)
10101aec:	d8c02015 	stw	r3,128(sp)
10101af0:	d8801f15 	stw	r2,124(sp)
10101af4:	90bff40e 	bge	r18,r2,10101ac8 <__alt_data_end+0xfffe1ac8>
10101af8:	d9801e04 	addi	r6,sp,120
10101afc:	b80b883a 	mov	r5,r23
10101b00:	9809883a 	mov	r4,r19
10101b04:	01086b40 	call	101086b4 <__sprint_r>
10101b08:	103e6d1e 	bne	r2,zero,101014c0 <__alt_data_end+0xfffe14c0>
10101b0c:	843ffc04 	addi	r16,r16,-16
10101b10:	d8c02017 	ldw	r3,128(sp)
10101b14:	d8801f17 	ldw	r2,124(sp)
10101b18:	da000404 	addi	r8,sp,16
10101b1c:	8c3fed16 	blt	r17,r16,10101ad4 <__alt_data_end+0xfffe1ad4>
10101b20:	d9403517 	ldw	r5,212(sp)
10101b24:	1c07883a 	add	r3,r3,r16
10101b28:	10800044 	addi	r2,r2,1
10101b2c:	41400015 	stw	r5,0(r8)
10101b30:	44000115 	stw	r16,4(r8)
10101b34:	d8c02015 	stw	r3,128(sp)
10101b38:	d8801f15 	stw	r2,124(sp)
10101b3c:	010001c4 	movi	r4,7
10101b40:	2080060e 	bge	r4,r2,10101b5c <___vfprintf_internal_r+0xaa4>
10101b44:	d9002c17 	ldw	r4,176(sp)
10101b48:	d9801e04 	addi	r6,sp,120
10101b4c:	b80b883a 	mov	r5,r23
10101b50:	01086b40 	call	101086b4 <__sprint_r>
10101b54:	103e5a1e 	bne	r2,zero,101014c0 <__alt_data_end+0xfffe14c0>
10101b58:	d8c02017 	ldw	r3,128(sp)
10101b5c:	d8803117 	ldw	r2,196(sp)
10101b60:	d9002a17 	ldw	r4,168(sp)
10101b64:	1100010e 	bge	r2,r4,10101b6c <___vfprintf_internal_r+0xab4>
10101b68:	2005883a 	mov	r2,r4
10101b6c:	d9402f17 	ldw	r5,188(sp)
10101b70:	288b883a 	add	r5,r5,r2
10101b74:	d9402f15 	stw	r5,188(sp)
10101b78:	18019e1e 	bne	r3,zero,101021f4 <___vfprintf_internal_r+0x113c>
10101b7c:	a8800007 	ldb	r2,0(r21)
10101b80:	d8001f15 	stw	zero,124(sp)
10101b84:	da000404 	addi	r8,sp,16
10101b88:	103d851e 	bne	r2,zero,101011a0 <__alt_data_end+0xfffe11a0>
10101b8c:	a821883a 	mov	r16,r21
10101b90:	003d9b06 	br	10101200 <__alt_data_end+0xfffe1200>
10101b94:	18c03fcc 	andi	r3,r3,255
10101b98:	1805c11e 	bne	r3,zero,101032a0 <___vfprintf_internal_r+0x21e8>
10101b9c:	94800414 	ori	r18,r18,16
10101ba0:	9080080c 	andi	r2,r18,32
10101ba4:	10020c26 	beq	r2,zero,101023d8 <___vfprintf_internal_r+0x1320>
10101ba8:	d8802d17 	ldw	r2,180(sp)
10101bac:	d9002917 	ldw	r4,164(sp)
10101bb0:	d8002785 	stb	zero,158(sp)
10101bb4:	10c00204 	addi	r3,r2,8
10101bb8:	14c00017 	ldw	r19,0(r2)
10101bbc:	15800117 	ldw	r22,4(r2)
10101bc0:	20040f16 	blt	r4,zero,10102c00 <___vfprintf_internal_r+0x1b48>
10101bc4:	013fdfc4 	movi	r4,-129
10101bc8:	9d84b03a 	or	r2,r19,r22
10101bcc:	d8c02d15 	stw	r3,180(sp)
10101bd0:	9124703a 	and	r18,r18,r4
10101bd4:	0039883a 	mov	fp,zero
10101bd8:	103e891e 	bne	r2,zero,10101600 <__alt_data_end+0xfffe1600>
10101bdc:	d9002917 	ldw	r4,164(sp)
10101be0:	2002c11e 	bne	r4,zero,101026e8 <___vfprintf_internal_r+0x1630>
10101be4:	d8002915 	stw	zero,164(sp)
10101be8:	d8002e15 	stw	zero,184(sp)
10101bec:	dc001e04 	addi	r16,sp,120
10101bf0:	003ef806 	br	101017d4 <__alt_data_end+0xfffe17d4>
10101bf4:	18c03fcc 	andi	r3,r3,255
10101bf8:	18059d1e 	bne	r3,zero,10103270 <___vfprintf_internal_r+0x21b8>
10101bfc:	01440474 	movhi	r5,4113
10101c00:	29409d04 	addi	r5,r5,628
10101c04:	d9403915 	stw	r5,228(sp)
10101c08:	9080080c 	andi	r2,r18,32
10101c0c:	10005226 	beq	r2,zero,10101d58 <___vfprintf_internal_r+0xca0>
10101c10:	d8802d17 	ldw	r2,180(sp)
10101c14:	14c00017 	ldw	r19,0(r2)
10101c18:	15800117 	ldw	r22,4(r2)
10101c1c:	10800204 	addi	r2,r2,8
10101c20:	d8802d15 	stw	r2,180(sp)
10101c24:	9080004c 	andi	r2,r18,1
10101c28:	10019026 	beq	r2,zero,1010226c <___vfprintf_internal_r+0x11b4>
10101c2c:	9d84b03a 	or	r2,r19,r22
10101c30:	10036926 	beq	r2,zero,101029d8 <___vfprintf_internal_r+0x1920>
10101c34:	d8c02917 	ldw	r3,164(sp)
10101c38:	00800c04 	movi	r2,48
10101c3c:	d8802705 	stb	r2,156(sp)
10101c40:	dc402745 	stb	r17,157(sp)
10101c44:	d8002785 	stb	zero,158(sp)
10101c48:	90800094 	ori	r2,r18,2
10101c4c:	18045d16 	blt	r3,zero,10102dc4 <___vfprintf_internal_r+0x1d0c>
10101c50:	00bfdfc4 	movi	r2,-129
10101c54:	90a4703a 	and	r18,r18,r2
10101c58:	94800094 	ori	r18,r18,2
10101c5c:	0039883a 	mov	fp,zero
10101c60:	d9003917 	ldw	r4,228(sp)
10101c64:	dc001e04 	addi	r16,sp,120
10101c68:	988003cc 	andi	r2,r19,15
10101c6c:	b006973a 	slli	r3,r22,28
10101c70:	2085883a 	add	r2,r4,r2
10101c74:	9826d13a 	srli	r19,r19,4
10101c78:	10800003 	ldbu	r2,0(r2)
10101c7c:	b02cd13a 	srli	r22,r22,4
10101c80:	843fffc4 	addi	r16,r16,-1
10101c84:	1ce6b03a 	or	r19,r3,r19
10101c88:	80800005 	stb	r2,0(r16)
10101c8c:	9d84b03a 	or	r2,r19,r22
10101c90:	103ff51e 	bne	r2,zero,10101c68 <__alt_data_end+0xfffe1c68>
10101c94:	d8c02817 	ldw	r3,160(sp)
10101c98:	1c07c83a 	sub	r3,r3,r16
10101c9c:	d8c02e15 	stw	r3,184(sp)
10101ca0:	003ecc06 	br	101017d4 <__alt_data_end+0xfffe17d4>
10101ca4:	18c03fcc 	andi	r3,r3,255
10101ca8:	183e9f26 	beq	r3,zero,10101728 <__alt_data_end+0xfffe1728>
10101cac:	d9c02785 	stb	r7,158(sp)
10101cb0:	003e9d06 	br	10101728 <__alt_data_end+0xfffe1728>
10101cb4:	00c00044 	movi	r3,1
10101cb8:	01c00ac4 	movi	r7,43
10101cbc:	ac400007 	ldb	r17,0(r21)
10101cc0:	003d5e06 	br	1010123c <__alt_data_end+0xfffe123c>
10101cc4:	94800814 	ori	r18,r18,32
10101cc8:	ac400007 	ldb	r17,0(r21)
10101ccc:	003d5b06 	br	1010123c <__alt_data_end+0xfffe123c>
10101cd0:	d8c02d17 	ldw	r3,180(sp)
10101cd4:	d8002785 	stb	zero,158(sp)
10101cd8:	1c000017 	ldw	r16,0(r3)
10101cdc:	1cc00104 	addi	r19,r3,4
10101ce0:	80041926 	beq	r16,zero,10102d48 <___vfprintf_internal_r+0x1c90>
10101ce4:	d9002917 	ldw	r4,164(sp)
10101ce8:	2003d016 	blt	r4,zero,10102c2c <___vfprintf_internal_r+0x1b74>
10101cec:	200d883a 	mov	r6,r4
10101cf0:	000b883a 	mov	r5,zero
10101cf4:	8009883a 	mov	r4,r16
10101cf8:	da003d15 	stw	r8,244(sp)
10101cfc:	01068c80 	call	101068c8 <memchr>
10101d00:	da003d17 	ldw	r8,244(sp)
10101d04:	10045426 	beq	r2,zero,10102e58 <___vfprintf_internal_r+0x1da0>
10101d08:	1405c83a 	sub	r2,r2,r16
10101d0c:	d8802e15 	stw	r2,184(sp)
10101d10:	1003cc16 	blt	r2,zero,10102c44 <___vfprintf_internal_r+0x1b8c>
10101d14:	df002783 	ldbu	fp,158(sp)
10101d18:	d8802a15 	stw	r2,168(sp)
10101d1c:	dcc02d15 	stw	r19,180(sp)
10101d20:	d8002915 	stw	zero,164(sp)
10101d24:	d8003215 	stw	zero,200(sp)
10101d28:	003eb006 	br	101017ec <__alt_data_end+0xfffe17ec>
10101d2c:	18c03fcc 	andi	r3,r3,255
10101d30:	183f9b26 	beq	r3,zero,10101ba0 <__alt_data_end+0xfffe1ba0>
10101d34:	d9c02785 	stb	r7,158(sp)
10101d38:	003f9906 	br	10101ba0 <__alt_data_end+0xfffe1ba0>
10101d3c:	18c03fcc 	andi	r3,r3,255
10101d40:	1805551e 	bne	r3,zero,10103298 <___vfprintf_internal_r+0x21e0>
10101d44:	01440474 	movhi	r5,4113
10101d48:	2940a204 	addi	r5,r5,648
10101d4c:	d9403915 	stw	r5,228(sp)
10101d50:	9080080c 	andi	r2,r18,32
10101d54:	103fae1e 	bne	r2,zero,10101c10 <__alt_data_end+0xfffe1c10>
10101d58:	9080040c 	andi	r2,r18,16
10101d5c:	1002de26 	beq	r2,zero,101028d8 <___vfprintf_internal_r+0x1820>
10101d60:	d8c02d17 	ldw	r3,180(sp)
10101d64:	002d883a 	mov	r22,zero
10101d68:	1cc00017 	ldw	r19,0(r3)
10101d6c:	18c00104 	addi	r3,r3,4
10101d70:	d8c02d15 	stw	r3,180(sp)
10101d74:	003fab06 	br	10101c24 <__alt_data_end+0xfffe1c24>
10101d78:	38803fcc 	andi	r2,r7,255
10101d7c:	1080201c 	xori	r2,r2,128
10101d80:	10bfe004 	addi	r2,r2,-128
10101d84:	1002d21e 	bne	r2,zero,101028d0 <___vfprintf_internal_r+0x1818>
10101d88:	00c00044 	movi	r3,1
10101d8c:	01c00804 	movi	r7,32
10101d90:	ac400007 	ldb	r17,0(r21)
10101d94:	003d2906 	br	1010123c <__alt_data_end+0xfffe123c>
10101d98:	94800054 	ori	r18,r18,1
10101d9c:	ac400007 	ldb	r17,0(r21)
10101da0:	003d2606 	br	1010123c <__alt_data_end+0xfffe123c>
10101da4:	18c03fcc 	andi	r3,r3,255
10101da8:	183e0526 	beq	r3,zero,101015c0 <__alt_data_end+0xfffe15c0>
10101dac:	d9c02785 	stb	r7,158(sp)
10101db0:	003e0306 	br	101015c0 <__alt_data_end+0xfffe15c0>
10101db4:	94801014 	ori	r18,r18,64
10101db8:	ac400007 	ldb	r17,0(r21)
10101dbc:	003d1f06 	br	1010123c <__alt_data_end+0xfffe123c>
10101dc0:	ac400007 	ldb	r17,0(r21)
10101dc4:	8a438726 	beq	r17,r9,10102be4 <___vfprintf_internal_r+0x1b2c>
10101dc8:	94800414 	ori	r18,r18,16
10101dcc:	003d1b06 	br	1010123c <__alt_data_end+0xfffe123c>
10101dd0:	18c03fcc 	andi	r3,r3,255
10101dd4:	1805341e 	bne	r3,zero,101032a8 <___vfprintf_internal_r+0x21f0>
10101dd8:	9080080c 	andi	r2,r18,32
10101ddc:	1002cd26 	beq	r2,zero,10102914 <___vfprintf_internal_r+0x185c>
10101de0:	d9402d17 	ldw	r5,180(sp)
10101de4:	d9002f17 	ldw	r4,188(sp)
10101de8:	28800017 	ldw	r2,0(r5)
10101dec:	2007d7fa 	srai	r3,r4,31
10101df0:	29400104 	addi	r5,r5,4
10101df4:	d9402d15 	stw	r5,180(sp)
10101df8:	11000015 	stw	r4,0(r2)
10101dfc:	10c00115 	stw	r3,4(r2)
10101e00:	003ce506 	br	10101198 <__alt_data_end+0xfffe1198>
10101e04:	d8c02d17 	ldw	r3,180(sp)
10101e08:	d9002d17 	ldw	r4,180(sp)
10101e0c:	d8002785 	stb	zero,158(sp)
10101e10:	18800017 	ldw	r2,0(r3)
10101e14:	21000104 	addi	r4,r4,4
10101e18:	00c00044 	movi	r3,1
10101e1c:	d8c02a15 	stw	r3,168(sp)
10101e20:	d8801405 	stb	r2,80(sp)
10101e24:	d9002d15 	stw	r4,180(sp)
10101e28:	d8c02e15 	stw	r3,184(sp)
10101e2c:	d8002915 	stw	zero,164(sp)
10101e30:	d8003215 	stw	zero,200(sp)
10101e34:	dc001404 	addi	r16,sp,80
10101e38:	0039883a 	mov	fp,zero
10101e3c:	003e7206 	br	10101808 <__alt_data_end+0xfffe1808>
10101e40:	01040474 	movhi	r4,4113
10101e44:	2100a204 	addi	r4,r4,648
10101e48:	0039883a 	mov	fp,zero
10101e4c:	d9003915 	stw	r4,228(sp)
10101e50:	04401e04 	movi	r17,120
10101e54:	003f8206 	br	10101c60 <__alt_data_end+0xfffe1c60>
10101e58:	18c03fcc 	andi	r3,r3,255
10101e5c:	1805061e 	bne	r3,zero,10103278 <___vfprintf_internal_r+0x21c0>
10101e60:	883d9126 	beq	r17,zero,101014a8 <__alt_data_end+0xfffe14a8>
10101e64:	00c00044 	movi	r3,1
10101e68:	d8c02a15 	stw	r3,168(sp)
10101e6c:	dc401405 	stb	r17,80(sp)
10101e70:	d8002785 	stb	zero,158(sp)
10101e74:	003fec06 	br	10101e28 <__alt_data_end+0xfffe1e28>
10101e78:	01440474 	movhi	r5,4113
10101e7c:	2940a204 	addi	r5,r5,648
10101e80:	d9403915 	stw	r5,228(sp)
10101e84:	d8c02d15 	stw	r3,180(sp)
10101e88:	1025883a 	mov	r18,r2
10101e8c:	04401e04 	movi	r17,120
10101e90:	9d84b03a 	or	r2,r19,r22
10101e94:	1000fc1e 	bne	r2,zero,10102288 <___vfprintf_internal_r+0x11d0>
10101e98:	0039883a 	mov	fp,zero
10101e9c:	00800084 	movi	r2,2
10101ea0:	10803fcc 	andi	r2,r2,255
10101ea4:	00c00044 	movi	r3,1
10101ea8:	10c20f26 	beq	r2,r3,101026e8 <___vfprintf_internal_r+0x1630>
10101eac:	00c00084 	movi	r3,2
10101eb0:	10fd6326 	beq	r2,r3,10101440 <__alt_data_end+0xfffe1440>
10101eb4:	003e2d06 	br	1010176c <__alt_data_end+0xfffe176c>
10101eb8:	d8c02017 	ldw	r3,128(sp)
10101ebc:	003e9306 	br	1010190c <__alt_data_end+0xfffe190c>
10101ec0:	00801944 	movi	r2,101
10101ec4:	14407e0e 	bge	r2,r17,101020c0 <___vfprintf_internal_r+0x1008>
10101ec8:	d9003617 	ldw	r4,216(sp)
10101ecc:	d9403817 	ldw	r5,224(sp)
10101ed0:	000d883a 	mov	r6,zero
10101ed4:	000f883a 	mov	r7,zero
10101ed8:	d8c03c15 	stw	r3,240(sp)
10101edc:	da003d15 	stw	r8,244(sp)
10101ee0:	010c1780 	call	1010c178 <__eqdf2>
10101ee4:	d8c03c17 	ldw	r3,240(sp)
10101ee8:	da003d17 	ldw	r8,244(sp)
10101eec:	1000f71e 	bne	r2,zero,101022cc <___vfprintf_internal_r+0x1214>
10101ef0:	d8801f17 	ldw	r2,124(sp)
10101ef4:	01040474 	movhi	r4,4113
10101ef8:	2100a904 	addi	r4,r4,676
10101efc:	18c00044 	addi	r3,r3,1
10101f00:	10800044 	addi	r2,r2,1
10101f04:	41000015 	stw	r4,0(r8)
10101f08:	01000044 	movi	r4,1
10101f0c:	41000115 	stw	r4,4(r8)
10101f10:	d8c02015 	stw	r3,128(sp)
10101f14:	d8801f15 	stw	r2,124(sp)
10101f18:	010001c4 	movi	r4,7
10101f1c:	2082b816 	blt	r4,r2,10102a00 <___vfprintf_internal_r+0x1948>
10101f20:	42000204 	addi	r8,r8,8
10101f24:	d8802617 	ldw	r2,152(sp)
10101f28:	d9403317 	ldw	r5,204(sp)
10101f2c:	11400216 	blt	r2,r5,10101f38 <___vfprintf_internal_r+0xe80>
10101f30:	9080004c 	andi	r2,r18,1
10101f34:	103ed526 	beq	r2,zero,10101a8c <__alt_data_end+0xfffe1a8c>
10101f38:	d8803717 	ldw	r2,220(sp)
10101f3c:	d9003417 	ldw	r4,208(sp)
10101f40:	d9403717 	ldw	r5,220(sp)
10101f44:	1887883a 	add	r3,r3,r2
10101f48:	d8801f17 	ldw	r2,124(sp)
10101f4c:	41000015 	stw	r4,0(r8)
10101f50:	41400115 	stw	r5,4(r8)
10101f54:	10800044 	addi	r2,r2,1
10101f58:	d8c02015 	stw	r3,128(sp)
10101f5c:	d8801f15 	stw	r2,124(sp)
10101f60:	010001c4 	movi	r4,7
10101f64:	20832916 	blt	r4,r2,10102c0c <___vfprintf_internal_r+0x1b54>
10101f68:	42000204 	addi	r8,r8,8
10101f6c:	d8803317 	ldw	r2,204(sp)
10101f70:	143fffc4 	addi	r16,r2,-1
10101f74:	043ec50e 	bge	zero,r16,10101a8c <__alt_data_end+0xfffe1a8c>
10101f78:	04400404 	movi	r17,16
10101f7c:	d8801f17 	ldw	r2,124(sp)
10101f80:	8c00880e 	bge	r17,r16,101021a4 <___vfprintf_internal_r+0x10ec>
10101f84:	01440474 	movhi	r5,4113
10101f88:	2940a984 	addi	r5,r5,678
10101f8c:	d9402b15 	stw	r5,172(sp)
10101f90:	058001c4 	movi	r22,7
10101f94:	dcc02c17 	ldw	r19,176(sp)
10101f98:	00000306 	br	10101fa8 <___vfprintf_internal_r+0xef0>
10101f9c:	42000204 	addi	r8,r8,8
10101fa0:	843ffc04 	addi	r16,r16,-16
10101fa4:	8c00820e 	bge	r17,r16,101021b0 <___vfprintf_internal_r+0x10f8>
10101fa8:	18c00404 	addi	r3,r3,16
10101fac:	10800044 	addi	r2,r2,1
10101fb0:	45000015 	stw	r20,0(r8)
10101fb4:	44400115 	stw	r17,4(r8)
10101fb8:	d8c02015 	stw	r3,128(sp)
10101fbc:	d8801f15 	stw	r2,124(sp)
10101fc0:	b0bff60e 	bge	r22,r2,10101f9c <__alt_data_end+0xfffe1f9c>
10101fc4:	d9801e04 	addi	r6,sp,120
10101fc8:	b80b883a 	mov	r5,r23
10101fcc:	9809883a 	mov	r4,r19
10101fd0:	01086b40 	call	101086b4 <__sprint_r>
10101fd4:	103d3a1e 	bne	r2,zero,101014c0 <__alt_data_end+0xfffe14c0>
10101fd8:	d8c02017 	ldw	r3,128(sp)
10101fdc:	d8801f17 	ldw	r2,124(sp)
10101fe0:	da000404 	addi	r8,sp,16
10101fe4:	003fee06 	br	10101fa0 <__alt_data_end+0xfffe1fa0>
10101fe8:	d9403117 	ldw	r5,196(sp)
10101fec:	d8802a17 	ldw	r2,168(sp)
10101ff0:	28adc83a 	sub	r22,r5,r2
10101ff4:	05be630e 	bge	zero,r22,10101984 <__alt_data_end+0xfffe1984>
10101ff8:	07000404 	movi	fp,16
10101ffc:	d8801f17 	ldw	r2,124(sp)
10102000:	e5838f0e 	bge	fp,r22,10102e40 <___vfprintf_internal_r+0x1d88>
10102004:	01440474 	movhi	r5,4113
10102008:	2940a984 	addi	r5,r5,678
1010200c:	dc403015 	stw	r17,192(sp)
10102010:	d9402b15 	stw	r5,172(sp)
10102014:	b023883a 	mov	r17,r22
10102018:	04c001c4 	movi	r19,7
1010201c:	a82d883a 	mov	r22,r21
10102020:	902b883a 	mov	r21,r18
10102024:	8025883a 	mov	r18,r16
10102028:	dc002c17 	ldw	r16,176(sp)
1010202c:	00000306 	br	1010203c <___vfprintf_internal_r+0xf84>
10102030:	8c7ffc04 	addi	r17,r17,-16
10102034:	42000204 	addi	r8,r8,8
10102038:	e440110e 	bge	fp,r17,10102080 <___vfprintf_internal_r+0xfc8>
1010203c:	18c00404 	addi	r3,r3,16
10102040:	10800044 	addi	r2,r2,1
10102044:	45000015 	stw	r20,0(r8)
10102048:	47000115 	stw	fp,4(r8)
1010204c:	d8c02015 	stw	r3,128(sp)
10102050:	d8801f15 	stw	r2,124(sp)
10102054:	98bff60e 	bge	r19,r2,10102030 <__alt_data_end+0xfffe2030>
10102058:	d9801e04 	addi	r6,sp,120
1010205c:	b80b883a 	mov	r5,r23
10102060:	8009883a 	mov	r4,r16
10102064:	01086b40 	call	101086b4 <__sprint_r>
10102068:	103d151e 	bne	r2,zero,101014c0 <__alt_data_end+0xfffe14c0>
1010206c:	8c7ffc04 	addi	r17,r17,-16
10102070:	d8c02017 	ldw	r3,128(sp)
10102074:	d8801f17 	ldw	r2,124(sp)
10102078:	da000404 	addi	r8,sp,16
1010207c:	e47fef16 	blt	fp,r17,1010203c <__alt_data_end+0xfffe203c>
10102080:	9021883a 	mov	r16,r18
10102084:	a825883a 	mov	r18,r21
10102088:	b02b883a 	mov	r21,r22
1010208c:	882d883a 	mov	r22,r17
10102090:	dc403017 	ldw	r17,192(sp)
10102094:	d9002b17 	ldw	r4,172(sp)
10102098:	1d87883a 	add	r3,r3,r22
1010209c:	10800044 	addi	r2,r2,1
101020a0:	41000015 	stw	r4,0(r8)
101020a4:	45800115 	stw	r22,4(r8)
101020a8:	d8c02015 	stw	r3,128(sp)
101020ac:	d8801f15 	stw	r2,124(sp)
101020b0:	010001c4 	movi	r4,7
101020b4:	20818e16 	blt	r4,r2,101026f0 <___vfprintf_internal_r+0x1638>
101020b8:	42000204 	addi	r8,r8,8
101020bc:	003e3106 	br	10101984 <__alt_data_end+0xfffe1984>
101020c0:	d9403317 	ldw	r5,204(sp)
101020c4:	00800044 	movi	r2,1
101020c8:	18c00044 	addi	r3,r3,1
101020cc:	1141530e 	bge	r2,r5,1010261c <___vfprintf_internal_r+0x1564>
101020d0:	dc401f17 	ldw	r17,124(sp)
101020d4:	00800044 	movi	r2,1
101020d8:	40800115 	stw	r2,4(r8)
101020dc:	8c400044 	addi	r17,r17,1
101020e0:	44000015 	stw	r16,0(r8)
101020e4:	d8c02015 	stw	r3,128(sp)
101020e8:	dc401f15 	stw	r17,124(sp)
101020ec:	008001c4 	movi	r2,7
101020f0:	14416b16 	blt	r2,r17,101026a0 <___vfprintf_internal_r+0x15e8>
101020f4:	42000204 	addi	r8,r8,8
101020f8:	d8803717 	ldw	r2,220(sp)
101020fc:	d9003417 	ldw	r4,208(sp)
10102100:	8c400044 	addi	r17,r17,1
10102104:	10c7883a 	add	r3,r2,r3
10102108:	40800115 	stw	r2,4(r8)
1010210c:	41000015 	stw	r4,0(r8)
10102110:	d8c02015 	stw	r3,128(sp)
10102114:	dc401f15 	stw	r17,124(sp)
10102118:	008001c4 	movi	r2,7
1010211c:	14416916 	blt	r2,r17,101026c4 <___vfprintf_internal_r+0x160c>
10102120:	45800204 	addi	r22,r8,8
10102124:	d9003617 	ldw	r4,216(sp)
10102128:	d9403817 	ldw	r5,224(sp)
1010212c:	000d883a 	mov	r6,zero
10102130:	000f883a 	mov	r7,zero
10102134:	d8c03c15 	stw	r3,240(sp)
10102138:	010c1780 	call	1010c178 <__eqdf2>
1010213c:	d8c03c17 	ldw	r3,240(sp)
10102140:	1000bc26 	beq	r2,zero,10102434 <___vfprintf_internal_r+0x137c>
10102144:	d9403317 	ldw	r5,204(sp)
10102148:	84000044 	addi	r16,r16,1
1010214c:	8c400044 	addi	r17,r17,1
10102150:	28bfffc4 	addi	r2,r5,-1
10102154:	1887883a 	add	r3,r3,r2
10102158:	b0800115 	stw	r2,4(r22)
1010215c:	b4000015 	stw	r16,0(r22)
10102160:	d8c02015 	stw	r3,128(sp)
10102164:	dc401f15 	stw	r17,124(sp)
10102168:	008001c4 	movi	r2,7
1010216c:	14414316 	blt	r2,r17,1010267c <___vfprintf_internal_r+0x15c4>
10102170:	b5800204 	addi	r22,r22,8
10102174:	d9003a17 	ldw	r4,232(sp)
10102178:	df0022c4 	addi	fp,sp,139
1010217c:	8c400044 	addi	r17,r17,1
10102180:	20c7883a 	add	r3,r4,r3
10102184:	b7000015 	stw	fp,0(r22)
10102188:	b1000115 	stw	r4,4(r22)
1010218c:	d8c02015 	stw	r3,128(sp)
10102190:	dc401f15 	stw	r17,124(sp)
10102194:	008001c4 	movi	r2,7
10102198:	14400e16 	blt	r2,r17,101021d4 <___vfprintf_internal_r+0x111c>
1010219c:	b2000204 	addi	r8,r22,8
101021a0:	003e3a06 	br	10101a8c <__alt_data_end+0xfffe1a8c>
101021a4:	01040474 	movhi	r4,4113
101021a8:	2100a984 	addi	r4,r4,678
101021ac:	d9002b15 	stw	r4,172(sp)
101021b0:	d9002b17 	ldw	r4,172(sp)
101021b4:	1c07883a 	add	r3,r3,r16
101021b8:	44000115 	stw	r16,4(r8)
101021bc:	41000015 	stw	r4,0(r8)
101021c0:	10800044 	addi	r2,r2,1
101021c4:	d8c02015 	stw	r3,128(sp)
101021c8:	d8801f15 	stw	r2,124(sp)
101021cc:	010001c4 	movi	r4,7
101021d0:	20be2d0e 	bge	r4,r2,10101a88 <__alt_data_end+0xfffe1a88>
101021d4:	d9002c17 	ldw	r4,176(sp)
101021d8:	d9801e04 	addi	r6,sp,120
101021dc:	b80b883a 	mov	r5,r23
101021e0:	01086b40 	call	101086b4 <__sprint_r>
101021e4:	103cb61e 	bne	r2,zero,101014c0 <__alt_data_end+0xfffe14c0>
101021e8:	d8c02017 	ldw	r3,128(sp)
101021ec:	da000404 	addi	r8,sp,16
101021f0:	003e2606 	br	10101a8c <__alt_data_end+0xfffe1a8c>
101021f4:	d9002c17 	ldw	r4,176(sp)
101021f8:	d9801e04 	addi	r6,sp,120
101021fc:	b80b883a 	mov	r5,r23
10102200:	01086b40 	call	101086b4 <__sprint_r>
10102204:	103e5d26 	beq	r2,zero,10101b7c <__alt_data_end+0xfffe1b7c>
10102208:	003cad06 	br	101014c0 <__alt_data_end+0xfffe14c0>
1010220c:	d9002c17 	ldw	r4,176(sp)
10102210:	d9801e04 	addi	r6,sp,120
10102214:	b80b883a 	mov	r5,r23
10102218:	01086b40 	call	101086b4 <__sprint_r>
1010221c:	103ca81e 	bne	r2,zero,101014c0 <__alt_data_end+0xfffe14c0>
10102220:	d8c02017 	ldw	r3,128(sp)
10102224:	da000404 	addi	r8,sp,16
10102228:	003e0b06 	br	10101a58 <__alt_data_end+0xfffe1a58>
1010222c:	d9002c17 	ldw	r4,176(sp)
10102230:	d9801e04 	addi	r6,sp,120
10102234:	b80b883a 	mov	r5,r23
10102238:	01086b40 	call	101086b4 <__sprint_r>
1010223c:	103ca01e 	bne	r2,zero,101014c0 <__alt_data_end+0xfffe14c0>
10102240:	d8c02017 	ldw	r3,128(sp)
10102244:	da000404 	addi	r8,sp,16
10102248:	003dbd06 	br	10101940 <__alt_data_end+0xfffe1940>
1010224c:	d9002c17 	ldw	r4,176(sp)
10102250:	d9801e04 	addi	r6,sp,120
10102254:	b80b883a 	mov	r5,r23
10102258:	01086b40 	call	101086b4 <__sprint_r>
1010225c:	103c981e 	bne	r2,zero,101014c0 <__alt_data_end+0xfffe14c0>
10102260:	d8c02017 	ldw	r3,128(sp)
10102264:	da000404 	addi	r8,sp,16
10102268:	003dc306 	br	10101978 <__alt_data_end+0xfffe1978>
1010226c:	d8802917 	ldw	r2,164(sp)
10102270:	d8002785 	stb	zero,158(sp)
10102274:	103f0616 	blt	r2,zero,10101e90 <__alt_data_end+0xfffe1e90>
10102278:	00ffdfc4 	movi	r3,-129
1010227c:	9d84b03a 	or	r2,r19,r22
10102280:	90e4703a 	and	r18,r18,r3
10102284:	103c6b26 	beq	r2,zero,10101434 <__alt_data_end+0xfffe1434>
10102288:	0039883a 	mov	fp,zero
1010228c:	003e7406 	br	10101c60 <__alt_data_end+0xfffe1c60>
10102290:	9080040c 	andi	r2,r18,16
10102294:	1001b326 	beq	r2,zero,10102964 <___vfprintf_internal_r+0x18ac>
10102298:	d9002d17 	ldw	r4,180(sp)
1010229c:	d9402917 	ldw	r5,164(sp)
101022a0:	d8002785 	stb	zero,158(sp)
101022a4:	20800104 	addi	r2,r4,4
101022a8:	24c00017 	ldw	r19,0(r4)
101022ac:	002d883a 	mov	r22,zero
101022b0:	2801b516 	blt	r5,zero,10102988 <___vfprintf_internal_r+0x18d0>
101022b4:	00ffdfc4 	movi	r3,-129
101022b8:	d8802d15 	stw	r2,180(sp)
101022bc:	90e4703a 	and	r18,r18,r3
101022c0:	983d2726 	beq	r19,zero,10101760 <__alt_data_end+0xfffe1760>
101022c4:	0039883a 	mov	fp,zero
101022c8:	003d2a06 	br	10101774 <__alt_data_end+0xfffe1774>
101022cc:	dc402617 	ldw	r17,152(sp)
101022d0:	0441d30e 	bge	zero,r17,10102a20 <___vfprintf_internal_r+0x1968>
101022d4:	dc403217 	ldw	r17,200(sp)
101022d8:	d8803317 	ldw	r2,204(sp)
101022dc:	1440010e 	bge	r2,r17,101022e4 <___vfprintf_internal_r+0x122c>
101022e0:	1023883a 	mov	r17,r2
101022e4:	04400a0e 	bge	zero,r17,10102310 <___vfprintf_internal_r+0x1258>
101022e8:	d8801f17 	ldw	r2,124(sp)
101022ec:	1c47883a 	add	r3,r3,r17
101022f0:	44000015 	stw	r16,0(r8)
101022f4:	10800044 	addi	r2,r2,1
101022f8:	44400115 	stw	r17,4(r8)
101022fc:	d8c02015 	stw	r3,128(sp)
10102300:	d8801f15 	stw	r2,124(sp)
10102304:	010001c4 	movi	r4,7
10102308:	20826516 	blt	r4,r2,10102ca0 <___vfprintf_internal_r+0x1be8>
1010230c:	42000204 	addi	r8,r8,8
10102310:	88026116 	blt	r17,zero,10102c98 <___vfprintf_internal_r+0x1be0>
10102314:	d9003217 	ldw	r4,200(sp)
10102318:	2463c83a 	sub	r17,r4,r17
1010231c:	04407b0e 	bge	zero,r17,1010250c <___vfprintf_internal_r+0x1454>
10102320:	05800404 	movi	r22,16
10102324:	d8801f17 	ldw	r2,124(sp)
10102328:	b4419d0e 	bge	r22,r17,101029a0 <___vfprintf_internal_r+0x18e8>
1010232c:	01040474 	movhi	r4,4113
10102330:	2100a984 	addi	r4,r4,678
10102334:	d9002b15 	stw	r4,172(sp)
10102338:	070001c4 	movi	fp,7
1010233c:	dcc02c17 	ldw	r19,176(sp)
10102340:	00000306 	br	10102350 <___vfprintf_internal_r+0x1298>
10102344:	42000204 	addi	r8,r8,8
10102348:	8c7ffc04 	addi	r17,r17,-16
1010234c:	b441970e 	bge	r22,r17,101029ac <___vfprintf_internal_r+0x18f4>
10102350:	18c00404 	addi	r3,r3,16
10102354:	10800044 	addi	r2,r2,1
10102358:	45000015 	stw	r20,0(r8)
1010235c:	45800115 	stw	r22,4(r8)
10102360:	d8c02015 	stw	r3,128(sp)
10102364:	d8801f15 	stw	r2,124(sp)
10102368:	e0bff60e 	bge	fp,r2,10102344 <__alt_data_end+0xfffe2344>
1010236c:	d9801e04 	addi	r6,sp,120
10102370:	b80b883a 	mov	r5,r23
10102374:	9809883a 	mov	r4,r19
10102378:	01086b40 	call	101086b4 <__sprint_r>
1010237c:	103c501e 	bne	r2,zero,101014c0 <__alt_data_end+0xfffe14c0>
10102380:	d8c02017 	ldw	r3,128(sp)
10102384:	d8801f17 	ldw	r2,124(sp)
10102388:	da000404 	addi	r8,sp,16
1010238c:	003fee06 	br	10102348 <__alt_data_end+0xfffe2348>
10102390:	d9002c17 	ldw	r4,176(sp)
10102394:	d9801e04 	addi	r6,sp,120
10102398:	b80b883a 	mov	r5,r23
1010239c:	01086b40 	call	101086b4 <__sprint_r>
101023a0:	103c471e 	bne	r2,zero,101014c0 <__alt_data_end+0xfffe14c0>
101023a4:	d8c02017 	ldw	r3,128(sp)
101023a8:	df002787 	ldb	fp,158(sp)
101023ac:	da000404 	addi	r8,sp,16
101023b0:	003d5606 	br	1010190c <__alt_data_end+0xfffe190c>
101023b4:	9080040c 	andi	r2,r18,16
101023b8:	10016126 	beq	r2,zero,10102940 <___vfprintf_internal_r+0x1888>
101023bc:	d8802d17 	ldw	r2,180(sp)
101023c0:	14c00017 	ldw	r19,0(r2)
101023c4:	10800104 	addi	r2,r2,4
101023c8:	d8802d15 	stw	r2,180(sp)
101023cc:	982dd7fa 	srai	r22,r19,31
101023d0:	b005883a 	mov	r2,r22
101023d4:	003c8206 	br	101015e0 <__alt_data_end+0xfffe15e0>
101023d8:	9080040c 	andi	r2,r18,16
101023dc:	10003526 	beq	r2,zero,101024b4 <___vfprintf_internal_r+0x13fc>
101023e0:	d9402d17 	ldw	r5,180(sp)
101023e4:	d8c02917 	ldw	r3,164(sp)
101023e8:	d8002785 	stb	zero,158(sp)
101023ec:	28800104 	addi	r2,r5,4
101023f0:	2cc00017 	ldw	r19,0(r5)
101023f4:	002d883a 	mov	r22,zero
101023f8:	18003716 	blt	r3,zero,101024d8 <___vfprintf_internal_r+0x1420>
101023fc:	00ffdfc4 	movi	r3,-129
10102400:	d8802d15 	stw	r2,180(sp)
10102404:	90e4703a 	and	r18,r18,r3
10102408:	0039883a 	mov	fp,zero
1010240c:	983df326 	beq	r19,zero,10101bdc <__alt_data_end+0xfffe1bdc>
10102410:	00800244 	movi	r2,9
10102414:	14fc7b36 	bltu	r2,r19,10101604 <__alt_data_end+0xfffe1604>
10102418:	d8c02817 	ldw	r3,160(sp)
1010241c:	dc001dc4 	addi	r16,sp,119
10102420:	9cc00c04 	addi	r19,r19,48
10102424:	1c07c83a 	sub	r3,r3,r16
10102428:	dcc01dc5 	stb	r19,119(sp)
1010242c:	d8c02e15 	stw	r3,184(sp)
10102430:	003ce806 	br	101017d4 <__alt_data_end+0xfffe17d4>
10102434:	d8803317 	ldw	r2,204(sp)
10102438:	143fffc4 	addi	r16,r2,-1
1010243c:	043f4d0e 	bge	zero,r16,10102174 <__alt_data_end+0xfffe2174>
10102440:	07000404 	movi	fp,16
10102444:	e400810e 	bge	fp,r16,1010264c <___vfprintf_internal_r+0x1594>
10102448:	01440474 	movhi	r5,4113
1010244c:	2940a984 	addi	r5,r5,678
10102450:	d9402b15 	stw	r5,172(sp)
10102454:	01c001c4 	movi	r7,7
10102458:	dcc02c17 	ldw	r19,176(sp)
1010245c:	00000306 	br	1010246c <___vfprintf_internal_r+0x13b4>
10102460:	b5800204 	addi	r22,r22,8
10102464:	843ffc04 	addi	r16,r16,-16
10102468:	e4007b0e 	bge	fp,r16,10102658 <___vfprintf_internal_r+0x15a0>
1010246c:	18c00404 	addi	r3,r3,16
10102470:	8c400044 	addi	r17,r17,1
10102474:	b5000015 	stw	r20,0(r22)
10102478:	b7000115 	stw	fp,4(r22)
1010247c:	d8c02015 	stw	r3,128(sp)
10102480:	dc401f15 	stw	r17,124(sp)
10102484:	3c7ff60e 	bge	r7,r17,10102460 <__alt_data_end+0xfffe2460>
10102488:	d9801e04 	addi	r6,sp,120
1010248c:	b80b883a 	mov	r5,r23
10102490:	9809883a 	mov	r4,r19
10102494:	d9c03c15 	stw	r7,240(sp)
10102498:	01086b40 	call	101086b4 <__sprint_r>
1010249c:	d9c03c17 	ldw	r7,240(sp)
101024a0:	103c071e 	bne	r2,zero,101014c0 <__alt_data_end+0xfffe14c0>
101024a4:	d8c02017 	ldw	r3,128(sp)
101024a8:	dc401f17 	ldw	r17,124(sp)
101024ac:	dd800404 	addi	r22,sp,16
101024b0:	003fec06 	br	10102464 <__alt_data_end+0xfffe2464>
101024b4:	9080100c 	andi	r2,r18,64
101024b8:	d8002785 	stb	zero,158(sp)
101024bc:	10010e26 	beq	r2,zero,101028f8 <___vfprintf_internal_r+0x1840>
101024c0:	d9002d17 	ldw	r4,180(sp)
101024c4:	d9402917 	ldw	r5,164(sp)
101024c8:	002d883a 	mov	r22,zero
101024cc:	20800104 	addi	r2,r4,4
101024d0:	24c0000b 	ldhu	r19,0(r4)
101024d4:	283fc90e 	bge	r5,zero,101023fc <__alt_data_end+0xfffe23fc>
101024d8:	d8802d15 	stw	r2,180(sp)
101024dc:	0039883a 	mov	fp,zero
101024e0:	9d84b03a 	or	r2,r19,r22
101024e4:	103c461e 	bne	r2,zero,10101600 <__alt_data_end+0xfffe1600>
101024e8:	00800044 	movi	r2,1
101024ec:	003e6c06 	br	10101ea0 <__alt_data_end+0xfffe1ea0>
101024f0:	d9002c17 	ldw	r4,176(sp)
101024f4:	d9801e04 	addi	r6,sp,120
101024f8:	b80b883a 	mov	r5,r23
101024fc:	01086b40 	call	101086b4 <__sprint_r>
10102500:	103bef1e 	bne	r2,zero,101014c0 <__alt_data_end+0xfffe14c0>
10102504:	d8c02017 	ldw	r3,128(sp)
10102508:	da000404 	addi	r8,sp,16
1010250c:	d9003217 	ldw	r4,200(sp)
10102510:	d8802617 	ldw	r2,152(sp)
10102514:	d9403317 	ldw	r5,204(sp)
10102518:	8123883a 	add	r17,r16,r4
1010251c:	11400216 	blt	r2,r5,10102528 <___vfprintf_internal_r+0x1470>
10102520:	9100004c 	andi	r4,r18,1
10102524:	20000d26 	beq	r4,zero,1010255c <___vfprintf_internal_r+0x14a4>
10102528:	d9003717 	ldw	r4,220(sp)
1010252c:	d9403417 	ldw	r5,208(sp)
10102530:	1907883a 	add	r3,r3,r4
10102534:	d9001f17 	ldw	r4,124(sp)
10102538:	41400015 	stw	r5,0(r8)
1010253c:	d9403717 	ldw	r5,220(sp)
10102540:	21000044 	addi	r4,r4,1
10102544:	d8c02015 	stw	r3,128(sp)
10102548:	41400115 	stw	r5,4(r8)
1010254c:	d9001f15 	stw	r4,124(sp)
10102550:	014001c4 	movi	r5,7
10102554:	2901e816 	blt	r5,r4,10102cf8 <___vfprintf_internal_r+0x1c40>
10102558:	42000204 	addi	r8,r8,8
1010255c:	d9003317 	ldw	r4,204(sp)
10102560:	8121883a 	add	r16,r16,r4
10102564:	2085c83a 	sub	r2,r4,r2
10102568:	8461c83a 	sub	r16,r16,r17
1010256c:	1400010e 	bge	r2,r16,10102574 <___vfprintf_internal_r+0x14bc>
10102570:	1021883a 	mov	r16,r2
10102574:	04000a0e 	bge	zero,r16,101025a0 <___vfprintf_internal_r+0x14e8>
10102578:	d9001f17 	ldw	r4,124(sp)
1010257c:	1c07883a 	add	r3,r3,r16
10102580:	44400015 	stw	r17,0(r8)
10102584:	21000044 	addi	r4,r4,1
10102588:	44000115 	stw	r16,4(r8)
1010258c:	d8c02015 	stw	r3,128(sp)
10102590:	d9001f15 	stw	r4,124(sp)
10102594:	014001c4 	movi	r5,7
10102598:	2901fb16 	blt	r5,r4,10102d88 <___vfprintf_internal_r+0x1cd0>
1010259c:	42000204 	addi	r8,r8,8
101025a0:	8001f716 	blt	r16,zero,10102d80 <___vfprintf_internal_r+0x1cc8>
101025a4:	1421c83a 	sub	r16,r2,r16
101025a8:	043d380e 	bge	zero,r16,10101a8c <__alt_data_end+0xfffe1a8c>
101025ac:	04400404 	movi	r17,16
101025b0:	d8801f17 	ldw	r2,124(sp)
101025b4:	8c3efb0e 	bge	r17,r16,101021a4 <__alt_data_end+0xfffe21a4>
101025b8:	01440474 	movhi	r5,4113
101025bc:	2940a984 	addi	r5,r5,678
101025c0:	d9402b15 	stw	r5,172(sp)
101025c4:	058001c4 	movi	r22,7
101025c8:	dcc02c17 	ldw	r19,176(sp)
101025cc:	00000306 	br	101025dc <___vfprintf_internal_r+0x1524>
101025d0:	42000204 	addi	r8,r8,8
101025d4:	843ffc04 	addi	r16,r16,-16
101025d8:	8c3ef50e 	bge	r17,r16,101021b0 <__alt_data_end+0xfffe21b0>
101025dc:	18c00404 	addi	r3,r3,16
101025e0:	10800044 	addi	r2,r2,1
101025e4:	45000015 	stw	r20,0(r8)
101025e8:	44400115 	stw	r17,4(r8)
101025ec:	d8c02015 	stw	r3,128(sp)
101025f0:	d8801f15 	stw	r2,124(sp)
101025f4:	b0bff60e 	bge	r22,r2,101025d0 <__alt_data_end+0xfffe25d0>
101025f8:	d9801e04 	addi	r6,sp,120
101025fc:	b80b883a 	mov	r5,r23
10102600:	9809883a 	mov	r4,r19
10102604:	01086b40 	call	101086b4 <__sprint_r>
10102608:	103bad1e 	bne	r2,zero,101014c0 <__alt_data_end+0xfffe14c0>
1010260c:	d8c02017 	ldw	r3,128(sp)
10102610:	d8801f17 	ldw	r2,124(sp)
10102614:	da000404 	addi	r8,sp,16
10102618:	003fee06 	br	101025d4 <__alt_data_end+0xfffe25d4>
1010261c:	9088703a 	and	r4,r18,r2
10102620:	203eab1e 	bne	r4,zero,101020d0 <__alt_data_end+0xfffe20d0>
10102624:	dc401f17 	ldw	r17,124(sp)
10102628:	40800115 	stw	r2,4(r8)
1010262c:	44000015 	stw	r16,0(r8)
10102630:	8c400044 	addi	r17,r17,1
10102634:	d8c02015 	stw	r3,128(sp)
10102638:	dc401f15 	stw	r17,124(sp)
1010263c:	008001c4 	movi	r2,7
10102640:	14400e16 	blt	r2,r17,1010267c <___vfprintf_internal_r+0x15c4>
10102644:	45800204 	addi	r22,r8,8
10102648:	003eca06 	br	10102174 <__alt_data_end+0xfffe2174>
1010264c:	01040474 	movhi	r4,4113
10102650:	2100a984 	addi	r4,r4,678
10102654:	d9002b15 	stw	r4,172(sp)
10102658:	d8802b17 	ldw	r2,172(sp)
1010265c:	1c07883a 	add	r3,r3,r16
10102660:	8c400044 	addi	r17,r17,1
10102664:	b0800015 	stw	r2,0(r22)
10102668:	b4000115 	stw	r16,4(r22)
1010266c:	d8c02015 	stw	r3,128(sp)
10102670:	dc401f15 	stw	r17,124(sp)
10102674:	008001c4 	movi	r2,7
10102678:	147ebd0e 	bge	r2,r17,10102170 <__alt_data_end+0xfffe2170>
1010267c:	d9002c17 	ldw	r4,176(sp)
10102680:	d9801e04 	addi	r6,sp,120
10102684:	b80b883a 	mov	r5,r23
10102688:	01086b40 	call	101086b4 <__sprint_r>
1010268c:	103b8c1e 	bne	r2,zero,101014c0 <__alt_data_end+0xfffe14c0>
10102690:	d8c02017 	ldw	r3,128(sp)
10102694:	dc401f17 	ldw	r17,124(sp)
10102698:	dd800404 	addi	r22,sp,16
1010269c:	003eb506 	br	10102174 <__alt_data_end+0xfffe2174>
101026a0:	d9002c17 	ldw	r4,176(sp)
101026a4:	d9801e04 	addi	r6,sp,120
101026a8:	b80b883a 	mov	r5,r23
101026ac:	01086b40 	call	101086b4 <__sprint_r>
101026b0:	103b831e 	bne	r2,zero,101014c0 <__alt_data_end+0xfffe14c0>
101026b4:	d8c02017 	ldw	r3,128(sp)
101026b8:	dc401f17 	ldw	r17,124(sp)
101026bc:	da000404 	addi	r8,sp,16
101026c0:	003e8d06 	br	101020f8 <__alt_data_end+0xfffe20f8>
101026c4:	d9002c17 	ldw	r4,176(sp)
101026c8:	d9801e04 	addi	r6,sp,120
101026cc:	b80b883a 	mov	r5,r23
101026d0:	01086b40 	call	101086b4 <__sprint_r>
101026d4:	103b7a1e 	bne	r2,zero,101014c0 <__alt_data_end+0xfffe14c0>
101026d8:	d8c02017 	ldw	r3,128(sp)
101026dc:	dc401f17 	ldw	r17,124(sp)
101026e0:	dd800404 	addi	r22,sp,16
101026e4:	003e8f06 	br	10102124 <__alt_data_end+0xfffe2124>
101026e8:	0027883a 	mov	r19,zero
101026ec:	003f4a06 	br	10102418 <__alt_data_end+0xfffe2418>
101026f0:	d9002c17 	ldw	r4,176(sp)
101026f4:	d9801e04 	addi	r6,sp,120
101026f8:	b80b883a 	mov	r5,r23
101026fc:	01086b40 	call	101086b4 <__sprint_r>
10102700:	103b6f1e 	bne	r2,zero,101014c0 <__alt_data_end+0xfffe14c0>
10102704:	d8c02017 	ldw	r3,128(sp)
10102708:	da000404 	addi	r8,sp,16
1010270c:	003c9d06 	br	10101984 <__alt_data_end+0xfffe1984>
10102710:	04e7c83a 	sub	r19,zero,r19
10102714:	9804c03a 	cmpne	r2,r19,zero
10102718:	05adc83a 	sub	r22,zero,r22
1010271c:	b0adc83a 	sub	r22,r22,r2
10102720:	d8802917 	ldw	r2,164(sp)
10102724:	07000b44 	movi	fp,45
10102728:	df002785 	stb	fp,158(sp)
1010272c:	10017b16 	blt	r2,zero,10102d1c <___vfprintf_internal_r+0x1c64>
10102730:	00bfdfc4 	movi	r2,-129
10102734:	90a4703a 	and	r18,r18,r2
10102738:	003bb106 	br	10101600 <__alt_data_end+0xfffe1600>
1010273c:	d9003617 	ldw	r4,216(sp)
10102740:	d9403817 	ldw	r5,224(sp)
10102744:	da003d15 	stw	r8,244(sp)
10102748:	01082d80 	call	101082d8 <__fpclassifyd>
1010274c:	da003d17 	ldw	r8,244(sp)
10102750:	1000f026 	beq	r2,zero,10102b14 <___vfprintf_internal_r+0x1a5c>
10102754:	d9002917 	ldw	r4,164(sp)
10102758:	05bff7c4 	movi	r22,-33
1010275c:	00bfffc4 	movi	r2,-1
10102760:	8dac703a 	and	r22,r17,r22
10102764:	20820026 	beq	r4,r2,10102f68 <___vfprintf_internal_r+0x1eb0>
10102768:	008011c4 	movi	r2,71
1010276c:	b081f726 	beq	r22,r2,10102f4c <___vfprintf_internal_r+0x1e94>
10102770:	d9003817 	ldw	r4,224(sp)
10102774:	90c04014 	ori	r3,r18,256
10102778:	d8c02b15 	stw	r3,172(sp)
1010277c:	20021516 	blt	r4,zero,10102fd4 <___vfprintf_internal_r+0x1f1c>
10102780:	dcc03817 	ldw	r19,224(sp)
10102784:	d8002a05 	stb	zero,168(sp)
10102788:	00801984 	movi	r2,102
1010278c:	8881f926 	beq	r17,r2,10102f74 <___vfprintf_internal_r+0x1ebc>
10102790:	00801184 	movi	r2,70
10102794:	88821c26 	beq	r17,r2,10103008 <___vfprintf_internal_r+0x1f50>
10102798:	00801144 	movi	r2,69
1010279c:	b081ef26 	beq	r22,r2,10102f5c <___vfprintf_internal_r+0x1ea4>
101027a0:	d8c02917 	ldw	r3,164(sp)
101027a4:	d8802104 	addi	r2,sp,132
101027a8:	d8800315 	stw	r2,12(sp)
101027ac:	d9403617 	ldw	r5,216(sp)
101027b0:	d8802504 	addi	r2,sp,148
101027b4:	d9002c17 	ldw	r4,176(sp)
101027b8:	d8800215 	stw	r2,8(sp)
101027bc:	d8802604 	addi	r2,sp,152
101027c0:	d8c00015 	stw	r3,0(sp)
101027c4:	d8800115 	stw	r2,4(sp)
101027c8:	01c00084 	movi	r7,2
101027cc:	980d883a 	mov	r6,r19
101027d0:	d8c03c15 	stw	r3,240(sp)
101027d4:	da003d15 	stw	r8,244(sp)
101027d8:	01036dc0 	call	101036dc <_dtoa_r>
101027dc:	1021883a 	mov	r16,r2
101027e0:	008019c4 	movi	r2,103
101027e4:	d8c03c17 	ldw	r3,240(sp)
101027e8:	da003d17 	ldw	r8,244(sp)
101027ec:	88817126 	beq	r17,r2,10102db4 <___vfprintf_internal_r+0x1cfc>
101027f0:	008011c4 	movi	r2,71
101027f4:	88829226 	beq	r17,r2,10103240 <___vfprintf_internal_r+0x2188>
101027f8:	80f9883a 	add	fp,r16,r3
101027fc:	d9003617 	ldw	r4,216(sp)
10102800:	000d883a 	mov	r6,zero
10102804:	000f883a 	mov	r7,zero
10102808:	980b883a 	mov	r5,r19
1010280c:	da003d15 	stw	r8,244(sp)
10102810:	010c1780 	call	1010c178 <__eqdf2>
10102814:	da003d17 	ldw	r8,244(sp)
10102818:	10018d26 	beq	r2,zero,10102e50 <___vfprintf_internal_r+0x1d98>
1010281c:	d8802117 	ldw	r2,132(sp)
10102820:	1700062e 	bgeu	r2,fp,1010283c <___vfprintf_internal_r+0x1784>
10102824:	01000c04 	movi	r4,48
10102828:	10c00044 	addi	r3,r2,1
1010282c:	d8c02115 	stw	r3,132(sp)
10102830:	11000005 	stb	r4,0(r2)
10102834:	d8802117 	ldw	r2,132(sp)
10102838:	173ffb36 	bltu	r2,fp,10102828 <__alt_data_end+0xfffe2828>
1010283c:	1405c83a 	sub	r2,r2,r16
10102840:	d8803315 	stw	r2,204(sp)
10102844:	008011c4 	movi	r2,71
10102848:	b0817626 	beq	r22,r2,10102e24 <___vfprintf_internal_r+0x1d6c>
1010284c:	00801944 	movi	r2,101
10102850:	1442810e 	bge	r2,r17,10103258 <___vfprintf_internal_r+0x21a0>
10102854:	d8c02617 	ldw	r3,152(sp)
10102858:	00801984 	movi	r2,102
1010285c:	d8c03215 	stw	r3,200(sp)
10102860:	8881fe26 	beq	r17,r2,1010305c <___vfprintf_internal_r+0x1fa4>
10102864:	d8c03217 	ldw	r3,200(sp)
10102868:	d9003317 	ldw	r4,204(sp)
1010286c:	1901dd16 	blt	r3,r4,10102fe4 <___vfprintf_internal_r+0x1f2c>
10102870:	9480004c 	andi	r18,r18,1
10102874:	90022b1e 	bne	r18,zero,10103124 <___vfprintf_internal_r+0x206c>
10102878:	1805883a 	mov	r2,r3
1010287c:	18028016 	blt	r3,zero,10103280 <___vfprintf_internal_r+0x21c8>
10102880:	d8c03217 	ldw	r3,200(sp)
10102884:	044019c4 	movi	r17,103
10102888:	d8c02e15 	stw	r3,184(sp)
1010288c:	df002a07 	ldb	fp,168(sp)
10102890:	e001531e 	bne	fp,zero,10102de0 <___vfprintf_internal_r+0x1d28>
10102894:	df002783 	ldbu	fp,158(sp)
10102898:	d8802a15 	stw	r2,168(sp)
1010289c:	dc802b17 	ldw	r18,172(sp)
101028a0:	d8002915 	stw	zero,164(sp)
101028a4:	003bd106 	br	101017ec <__alt_data_end+0xfffe17ec>
101028a8:	d8802d17 	ldw	r2,180(sp)
101028ac:	d8c02d17 	ldw	r3,180(sp)
101028b0:	d9002d17 	ldw	r4,180(sp)
101028b4:	10800017 	ldw	r2,0(r2)
101028b8:	18c00117 	ldw	r3,4(r3)
101028bc:	21000204 	addi	r4,r4,8
101028c0:	d8803615 	stw	r2,216(sp)
101028c4:	d8c03815 	stw	r3,224(sp)
101028c8:	d9002d15 	stw	r4,180(sp)
101028cc:	003b7506 	br	101016a4 <__alt_data_end+0xfffe16a4>
101028d0:	ac400007 	ldb	r17,0(r21)
101028d4:	003a5906 	br	1010123c <__alt_data_end+0xfffe123c>
101028d8:	9080100c 	andi	r2,r18,64
101028dc:	1000a826 	beq	r2,zero,10102b80 <___vfprintf_internal_r+0x1ac8>
101028e0:	d9002d17 	ldw	r4,180(sp)
101028e4:	002d883a 	mov	r22,zero
101028e8:	24c0000b 	ldhu	r19,0(r4)
101028ec:	21000104 	addi	r4,r4,4
101028f0:	d9002d15 	stw	r4,180(sp)
101028f4:	003ccb06 	br	10101c24 <__alt_data_end+0xfffe1c24>
101028f8:	d8c02d17 	ldw	r3,180(sp)
101028fc:	d9002917 	ldw	r4,164(sp)
10102900:	002d883a 	mov	r22,zero
10102904:	18800104 	addi	r2,r3,4
10102908:	1cc00017 	ldw	r19,0(r3)
1010290c:	203ebb0e 	bge	r4,zero,101023fc <__alt_data_end+0xfffe23fc>
10102910:	003ef106 	br	101024d8 <__alt_data_end+0xfffe24d8>
10102914:	9080040c 	andi	r2,r18,16
10102918:	1000921e 	bne	r2,zero,10102b64 <___vfprintf_internal_r+0x1aac>
1010291c:	9480100c 	andi	r18,r18,64
10102920:	90013926 	beq	r18,zero,10102e08 <___vfprintf_internal_r+0x1d50>
10102924:	d9002d17 	ldw	r4,180(sp)
10102928:	d9402f17 	ldw	r5,188(sp)
1010292c:	20800017 	ldw	r2,0(r4)
10102930:	21000104 	addi	r4,r4,4
10102934:	d9002d15 	stw	r4,180(sp)
10102938:	1140000d 	sth	r5,0(r2)
1010293c:	003a1606 	br	10101198 <__alt_data_end+0xfffe1198>
10102940:	9080100c 	andi	r2,r18,64
10102944:	10008026 	beq	r2,zero,10102b48 <___vfprintf_internal_r+0x1a90>
10102948:	d8c02d17 	ldw	r3,180(sp)
1010294c:	1cc0000f 	ldh	r19,0(r3)
10102950:	18c00104 	addi	r3,r3,4
10102954:	d8c02d15 	stw	r3,180(sp)
10102958:	982dd7fa 	srai	r22,r19,31
1010295c:	b005883a 	mov	r2,r22
10102960:	003b1f06 	br	101015e0 <__alt_data_end+0xfffe15e0>
10102964:	9080100c 	andi	r2,r18,64
10102968:	d8002785 	stb	zero,158(sp)
1010296c:	10008a1e 	bne	r2,zero,10102b98 <___vfprintf_internal_r+0x1ae0>
10102970:	d9402d17 	ldw	r5,180(sp)
10102974:	d8c02917 	ldw	r3,164(sp)
10102978:	002d883a 	mov	r22,zero
1010297c:	28800104 	addi	r2,r5,4
10102980:	2cc00017 	ldw	r19,0(r5)
10102984:	183e4b0e 	bge	r3,zero,101022b4 <__alt_data_end+0xfffe22b4>
10102988:	9d86b03a 	or	r3,r19,r22
1010298c:	d8802d15 	stw	r2,180(sp)
10102990:	183e4c1e 	bne	r3,zero,101022c4 <__alt_data_end+0xfffe22c4>
10102994:	0039883a 	mov	fp,zero
10102998:	0005883a 	mov	r2,zero
1010299c:	003d4006 	br	10101ea0 <__alt_data_end+0xfffe1ea0>
101029a0:	01440474 	movhi	r5,4113
101029a4:	2940a984 	addi	r5,r5,678
101029a8:	d9402b15 	stw	r5,172(sp)
101029ac:	d9402b17 	ldw	r5,172(sp)
101029b0:	1c47883a 	add	r3,r3,r17
101029b4:	10800044 	addi	r2,r2,1
101029b8:	41400015 	stw	r5,0(r8)
101029bc:	44400115 	stw	r17,4(r8)
101029c0:	d8c02015 	stw	r3,128(sp)
101029c4:	d8801f15 	stw	r2,124(sp)
101029c8:	010001c4 	movi	r4,7
101029cc:	20bec816 	blt	r4,r2,101024f0 <__alt_data_end+0xfffe24f0>
101029d0:	42000204 	addi	r8,r8,8
101029d4:	003ecd06 	br	1010250c <__alt_data_end+0xfffe250c>
101029d8:	d9002917 	ldw	r4,164(sp)
101029dc:	d8002785 	stb	zero,158(sp)
101029e0:	203d2d16 	blt	r4,zero,10101e98 <__alt_data_end+0xfffe1e98>
101029e4:	00bfdfc4 	movi	r2,-129
101029e8:	90a4703a 	and	r18,r18,r2
101029ec:	003a9106 	br	10101434 <__alt_data_end+0xfffe1434>
101029f0:	01040474 	movhi	r4,4113
101029f4:	2100a984 	addi	r4,r4,678
101029f8:	d9002b15 	stw	r4,172(sp)
101029fc:	003c0c06 	br	10101a30 <__alt_data_end+0xfffe1a30>
10102a00:	d9002c17 	ldw	r4,176(sp)
10102a04:	d9801e04 	addi	r6,sp,120
10102a08:	b80b883a 	mov	r5,r23
10102a0c:	01086b40 	call	101086b4 <__sprint_r>
10102a10:	103aab1e 	bne	r2,zero,101014c0 <__alt_data_end+0xfffe14c0>
10102a14:	d8c02017 	ldw	r3,128(sp)
10102a18:	da000404 	addi	r8,sp,16
10102a1c:	003d4106 	br	10101f24 <__alt_data_end+0xfffe1f24>
10102a20:	d8801f17 	ldw	r2,124(sp)
10102a24:	01440474 	movhi	r5,4113
10102a28:	01000044 	movi	r4,1
10102a2c:	18c00044 	addi	r3,r3,1
10102a30:	10800044 	addi	r2,r2,1
10102a34:	2940a904 	addi	r5,r5,676
10102a38:	41000115 	stw	r4,4(r8)
10102a3c:	41400015 	stw	r5,0(r8)
10102a40:	d8c02015 	stw	r3,128(sp)
10102a44:	d8801f15 	stw	r2,124(sp)
10102a48:	010001c4 	movi	r4,7
10102a4c:	20805c16 	blt	r4,r2,10102bc0 <___vfprintf_internal_r+0x1b08>
10102a50:	42000204 	addi	r8,r8,8
10102a54:	8800041e 	bne	r17,zero,10102a68 <___vfprintf_internal_r+0x19b0>
10102a58:	d8803317 	ldw	r2,204(sp)
10102a5c:	1000021e 	bne	r2,zero,10102a68 <___vfprintf_internal_r+0x19b0>
10102a60:	9080004c 	andi	r2,r18,1
10102a64:	103c0926 	beq	r2,zero,10101a8c <__alt_data_end+0xfffe1a8c>
10102a68:	d9003717 	ldw	r4,220(sp)
10102a6c:	d8801f17 	ldw	r2,124(sp)
10102a70:	d9403417 	ldw	r5,208(sp)
10102a74:	20c7883a 	add	r3,r4,r3
10102a78:	10800044 	addi	r2,r2,1
10102a7c:	41000115 	stw	r4,4(r8)
10102a80:	41400015 	stw	r5,0(r8)
10102a84:	d8c02015 	stw	r3,128(sp)
10102a88:	d8801f15 	stw	r2,124(sp)
10102a8c:	010001c4 	movi	r4,7
10102a90:	20812116 	blt	r4,r2,10102f18 <___vfprintf_internal_r+0x1e60>
10102a94:	42000204 	addi	r8,r8,8
10102a98:	0463c83a 	sub	r17,zero,r17
10102a9c:	0440730e 	bge	zero,r17,10102c6c <___vfprintf_internal_r+0x1bb4>
10102aa0:	05800404 	movi	r22,16
10102aa4:	b440860e 	bge	r22,r17,10102cc0 <___vfprintf_internal_r+0x1c08>
10102aa8:	01440474 	movhi	r5,4113
10102aac:	2940a984 	addi	r5,r5,678
10102ab0:	d9402b15 	stw	r5,172(sp)
10102ab4:	070001c4 	movi	fp,7
10102ab8:	dcc02c17 	ldw	r19,176(sp)
10102abc:	00000306 	br	10102acc <___vfprintf_internal_r+0x1a14>
10102ac0:	42000204 	addi	r8,r8,8
10102ac4:	8c7ffc04 	addi	r17,r17,-16
10102ac8:	b440800e 	bge	r22,r17,10102ccc <___vfprintf_internal_r+0x1c14>
10102acc:	18c00404 	addi	r3,r3,16
10102ad0:	10800044 	addi	r2,r2,1
10102ad4:	45000015 	stw	r20,0(r8)
10102ad8:	45800115 	stw	r22,4(r8)
10102adc:	d8c02015 	stw	r3,128(sp)
10102ae0:	d8801f15 	stw	r2,124(sp)
10102ae4:	e0bff60e 	bge	fp,r2,10102ac0 <__alt_data_end+0xfffe2ac0>
10102ae8:	d9801e04 	addi	r6,sp,120
10102aec:	b80b883a 	mov	r5,r23
10102af0:	9809883a 	mov	r4,r19
10102af4:	01086b40 	call	101086b4 <__sprint_r>
10102af8:	103a711e 	bne	r2,zero,101014c0 <__alt_data_end+0xfffe14c0>
10102afc:	d8c02017 	ldw	r3,128(sp)
10102b00:	d8801f17 	ldw	r2,124(sp)
10102b04:	da000404 	addi	r8,sp,16
10102b08:	003fee06 	br	10102ac4 <__alt_data_end+0xfffe2ac4>
10102b0c:	00bfffc4 	movi	r2,-1
10102b10:	003a6f06 	br	101014d0 <__alt_data_end+0xfffe14d0>
10102b14:	008011c4 	movi	r2,71
10102b18:	1440b816 	blt	r2,r17,10102dfc <___vfprintf_internal_r+0x1d44>
10102b1c:	04040474 	movhi	r16,4113
10102b20:	84009b04 	addi	r16,r16,620
10102b24:	00c000c4 	movi	r3,3
10102b28:	00bfdfc4 	movi	r2,-129
10102b2c:	d8c02a15 	stw	r3,168(sp)
10102b30:	90a4703a 	and	r18,r18,r2
10102b34:	df002783 	ldbu	fp,158(sp)
10102b38:	d8c02e15 	stw	r3,184(sp)
10102b3c:	d8002915 	stw	zero,164(sp)
10102b40:	d8003215 	stw	zero,200(sp)
10102b44:	003b2906 	br	101017ec <__alt_data_end+0xfffe17ec>
10102b48:	d9002d17 	ldw	r4,180(sp)
10102b4c:	24c00017 	ldw	r19,0(r4)
10102b50:	21000104 	addi	r4,r4,4
10102b54:	d9002d15 	stw	r4,180(sp)
10102b58:	982dd7fa 	srai	r22,r19,31
10102b5c:	b005883a 	mov	r2,r22
10102b60:	003a9f06 	br	101015e0 <__alt_data_end+0xfffe15e0>
10102b64:	d9402d17 	ldw	r5,180(sp)
10102b68:	d8c02f17 	ldw	r3,188(sp)
10102b6c:	28800017 	ldw	r2,0(r5)
10102b70:	29400104 	addi	r5,r5,4
10102b74:	d9402d15 	stw	r5,180(sp)
10102b78:	10c00015 	stw	r3,0(r2)
10102b7c:	00398606 	br	10101198 <__alt_data_end+0xfffe1198>
10102b80:	d9402d17 	ldw	r5,180(sp)
10102b84:	002d883a 	mov	r22,zero
10102b88:	2cc00017 	ldw	r19,0(r5)
10102b8c:	29400104 	addi	r5,r5,4
10102b90:	d9402d15 	stw	r5,180(sp)
10102b94:	003c2306 	br	10101c24 <__alt_data_end+0xfffe1c24>
10102b98:	d8c02d17 	ldw	r3,180(sp)
10102b9c:	d9002917 	ldw	r4,164(sp)
10102ba0:	002d883a 	mov	r22,zero
10102ba4:	18800104 	addi	r2,r3,4
10102ba8:	1cc0000b 	ldhu	r19,0(r3)
10102bac:	203dc10e 	bge	r4,zero,101022b4 <__alt_data_end+0xfffe22b4>
10102bb0:	003f7506 	br	10102988 <__alt_data_end+0xfffe2988>
10102bb4:	04040474 	movhi	r16,4113
10102bb8:	84009904 	addi	r16,r16,612
10102bbc:	003acc06 	br	101016f0 <__alt_data_end+0xfffe16f0>
10102bc0:	d9002c17 	ldw	r4,176(sp)
10102bc4:	d9801e04 	addi	r6,sp,120
10102bc8:	b80b883a 	mov	r5,r23
10102bcc:	01086b40 	call	101086b4 <__sprint_r>
10102bd0:	103a3b1e 	bne	r2,zero,101014c0 <__alt_data_end+0xfffe14c0>
10102bd4:	dc402617 	ldw	r17,152(sp)
10102bd8:	d8c02017 	ldw	r3,128(sp)
10102bdc:	da000404 	addi	r8,sp,16
10102be0:	003f9c06 	br	10102a54 <__alt_data_end+0xfffe2a54>
10102be4:	ac400043 	ldbu	r17,1(r21)
10102be8:	94800814 	ori	r18,r18,32
10102bec:	ad400044 	addi	r21,r21,1
10102bf0:	8c403fcc 	andi	r17,r17,255
10102bf4:	8c40201c 	xori	r17,r17,128
10102bf8:	8c7fe004 	addi	r17,r17,-128
10102bfc:	00398f06 	br	1010123c <__alt_data_end+0xfffe123c>
10102c00:	d8c02d15 	stw	r3,180(sp)
10102c04:	0039883a 	mov	fp,zero
10102c08:	003e3506 	br	101024e0 <__alt_data_end+0xfffe24e0>
10102c0c:	d9002c17 	ldw	r4,176(sp)
10102c10:	d9801e04 	addi	r6,sp,120
10102c14:	b80b883a 	mov	r5,r23
10102c18:	01086b40 	call	101086b4 <__sprint_r>
10102c1c:	103a281e 	bne	r2,zero,101014c0 <__alt_data_end+0xfffe14c0>
10102c20:	d8c02017 	ldw	r3,128(sp)
10102c24:	da000404 	addi	r8,sp,16
10102c28:	003cd006 	br	10101f6c <__alt_data_end+0xfffe1f6c>
10102c2c:	8009883a 	mov	r4,r16
10102c30:	da003d15 	stw	r8,244(sp)
10102c34:	01010200 	call	10101020 <strlen>
10102c38:	d8802e15 	stw	r2,184(sp)
10102c3c:	da003d17 	ldw	r8,244(sp)
10102c40:	103c340e 	bge	r2,zero,10101d14 <__alt_data_end+0xfffe1d14>
10102c44:	0005883a 	mov	r2,zero
10102c48:	003c3206 	br	10101d14 <__alt_data_end+0xfffe1d14>
10102c4c:	d9002c17 	ldw	r4,176(sp)
10102c50:	d9801e04 	addi	r6,sp,120
10102c54:	b80b883a 	mov	r5,r23
10102c58:	01086b40 	call	101086b4 <__sprint_r>
10102c5c:	103a181e 	bne	r2,zero,101014c0 <__alt_data_end+0xfffe14c0>
10102c60:	d8c02017 	ldw	r3,128(sp)
10102c64:	d8801f17 	ldw	r2,124(sp)
10102c68:	da000404 	addi	r8,sp,16
10102c6c:	d9403317 	ldw	r5,204(sp)
10102c70:	10800044 	addi	r2,r2,1
10102c74:	44000015 	stw	r16,0(r8)
10102c78:	28c7883a 	add	r3,r5,r3
10102c7c:	003b7d06 	br	10101a74 <__alt_data_end+0xfffe1a74>
10102c80:	01040474 	movhi	r4,4113
10102c84:	2100ad84 	addi	r4,r4,694
10102c88:	d9003515 	stw	r4,212(sp)
10102c8c:	003b1406 	br	101018e0 <__alt_data_end+0xfffe18e0>
10102c90:	013fffc4 	movi	r4,-1
10102c94:	003a3506 	br	1010156c <__alt_data_end+0xfffe156c>
10102c98:	0023883a 	mov	r17,zero
10102c9c:	003d9d06 	br	10102314 <__alt_data_end+0xfffe2314>
10102ca0:	d9002c17 	ldw	r4,176(sp)
10102ca4:	d9801e04 	addi	r6,sp,120
10102ca8:	b80b883a 	mov	r5,r23
10102cac:	01086b40 	call	101086b4 <__sprint_r>
10102cb0:	103a031e 	bne	r2,zero,101014c0 <__alt_data_end+0xfffe14c0>
10102cb4:	d8c02017 	ldw	r3,128(sp)
10102cb8:	da000404 	addi	r8,sp,16
10102cbc:	003d9406 	br	10102310 <__alt_data_end+0xfffe2310>
10102cc0:	01040474 	movhi	r4,4113
10102cc4:	2100a984 	addi	r4,r4,678
10102cc8:	d9002b15 	stw	r4,172(sp)
10102ccc:	d9002b17 	ldw	r4,172(sp)
10102cd0:	1c47883a 	add	r3,r3,r17
10102cd4:	10800044 	addi	r2,r2,1
10102cd8:	41000015 	stw	r4,0(r8)
10102cdc:	44400115 	stw	r17,4(r8)
10102ce0:	d8c02015 	stw	r3,128(sp)
10102ce4:	d8801f15 	stw	r2,124(sp)
10102ce8:	010001c4 	movi	r4,7
10102cec:	20bfd716 	blt	r4,r2,10102c4c <__alt_data_end+0xfffe2c4c>
10102cf0:	42000204 	addi	r8,r8,8
10102cf4:	003fdd06 	br	10102c6c <__alt_data_end+0xfffe2c6c>
10102cf8:	d9002c17 	ldw	r4,176(sp)
10102cfc:	d9801e04 	addi	r6,sp,120
10102d00:	b80b883a 	mov	r5,r23
10102d04:	01086b40 	call	101086b4 <__sprint_r>
10102d08:	1039ed1e 	bne	r2,zero,101014c0 <__alt_data_end+0xfffe14c0>
10102d0c:	d8802617 	ldw	r2,152(sp)
10102d10:	d8c02017 	ldw	r3,128(sp)
10102d14:	da000404 	addi	r8,sp,16
10102d18:	003e1006 	br	1010255c <__alt_data_end+0xfffe255c>
10102d1c:	00800044 	movi	r2,1
10102d20:	10803fcc 	andi	r2,r2,255
10102d24:	00c00044 	movi	r3,1
10102d28:	10fa3526 	beq	r2,r3,10101600 <__alt_data_end+0xfffe1600>
10102d2c:	00c00084 	movi	r3,2
10102d30:	10fbcb26 	beq	r2,r3,10101c60 <__alt_data_end+0xfffe1c60>
10102d34:	003a8f06 	br	10101774 <__alt_data_end+0xfffe1774>
10102d38:	01040474 	movhi	r4,4113
10102d3c:	2100ad84 	addi	r4,r4,694
10102d40:	d9003515 	stw	r4,212(sp)
10102d44:	003b7606 	br	10101b20 <__alt_data_end+0xfffe1b20>
10102d48:	d8802917 	ldw	r2,164(sp)
10102d4c:	00c00184 	movi	r3,6
10102d50:	1880012e 	bgeu	r3,r2,10102d58 <___vfprintf_internal_r+0x1ca0>
10102d54:	1805883a 	mov	r2,r3
10102d58:	d8802e15 	stw	r2,184(sp)
10102d5c:	1000ef16 	blt	r2,zero,1010311c <___vfprintf_internal_r+0x2064>
10102d60:	04040474 	movhi	r16,4113
10102d64:	d8802a15 	stw	r2,168(sp)
10102d68:	dcc02d15 	stw	r19,180(sp)
10102d6c:	d8002915 	stw	zero,164(sp)
10102d70:	d8003215 	stw	zero,200(sp)
10102d74:	8400a704 	addi	r16,r16,668
10102d78:	0039883a 	mov	fp,zero
10102d7c:	003aa206 	br	10101808 <__alt_data_end+0xfffe1808>
10102d80:	0021883a 	mov	r16,zero
10102d84:	003e0706 	br	101025a4 <__alt_data_end+0xfffe25a4>
10102d88:	d9002c17 	ldw	r4,176(sp)
10102d8c:	d9801e04 	addi	r6,sp,120
10102d90:	b80b883a 	mov	r5,r23
10102d94:	01086b40 	call	101086b4 <__sprint_r>
10102d98:	1039c91e 	bne	r2,zero,101014c0 <__alt_data_end+0xfffe14c0>
10102d9c:	d8802617 	ldw	r2,152(sp)
10102da0:	d9403317 	ldw	r5,204(sp)
10102da4:	d8c02017 	ldw	r3,128(sp)
10102da8:	da000404 	addi	r8,sp,16
10102dac:	2885c83a 	sub	r2,r5,r2
10102db0:	003dfb06 	br	101025a0 <__alt_data_end+0xfffe25a0>
10102db4:	9080004c 	andi	r2,r18,1
10102db8:	103e8f1e 	bne	r2,zero,101027f8 <__alt_data_end+0xfffe27f8>
10102dbc:	d8802117 	ldw	r2,132(sp)
10102dc0:	003e9e06 	br	1010283c <__alt_data_end+0xfffe283c>
10102dc4:	1025883a 	mov	r18,r2
10102dc8:	0039883a 	mov	fp,zero
10102dcc:	00800084 	movi	r2,2
10102dd0:	003fd306 	br	10102d20 <__alt_data_end+0xfffe2d20>
10102dd4:	07000b44 	movi	fp,45
10102dd8:	df002785 	stb	fp,158(sp)
10102ddc:	003a4006 	br	101016e0 <__alt_data_end+0xfffe16e0>
10102de0:	00c00b44 	movi	r3,45
10102de4:	d8c02785 	stb	r3,158(sp)
10102de8:	d8802a15 	stw	r2,168(sp)
10102dec:	dc802b17 	ldw	r18,172(sp)
10102df0:	d8002915 	stw	zero,164(sp)
10102df4:	07000b44 	movi	fp,45
10102df8:	003a8006 	br	101017fc <__alt_data_end+0xfffe17fc>
10102dfc:	04040474 	movhi	r16,4113
10102e00:	84009c04 	addi	r16,r16,624
10102e04:	003f4706 	br	10102b24 <__alt_data_end+0xfffe2b24>
10102e08:	d8c02d17 	ldw	r3,180(sp)
10102e0c:	d9002f17 	ldw	r4,188(sp)
10102e10:	18800017 	ldw	r2,0(r3)
10102e14:	18c00104 	addi	r3,r3,4
10102e18:	d8c02d15 	stw	r3,180(sp)
10102e1c:	11000015 	stw	r4,0(r2)
10102e20:	0038dd06 	br	10101198 <__alt_data_end+0xfffe1198>
10102e24:	dd802617 	ldw	r22,152(sp)
10102e28:	00bfff44 	movi	r2,-3
10102e2c:	b0801c16 	blt	r22,r2,10102ea0 <___vfprintf_internal_r+0x1de8>
10102e30:	d9402917 	ldw	r5,164(sp)
10102e34:	2d801a16 	blt	r5,r22,10102ea0 <___vfprintf_internal_r+0x1de8>
10102e38:	dd803215 	stw	r22,200(sp)
10102e3c:	003e8906 	br	10102864 <__alt_data_end+0xfffe2864>
10102e40:	01040474 	movhi	r4,4113
10102e44:	2100a984 	addi	r4,r4,678
10102e48:	d9002b15 	stw	r4,172(sp)
10102e4c:	003c9106 	br	10102094 <__alt_data_end+0xfffe2094>
10102e50:	e005883a 	mov	r2,fp
10102e54:	003e7906 	br	1010283c <__alt_data_end+0xfffe283c>
10102e58:	d9402917 	ldw	r5,164(sp)
10102e5c:	df002783 	ldbu	fp,158(sp)
10102e60:	dcc02d15 	stw	r19,180(sp)
10102e64:	d9402a15 	stw	r5,168(sp)
10102e68:	d9402e15 	stw	r5,184(sp)
10102e6c:	d8002915 	stw	zero,164(sp)
10102e70:	d8003215 	stw	zero,200(sp)
10102e74:	003a5d06 	br	101017ec <__alt_data_end+0xfffe17ec>
10102e78:	9080004c 	andi	r2,r18,1
10102e7c:	0039883a 	mov	fp,zero
10102e80:	10000426 	beq	r2,zero,10102e94 <___vfprintf_internal_r+0x1ddc>
10102e84:	00800c04 	movi	r2,48
10102e88:	dc001dc4 	addi	r16,sp,119
10102e8c:	d8801dc5 	stb	r2,119(sp)
10102e90:	003b8006 	br	10101c94 <__alt_data_end+0xfffe1c94>
10102e94:	d8002e15 	stw	zero,184(sp)
10102e98:	dc001e04 	addi	r16,sp,120
10102e9c:	003a4d06 	br	101017d4 <__alt_data_end+0xfffe17d4>
10102ea0:	8c7fff84 	addi	r17,r17,-2
10102ea4:	b5bfffc4 	addi	r22,r22,-1
10102ea8:	dd802615 	stw	r22,152(sp)
10102eac:	dc4022c5 	stb	r17,139(sp)
10102eb0:	b000bf16 	blt	r22,zero,101031b0 <___vfprintf_internal_r+0x20f8>
10102eb4:	00800ac4 	movi	r2,43
10102eb8:	d8802305 	stb	r2,140(sp)
10102ebc:	00800244 	movi	r2,9
10102ec0:	15807016 	blt	r2,r22,10103084 <___vfprintf_internal_r+0x1fcc>
10102ec4:	00800c04 	movi	r2,48
10102ec8:	b5800c04 	addi	r22,r22,48
10102ecc:	d8802345 	stb	r2,141(sp)
10102ed0:	dd802385 	stb	r22,142(sp)
10102ed4:	d88023c4 	addi	r2,sp,143
10102ed8:	df0022c4 	addi	fp,sp,139
10102edc:	d8c03317 	ldw	r3,204(sp)
10102ee0:	1739c83a 	sub	fp,r2,fp
10102ee4:	d9003317 	ldw	r4,204(sp)
10102ee8:	e0c7883a 	add	r3,fp,r3
10102eec:	df003a15 	stw	fp,232(sp)
10102ef0:	d8c02e15 	stw	r3,184(sp)
10102ef4:	00800044 	movi	r2,1
10102ef8:	1100b30e 	bge	r2,r4,101031c8 <___vfprintf_internal_r+0x2110>
10102efc:	d8c02e17 	ldw	r3,184(sp)
10102f00:	18c00044 	addi	r3,r3,1
10102f04:	d8c02e15 	stw	r3,184(sp)
10102f08:	1805883a 	mov	r2,r3
10102f0c:	1800ac16 	blt	r3,zero,101031c0 <___vfprintf_internal_r+0x2108>
10102f10:	d8003215 	stw	zero,200(sp)
10102f14:	003e5d06 	br	1010288c <__alt_data_end+0xfffe288c>
10102f18:	d9002c17 	ldw	r4,176(sp)
10102f1c:	d9801e04 	addi	r6,sp,120
10102f20:	b80b883a 	mov	r5,r23
10102f24:	01086b40 	call	101086b4 <__sprint_r>
10102f28:	1039651e 	bne	r2,zero,101014c0 <__alt_data_end+0xfffe14c0>
10102f2c:	dc402617 	ldw	r17,152(sp)
10102f30:	d8c02017 	ldw	r3,128(sp)
10102f34:	d8801f17 	ldw	r2,124(sp)
10102f38:	da000404 	addi	r8,sp,16
10102f3c:	003ed606 	br	10102a98 <__alt_data_end+0xfffe2a98>
10102f40:	582b883a 	mov	r21,r11
10102f44:	d8002915 	stw	zero,164(sp)
10102f48:	0038bd06 	br	10101240 <__alt_data_end+0xfffe1240>
10102f4c:	d8802917 	ldw	r2,164(sp)
10102f50:	103e071e 	bne	r2,zero,10102770 <__alt_data_end+0xfffe2770>
10102f54:	dc002915 	stw	r16,164(sp)
10102f58:	003e0506 	br	10102770 <__alt_data_end+0xfffe2770>
10102f5c:	d9002917 	ldw	r4,164(sp)
10102f60:	20c00044 	addi	r3,r4,1
10102f64:	003e0f06 	br	101027a4 <__alt_data_end+0xfffe27a4>
10102f68:	01400184 	movi	r5,6
10102f6c:	d9402915 	stw	r5,164(sp)
10102f70:	003dff06 	br	10102770 <__alt_data_end+0xfffe2770>
10102f74:	d8802104 	addi	r2,sp,132
10102f78:	d8800315 	stw	r2,12(sp)
10102f7c:	d8802504 	addi	r2,sp,148
10102f80:	d8800215 	stw	r2,8(sp)
10102f84:	d8802604 	addi	r2,sp,152
10102f88:	d8800115 	stw	r2,4(sp)
10102f8c:	d8802917 	ldw	r2,164(sp)
10102f90:	d9403617 	ldw	r5,216(sp)
10102f94:	d9002c17 	ldw	r4,176(sp)
10102f98:	d8800015 	stw	r2,0(sp)
10102f9c:	01c000c4 	movi	r7,3
10102fa0:	980d883a 	mov	r6,r19
10102fa4:	da003d15 	stw	r8,244(sp)
10102fa8:	01036dc0 	call	101036dc <_dtoa_r>
10102fac:	d8c02917 	ldw	r3,164(sp)
10102fb0:	da003d17 	ldw	r8,244(sp)
10102fb4:	1021883a 	mov	r16,r2
10102fb8:	10f9883a 	add	fp,r2,r3
10102fbc:	81000007 	ldb	r4,0(r16)
10102fc0:	00800c04 	movi	r2,48
10102fc4:	20805e26 	beq	r4,r2,10103140 <___vfprintf_internal_r+0x2088>
10102fc8:	d8c02617 	ldw	r3,152(sp)
10102fcc:	e0f9883a 	add	fp,fp,r3
10102fd0:	003e0a06 	br	101027fc <__alt_data_end+0xfffe27fc>
10102fd4:	00c00b44 	movi	r3,45
10102fd8:	24e0003c 	xorhi	r19,r4,32768
10102fdc:	d8c02a05 	stb	r3,168(sp)
10102fe0:	003de906 	br	10102788 <__alt_data_end+0xfffe2788>
10102fe4:	d8c03217 	ldw	r3,200(sp)
10102fe8:	00c07a0e 	bge	zero,r3,101031d4 <___vfprintf_internal_r+0x211c>
10102fec:	00800044 	movi	r2,1
10102ff0:	d9003317 	ldw	r4,204(sp)
10102ff4:	1105883a 	add	r2,r2,r4
10102ff8:	d8802e15 	stw	r2,184(sp)
10102ffc:	10004e16 	blt	r2,zero,10103138 <___vfprintf_internal_r+0x2080>
10103000:	044019c4 	movi	r17,103
10103004:	003e2106 	br	1010288c <__alt_data_end+0xfffe288c>
10103008:	d9002917 	ldw	r4,164(sp)
1010300c:	d8802104 	addi	r2,sp,132
10103010:	d8800315 	stw	r2,12(sp)
10103014:	d9000015 	stw	r4,0(sp)
10103018:	d8802504 	addi	r2,sp,148
1010301c:	d9403617 	ldw	r5,216(sp)
10103020:	d9002c17 	ldw	r4,176(sp)
10103024:	d8800215 	stw	r2,8(sp)
10103028:	d8802604 	addi	r2,sp,152
1010302c:	d8800115 	stw	r2,4(sp)
10103030:	01c000c4 	movi	r7,3
10103034:	980d883a 	mov	r6,r19
10103038:	da003d15 	stw	r8,244(sp)
1010303c:	01036dc0 	call	101036dc <_dtoa_r>
10103040:	d8c02917 	ldw	r3,164(sp)
10103044:	da003d17 	ldw	r8,244(sp)
10103048:	1021883a 	mov	r16,r2
1010304c:	00801184 	movi	r2,70
10103050:	80f9883a 	add	fp,r16,r3
10103054:	88bfd926 	beq	r17,r2,10102fbc <__alt_data_end+0xfffe2fbc>
10103058:	003de806 	br	101027fc <__alt_data_end+0xfffe27fc>
1010305c:	d9002917 	ldw	r4,164(sp)
10103060:	00c04d0e 	bge	zero,r3,10103198 <___vfprintf_internal_r+0x20e0>
10103064:	2000441e 	bne	r4,zero,10103178 <___vfprintf_internal_r+0x20c0>
10103068:	9480004c 	andi	r18,r18,1
1010306c:	9000421e 	bne	r18,zero,10103178 <___vfprintf_internal_r+0x20c0>
10103070:	1805883a 	mov	r2,r3
10103074:	18007016 	blt	r3,zero,10103238 <___vfprintf_internal_r+0x2180>
10103078:	d8c03217 	ldw	r3,200(sp)
1010307c:	d8c02e15 	stw	r3,184(sp)
10103080:	003e0206 	br	1010288c <__alt_data_end+0xfffe288c>
10103084:	df0022c4 	addi	fp,sp,139
10103088:	dc002915 	stw	r16,164(sp)
1010308c:	4027883a 	mov	r19,r8
10103090:	e021883a 	mov	r16,fp
10103094:	b009883a 	mov	r4,r22
10103098:	01400284 	movi	r5,10
1010309c:	0100db00 	call	10100db0 <__modsi3>
101030a0:	10800c04 	addi	r2,r2,48
101030a4:	843fffc4 	addi	r16,r16,-1
101030a8:	b009883a 	mov	r4,r22
101030ac:	01400284 	movi	r5,10
101030b0:	80800005 	stb	r2,0(r16)
101030b4:	0100d2c0 	call	10100d2c <__divsi3>
101030b8:	102d883a 	mov	r22,r2
101030bc:	00800244 	movi	r2,9
101030c0:	15bff416 	blt	r2,r22,10103094 <__alt_data_end+0xfffe3094>
101030c4:	9811883a 	mov	r8,r19
101030c8:	b0800c04 	addi	r2,r22,48
101030cc:	8027883a 	mov	r19,r16
101030d0:	997fffc4 	addi	r5,r19,-1
101030d4:	98bfffc5 	stb	r2,-1(r19)
101030d8:	dc002917 	ldw	r16,164(sp)
101030dc:	2f006a2e 	bgeu	r5,fp,10103288 <___vfprintf_internal_r+0x21d0>
101030e0:	d9c02384 	addi	r7,sp,142
101030e4:	3ccfc83a 	sub	r7,r7,r19
101030e8:	d9002344 	addi	r4,sp,141
101030ec:	e1cf883a 	add	r7,fp,r7
101030f0:	00000106 	br	101030f8 <___vfprintf_internal_r+0x2040>
101030f4:	28800003 	ldbu	r2,0(r5)
101030f8:	20800005 	stb	r2,0(r4)
101030fc:	21000044 	addi	r4,r4,1
10103100:	29400044 	addi	r5,r5,1
10103104:	393ffb1e 	bne	r7,r4,101030f4 <__alt_data_end+0xfffe30f4>
10103108:	d8802304 	addi	r2,sp,140
1010310c:	14c5c83a 	sub	r2,r2,r19
10103110:	d8c02344 	addi	r3,sp,141
10103114:	1885883a 	add	r2,r3,r2
10103118:	003f7006 	br	10102edc <__alt_data_end+0xfffe2edc>
1010311c:	0005883a 	mov	r2,zero
10103120:	003f0f06 	br	10102d60 <__alt_data_end+0xfffe2d60>
10103124:	d8c03217 	ldw	r3,200(sp)
10103128:	18c00044 	addi	r3,r3,1
1010312c:	d8c02e15 	stw	r3,184(sp)
10103130:	1805883a 	mov	r2,r3
10103134:	183fb20e 	bge	r3,zero,10103000 <__alt_data_end+0xfffe3000>
10103138:	0005883a 	mov	r2,zero
1010313c:	003fb006 	br	10103000 <__alt_data_end+0xfffe3000>
10103140:	d9003617 	ldw	r4,216(sp)
10103144:	000d883a 	mov	r6,zero
10103148:	000f883a 	mov	r7,zero
1010314c:	980b883a 	mov	r5,r19
10103150:	d8c03c15 	stw	r3,240(sp)
10103154:	da003d15 	stw	r8,244(sp)
10103158:	010c1780 	call	1010c178 <__eqdf2>
1010315c:	d8c03c17 	ldw	r3,240(sp)
10103160:	da003d17 	ldw	r8,244(sp)
10103164:	103f9826 	beq	r2,zero,10102fc8 <__alt_data_end+0xfffe2fc8>
10103168:	00800044 	movi	r2,1
1010316c:	10c7c83a 	sub	r3,r2,r3
10103170:	d8c02615 	stw	r3,152(sp)
10103174:	003f9506 	br	10102fcc <__alt_data_end+0xfffe2fcc>
10103178:	d9002917 	ldw	r4,164(sp)
1010317c:	d8c03217 	ldw	r3,200(sp)
10103180:	20800044 	addi	r2,r4,1
10103184:	1885883a 	add	r2,r3,r2
10103188:	d8802e15 	stw	r2,184(sp)
1010318c:	103dbf0e 	bge	r2,zero,1010288c <__alt_data_end+0xfffe288c>
10103190:	0005883a 	mov	r2,zero
10103194:	003dbd06 	br	1010288c <__alt_data_end+0xfffe288c>
10103198:	2000211e 	bne	r4,zero,10103220 <___vfprintf_internal_r+0x2168>
1010319c:	9480004c 	andi	r18,r18,1
101031a0:	90001f1e 	bne	r18,zero,10103220 <___vfprintf_internal_r+0x2168>
101031a4:	00800044 	movi	r2,1
101031a8:	d8802e15 	stw	r2,184(sp)
101031ac:	003db706 	br	1010288c <__alt_data_end+0xfffe288c>
101031b0:	00800b44 	movi	r2,45
101031b4:	05adc83a 	sub	r22,zero,r22
101031b8:	d8802305 	stb	r2,140(sp)
101031bc:	003f3f06 	br	10102ebc <__alt_data_end+0xfffe2ebc>
101031c0:	0005883a 	mov	r2,zero
101031c4:	003f5206 	br	10102f10 <__alt_data_end+0xfffe2f10>
101031c8:	90a4703a 	and	r18,r18,r2
101031cc:	903f4e26 	beq	r18,zero,10102f08 <__alt_data_end+0xfffe2f08>
101031d0:	003f4a06 	br	10102efc <__alt_data_end+0xfffe2efc>
101031d4:	00800084 	movi	r2,2
101031d8:	10c5c83a 	sub	r2,r2,r3
101031dc:	003f8406 	br	10102ff0 <__alt_data_end+0xfffe2ff0>
101031e0:	d8802d17 	ldw	r2,180(sp)
101031e4:	d9002d17 	ldw	r4,180(sp)
101031e8:	ac400043 	ldbu	r17,1(r21)
101031ec:	10800017 	ldw	r2,0(r2)
101031f0:	582b883a 	mov	r21,r11
101031f4:	d8802915 	stw	r2,164(sp)
101031f8:	20800104 	addi	r2,r4,4
101031fc:	d9002917 	ldw	r4,164(sp)
10103200:	d8802d15 	stw	r2,180(sp)
10103204:	203e7a0e 	bge	r4,zero,10102bf0 <__alt_data_end+0xfffe2bf0>
10103208:	8c403fcc 	andi	r17,r17,255
1010320c:	00bfffc4 	movi	r2,-1
10103210:	8c40201c 	xori	r17,r17,128
10103214:	d8802915 	stw	r2,164(sp)
10103218:	8c7fe004 	addi	r17,r17,-128
1010321c:	00380706 	br	1010123c <__alt_data_end+0xfffe123c>
10103220:	d8c02917 	ldw	r3,164(sp)
10103224:	18c00084 	addi	r3,r3,2
10103228:	d8c02e15 	stw	r3,184(sp)
1010322c:	1805883a 	mov	r2,r3
10103230:	183d960e 	bge	r3,zero,1010288c <__alt_data_end+0xfffe288c>
10103234:	003fd606 	br	10103190 <__alt_data_end+0xfffe3190>
10103238:	0005883a 	mov	r2,zero
1010323c:	003f8e06 	br	10103078 <__alt_data_end+0xfffe3078>
10103240:	9080004c 	andi	r2,r18,1
10103244:	103f811e 	bne	r2,zero,1010304c <__alt_data_end+0xfffe304c>
10103248:	d8802117 	ldw	r2,132(sp)
1010324c:	1405c83a 	sub	r2,r2,r16
10103250:	d8803315 	stw	r2,204(sp)
10103254:	b47ef326 	beq	r22,r17,10102e24 <__alt_data_end+0xfffe2e24>
10103258:	dd802617 	ldw	r22,152(sp)
1010325c:	003f1106 	br	10102ea4 <__alt_data_end+0xfffe2ea4>
10103260:	d9c02785 	stb	r7,158(sp)
10103264:	00390406 	br	10101678 <__alt_data_end+0xfffe1678>
10103268:	d9c02785 	stb	r7,158(sp)
1010326c:	0038d306 	br	101015bc <__alt_data_end+0xfffe15bc>
10103270:	d9c02785 	stb	r7,158(sp)
10103274:	003a6106 	br	10101bfc <__alt_data_end+0xfffe1bfc>
10103278:	d9c02785 	stb	r7,158(sp)
1010327c:	003af806 	br	10101e60 <__alt_data_end+0xfffe1e60>
10103280:	0005883a 	mov	r2,zero
10103284:	003d7e06 	br	10102880 <__alt_data_end+0xfffe2880>
10103288:	d8802344 	addi	r2,sp,141
1010328c:	003f1306 	br	10102edc <__alt_data_end+0xfffe2edc>
10103290:	d9c02785 	stb	r7,158(sp)
10103294:	00392306 	br	10101724 <__alt_data_end+0xfffe1724>
10103298:	d9c02785 	stb	r7,158(sp)
1010329c:	003aa906 	br	10101d44 <__alt_data_end+0xfffe1d44>
101032a0:	d9c02785 	stb	r7,158(sp)
101032a4:	003a3d06 	br	10101b9c <__alt_data_end+0xfffe1b9c>
101032a8:	d9c02785 	stb	r7,158(sp)
101032ac:	003aca06 	br	10101dd8 <__alt_data_end+0xfffe1dd8>

101032b0 <__vfprintf_internal>:
101032b0:	00840474 	movhi	r2,4113
101032b4:	10881104 	addi	r2,r2,8260
101032b8:	300f883a 	mov	r7,r6
101032bc:	280d883a 	mov	r6,r5
101032c0:	200b883a 	mov	r5,r4
101032c4:	11000017 	ldw	r4,0(r2)
101032c8:	01010b81 	jmpi	101010b8 <___vfprintf_internal_r>

101032cc <__sbprintf>:
101032cc:	2880030b 	ldhu	r2,12(r5)
101032d0:	2ac01917 	ldw	r11,100(r5)
101032d4:	2a80038b 	ldhu	r10,14(r5)
101032d8:	2a400717 	ldw	r9,28(r5)
101032dc:	2a000917 	ldw	r8,36(r5)
101032e0:	defee204 	addi	sp,sp,-1144
101032e4:	00c10004 	movi	r3,1024
101032e8:	dc011a15 	stw	r16,1128(sp)
101032ec:	10bfff4c 	andi	r2,r2,65533
101032f0:	2821883a 	mov	r16,r5
101032f4:	d8cb883a 	add	r5,sp,r3
101032f8:	dc811c15 	stw	r18,1136(sp)
101032fc:	dc411b15 	stw	r17,1132(sp)
10103300:	dfc11d15 	stw	ra,1140(sp)
10103304:	2025883a 	mov	r18,r4
10103308:	d881030d 	sth	r2,1036(sp)
1010330c:	dac11915 	stw	r11,1124(sp)
10103310:	da81038d 	sth	r10,1038(sp)
10103314:	da410715 	stw	r9,1052(sp)
10103318:	da010915 	stw	r8,1060(sp)
1010331c:	dec10015 	stw	sp,1024(sp)
10103320:	dec10415 	stw	sp,1040(sp)
10103324:	d8c10215 	stw	r3,1032(sp)
10103328:	d8c10515 	stw	r3,1044(sp)
1010332c:	d8010615 	stw	zero,1048(sp)
10103330:	01010b80 	call	101010b8 <___vfprintf_internal_r>
10103334:	1023883a 	mov	r17,r2
10103338:	10000416 	blt	r2,zero,1010334c <__sbprintf+0x80>
1010333c:	d9410004 	addi	r5,sp,1024
10103340:	9009883a 	mov	r4,r18
10103344:	0104f800 	call	10104f80 <_fflush_r>
10103348:	10000d1e 	bne	r2,zero,10103380 <__sbprintf+0xb4>
1010334c:	d881030b 	ldhu	r2,1036(sp)
10103350:	1080100c 	andi	r2,r2,64
10103354:	10000326 	beq	r2,zero,10103364 <__sbprintf+0x98>
10103358:	8080030b 	ldhu	r2,12(r16)
1010335c:	10801014 	ori	r2,r2,64
10103360:	8080030d 	sth	r2,12(r16)
10103364:	8805883a 	mov	r2,r17
10103368:	dfc11d17 	ldw	ra,1140(sp)
1010336c:	dc811c17 	ldw	r18,1136(sp)
10103370:	dc411b17 	ldw	r17,1132(sp)
10103374:	dc011a17 	ldw	r16,1128(sp)
10103378:	dec11e04 	addi	sp,sp,1144
1010337c:	f800283a 	ret
10103380:	047fffc4 	movi	r17,-1
10103384:	003ff106 	br	1010334c <__alt_data_end+0xfffe334c>

10103388 <__swsetup_r>:
10103388:	00840474 	movhi	r2,4113
1010338c:	defffd04 	addi	sp,sp,-12
10103390:	10881104 	addi	r2,r2,8260
10103394:	dc400115 	stw	r17,4(sp)
10103398:	2023883a 	mov	r17,r4
1010339c:	11000017 	ldw	r4,0(r2)
101033a0:	dc000015 	stw	r16,0(sp)
101033a4:	dfc00215 	stw	ra,8(sp)
101033a8:	2821883a 	mov	r16,r5
101033ac:	20000226 	beq	r4,zero,101033b8 <__swsetup_r+0x30>
101033b0:	20800e17 	ldw	r2,56(r4)
101033b4:	10003126 	beq	r2,zero,1010347c <__swsetup_r+0xf4>
101033b8:	8080030b 	ldhu	r2,12(r16)
101033bc:	10c0020c 	andi	r3,r2,8
101033c0:	1009883a 	mov	r4,r2
101033c4:	18000f26 	beq	r3,zero,10103404 <__swsetup_r+0x7c>
101033c8:	80c00417 	ldw	r3,16(r16)
101033cc:	18001526 	beq	r3,zero,10103424 <__swsetup_r+0x9c>
101033d0:	1100004c 	andi	r4,r2,1
101033d4:	20001c1e 	bne	r4,zero,10103448 <__swsetup_r+0xc0>
101033d8:	1080008c 	andi	r2,r2,2
101033dc:	1000291e 	bne	r2,zero,10103484 <__swsetup_r+0xfc>
101033e0:	80800517 	ldw	r2,20(r16)
101033e4:	80800215 	stw	r2,8(r16)
101033e8:	18001c26 	beq	r3,zero,1010345c <__swsetup_r+0xd4>
101033ec:	0005883a 	mov	r2,zero
101033f0:	dfc00217 	ldw	ra,8(sp)
101033f4:	dc400117 	ldw	r17,4(sp)
101033f8:	dc000017 	ldw	r16,0(sp)
101033fc:	dec00304 	addi	sp,sp,12
10103400:	f800283a 	ret
10103404:	2080040c 	andi	r2,r4,16
10103408:	10002e26 	beq	r2,zero,101034c4 <__swsetup_r+0x13c>
1010340c:	2080010c 	andi	r2,r4,4
10103410:	10001e1e 	bne	r2,zero,1010348c <__swsetup_r+0x104>
10103414:	80c00417 	ldw	r3,16(r16)
10103418:	20800214 	ori	r2,r4,8
1010341c:	8080030d 	sth	r2,12(r16)
10103420:	183feb1e 	bne	r3,zero,101033d0 <__alt_data_end+0xfffe33d0>
10103424:	1100a00c 	andi	r4,r2,640
10103428:	01408004 	movi	r5,512
1010342c:	217fe826 	beq	r4,r5,101033d0 <__alt_data_end+0xfffe33d0>
10103430:	800b883a 	mov	r5,r16
10103434:	8809883a 	mov	r4,r17
10103438:	0105f000 	call	10105f00 <__smakebuf_r>
1010343c:	8080030b 	ldhu	r2,12(r16)
10103440:	80c00417 	ldw	r3,16(r16)
10103444:	003fe206 	br	101033d0 <__alt_data_end+0xfffe33d0>
10103448:	80800517 	ldw	r2,20(r16)
1010344c:	80000215 	stw	zero,8(r16)
10103450:	0085c83a 	sub	r2,zero,r2
10103454:	80800615 	stw	r2,24(r16)
10103458:	183fe41e 	bne	r3,zero,101033ec <__alt_data_end+0xfffe33ec>
1010345c:	80c0030b 	ldhu	r3,12(r16)
10103460:	0005883a 	mov	r2,zero
10103464:	1900200c 	andi	r4,r3,128
10103468:	203fe126 	beq	r4,zero,101033f0 <__alt_data_end+0xfffe33f0>
1010346c:	18c01014 	ori	r3,r3,64
10103470:	80c0030d 	sth	r3,12(r16)
10103474:	00bfffc4 	movi	r2,-1
10103478:	003fdd06 	br	101033f0 <__alt_data_end+0xfffe33f0>
1010347c:	010535c0 	call	1010535c <__sinit>
10103480:	003fcd06 	br	101033b8 <__alt_data_end+0xfffe33b8>
10103484:	0005883a 	mov	r2,zero
10103488:	003fd606 	br	101033e4 <__alt_data_end+0xfffe33e4>
1010348c:	81400c17 	ldw	r5,48(r16)
10103490:	28000626 	beq	r5,zero,101034ac <__swsetup_r+0x124>
10103494:	80801004 	addi	r2,r16,64
10103498:	28800326 	beq	r5,r2,101034a8 <__swsetup_r+0x120>
1010349c:	8809883a 	mov	r4,r17
101034a0:	01054d00 	call	101054d0 <_free_r>
101034a4:	8100030b 	ldhu	r4,12(r16)
101034a8:	80000c15 	stw	zero,48(r16)
101034ac:	80c00417 	ldw	r3,16(r16)
101034b0:	00bff6c4 	movi	r2,-37
101034b4:	1108703a 	and	r4,r2,r4
101034b8:	80000115 	stw	zero,4(r16)
101034bc:	80c00015 	stw	r3,0(r16)
101034c0:	003fd506 	br	10103418 <__alt_data_end+0xfffe3418>
101034c4:	00800244 	movi	r2,9
101034c8:	88800015 	stw	r2,0(r17)
101034cc:	20801014 	ori	r2,r4,64
101034d0:	8080030d 	sth	r2,12(r16)
101034d4:	00bfffc4 	movi	r2,-1
101034d8:	003fc506 	br	101033f0 <__alt_data_end+0xfffe33f0>

101034dc <quorem>:
101034dc:	defff704 	addi	sp,sp,-36
101034e0:	dc800215 	stw	r18,8(sp)
101034e4:	20800417 	ldw	r2,16(r4)
101034e8:	2c800417 	ldw	r18,16(r5)
101034ec:	dfc00815 	stw	ra,32(sp)
101034f0:	ddc00715 	stw	r23,28(sp)
101034f4:	dd800615 	stw	r22,24(sp)
101034f8:	dd400515 	stw	r21,20(sp)
101034fc:	dd000415 	stw	r20,16(sp)
10103500:	dcc00315 	stw	r19,12(sp)
10103504:	dc400115 	stw	r17,4(sp)
10103508:	dc000015 	stw	r16,0(sp)
1010350c:	14807116 	blt	r2,r18,101036d4 <quorem+0x1f8>
10103510:	94bfffc4 	addi	r18,r18,-1
10103514:	94ad883a 	add	r22,r18,r18
10103518:	b5ad883a 	add	r22,r22,r22
1010351c:	2c400504 	addi	r17,r5,20
10103520:	8da9883a 	add	r20,r17,r22
10103524:	25400504 	addi	r21,r4,20
10103528:	282f883a 	mov	r23,r5
1010352c:	adad883a 	add	r22,r21,r22
10103530:	a1400017 	ldw	r5,0(r20)
10103534:	2021883a 	mov	r16,r4
10103538:	b1000017 	ldw	r4,0(r22)
1010353c:	29400044 	addi	r5,r5,1
10103540:	0100e240 	call	10100e24 <__udivsi3>
10103544:	1027883a 	mov	r19,r2
10103548:	10002c26 	beq	r2,zero,101035fc <quorem+0x120>
1010354c:	a813883a 	mov	r9,r21
10103550:	880b883a 	mov	r5,r17
10103554:	0009883a 	mov	r4,zero
10103558:	000d883a 	mov	r6,zero
1010355c:	2a000017 	ldw	r8,0(r5)
10103560:	49c00017 	ldw	r7,0(r9)
10103564:	29400104 	addi	r5,r5,4
10103568:	40bfffcc 	andi	r2,r8,65535
1010356c:	14c5383a 	mul	r2,r2,r19
10103570:	4010d43a 	srli	r8,r8,16
10103574:	38ffffcc 	andi	r3,r7,65535
10103578:	1105883a 	add	r2,r2,r4
1010357c:	1008d43a 	srli	r4,r2,16
10103580:	44d1383a 	mul	r8,r8,r19
10103584:	198d883a 	add	r6,r3,r6
10103588:	10ffffcc 	andi	r3,r2,65535
1010358c:	30c7c83a 	sub	r3,r6,r3
10103590:	380ed43a 	srli	r7,r7,16
10103594:	4105883a 	add	r2,r8,r4
10103598:	180dd43a 	srai	r6,r3,16
1010359c:	113fffcc 	andi	r4,r2,65535
101035a0:	390fc83a 	sub	r7,r7,r4
101035a4:	398d883a 	add	r6,r7,r6
101035a8:	300e943a 	slli	r7,r6,16
101035ac:	18ffffcc 	andi	r3,r3,65535
101035b0:	1008d43a 	srli	r4,r2,16
101035b4:	38ceb03a 	or	r7,r7,r3
101035b8:	49c00015 	stw	r7,0(r9)
101035bc:	300dd43a 	srai	r6,r6,16
101035c0:	4a400104 	addi	r9,r9,4
101035c4:	a17fe52e 	bgeu	r20,r5,1010355c <__alt_data_end+0xfffe355c>
101035c8:	b0800017 	ldw	r2,0(r22)
101035cc:	10000b1e 	bne	r2,zero,101035fc <quorem+0x120>
101035d0:	b0bfff04 	addi	r2,r22,-4
101035d4:	a880082e 	bgeu	r21,r2,101035f8 <quorem+0x11c>
101035d8:	b0ffff17 	ldw	r3,-4(r22)
101035dc:	18000326 	beq	r3,zero,101035ec <quorem+0x110>
101035e0:	00000506 	br	101035f8 <quorem+0x11c>
101035e4:	10c00017 	ldw	r3,0(r2)
101035e8:	1800031e 	bne	r3,zero,101035f8 <quorem+0x11c>
101035ec:	10bfff04 	addi	r2,r2,-4
101035f0:	94bfffc4 	addi	r18,r18,-1
101035f4:	a8bffb36 	bltu	r21,r2,101035e4 <__alt_data_end+0xfffe35e4>
101035f8:	84800415 	stw	r18,16(r16)
101035fc:	b80b883a 	mov	r5,r23
10103600:	8009883a 	mov	r4,r16
10103604:	01076400 	call	10107640 <__mcmp>
10103608:	10002616 	blt	r2,zero,101036a4 <quorem+0x1c8>
1010360c:	9cc00044 	addi	r19,r19,1
10103610:	a805883a 	mov	r2,r21
10103614:	000b883a 	mov	r5,zero
10103618:	11000017 	ldw	r4,0(r2)
1010361c:	89800017 	ldw	r6,0(r17)
10103620:	10800104 	addi	r2,r2,4
10103624:	20ffffcc 	andi	r3,r4,65535
10103628:	194b883a 	add	r5,r3,r5
1010362c:	30ffffcc 	andi	r3,r6,65535
10103630:	28c7c83a 	sub	r3,r5,r3
10103634:	300cd43a 	srli	r6,r6,16
10103638:	2008d43a 	srli	r4,r4,16
1010363c:	180bd43a 	srai	r5,r3,16
10103640:	18ffffcc 	andi	r3,r3,65535
10103644:	2189c83a 	sub	r4,r4,r6
10103648:	2149883a 	add	r4,r4,r5
1010364c:	200c943a 	slli	r6,r4,16
10103650:	8c400104 	addi	r17,r17,4
10103654:	200bd43a 	srai	r5,r4,16
10103658:	30c6b03a 	or	r3,r6,r3
1010365c:	10ffff15 	stw	r3,-4(r2)
10103660:	a47fed2e 	bgeu	r20,r17,10103618 <__alt_data_end+0xfffe3618>
10103664:	9485883a 	add	r2,r18,r18
10103668:	1085883a 	add	r2,r2,r2
1010366c:	a887883a 	add	r3,r21,r2
10103670:	18800017 	ldw	r2,0(r3)
10103674:	10000b1e 	bne	r2,zero,101036a4 <quorem+0x1c8>
10103678:	18bfff04 	addi	r2,r3,-4
1010367c:	a880082e 	bgeu	r21,r2,101036a0 <quorem+0x1c4>
10103680:	18ffff17 	ldw	r3,-4(r3)
10103684:	18000326 	beq	r3,zero,10103694 <quorem+0x1b8>
10103688:	00000506 	br	101036a0 <quorem+0x1c4>
1010368c:	10c00017 	ldw	r3,0(r2)
10103690:	1800031e 	bne	r3,zero,101036a0 <quorem+0x1c4>
10103694:	10bfff04 	addi	r2,r2,-4
10103698:	94bfffc4 	addi	r18,r18,-1
1010369c:	a8bffb36 	bltu	r21,r2,1010368c <__alt_data_end+0xfffe368c>
101036a0:	84800415 	stw	r18,16(r16)
101036a4:	9805883a 	mov	r2,r19
101036a8:	dfc00817 	ldw	ra,32(sp)
101036ac:	ddc00717 	ldw	r23,28(sp)
101036b0:	dd800617 	ldw	r22,24(sp)
101036b4:	dd400517 	ldw	r21,20(sp)
101036b8:	dd000417 	ldw	r20,16(sp)
101036bc:	dcc00317 	ldw	r19,12(sp)
101036c0:	dc800217 	ldw	r18,8(sp)
101036c4:	dc400117 	ldw	r17,4(sp)
101036c8:	dc000017 	ldw	r16,0(sp)
101036cc:	dec00904 	addi	sp,sp,36
101036d0:	f800283a 	ret
101036d4:	0005883a 	mov	r2,zero
101036d8:	003ff306 	br	101036a8 <__alt_data_end+0xfffe36a8>

101036dc <_dtoa_r>:
101036dc:	20801017 	ldw	r2,64(r4)
101036e0:	deffde04 	addi	sp,sp,-136
101036e4:	df002015 	stw	fp,128(sp)
101036e8:	dcc01b15 	stw	r19,108(sp)
101036ec:	dc801a15 	stw	r18,104(sp)
101036f0:	dc401915 	stw	r17,100(sp)
101036f4:	dc001815 	stw	r16,96(sp)
101036f8:	dfc02115 	stw	ra,132(sp)
101036fc:	ddc01f15 	stw	r23,124(sp)
10103700:	dd801e15 	stw	r22,120(sp)
10103704:	dd401d15 	stw	r21,116(sp)
10103708:	dd001c15 	stw	r20,112(sp)
1010370c:	d9c00315 	stw	r7,12(sp)
10103710:	2039883a 	mov	fp,r4
10103714:	3023883a 	mov	r17,r6
10103718:	2825883a 	mov	r18,r5
1010371c:	dc002417 	ldw	r16,144(sp)
10103720:	3027883a 	mov	r19,r6
10103724:	10000826 	beq	r2,zero,10103748 <_dtoa_r+0x6c>
10103728:	21801117 	ldw	r6,68(r4)
1010372c:	00c00044 	movi	r3,1
10103730:	100b883a 	mov	r5,r2
10103734:	1986983a 	sll	r3,r3,r6
10103738:	11800115 	stw	r6,4(r2)
1010373c:	10c00215 	stw	r3,8(r2)
10103740:	0106e200 	call	10106e20 <_Bfree>
10103744:	e0001015 	stw	zero,64(fp)
10103748:	88002e16 	blt	r17,zero,10103804 <_dtoa_r+0x128>
1010374c:	80000015 	stw	zero,0(r16)
10103750:	889ffc2c 	andhi	r2,r17,32752
10103754:	00dffc34 	movhi	r3,32752
10103758:	10c01c26 	beq	r2,r3,101037cc <_dtoa_r+0xf0>
1010375c:	000d883a 	mov	r6,zero
10103760:	000f883a 	mov	r7,zero
10103764:	9009883a 	mov	r4,r18
10103768:	980b883a 	mov	r5,r19
1010376c:	010c1780 	call	1010c178 <__eqdf2>
10103770:	10002b1e 	bne	r2,zero,10103820 <_dtoa_r+0x144>
10103774:	d9c02317 	ldw	r7,140(sp)
10103778:	00800044 	movi	r2,1
1010377c:	38800015 	stw	r2,0(r7)
10103780:	d8802517 	ldw	r2,148(sp)
10103784:	10019e26 	beq	r2,zero,10103e00 <_dtoa_r+0x724>
10103788:	d8c02517 	ldw	r3,148(sp)
1010378c:	00840474 	movhi	r2,4113
10103790:	1080a944 	addi	r2,r2,677
10103794:	18800015 	stw	r2,0(r3)
10103798:	10bfffc4 	addi	r2,r2,-1
1010379c:	dfc02117 	ldw	ra,132(sp)
101037a0:	df002017 	ldw	fp,128(sp)
101037a4:	ddc01f17 	ldw	r23,124(sp)
101037a8:	dd801e17 	ldw	r22,120(sp)
101037ac:	dd401d17 	ldw	r21,116(sp)
101037b0:	dd001c17 	ldw	r20,112(sp)
101037b4:	dcc01b17 	ldw	r19,108(sp)
101037b8:	dc801a17 	ldw	r18,104(sp)
101037bc:	dc401917 	ldw	r17,100(sp)
101037c0:	dc001817 	ldw	r16,96(sp)
101037c4:	dec02204 	addi	sp,sp,136
101037c8:	f800283a 	ret
101037cc:	d8c02317 	ldw	r3,140(sp)
101037d0:	0089c3c4 	movi	r2,9999
101037d4:	18800015 	stw	r2,0(r3)
101037d8:	90017726 	beq	r18,zero,10103db8 <_dtoa_r+0x6dc>
101037dc:	00840474 	movhi	r2,4113
101037e0:	1080b504 	addi	r2,r2,724
101037e4:	d9002517 	ldw	r4,148(sp)
101037e8:	203fec26 	beq	r4,zero,1010379c <__alt_data_end+0xfffe379c>
101037ec:	10c000c7 	ldb	r3,3(r2)
101037f0:	1801781e 	bne	r3,zero,10103dd4 <_dtoa_r+0x6f8>
101037f4:	10c000c4 	addi	r3,r2,3
101037f8:	d9802517 	ldw	r6,148(sp)
101037fc:	30c00015 	stw	r3,0(r6)
10103800:	003fe606 	br	1010379c <__alt_data_end+0xfffe379c>
10103804:	04e00034 	movhi	r19,32768
10103808:	9cffffc4 	addi	r19,r19,-1
1010380c:	00800044 	movi	r2,1
10103810:	8ce6703a 	and	r19,r17,r19
10103814:	80800015 	stw	r2,0(r16)
10103818:	9823883a 	mov	r17,r19
1010381c:	003fcc06 	br	10103750 <__alt_data_end+0xfffe3750>
10103820:	d8800204 	addi	r2,sp,8
10103824:	d8800015 	stw	r2,0(sp)
10103828:	d9c00104 	addi	r7,sp,4
1010382c:	900b883a 	mov	r5,r18
10103830:	980d883a 	mov	r6,r19
10103834:	e009883a 	mov	r4,fp
10103838:	8820d53a 	srli	r16,r17,20
1010383c:	0107a0c0 	call	10107a0c <__d2b>
10103840:	d8800915 	stw	r2,36(sp)
10103844:	8001651e 	bne	r16,zero,10103ddc <_dtoa_r+0x700>
10103848:	dd800217 	ldw	r22,8(sp)
1010384c:	dc000117 	ldw	r16,4(sp)
10103850:	00800804 	movi	r2,32
10103854:	b421883a 	add	r16,r22,r16
10103858:	80c10c84 	addi	r3,r16,1074
1010385c:	10c2d10e 	bge	r2,r3,101043a4 <_dtoa_r+0xcc8>
10103860:	00801004 	movi	r2,64
10103864:	81010484 	addi	r4,r16,1042
10103868:	10c7c83a 	sub	r3,r2,r3
1010386c:	9108d83a 	srl	r4,r18,r4
10103870:	88e2983a 	sll	r17,r17,r3
10103874:	2448b03a 	or	r4,r4,r17
10103878:	010d5400 	call	1010d540 <__floatunsidf>
1010387c:	017f8434 	movhi	r5,65040
10103880:	01800044 	movi	r6,1
10103884:	1009883a 	mov	r4,r2
10103888:	194b883a 	add	r5,r3,r5
1010388c:	843fffc4 	addi	r16,r16,-1
10103890:	d9801115 	stw	r6,68(sp)
10103894:	000d883a 	mov	r6,zero
10103898:	01cffe34 	movhi	r7,16376
1010389c:	010cae80 	call	1010cae8 <__subdf3>
101038a0:	0198dbf4 	movhi	r6,25455
101038a4:	01cff4f4 	movhi	r7,16339
101038a8:	3190d844 	addi	r6,r6,17249
101038ac:	39e1e9c4 	addi	r7,r7,-30809
101038b0:	1009883a 	mov	r4,r2
101038b4:	180b883a 	mov	r5,r3
101038b8:	010c3d00 	call	1010c3d0 <__muldf3>
101038bc:	01a2d874 	movhi	r6,35681
101038c0:	01cff1f4 	movhi	r7,16327
101038c4:	31b22cc4 	addi	r6,r6,-14157
101038c8:	39e28a04 	addi	r7,r7,-30168
101038cc:	180b883a 	mov	r5,r3
101038d0:	1009883a 	mov	r4,r2
101038d4:	010afe40 	call	1010afe4 <__adddf3>
101038d8:	8009883a 	mov	r4,r16
101038dc:	1029883a 	mov	r20,r2
101038e0:	1823883a 	mov	r17,r3
101038e4:	010d4640 	call	1010d464 <__floatsidf>
101038e8:	019427f4 	movhi	r6,20639
101038ec:	01cff4f4 	movhi	r7,16339
101038f0:	319e7ec4 	addi	r6,r6,31227
101038f4:	39d104c4 	addi	r7,r7,17427
101038f8:	1009883a 	mov	r4,r2
101038fc:	180b883a 	mov	r5,r3
10103900:	010c3d00 	call	1010c3d0 <__muldf3>
10103904:	100d883a 	mov	r6,r2
10103908:	180f883a 	mov	r7,r3
1010390c:	a009883a 	mov	r4,r20
10103910:	880b883a 	mov	r5,r17
10103914:	010afe40 	call	1010afe4 <__adddf3>
10103918:	1009883a 	mov	r4,r2
1010391c:	180b883a 	mov	r5,r3
10103920:	1029883a 	mov	r20,r2
10103924:	1823883a 	mov	r17,r3
10103928:	010d3e40 	call	1010d3e4 <__fixdfsi>
1010392c:	000d883a 	mov	r6,zero
10103930:	000f883a 	mov	r7,zero
10103934:	a009883a 	mov	r4,r20
10103938:	880b883a 	mov	r5,r17
1010393c:	d8800515 	stw	r2,20(sp)
10103940:	010c2dc0 	call	1010c2dc <__ledf2>
10103944:	10028716 	blt	r2,zero,10104364 <_dtoa_r+0xc88>
10103948:	d8c00517 	ldw	r3,20(sp)
1010394c:	00800584 	movi	r2,22
10103950:	10c27536 	bltu	r2,r3,10104328 <_dtoa_r+0xc4c>
10103954:	180490fa 	slli	r2,r3,3
10103958:	00c40474 	movhi	r3,4113
1010395c:	18c0d104 	addi	r3,r3,836
10103960:	1885883a 	add	r2,r3,r2
10103964:	11000017 	ldw	r4,0(r2)
10103968:	11400117 	ldw	r5,4(r2)
1010396c:	900d883a 	mov	r6,r18
10103970:	980f883a 	mov	r7,r19
10103974:	010c2000 	call	1010c200 <__gedf2>
10103978:	00828d0e 	bge	zero,r2,101043b0 <_dtoa_r+0xcd4>
1010397c:	d9000517 	ldw	r4,20(sp)
10103980:	d8000e15 	stw	zero,56(sp)
10103984:	213fffc4 	addi	r4,r4,-1
10103988:	d9000515 	stw	r4,20(sp)
1010398c:	b42dc83a 	sub	r22,r22,r16
10103990:	b5bfffc4 	addi	r22,r22,-1
10103994:	b0026f16 	blt	r22,zero,10104354 <_dtoa_r+0xc78>
10103998:	d8000815 	stw	zero,32(sp)
1010399c:	d9c00517 	ldw	r7,20(sp)
101039a0:	38026416 	blt	r7,zero,10104334 <_dtoa_r+0xc58>
101039a4:	b1ed883a 	add	r22,r22,r7
101039a8:	d9c00d15 	stw	r7,52(sp)
101039ac:	d8000a15 	stw	zero,40(sp)
101039b0:	d9800317 	ldw	r6,12(sp)
101039b4:	00800244 	movi	r2,9
101039b8:	11811436 	bltu	r2,r6,10103e0c <_dtoa_r+0x730>
101039bc:	00800144 	movi	r2,5
101039c0:	1184e10e 	bge	r2,r6,10104d48 <_dtoa_r+0x166c>
101039c4:	31bfff04 	addi	r6,r6,-4
101039c8:	d9800315 	stw	r6,12(sp)
101039cc:	0023883a 	mov	r17,zero
101039d0:	d9800317 	ldw	r6,12(sp)
101039d4:	008000c4 	movi	r2,3
101039d8:	30836726 	beq	r6,r2,10104778 <_dtoa_r+0x109c>
101039dc:	1183410e 	bge	r2,r6,101046e4 <_dtoa_r+0x1008>
101039e0:	d9c00317 	ldw	r7,12(sp)
101039e4:	00800104 	movi	r2,4
101039e8:	38827c26 	beq	r7,r2,101043dc <_dtoa_r+0xd00>
101039ec:	00800144 	movi	r2,5
101039f0:	3884c41e 	bne	r7,r2,10104d04 <_dtoa_r+0x1628>
101039f4:	00800044 	movi	r2,1
101039f8:	d8800b15 	stw	r2,44(sp)
101039fc:	d8c00517 	ldw	r3,20(sp)
10103a00:	d9002217 	ldw	r4,136(sp)
10103a04:	1907883a 	add	r3,r3,r4
10103a08:	19800044 	addi	r6,r3,1
10103a0c:	d8c00c15 	stw	r3,48(sp)
10103a10:	d9800615 	stw	r6,24(sp)
10103a14:	0183a40e 	bge	zero,r6,101048a8 <_dtoa_r+0x11cc>
10103a18:	d9800617 	ldw	r6,24(sp)
10103a1c:	3021883a 	mov	r16,r6
10103a20:	e0001115 	stw	zero,68(fp)
10103a24:	008005c4 	movi	r2,23
10103a28:	1184c92e 	bgeu	r2,r6,10104d50 <_dtoa_r+0x1674>
10103a2c:	00c00044 	movi	r3,1
10103a30:	00800104 	movi	r2,4
10103a34:	1085883a 	add	r2,r2,r2
10103a38:	11000504 	addi	r4,r2,20
10103a3c:	180b883a 	mov	r5,r3
10103a40:	18c00044 	addi	r3,r3,1
10103a44:	313ffb2e 	bgeu	r6,r4,10103a34 <__alt_data_end+0xfffe3a34>
10103a48:	e1401115 	stw	r5,68(fp)
10103a4c:	e009883a 	mov	r4,fp
10103a50:	0106d780 	call	10106d78 <_Balloc>
10103a54:	d8800715 	stw	r2,28(sp)
10103a58:	e0801015 	stw	r2,64(fp)
10103a5c:	00800384 	movi	r2,14
10103a60:	1400f736 	bltu	r2,r16,10103e40 <_dtoa_r+0x764>
10103a64:	8800f626 	beq	r17,zero,10103e40 <_dtoa_r+0x764>
10103a68:	d9c00517 	ldw	r7,20(sp)
10103a6c:	01c39a0e 	bge	zero,r7,101048d8 <_dtoa_r+0x11fc>
10103a70:	388003cc 	andi	r2,r7,15
10103a74:	100490fa 	slli	r2,r2,3
10103a78:	382bd13a 	srai	r21,r7,4
10103a7c:	00c40474 	movhi	r3,4113
10103a80:	18c0d104 	addi	r3,r3,836
10103a84:	1885883a 	add	r2,r3,r2
10103a88:	a8c0040c 	andi	r3,r21,16
10103a8c:	12400017 	ldw	r9,0(r2)
10103a90:	12000117 	ldw	r8,4(r2)
10103a94:	18037926 	beq	r3,zero,1010487c <_dtoa_r+0x11a0>
10103a98:	00840474 	movhi	r2,4113
10103a9c:	1080c704 	addi	r2,r2,796
10103aa0:	11800817 	ldw	r6,32(r2)
10103aa4:	11c00917 	ldw	r7,36(r2)
10103aa8:	9009883a 	mov	r4,r18
10103aac:	980b883a 	mov	r5,r19
10103ab0:	da001715 	stw	r8,92(sp)
10103ab4:	da401615 	stw	r9,88(sp)
10103ab8:	010b8900 	call	1010b890 <__divdf3>
10103abc:	da001717 	ldw	r8,92(sp)
10103ac0:	da401617 	ldw	r9,88(sp)
10103ac4:	ad4003cc 	andi	r21,r21,15
10103ac8:	040000c4 	movi	r16,3
10103acc:	1023883a 	mov	r17,r2
10103ad0:	1829883a 	mov	r20,r3
10103ad4:	a8001126 	beq	r21,zero,10103b1c <_dtoa_r+0x440>
10103ad8:	05c40474 	movhi	r23,4113
10103adc:	bdc0c704 	addi	r23,r23,796
10103ae0:	4805883a 	mov	r2,r9
10103ae4:	4007883a 	mov	r3,r8
10103ae8:	a980004c 	andi	r6,r21,1
10103aec:	1009883a 	mov	r4,r2
10103af0:	a82bd07a 	srai	r21,r21,1
10103af4:	180b883a 	mov	r5,r3
10103af8:	30000426 	beq	r6,zero,10103b0c <_dtoa_r+0x430>
10103afc:	b9800017 	ldw	r6,0(r23)
10103b00:	b9c00117 	ldw	r7,4(r23)
10103b04:	84000044 	addi	r16,r16,1
10103b08:	010c3d00 	call	1010c3d0 <__muldf3>
10103b0c:	bdc00204 	addi	r23,r23,8
10103b10:	a83ff51e 	bne	r21,zero,10103ae8 <__alt_data_end+0xfffe3ae8>
10103b14:	1013883a 	mov	r9,r2
10103b18:	1811883a 	mov	r8,r3
10103b1c:	480d883a 	mov	r6,r9
10103b20:	400f883a 	mov	r7,r8
10103b24:	8809883a 	mov	r4,r17
10103b28:	a00b883a 	mov	r5,r20
10103b2c:	010b8900 	call	1010b890 <__divdf3>
10103b30:	d8800f15 	stw	r2,60(sp)
10103b34:	d8c01015 	stw	r3,64(sp)
10103b38:	d8c00e17 	ldw	r3,56(sp)
10103b3c:	18000626 	beq	r3,zero,10103b58 <_dtoa_r+0x47c>
10103b40:	d9000f17 	ldw	r4,60(sp)
10103b44:	d9401017 	ldw	r5,64(sp)
10103b48:	000d883a 	mov	r6,zero
10103b4c:	01cffc34 	movhi	r7,16368
10103b50:	010c2dc0 	call	1010c2dc <__ledf2>
10103b54:	10040b16 	blt	r2,zero,10104b84 <_dtoa_r+0x14a8>
10103b58:	8009883a 	mov	r4,r16
10103b5c:	010d4640 	call	1010d464 <__floatsidf>
10103b60:	d9800f17 	ldw	r6,60(sp)
10103b64:	d9c01017 	ldw	r7,64(sp)
10103b68:	1009883a 	mov	r4,r2
10103b6c:	180b883a 	mov	r5,r3
10103b70:	010c3d00 	call	1010c3d0 <__muldf3>
10103b74:	000d883a 	mov	r6,zero
10103b78:	01d00734 	movhi	r7,16412
10103b7c:	1009883a 	mov	r4,r2
10103b80:	180b883a 	mov	r5,r3
10103b84:	010afe40 	call	1010afe4 <__adddf3>
10103b88:	1021883a 	mov	r16,r2
10103b8c:	d8800617 	ldw	r2,24(sp)
10103b90:	047f3034 	movhi	r17,64704
10103b94:	1c63883a 	add	r17,r3,r17
10103b98:	10031826 	beq	r2,zero,101047fc <_dtoa_r+0x1120>
10103b9c:	d8c00517 	ldw	r3,20(sp)
10103ba0:	db000617 	ldw	r12,24(sp)
10103ba4:	d8c01315 	stw	r3,76(sp)
10103ba8:	d9000b17 	ldw	r4,44(sp)
10103bac:	20038f26 	beq	r4,zero,101049ec <_dtoa_r+0x1310>
10103bb0:	60bfffc4 	addi	r2,r12,-1
10103bb4:	100490fa 	slli	r2,r2,3
10103bb8:	00c40474 	movhi	r3,4113
10103bbc:	18c0d104 	addi	r3,r3,836
10103bc0:	1885883a 	add	r2,r3,r2
10103bc4:	11800017 	ldw	r6,0(r2)
10103bc8:	11c00117 	ldw	r7,4(r2)
10103bcc:	d8800717 	ldw	r2,28(sp)
10103bd0:	0009883a 	mov	r4,zero
10103bd4:	014ff834 	movhi	r5,16352
10103bd8:	db001615 	stw	r12,88(sp)
10103bdc:	15c00044 	addi	r23,r2,1
10103be0:	010b8900 	call	1010b890 <__divdf3>
10103be4:	800d883a 	mov	r6,r16
10103be8:	880f883a 	mov	r7,r17
10103bec:	1009883a 	mov	r4,r2
10103bf0:	180b883a 	mov	r5,r3
10103bf4:	010cae80 	call	1010cae8 <__subdf3>
10103bf8:	d9401017 	ldw	r5,64(sp)
10103bfc:	d9000f17 	ldw	r4,60(sp)
10103c00:	102b883a 	mov	r21,r2
10103c04:	d8c01215 	stw	r3,72(sp)
10103c08:	010d3e40 	call	1010d3e4 <__fixdfsi>
10103c0c:	1009883a 	mov	r4,r2
10103c10:	1029883a 	mov	r20,r2
10103c14:	010d4640 	call	1010d464 <__floatsidf>
10103c18:	d9000f17 	ldw	r4,60(sp)
10103c1c:	d9401017 	ldw	r5,64(sp)
10103c20:	100d883a 	mov	r6,r2
10103c24:	180f883a 	mov	r7,r3
10103c28:	010cae80 	call	1010cae8 <__subdf3>
10103c2c:	1823883a 	mov	r17,r3
10103c30:	d8c00717 	ldw	r3,28(sp)
10103c34:	d9401217 	ldw	r5,72(sp)
10103c38:	a2000c04 	addi	r8,r20,48
10103c3c:	1021883a 	mov	r16,r2
10103c40:	1a000005 	stb	r8,0(r3)
10103c44:	800d883a 	mov	r6,r16
10103c48:	880f883a 	mov	r7,r17
10103c4c:	a809883a 	mov	r4,r21
10103c50:	4029883a 	mov	r20,r8
10103c54:	010c2000 	call	1010c200 <__gedf2>
10103c58:	00841d16 	blt	zero,r2,10104cd0 <_dtoa_r+0x15f4>
10103c5c:	800d883a 	mov	r6,r16
10103c60:	880f883a 	mov	r7,r17
10103c64:	0009883a 	mov	r4,zero
10103c68:	014ffc34 	movhi	r5,16368
10103c6c:	010cae80 	call	1010cae8 <__subdf3>
10103c70:	d9401217 	ldw	r5,72(sp)
10103c74:	100d883a 	mov	r6,r2
10103c78:	180f883a 	mov	r7,r3
10103c7c:	a809883a 	mov	r4,r21
10103c80:	010c2000 	call	1010c200 <__gedf2>
10103c84:	db001617 	ldw	r12,88(sp)
10103c88:	00840e16 	blt	zero,r2,10104cc4 <_dtoa_r+0x15e8>
10103c8c:	00800044 	movi	r2,1
10103c90:	13006b0e 	bge	r2,r12,10103e40 <_dtoa_r+0x764>
10103c94:	d9000717 	ldw	r4,28(sp)
10103c98:	dd800f15 	stw	r22,60(sp)
10103c9c:	dcc01015 	stw	r19,64(sp)
10103ca0:	2319883a 	add	r12,r4,r12
10103ca4:	dcc01217 	ldw	r19,72(sp)
10103ca8:	602d883a 	mov	r22,r12
10103cac:	dc801215 	stw	r18,72(sp)
10103cb0:	b825883a 	mov	r18,r23
10103cb4:	00000906 	br	10103cdc <_dtoa_r+0x600>
10103cb8:	010cae80 	call	1010cae8 <__subdf3>
10103cbc:	a80d883a 	mov	r6,r21
10103cc0:	980f883a 	mov	r7,r19
10103cc4:	1009883a 	mov	r4,r2
10103cc8:	180b883a 	mov	r5,r3
10103ccc:	010c2dc0 	call	1010c2dc <__ledf2>
10103cd0:	1003e816 	blt	r2,zero,10104c74 <_dtoa_r+0x1598>
10103cd4:	b825883a 	mov	r18,r23
10103cd8:	bd83e926 	beq	r23,r22,10104c80 <_dtoa_r+0x15a4>
10103cdc:	a809883a 	mov	r4,r21
10103ce0:	980b883a 	mov	r5,r19
10103ce4:	000d883a 	mov	r6,zero
10103ce8:	01d00934 	movhi	r7,16420
10103cec:	010c3d00 	call	1010c3d0 <__muldf3>
10103cf0:	000d883a 	mov	r6,zero
10103cf4:	01d00934 	movhi	r7,16420
10103cf8:	8009883a 	mov	r4,r16
10103cfc:	880b883a 	mov	r5,r17
10103d00:	102b883a 	mov	r21,r2
10103d04:	1827883a 	mov	r19,r3
10103d08:	010c3d00 	call	1010c3d0 <__muldf3>
10103d0c:	180b883a 	mov	r5,r3
10103d10:	1009883a 	mov	r4,r2
10103d14:	1821883a 	mov	r16,r3
10103d18:	1023883a 	mov	r17,r2
10103d1c:	010d3e40 	call	1010d3e4 <__fixdfsi>
10103d20:	1009883a 	mov	r4,r2
10103d24:	1029883a 	mov	r20,r2
10103d28:	010d4640 	call	1010d464 <__floatsidf>
10103d2c:	8809883a 	mov	r4,r17
10103d30:	800b883a 	mov	r5,r16
10103d34:	100d883a 	mov	r6,r2
10103d38:	180f883a 	mov	r7,r3
10103d3c:	010cae80 	call	1010cae8 <__subdf3>
10103d40:	a5000c04 	addi	r20,r20,48
10103d44:	a80d883a 	mov	r6,r21
10103d48:	980f883a 	mov	r7,r19
10103d4c:	1009883a 	mov	r4,r2
10103d50:	180b883a 	mov	r5,r3
10103d54:	95000005 	stb	r20,0(r18)
10103d58:	1021883a 	mov	r16,r2
10103d5c:	1823883a 	mov	r17,r3
10103d60:	010c2dc0 	call	1010c2dc <__ledf2>
10103d64:	bdc00044 	addi	r23,r23,1
10103d68:	800d883a 	mov	r6,r16
10103d6c:	880f883a 	mov	r7,r17
10103d70:	0009883a 	mov	r4,zero
10103d74:	014ffc34 	movhi	r5,16368
10103d78:	103fcf0e 	bge	r2,zero,10103cb8 <__alt_data_end+0xfffe3cb8>
10103d7c:	d8c01317 	ldw	r3,76(sp)
10103d80:	d8c00515 	stw	r3,20(sp)
10103d84:	d9400917 	ldw	r5,36(sp)
10103d88:	e009883a 	mov	r4,fp
10103d8c:	0106e200 	call	10106e20 <_Bfree>
10103d90:	d9000517 	ldw	r4,20(sp)
10103d94:	d9802317 	ldw	r6,140(sp)
10103d98:	d9c02517 	ldw	r7,148(sp)
10103d9c:	b8000005 	stb	zero,0(r23)
10103da0:	20800044 	addi	r2,r4,1
10103da4:	30800015 	stw	r2,0(r6)
10103da8:	3802aa26 	beq	r7,zero,10104854 <_dtoa_r+0x1178>
10103dac:	3dc00015 	stw	r23,0(r7)
10103db0:	d8800717 	ldw	r2,28(sp)
10103db4:	003e7906 	br	1010379c <__alt_data_end+0xfffe379c>
10103db8:	00800434 	movhi	r2,16
10103dbc:	10bfffc4 	addi	r2,r2,-1
10103dc0:	88a2703a 	and	r17,r17,r2
10103dc4:	883e851e 	bne	r17,zero,101037dc <__alt_data_end+0xfffe37dc>
10103dc8:	00840474 	movhi	r2,4113
10103dcc:	1080b204 	addi	r2,r2,712
10103dd0:	003e8406 	br	101037e4 <__alt_data_end+0xfffe37e4>
10103dd4:	10c00204 	addi	r3,r2,8
10103dd8:	003e8706 	br	101037f8 <__alt_data_end+0xfffe37f8>
10103ddc:	01400434 	movhi	r5,16
10103de0:	297fffc4 	addi	r5,r5,-1
10103de4:	994a703a 	and	r5,r19,r5
10103de8:	9009883a 	mov	r4,r18
10103dec:	843f0044 	addi	r16,r16,-1023
10103df0:	294ffc34 	orhi	r5,r5,16368
10103df4:	dd800217 	ldw	r22,8(sp)
10103df8:	d8001115 	stw	zero,68(sp)
10103dfc:	003ea506 	br	10103894 <__alt_data_end+0xfffe3894>
10103e00:	00840474 	movhi	r2,4113
10103e04:	1080a904 	addi	r2,r2,676
10103e08:	003e6406 	br	1010379c <__alt_data_end+0xfffe379c>
10103e0c:	e0001115 	stw	zero,68(fp)
10103e10:	000b883a 	mov	r5,zero
10103e14:	e009883a 	mov	r4,fp
10103e18:	0106d780 	call	10106d78 <_Balloc>
10103e1c:	01bfffc4 	movi	r6,-1
10103e20:	01c00044 	movi	r7,1
10103e24:	d8800715 	stw	r2,28(sp)
10103e28:	d9800c15 	stw	r6,48(sp)
10103e2c:	e0801015 	stw	r2,64(fp)
10103e30:	d8000315 	stw	zero,12(sp)
10103e34:	d9c00b15 	stw	r7,44(sp)
10103e38:	d9800615 	stw	r6,24(sp)
10103e3c:	d8002215 	stw	zero,136(sp)
10103e40:	d8800117 	ldw	r2,4(sp)
10103e44:	10008916 	blt	r2,zero,1010406c <_dtoa_r+0x990>
10103e48:	d9000517 	ldw	r4,20(sp)
10103e4c:	00c00384 	movi	r3,14
10103e50:	19008616 	blt	r3,r4,1010406c <_dtoa_r+0x990>
10103e54:	200490fa 	slli	r2,r4,3
10103e58:	00c40474 	movhi	r3,4113
10103e5c:	d9802217 	ldw	r6,136(sp)
10103e60:	18c0d104 	addi	r3,r3,836
10103e64:	1885883a 	add	r2,r3,r2
10103e68:	14000017 	ldw	r16,0(r2)
10103e6c:	14400117 	ldw	r17,4(r2)
10103e70:	30016316 	blt	r6,zero,10104400 <_dtoa_r+0xd24>
10103e74:	800d883a 	mov	r6,r16
10103e78:	880f883a 	mov	r7,r17
10103e7c:	9009883a 	mov	r4,r18
10103e80:	980b883a 	mov	r5,r19
10103e84:	010b8900 	call	1010b890 <__divdf3>
10103e88:	180b883a 	mov	r5,r3
10103e8c:	1009883a 	mov	r4,r2
10103e90:	010d3e40 	call	1010d3e4 <__fixdfsi>
10103e94:	1009883a 	mov	r4,r2
10103e98:	102b883a 	mov	r21,r2
10103e9c:	010d4640 	call	1010d464 <__floatsidf>
10103ea0:	800d883a 	mov	r6,r16
10103ea4:	880f883a 	mov	r7,r17
10103ea8:	1009883a 	mov	r4,r2
10103eac:	180b883a 	mov	r5,r3
10103eb0:	010c3d00 	call	1010c3d0 <__muldf3>
10103eb4:	100d883a 	mov	r6,r2
10103eb8:	180f883a 	mov	r7,r3
10103ebc:	9009883a 	mov	r4,r18
10103ec0:	980b883a 	mov	r5,r19
10103ec4:	010cae80 	call	1010cae8 <__subdf3>
10103ec8:	d9c00717 	ldw	r7,28(sp)
10103ecc:	1009883a 	mov	r4,r2
10103ed0:	a8800c04 	addi	r2,r21,48
10103ed4:	38800005 	stb	r2,0(r7)
10103ed8:	3dc00044 	addi	r23,r7,1
10103edc:	d9c00617 	ldw	r7,24(sp)
10103ee0:	01800044 	movi	r6,1
10103ee4:	180b883a 	mov	r5,r3
10103ee8:	2005883a 	mov	r2,r4
10103eec:	39803826 	beq	r7,r6,10103fd0 <_dtoa_r+0x8f4>
10103ef0:	000d883a 	mov	r6,zero
10103ef4:	01d00934 	movhi	r7,16420
10103ef8:	010c3d00 	call	1010c3d0 <__muldf3>
10103efc:	000d883a 	mov	r6,zero
10103f00:	000f883a 	mov	r7,zero
10103f04:	1009883a 	mov	r4,r2
10103f08:	180b883a 	mov	r5,r3
10103f0c:	1025883a 	mov	r18,r2
10103f10:	1827883a 	mov	r19,r3
10103f14:	010c1780 	call	1010c178 <__eqdf2>
10103f18:	103f9a26 	beq	r2,zero,10103d84 <__alt_data_end+0xfffe3d84>
10103f1c:	d9c00617 	ldw	r7,24(sp)
10103f20:	d8c00717 	ldw	r3,28(sp)
10103f24:	b829883a 	mov	r20,r23
10103f28:	38bfffc4 	addi	r2,r7,-1
10103f2c:	18ad883a 	add	r22,r3,r2
10103f30:	00000a06 	br	10103f5c <_dtoa_r+0x880>
10103f34:	010c3d00 	call	1010c3d0 <__muldf3>
10103f38:	000d883a 	mov	r6,zero
10103f3c:	000f883a 	mov	r7,zero
10103f40:	1009883a 	mov	r4,r2
10103f44:	180b883a 	mov	r5,r3
10103f48:	1025883a 	mov	r18,r2
10103f4c:	1827883a 	mov	r19,r3
10103f50:	b829883a 	mov	r20,r23
10103f54:	010c1780 	call	1010c178 <__eqdf2>
10103f58:	103f8a26 	beq	r2,zero,10103d84 <__alt_data_end+0xfffe3d84>
10103f5c:	800d883a 	mov	r6,r16
10103f60:	880f883a 	mov	r7,r17
10103f64:	9009883a 	mov	r4,r18
10103f68:	980b883a 	mov	r5,r19
10103f6c:	010b8900 	call	1010b890 <__divdf3>
10103f70:	180b883a 	mov	r5,r3
10103f74:	1009883a 	mov	r4,r2
10103f78:	010d3e40 	call	1010d3e4 <__fixdfsi>
10103f7c:	1009883a 	mov	r4,r2
10103f80:	102b883a 	mov	r21,r2
10103f84:	010d4640 	call	1010d464 <__floatsidf>
10103f88:	800d883a 	mov	r6,r16
10103f8c:	880f883a 	mov	r7,r17
10103f90:	1009883a 	mov	r4,r2
10103f94:	180b883a 	mov	r5,r3
10103f98:	010c3d00 	call	1010c3d0 <__muldf3>
10103f9c:	100d883a 	mov	r6,r2
10103fa0:	180f883a 	mov	r7,r3
10103fa4:	9009883a 	mov	r4,r18
10103fa8:	980b883a 	mov	r5,r19
10103fac:	010cae80 	call	1010cae8 <__subdf3>
10103fb0:	aa000c04 	addi	r8,r21,48
10103fb4:	a2000005 	stb	r8,0(r20)
10103fb8:	000d883a 	mov	r6,zero
10103fbc:	01d00934 	movhi	r7,16420
10103fc0:	1009883a 	mov	r4,r2
10103fc4:	180b883a 	mov	r5,r3
10103fc8:	a5c00044 	addi	r23,r20,1
10103fcc:	b53fd91e 	bne	r22,r20,10103f34 <__alt_data_end+0xfffe3f34>
10103fd0:	100d883a 	mov	r6,r2
10103fd4:	180f883a 	mov	r7,r3
10103fd8:	1009883a 	mov	r4,r2
10103fdc:	180b883a 	mov	r5,r3
10103fe0:	010afe40 	call	1010afe4 <__adddf3>
10103fe4:	100d883a 	mov	r6,r2
10103fe8:	180f883a 	mov	r7,r3
10103fec:	8009883a 	mov	r4,r16
10103ff0:	880b883a 	mov	r5,r17
10103ff4:	1027883a 	mov	r19,r2
10103ff8:	1825883a 	mov	r18,r3
10103ffc:	010c2dc0 	call	1010c2dc <__ledf2>
10104000:	10000816 	blt	r2,zero,10104024 <_dtoa_r+0x948>
10104004:	980d883a 	mov	r6,r19
10104008:	900f883a 	mov	r7,r18
1010400c:	8009883a 	mov	r4,r16
10104010:	880b883a 	mov	r5,r17
10104014:	010c1780 	call	1010c178 <__eqdf2>
10104018:	103f5a1e 	bne	r2,zero,10103d84 <__alt_data_end+0xfffe3d84>
1010401c:	ad40004c 	andi	r21,r21,1
10104020:	a83f5826 	beq	r21,zero,10103d84 <__alt_data_end+0xfffe3d84>
10104024:	bd3fffc3 	ldbu	r20,-1(r23)
10104028:	b8bfffc4 	addi	r2,r23,-1
1010402c:	1007883a 	mov	r3,r2
10104030:	01400e44 	movi	r5,57
10104034:	d9800717 	ldw	r6,28(sp)
10104038:	00000506 	br	10104050 <_dtoa_r+0x974>
1010403c:	18ffffc4 	addi	r3,r3,-1
10104040:	11824726 	beq	r2,r6,10104960 <_dtoa_r+0x1284>
10104044:	1d000003 	ldbu	r20,0(r3)
10104048:	102f883a 	mov	r23,r2
1010404c:	10bfffc4 	addi	r2,r2,-1
10104050:	a1003fcc 	andi	r4,r20,255
10104054:	2100201c 	xori	r4,r4,128
10104058:	213fe004 	addi	r4,r4,-128
1010405c:	217ff726 	beq	r4,r5,1010403c <__alt_data_end+0xfffe403c>
10104060:	a2000044 	addi	r8,r20,1
10104064:	12000005 	stb	r8,0(r2)
10104068:	003f4606 	br	10103d84 <__alt_data_end+0xfffe3d84>
1010406c:	d9000b17 	ldw	r4,44(sp)
10104070:	2000c826 	beq	r4,zero,10104394 <_dtoa_r+0xcb8>
10104074:	d9800317 	ldw	r6,12(sp)
10104078:	00c00044 	movi	r3,1
1010407c:	1980f90e 	bge	r3,r6,10104464 <_dtoa_r+0xd88>
10104080:	d8800617 	ldw	r2,24(sp)
10104084:	d8c00a17 	ldw	r3,40(sp)
10104088:	157fffc4 	addi	r21,r2,-1
1010408c:	1d41f316 	blt	r3,r21,1010485c <_dtoa_r+0x1180>
10104090:	1d6bc83a 	sub	r21,r3,r21
10104094:	d9c00617 	ldw	r7,24(sp)
10104098:	3802aa16 	blt	r7,zero,10104b44 <_dtoa_r+0x1468>
1010409c:	dd000817 	ldw	r20,32(sp)
101040a0:	d8800617 	ldw	r2,24(sp)
101040a4:	d8c00817 	ldw	r3,32(sp)
101040a8:	01400044 	movi	r5,1
101040ac:	e009883a 	mov	r4,fp
101040b0:	1887883a 	add	r3,r3,r2
101040b4:	d8c00815 	stw	r3,32(sp)
101040b8:	b0ad883a 	add	r22,r22,r2
101040bc:	01071840 	call	10107184 <__i2b>
101040c0:	1023883a 	mov	r17,r2
101040c4:	a0000826 	beq	r20,zero,101040e8 <_dtoa_r+0xa0c>
101040c8:	0580070e 	bge	zero,r22,101040e8 <_dtoa_r+0xa0c>
101040cc:	a005883a 	mov	r2,r20
101040d0:	b500b916 	blt	r22,r20,101043b8 <_dtoa_r+0xcdc>
101040d4:	d9000817 	ldw	r4,32(sp)
101040d8:	a0a9c83a 	sub	r20,r20,r2
101040dc:	b0adc83a 	sub	r22,r22,r2
101040e0:	2089c83a 	sub	r4,r4,r2
101040e4:	d9000815 	stw	r4,32(sp)
101040e8:	d9800a17 	ldw	r6,40(sp)
101040ec:	0181810e 	bge	zero,r6,101046f4 <_dtoa_r+0x1018>
101040f0:	d9c00b17 	ldw	r7,44(sp)
101040f4:	3800b326 	beq	r7,zero,101043c4 <_dtoa_r+0xce8>
101040f8:	a800b226 	beq	r21,zero,101043c4 <_dtoa_r+0xce8>
101040fc:	880b883a 	mov	r5,r17
10104100:	a80d883a 	mov	r6,r21
10104104:	e009883a 	mov	r4,fp
10104108:	01073b80 	call	101073b8 <__pow5mult>
1010410c:	d9800917 	ldw	r6,36(sp)
10104110:	100b883a 	mov	r5,r2
10104114:	e009883a 	mov	r4,fp
10104118:	1023883a 	mov	r17,r2
1010411c:	01071c00 	call	101071c0 <__multiply>
10104120:	1021883a 	mov	r16,r2
10104124:	d8800a17 	ldw	r2,40(sp)
10104128:	d9400917 	ldw	r5,36(sp)
1010412c:	e009883a 	mov	r4,fp
10104130:	1545c83a 	sub	r2,r2,r21
10104134:	d8800a15 	stw	r2,40(sp)
10104138:	0106e200 	call	10106e20 <_Bfree>
1010413c:	d8c00a17 	ldw	r3,40(sp)
10104140:	18009f1e 	bne	r3,zero,101043c0 <_dtoa_r+0xce4>
10104144:	05c00044 	movi	r23,1
10104148:	e009883a 	mov	r4,fp
1010414c:	b80b883a 	mov	r5,r23
10104150:	01071840 	call	10107184 <__i2b>
10104154:	d9000d17 	ldw	r4,52(sp)
10104158:	102b883a 	mov	r21,r2
1010415c:	2000ce26 	beq	r4,zero,10104498 <_dtoa_r+0xdbc>
10104160:	200d883a 	mov	r6,r4
10104164:	100b883a 	mov	r5,r2
10104168:	e009883a 	mov	r4,fp
1010416c:	01073b80 	call	101073b8 <__pow5mult>
10104170:	d9800317 	ldw	r6,12(sp)
10104174:	102b883a 	mov	r21,r2
10104178:	b981810e 	bge	r23,r6,10104780 <_dtoa_r+0x10a4>
1010417c:	0027883a 	mov	r19,zero
10104180:	a8800417 	ldw	r2,16(r21)
10104184:	05c00804 	movi	r23,32
10104188:	10800104 	addi	r2,r2,4
1010418c:	1085883a 	add	r2,r2,r2
10104190:	1085883a 	add	r2,r2,r2
10104194:	a885883a 	add	r2,r21,r2
10104198:	11000017 	ldw	r4,0(r2)
1010419c:	010706c0 	call	1010706c <__hi0bits>
101041a0:	b885c83a 	sub	r2,r23,r2
101041a4:	1585883a 	add	r2,r2,r22
101041a8:	108007cc 	andi	r2,r2,31
101041ac:	1000b326 	beq	r2,zero,1010447c <_dtoa_r+0xda0>
101041b0:	00c00804 	movi	r3,32
101041b4:	1887c83a 	sub	r3,r3,r2
101041b8:	01000104 	movi	r4,4
101041bc:	20c2cd0e 	bge	r4,r3,10104cf4 <_dtoa_r+0x1618>
101041c0:	00c00704 	movi	r3,28
101041c4:	1885c83a 	sub	r2,r3,r2
101041c8:	d8c00817 	ldw	r3,32(sp)
101041cc:	a0a9883a 	add	r20,r20,r2
101041d0:	b0ad883a 	add	r22,r22,r2
101041d4:	1887883a 	add	r3,r3,r2
101041d8:	d8c00815 	stw	r3,32(sp)
101041dc:	d9800817 	ldw	r6,32(sp)
101041e0:	0180040e 	bge	zero,r6,101041f4 <_dtoa_r+0xb18>
101041e4:	800b883a 	mov	r5,r16
101041e8:	e009883a 	mov	r4,fp
101041ec:	01074f80 	call	101074f8 <__lshift>
101041f0:	1021883a 	mov	r16,r2
101041f4:	0580050e 	bge	zero,r22,1010420c <_dtoa_r+0xb30>
101041f8:	a80b883a 	mov	r5,r21
101041fc:	b00d883a 	mov	r6,r22
10104200:	e009883a 	mov	r4,fp
10104204:	01074f80 	call	101074f8 <__lshift>
10104208:	102b883a 	mov	r21,r2
1010420c:	d9c00e17 	ldw	r7,56(sp)
10104210:	3801211e 	bne	r7,zero,10104698 <_dtoa_r+0xfbc>
10104214:	d9800617 	ldw	r6,24(sp)
10104218:	0181380e 	bge	zero,r6,101046fc <_dtoa_r+0x1020>
1010421c:	d8c00b17 	ldw	r3,44(sp)
10104220:	1800ab1e 	bne	r3,zero,101044d0 <_dtoa_r+0xdf4>
10104224:	dc800717 	ldw	r18,28(sp)
10104228:	dcc00617 	ldw	r19,24(sp)
1010422c:	9029883a 	mov	r20,r18
10104230:	00000206 	br	1010423c <_dtoa_r+0xb60>
10104234:	0106e480 	call	10106e48 <__multadd>
10104238:	1021883a 	mov	r16,r2
1010423c:	a80b883a 	mov	r5,r21
10104240:	8009883a 	mov	r4,r16
10104244:	01034dc0 	call	101034dc <quorem>
10104248:	10800c04 	addi	r2,r2,48
1010424c:	90800005 	stb	r2,0(r18)
10104250:	94800044 	addi	r18,r18,1
10104254:	9507c83a 	sub	r3,r18,r20
10104258:	000f883a 	mov	r7,zero
1010425c:	01800284 	movi	r6,10
10104260:	800b883a 	mov	r5,r16
10104264:	e009883a 	mov	r4,fp
10104268:	1cfff216 	blt	r3,r19,10104234 <__alt_data_end+0xfffe4234>
1010426c:	1011883a 	mov	r8,r2
10104270:	d8800617 	ldw	r2,24(sp)
10104274:	0082370e 	bge	zero,r2,10104b54 <_dtoa_r+0x1478>
10104278:	d9000717 	ldw	r4,28(sp)
1010427c:	0025883a 	mov	r18,zero
10104280:	20af883a 	add	r23,r4,r2
10104284:	01800044 	movi	r6,1
10104288:	800b883a 	mov	r5,r16
1010428c:	e009883a 	mov	r4,fp
10104290:	da001715 	stw	r8,92(sp)
10104294:	01074f80 	call	101074f8 <__lshift>
10104298:	a80b883a 	mov	r5,r21
1010429c:	1009883a 	mov	r4,r2
101042a0:	d8800915 	stw	r2,36(sp)
101042a4:	01076400 	call	10107640 <__mcmp>
101042a8:	da001717 	ldw	r8,92(sp)
101042ac:	0081800e 	bge	zero,r2,101048b0 <_dtoa_r+0x11d4>
101042b0:	b93fffc3 	ldbu	r4,-1(r23)
101042b4:	b8bfffc4 	addi	r2,r23,-1
101042b8:	1007883a 	mov	r3,r2
101042bc:	01800e44 	movi	r6,57
101042c0:	d9c00717 	ldw	r7,28(sp)
101042c4:	00000506 	br	101042dc <_dtoa_r+0xc00>
101042c8:	18ffffc4 	addi	r3,r3,-1
101042cc:	11c12326 	beq	r2,r7,1010475c <_dtoa_r+0x1080>
101042d0:	19000003 	ldbu	r4,0(r3)
101042d4:	102f883a 	mov	r23,r2
101042d8:	10bfffc4 	addi	r2,r2,-1
101042dc:	21403fcc 	andi	r5,r4,255
101042e0:	2940201c 	xori	r5,r5,128
101042e4:	297fe004 	addi	r5,r5,-128
101042e8:	29bff726 	beq	r5,r6,101042c8 <__alt_data_end+0xfffe42c8>
101042ec:	21000044 	addi	r4,r4,1
101042f0:	11000005 	stb	r4,0(r2)
101042f4:	a80b883a 	mov	r5,r21
101042f8:	e009883a 	mov	r4,fp
101042fc:	0106e200 	call	10106e20 <_Bfree>
10104300:	883ea026 	beq	r17,zero,10103d84 <__alt_data_end+0xfffe3d84>
10104304:	90000426 	beq	r18,zero,10104318 <_dtoa_r+0xc3c>
10104308:	94400326 	beq	r18,r17,10104318 <_dtoa_r+0xc3c>
1010430c:	900b883a 	mov	r5,r18
10104310:	e009883a 	mov	r4,fp
10104314:	0106e200 	call	10106e20 <_Bfree>
10104318:	880b883a 	mov	r5,r17
1010431c:	e009883a 	mov	r4,fp
10104320:	0106e200 	call	10106e20 <_Bfree>
10104324:	003e9706 	br	10103d84 <__alt_data_end+0xfffe3d84>
10104328:	01800044 	movi	r6,1
1010432c:	d9800e15 	stw	r6,56(sp)
10104330:	003d9606 	br	1010398c <__alt_data_end+0xfffe398c>
10104334:	d8800817 	ldw	r2,32(sp)
10104338:	d8c00517 	ldw	r3,20(sp)
1010433c:	d8000d15 	stw	zero,52(sp)
10104340:	10c5c83a 	sub	r2,r2,r3
10104344:	00c9c83a 	sub	r4,zero,r3
10104348:	d8800815 	stw	r2,32(sp)
1010434c:	d9000a15 	stw	r4,40(sp)
10104350:	003d9706 	br	101039b0 <__alt_data_end+0xfffe39b0>
10104354:	05adc83a 	sub	r22,zero,r22
10104358:	dd800815 	stw	r22,32(sp)
1010435c:	002d883a 	mov	r22,zero
10104360:	003d8e06 	br	1010399c <__alt_data_end+0xfffe399c>
10104364:	d9000517 	ldw	r4,20(sp)
10104368:	010d4640 	call	1010d464 <__floatsidf>
1010436c:	100d883a 	mov	r6,r2
10104370:	180f883a 	mov	r7,r3
10104374:	a009883a 	mov	r4,r20
10104378:	880b883a 	mov	r5,r17
1010437c:	010c1780 	call	1010c178 <__eqdf2>
10104380:	103d7126 	beq	r2,zero,10103948 <__alt_data_end+0xfffe3948>
10104384:	d9c00517 	ldw	r7,20(sp)
10104388:	39ffffc4 	addi	r7,r7,-1
1010438c:	d9c00515 	stw	r7,20(sp)
10104390:	003d6d06 	br	10103948 <__alt_data_end+0xfffe3948>
10104394:	dd400a17 	ldw	r21,40(sp)
10104398:	dd000817 	ldw	r20,32(sp)
1010439c:	0023883a 	mov	r17,zero
101043a0:	003f4806 	br	101040c4 <__alt_data_end+0xfffe40c4>
101043a4:	10e3c83a 	sub	r17,r2,r3
101043a8:	9448983a 	sll	r4,r18,r17
101043ac:	003d3206 	br	10103878 <__alt_data_end+0xfffe3878>
101043b0:	d8000e15 	stw	zero,56(sp)
101043b4:	003d7506 	br	1010398c <__alt_data_end+0xfffe398c>
101043b8:	b005883a 	mov	r2,r22
101043bc:	003f4506 	br	101040d4 <__alt_data_end+0xfffe40d4>
101043c0:	dc000915 	stw	r16,36(sp)
101043c4:	d9800a17 	ldw	r6,40(sp)
101043c8:	d9400917 	ldw	r5,36(sp)
101043cc:	e009883a 	mov	r4,fp
101043d0:	01073b80 	call	101073b8 <__pow5mult>
101043d4:	1021883a 	mov	r16,r2
101043d8:	003f5a06 	br	10104144 <__alt_data_end+0xfffe4144>
101043dc:	01c00044 	movi	r7,1
101043e0:	d9c00b15 	stw	r7,44(sp)
101043e4:	d8802217 	ldw	r2,136(sp)
101043e8:	0081280e 	bge	zero,r2,1010488c <_dtoa_r+0x11b0>
101043ec:	100d883a 	mov	r6,r2
101043f0:	1021883a 	mov	r16,r2
101043f4:	d8800c15 	stw	r2,48(sp)
101043f8:	d8800615 	stw	r2,24(sp)
101043fc:	003d8806 	br	10103a20 <__alt_data_end+0xfffe3a20>
10104400:	d8800617 	ldw	r2,24(sp)
10104404:	00be9b16 	blt	zero,r2,10103e74 <__alt_data_end+0xfffe3e74>
10104408:	10010f1e 	bne	r2,zero,10104848 <_dtoa_r+0x116c>
1010440c:	880b883a 	mov	r5,r17
10104410:	000d883a 	mov	r6,zero
10104414:	01d00534 	movhi	r7,16404
10104418:	8009883a 	mov	r4,r16
1010441c:	010c3d00 	call	1010c3d0 <__muldf3>
10104420:	900d883a 	mov	r6,r18
10104424:	980f883a 	mov	r7,r19
10104428:	1009883a 	mov	r4,r2
1010442c:	180b883a 	mov	r5,r3
10104430:	010c2000 	call	1010c200 <__gedf2>
10104434:	002b883a 	mov	r21,zero
10104438:	0023883a 	mov	r17,zero
1010443c:	1000bf16 	blt	r2,zero,1010473c <_dtoa_r+0x1060>
10104440:	d9802217 	ldw	r6,136(sp)
10104444:	ddc00717 	ldw	r23,28(sp)
10104448:	018c303a 	nor	r6,zero,r6
1010444c:	d9800515 	stw	r6,20(sp)
10104450:	a80b883a 	mov	r5,r21
10104454:	e009883a 	mov	r4,fp
10104458:	0106e200 	call	10106e20 <_Bfree>
1010445c:	883e4926 	beq	r17,zero,10103d84 <__alt_data_end+0xfffe3d84>
10104460:	003fad06 	br	10104318 <__alt_data_end+0xfffe4318>
10104464:	d9c01117 	ldw	r7,68(sp)
10104468:	3801bc26 	beq	r7,zero,10104b5c <_dtoa_r+0x1480>
1010446c:	10810cc4 	addi	r2,r2,1075
10104470:	dd400a17 	ldw	r21,40(sp)
10104474:	dd000817 	ldw	r20,32(sp)
10104478:	003f0a06 	br	101040a4 <__alt_data_end+0xfffe40a4>
1010447c:	00800704 	movi	r2,28
10104480:	d9000817 	ldw	r4,32(sp)
10104484:	a0a9883a 	add	r20,r20,r2
10104488:	b0ad883a 	add	r22,r22,r2
1010448c:	2089883a 	add	r4,r4,r2
10104490:	d9000815 	stw	r4,32(sp)
10104494:	003f5106 	br	101041dc <__alt_data_end+0xfffe41dc>
10104498:	d8c00317 	ldw	r3,12(sp)
1010449c:	b8c1fc0e 	bge	r23,r3,10104c90 <_dtoa_r+0x15b4>
101044a0:	0027883a 	mov	r19,zero
101044a4:	b805883a 	mov	r2,r23
101044a8:	003f3e06 	br	101041a4 <__alt_data_end+0xfffe41a4>
101044ac:	880b883a 	mov	r5,r17
101044b0:	e009883a 	mov	r4,fp
101044b4:	000f883a 	mov	r7,zero
101044b8:	01800284 	movi	r6,10
101044bc:	0106e480 	call	10106e48 <__multadd>
101044c0:	d9000c17 	ldw	r4,48(sp)
101044c4:	1023883a 	mov	r17,r2
101044c8:	0102040e 	bge	zero,r4,10104cdc <_dtoa_r+0x1600>
101044cc:	d9000615 	stw	r4,24(sp)
101044d0:	0500050e 	bge	zero,r20,101044e8 <_dtoa_r+0xe0c>
101044d4:	880b883a 	mov	r5,r17
101044d8:	a00d883a 	mov	r6,r20
101044dc:	e009883a 	mov	r4,fp
101044e0:	01074f80 	call	101074f8 <__lshift>
101044e4:	1023883a 	mov	r17,r2
101044e8:	9801241e 	bne	r19,zero,1010497c <_dtoa_r+0x12a0>
101044ec:	8829883a 	mov	r20,r17
101044f0:	d9000617 	ldw	r4,24(sp)
101044f4:	dcc00717 	ldw	r19,28(sp)
101044f8:	9480004c 	andi	r18,r18,1
101044fc:	20bfffc4 	addi	r2,r4,-1
10104500:	9885883a 	add	r2,r19,r2
10104504:	d8800415 	stw	r2,16(sp)
10104508:	dc800615 	stw	r18,24(sp)
1010450c:	a80b883a 	mov	r5,r21
10104510:	8009883a 	mov	r4,r16
10104514:	01034dc0 	call	101034dc <quorem>
10104518:	880b883a 	mov	r5,r17
1010451c:	8009883a 	mov	r4,r16
10104520:	102f883a 	mov	r23,r2
10104524:	01076400 	call	10107640 <__mcmp>
10104528:	a80b883a 	mov	r5,r21
1010452c:	a00d883a 	mov	r6,r20
10104530:	e009883a 	mov	r4,fp
10104534:	102d883a 	mov	r22,r2
10104538:	01076a00 	call	101076a0 <__mdiff>
1010453c:	1007883a 	mov	r3,r2
10104540:	10800317 	ldw	r2,12(r2)
10104544:	bc800c04 	addi	r18,r23,48
10104548:	180b883a 	mov	r5,r3
1010454c:	10004e1e 	bne	r2,zero,10104688 <_dtoa_r+0xfac>
10104550:	8009883a 	mov	r4,r16
10104554:	d8c01615 	stw	r3,88(sp)
10104558:	01076400 	call	10107640 <__mcmp>
1010455c:	d8c01617 	ldw	r3,88(sp)
10104560:	e009883a 	mov	r4,fp
10104564:	d8801615 	stw	r2,88(sp)
10104568:	180b883a 	mov	r5,r3
1010456c:	0106e200 	call	10106e20 <_Bfree>
10104570:	d8801617 	ldw	r2,88(sp)
10104574:	1000041e 	bne	r2,zero,10104588 <_dtoa_r+0xeac>
10104578:	d9800317 	ldw	r6,12(sp)
1010457c:	3000021e 	bne	r6,zero,10104588 <_dtoa_r+0xeac>
10104580:	d8c00617 	ldw	r3,24(sp)
10104584:	18003726 	beq	r3,zero,10104664 <_dtoa_r+0xf88>
10104588:	b0002016 	blt	r22,zero,1010460c <_dtoa_r+0xf30>
1010458c:	b000041e 	bne	r22,zero,101045a0 <_dtoa_r+0xec4>
10104590:	d9000317 	ldw	r4,12(sp)
10104594:	2000021e 	bne	r4,zero,101045a0 <_dtoa_r+0xec4>
10104598:	d8c00617 	ldw	r3,24(sp)
1010459c:	18001b26 	beq	r3,zero,1010460c <_dtoa_r+0xf30>
101045a0:	00810716 	blt	zero,r2,101049c0 <_dtoa_r+0x12e4>
101045a4:	d8c00417 	ldw	r3,16(sp)
101045a8:	9d800044 	addi	r22,r19,1
101045ac:	9c800005 	stb	r18,0(r19)
101045b0:	b02f883a 	mov	r23,r22
101045b4:	98c10626 	beq	r19,r3,101049d0 <_dtoa_r+0x12f4>
101045b8:	800b883a 	mov	r5,r16
101045bc:	000f883a 	mov	r7,zero
101045c0:	01800284 	movi	r6,10
101045c4:	e009883a 	mov	r4,fp
101045c8:	0106e480 	call	10106e48 <__multadd>
101045cc:	1021883a 	mov	r16,r2
101045d0:	000f883a 	mov	r7,zero
101045d4:	01800284 	movi	r6,10
101045d8:	880b883a 	mov	r5,r17
101045dc:	e009883a 	mov	r4,fp
101045e0:	8d002526 	beq	r17,r20,10104678 <_dtoa_r+0xf9c>
101045e4:	0106e480 	call	10106e48 <__multadd>
101045e8:	a00b883a 	mov	r5,r20
101045ec:	000f883a 	mov	r7,zero
101045f0:	01800284 	movi	r6,10
101045f4:	e009883a 	mov	r4,fp
101045f8:	1023883a 	mov	r17,r2
101045fc:	0106e480 	call	10106e48 <__multadd>
10104600:	1029883a 	mov	r20,r2
10104604:	b027883a 	mov	r19,r22
10104608:	003fc006 	br	1010450c <__alt_data_end+0xfffe450c>
1010460c:	9011883a 	mov	r8,r18
10104610:	00800e0e 	bge	zero,r2,1010464c <_dtoa_r+0xf70>
10104614:	800b883a 	mov	r5,r16
10104618:	01800044 	movi	r6,1
1010461c:	e009883a 	mov	r4,fp
10104620:	da001715 	stw	r8,92(sp)
10104624:	01074f80 	call	101074f8 <__lshift>
10104628:	a80b883a 	mov	r5,r21
1010462c:	1009883a 	mov	r4,r2
10104630:	1021883a 	mov	r16,r2
10104634:	01076400 	call	10107640 <__mcmp>
10104638:	da001717 	ldw	r8,92(sp)
1010463c:	0081960e 	bge	zero,r2,10104c98 <_dtoa_r+0x15bc>
10104640:	00800e44 	movi	r2,57
10104644:	40817026 	beq	r8,r2,10104c08 <_dtoa_r+0x152c>
10104648:	ba000c44 	addi	r8,r23,49
1010464c:	8825883a 	mov	r18,r17
10104650:	9dc00044 	addi	r23,r19,1
10104654:	9a000005 	stb	r8,0(r19)
10104658:	a023883a 	mov	r17,r20
1010465c:	dc000915 	stw	r16,36(sp)
10104660:	003f2406 	br	101042f4 <__alt_data_end+0xfffe42f4>
10104664:	00800e44 	movi	r2,57
10104668:	9011883a 	mov	r8,r18
1010466c:	90816626 	beq	r18,r2,10104c08 <_dtoa_r+0x152c>
10104670:	05bff516 	blt	zero,r22,10104648 <__alt_data_end+0xfffe4648>
10104674:	003ff506 	br	1010464c <__alt_data_end+0xfffe464c>
10104678:	0106e480 	call	10106e48 <__multadd>
1010467c:	1023883a 	mov	r17,r2
10104680:	1029883a 	mov	r20,r2
10104684:	003fdf06 	br	10104604 <__alt_data_end+0xfffe4604>
10104688:	e009883a 	mov	r4,fp
1010468c:	0106e200 	call	10106e20 <_Bfree>
10104690:	00800044 	movi	r2,1
10104694:	003fbc06 	br	10104588 <__alt_data_end+0xfffe4588>
10104698:	a80b883a 	mov	r5,r21
1010469c:	8009883a 	mov	r4,r16
101046a0:	01076400 	call	10107640 <__mcmp>
101046a4:	103edb0e 	bge	r2,zero,10104214 <__alt_data_end+0xfffe4214>
101046a8:	800b883a 	mov	r5,r16
101046ac:	000f883a 	mov	r7,zero
101046b0:	01800284 	movi	r6,10
101046b4:	e009883a 	mov	r4,fp
101046b8:	0106e480 	call	10106e48 <__multadd>
101046bc:	1021883a 	mov	r16,r2
101046c0:	d8800517 	ldw	r2,20(sp)
101046c4:	d8c00b17 	ldw	r3,44(sp)
101046c8:	10bfffc4 	addi	r2,r2,-1
101046cc:	d8800515 	stw	r2,20(sp)
101046d0:	183f761e 	bne	r3,zero,101044ac <__alt_data_end+0xfffe44ac>
101046d4:	d9000c17 	ldw	r4,48(sp)
101046d8:	0101730e 	bge	zero,r4,10104ca8 <_dtoa_r+0x15cc>
101046dc:	d9000615 	stw	r4,24(sp)
101046e0:	003ed006 	br	10104224 <__alt_data_end+0xfffe4224>
101046e4:	00800084 	movi	r2,2
101046e8:	3081861e 	bne	r6,r2,10104d04 <_dtoa_r+0x1628>
101046ec:	d8000b15 	stw	zero,44(sp)
101046f0:	003f3c06 	br	101043e4 <__alt_data_end+0xfffe43e4>
101046f4:	dc000917 	ldw	r16,36(sp)
101046f8:	003e9206 	br	10104144 <__alt_data_end+0xfffe4144>
101046fc:	d9c00317 	ldw	r7,12(sp)
10104700:	00800084 	movi	r2,2
10104704:	11fec50e 	bge	r2,r7,1010421c <__alt_data_end+0xfffe421c>
10104708:	d9000617 	ldw	r4,24(sp)
1010470c:	20013c1e 	bne	r4,zero,10104c00 <_dtoa_r+0x1524>
10104710:	a80b883a 	mov	r5,r21
10104714:	000f883a 	mov	r7,zero
10104718:	01800144 	movi	r6,5
1010471c:	e009883a 	mov	r4,fp
10104720:	0106e480 	call	10106e48 <__multadd>
10104724:	100b883a 	mov	r5,r2
10104728:	8009883a 	mov	r4,r16
1010472c:	102b883a 	mov	r21,r2
10104730:	01076400 	call	10107640 <__mcmp>
10104734:	dc000915 	stw	r16,36(sp)
10104738:	00bf410e 	bge	zero,r2,10104440 <__alt_data_end+0xfffe4440>
1010473c:	d9c00717 	ldw	r7,28(sp)
10104740:	00800c44 	movi	r2,49
10104744:	38800005 	stb	r2,0(r7)
10104748:	d8800517 	ldw	r2,20(sp)
1010474c:	3dc00044 	addi	r23,r7,1
10104750:	10800044 	addi	r2,r2,1
10104754:	d8800515 	stw	r2,20(sp)
10104758:	003f3d06 	br	10104450 <__alt_data_end+0xfffe4450>
1010475c:	d9800517 	ldw	r6,20(sp)
10104760:	d9c00717 	ldw	r7,28(sp)
10104764:	00800c44 	movi	r2,49
10104768:	31800044 	addi	r6,r6,1
1010476c:	d9800515 	stw	r6,20(sp)
10104770:	38800005 	stb	r2,0(r7)
10104774:	003edf06 	br	101042f4 <__alt_data_end+0xfffe42f4>
10104778:	d8000b15 	stw	zero,44(sp)
1010477c:	003c9f06 	br	101039fc <__alt_data_end+0xfffe39fc>
10104780:	903e7e1e 	bne	r18,zero,1010417c <__alt_data_end+0xfffe417c>
10104784:	00800434 	movhi	r2,16
10104788:	10bfffc4 	addi	r2,r2,-1
1010478c:	9884703a 	and	r2,r19,r2
10104790:	1000ea1e 	bne	r2,zero,10104b3c <_dtoa_r+0x1460>
10104794:	9cdffc2c 	andhi	r19,r19,32752
10104798:	9800e826 	beq	r19,zero,10104b3c <_dtoa_r+0x1460>
1010479c:	d9c00817 	ldw	r7,32(sp)
101047a0:	b5800044 	addi	r22,r22,1
101047a4:	04c00044 	movi	r19,1
101047a8:	39c00044 	addi	r7,r7,1
101047ac:	d9c00815 	stw	r7,32(sp)
101047b0:	d8800d17 	ldw	r2,52(sp)
101047b4:	103e721e 	bne	r2,zero,10104180 <__alt_data_end+0xfffe4180>
101047b8:	00800044 	movi	r2,1
101047bc:	003e7906 	br	101041a4 <__alt_data_end+0xfffe41a4>
101047c0:	8009883a 	mov	r4,r16
101047c4:	010d4640 	call	1010d464 <__floatsidf>
101047c8:	d9800f17 	ldw	r6,60(sp)
101047cc:	d9c01017 	ldw	r7,64(sp)
101047d0:	1009883a 	mov	r4,r2
101047d4:	180b883a 	mov	r5,r3
101047d8:	010c3d00 	call	1010c3d0 <__muldf3>
101047dc:	000d883a 	mov	r6,zero
101047e0:	01d00734 	movhi	r7,16412
101047e4:	1009883a 	mov	r4,r2
101047e8:	180b883a 	mov	r5,r3
101047ec:	010afe40 	call	1010afe4 <__adddf3>
101047f0:	047f3034 	movhi	r17,64704
101047f4:	1021883a 	mov	r16,r2
101047f8:	1c63883a 	add	r17,r3,r17
101047fc:	d9000f17 	ldw	r4,60(sp)
10104800:	d9401017 	ldw	r5,64(sp)
10104804:	000d883a 	mov	r6,zero
10104808:	01d00534 	movhi	r7,16404
1010480c:	010cae80 	call	1010cae8 <__subdf3>
10104810:	800d883a 	mov	r6,r16
10104814:	880f883a 	mov	r7,r17
10104818:	1009883a 	mov	r4,r2
1010481c:	180b883a 	mov	r5,r3
10104820:	102b883a 	mov	r21,r2
10104824:	1829883a 	mov	r20,r3
10104828:	010c2000 	call	1010c200 <__gedf2>
1010482c:	00806c16 	blt	zero,r2,101049e0 <_dtoa_r+0x1304>
10104830:	89e0003c 	xorhi	r7,r17,32768
10104834:	800d883a 	mov	r6,r16
10104838:	a809883a 	mov	r4,r21
1010483c:	a00b883a 	mov	r5,r20
10104840:	010c2dc0 	call	1010c2dc <__ledf2>
10104844:	103d7e0e 	bge	r2,zero,10103e40 <__alt_data_end+0xfffe3e40>
10104848:	002b883a 	mov	r21,zero
1010484c:	0023883a 	mov	r17,zero
10104850:	003efb06 	br	10104440 <__alt_data_end+0xfffe4440>
10104854:	d8800717 	ldw	r2,28(sp)
10104858:	003bd006 	br	1010379c <__alt_data_end+0xfffe379c>
1010485c:	d9000a17 	ldw	r4,40(sp)
10104860:	d9800d17 	ldw	r6,52(sp)
10104864:	dd400a15 	stw	r21,40(sp)
10104868:	a905c83a 	sub	r2,r21,r4
1010486c:	308d883a 	add	r6,r6,r2
10104870:	d9800d15 	stw	r6,52(sp)
10104874:	002b883a 	mov	r21,zero
10104878:	003e0606 	br	10104094 <__alt_data_end+0xfffe4094>
1010487c:	9023883a 	mov	r17,r18
10104880:	9829883a 	mov	r20,r19
10104884:	04000084 	movi	r16,2
10104888:	003c9206 	br	10103ad4 <__alt_data_end+0xfffe3ad4>
1010488c:	04000044 	movi	r16,1
10104890:	dc000c15 	stw	r16,48(sp)
10104894:	dc000615 	stw	r16,24(sp)
10104898:	dc002215 	stw	r16,136(sp)
1010489c:	e0001115 	stw	zero,68(fp)
101048a0:	000b883a 	mov	r5,zero
101048a4:	003c6906 	br	10103a4c <__alt_data_end+0xfffe3a4c>
101048a8:	3021883a 	mov	r16,r6
101048ac:	003ffb06 	br	1010489c <__alt_data_end+0xfffe489c>
101048b0:	1000021e 	bne	r2,zero,101048bc <_dtoa_r+0x11e0>
101048b4:	4200004c 	andi	r8,r8,1
101048b8:	403e7d1e 	bne	r8,zero,101042b0 <__alt_data_end+0xfffe42b0>
101048bc:	01000c04 	movi	r4,48
101048c0:	00000106 	br	101048c8 <_dtoa_r+0x11ec>
101048c4:	102f883a 	mov	r23,r2
101048c8:	b8bfffc4 	addi	r2,r23,-1
101048cc:	10c00007 	ldb	r3,0(r2)
101048d0:	193ffc26 	beq	r3,r4,101048c4 <__alt_data_end+0xfffe48c4>
101048d4:	003e8706 	br	101042f4 <__alt_data_end+0xfffe42f4>
101048d8:	d8800517 	ldw	r2,20(sp)
101048dc:	00a3c83a 	sub	r17,zero,r2
101048e0:	8800a426 	beq	r17,zero,10104b74 <_dtoa_r+0x1498>
101048e4:	888003cc 	andi	r2,r17,15
101048e8:	100490fa 	slli	r2,r2,3
101048ec:	00c40474 	movhi	r3,4113
101048f0:	18c0d104 	addi	r3,r3,836
101048f4:	1885883a 	add	r2,r3,r2
101048f8:	11800017 	ldw	r6,0(r2)
101048fc:	11c00117 	ldw	r7,4(r2)
10104900:	9009883a 	mov	r4,r18
10104904:	980b883a 	mov	r5,r19
10104908:	8823d13a 	srai	r17,r17,4
1010490c:	010c3d00 	call	1010c3d0 <__muldf3>
10104910:	d8800f15 	stw	r2,60(sp)
10104914:	d8c01015 	stw	r3,64(sp)
10104918:	8800e826 	beq	r17,zero,10104cbc <_dtoa_r+0x15e0>
1010491c:	05040474 	movhi	r20,4113
10104920:	a500c704 	addi	r20,r20,796
10104924:	04000084 	movi	r16,2
10104928:	8980004c 	andi	r6,r17,1
1010492c:	1009883a 	mov	r4,r2
10104930:	8823d07a 	srai	r17,r17,1
10104934:	180b883a 	mov	r5,r3
10104938:	30000426 	beq	r6,zero,1010494c <_dtoa_r+0x1270>
1010493c:	a1800017 	ldw	r6,0(r20)
10104940:	a1c00117 	ldw	r7,4(r20)
10104944:	84000044 	addi	r16,r16,1
10104948:	010c3d00 	call	1010c3d0 <__muldf3>
1010494c:	a5000204 	addi	r20,r20,8
10104950:	883ff51e 	bne	r17,zero,10104928 <__alt_data_end+0xfffe4928>
10104954:	d8800f15 	stw	r2,60(sp)
10104958:	d8c01015 	stw	r3,64(sp)
1010495c:	003c7606 	br	10103b38 <__alt_data_end+0xfffe3b38>
10104960:	00c00c04 	movi	r3,48
10104964:	10c00005 	stb	r3,0(r2)
10104968:	d8c00517 	ldw	r3,20(sp)
1010496c:	bd3fffc3 	ldbu	r20,-1(r23)
10104970:	18c00044 	addi	r3,r3,1
10104974:	d8c00515 	stw	r3,20(sp)
10104978:	003db906 	br	10104060 <__alt_data_end+0xfffe4060>
1010497c:	89400117 	ldw	r5,4(r17)
10104980:	e009883a 	mov	r4,fp
10104984:	0106d780 	call	10106d78 <_Balloc>
10104988:	89800417 	ldw	r6,16(r17)
1010498c:	89400304 	addi	r5,r17,12
10104990:	11000304 	addi	r4,r2,12
10104994:	31800084 	addi	r6,r6,2
10104998:	318d883a 	add	r6,r6,r6
1010499c:	318d883a 	add	r6,r6,r6
101049a0:	1027883a 	mov	r19,r2
101049a4:	01069ac0 	call	101069ac <memcpy>
101049a8:	01800044 	movi	r6,1
101049ac:	980b883a 	mov	r5,r19
101049b0:	e009883a 	mov	r4,fp
101049b4:	01074f80 	call	101074f8 <__lshift>
101049b8:	1029883a 	mov	r20,r2
101049bc:	003ecc06 	br	101044f0 <__alt_data_end+0xfffe44f0>
101049c0:	00800e44 	movi	r2,57
101049c4:	90809026 	beq	r18,r2,10104c08 <_dtoa_r+0x152c>
101049c8:	92000044 	addi	r8,r18,1
101049cc:	003f1f06 	br	1010464c <__alt_data_end+0xfffe464c>
101049d0:	9011883a 	mov	r8,r18
101049d4:	8825883a 	mov	r18,r17
101049d8:	a023883a 	mov	r17,r20
101049dc:	003e2906 	br	10104284 <__alt_data_end+0xfffe4284>
101049e0:	002b883a 	mov	r21,zero
101049e4:	0023883a 	mov	r17,zero
101049e8:	003f5406 	br	1010473c <__alt_data_end+0xfffe473c>
101049ec:	61bfffc4 	addi	r6,r12,-1
101049f0:	300490fa 	slli	r2,r6,3
101049f4:	00c40474 	movhi	r3,4113
101049f8:	18c0d104 	addi	r3,r3,836
101049fc:	1885883a 	add	r2,r3,r2
10104a00:	11000017 	ldw	r4,0(r2)
10104a04:	11400117 	ldw	r5,4(r2)
10104a08:	d8800717 	ldw	r2,28(sp)
10104a0c:	880f883a 	mov	r7,r17
10104a10:	d9801215 	stw	r6,72(sp)
10104a14:	800d883a 	mov	r6,r16
10104a18:	db001615 	stw	r12,88(sp)
10104a1c:	15c00044 	addi	r23,r2,1
10104a20:	010c3d00 	call	1010c3d0 <__muldf3>
10104a24:	d9401017 	ldw	r5,64(sp)
10104a28:	d9000f17 	ldw	r4,60(sp)
10104a2c:	d8c01515 	stw	r3,84(sp)
10104a30:	d8801415 	stw	r2,80(sp)
10104a34:	010d3e40 	call	1010d3e4 <__fixdfsi>
10104a38:	1009883a 	mov	r4,r2
10104a3c:	1021883a 	mov	r16,r2
10104a40:	010d4640 	call	1010d464 <__floatsidf>
10104a44:	d9000f17 	ldw	r4,60(sp)
10104a48:	d9401017 	ldw	r5,64(sp)
10104a4c:	100d883a 	mov	r6,r2
10104a50:	180f883a 	mov	r7,r3
10104a54:	010cae80 	call	1010cae8 <__subdf3>
10104a58:	1829883a 	mov	r20,r3
10104a5c:	d8c00717 	ldw	r3,28(sp)
10104a60:	84000c04 	addi	r16,r16,48
10104a64:	1023883a 	mov	r17,r2
10104a68:	1c000005 	stb	r16,0(r3)
10104a6c:	db001617 	ldw	r12,88(sp)
10104a70:	00800044 	movi	r2,1
10104a74:	60802226 	beq	r12,r2,10104b00 <_dtoa_r+0x1424>
10104a78:	d9c00717 	ldw	r7,28(sp)
10104a7c:	8805883a 	mov	r2,r17
10104a80:	b82b883a 	mov	r21,r23
10104a84:	3b19883a 	add	r12,r7,r12
10104a88:	6023883a 	mov	r17,r12
10104a8c:	a007883a 	mov	r3,r20
10104a90:	dc800f15 	stw	r18,60(sp)
10104a94:	000d883a 	mov	r6,zero
10104a98:	01d00934 	movhi	r7,16420
10104a9c:	1009883a 	mov	r4,r2
10104aa0:	180b883a 	mov	r5,r3
10104aa4:	010c3d00 	call	1010c3d0 <__muldf3>
10104aa8:	180b883a 	mov	r5,r3
10104aac:	1009883a 	mov	r4,r2
10104ab0:	1829883a 	mov	r20,r3
10104ab4:	1025883a 	mov	r18,r2
10104ab8:	010d3e40 	call	1010d3e4 <__fixdfsi>
10104abc:	1009883a 	mov	r4,r2
10104ac0:	1021883a 	mov	r16,r2
10104ac4:	010d4640 	call	1010d464 <__floatsidf>
10104ac8:	100d883a 	mov	r6,r2
10104acc:	180f883a 	mov	r7,r3
10104ad0:	9009883a 	mov	r4,r18
10104ad4:	a00b883a 	mov	r5,r20
10104ad8:	84000c04 	addi	r16,r16,48
10104adc:	010cae80 	call	1010cae8 <__subdf3>
10104ae0:	ad400044 	addi	r21,r21,1
10104ae4:	ac3fffc5 	stb	r16,-1(r21)
10104ae8:	ac7fea1e 	bne	r21,r17,10104a94 <__alt_data_end+0xfffe4a94>
10104aec:	1023883a 	mov	r17,r2
10104af0:	d8801217 	ldw	r2,72(sp)
10104af4:	dc800f17 	ldw	r18,60(sp)
10104af8:	1829883a 	mov	r20,r3
10104afc:	b8af883a 	add	r23,r23,r2
10104b00:	d9001417 	ldw	r4,80(sp)
10104b04:	d9401517 	ldw	r5,84(sp)
10104b08:	000d883a 	mov	r6,zero
10104b0c:	01cff834 	movhi	r7,16352
10104b10:	010afe40 	call	1010afe4 <__adddf3>
10104b14:	880d883a 	mov	r6,r17
10104b18:	a00f883a 	mov	r7,r20
10104b1c:	1009883a 	mov	r4,r2
10104b20:	180b883a 	mov	r5,r3
10104b24:	010c2dc0 	call	1010c2dc <__ledf2>
10104b28:	10003e0e 	bge	r2,zero,10104c24 <_dtoa_r+0x1548>
10104b2c:	d9001317 	ldw	r4,76(sp)
10104b30:	bd3fffc3 	ldbu	r20,-1(r23)
10104b34:	d9000515 	stw	r4,20(sp)
10104b38:	003d3b06 	br	10104028 <__alt_data_end+0xfffe4028>
10104b3c:	0027883a 	mov	r19,zero
10104b40:	003f1b06 	br	101047b0 <__alt_data_end+0xfffe47b0>
10104b44:	d8800817 	ldw	r2,32(sp)
10104b48:	11e9c83a 	sub	r20,r2,r7
10104b4c:	0005883a 	mov	r2,zero
10104b50:	003d5406 	br	101040a4 <__alt_data_end+0xfffe40a4>
10104b54:	00800044 	movi	r2,1
10104b58:	003dc706 	br	10104278 <__alt_data_end+0xfffe4278>
10104b5c:	d8c00217 	ldw	r3,8(sp)
10104b60:	00800d84 	movi	r2,54
10104b64:	dd400a17 	ldw	r21,40(sp)
10104b68:	10c5c83a 	sub	r2,r2,r3
10104b6c:	dd000817 	ldw	r20,32(sp)
10104b70:	003d4c06 	br	101040a4 <__alt_data_end+0xfffe40a4>
10104b74:	dc800f15 	stw	r18,60(sp)
10104b78:	dcc01015 	stw	r19,64(sp)
10104b7c:	04000084 	movi	r16,2
10104b80:	003bed06 	br	10103b38 <__alt_data_end+0xfffe3b38>
10104b84:	d9000617 	ldw	r4,24(sp)
10104b88:	203f0d26 	beq	r4,zero,101047c0 <__alt_data_end+0xfffe47c0>
10104b8c:	d9800c17 	ldw	r6,48(sp)
10104b90:	01bcab0e 	bge	zero,r6,10103e40 <__alt_data_end+0xfffe3e40>
10104b94:	d9401017 	ldw	r5,64(sp)
10104b98:	d9000f17 	ldw	r4,60(sp)
10104b9c:	000d883a 	mov	r6,zero
10104ba0:	01d00934 	movhi	r7,16420
10104ba4:	010c3d00 	call	1010c3d0 <__muldf3>
10104ba8:	81000044 	addi	r4,r16,1
10104bac:	d8800f15 	stw	r2,60(sp)
10104bb0:	d8c01015 	stw	r3,64(sp)
10104bb4:	010d4640 	call	1010d464 <__floatsidf>
10104bb8:	d9800f17 	ldw	r6,60(sp)
10104bbc:	d9c01017 	ldw	r7,64(sp)
10104bc0:	1009883a 	mov	r4,r2
10104bc4:	180b883a 	mov	r5,r3
10104bc8:	010c3d00 	call	1010c3d0 <__muldf3>
10104bcc:	01d00734 	movhi	r7,16412
10104bd0:	000d883a 	mov	r6,zero
10104bd4:	1009883a 	mov	r4,r2
10104bd8:	180b883a 	mov	r5,r3
10104bdc:	010afe40 	call	1010afe4 <__adddf3>
10104be0:	d9c00517 	ldw	r7,20(sp)
10104be4:	047f3034 	movhi	r17,64704
10104be8:	1021883a 	mov	r16,r2
10104bec:	39ffffc4 	addi	r7,r7,-1
10104bf0:	d9c01315 	stw	r7,76(sp)
10104bf4:	1c63883a 	add	r17,r3,r17
10104bf8:	db000c17 	ldw	r12,48(sp)
10104bfc:	003bea06 	br	10103ba8 <__alt_data_end+0xfffe3ba8>
10104c00:	dc000915 	stw	r16,36(sp)
10104c04:	003e0e06 	br	10104440 <__alt_data_end+0xfffe4440>
10104c08:	01000e44 	movi	r4,57
10104c0c:	8825883a 	mov	r18,r17
10104c10:	9dc00044 	addi	r23,r19,1
10104c14:	99000005 	stb	r4,0(r19)
10104c18:	a023883a 	mov	r17,r20
10104c1c:	dc000915 	stw	r16,36(sp)
10104c20:	003da406 	br	101042b4 <__alt_data_end+0xfffe42b4>
10104c24:	d9801417 	ldw	r6,80(sp)
10104c28:	d9c01517 	ldw	r7,84(sp)
10104c2c:	0009883a 	mov	r4,zero
10104c30:	014ff834 	movhi	r5,16352
10104c34:	010cae80 	call	1010cae8 <__subdf3>
10104c38:	880d883a 	mov	r6,r17
10104c3c:	a00f883a 	mov	r7,r20
10104c40:	1009883a 	mov	r4,r2
10104c44:	180b883a 	mov	r5,r3
10104c48:	010c2000 	call	1010c200 <__gedf2>
10104c4c:	00bc7c0e 	bge	zero,r2,10103e40 <__alt_data_end+0xfffe3e40>
10104c50:	01000c04 	movi	r4,48
10104c54:	00000106 	br	10104c5c <_dtoa_r+0x1580>
10104c58:	102f883a 	mov	r23,r2
10104c5c:	b8bfffc4 	addi	r2,r23,-1
10104c60:	10c00007 	ldb	r3,0(r2)
10104c64:	193ffc26 	beq	r3,r4,10104c58 <__alt_data_end+0xfffe4c58>
10104c68:	d9801317 	ldw	r6,76(sp)
10104c6c:	d9800515 	stw	r6,20(sp)
10104c70:	003c4406 	br	10103d84 <__alt_data_end+0xfffe3d84>
10104c74:	d9801317 	ldw	r6,76(sp)
10104c78:	d9800515 	stw	r6,20(sp)
10104c7c:	003cea06 	br	10104028 <__alt_data_end+0xfffe4028>
10104c80:	dd800f17 	ldw	r22,60(sp)
10104c84:	dcc01017 	ldw	r19,64(sp)
10104c88:	dc801217 	ldw	r18,72(sp)
10104c8c:	003c6c06 	br	10103e40 <__alt_data_end+0xfffe3e40>
10104c90:	903e031e 	bne	r18,zero,101044a0 <__alt_data_end+0xfffe44a0>
10104c94:	003ebb06 	br	10104784 <__alt_data_end+0xfffe4784>
10104c98:	103e6c1e 	bne	r2,zero,1010464c <__alt_data_end+0xfffe464c>
10104c9c:	4080004c 	andi	r2,r8,1
10104ca0:	103e6a26 	beq	r2,zero,1010464c <__alt_data_end+0xfffe464c>
10104ca4:	003e6606 	br	10104640 <__alt_data_end+0xfffe4640>
10104ca8:	d8c00317 	ldw	r3,12(sp)
10104cac:	00800084 	movi	r2,2
10104cb0:	10c02916 	blt	r2,r3,10104d58 <_dtoa_r+0x167c>
10104cb4:	d9000c17 	ldw	r4,48(sp)
10104cb8:	003e8806 	br	101046dc <__alt_data_end+0xfffe46dc>
10104cbc:	04000084 	movi	r16,2
10104cc0:	003b9d06 	br	10103b38 <__alt_data_end+0xfffe3b38>
10104cc4:	d9001317 	ldw	r4,76(sp)
10104cc8:	d9000515 	stw	r4,20(sp)
10104ccc:	003cd606 	br	10104028 <__alt_data_end+0xfffe4028>
10104cd0:	d8801317 	ldw	r2,76(sp)
10104cd4:	d8800515 	stw	r2,20(sp)
10104cd8:	003c2a06 	br	10103d84 <__alt_data_end+0xfffe3d84>
10104cdc:	d9800317 	ldw	r6,12(sp)
10104ce0:	00800084 	movi	r2,2
10104ce4:	11801516 	blt	r2,r6,10104d3c <_dtoa_r+0x1660>
10104ce8:	d9c00c17 	ldw	r7,48(sp)
10104cec:	d9c00615 	stw	r7,24(sp)
10104cf0:	003df706 	br	101044d0 <__alt_data_end+0xfffe44d0>
10104cf4:	193d3926 	beq	r3,r4,101041dc <__alt_data_end+0xfffe41dc>
10104cf8:	00c00f04 	movi	r3,60
10104cfc:	1885c83a 	sub	r2,r3,r2
10104d00:	003ddf06 	br	10104480 <__alt_data_end+0xfffe4480>
10104d04:	e009883a 	mov	r4,fp
10104d08:	e0001115 	stw	zero,68(fp)
10104d0c:	000b883a 	mov	r5,zero
10104d10:	0106d780 	call	10106d78 <_Balloc>
10104d14:	d8800715 	stw	r2,28(sp)
10104d18:	d8c00717 	ldw	r3,28(sp)
10104d1c:	00bfffc4 	movi	r2,-1
10104d20:	01000044 	movi	r4,1
10104d24:	d8800c15 	stw	r2,48(sp)
10104d28:	e0c01015 	stw	r3,64(fp)
10104d2c:	d9000b15 	stw	r4,44(sp)
10104d30:	d8800615 	stw	r2,24(sp)
10104d34:	d8002215 	stw	zero,136(sp)
10104d38:	003c4106 	br	10103e40 <__alt_data_end+0xfffe3e40>
10104d3c:	d8c00c17 	ldw	r3,48(sp)
10104d40:	d8c00615 	stw	r3,24(sp)
10104d44:	003e7006 	br	10104708 <__alt_data_end+0xfffe4708>
10104d48:	04400044 	movi	r17,1
10104d4c:	003b2006 	br	101039d0 <__alt_data_end+0xfffe39d0>
10104d50:	000b883a 	mov	r5,zero
10104d54:	003b3d06 	br	10103a4c <__alt_data_end+0xfffe3a4c>
10104d58:	d8800c17 	ldw	r2,48(sp)
10104d5c:	d8800615 	stw	r2,24(sp)
10104d60:	003e6906 	br	10104708 <__alt_data_end+0xfffe4708>

10104d64 <__sflush_r>:
10104d64:	2880030b 	ldhu	r2,12(r5)
10104d68:	defffb04 	addi	sp,sp,-20
10104d6c:	dcc00315 	stw	r19,12(sp)
10104d70:	dc400115 	stw	r17,4(sp)
10104d74:	dfc00415 	stw	ra,16(sp)
10104d78:	dc800215 	stw	r18,8(sp)
10104d7c:	dc000015 	stw	r16,0(sp)
10104d80:	10c0020c 	andi	r3,r2,8
10104d84:	2823883a 	mov	r17,r5
10104d88:	2027883a 	mov	r19,r4
10104d8c:	1800311e 	bne	r3,zero,10104e54 <__sflush_r+0xf0>
10104d90:	28c00117 	ldw	r3,4(r5)
10104d94:	10820014 	ori	r2,r2,2048
10104d98:	2880030d 	sth	r2,12(r5)
10104d9c:	00c04b0e 	bge	zero,r3,10104ecc <__sflush_r+0x168>
10104da0:	8a000a17 	ldw	r8,40(r17)
10104da4:	40002326 	beq	r8,zero,10104e34 <__sflush_r+0xd0>
10104da8:	9c000017 	ldw	r16,0(r19)
10104dac:	10c4000c 	andi	r3,r2,4096
10104db0:	98000015 	stw	zero,0(r19)
10104db4:	18004826 	beq	r3,zero,10104ed8 <__sflush_r+0x174>
10104db8:	89801417 	ldw	r6,80(r17)
10104dbc:	10c0010c 	andi	r3,r2,4
10104dc0:	18000626 	beq	r3,zero,10104ddc <__sflush_r+0x78>
10104dc4:	88c00117 	ldw	r3,4(r17)
10104dc8:	88800c17 	ldw	r2,48(r17)
10104dcc:	30cdc83a 	sub	r6,r6,r3
10104dd0:	10000226 	beq	r2,zero,10104ddc <__sflush_r+0x78>
10104dd4:	88800f17 	ldw	r2,60(r17)
10104dd8:	308dc83a 	sub	r6,r6,r2
10104ddc:	89400717 	ldw	r5,28(r17)
10104de0:	000f883a 	mov	r7,zero
10104de4:	9809883a 	mov	r4,r19
10104de8:	403ee83a 	callr	r8
10104dec:	00ffffc4 	movi	r3,-1
10104df0:	10c04426 	beq	r2,r3,10104f04 <__sflush_r+0x1a0>
10104df4:	88c0030b 	ldhu	r3,12(r17)
10104df8:	89000417 	ldw	r4,16(r17)
10104dfc:	88000115 	stw	zero,4(r17)
10104e00:	197dffcc 	andi	r5,r3,63487
10104e04:	8940030d 	sth	r5,12(r17)
10104e08:	89000015 	stw	r4,0(r17)
10104e0c:	18c4000c 	andi	r3,r3,4096
10104e10:	18002c1e 	bne	r3,zero,10104ec4 <__sflush_r+0x160>
10104e14:	89400c17 	ldw	r5,48(r17)
10104e18:	9c000015 	stw	r16,0(r19)
10104e1c:	28000526 	beq	r5,zero,10104e34 <__sflush_r+0xd0>
10104e20:	88801004 	addi	r2,r17,64
10104e24:	28800226 	beq	r5,r2,10104e30 <__sflush_r+0xcc>
10104e28:	9809883a 	mov	r4,r19
10104e2c:	01054d00 	call	101054d0 <_free_r>
10104e30:	88000c15 	stw	zero,48(r17)
10104e34:	0005883a 	mov	r2,zero
10104e38:	dfc00417 	ldw	ra,16(sp)
10104e3c:	dcc00317 	ldw	r19,12(sp)
10104e40:	dc800217 	ldw	r18,8(sp)
10104e44:	dc400117 	ldw	r17,4(sp)
10104e48:	dc000017 	ldw	r16,0(sp)
10104e4c:	dec00504 	addi	sp,sp,20
10104e50:	f800283a 	ret
10104e54:	2c800417 	ldw	r18,16(r5)
10104e58:	903ff626 	beq	r18,zero,10104e34 <__alt_data_end+0xfffe4e34>
10104e5c:	2c000017 	ldw	r16,0(r5)
10104e60:	108000cc 	andi	r2,r2,3
10104e64:	2c800015 	stw	r18,0(r5)
10104e68:	84a1c83a 	sub	r16,r16,r18
10104e6c:	1000131e 	bne	r2,zero,10104ebc <__sflush_r+0x158>
10104e70:	28800517 	ldw	r2,20(r5)
10104e74:	88800215 	stw	r2,8(r17)
10104e78:	04000316 	blt	zero,r16,10104e88 <__sflush_r+0x124>
10104e7c:	003fed06 	br	10104e34 <__alt_data_end+0xfffe4e34>
10104e80:	90a5883a 	add	r18,r18,r2
10104e84:	043feb0e 	bge	zero,r16,10104e34 <__alt_data_end+0xfffe4e34>
10104e88:	88800917 	ldw	r2,36(r17)
10104e8c:	89400717 	ldw	r5,28(r17)
10104e90:	800f883a 	mov	r7,r16
10104e94:	900d883a 	mov	r6,r18
10104e98:	9809883a 	mov	r4,r19
10104e9c:	103ee83a 	callr	r2
10104ea0:	80a1c83a 	sub	r16,r16,r2
10104ea4:	00bff616 	blt	zero,r2,10104e80 <__alt_data_end+0xfffe4e80>
10104ea8:	88c0030b 	ldhu	r3,12(r17)
10104eac:	00bfffc4 	movi	r2,-1
10104eb0:	18c01014 	ori	r3,r3,64
10104eb4:	88c0030d 	sth	r3,12(r17)
10104eb8:	003fdf06 	br	10104e38 <__alt_data_end+0xfffe4e38>
10104ebc:	0005883a 	mov	r2,zero
10104ec0:	003fec06 	br	10104e74 <__alt_data_end+0xfffe4e74>
10104ec4:	88801415 	stw	r2,80(r17)
10104ec8:	003fd206 	br	10104e14 <__alt_data_end+0xfffe4e14>
10104ecc:	28c00f17 	ldw	r3,60(r5)
10104ed0:	00ffb316 	blt	zero,r3,10104da0 <__alt_data_end+0xfffe4da0>
10104ed4:	003fd706 	br	10104e34 <__alt_data_end+0xfffe4e34>
10104ed8:	89400717 	ldw	r5,28(r17)
10104edc:	000d883a 	mov	r6,zero
10104ee0:	01c00044 	movi	r7,1
10104ee4:	9809883a 	mov	r4,r19
10104ee8:	403ee83a 	callr	r8
10104eec:	100d883a 	mov	r6,r2
10104ef0:	00bfffc4 	movi	r2,-1
10104ef4:	30801426 	beq	r6,r2,10104f48 <__sflush_r+0x1e4>
10104ef8:	8880030b 	ldhu	r2,12(r17)
10104efc:	8a000a17 	ldw	r8,40(r17)
10104f00:	003fae06 	br	10104dbc <__alt_data_end+0xfffe4dbc>
10104f04:	98c00017 	ldw	r3,0(r19)
10104f08:	183fba26 	beq	r3,zero,10104df4 <__alt_data_end+0xfffe4df4>
10104f0c:	01000744 	movi	r4,29
10104f10:	19000626 	beq	r3,r4,10104f2c <__sflush_r+0x1c8>
10104f14:	01000584 	movi	r4,22
10104f18:	19000426 	beq	r3,r4,10104f2c <__sflush_r+0x1c8>
10104f1c:	88c0030b 	ldhu	r3,12(r17)
10104f20:	18c01014 	ori	r3,r3,64
10104f24:	88c0030d 	sth	r3,12(r17)
10104f28:	003fc306 	br	10104e38 <__alt_data_end+0xfffe4e38>
10104f2c:	8880030b 	ldhu	r2,12(r17)
10104f30:	88c00417 	ldw	r3,16(r17)
10104f34:	88000115 	stw	zero,4(r17)
10104f38:	10bdffcc 	andi	r2,r2,63487
10104f3c:	8880030d 	sth	r2,12(r17)
10104f40:	88c00015 	stw	r3,0(r17)
10104f44:	003fb306 	br	10104e14 <__alt_data_end+0xfffe4e14>
10104f48:	98800017 	ldw	r2,0(r19)
10104f4c:	103fea26 	beq	r2,zero,10104ef8 <__alt_data_end+0xfffe4ef8>
10104f50:	00c00744 	movi	r3,29
10104f54:	10c00226 	beq	r2,r3,10104f60 <__sflush_r+0x1fc>
10104f58:	00c00584 	movi	r3,22
10104f5c:	10c0031e 	bne	r2,r3,10104f6c <__sflush_r+0x208>
10104f60:	9c000015 	stw	r16,0(r19)
10104f64:	0005883a 	mov	r2,zero
10104f68:	003fb306 	br	10104e38 <__alt_data_end+0xfffe4e38>
10104f6c:	88c0030b 	ldhu	r3,12(r17)
10104f70:	3005883a 	mov	r2,r6
10104f74:	18c01014 	ori	r3,r3,64
10104f78:	88c0030d 	sth	r3,12(r17)
10104f7c:	003fae06 	br	10104e38 <__alt_data_end+0xfffe4e38>

10104f80 <_fflush_r>:
10104f80:	defffd04 	addi	sp,sp,-12
10104f84:	dc000115 	stw	r16,4(sp)
10104f88:	dfc00215 	stw	ra,8(sp)
10104f8c:	2021883a 	mov	r16,r4
10104f90:	20000226 	beq	r4,zero,10104f9c <_fflush_r+0x1c>
10104f94:	20800e17 	ldw	r2,56(r4)
10104f98:	10000c26 	beq	r2,zero,10104fcc <_fflush_r+0x4c>
10104f9c:	2880030f 	ldh	r2,12(r5)
10104fa0:	1000051e 	bne	r2,zero,10104fb8 <_fflush_r+0x38>
10104fa4:	0005883a 	mov	r2,zero
10104fa8:	dfc00217 	ldw	ra,8(sp)
10104fac:	dc000117 	ldw	r16,4(sp)
10104fb0:	dec00304 	addi	sp,sp,12
10104fb4:	f800283a 	ret
10104fb8:	8009883a 	mov	r4,r16
10104fbc:	dfc00217 	ldw	ra,8(sp)
10104fc0:	dc000117 	ldw	r16,4(sp)
10104fc4:	dec00304 	addi	sp,sp,12
10104fc8:	0104d641 	jmpi	10104d64 <__sflush_r>
10104fcc:	d9400015 	stw	r5,0(sp)
10104fd0:	010535c0 	call	1010535c <__sinit>
10104fd4:	d9400017 	ldw	r5,0(sp)
10104fd8:	003ff006 	br	10104f9c <__alt_data_end+0xfffe4f9c>

10104fdc <fflush>:
10104fdc:	20000526 	beq	r4,zero,10104ff4 <fflush+0x18>
10104fe0:	00840474 	movhi	r2,4113
10104fe4:	10881104 	addi	r2,r2,8260
10104fe8:	200b883a 	mov	r5,r4
10104fec:	11000017 	ldw	r4,0(r2)
10104ff0:	0104f801 	jmpi	10104f80 <_fflush_r>
10104ff4:	00840474 	movhi	r2,4113
10104ff8:	10881004 	addi	r2,r2,8256
10104ffc:	11000017 	ldw	r4,0(r2)
10105000:	01440434 	movhi	r5,4112
10105004:	2953e004 	addi	r5,r5,20352
10105008:	0105d601 	jmpi	10105d60 <_fwalk_reent>

1010500c <__fp_unlock>:
1010500c:	0005883a 	mov	r2,zero
10105010:	f800283a 	ret

10105014 <_cleanup_r>:
10105014:	01440474 	movhi	r5,4113
10105018:	29675e04 	addi	r5,r5,-25224
1010501c:	0105d601 	jmpi	10105d60 <_fwalk_reent>

10105020 <__sinit.part.1>:
10105020:	defff704 	addi	sp,sp,-36
10105024:	00c40434 	movhi	r3,4112
10105028:	dfc00815 	stw	ra,32(sp)
1010502c:	ddc00715 	stw	r23,28(sp)
10105030:	dd800615 	stw	r22,24(sp)
10105034:	dd400515 	stw	r21,20(sp)
10105038:	dd000415 	stw	r20,16(sp)
1010503c:	dcc00315 	stw	r19,12(sp)
10105040:	dc800215 	stw	r18,8(sp)
10105044:	dc400115 	stw	r17,4(sp)
10105048:	dc000015 	stw	r16,0(sp)
1010504c:	18d40504 	addi	r3,r3,20500
10105050:	24000117 	ldw	r16,4(r4)
10105054:	20c00f15 	stw	r3,60(r4)
10105058:	2080bb04 	addi	r2,r4,748
1010505c:	00c000c4 	movi	r3,3
10105060:	20c0b915 	stw	r3,740(r4)
10105064:	2080ba15 	stw	r2,744(r4)
10105068:	2000b815 	stw	zero,736(r4)
1010506c:	05c00204 	movi	r23,8
10105070:	00800104 	movi	r2,4
10105074:	2025883a 	mov	r18,r4
10105078:	b80d883a 	mov	r6,r23
1010507c:	81001704 	addi	r4,r16,92
10105080:	000b883a 	mov	r5,zero
10105084:	80000015 	stw	zero,0(r16)
10105088:	80000115 	stw	zero,4(r16)
1010508c:	80000215 	stw	zero,8(r16)
10105090:	8080030d 	sth	r2,12(r16)
10105094:	80001915 	stw	zero,100(r16)
10105098:	8000038d 	sth	zero,14(r16)
1010509c:	80000415 	stw	zero,16(r16)
101050a0:	80000515 	stw	zero,20(r16)
101050a4:	80000615 	stw	zero,24(r16)
101050a8:	0106c500 	call	10106c50 <memset>
101050ac:	05840474 	movhi	r22,4113
101050b0:	94400217 	ldw	r17,8(r18)
101050b4:	05440474 	movhi	r21,4113
101050b8:	05040474 	movhi	r20,4113
101050bc:	04c40474 	movhi	r19,4113
101050c0:	b5a0e804 	addi	r22,r22,-31840
101050c4:	ad60ff04 	addi	r21,r21,-31748
101050c8:	a5211e04 	addi	r20,r20,-31624
101050cc:	9ce13504 	addi	r19,r19,-31532
101050d0:	85800815 	stw	r22,32(r16)
101050d4:	85400915 	stw	r21,36(r16)
101050d8:	85000a15 	stw	r20,40(r16)
101050dc:	84c00b15 	stw	r19,44(r16)
101050e0:	84000715 	stw	r16,28(r16)
101050e4:	00800284 	movi	r2,10
101050e8:	8880030d 	sth	r2,12(r17)
101050ec:	00800044 	movi	r2,1
101050f0:	b80d883a 	mov	r6,r23
101050f4:	89001704 	addi	r4,r17,92
101050f8:	000b883a 	mov	r5,zero
101050fc:	88000015 	stw	zero,0(r17)
10105100:	88000115 	stw	zero,4(r17)
10105104:	88000215 	stw	zero,8(r17)
10105108:	88001915 	stw	zero,100(r17)
1010510c:	8880038d 	sth	r2,14(r17)
10105110:	88000415 	stw	zero,16(r17)
10105114:	88000515 	stw	zero,20(r17)
10105118:	88000615 	stw	zero,24(r17)
1010511c:	0106c500 	call	10106c50 <memset>
10105120:	94000317 	ldw	r16,12(r18)
10105124:	00800484 	movi	r2,18
10105128:	8c400715 	stw	r17,28(r17)
1010512c:	8d800815 	stw	r22,32(r17)
10105130:	8d400915 	stw	r21,36(r17)
10105134:	8d000a15 	stw	r20,40(r17)
10105138:	8cc00b15 	stw	r19,44(r17)
1010513c:	8080030d 	sth	r2,12(r16)
10105140:	00800084 	movi	r2,2
10105144:	80000015 	stw	zero,0(r16)
10105148:	80000115 	stw	zero,4(r16)
1010514c:	80000215 	stw	zero,8(r16)
10105150:	80001915 	stw	zero,100(r16)
10105154:	8080038d 	sth	r2,14(r16)
10105158:	80000415 	stw	zero,16(r16)
1010515c:	80000515 	stw	zero,20(r16)
10105160:	80000615 	stw	zero,24(r16)
10105164:	b80d883a 	mov	r6,r23
10105168:	000b883a 	mov	r5,zero
1010516c:	81001704 	addi	r4,r16,92
10105170:	0106c500 	call	10106c50 <memset>
10105174:	00800044 	movi	r2,1
10105178:	84000715 	stw	r16,28(r16)
1010517c:	85800815 	stw	r22,32(r16)
10105180:	85400915 	stw	r21,36(r16)
10105184:	85000a15 	stw	r20,40(r16)
10105188:	84c00b15 	stw	r19,44(r16)
1010518c:	90800e15 	stw	r2,56(r18)
10105190:	dfc00817 	ldw	ra,32(sp)
10105194:	ddc00717 	ldw	r23,28(sp)
10105198:	dd800617 	ldw	r22,24(sp)
1010519c:	dd400517 	ldw	r21,20(sp)
101051a0:	dd000417 	ldw	r20,16(sp)
101051a4:	dcc00317 	ldw	r19,12(sp)
101051a8:	dc800217 	ldw	r18,8(sp)
101051ac:	dc400117 	ldw	r17,4(sp)
101051b0:	dc000017 	ldw	r16,0(sp)
101051b4:	dec00904 	addi	sp,sp,36
101051b8:	f800283a 	ret

101051bc <__fp_lock>:
101051bc:	0005883a 	mov	r2,zero
101051c0:	f800283a 	ret

101051c4 <__sfmoreglue>:
101051c4:	defffc04 	addi	sp,sp,-16
101051c8:	dc400115 	stw	r17,4(sp)
101051cc:	2c7fffc4 	addi	r17,r5,-1
101051d0:	8c401a24 	muli	r17,r17,104
101051d4:	dc800215 	stw	r18,8(sp)
101051d8:	2825883a 	mov	r18,r5
101051dc:	89401d04 	addi	r5,r17,116
101051e0:	dc000015 	stw	r16,0(sp)
101051e4:	dfc00315 	stw	ra,12(sp)
101051e8:	01060bc0 	call	101060bc <_malloc_r>
101051ec:	1021883a 	mov	r16,r2
101051f0:	10000726 	beq	r2,zero,10105210 <__sfmoreglue+0x4c>
101051f4:	11000304 	addi	r4,r2,12
101051f8:	10000015 	stw	zero,0(r2)
101051fc:	14800115 	stw	r18,4(r2)
10105200:	11000215 	stw	r4,8(r2)
10105204:	89801a04 	addi	r6,r17,104
10105208:	000b883a 	mov	r5,zero
1010520c:	0106c500 	call	10106c50 <memset>
10105210:	8005883a 	mov	r2,r16
10105214:	dfc00317 	ldw	ra,12(sp)
10105218:	dc800217 	ldw	r18,8(sp)
1010521c:	dc400117 	ldw	r17,4(sp)
10105220:	dc000017 	ldw	r16,0(sp)
10105224:	dec00404 	addi	sp,sp,16
10105228:	f800283a 	ret

1010522c <__sfp>:
1010522c:	defffb04 	addi	sp,sp,-20
10105230:	dc000015 	stw	r16,0(sp)
10105234:	04040474 	movhi	r16,4113
10105238:	84081004 	addi	r16,r16,8256
1010523c:	dcc00315 	stw	r19,12(sp)
10105240:	2027883a 	mov	r19,r4
10105244:	81000017 	ldw	r4,0(r16)
10105248:	dfc00415 	stw	ra,16(sp)
1010524c:	dc800215 	stw	r18,8(sp)
10105250:	20800e17 	ldw	r2,56(r4)
10105254:	dc400115 	stw	r17,4(sp)
10105258:	1000021e 	bne	r2,zero,10105264 <__sfp+0x38>
1010525c:	01050200 	call	10105020 <__sinit.part.1>
10105260:	81000017 	ldw	r4,0(r16)
10105264:	2480b804 	addi	r18,r4,736
10105268:	047fffc4 	movi	r17,-1
1010526c:	91000117 	ldw	r4,4(r18)
10105270:	94000217 	ldw	r16,8(r18)
10105274:	213fffc4 	addi	r4,r4,-1
10105278:	20000a16 	blt	r4,zero,101052a4 <__sfp+0x78>
1010527c:	8080030f 	ldh	r2,12(r16)
10105280:	10000c26 	beq	r2,zero,101052b4 <__sfp+0x88>
10105284:	80c01d04 	addi	r3,r16,116
10105288:	00000206 	br	10105294 <__sfp+0x68>
1010528c:	18bfe60f 	ldh	r2,-104(r3)
10105290:	10000826 	beq	r2,zero,101052b4 <__sfp+0x88>
10105294:	213fffc4 	addi	r4,r4,-1
10105298:	1c3ffd04 	addi	r16,r3,-12
1010529c:	18c01a04 	addi	r3,r3,104
101052a0:	247ffa1e 	bne	r4,r17,1010528c <__alt_data_end+0xfffe528c>
101052a4:	90800017 	ldw	r2,0(r18)
101052a8:	10001d26 	beq	r2,zero,10105320 <__sfp+0xf4>
101052ac:	1025883a 	mov	r18,r2
101052b0:	003fee06 	br	1010526c <__alt_data_end+0xfffe526c>
101052b4:	00bfffc4 	movi	r2,-1
101052b8:	8080038d 	sth	r2,14(r16)
101052bc:	00800044 	movi	r2,1
101052c0:	8080030d 	sth	r2,12(r16)
101052c4:	80001915 	stw	zero,100(r16)
101052c8:	80000015 	stw	zero,0(r16)
101052cc:	80000215 	stw	zero,8(r16)
101052d0:	80000115 	stw	zero,4(r16)
101052d4:	80000415 	stw	zero,16(r16)
101052d8:	80000515 	stw	zero,20(r16)
101052dc:	80000615 	stw	zero,24(r16)
101052e0:	01800204 	movi	r6,8
101052e4:	000b883a 	mov	r5,zero
101052e8:	81001704 	addi	r4,r16,92
101052ec:	0106c500 	call	10106c50 <memset>
101052f0:	8005883a 	mov	r2,r16
101052f4:	80000c15 	stw	zero,48(r16)
101052f8:	80000d15 	stw	zero,52(r16)
101052fc:	80001115 	stw	zero,68(r16)
10105300:	80001215 	stw	zero,72(r16)
10105304:	dfc00417 	ldw	ra,16(sp)
10105308:	dcc00317 	ldw	r19,12(sp)
1010530c:	dc800217 	ldw	r18,8(sp)
10105310:	dc400117 	ldw	r17,4(sp)
10105314:	dc000017 	ldw	r16,0(sp)
10105318:	dec00504 	addi	sp,sp,20
1010531c:	f800283a 	ret
10105320:	01400104 	movi	r5,4
10105324:	9809883a 	mov	r4,r19
10105328:	01051c40 	call	101051c4 <__sfmoreglue>
1010532c:	90800015 	stw	r2,0(r18)
10105330:	103fde1e 	bne	r2,zero,101052ac <__alt_data_end+0xfffe52ac>
10105334:	00800304 	movi	r2,12
10105338:	98800015 	stw	r2,0(r19)
1010533c:	0005883a 	mov	r2,zero
10105340:	003ff006 	br	10105304 <__alt_data_end+0xfffe5304>

10105344 <_cleanup>:
10105344:	00840474 	movhi	r2,4113
10105348:	10881004 	addi	r2,r2,8256
1010534c:	11000017 	ldw	r4,0(r2)
10105350:	01440474 	movhi	r5,4113
10105354:	29675e04 	addi	r5,r5,-25224
10105358:	0105d601 	jmpi	10105d60 <_fwalk_reent>

1010535c <__sinit>:
1010535c:	20800e17 	ldw	r2,56(r4)
10105360:	10000126 	beq	r2,zero,10105368 <__sinit+0xc>
10105364:	f800283a 	ret
10105368:	01050201 	jmpi	10105020 <__sinit.part.1>

1010536c <__sfp_lock_acquire>:
1010536c:	f800283a 	ret

10105370 <__sfp_lock_release>:
10105370:	f800283a 	ret

10105374 <__sinit_lock_acquire>:
10105374:	f800283a 	ret

10105378 <__sinit_lock_release>:
10105378:	f800283a 	ret

1010537c <__fp_lock_all>:
1010537c:	00840474 	movhi	r2,4113
10105380:	10881104 	addi	r2,r2,8260
10105384:	11000017 	ldw	r4,0(r2)
10105388:	01440434 	movhi	r5,4112
1010538c:	29546f04 	addi	r5,r5,20924
10105390:	0105c9c1 	jmpi	10105c9c <_fwalk>

10105394 <__fp_unlock_all>:
10105394:	00840474 	movhi	r2,4113
10105398:	10881104 	addi	r2,r2,8260
1010539c:	11000017 	ldw	r4,0(r2)
101053a0:	01440434 	movhi	r5,4112
101053a4:	29540304 	addi	r5,r5,20492
101053a8:	0105c9c1 	jmpi	10105c9c <_fwalk>

101053ac <_malloc_trim_r>:
101053ac:	defffb04 	addi	sp,sp,-20
101053b0:	dcc00315 	stw	r19,12(sp)
101053b4:	04c40474 	movhi	r19,4113
101053b8:	dc800215 	stw	r18,8(sp)
101053bc:	dc400115 	stw	r17,4(sp)
101053c0:	dc000015 	stw	r16,0(sp)
101053c4:	dfc00415 	stw	ra,16(sp)
101053c8:	2821883a 	mov	r16,r5
101053cc:	9cc28204 	addi	r19,r19,2568
101053d0:	2025883a 	mov	r18,r4
101053d4:	010dbc80 	call	1010dbc8 <__malloc_lock>
101053d8:	98800217 	ldw	r2,8(r19)
101053dc:	14400117 	ldw	r17,4(r2)
101053e0:	00bfff04 	movi	r2,-4
101053e4:	88a2703a 	and	r17,r17,r2
101053e8:	8c21c83a 	sub	r16,r17,r16
101053ec:	8403fbc4 	addi	r16,r16,4079
101053f0:	8020d33a 	srli	r16,r16,12
101053f4:	0083ffc4 	movi	r2,4095
101053f8:	843fffc4 	addi	r16,r16,-1
101053fc:	8020933a 	slli	r16,r16,12
10105400:	1400060e 	bge	r2,r16,1010541c <_malloc_trim_r+0x70>
10105404:	000b883a 	mov	r5,zero
10105408:	9009883a 	mov	r4,r18
1010540c:	010834c0 	call	1010834c <_sbrk_r>
10105410:	98c00217 	ldw	r3,8(r19)
10105414:	1c47883a 	add	r3,r3,r17
10105418:	10c00a26 	beq	r2,r3,10105444 <_malloc_trim_r+0x98>
1010541c:	9009883a 	mov	r4,r18
10105420:	010dbec0 	call	1010dbec <__malloc_unlock>
10105424:	0005883a 	mov	r2,zero
10105428:	dfc00417 	ldw	ra,16(sp)
1010542c:	dcc00317 	ldw	r19,12(sp)
10105430:	dc800217 	ldw	r18,8(sp)
10105434:	dc400117 	ldw	r17,4(sp)
10105438:	dc000017 	ldw	r16,0(sp)
1010543c:	dec00504 	addi	sp,sp,20
10105440:	f800283a 	ret
10105444:	040bc83a 	sub	r5,zero,r16
10105448:	9009883a 	mov	r4,r18
1010544c:	010834c0 	call	1010834c <_sbrk_r>
10105450:	00ffffc4 	movi	r3,-1
10105454:	10c00d26 	beq	r2,r3,1010548c <_malloc_trim_r+0xe0>
10105458:	00c40474 	movhi	r3,4113
1010545c:	18cf1704 	addi	r3,r3,15452
10105460:	18800017 	ldw	r2,0(r3)
10105464:	99000217 	ldw	r4,8(r19)
10105468:	8c23c83a 	sub	r17,r17,r16
1010546c:	8c400054 	ori	r17,r17,1
10105470:	1421c83a 	sub	r16,r2,r16
10105474:	24400115 	stw	r17,4(r4)
10105478:	9009883a 	mov	r4,r18
1010547c:	1c000015 	stw	r16,0(r3)
10105480:	010dbec0 	call	1010dbec <__malloc_unlock>
10105484:	00800044 	movi	r2,1
10105488:	003fe706 	br	10105428 <__alt_data_end+0xfffe5428>
1010548c:	000b883a 	mov	r5,zero
10105490:	9009883a 	mov	r4,r18
10105494:	010834c0 	call	1010834c <_sbrk_r>
10105498:	99000217 	ldw	r4,8(r19)
1010549c:	014003c4 	movi	r5,15
101054a0:	1107c83a 	sub	r3,r2,r4
101054a4:	28ffdd0e 	bge	r5,r3,1010541c <__alt_data_end+0xfffe541c>
101054a8:	01440474 	movhi	r5,4113
101054ac:	29481304 	addi	r5,r5,8268
101054b0:	29400017 	ldw	r5,0(r5)
101054b4:	18c00054 	ori	r3,r3,1
101054b8:	20c00115 	stw	r3,4(r4)
101054bc:	00c40474 	movhi	r3,4113
101054c0:	1145c83a 	sub	r2,r2,r5
101054c4:	18cf1704 	addi	r3,r3,15452
101054c8:	18800015 	stw	r2,0(r3)
101054cc:	003fd306 	br	1010541c <__alt_data_end+0xfffe541c>

101054d0 <_free_r>:
101054d0:	28004126 	beq	r5,zero,101055d8 <_free_r+0x108>
101054d4:	defffd04 	addi	sp,sp,-12
101054d8:	dc400115 	stw	r17,4(sp)
101054dc:	dc000015 	stw	r16,0(sp)
101054e0:	2023883a 	mov	r17,r4
101054e4:	2821883a 	mov	r16,r5
101054e8:	dfc00215 	stw	ra,8(sp)
101054ec:	010dbc80 	call	1010dbc8 <__malloc_lock>
101054f0:	81ffff17 	ldw	r7,-4(r16)
101054f4:	00bfff84 	movi	r2,-2
101054f8:	01040474 	movhi	r4,4113
101054fc:	81bffe04 	addi	r6,r16,-8
10105500:	3884703a 	and	r2,r7,r2
10105504:	21028204 	addi	r4,r4,2568
10105508:	308b883a 	add	r5,r6,r2
1010550c:	2a400117 	ldw	r9,4(r5)
10105510:	22000217 	ldw	r8,8(r4)
10105514:	00ffff04 	movi	r3,-4
10105518:	48c6703a 	and	r3,r9,r3
1010551c:	2a005726 	beq	r5,r8,1010567c <_free_r+0x1ac>
10105520:	28c00115 	stw	r3,4(r5)
10105524:	39c0004c 	andi	r7,r7,1
10105528:	3800091e 	bne	r7,zero,10105550 <_free_r+0x80>
1010552c:	823ffe17 	ldw	r8,-8(r16)
10105530:	22400204 	addi	r9,r4,8
10105534:	320dc83a 	sub	r6,r6,r8
10105538:	31c00217 	ldw	r7,8(r6)
1010553c:	1205883a 	add	r2,r2,r8
10105540:	3a406526 	beq	r7,r9,101056d8 <_free_r+0x208>
10105544:	32000317 	ldw	r8,12(r6)
10105548:	3a000315 	stw	r8,12(r7)
1010554c:	41c00215 	stw	r7,8(r8)
10105550:	28cf883a 	add	r7,r5,r3
10105554:	39c00117 	ldw	r7,4(r7)
10105558:	39c0004c 	andi	r7,r7,1
1010555c:	38003a26 	beq	r7,zero,10105648 <_free_r+0x178>
10105560:	10c00054 	ori	r3,r2,1
10105564:	30c00115 	stw	r3,4(r6)
10105568:	3087883a 	add	r3,r6,r2
1010556c:	18800015 	stw	r2,0(r3)
10105570:	00c07fc4 	movi	r3,511
10105574:	18801936 	bltu	r3,r2,101055dc <_free_r+0x10c>
10105578:	1004d0fa 	srli	r2,r2,3
1010557c:	01c00044 	movi	r7,1
10105580:	21400117 	ldw	r5,4(r4)
10105584:	10c00044 	addi	r3,r2,1
10105588:	18c7883a 	add	r3,r3,r3
1010558c:	1005d0ba 	srai	r2,r2,2
10105590:	18c7883a 	add	r3,r3,r3
10105594:	18c7883a 	add	r3,r3,r3
10105598:	1907883a 	add	r3,r3,r4
1010559c:	3884983a 	sll	r2,r7,r2
101055a0:	19c00017 	ldw	r7,0(r3)
101055a4:	1a3ffe04 	addi	r8,r3,-8
101055a8:	1144b03a 	or	r2,r2,r5
101055ac:	32000315 	stw	r8,12(r6)
101055b0:	31c00215 	stw	r7,8(r6)
101055b4:	20800115 	stw	r2,4(r4)
101055b8:	19800015 	stw	r6,0(r3)
101055bc:	39800315 	stw	r6,12(r7)
101055c0:	8809883a 	mov	r4,r17
101055c4:	dfc00217 	ldw	ra,8(sp)
101055c8:	dc400117 	ldw	r17,4(sp)
101055cc:	dc000017 	ldw	r16,0(sp)
101055d0:	dec00304 	addi	sp,sp,12
101055d4:	010dbec1 	jmpi	1010dbec <__malloc_unlock>
101055d8:	f800283a 	ret
101055dc:	100ad27a 	srli	r5,r2,9
101055e0:	00c00104 	movi	r3,4
101055e4:	19404a36 	bltu	r3,r5,10105710 <_free_r+0x240>
101055e8:	100ad1ba 	srli	r5,r2,6
101055ec:	28c00e44 	addi	r3,r5,57
101055f0:	18c7883a 	add	r3,r3,r3
101055f4:	29400e04 	addi	r5,r5,56
101055f8:	18c7883a 	add	r3,r3,r3
101055fc:	18c7883a 	add	r3,r3,r3
10105600:	1909883a 	add	r4,r3,r4
10105604:	20c00017 	ldw	r3,0(r4)
10105608:	01c40474 	movhi	r7,4113
1010560c:	213ffe04 	addi	r4,r4,-8
10105610:	39c28204 	addi	r7,r7,2568
10105614:	20c04426 	beq	r4,r3,10105728 <_free_r+0x258>
10105618:	01ffff04 	movi	r7,-4
1010561c:	19400117 	ldw	r5,4(r3)
10105620:	29ca703a 	and	r5,r5,r7
10105624:	1140022e 	bgeu	r2,r5,10105630 <_free_r+0x160>
10105628:	18c00217 	ldw	r3,8(r3)
1010562c:	20fffb1e 	bne	r4,r3,1010561c <__alt_data_end+0xfffe561c>
10105630:	19000317 	ldw	r4,12(r3)
10105634:	31000315 	stw	r4,12(r6)
10105638:	30c00215 	stw	r3,8(r6)
1010563c:	21800215 	stw	r6,8(r4)
10105640:	19800315 	stw	r6,12(r3)
10105644:	003fde06 	br	101055c0 <__alt_data_end+0xfffe55c0>
10105648:	29c00217 	ldw	r7,8(r5)
1010564c:	10c5883a 	add	r2,r2,r3
10105650:	00c40474 	movhi	r3,4113
10105654:	18c28404 	addi	r3,r3,2576
10105658:	38c03b26 	beq	r7,r3,10105748 <_free_r+0x278>
1010565c:	2a000317 	ldw	r8,12(r5)
10105660:	11400054 	ori	r5,r2,1
10105664:	3087883a 	add	r3,r6,r2
10105668:	3a000315 	stw	r8,12(r7)
1010566c:	41c00215 	stw	r7,8(r8)
10105670:	31400115 	stw	r5,4(r6)
10105674:	18800015 	stw	r2,0(r3)
10105678:	003fbd06 	br	10105570 <__alt_data_end+0xfffe5570>
1010567c:	39c0004c 	andi	r7,r7,1
10105680:	10c5883a 	add	r2,r2,r3
10105684:	3800071e 	bne	r7,zero,101056a4 <_free_r+0x1d4>
10105688:	81fffe17 	ldw	r7,-8(r16)
1010568c:	31cdc83a 	sub	r6,r6,r7
10105690:	30c00317 	ldw	r3,12(r6)
10105694:	31400217 	ldw	r5,8(r6)
10105698:	11c5883a 	add	r2,r2,r7
1010569c:	28c00315 	stw	r3,12(r5)
101056a0:	19400215 	stw	r5,8(r3)
101056a4:	10c00054 	ori	r3,r2,1
101056a8:	30c00115 	stw	r3,4(r6)
101056ac:	00c40474 	movhi	r3,4113
101056b0:	18c81404 	addi	r3,r3,8272
101056b4:	18c00017 	ldw	r3,0(r3)
101056b8:	21800215 	stw	r6,8(r4)
101056bc:	10ffc036 	bltu	r2,r3,101055c0 <__alt_data_end+0xfffe55c0>
101056c0:	00840474 	movhi	r2,4113
101056c4:	108f0e04 	addi	r2,r2,15416
101056c8:	11400017 	ldw	r5,0(r2)
101056cc:	8809883a 	mov	r4,r17
101056d0:	01053ac0 	call	101053ac <_malloc_trim_r>
101056d4:	003fba06 	br	101055c0 <__alt_data_end+0xfffe55c0>
101056d8:	28c9883a 	add	r4,r5,r3
101056dc:	21000117 	ldw	r4,4(r4)
101056e0:	2100004c 	andi	r4,r4,1
101056e4:	2000391e 	bne	r4,zero,101057cc <_free_r+0x2fc>
101056e8:	29c00217 	ldw	r7,8(r5)
101056ec:	29000317 	ldw	r4,12(r5)
101056f0:	1885883a 	add	r2,r3,r2
101056f4:	10c00054 	ori	r3,r2,1
101056f8:	39000315 	stw	r4,12(r7)
101056fc:	21c00215 	stw	r7,8(r4)
10105700:	30c00115 	stw	r3,4(r6)
10105704:	308d883a 	add	r6,r6,r2
10105708:	30800015 	stw	r2,0(r6)
1010570c:	003fac06 	br	101055c0 <__alt_data_end+0xfffe55c0>
10105710:	00c00504 	movi	r3,20
10105714:	19401536 	bltu	r3,r5,1010576c <_free_r+0x29c>
10105718:	28c01704 	addi	r3,r5,92
1010571c:	18c7883a 	add	r3,r3,r3
10105720:	294016c4 	addi	r5,r5,91
10105724:	003fb406 	br	101055f8 <__alt_data_end+0xfffe55f8>
10105728:	280bd0ba 	srai	r5,r5,2
1010572c:	00c00044 	movi	r3,1
10105730:	38800117 	ldw	r2,4(r7)
10105734:	194a983a 	sll	r5,r3,r5
10105738:	2007883a 	mov	r3,r4
1010573c:	2884b03a 	or	r2,r5,r2
10105740:	38800115 	stw	r2,4(r7)
10105744:	003fbb06 	br	10105634 <__alt_data_end+0xfffe5634>
10105748:	21800515 	stw	r6,20(r4)
1010574c:	21800415 	stw	r6,16(r4)
10105750:	10c00054 	ori	r3,r2,1
10105754:	31c00315 	stw	r7,12(r6)
10105758:	31c00215 	stw	r7,8(r6)
1010575c:	30c00115 	stw	r3,4(r6)
10105760:	308d883a 	add	r6,r6,r2
10105764:	30800015 	stw	r2,0(r6)
10105768:	003f9506 	br	101055c0 <__alt_data_end+0xfffe55c0>
1010576c:	00c01504 	movi	r3,84
10105770:	19400536 	bltu	r3,r5,10105788 <_free_r+0x2b8>
10105774:	100ad33a 	srli	r5,r2,12
10105778:	28c01bc4 	addi	r3,r5,111
1010577c:	18c7883a 	add	r3,r3,r3
10105780:	29401b84 	addi	r5,r5,110
10105784:	003f9c06 	br	101055f8 <__alt_data_end+0xfffe55f8>
10105788:	00c05504 	movi	r3,340
1010578c:	19400536 	bltu	r3,r5,101057a4 <_free_r+0x2d4>
10105790:	100ad3fa 	srli	r5,r2,15
10105794:	28c01e04 	addi	r3,r5,120
10105798:	18c7883a 	add	r3,r3,r3
1010579c:	29401dc4 	addi	r5,r5,119
101057a0:	003f9506 	br	101055f8 <__alt_data_end+0xfffe55f8>
101057a4:	00c15504 	movi	r3,1364
101057a8:	19400536 	bltu	r3,r5,101057c0 <_free_r+0x2f0>
101057ac:	100ad4ba 	srli	r5,r2,18
101057b0:	28c01f44 	addi	r3,r5,125
101057b4:	18c7883a 	add	r3,r3,r3
101057b8:	29401f04 	addi	r5,r5,124
101057bc:	003f8e06 	br	101055f8 <__alt_data_end+0xfffe55f8>
101057c0:	00c03f84 	movi	r3,254
101057c4:	01401f84 	movi	r5,126
101057c8:	003f8b06 	br	101055f8 <__alt_data_end+0xfffe55f8>
101057cc:	10c00054 	ori	r3,r2,1
101057d0:	30c00115 	stw	r3,4(r6)
101057d4:	308d883a 	add	r6,r6,r2
101057d8:	30800015 	stw	r2,0(r6)
101057dc:	003f7806 	br	101055c0 <__alt_data_end+0xfffe55c0>

101057e0 <__sfvwrite_r>:
101057e0:	30800217 	ldw	r2,8(r6)
101057e4:	10006726 	beq	r2,zero,10105984 <__sfvwrite_r+0x1a4>
101057e8:	28c0030b 	ldhu	r3,12(r5)
101057ec:	defff404 	addi	sp,sp,-48
101057f0:	dd400715 	stw	r21,28(sp)
101057f4:	dd000615 	stw	r20,24(sp)
101057f8:	dc000215 	stw	r16,8(sp)
101057fc:	dfc00b15 	stw	ra,44(sp)
10105800:	df000a15 	stw	fp,40(sp)
10105804:	ddc00915 	stw	r23,36(sp)
10105808:	dd800815 	stw	r22,32(sp)
1010580c:	dcc00515 	stw	r19,20(sp)
10105810:	dc800415 	stw	r18,16(sp)
10105814:	dc400315 	stw	r17,12(sp)
10105818:	1880020c 	andi	r2,r3,8
1010581c:	2821883a 	mov	r16,r5
10105820:	202b883a 	mov	r21,r4
10105824:	3029883a 	mov	r20,r6
10105828:	10002726 	beq	r2,zero,101058c8 <__sfvwrite_r+0xe8>
1010582c:	28800417 	ldw	r2,16(r5)
10105830:	10002526 	beq	r2,zero,101058c8 <__sfvwrite_r+0xe8>
10105834:	1880008c 	andi	r2,r3,2
10105838:	a4400017 	ldw	r17,0(r20)
1010583c:	10002a26 	beq	r2,zero,101058e8 <__sfvwrite_r+0x108>
10105840:	05a00034 	movhi	r22,32768
10105844:	0027883a 	mov	r19,zero
10105848:	0025883a 	mov	r18,zero
1010584c:	b5bf0004 	addi	r22,r22,-1024
10105850:	980d883a 	mov	r6,r19
10105854:	a809883a 	mov	r4,r21
10105858:	90004626 	beq	r18,zero,10105974 <__sfvwrite_r+0x194>
1010585c:	900f883a 	mov	r7,r18
10105860:	b480022e 	bgeu	r22,r18,1010586c <__sfvwrite_r+0x8c>
10105864:	01e00034 	movhi	r7,32768
10105868:	39ff0004 	addi	r7,r7,-1024
1010586c:	80800917 	ldw	r2,36(r16)
10105870:	81400717 	ldw	r5,28(r16)
10105874:	103ee83a 	callr	r2
10105878:	0080570e 	bge	zero,r2,101059d8 <__sfvwrite_r+0x1f8>
1010587c:	a0c00217 	ldw	r3,8(r20)
10105880:	98a7883a 	add	r19,r19,r2
10105884:	90a5c83a 	sub	r18,r18,r2
10105888:	1885c83a 	sub	r2,r3,r2
1010588c:	a0800215 	stw	r2,8(r20)
10105890:	103fef1e 	bne	r2,zero,10105850 <__alt_data_end+0xfffe5850>
10105894:	0005883a 	mov	r2,zero
10105898:	dfc00b17 	ldw	ra,44(sp)
1010589c:	df000a17 	ldw	fp,40(sp)
101058a0:	ddc00917 	ldw	r23,36(sp)
101058a4:	dd800817 	ldw	r22,32(sp)
101058a8:	dd400717 	ldw	r21,28(sp)
101058ac:	dd000617 	ldw	r20,24(sp)
101058b0:	dcc00517 	ldw	r19,20(sp)
101058b4:	dc800417 	ldw	r18,16(sp)
101058b8:	dc400317 	ldw	r17,12(sp)
101058bc:	dc000217 	ldw	r16,8(sp)
101058c0:	dec00c04 	addi	sp,sp,48
101058c4:	f800283a 	ret
101058c8:	800b883a 	mov	r5,r16
101058cc:	a809883a 	mov	r4,r21
101058d0:	01033880 	call	10103388 <__swsetup_r>
101058d4:	1000eb1e 	bne	r2,zero,10105c84 <__sfvwrite_r+0x4a4>
101058d8:	80c0030b 	ldhu	r3,12(r16)
101058dc:	a4400017 	ldw	r17,0(r20)
101058e0:	1880008c 	andi	r2,r3,2
101058e4:	103fd61e 	bne	r2,zero,10105840 <__alt_data_end+0xfffe5840>
101058e8:	1880004c 	andi	r2,r3,1
101058ec:	10003f1e 	bne	r2,zero,101059ec <__sfvwrite_r+0x20c>
101058f0:	0039883a 	mov	fp,zero
101058f4:	0025883a 	mov	r18,zero
101058f8:	90001a26 	beq	r18,zero,10105964 <__sfvwrite_r+0x184>
101058fc:	1880800c 	andi	r2,r3,512
10105900:	84c00217 	ldw	r19,8(r16)
10105904:	10002126 	beq	r2,zero,1010598c <__sfvwrite_r+0x1ac>
10105908:	982f883a 	mov	r23,r19
1010590c:	94c09336 	bltu	r18,r19,10105b5c <__sfvwrite_r+0x37c>
10105910:	1881200c 	andi	r2,r3,1152
10105914:	10009e1e 	bne	r2,zero,10105b90 <__sfvwrite_r+0x3b0>
10105918:	81000017 	ldw	r4,0(r16)
1010591c:	b80d883a 	mov	r6,r23
10105920:	e00b883a 	mov	r5,fp
10105924:	0106af40 	call	10106af4 <memmove>
10105928:	80c00217 	ldw	r3,8(r16)
1010592c:	81000017 	ldw	r4,0(r16)
10105930:	9005883a 	mov	r2,r18
10105934:	1ce7c83a 	sub	r19,r3,r19
10105938:	25cf883a 	add	r7,r4,r23
1010593c:	84c00215 	stw	r19,8(r16)
10105940:	81c00015 	stw	r7,0(r16)
10105944:	a0c00217 	ldw	r3,8(r20)
10105948:	e0b9883a 	add	fp,fp,r2
1010594c:	90a5c83a 	sub	r18,r18,r2
10105950:	18a7c83a 	sub	r19,r3,r2
10105954:	a4c00215 	stw	r19,8(r20)
10105958:	983fce26 	beq	r19,zero,10105894 <__alt_data_end+0xfffe5894>
1010595c:	80c0030b 	ldhu	r3,12(r16)
10105960:	903fe61e 	bne	r18,zero,101058fc <__alt_data_end+0xfffe58fc>
10105964:	8f000017 	ldw	fp,0(r17)
10105968:	8c800117 	ldw	r18,4(r17)
1010596c:	8c400204 	addi	r17,r17,8
10105970:	003fe106 	br	101058f8 <__alt_data_end+0xfffe58f8>
10105974:	8cc00017 	ldw	r19,0(r17)
10105978:	8c800117 	ldw	r18,4(r17)
1010597c:	8c400204 	addi	r17,r17,8
10105980:	003fb306 	br	10105850 <__alt_data_end+0xfffe5850>
10105984:	0005883a 	mov	r2,zero
10105988:	f800283a 	ret
1010598c:	81000017 	ldw	r4,0(r16)
10105990:	80800417 	ldw	r2,16(r16)
10105994:	11005736 	bltu	r2,r4,10105af4 <__sfvwrite_r+0x314>
10105998:	85c00517 	ldw	r23,20(r16)
1010599c:	95c05536 	bltu	r18,r23,10105af4 <__sfvwrite_r+0x314>
101059a0:	00a00034 	movhi	r2,32768
101059a4:	10bfffc4 	addi	r2,r2,-1
101059a8:	9009883a 	mov	r4,r18
101059ac:	1480012e 	bgeu	r2,r18,101059b4 <__sfvwrite_r+0x1d4>
101059b0:	1009883a 	mov	r4,r2
101059b4:	b80b883a 	mov	r5,r23
101059b8:	0100d2c0 	call	10100d2c <__divsi3>
101059bc:	15cf383a 	mul	r7,r2,r23
101059c0:	81400717 	ldw	r5,28(r16)
101059c4:	80800917 	ldw	r2,36(r16)
101059c8:	e00d883a 	mov	r6,fp
101059cc:	a809883a 	mov	r4,r21
101059d0:	103ee83a 	callr	r2
101059d4:	00bfdb16 	blt	zero,r2,10105944 <__alt_data_end+0xfffe5944>
101059d8:	8080030b 	ldhu	r2,12(r16)
101059dc:	10801014 	ori	r2,r2,64
101059e0:	8080030d 	sth	r2,12(r16)
101059e4:	00bfffc4 	movi	r2,-1
101059e8:	003fab06 	br	10105898 <__alt_data_end+0xfffe5898>
101059ec:	0027883a 	mov	r19,zero
101059f0:	0011883a 	mov	r8,zero
101059f4:	0039883a 	mov	fp,zero
101059f8:	0025883a 	mov	r18,zero
101059fc:	90001f26 	beq	r18,zero,10105a7c <__sfvwrite_r+0x29c>
10105a00:	40005a26 	beq	r8,zero,10105b6c <__sfvwrite_r+0x38c>
10105a04:	982d883a 	mov	r22,r19
10105a08:	94c0012e 	bgeu	r18,r19,10105a10 <__sfvwrite_r+0x230>
10105a0c:	902d883a 	mov	r22,r18
10105a10:	81000017 	ldw	r4,0(r16)
10105a14:	80800417 	ldw	r2,16(r16)
10105a18:	b02f883a 	mov	r23,r22
10105a1c:	81c00517 	ldw	r7,20(r16)
10105a20:	1100032e 	bgeu	r2,r4,10105a30 <__sfvwrite_r+0x250>
10105a24:	80c00217 	ldw	r3,8(r16)
10105a28:	38c7883a 	add	r3,r7,r3
10105a2c:	1d801816 	blt	r3,r22,10105a90 <__sfvwrite_r+0x2b0>
10105a30:	b1c03e16 	blt	r22,r7,10105b2c <__sfvwrite_r+0x34c>
10105a34:	80800917 	ldw	r2,36(r16)
10105a38:	81400717 	ldw	r5,28(r16)
10105a3c:	e00d883a 	mov	r6,fp
10105a40:	da000115 	stw	r8,4(sp)
10105a44:	a809883a 	mov	r4,r21
10105a48:	103ee83a 	callr	r2
10105a4c:	102f883a 	mov	r23,r2
10105a50:	da000117 	ldw	r8,4(sp)
10105a54:	00bfe00e 	bge	zero,r2,101059d8 <__alt_data_end+0xfffe59d8>
10105a58:	9de7c83a 	sub	r19,r19,r23
10105a5c:	98001f26 	beq	r19,zero,10105adc <__sfvwrite_r+0x2fc>
10105a60:	a0800217 	ldw	r2,8(r20)
10105a64:	e5f9883a 	add	fp,fp,r23
10105a68:	95e5c83a 	sub	r18,r18,r23
10105a6c:	15efc83a 	sub	r23,r2,r23
10105a70:	a5c00215 	stw	r23,8(r20)
10105a74:	b83f8726 	beq	r23,zero,10105894 <__alt_data_end+0xfffe5894>
10105a78:	903fe11e 	bne	r18,zero,10105a00 <__alt_data_end+0xfffe5a00>
10105a7c:	8f000017 	ldw	fp,0(r17)
10105a80:	8c800117 	ldw	r18,4(r17)
10105a84:	0011883a 	mov	r8,zero
10105a88:	8c400204 	addi	r17,r17,8
10105a8c:	003fdb06 	br	101059fc <__alt_data_end+0xfffe59fc>
10105a90:	180d883a 	mov	r6,r3
10105a94:	e00b883a 	mov	r5,fp
10105a98:	da000115 	stw	r8,4(sp)
10105a9c:	d8c00015 	stw	r3,0(sp)
10105aa0:	0106af40 	call	10106af4 <memmove>
10105aa4:	d8c00017 	ldw	r3,0(sp)
10105aa8:	80800017 	ldw	r2,0(r16)
10105aac:	800b883a 	mov	r5,r16
10105ab0:	a809883a 	mov	r4,r21
10105ab4:	10c5883a 	add	r2,r2,r3
10105ab8:	80800015 	stw	r2,0(r16)
10105abc:	d8c00015 	stw	r3,0(sp)
10105ac0:	0104f800 	call	10104f80 <_fflush_r>
10105ac4:	d8c00017 	ldw	r3,0(sp)
10105ac8:	da000117 	ldw	r8,4(sp)
10105acc:	103fc21e 	bne	r2,zero,101059d8 <__alt_data_end+0xfffe59d8>
10105ad0:	182f883a 	mov	r23,r3
10105ad4:	9de7c83a 	sub	r19,r19,r23
10105ad8:	983fe11e 	bne	r19,zero,10105a60 <__alt_data_end+0xfffe5a60>
10105adc:	800b883a 	mov	r5,r16
10105ae0:	a809883a 	mov	r4,r21
10105ae4:	0104f800 	call	10104f80 <_fflush_r>
10105ae8:	103fbb1e 	bne	r2,zero,101059d8 <__alt_data_end+0xfffe59d8>
10105aec:	0011883a 	mov	r8,zero
10105af0:	003fdb06 	br	10105a60 <__alt_data_end+0xfffe5a60>
10105af4:	94c0012e 	bgeu	r18,r19,10105afc <__sfvwrite_r+0x31c>
10105af8:	9027883a 	mov	r19,r18
10105afc:	980d883a 	mov	r6,r19
10105b00:	e00b883a 	mov	r5,fp
10105b04:	0106af40 	call	10106af4 <memmove>
10105b08:	80800217 	ldw	r2,8(r16)
10105b0c:	80c00017 	ldw	r3,0(r16)
10105b10:	14c5c83a 	sub	r2,r2,r19
10105b14:	1cc7883a 	add	r3,r3,r19
10105b18:	80800215 	stw	r2,8(r16)
10105b1c:	80c00015 	stw	r3,0(r16)
10105b20:	10004326 	beq	r2,zero,10105c30 <__sfvwrite_r+0x450>
10105b24:	9805883a 	mov	r2,r19
10105b28:	003f8606 	br	10105944 <__alt_data_end+0xfffe5944>
10105b2c:	b00d883a 	mov	r6,r22
10105b30:	e00b883a 	mov	r5,fp
10105b34:	da000115 	stw	r8,4(sp)
10105b38:	0106af40 	call	10106af4 <memmove>
10105b3c:	80800217 	ldw	r2,8(r16)
10105b40:	80c00017 	ldw	r3,0(r16)
10105b44:	da000117 	ldw	r8,4(sp)
10105b48:	1585c83a 	sub	r2,r2,r22
10105b4c:	1dad883a 	add	r22,r3,r22
10105b50:	80800215 	stw	r2,8(r16)
10105b54:	85800015 	stw	r22,0(r16)
10105b58:	003fbf06 	br	10105a58 <__alt_data_end+0xfffe5a58>
10105b5c:	81000017 	ldw	r4,0(r16)
10105b60:	9027883a 	mov	r19,r18
10105b64:	902f883a 	mov	r23,r18
10105b68:	003f6c06 	br	1010591c <__alt_data_end+0xfffe591c>
10105b6c:	900d883a 	mov	r6,r18
10105b70:	01400284 	movi	r5,10
10105b74:	e009883a 	mov	r4,fp
10105b78:	01068c80 	call	101068c8 <memchr>
10105b7c:	10003e26 	beq	r2,zero,10105c78 <__sfvwrite_r+0x498>
10105b80:	10800044 	addi	r2,r2,1
10105b84:	1727c83a 	sub	r19,r2,fp
10105b88:	02000044 	movi	r8,1
10105b8c:	003f9d06 	br	10105a04 <__alt_data_end+0xfffe5a04>
10105b90:	80800517 	ldw	r2,20(r16)
10105b94:	81400417 	ldw	r5,16(r16)
10105b98:	81c00017 	ldw	r7,0(r16)
10105b9c:	10a7883a 	add	r19,r2,r2
10105ba0:	9885883a 	add	r2,r19,r2
10105ba4:	1026d7fa 	srli	r19,r2,31
10105ba8:	396dc83a 	sub	r22,r7,r5
10105bac:	b1000044 	addi	r4,r22,1
10105bb0:	9885883a 	add	r2,r19,r2
10105bb4:	1027d07a 	srai	r19,r2,1
10105bb8:	2485883a 	add	r2,r4,r18
10105bbc:	980d883a 	mov	r6,r19
10105bc0:	9880022e 	bgeu	r19,r2,10105bcc <__sfvwrite_r+0x3ec>
10105bc4:	1027883a 	mov	r19,r2
10105bc8:	100d883a 	mov	r6,r2
10105bcc:	18c1000c 	andi	r3,r3,1024
10105bd0:	18001c26 	beq	r3,zero,10105c44 <__sfvwrite_r+0x464>
10105bd4:	300b883a 	mov	r5,r6
10105bd8:	a809883a 	mov	r4,r21
10105bdc:	01060bc0 	call	101060bc <_malloc_r>
10105be0:	102f883a 	mov	r23,r2
10105be4:	10002926 	beq	r2,zero,10105c8c <__sfvwrite_r+0x4ac>
10105be8:	81400417 	ldw	r5,16(r16)
10105bec:	b00d883a 	mov	r6,r22
10105bf0:	1009883a 	mov	r4,r2
10105bf4:	01069ac0 	call	101069ac <memcpy>
10105bf8:	8080030b 	ldhu	r2,12(r16)
10105bfc:	00fedfc4 	movi	r3,-1153
10105c00:	10c4703a 	and	r2,r2,r3
10105c04:	10802014 	ori	r2,r2,128
10105c08:	8080030d 	sth	r2,12(r16)
10105c0c:	bd89883a 	add	r4,r23,r22
10105c10:	9d8fc83a 	sub	r7,r19,r22
10105c14:	85c00415 	stw	r23,16(r16)
10105c18:	84c00515 	stw	r19,20(r16)
10105c1c:	81000015 	stw	r4,0(r16)
10105c20:	9027883a 	mov	r19,r18
10105c24:	81c00215 	stw	r7,8(r16)
10105c28:	902f883a 	mov	r23,r18
10105c2c:	003f3b06 	br	1010591c <__alt_data_end+0xfffe591c>
10105c30:	800b883a 	mov	r5,r16
10105c34:	a809883a 	mov	r4,r21
10105c38:	0104f800 	call	10104f80 <_fflush_r>
10105c3c:	103fb926 	beq	r2,zero,10105b24 <__alt_data_end+0xfffe5b24>
10105c40:	003f6506 	br	101059d8 <__alt_data_end+0xfffe59d8>
10105c44:	a809883a 	mov	r4,r21
10105c48:	0107d740 	call	10107d74 <_realloc_r>
10105c4c:	102f883a 	mov	r23,r2
10105c50:	103fee1e 	bne	r2,zero,10105c0c <__alt_data_end+0xfffe5c0c>
10105c54:	81400417 	ldw	r5,16(r16)
10105c58:	a809883a 	mov	r4,r21
10105c5c:	01054d00 	call	101054d0 <_free_r>
10105c60:	8080030b 	ldhu	r2,12(r16)
10105c64:	00ffdfc4 	movi	r3,-129
10105c68:	1884703a 	and	r2,r3,r2
10105c6c:	00c00304 	movi	r3,12
10105c70:	a8c00015 	stw	r3,0(r21)
10105c74:	003f5906 	br	101059dc <__alt_data_end+0xfffe59dc>
10105c78:	94c00044 	addi	r19,r18,1
10105c7c:	02000044 	movi	r8,1
10105c80:	003f6006 	br	10105a04 <__alt_data_end+0xfffe5a04>
10105c84:	00bfffc4 	movi	r2,-1
10105c88:	003f0306 	br	10105898 <__alt_data_end+0xfffe5898>
10105c8c:	00800304 	movi	r2,12
10105c90:	a8800015 	stw	r2,0(r21)
10105c94:	8080030b 	ldhu	r2,12(r16)
10105c98:	003f5006 	br	101059dc <__alt_data_end+0xfffe59dc>

10105c9c <_fwalk>:
10105c9c:	defff704 	addi	sp,sp,-36
10105ca0:	dd000415 	stw	r20,16(sp)
10105ca4:	dfc00815 	stw	ra,32(sp)
10105ca8:	ddc00715 	stw	r23,28(sp)
10105cac:	dd800615 	stw	r22,24(sp)
10105cb0:	dd400515 	stw	r21,20(sp)
10105cb4:	dcc00315 	stw	r19,12(sp)
10105cb8:	dc800215 	stw	r18,8(sp)
10105cbc:	dc400115 	stw	r17,4(sp)
10105cc0:	dc000015 	stw	r16,0(sp)
10105cc4:	2500b804 	addi	r20,r4,736
10105cc8:	a0002326 	beq	r20,zero,10105d58 <_fwalk+0xbc>
10105ccc:	282b883a 	mov	r21,r5
10105cd0:	002f883a 	mov	r23,zero
10105cd4:	05800044 	movi	r22,1
10105cd8:	04ffffc4 	movi	r19,-1
10105cdc:	a4400117 	ldw	r17,4(r20)
10105ce0:	a4800217 	ldw	r18,8(r20)
10105ce4:	8c7fffc4 	addi	r17,r17,-1
10105ce8:	88000d16 	blt	r17,zero,10105d20 <_fwalk+0x84>
10105cec:	94000304 	addi	r16,r18,12
10105cf0:	94800384 	addi	r18,r18,14
10105cf4:	8080000b 	ldhu	r2,0(r16)
10105cf8:	8c7fffc4 	addi	r17,r17,-1
10105cfc:	813ffd04 	addi	r4,r16,-12
10105d00:	b080042e 	bgeu	r22,r2,10105d14 <_fwalk+0x78>
10105d04:	9080000f 	ldh	r2,0(r18)
10105d08:	14c00226 	beq	r2,r19,10105d14 <_fwalk+0x78>
10105d0c:	a83ee83a 	callr	r21
10105d10:	b8aeb03a 	or	r23,r23,r2
10105d14:	84001a04 	addi	r16,r16,104
10105d18:	94801a04 	addi	r18,r18,104
10105d1c:	8cfff51e 	bne	r17,r19,10105cf4 <__alt_data_end+0xfffe5cf4>
10105d20:	a5000017 	ldw	r20,0(r20)
10105d24:	a03fed1e 	bne	r20,zero,10105cdc <__alt_data_end+0xfffe5cdc>
10105d28:	b805883a 	mov	r2,r23
10105d2c:	dfc00817 	ldw	ra,32(sp)
10105d30:	ddc00717 	ldw	r23,28(sp)
10105d34:	dd800617 	ldw	r22,24(sp)
10105d38:	dd400517 	ldw	r21,20(sp)
10105d3c:	dd000417 	ldw	r20,16(sp)
10105d40:	dcc00317 	ldw	r19,12(sp)
10105d44:	dc800217 	ldw	r18,8(sp)
10105d48:	dc400117 	ldw	r17,4(sp)
10105d4c:	dc000017 	ldw	r16,0(sp)
10105d50:	dec00904 	addi	sp,sp,36
10105d54:	f800283a 	ret
10105d58:	002f883a 	mov	r23,zero
10105d5c:	003ff206 	br	10105d28 <__alt_data_end+0xfffe5d28>

10105d60 <_fwalk_reent>:
10105d60:	defff704 	addi	sp,sp,-36
10105d64:	dd000415 	stw	r20,16(sp)
10105d68:	dfc00815 	stw	ra,32(sp)
10105d6c:	ddc00715 	stw	r23,28(sp)
10105d70:	dd800615 	stw	r22,24(sp)
10105d74:	dd400515 	stw	r21,20(sp)
10105d78:	dcc00315 	stw	r19,12(sp)
10105d7c:	dc800215 	stw	r18,8(sp)
10105d80:	dc400115 	stw	r17,4(sp)
10105d84:	dc000015 	stw	r16,0(sp)
10105d88:	2500b804 	addi	r20,r4,736
10105d8c:	a0002326 	beq	r20,zero,10105e1c <_fwalk_reent+0xbc>
10105d90:	282b883a 	mov	r21,r5
10105d94:	2027883a 	mov	r19,r4
10105d98:	002f883a 	mov	r23,zero
10105d9c:	05800044 	movi	r22,1
10105da0:	04bfffc4 	movi	r18,-1
10105da4:	a4400117 	ldw	r17,4(r20)
10105da8:	a4000217 	ldw	r16,8(r20)
10105dac:	8c7fffc4 	addi	r17,r17,-1
10105db0:	88000c16 	blt	r17,zero,10105de4 <_fwalk_reent+0x84>
10105db4:	84000304 	addi	r16,r16,12
10105db8:	8080000b 	ldhu	r2,0(r16)
10105dbc:	8c7fffc4 	addi	r17,r17,-1
10105dc0:	817ffd04 	addi	r5,r16,-12
10105dc4:	b080052e 	bgeu	r22,r2,10105ddc <_fwalk_reent+0x7c>
10105dc8:	8080008f 	ldh	r2,2(r16)
10105dcc:	9809883a 	mov	r4,r19
10105dd0:	14800226 	beq	r2,r18,10105ddc <_fwalk_reent+0x7c>
10105dd4:	a83ee83a 	callr	r21
10105dd8:	b8aeb03a 	or	r23,r23,r2
10105ddc:	84001a04 	addi	r16,r16,104
10105de0:	8cbff51e 	bne	r17,r18,10105db8 <__alt_data_end+0xfffe5db8>
10105de4:	a5000017 	ldw	r20,0(r20)
10105de8:	a03fee1e 	bne	r20,zero,10105da4 <__alt_data_end+0xfffe5da4>
10105dec:	b805883a 	mov	r2,r23
10105df0:	dfc00817 	ldw	ra,32(sp)
10105df4:	ddc00717 	ldw	r23,28(sp)
10105df8:	dd800617 	ldw	r22,24(sp)
10105dfc:	dd400517 	ldw	r21,20(sp)
10105e00:	dd000417 	ldw	r20,16(sp)
10105e04:	dcc00317 	ldw	r19,12(sp)
10105e08:	dc800217 	ldw	r18,8(sp)
10105e0c:	dc400117 	ldw	r17,4(sp)
10105e10:	dc000017 	ldw	r16,0(sp)
10105e14:	dec00904 	addi	sp,sp,36
10105e18:	f800283a 	ret
10105e1c:	002f883a 	mov	r23,zero
10105e20:	003ff206 	br	10105dec <__alt_data_end+0xfffe5dec>

10105e24 <_setlocale_r>:
10105e24:	30001b26 	beq	r6,zero,10105e94 <_setlocale_r+0x70>
10105e28:	01440474 	movhi	r5,4113
10105e2c:	defffe04 	addi	sp,sp,-8
10105e30:	2940b704 	addi	r5,r5,732
10105e34:	3009883a 	mov	r4,r6
10105e38:	dc000015 	stw	r16,0(sp)
10105e3c:	dfc00115 	stw	ra,4(sp)
10105e40:	3021883a 	mov	r16,r6
10105e44:	01084dc0 	call	101084dc <strcmp>
10105e48:	1000061e 	bne	r2,zero,10105e64 <_setlocale_r+0x40>
10105e4c:	00840474 	movhi	r2,4113
10105e50:	1080b604 	addi	r2,r2,728
10105e54:	dfc00117 	ldw	ra,4(sp)
10105e58:	dc000017 	ldw	r16,0(sp)
10105e5c:	dec00204 	addi	sp,sp,8
10105e60:	f800283a 	ret
10105e64:	01440474 	movhi	r5,4113
10105e68:	2940b604 	addi	r5,r5,728
10105e6c:	8009883a 	mov	r4,r16
10105e70:	01084dc0 	call	101084dc <strcmp>
10105e74:	103ff526 	beq	r2,zero,10105e4c <__alt_data_end+0xfffe5e4c>
10105e78:	01440474 	movhi	r5,4113
10105e7c:	2940a104 	addi	r5,r5,644
10105e80:	8009883a 	mov	r4,r16
10105e84:	01084dc0 	call	101084dc <strcmp>
10105e88:	103ff026 	beq	r2,zero,10105e4c <__alt_data_end+0xfffe5e4c>
10105e8c:	0005883a 	mov	r2,zero
10105e90:	003ff006 	br	10105e54 <__alt_data_end+0xfffe5e54>
10105e94:	00840474 	movhi	r2,4113
10105e98:	1080b604 	addi	r2,r2,728
10105e9c:	f800283a 	ret

10105ea0 <__locale_charset>:
10105ea0:	00840474 	movhi	r2,4113
10105ea4:	10826c04 	addi	r2,r2,2480
10105ea8:	f800283a 	ret

10105eac <__locale_mb_cur_max>:
10105eac:	00840474 	movhi	r2,4113
10105eb0:	10881204 	addi	r2,r2,8264
10105eb4:	10800017 	ldw	r2,0(r2)
10105eb8:	f800283a 	ret

10105ebc <__locale_msgcharset>:
10105ebc:	00840474 	movhi	r2,4113
10105ec0:	10826404 	addi	r2,r2,2448
10105ec4:	f800283a 	ret

10105ec8 <__locale_cjk_lang>:
10105ec8:	0005883a 	mov	r2,zero
10105ecc:	f800283a 	ret

10105ed0 <_localeconv_r>:
10105ed0:	00840474 	movhi	r2,4113
10105ed4:	10827404 	addi	r2,r2,2512
10105ed8:	f800283a 	ret

10105edc <setlocale>:
10105edc:	00840474 	movhi	r2,4113
10105ee0:	10881104 	addi	r2,r2,8260
10105ee4:	280d883a 	mov	r6,r5
10105ee8:	200b883a 	mov	r5,r4
10105eec:	11000017 	ldw	r4,0(r2)
10105ef0:	0105e241 	jmpi	10105e24 <_setlocale_r>

10105ef4 <localeconv>:
10105ef4:	00840474 	movhi	r2,4113
10105ef8:	10827404 	addi	r2,r2,2512
10105efc:	f800283a 	ret

10105f00 <__smakebuf_r>:
10105f00:	2880030b 	ldhu	r2,12(r5)
10105f04:	10c0008c 	andi	r3,r2,2
10105f08:	1800411e 	bne	r3,zero,10106010 <__smakebuf_r+0x110>
10105f0c:	deffec04 	addi	sp,sp,-80
10105f10:	dc000f15 	stw	r16,60(sp)
10105f14:	2821883a 	mov	r16,r5
10105f18:	2940038f 	ldh	r5,14(r5)
10105f1c:	dc401015 	stw	r17,64(sp)
10105f20:	dfc01315 	stw	ra,76(sp)
10105f24:	dcc01215 	stw	r19,72(sp)
10105f28:	dc801115 	stw	r18,68(sp)
10105f2c:	2023883a 	mov	r17,r4
10105f30:	28001c16 	blt	r5,zero,10105fa4 <__smakebuf_r+0xa4>
10105f34:	d80d883a 	mov	r6,sp
10105f38:	010a0840 	call	1010a084 <_fstat_r>
10105f3c:	10001816 	blt	r2,zero,10105fa0 <__smakebuf_r+0xa0>
10105f40:	d8800117 	ldw	r2,4(sp)
10105f44:	00e00014 	movui	r3,32768
10105f48:	10bc000c 	andi	r2,r2,61440
10105f4c:	14c80020 	cmpeqi	r19,r2,8192
10105f50:	10c03726 	beq	r2,r3,10106030 <__smakebuf_r+0x130>
10105f54:	80c0030b 	ldhu	r3,12(r16)
10105f58:	18c20014 	ori	r3,r3,2048
10105f5c:	80c0030d 	sth	r3,12(r16)
10105f60:	00c80004 	movi	r3,8192
10105f64:	10c0521e 	bne	r2,r3,101060b0 <__smakebuf_r+0x1b0>
10105f68:	8140038f 	ldh	r5,14(r16)
10105f6c:	8809883a 	mov	r4,r17
10105f70:	010a0e00 	call	1010a0e0 <_isatty_r>
10105f74:	10004c26 	beq	r2,zero,101060a8 <__smakebuf_r+0x1a8>
10105f78:	8080030b 	ldhu	r2,12(r16)
10105f7c:	80c010c4 	addi	r3,r16,67
10105f80:	80c00015 	stw	r3,0(r16)
10105f84:	10800054 	ori	r2,r2,1
10105f88:	8080030d 	sth	r2,12(r16)
10105f8c:	00800044 	movi	r2,1
10105f90:	80c00415 	stw	r3,16(r16)
10105f94:	80800515 	stw	r2,20(r16)
10105f98:	04810004 	movi	r18,1024
10105f9c:	00000706 	br	10105fbc <__smakebuf_r+0xbc>
10105fa0:	8080030b 	ldhu	r2,12(r16)
10105fa4:	10c0200c 	andi	r3,r2,128
10105fa8:	18001f1e 	bne	r3,zero,10106028 <__smakebuf_r+0x128>
10105fac:	04810004 	movi	r18,1024
10105fb0:	10820014 	ori	r2,r2,2048
10105fb4:	8080030d 	sth	r2,12(r16)
10105fb8:	0027883a 	mov	r19,zero
10105fbc:	900b883a 	mov	r5,r18
10105fc0:	8809883a 	mov	r4,r17
10105fc4:	01060bc0 	call	101060bc <_malloc_r>
10105fc8:	10002c26 	beq	r2,zero,1010607c <__smakebuf_r+0x17c>
10105fcc:	80c0030b 	ldhu	r3,12(r16)
10105fd0:	01040434 	movhi	r4,4112
10105fd4:	21140504 	addi	r4,r4,20500
10105fd8:	89000f15 	stw	r4,60(r17)
10105fdc:	18c02014 	ori	r3,r3,128
10105fe0:	80c0030d 	sth	r3,12(r16)
10105fe4:	80800015 	stw	r2,0(r16)
10105fe8:	80800415 	stw	r2,16(r16)
10105fec:	84800515 	stw	r18,20(r16)
10105ff0:	98001a1e 	bne	r19,zero,1010605c <__smakebuf_r+0x15c>
10105ff4:	dfc01317 	ldw	ra,76(sp)
10105ff8:	dcc01217 	ldw	r19,72(sp)
10105ffc:	dc801117 	ldw	r18,68(sp)
10106000:	dc401017 	ldw	r17,64(sp)
10106004:	dc000f17 	ldw	r16,60(sp)
10106008:	dec01404 	addi	sp,sp,80
1010600c:	f800283a 	ret
10106010:	288010c4 	addi	r2,r5,67
10106014:	28800015 	stw	r2,0(r5)
10106018:	28800415 	stw	r2,16(r5)
1010601c:	00800044 	movi	r2,1
10106020:	28800515 	stw	r2,20(r5)
10106024:	f800283a 	ret
10106028:	04801004 	movi	r18,64
1010602c:	003fe006 	br	10105fb0 <__alt_data_end+0xfffe5fb0>
10106030:	81000a17 	ldw	r4,40(r16)
10106034:	00c40474 	movhi	r3,4113
10106038:	18e11e04 	addi	r3,r3,-31624
1010603c:	20ffc51e 	bne	r4,r3,10105f54 <__alt_data_end+0xfffe5f54>
10106040:	8080030b 	ldhu	r2,12(r16)
10106044:	04810004 	movi	r18,1024
10106048:	84801315 	stw	r18,76(r16)
1010604c:	1484b03a 	or	r2,r2,r18
10106050:	8080030d 	sth	r2,12(r16)
10106054:	0027883a 	mov	r19,zero
10106058:	003fd806 	br	10105fbc <__alt_data_end+0xfffe5fbc>
1010605c:	8140038f 	ldh	r5,14(r16)
10106060:	8809883a 	mov	r4,r17
10106064:	010a0e00 	call	1010a0e0 <_isatty_r>
10106068:	103fe226 	beq	r2,zero,10105ff4 <__alt_data_end+0xfffe5ff4>
1010606c:	8080030b 	ldhu	r2,12(r16)
10106070:	10800054 	ori	r2,r2,1
10106074:	8080030d 	sth	r2,12(r16)
10106078:	003fde06 	br	10105ff4 <__alt_data_end+0xfffe5ff4>
1010607c:	8080030b 	ldhu	r2,12(r16)
10106080:	10c0800c 	andi	r3,r2,512
10106084:	183fdb1e 	bne	r3,zero,10105ff4 <__alt_data_end+0xfffe5ff4>
10106088:	10800094 	ori	r2,r2,2
1010608c:	80c010c4 	addi	r3,r16,67
10106090:	8080030d 	sth	r2,12(r16)
10106094:	00800044 	movi	r2,1
10106098:	80c00015 	stw	r3,0(r16)
1010609c:	80c00415 	stw	r3,16(r16)
101060a0:	80800515 	stw	r2,20(r16)
101060a4:	003fd306 	br	10105ff4 <__alt_data_end+0xfffe5ff4>
101060a8:	04810004 	movi	r18,1024
101060ac:	003fc306 	br	10105fbc <__alt_data_end+0xfffe5fbc>
101060b0:	0027883a 	mov	r19,zero
101060b4:	04810004 	movi	r18,1024
101060b8:	003fc006 	br	10105fbc <__alt_data_end+0xfffe5fbc>

101060bc <_malloc_r>:
101060bc:	defff504 	addi	sp,sp,-44
101060c0:	dc800315 	stw	r18,12(sp)
101060c4:	dfc00a15 	stw	ra,40(sp)
101060c8:	df000915 	stw	fp,36(sp)
101060cc:	ddc00815 	stw	r23,32(sp)
101060d0:	dd800715 	stw	r22,28(sp)
101060d4:	dd400615 	stw	r21,24(sp)
101060d8:	dd000515 	stw	r20,20(sp)
101060dc:	dcc00415 	stw	r19,16(sp)
101060e0:	dc400215 	stw	r17,8(sp)
101060e4:	dc000115 	stw	r16,4(sp)
101060e8:	288002c4 	addi	r2,r5,11
101060ec:	00c00584 	movi	r3,22
101060f0:	2025883a 	mov	r18,r4
101060f4:	18807f2e 	bgeu	r3,r2,101062f4 <_malloc_r+0x238>
101060f8:	047ffe04 	movi	r17,-8
101060fc:	1462703a 	and	r17,r2,r17
10106100:	8800a316 	blt	r17,zero,10106390 <_malloc_r+0x2d4>
10106104:	8940a236 	bltu	r17,r5,10106390 <_malloc_r+0x2d4>
10106108:	010dbc80 	call	1010dbc8 <__malloc_lock>
1010610c:	00807dc4 	movi	r2,503
10106110:	1441e92e 	bgeu	r2,r17,101068b8 <_malloc_r+0x7fc>
10106114:	8804d27a 	srli	r2,r17,9
10106118:	1000a126 	beq	r2,zero,101063a0 <_malloc_r+0x2e4>
1010611c:	00c00104 	movi	r3,4
10106120:	18811e36 	bltu	r3,r2,1010659c <_malloc_r+0x4e0>
10106124:	8804d1ba 	srli	r2,r17,6
10106128:	12000e44 	addi	r8,r2,57
1010612c:	11c00e04 	addi	r7,r2,56
10106130:	4209883a 	add	r4,r8,r8
10106134:	04c40474 	movhi	r19,4113
10106138:	2109883a 	add	r4,r4,r4
1010613c:	9cc28204 	addi	r19,r19,2568
10106140:	2109883a 	add	r4,r4,r4
10106144:	9909883a 	add	r4,r19,r4
10106148:	24000117 	ldw	r16,4(r4)
1010614c:	213ffe04 	addi	r4,r4,-8
10106150:	24009726 	beq	r4,r16,101063b0 <_malloc_r+0x2f4>
10106154:	80800117 	ldw	r2,4(r16)
10106158:	01bfff04 	movi	r6,-4
1010615c:	014003c4 	movi	r5,15
10106160:	1184703a 	and	r2,r2,r6
10106164:	1447c83a 	sub	r3,r2,r17
10106168:	28c00716 	blt	r5,r3,10106188 <_malloc_r+0xcc>
1010616c:	1800920e 	bge	r3,zero,101063b8 <_malloc_r+0x2fc>
10106170:	84000317 	ldw	r16,12(r16)
10106174:	24008e26 	beq	r4,r16,101063b0 <_malloc_r+0x2f4>
10106178:	80800117 	ldw	r2,4(r16)
1010617c:	1184703a 	and	r2,r2,r6
10106180:	1447c83a 	sub	r3,r2,r17
10106184:	28fff90e 	bge	r5,r3,1010616c <__alt_data_end+0xfffe616c>
10106188:	3809883a 	mov	r4,r7
1010618c:	01840474 	movhi	r6,4113
10106190:	9c000417 	ldw	r16,16(r19)
10106194:	31828204 	addi	r6,r6,2568
10106198:	32000204 	addi	r8,r6,8
1010619c:	82013426 	beq	r16,r8,10106670 <_malloc_r+0x5b4>
101061a0:	80c00117 	ldw	r3,4(r16)
101061a4:	00bfff04 	movi	r2,-4
101061a8:	188e703a 	and	r7,r3,r2
101061ac:	3c45c83a 	sub	r2,r7,r17
101061b0:	00c003c4 	movi	r3,15
101061b4:	18811f16 	blt	r3,r2,10106634 <_malloc_r+0x578>
101061b8:	32000515 	stw	r8,20(r6)
101061bc:	32000415 	stw	r8,16(r6)
101061c0:	10007f0e 	bge	r2,zero,101063c0 <_malloc_r+0x304>
101061c4:	00807fc4 	movi	r2,511
101061c8:	11c0fd36 	bltu	r2,r7,101065c0 <_malloc_r+0x504>
101061cc:	3806d0fa 	srli	r3,r7,3
101061d0:	01c00044 	movi	r7,1
101061d4:	30800117 	ldw	r2,4(r6)
101061d8:	19400044 	addi	r5,r3,1
101061dc:	294b883a 	add	r5,r5,r5
101061e0:	1807d0ba 	srai	r3,r3,2
101061e4:	294b883a 	add	r5,r5,r5
101061e8:	294b883a 	add	r5,r5,r5
101061ec:	298b883a 	add	r5,r5,r6
101061f0:	38c6983a 	sll	r3,r7,r3
101061f4:	29c00017 	ldw	r7,0(r5)
101061f8:	2a7ffe04 	addi	r9,r5,-8
101061fc:	1886b03a 	or	r3,r3,r2
10106200:	82400315 	stw	r9,12(r16)
10106204:	81c00215 	stw	r7,8(r16)
10106208:	30c00115 	stw	r3,4(r6)
1010620c:	2c000015 	stw	r16,0(r5)
10106210:	3c000315 	stw	r16,12(r7)
10106214:	2005d0ba 	srai	r2,r4,2
10106218:	01400044 	movi	r5,1
1010621c:	288a983a 	sll	r5,r5,r2
10106220:	19406f36 	bltu	r3,r5,101063e0 <_malloc_r+0x324>
10106224:	28c4703a 	and	r2,r5,r3
10106228:	10000a1e 	bne	r2,zero,10106254 <_malloc_r+0x198>
1010622c:	00bfff04 	movi	r2,-4
10106230:	294b883a 	add	r5,r5,r5
10106234:	2088703a 	and	r4,r4,r2
10106238:	28c4703a 	and	r2,r5,r3
1010623c:	21000104 	addi	r4,r4,4
10106240:	1000041e 	bne	r2,zero,10106254 <_malloc_r+0x198>
10106244:	294b883a 	add	r5,r5,r5
10106248:	28c4703a 	and	r2,r5,r3
1010624c:	21000104 	addi	r4,r4,4
10106250:	103ffc26 	beq	r2,zero,10106244 <__alt_data_end+0xfffe6244>
10106254:	02bfff04 	movi	r10,-4
10106258:	024003c4 	movi	r9,15
1010625c:	21800044 	addi	r6,r4,1
10106260:	318d883a 	add	r6,r6,r6
10106264:	318d883a 	add	r6,r6,r6
10106268:	318d883a 	add	r6,r6,r6
1010626c:	998d883a 	add	r6,r19,r6
10106270:	333ffe04 	addi	r12,r6,-8
10106274:	2017883a 	mov	r11,r4
10106278:	31800104 	addi	r6,r6,4
1010627c:	34000017 	ldw	r16,0(r6)
10106280:	31fffd04 	addi	r7,r6,-12
10106284:	81c0041e 	bne	r16,r7,10106298 <_malloc_r+0x1dc>
10106288:	0000fb06 	br	10106678 <_malloc_r+0x5bc>
1010628c:	1801030e 	bge	r3,zero,1010669c <_malloc_r+0x5e0>
10106290:	84000317 	ldw	r16,12(r16)
10106294:	81c0f826 	beq	r16,r7,10106678 <_malloc_r+0x5bc>
10106298:	80800117 	ldw	r2,4(r16)
1010629c:	1284703a 	and	r2,r2,r10
101062a0:	1447c83a 	sub	r3,r2,r17
101062a4:	48fff90e 	bge	r9,r3,1010628c <__alt_data_end+0xfffe628c>
101062a8:	80800317 	ldw	r2,12(r16)
101062ac:	81000217 	ldw	r4,8(r16)
101062b0:	89400054 	ori	r5,r17,1
101062b4:	81400115 	stw	r5,4(r16)
101062b8:	20800315 	stw	r2,12(r4)
101062bc:	11000215 	stw	r4,8(r2)
101062c0:	8463883a 	add	r17,r16,r17
101062c4:	9c400515 	stw	r17,20(r19)
101062c8:	9c400415 	stw	r17,16(r19)
101062cc:	18800054 	ori	r2,r3,1
101062d0:	88800115 	stw	r2,4(r17)
101062d4:	8a000315 	stw	r8,12(r17)
101062d8:	8a000215 	stw	r8,8(r17)
101062dc:	88e3883a 	add	r17,r17,r3
101062e0:	88c00015 	stw	r3,0(r17)
101062e4:	9009883a 	mov	r4,r18
101062e8:	010dbec0 	call	1010dbec <__malloc_unlock>
101062ec:	80800204 	addi	r2,r16,8
101062f0:	00001b06 	br	10106360 <_malloc_r+0x2a4>
101062f4:	04400404 	movi	r17,16
101062f8:	89402536 	bltu	r17,r5,10106390 <_malloc_r+0x2d4>
101062fc:	010dbc80 	call	1010dbc8 <__malloc_lock>
10106300:	00800184 	movi	r2,6
10106304:	01000084 	movi	r4,2
10106308:	04c40474 	movhi	r19,4113
1010630c:	1085883a 	add	r2,r2,r2
10106310:	9cc28204 	addi	r19,r19,2568
10106314:	1085883a 	add	r2,r2,r2
10106318:	9885883a 	add	r2,r19,r2
1010631c:	14000117 	ldw	r16,4(r2)
10106320:	10fffe04 	addi	r3,r2,-8
10106324:	80c0d926 	beq	r16,r3,1010668c <_malloc_r+0x5d0>
10106328:	80c00117 	ldw	r3,4(r16)
1010632c:	81000317 	ldw	r4,12(r16)
10106330:	00bfff04 	movi	r2,-4
10106334:	1884703a 	and	r2,r3,r2
10106338:	81400217 	ldw	r5,8(r16)
1010633c:	8085883a 	add	r2,r16,r2
10106340:	10c00117 	ldw	r3,4(r2)
10106344:	29000315 	stw	r4,12(r5)
10106348:	21400215 	stw	r5,8(r4)
1010634c:	18c00054 	ori	r3,r3,1
10106350:	10c00115 	stw	r3,4(r2)
10106354:	9009883a 	mov	r4,r18
10106358:	010dbec0 	call	1010dbec <__malloc_unlock>
1010635c:	80800204 	addi	r2,r16,8
10106360:	dfc00a17 	ldw	ra,40(sp)
10106364:	df000917 	ldw	fp,36(sp)
10106368:	ddc00817 	ldw	r23,32(sp)
1010636c:	dd800717 	ldw	r22,28(sp)
10106370:	dd400617 	ldw	r21,24(sp)
10106374:	dd000517 	ldw	r20,20(sp)
10106378:	dcc00417 	ldw	r19,16(sp)
1010637c:	dc800317 	ldw	r18,12(sp)
10106380:	dc400217 	ldw	r17,8(sp)
10106384:	dc000117 	ldw	r16,4(sp)
10106388:	dec00b04 	addi	sp,sp,44
1010638c:	f800283a 	ret
10106390:	00800304 	movi	r2,12
10106394:	90800015 	stw	r2,0(r18)
10106398:	0005883a 	mov	r2,zero
1010639c:	003ff006 	br	10106360 <__alt_data_end+0xfffe6360>
101063a0:	01002004 	movi	r4,128
101063a4:	02001004 	movi	r8,64
101063a8:	01c00fc4 	movi	r7,63
101063ac:	003f6106 	br	10106134 <__alt_data_end+0xfffe6134>
101063b0:	4009883a 	mov	r4,r8
101063b4:	003f7506 	br	1010618c <__alt_data_end+0xfffe618c>
101063b8:	81000317 	ldw	r4,12(r16)
101063bc:	003fde06 	br	10106338 <__alt_data_end+0xfffe6338>
101063c0:	81c5883a 	add	r2,r16,r7
101063c4:	11400117 	ldw	r5,4(r2)
101063c8:	9009883a 	mov	r4,r18
101063cc:	29400054 	ori	r5,r5,1
101063d0:	11400115 	stw	r5,4(r2)
101063d4:	010dbec0 	call	1010dbec <__malloc_unlock>
101063d8:	80800204 	addi	r2,r16,8
101063dc:	003fe006 	br	10106360 <__alt_data_end+0xfffe6360>
101063e0:	9c000217 	ldw	r16,8(r19)
101063e4:	00bfff04 	movi	r2,-4
101063e8:	85800117 	ldw	r22,4(r16)
101063ec:	b0ac703a 	and	r22,r22,r2
101063f0:	b4400336 	bltu	r22,r17,10106400 <_malloc_r+0x344>
101063f4:	b445c83a 	sub	r2,r22,r17
101063f8:	00c003c4 	movi	r3,15
101063fc:	18805d16 	blt	r3,r2,10106574 <_malloc_r+0x4b8>
10106400:	05c40474 	movhi	r23,4113
10106404:	00840474 	movhi	r2,4113
10106408:	108f0e04 	addi	r2,r2,15416
1010640c:	bdc81304 	addi	r23,r23,8268
10106410:	15400017 	ldw	r21,0(r2)
10106414:	b8c00017 	ldw	r3,0(r23)
10106418:	00bfffc4 	movi	r2,-1
1010641c:	858d883a 	add	r6,r16,r22
10106420:	8d6b883a 	add	r21,r17,r21
10106424:	1880ea26 	beq	r3,r2,101067d0 <_malloc_r+0x714>
10106428:	ad4403c4 	addi	r21,r21,4111
1010642c:	00bc0004 	movi	r2,-4096
10106430:	a8aa703a 	and	r21,r21,r2
10106434:	a80b883a 	mov	r5,r21
10106438:	9009883a 	mov	r4,r18
1010643c:	d9800015 	stw	r6,0(sp)
10106440:	010834c0 	call	1010834c <_sbrk_r>
10106444:	1029883a 	mov	r20,r2
10106448:	00bfffc4 	movi	r2,-1
1010644c:	d9800017 	ldw	r6,0(sp)
10106450:	a080e826 	beq	r20,r2,101067f4 <_malloc_r+0x738>
10106454:	a180a636 	bltu	r20,r6,101066f0 <_malloc_r+0x634>
10106458:	07040474 	movhi	fp,4113
1010645c:	e70f1704 	addi	fp,fp,15452
10106460:	e0800017 	ldw	r2,0(fp)
10106464:	a887883a 	add	r3,r21,r2
10106468:	e0c00015 	stw	r3,0(fp)
1010646c:	3500e626 	beq	r6,r20,10106808 <_malloc_r+0x74c>
10106470:	b9000017 	ldw	r4,0(r23)
10106474:	00bfffc4 	movi	r2,-1
10106478:	2080ee26 	beq	r4,r2,10106834 <_malloc_r+0x778>
1010647c:	a185c83a 	sub	r2,r20,r6
10106480:	10c5883a 	add	r2,r2,r3
10106484:	e0800015 	stw	r2,0(fp)
10106488:	a0c001cc 	andi	r3,r20,7
1010648c:	1800bc26 	beq	r3,zero,10106780 <_malloc_r+0x6c4>
10106490:	a0e9c83a 	sub	r20,r20,r3
10106494:	00840204 	movi	r2,4104
10106498:	a5000204 	addi	r20,r20,8
1010649c:	10c7c83a 	sub	r3,r2,r3
101064a0:	a545883a 	add	r2,r20,r21
101064a4:	1083ffcc 	andi	r2,r2,4095
101064a8:	18abc83a 	sub	r21,r3,r2
101064ac:	a80b883a 	mov	r5,r21
101064b0:	9009883a 	mov	r4,r18
101064b4:	010834c0 	call	1010834c <_sbrk_r>
101064b8:	00ffffc4 	movi	r3,-1
101064bc:	10c0e126 	beq	r2,r3,10106844 <_malloc_r+0x788>
101064c0:	1505c83a 	sub	r2,r2,r20
101064c4:	1545883a 	add	r2,r2,r21
101064c8:	10800054 	ori	r2,r2,1
101064cc:	e0c00017 	ldw	r3,0(fp)
101064d0:	9d000215 	stw	r20,8(r19)
101064d4:	a0800115 	stw	r2,4(r20)
101064d8:	a8c7883a 	add	r3,r21,r3
101064dc:	e0c00015 	stw	r3,0(fp)
101064e0:	84c00e26 	beq	r16,r19,1010651c <_malloc_r+0x460>
101064e4:	018003c4 	movi	r6,15
101064e8:	3580a72e 	bgeu	r6,r22,10106788 <_malloc_r+0x6cc>
101064ec:	81400117 	ldw	r5,4(r16)
101064f0:	013ffe04 	movi	r4,-8
101064f4:	b0bffd04 	addi	r2,r22,-12
101064f8:	1104703a 	and	r2,r2,r4
101064fc:	2900004c 	andi	r4,r5,1
10106500:	2088b03a 	or	r4,r4,r2
10106504:	81000115 	stw	r4,4(r16)
10106508:	01400144 	movi	r5,5
1010650c:	8089883a 	add	r4,r16,r2
10106510:	21400115 	stw	r5,4(r4)
10106514:	21400215 	stw	r5,8(r4)
10106518:	3080cd36 	bltu	r6,r2,10106850 <_malloc_r+0x794>
1010651c:	00840474 	movhi	r2,4113
10106520:	108f0d04 	addi	r2,r2,15412
10106524:	11000017 	ldw	r4,0(r2)
10106528:	20c0012e 	bgeu	r4,r3,10106530 <_malloc_r+0x474>
1010652c:	10c00015 	stw	r3,0(r2)
10106530:	00840474 	movhi	r2,4113
10106534:	108f0c04 	addi	r2,r2,15408
10106538:	11000017 	ldw	r4,0(r2)
1010653c:	9c000217 	ldw	r16,8(r19)
10106540:	20c0012e 	bgeu	r4,r3,10106548 <_malloc_r+0x48c>
10106544:	10c00015 	stw	r3,0(r2)
10106548:	80c00117 	ldw	r3,4(r16)
1010654c:	00bfff04 	movi	r2,-4
10106550:	1886703a 	and	r3,r3,r2
10106554:	1c45c83a 	sub	r2,r3,r17
10106558:	1c400236 	bltu	r3,r17,10106564 <_malloc_r+0x4a8>
1010655c:	00c003c4 	movi	r3,15
10106560:	18800416 	blt	r3,r2,10106574 <_malloc_r+0x4b8>
10106564:	9009883a 	mov	r4,r18
10106568:	010dbec0 	call	1010dbec <__malloc_unlock>
1010656c:	0005883a 	mov	r2,zero
10106570:	003f7b06 	br	10106360 <__alt_data_end+0xfffe6360>
10106574:	88c00054 	ori	r3,r17,1
10106578:	80c00115 	stw	r3,4(r16)
1010657c:	8463883a 	add	r17,r16,r17
10106580:	10800054 	ori	r2,r2,1
10106584:	9c400215 	stw	r17,8(r19)
10106588:	88800115 	stw	r2,4(r17)
1010658c:	9009883a 	mov	r4,r18
10106590:	010dbec0 	call	1010dbec <__malloc_unlock>
10106594:	80800204 	addi	r2,r16,8
10106598:	003f7106 	br	10106360 <__alt_data_end+0xfffe6360>
1010659c:	00c00504 	movi	r3,20
101065a0:	18804a2e 	bgeu	r3,r2,101066cc <_malloc_r+0x610>
101065a4:	00c01504 	movi	r3,84
101065a8:	18806e36 	bltu	r3,r2,10106764 <_malloc_r+0x6a8>
101065ac:	8804d33a 	srli	r2,r17,12
101065b0:	12001bc4 	addi	r8,r2,111
101065b4:	11c01b84 	addi	r7,r2,110
101065b8:	4209883a 	add	r4,r8,r8
101065bc:	003edd06 	br	10106134 <__alt_data_end+0xfffe6134>
101065c0:	3804d27a 	srli	r2,r7,9
101065c4:	00c00104 	movi	r3,4
101065c8:	1880442e 	bgeu	r3,r2,101066dc <_malloc_r+0x620>
101065cc:	00c00504 	movi	r3,20
101065d0:	18808136 	bltu	r3,r2,101067d8 <_malloc_r+0x71c>
101065d4:	11401704 	addi	r5,r2,92
101065d8:	10c016c4 	addi	r3,r2,91
101065dc:	294b883a 	add	r5,r5,r5
101065e0:	294b883a 	add	r5,r5,r5
101065e4:	294b883a 	add	r5,r5,r5
101065e8:	994b883a 	add	r5,r19,r5
101065ec:	28800017 	ldw	r2,0(r5)
101065f0:	01840474 	movhi	r6,4113
101065f4:	297ffe04 	addi	r5,r5,-8
101065f8:	31828204 	addi	r6,r6,2568
101065fc:	28806526 	beq	r5,r2,10106794 <_malloc_r+0x6d8>
10106600:	01bfff04 	movi	r6,-4
10106604:	10c00117 	ldw	r3,4(r2)
10106608:	1986703a 	and	r3,r3,r6
1010660c:	38c0022e 	bgeu	r7,r3,10106618 <_malloc_r+0x55c>
10106610:	10800217 	ldw	r2,8(r2)
10106614:	28bffb1e 	bne	r5,r2,10106604 <__alt_data_end+0xfffe6604>
10106618:	11400317 	ldw	r5,12(r2)
1010661c:	98c00117 	ldw	r3,4(r19)
10106620:	81400315 	stw	r5,12(r16)
10106624:	80800215 	stw	r2,8(r16)
10106628:	2c000215 	stw	r16,8(r5)
1010662c:	14000315 	stw	r16,12(r2)
10106630:	003ef806 	br	10106214 <__alt_data_end+0xfffe6214>
10106634:	88c00054 	ori	r3,r17,1
10106638:	80c00115 	stw	r3,4(r16)
1010663c:	8463883a 	add	r17,r16,r17
10106640:	34400515 	stw	r17,20(r6)
10106644:	34400415 	stw	r17,16(r6)
10106648:	10c00054 	ori	r3,r2,1
1010664c:	8a000315 	stw	r8,12(r17)
10106650:	8a000215 	stw	r8,8(r17)
10106654:	88c00115 	stw	r3,4(r17)
10106658:	88a3883a 	add	r17,r17,r2
1010665c:	88800015 	stw	r2,0(r17)
10106660:	9009883a 	mov	r4,r18
10106664:	010dbec0 	call	1010dbec <__malloc_unlock>
10106668:	80800204 	addi	r2,r16,8
1010666c:	003f3c06 	br	10106360 <__alt_data_end+0xfffe6360>
10106670:	30c00117 	ldw	r3,4(r6)
10106674:	003ee706 	br	10106214 <__alt_data_end+0xfffe6214>
10106678:	5ac00044 	addi	r11,r11,1
1010667c:	588000cc 	andi	r2,r11,3
10106680:	31800204 	addi	r6,r6,8
10106684:	103efd1e 	bne	r2,zero,1010627c <__alt_data_end+0xfffe627c>
10106688:	00002406 	br	1010671c <_malloc_r+0x660>
1010668c:	14000317 	ldw	r16,12(r2)
10106690:	143f251e 	bne	r2,r16,10106328 <__alt_data_end+0xfffe6328>
10106694:	21000084 	addi	r4,r4,2
10106698:	003ebc06 	br	1010618c <__alt_data_end+0xfffe618c>
1010669c:	8085883a 	add	r2,r16,r2
101066a0:	10c00117 	ldw	r3,4(r2)
101066a4:	81000317 	ldw	r4,12(r16)
101066a8:	81400217 	ldw	r5,8(r16)
101066ac:	18c00054 	ori	r3,r3,1
101066b0:	10c00115 	stw	r3,4(r2)
101066b4:	29000315 	stw	r4,12(r5)
101066b8:	21400215 	stw	r5,8(r4)
101066bc:	9009883a 	mov	r4,r18
101066c0:	010dbec0 	call	1010dbec <__malloc_unlock>
101066c4:	80800204 	addi	r2,r16,8
101066c8:	003f2506 	br	10106360 <__alt_data_end+0xfffe6360>
101066cc:	12001704 	addi	r8,r2,92
101066d0:	11c016c4 	addi	r7,r2,91
101066d4:	4209883a 	add	r4,r8,r8
101066d8:	003e9606 	br	10106134 <__alt_data_end+0xfffe6134>
101066dc:	3804d1ba 	srli	r2,r7,6
101066e0:	11400e44 	addi	r5,r2,57
101066e4:	10c00e04 	addi	r3,r2,56
101066e8:	294b883a 	add	r5,r5,r5
101066ec:	003fbc06 	br	101065e0 <__alt_data_end+0xfffe65e0>
101066f0:	84ff5926 	beq	r16,r19,10106458 <__alt_data_end+0xfffe6458>
101066f4:	00840474 	movhi	r2,4113
101066f8:	10828204 	addi	r2,r2,2568
101066fc:	14000217 	ldw	r16,8(r2)
10106700:	00bfff04 	movi	r2,-4
10106704:	80c00117 	ldw	r3,4(r16)
10106708:	1886703a 	and	r3,r3,r2
1010670c:	003f9106 	br	10106554 <__alt_data_end+0xfffe6554>
10106710:	60800217 	ldw	r2,8(r12)
10106714:	213fffc4 	addi	r4,r4,-1
10106718:	1300651e 	bne	r2,r12,101068b0 <_malloc_r+0x7f4>
1010671c:	208000cc 	andi	r2,r4,3
10106720:	633ffe04 	addi	r12,r12,-8
10106724:	103ffa1e 	bne	r2,zero,10106710 <__alt_data_end+0xfffe6710>
10106728:	98800117 	ldw	r2,4(r19)
1010672c:	0146303a 	nor	r3,zero,r5
10106730:	1884703a 	and	r2,r3,r2
10106734:	98800115 	stw	r2,4(r19)
10106738:	294b883a 	add	r5,r5,r5
1010673c:	117f2836 	bltu	r2,r5,101063e0 <__alt_data_end+0xfffe63e0>
10106740:	283f2726 	beq	r5,zero,101063e0 <__alt_data_end+0xfffe63e0>
10106744:	2886703a 	and	r3,r5,r2
10106748:	5809883a 	mov	r4,r11
1010674c:	183ec31e 	bne	r3,zero,1010625c <__alt_data_end+0xfffe625c>
10106750:	294b883a 	add	r5,r5,r5
10106754:	2886703a 	and	r3,r5,r2
10106758:	21000104 	addi	r4,r4,4
1010675c:	183ffc26 	beq	r3,zero,10106750 <__alt_data_end+0xfffe6750>
10106760:	003ebe06 	br	1010625c <__alt_data_end+0xfffe625c>
10106764:	00c05504 	movi	r3,340
10106768:	18801236 	bltu	r3,r2,101067b4 <_malloc_r+0x6f8>
1010676c:	8804d3fa 	srli	r2,r17,15
10106770:	12001e04 	addi	r8,r2,120
10106774:	11c01dc4 	addi	r7,r2,119
10106778:	4209883a 	add	r4,r8,r8
1010677c:	003e6d06 	br	10106134 <__alt_data_end+0xfffe6134>
10106780:	00c40004 	movi	r3,4096
10106784:	003f4606 	br	101064a0 <__alt_data_end+0xfffe64a0>
10106788:	00800044 	movi	r2,1
1010678c:	a0800115 	stw	r2,4(r20)
10106790:	003f7406 	br	10106564 <__alt_data_end+0xfffe6564>
10106794:	1805d0ba 	srai	r2,r3,2
10106798:	01c00044 	movi	r7,1
1010679c:	30c00117 	ldw	r3,4(r6)
101067a0:	388e983a 	sll	r7,r7,r2
101067a4:	2805883a 	mov	r2,r5
101067a8:	38c6b03a 	or	r3,r7,r3
101067ac:	30c00115 	stw	r3,4(r6)
101067b0:	003f9b06 	br	10106620 <__alt_data_end+0xfffe6620>
101067b4:	00c15504 	movi	r3,1364
101067b8:	18801a36 	bltu	r3,r2,10106824 <_malloc_r+0x768>
101067bc:	8804d4ba 	srli	r2,r17,18
101067c0:	12001f44 	addi	r8,r2,125
101067c4:	11c01f04 	addi	r7,r2,124
101067c8:	4209883a 	add	r4,r8,r8
101067cc:	003e5906 	br	10106134 <__alt_data_end+0xfffe6134>
101067d0:	ad400404 	addi	r21,r21,16
101067d4:	003f1706 	br	10106434 <__alt_data_end+0xfffe6434>
101067d8:	00c01504 	movi	r3,84
101067dc:	18802336 	bltu	r3,r2,1010686c <_malloc_r+0x7b0>
101067e0:	3804d33a 	srli	r2,r7,12
101067e4:	11401bc4 	addi	r5,r2,111
101067e8:	10c01b84 	addi	r3,r2,110
101067ec:	294b883a 	add	r5,r5,r5
101067f0:	003f7b06 	br	101065e0 <__alt_data_end+0xfffe65e0>
101067f4:	9c000217 	ldw	r16,8(r19)
101067f8:	00bfff04 	movi	r2,-4
101067fc:	80c00117 	ldw	r3,4(r16)
10106800:	1886703a 	and	r3,r3,r2
10106804:	003f5306 	br	10106554 <__alt_data_end+0xfffe6554>
10106808:	3083ffcc 	andi	r2,r6,4095
1010680c:	103f181e 	bne	r2,zero,10106470 <__alt_data_end+0xfffe6470>
10106810:	99000217 	ldw	r4,8(r19)
10106814:	b545883a 	add	r2,r22,r21
10106818:	10800054 	ori	r2,r2,1
1010681c:	20800115 	stw	r2,4(r4)
10106820:	003f3e06 	br	1010651c <__alt_data_end+0xfffe651c>
10106824:	01003f84 	movi	r4,254
10106828:	02001fc4 	movi	r8,127
1010682c:	01c01f84 	movi	r7,126
10106830:	003e4006 	br	10106134 <__alt_data_end+0xfffe6134>
10106834:	00840474 	movhi	r2,4113
10106838:	10881304 	addi	r2,r2,8268
1010683c:	15000015 	stw	r20,0(r2)
10106840:	003f1106 	br	10106488 <__alt_data_end+0xfffe6488>
10106844:	00800044 	movi	r2,1
10106848:	002b883a 	mov	r21,zero
1010684c:	003f1f06 	br	101064cc <__alt_data_end+0xfffe64cc>
10106850:	81400204 	addi	r5,r16,8
10106854:	9009883a 	mov	r4,r18
10106858:	01054d00 	call	101054d0 <_free_r>
1010685c:	00840474 	movhi	r2,4113
10106860:	108f1704 	addi	r2,r2,15452
10106864:	10c00017 	ldw	r3,0(r2)
10106868:	003f2c06 	br	1010651c <__alt_data_end+0xfffe651c>
1010686c:	00c05504 	movi	r3,340
10106870:	18800536 	bltu	r3,r2,10106888 <_malloc_r+0x7cc>
10106874:	3804d3fa 	srli	r2,r7,15
10106878:	11401e04 	addi	r5,r2,120
1010687c:	10c01dc4 	addi	r3,r2,119
10106880:	294b883a 	add	r5,r5,r5
10106884:	003f5606 	br	101065e0 <__alt_data_end+0xfffe65e0>
10106888:	00c15504 	movi	r3,1364
1010688c:	18800536 	bltu	r3,r2,101068a4 <_malloc_r+0x7e8>
10106890:	3804d4ba 	srli	r2,r7,18
10106894:	11401f44 	addi	r5,r2,125
10106898:	10c01f04 	addi	r3,r2,124
1010689c:	294b883a 	add	r5,r5,r5
101068a0:	003f4f06 	br	101065e0 <__alt_data_end+0xfffe65e0>
101068a4:	01403f84 	movi	r5,254
101068a8:	00c01f84 	movi	r3,126
101068ac:	003f4c06 	br	101065e0 <__alt_data_end+0xfffe65e0>
101068b0:	98800117 	ldw	r2,4(r19)
101068b4:	003fa006 	br	10106738 <__alt_data_end+0xfffe6738>
101068b8:	8808d0fa 	srli	r4,r17,3
101068bc:	20800044 	addi	r2,r4,1
101068c0:	1085883a 	add	r2,r2,r2
101068c4:	003e9006 	br	10106308 <__alt_data_end+0xfffe6308>

101068c8 <memchr>:
101068c8:	208000cc 	andi	r2,r4,3
101068cc:	280f883a 	mov	r7,r5
101068d0:	10003426 	beq	r2,zero,101069a4 <memchr+0xdc>
101068d4:	30bfffc4 	addi	r2,r6,-1
101068d8:	30001a26 	beq	r6,zero,10106944 <memchr+0x7c>
101068dc:	20c00003 	ldbu	r3,0(r4)
101068e0:	29803fcc 	andi	r6,r5,255
101068e4:	30c0051e 	bne	r6,r3,101068fc <memchr+0x34>
101068e8:	00001806 	br	1010694c <memchr+0x84>
101068ec:	10001526 	beq	r2,zero,10106944 <memchr+0x7c>
101068f0:	20c00003 	ldbu	r3,0(r4)
101068f4:	10bfffc4 	addi	r2,r2,-1
101068f8:	30c01426 	beq	r6,r3,1010694c <memchr+0x84>
101068fc:	21000044 	addi	r4,r4,1
10106900:	20c000cc 	andi	r3,r4,3
10106904:	183ff91e 	bne	r3,zero,101068ec <__alt_data_end+0xfffe68ec>
10106908:	020000c4 	movi	r8,3
1010690c:	40801136 	bltu	r8,r2,10106954 <memchr+0x8c>
10106910:	10000c26 	beq	r2,zero,10106944 <memchr+0x7c>
10106914:	20c00003 	ldbu	r3,0(r4)
10106918:	29403fcc 	andi	r5,r5,255
1010691c:	28c00b26 	beq	r5,r3,1010694c <memchr+0x84>
10106920:	20c00044 	addi	r3,r4,1
10106924:	39803fcc 	andi	r6,r7,255
10106928:	2089883a 	add	r4,r4,r2
1010692c:	00000306 	br	1010693c <memchr+0x74>
10106930:	18c00044 	addi	r3,r3,1
10106934:	197fffc3 	ldbu	r5,-1(r3)
10106938:	31400526 	beq	r6,r5,10106950 <memchr+0x88>
1010693c:	1805883a 	mov	r2,r3
10106940:	20fffb1e 	bne	r4,r3,10106930 <__alt_data_end+0xfffe6930>
10106944:	0005883a 	mov	r2,zero
10106948:	f800283a 	ret
1010694c:	2005883a 	mov	r2,r4
10106950:	f800283a 	ret
10106954:	28c03fcc 	andi	r3,r5,255
10106958:	1812923a 	slli	r9,r3,8
1010695c:	02ffbff4 	movhi	r11,65279
10106960:	02a02074 	movhi	r10,32897
10106964:	48d2b03a 	or	r9,r9,r3
10106968:	4806943a 	slli	r3,r9,16
1010696c:	5affbfc4 	addi	r11,r11,-257
10106970:	52a02004 	addi	r10,r10,-32640
10106974:	48d2b03a 	or	r9,r9,r3
10106978:	20c00017 	ldw	r3,0(r4)
1010697c:	48c6f03a 	xor	r3,r9,r3
10106980:	1acd883a 	add	r6,r3,r11
10106984:	00c6303a 	nor	r3,zero,r3
10106988:	30c6703a 	and	r3,r6,r3
1010698c:	1a86703a 	and	r3,r3,r10
10106990:	183fe01e 	bne	r3,zero,10106914 <__alt_data_end+0xfffe6914>
10106994:	10bfff04 	addi	r2,r2,-4
10106998:	21000104 	addi	r4,r4,4
1010699c:	40bff636 	bltu	r8,r2,10106978 <__alt_data_end+0xfffe6978>
101069a0:	003fdb06 	br	10106910 <__alt_data_end+0xfffe6910>
101069a4:	3005883a 	mov	r2,r6
101069a8:	003fd706 	br	10106908 <__alt_data_end+0xfffe6908>

101069ac <memcpy>:
101069ac:	defffd04 	addi	sp,sp,-12
101069b0:	dfc00215 	stw	ra,8(sp)
101069b4:	dc400115 	stw	r17,4(sp)
101069b8:	dc000015 	stw	r16,0(sp)
101069bc:	00c003c4 	movi	r3,15
101069c0:	2005883a 	mov	r2,r4
101069c4:	1980452e 	bgeu	r3,r6,10106adc <memcpy+0x130>
101069c8:	2906b03a 	or	r3,r5,r4
101069cc:	18c000cc 	andi	r3,r3,3
101069d0:	1800441e 	bne	r3,zero,10106ae4 <memcpy+0x138>
101069d4:	347ffc04 	addi	r17,r6,-16
101069d8:	8822d13a 	srli	r17,r17,4
101069dc:	28c00104 	addi	r3,r5,4
101069e0:	23400104 	addi	r13,r4,4
101069e4:	8820913a 	slli	r16,r17,4
101069e8:	2b000204 	addi	r12,r5,8
101069ec:	22c00204 	addi	r11,r4,8
101069f0:	84000504 	addi	r16,r16,20
101069f4:	2a800304 	addi	r10,r5,12
101069f8:	22400304 	addi	r9,r4,12
101069fc:	2c21883a 	add	r16,r5,r16
10106a00:	2811883a 	mov	r8,r5
10106a04:	200f883a 	mov	r7,r4
10106a08:	41000017 	ldw	r4,0(r8)
10106a0c:	1fc00017 	ldw	ra,0(r3)
10106a10:	63c00017 	ldw	r15,0(r12)
10106a14:	39000015 	stw	r4,0(r7)
10106a18:	53800017 	ldw	r14,0(r10)
10106a1c:	6fc00015 	stw	ra,0(r13)
10106a20:	5bc00015 	stw	r15,0(r11)
10106a24:	4b800015 	stw	r14,0(r9)
10106a28:	18c00404 	addi	r3,r3,16
10106a2c:	39c00404 	addi	r7,r7,16
10106a30:	42000404 	addi	r8,r8,16
10106a34:	6b400404 	addi	r13,r13,16
10106a38:	63000404 	addi	r12,r12,16
10106a3c:	5ac00404 	addi	r11,r11,16
10106a40:	52800404 	addi	r10,r10,16
10106a44:	4a400404 	addi	r9,r9,16
10106a48:	1c3fef1e 	bne	r3,r16,10106a08 <__alt_data_end+0xfffe6a08>
10106a4c:	89c00044 	addi	r7,r17,1
10106a50:	380e913a 	slli	r7,r7,4
10106a54:	310003cc 	andi	r4,r6,15
10106a58:	02c000c4 	movi	r11,3
10106a5c:	11c7883a 	add	r3,r2,r7
10106a60:	29cb883a 	add	r5,r5,r7
10106a64:	5900212e 	bgeu	r11,r4,10106aec <memcpy+0x140>
10106a68:	1813883a 	mov	r9,r3
10106a6c:	2811883a 	mov	r8,r5
10106a70:	200f883a 	mov	r7,r4
10106a74:	42800017 	ldw	r10,0(r8)
10106a78:	4a400104 	addi	r9,r9,4
10106a7c:	39ffff04 	addi	r7,r7,-4
10106a80:	4abfff15 	stw	r10,-4(r9)
10106a84:	42000104 	addi	r8,r8,4
10106a88:	59fffa36 	bltu	r11,r7,10106a74 <__alt_data_end+0xfffe6a74>
10106a8c:	213fff04 	addi	r4,r4,-4
10106a90:	2008d0ba 	srli	r4,r4,2
10106a94:	318000cc 	andi	r6,r6,3
10106a98:	21000044 	addi	r4,r4,1
10106a9c:	2109883a 	add	r4,r4,r4
10106aa0:	2109883a 	add	r4,r4,r4
10106aa4:	1907883a 	add	r3,r3,r4
10106aa8:	290b883a 	add	r5,r5,r4
10106aac:	30000626 	beq	r6,zero,10106ac8 <memcpy+0x11c>
10106ab0:	198d883a 	add	r6,r3,r6
10106ab4:	29c00003 	ldbu	r7,0(r5)
10106ab8:	18c00044 	addi	r3,r3,1
10106abc:	29400044 	addi	r5,r5,1
10106ac0:	19ffffc5 	stb	r7,-1(r3)
10106ac4:	19bffb1e 	bne	r3,r6,10106ab4 <__alt_data_end+0xfffe6ab4>
10106ac8:	dfc00217 	ldw	ra,8(sp)
10106acc:	dc400117 	ldw	r17,4(sp)
10106ad0:	dc000017 	ldw	r16,0(sp)
10106ad4:	dec00304 	addi	sp,sp,12
10106ad8:	f800283a 	ret
10106adc:	2007883a 	mov	r3,r4
10106ae0:	003ff206 	br	10106aac <__alt_data_end+0xfffe6aac>
10106ae4:	2007883a 	mov	r3,r4
10106ae8:	003ff106 	br	10106ab0 <__alt_data_end+0xfffe6ab0>
10106aec:	200d883a 	mov	r6,r4
10106af0:	003fee06 	br	10106aac <__alt_data_end+0xfffe6aac>

10106af4 <memmove>:
10106af4:	2005883a 	mov	r2,r4
10106af8:	29000b2e 	bgeu	r5,r4,10106b28 <memmove+0x34>
10106afc:	298f883a 	add	r7,r5,r6
10106b00:	21c0092e 	bgeu	r4,r7,10106b28 <memmove+0x34>
10106b04:	2187883a 	add	r3,r4,r6
10106b08:	198bc83a 	sub	r5,r3,r6
10106b0c:	30004826 	beq	r6,zero,10106c30 <memmove+0x13c>
10106b10:	39ffffc4 	addi	r7,r7,-1
10106b14:	39000003 	ldbu	r4,0(r7)
10106b18:	18ffffc4 	addi	r3,r3,-1
10106b1c:	19000005 	stb	r4,0(r3)
10106b20:	28fffb1e 	bne	r5,r3,10106b10 <__alt_data_end+0xfffe6b10>
10106b24:	f800283a 	ret
10106b28:	00c003c4 	movi	r3,15
10106b2c:	1980412e 	bgeu	r3,r6,10106c34 <memmove+0x140>
10106b30:	2886b03a 	or	r3,r5,r2
10106b34:	18c000cc 	andi	r3,r3,3
10106b38:	1800401e 	bne	r3,zero,10106c3c <memmove+0x148>
10106b3c:	33fffc04 	addi	r15,r6,-16
10106b40:	781ed13a 	srli	r15,r15,4
10106b44:	28c00104 	addi	r3,r5,4
10106b48:	13400104 	addi	r13,r2,4
10106b4c:	781c913a 	slli	r14,r15,4
10106b50:	2b000204 	addi	r12,r5,8
10106b54:	12c00204 	addi	r11,r2,8
10106b58:	73800504 	addi	r14,r14,20
10106b5c:	2a800304 	addi	r10,r5,12
10106b60:	12400304 	addi	r9,r2,12
10106b64:	2b9d883a 	add	r14,r5,r14
10106b68:	2811883a 	mov	r8,r5
10106b6c:	100f883a 	mov	r7,r2
10106b70:	41000017 	ldw	r4,0(r8)
10106b74:	39c00404 	addi	r7,r7,16
10106b78:	18c00404 	addi	r3,r3,16
10106b7c:	393ffc15 	stw	r4,-16(r7)
10106b80:	193ffc17 	ldw	r4,-16(r3)
10106b84:	6b400404 	addi	r13,r13,16
10106b88:	5ac00404 	addi	r11,r11,16
10106b8c:	693ffc15 	stw	r4,-16(r13)
10106b90:	61000017 	ldw	r4,0(r12)
10106b94:	4a400404 	addi	r9,r9,16
10106b98:	42000404 	addi	r8,r8,16
10106b9c:	593ffc15 	stw	r4,-16(r11)
10106ba0:	51000017 	ldw	r4,0(r10)
10106ba4:	63000404 	addi	r12,r12,16
10106ba8:	52800404 	addi	r10,r10,16
10106bac:	493ffc15 	stw	r4,-16(r9)
10106bb0:	1bbfef1e 	bne	r3,r14,10106b70 <__alt_data_end+0xfffe6b70>
10106bb4:	79000044 	addi	r4,r15,1
10106bb8:	2008913a 	slli	r4,r4,4
10106bbc:	328003cc 	andi	r10,r6,15
10106bc0:	02c000c4 	movi	r11,3
10106bc4:	1107883a 	add	r3,r2,r4
10106bc8:	290b883a 	add	r5,r5,r4
10106bcc:	5a801e2e 	bgeu	r11,r10,10106c48 <memmove+0x154>
10106bd0:	1813883a 	mov	r9,r3
10106bd4:	2811883a 	mov	r8,r5
10106bd8:	500f883a 	mov	r7,r10
10106bdc:	41000017 	ldw	r4,0(r8)
10106be0:	4a400104 	addi	r9,r9,4
10106be4:	39ffff04 	addi	r7,r7,-4
10106be8:	493fff15 	stw	r4,-4(r9)
10106bec:	42000104 	addi	r8,r8,4
10106bf0:	59fffa36 	bltu	r11,r7,10106bdc <__alt_data_end+0xfffe6bdc>
10106bf4:	513fff04 	addi	r4,r10,-4
10106bf8:	2008d0ba 	srli	r4,r4,2
10106bfc:	318000cc 	andi	r6,r6,3
10106c00:	21000044 	addi	r4,r4,1
10106c04:	2109883a 	add	r4,r4,r4
10106c08:	2109883a 	add	r4,r4,r4
10106c0c:	1907883a 	add	r3,r3,r4
10106c10:	290b883a 	add	r5,r5,r4
10106c14:	30000b26 	beq	r6,zero,10106c44 <memmove+0x150>
10106c18:	198d883a 	add	r6,r3,r6
10106c1c:	29c00003 	ldbu	r7,0(r5)
10106c20:	18c00044 	addi	r3,r3,1
10106c24:	29400044 	addi	r5,r5,1
10106c28:	19ffffc5 	stb	r7,-1(r3)
10106c2c:	19bffb1e 	bne	r3,r6,10106c1c <__alt_data_end+0xfffe6c1c>
10106c30:	f800283a 	ret
10106c34:	1007883a 	mov	r3,r2
10106c38:	003ff606 	br	10106c14 <__alt_data_end+0xfffe6c14>
10106c3c:	1007883a 	mov	r3,r2
10106c40:	003ff506 	br	10106c18 <__alt_data_end+0xfffe6c18>
10106c44:	f800283a 	ret
10106c48:	500d883a 	mov	r6,r10
10106c4c:	003ff106 	br	10106c14 <__alt_data_end+0xfffe6c14>

10106c50 <memset>:
10106c50:	20c000cc 	andi	r3,r4,3
10106c54:	2005883a 	mov	r2,r4
10106c58:	18004426 	beq	r3,zero,10106d6c <memset+0x11c>
10106c5c:	31ffffc4 	addi	r7,r6,-1
10106c60:	30004026 	beq	r6,zero,10106d64 <memset+0x114>
10106c64:	2813883a 	mov	r9,r5
10106c68:	200d883a 	mov	r6,r4
10106c6c:	2007883a 	mov	r3,r4
10106c70:	00000406 	br	10106c84 <memset+0x34>
10106c74:	3a3fffc4 	addi	r8,r7,-1
10106c78:	31800044 	addi	r6,r6,1
10106c7c:	38003926 	beq	r7,zero,10106d64 <memset+0x114>
10106c80:	400f883a 	mov	r7,r8
10106c84:	18c00044 	addi	r3,r3,1
10106c88:	32400005 	stb	r9,0(r6)
10106c8c:	1a0000cc 	andi	r8,r3,3
10106c90:	403ff81e 	bne	r8,zero,10106c74 <__alt_data_end+0xfffe6c74>
10106c94:	010000c4 	movi	r4,3
10106c98:	21c02d2e 	bgeu	r4,r7,10106d50 <memset+0x100>
10106c9c:	29003fcc 	andi	r4,r5,255
10106ca0:	200c923a 	slli	r6,r4,8
10106ca4:	3108b03a 	or	r4,r6,r4
10106ca8:	200c943a 	slli	r6,r4,16
10106cac:	218cb03a 	or	r6,r4,r6
10106cb0:	010003c4 	movi	r4,15
10106cb4:	21c0182e 	bgeu	r4,r7,10106d18 <memset+0xc8>
10106cb8:	3b3ffc04 	addi	r12,r7,-16
10106cbc:	6018d13a 	srli	r12,r12,4
10106cc0:	1a000104 	addi	r8,r3,4
10106cc4:	1ac00204 	addi	r11,r3,8
10106cc8:	6008913a 	slli	r4,r12,4
10106ccc:	1a800304 	addi	r10,r3,12
10106cd0:	1813883a 	mov	r9,r3
10106cd4:	21000504 	addi	r4,r4,20
10106cd8:	1909883a 	add	r4,r3,r4
10106cdc:	49800015 	stw	r6,0(r9)
10106ce0:	41800015 	stw	r6,0(r8)
10106ce4:	59800015 	stw	r6,0(r11)
10106ce8:	51800015 	stw	r6,0(r10)
10106cec:	42000404 	addi	r8,r8,16
10106cf0:	4a400404 	addi	r9,r9,16
10106cf4:	5ac00404 	addi	r11,r11,16
10106cf8:	52800404 	addi	r10,r10,16
10106cfc:	413ff71e 	bne	r8,r4,10106cdc <__alt_data_end+0xfffe6cdc>
10106d00:	63000044 	addi	r12,r12,1
10106d04:	6018913a 	slli	r12,r12,4
10106d08:	39c003cc 	andi	r7,r7,15
10106d0c:	010000c4 	movi	r4,3
10106d10:	1b07883a 	add	r3,r3,r12
10106d14:	21c00e2e 	bgeu	r4,r7,10106d50 <memset+0x100>
10106d18:	1813883a 	mov	r9,r3
10106d1c:	3811883a 	mov	r8,r7
10106d20:	010000c4 	movi	r4,3
10106d24:	49800015 	stw	r6,0(r9)
10106d28:	423fff04 	addi	r8,r8,-4
10106d2c:	4a400104 	addi	r9,r9,4
10106d30:	223ffc36 	bltu	r4,r8,10106d24 <__alt_data_end+0xfffe6d24>
10106d34:	393fff04 	addi	r4,r7,-4
10106d38:	2008d0ba 	srli	r4,r4,2
10106d3c:	39c000cc 	andi	r7,r7,3
10106d40:	21000044 	addi	r4,r4,1
10106d44:	2109883a 	add	r4,r4,r4
10106d48:	2109883a 	add	r4,r4,r4
10106d4c:	1907883a 	add	r3,r3,r4
10106d50:	38000526 	beq	r7,zero,10106d68 <memset+0x118>
10106d54:	19cf883a 	add	r7,r3,r7
10106d58:	19400005 	stb	r5,0(r3)
10106d5c:	18c00044 	addi	r3,r3,1
10106d60:	38fffd1e 	bne	r7,r3,10106d58 <__alt_data_end+0xfffe6d58>
10106d64:	f800283a 	ret
10106d68:	f800283a 	ret
10106d6c:	2007883a 	mov	r3,r4
10106d70:	300f883a 	mov	r7,r6
10106d74:	003fc706 	br	10106c94 <__alt_data_end+0xfffe6c94>

10106d78 <_Balloc>:
10106d78:	20801317 	ldw	r2,76(r4)
10106d7c:	defffc04 	addi	sp,sp,-16
10106d80:	dc400115 	stw	r17,4(sp)
10106d84:	dc000015 	stw	r16,0(sp)
10106d88:	dfc00315 	stw	ra,12(sp)
10106d8c:	dc800215 	stw	r18,8(sp)
10106d90:	2023883a 	mov	r17,r4
10106d94:	2821883a 	mov	r16,r5
10106d98:	10000f26 	beq	r2,zero,10106dd8 <_Balloc+0x60>
10106d9c:	8407883a 	add	r3,r16,r16
10106da0:	18c7883a 	add	r3,r3,r3
10106da4:	10c7883a 	add	r3,r2,r3
10106da8:	18800017 	ldw	r2,0(r3)
10106dac:	10001126 	beq	r2,zero,10106df4 <_Balloc+0x7c>
10106db0:	11000017 	ldw	r4,0(r2)
10106db4:	19000015 	stw	r4,0(r3)
10106db8:	10000415 	stw	zero,16(r2)
10106dbc:	10000315 	stw	zero,12(r2)
10106dc0:	dfc00317 	ldw	ra,12(sp)
10106dc4:	dc800217 	ldw	r18,8(sp)
10106dc8:	dc400117 	ldw	r17,4(sp)
10106dcc:	dc000017 	ldw	r16,0(sp)
10106dd0:	dec00404 	addi	sp,sp,16
10106dd4:	f800283a 	ret
10106dd8:	01800844 	movi	r6,33
10106ddc:	01400104 	movi	r5,4
10106de0:	0109cb40 	call	10109cb4 <_calloc_r>
10106de4:	88801315 	stw	r2,76(r17)
10106de8:	103fec1e 	bne	r2,zero,10106d9c <__alt_data_end+0xfffe6d9c>
10106dec:	0005883a 	mov	r2,zero
10106df0:	003ff306 	br	10106dc0 <__alt_data_end+0xfffe6dc0>
10106df4:	01400044 	movi	r5,1
10106df8:	2c24983a 	sll	r18,r5,r16
10106dfc:	8809883a 	mov	r4,r17
10106e00:	91800144 	addi	r6,r18,5
10106e04:	318d883a 	add	r6,r6,r6
10106e08:	318d883a 	add	r6,r6,r6
10106e0c:	0109cb40 	call	10109cb4 <_calloc_r>
10106e10:	103ff626 	beq	r2,zero,10106dec <__alt_data_end+0xfffe6dec>
10106e14:	14000115 	stw	r16,4(r2)
10106e18:	14800215 	stw	r18,8(r2)
10106e1c:	003fe606 	br	10106db8 <__alt_data_end+0xfffe6db8>

10106e20 <_Bfree>:
10106e20:	28000826 	beq	r5,zero,10106e44 <_Bfree+0x24>
10106e24:	28c00117 	ldw	r3,4(r5)
10106e28:	20801317 	ldw	r2,76(r4)
10106e2c:	18c7883a 	add	r3,r3,r3
10106e30:	18c7883a 	add	r3,r3,r3
10106e34:	10c5883a 	add	r2,r2,r3
10106e38:	10c00017 	ldw	r3,0(r2)
10106e3c:	28c00015 	stw	r3,0(r5)
10106e40:	11400015 	stw	r5,0(r2)
10106e44:	f800283a 	ret

10106e48 <__multadd>:
10106e48:	defffa04 	addi	sp,sp,-24
10106e4c:	dc800315 	stw	r18,12(sp)
10106e50:	dc400215 	stw	r17,8(sp)
10106e54:	dc000115 	stw	r16,4(sp)
10106e58:	2823883a 	mov	r17,r5
10106e5c:	2c000417 	ldw	r16,16(r5)
10106e60:	dfc00515 	stw	ra,20(sp)
10106e64:	dcc00415 	stw	r19,16(sp)
10106e68:	2025883a 	mov	r18,r4
10106e6c:	29400504 	addi	r5,r5,20
10106e70:	0011883a 	mov	r8,zero
10106e74:	28c00017 	ldw	r3,0(r5)
10106e78:	29400104 	addi	r5,r5,4
10106e7c:	42000044 	addi	r8,r8,1
10106e80:	18bfffcc 	andi	r2,r3,65535
10106e84:	1185383a 	mul	r2,r2,r6
10106e88:	1806d43a 	srli	r3,r3,16
10106e8c:	11cf883a 	add	r7,r2,r7
10106e90:	3808d43a 	srli	r4,r7,16
10106e94:	1987383a 	mul	r3,r3,r6
10106e98:	38bfffcc 	andi	r2,r7,65535
10106e9c:	1907883a 	add	r3,r3,r4
10106ea0:	1808943a 	slli	r4,r3,16
10106ea4:	180ed43a 	srli	r7,r3,16
10106ea8:	2085883a 	add	r2,r4,r2
10106eac:	28bfff15 	stw	r2,-4(r5)
10106eb0:	443ff016 	blt	r8,r16,10106e74 <__alt_data_end+0xfffe6e74>
10106eb4:	38000926 	beq	r7,zero,10106edc <__multadd+0x94>
10106eb8:	88800217 	ldw	r2,8(r17)
10106ebc:	80800f0e 	bge	r16,r2,10106efc <__multadd+0xb4>
10106ec0:	80800144 	addi	r2,r16,5
10106ec4:	1085883a 	add	r2,r2,r2
10106ec8:	1085883a 	add	r2,r2,r2
10106ecc:	8885883a 	add	r2,r17,r2
10106ed0:	11c00015 	stw	r7,0(r2)
10106ed4:	84000044 	addi	r16,r16,1
10106ed8:	8c000415 	stw	r16,16(r17)
10106edc:	8805883a 	mov	r2,r17
10106ee0:	dfc00517 	ldw	ra,20(sp)
10106ee4:	dcc00417 	ldw	r19,16(sp)
10106ee8:	dc800317 	ldw	r18,12(sp)
10106eec:	dc400217 	ldw	r17,8(sp)
10106ef0:	dc000117 	ldw	r16,4(sp)
10106ef4:	dec00604 	addi	sp,sp,24
10106ef8:	f800283a 	ret
10106efc:	89400117 	ldw	r5,4(r17)
10106f00:	9009883a 	mov	r4,r18
10106f04:	d9c00015 	stw	r7,0(sp)
10106f08:	29400044 	addi	r5,r5,1
10106f0c:	0106d780 	call	10106d78 <_Balloc>
10106f10:	89800417 	ldw	r6,16(r17)
10106f14:	89400304 	addi	r5,r17,12
10106f18:	11000304 	addi	r4,r2,12
10106f1c:	31800084 	addi	r6,r6,2
10106f20:	318d883a 	add	r6,r6,r6
10106f24:	318d883a 	add	r6,r6,r6
10106f28:	1027883a 	mov	r19,r2
10106f2c:	01069ac0 	call	101069ac <memcpy>
10106f30:	d9c00017 	ldw	r7,0(sp)
10106f34:	88000a26 	beq	r17,zero,10106f60 <__multadd+0x118>
10106f38:	88c00117 	ldw	r3,4(r17)
10106f3c:	90801317 	ldw	r2,76(r18)
10106f40:	18c7883a 	add	r3,r3,r3
10106f44:	18c7883a 	add	r3,r3,r3
10106f48:	10c5883a 	add	r2,r2,r3
10106f4c:	10c00017 	ldw	r3,0(r2)
10106f50:	88c00015 	stw	r3,0(r17)
10106f54:	14400015 	stw	r17,0(r2)
10106f58:	9823883a 	mov	r17,r19
10106f5c:	003fd806 	br	10106ec0 <__alt_data_end+0xfffe6ec0>
10106f60:	9823883a 	mov	r17,r19
10106f64:	003fd606 	br	10106ec0 <__alt_data_end+0xfffe6ec0>

10106f68 <__s2b>:
10106f68:	defff904 	addi	sp,sp,-28
10106f6c:	dc400115 	stw	r17,4(sp)
10106f70:	dc000015 	stw	r16,0(sp)
10106f74:	2023883a 	mov	r17,r4
10106f78:	2821883a 	mov	r16,r5
10106f7c:	39000204 	addi	r4,r7,8
10106f80:	01400244 	movi	r5,9
10106f84:	dcc00315 	stw	r19,12(sp)
10106f88:	dc800215 	stw	r18,8(sp)
10106f8c:	dfc00615 	stw	ra,24(sp)
10106f90:	dd400515 	stw	r21,20(sp)
10106f94:	dd000415 	stw	r20,16(sp)
10106f98:	3825883a 	mov	r18,r7
10106f9c:	3027883a 	mov	r19,r6
10106fa0:	0100d2c0 	call	10100d2c <__divsi3>
10106fa4:	00c00044 	movi	r3,1
10106fa8:	000b883a 	mov	r5,zero
10106fac:	1880030e 	bge	r3,r2,10106fbc <__s2b+0x54>
10106fb0:	18c7883a 	add	r3,r3,r3
10106fb4:	29400044 	addi	r5,r5,1
10106fb8:	18bffd16 	blt	r3,r2,10106fb0 <__alt_data_end+0xfffe6fb0>
10106fbc:	8809883a 	mov	r4,r17
10106fc0:	0106d780 	call	10106d78 <_Balloc>
10106fc4:	d8c00717 	ldw	r3,28(sp)
10106fc8:	10c00515 	stw	r3,20(r2)
10106fcc:	00c00044 	movi	r3,1
10106fd0:	10c00415 	stw	r3,16(r2)
10106fd4:	00c00244 	movi	r3,9
10106fd8:	1cc0210e 	bge	r3,r19,10107060 <__s2b+0xf8>
10106fdc:	80eb883a 	add	r21,r16,r3
10106fe0:	a829883a 	mov	r20,r21
10106fe4:	84e1883a 	add	r16,r16,r19
10106fe8:	a1c00007 	ldb	r7,0(r20)
10106fec:	01800284 	movi	r6,10
10106ff0:	a5000044 	addi	r20,r20,1
10106ff4:	100b883a 	mov	r5,r2
10106ff8:	39fff404 	addi	r7,r7,-48
10106ffc:	8809883a 	mov	r4,r17
10107000:	0106e480 	call	10106e48 <__multadd>
10107004:	a43ff81e 	bne	r20,r16,10106fe8 <__alt_data_end+0xfffe6fe8>
10107008:	ace1883a 	add	r16,r21,r19
1010700c:	843ffe04 	addi	r16,r16,-8
10107010:	9c800a0e 	bge	r19,r18,1010703c <__s2b+0xd4>
10107014:	94e5c83a 	sub	r18,r18,r19
10107018:	84a5883a 	add	r18,r16,r18
1010701c:	81c00007 	ldb	r7,0(r16)
10107020:	01800284 	movi	r6,10
10107024:	84000044 	addi	r16,r16,1
10107028:	100b883a 	mov	r5,r2
1010702c:	39fff404 	addi	r7,r7,-48
10107030:	8809883a 	mov	r4,r17
10107034:	0106e480 	call	10106e48 <__multadd>
10107038:	84bff81e 	bne	r16,r18,1010701c <__alt_data_end+0xfffe701c>
1010703c:	dfc00617 	ldw	ra,24(sp)
10107040:	dd400517 	ldw	r21,20(sp)
10107044:	dd000417 	ldw	r20,16(sp)
10107048:	dcc00317 	ldw	r19,12(sp)
1010704c:	dc800217 	ldw	r18,8(sp)
10107050:	dc400117 	ldw	r17,4(sp)
10107054:	dc000017 	ldw	r16,0(sp)
10107058:	dec00704 	addi	sp,sp,28
1010705c:	f800283a 	ret
10107060:	84000284 	addi	r16,r16,10
10107064:	1827883a 	mov	r19,r3
10107068:	003fe906 	br	10107010 <__alt_data_end+0xfffe7010>

1010706c <__hi0bits>:
1010706c:	20bfffec 	andhi	r2,r4,65535
10107070:	1000141e 	bne	r2,zero,101070c4 <__hi0bits+0x58>
10107074:	2008943a 	slli	r4,r4,16
10107078:	00800404 	movi	r2,16
1010707c:	20ffc02c 	andhi	r3,r4,65280
10107080:	1800021e 	bne	r3,zero,1010708c <__hi0bits+0x20>
10107084:	2008923a 	slli	r4,r4,8
10107088:	10800204 	addi	r2,r2,8
1010708c:	20fc002c 	andhi	r3,r4,61440
10107090:	1800021e 	bne	r3,zero,1010709c <__hi0bits+0x30>
10107094:	2008913a 	slli	r4,r4,4
10107098:	10800104 	addi	r2,r2,4
1010709c:	20f0002c 	andhi	r3,r4,49152
101070a0:	1800031e 	bne	r3,zero,101070b0 <__hi0bits+0x44>
101070a4:	2109883a 	add	r4,r4,r4
101070a8:	10800084 	addi	r2,r2,2
101070ac:	2109883a 	add	r4,r4,r4
101070b0:	20000316 	blt	r4,zero,101070c0 <__hi0bits+0x54>
101070b4:	2110002c 	andhi	r4,r4,16384
101070b8:	2000041e 	bne	r4,zero,101070cc <__hi0bits+0x60>
101070bc:	00800804 	movi	r2,32
101070c0:	f800283a 	ret
101070c4:	0005883a 	mov	r2,zero
101070c8:	003fec06 	br	1010707c <__alt_data_end+0xfffe707c>
101070cc:	10800044 	addi	r2,r2,1
101070d0:	f800283a 	ret

101070d4 <__lo0bits>:
101070d4:	20c00017 	ldw	r3,0(r4)
101070d8:	188001cc 	andi	r2,r3,7
101070dc:	10000826 	beq	r2,zero,10107100 <__lo0bits+0x2c>
101070e0:	1880004c 	andi	r2,r3,1
101070e4:	1000211e 	bne	r2,zero,1010716c <__lo0bits+0x98>
101070e8:	1880008c 	andi	r2,r3,2
101070ec:	1000211e 	bne	r2,zero,10107174 <__lo0bits+0xa0>
101070f0:	1806d0ba 	srli	r3,r3,2
101070f4:	00800084 	movi	r2,2
101070f8:	20c00015 	stw	r3,0(r4)
101070fc:	f800283a 	ret
10107100:	18bfffcc 	andi	r2,r3,65535
10107104:	10001326 	beq	r2,zero,10107154 <__lo0bits+0x80>
10107108:	0005883a 	mov	r2,zero
1010710c:	19403fcc 	andi	r5,r3,255
10107110:	2800021e 	bne	r5,zero,1010711c <__lo0bits+0x48>
10107114:	1806d23a 	srli	r3,r3,8
10107118:	10800204 	addi	r2,r2,8
1010711c:	194003cc 	andi	r5,r3,15
10107120:	2800021e 	bne	r5,zero,1010712c <__lo0bits+0x58>
10107124:	1806d13a 	srli	r3,r3,4
10107128:	10800104 	addi	r2,r2,4
1010712c:	194000cc 	andi	r5,r3,3
10107130:	2800021e 	bne	r5,zero,1010713c <__lo0bits+0x68>
10107134:	1806d0ba 	srli	r3,r3,2
10107138:	10800084 	addi	r2,r2,2
1010713c:	1940004c 	andi	r5,r3,1
10107140:	2800081e 	bne	r5,zero,10107164 <__lo0bits+0x90>
10107144:	1806d07a 	srli	r3,r3,1
10107148:	1800051e 	bne	r3,zero,10107160 <__lo0bits+0x8c>
1010714c:	00800804 	movi	r2,32
10107150:	f800283a 	ret
10107154:	1806d43a 	srli	r3,r3,16
10107158:	00800404 	movi	r2,16
1010715c:	003feb06 	br	1010710c <__alt_data_end+0xfffe710c>
10107160:	10800044 	addi	r2,r2,1
10107164:	20c00015 	stw	r3,0(r4)
10107168:	f800283a 	ret
1010716c:	0005883a 	mov	r2,zero
10107170:	f800283a 	ret
10107174:	1806d07a 	srli	r3,r3,1
10107178:	00800044 	movi	r2,1
1010717c:	20c00015 	stw	r3,0(r4)
10107180:	f800283a 	ret

10107184 <__i2b>:
10107184:	defffd04 	addi	sp,sp,-12
10107188:	dc000015 	stw	r16,0(sp)
1010718c:	04000044 	movi	r16,1
10107190:	dc400115 	stw	r17,4(sp)
10107194:	2823883a 	mov	r17,r5
10107198:	800b883a 	mov	r5,r16
1010719c:	dfc00215 	stw	ra,8(sp)
101071a0:	0106d780 	call	10106d78 <_Balloc>
101071a4:	14400515 	stw	r17,20(r2)
101071a8:	14000415 	stw	r16,16(r2)
101071ac:	dfc00217 	ldw	ra,8(sp)
101071b0:	dc400117 	ldw	r17,4(sp)
101071b4:	dc000017 	ldw	r16,0(sp)
101071b8:	dec00304 	addi	sp,sp,12
101071bc:	f800283a 	ret

101071c0 <__multiply>:
101071c0:	defffa04 	addi	sp,sp,-24
101071c4:	dcc00315 	stw	r19,12(sp)
101071c8:	dc800215 	stw	r18,8(sp)
101071cc:	34c00417 	ldw	r19,16(r6)
101071d0:	2c800417 	ldw	r18,16(r5)
101071d4:	dd000415 	stw	r20,16(sp)
101071d8:	dc400115 	stw	r17,4(sp)
101071dc:	dfc00515 	stw	ra,20(sp)
101071e0:	dc000015 	stw	r16,0(sp)
101071e4:	2829883a 	mov	r20,r5
101071e8:	3023883a 	mov	r17,r6
101071ec:	94c0050e 	bge	r18,r19,10107204 <__multiply+0x44>
101071f0:	9007883a 	mov	r3,r18
101071f4:	3029883a 	mov	r20,r6
101071f8:	9825883a 	mov	r18,r19
101071fc:	2823883a 	mov	r17,r5
10107200:	1827883a 	mov	r19,r3
10107204:	a0800217 	ldw	r2,8(r20)
10107208:	94e1883a 	add	r16,r18,r19
1010720c:	a1400117 	ldw	r5,4(r20)
10107210:	1400010e 	bge	r2,r16,10107218 <__multiply+0x58>
10107214:	29400044 	addi	r5,r5,1
10107218:	0106d780 	call	10106d78 <_Balloc>
1010721c:	8415883a 	add	r10,r16,r16
10107220:	12c00504 	addi	r11,r2,20
10107224:	5295883a 	add	r10,r10,r10
10107228:	5a95883a 	add	r10,r11,r10
1010722c:	5807883a 	mov	r3,r11
10107230:	5a80032e 	bgeu	r11,r10,10107240 <__multiply+0x80>
10107234:	18000015 	stw	zero,0(r3)
10107238:	18c00104 	addi	r3,r3,4
1010723c:	1abffd36 	bltu	r3,r10,10107234 <__alt_data_end+0xfffe7234>
10107240:	9ce7883a 	add	r19,r19,r19
10107244:	94a5883a 	add	r18,r18,r18
10107248:	89800504 	addi	r6,r17,20
1010724c:	9ce7883a 	add	r19,r19,r19
10107250:	a3400504 	addi	r13,r20,20
10107254:	94a5883a 	add	r18,r18,r18
10107258:	34d9883a 	add	r12,r6,r19
1010725c:	6c93883a 	add	r9,r13,r18
10107260:	3300422e 	bgeu	r6,r12,1010736c <__multiply+0x1ac>
10107264:	37c00017 	ldw	ra,0(r6)
10107268:	fbffffcc 	andi	r15,ra,65535
1010726c:	78001b26 	beq	r15,zero,101072dc <__multiply+0x11c>
10107270:	5811883a 	mov	r8,r11
10107274:	681d883a 	mov	r14,r13
10107278:	000f883a 	mov	r7,zero
1010727c:	71000017 	ldw	r4,0(r14)
10107280:	40c00017 	ldw	r3,0(r8)
10107284:	73800104 	addi	r14,r14,4
10107288:	217fffcc 	andi	r5,r4,65535
1010728c:	2bcb383a 	mul	r5,r5,r15
10107290:	2008d43a 	srli	r4,r4,16
10107294:	1c7fffcc 	andi	r17,r3,65535
10107298:	2c4b883a 	add	r5,r5,r17
1010729c:	29cb883a 	add	r5,r5,r7
101072a0:	23c9383a 	mul	r4,r4,r15
101072a4:	1806d43a 	srli	r3,r3,16
101072a8:	280ed43a 	srli	r7,r5,16
101072ac:	297fffcc 	andi	r5,r5,65535
101072b0:	20c7883a 	add	r3,r4,r3
101072b4:	19c7883a 	add	r3,r3,r7
101072b8:	1808943a 	slli	r4,r3,16
101072bc:	4023883a 	mov	r17,r8
101072c0:	180ed43a 	srli	r7,r3,16
101072c4:	214ab03a 	or	r5,r4,r5
101072c8:	41400015 	stw	r5,0(r8)
101072cc:	42000104 	addi	r8,r8,4
101072d0:	727fea36 	bltu	r14,r9,1010727c <__alt_data_end+0xfffe727c>
101072d4:	89c00115 	stw	r7,4(r17)
101072d8:	37c00017 	ldw	ra,0(r6)
101072dc:	f83ed43a 	srli	ra,ra,16
101072e0:	f8001f26 	beq	ra,zero,10107360 <__multiply+0x1a0>
101072e4:	58c00017 	ldw	r3,0(r11)
101072e8:	681d883a 	mov	r14,r13
101072ec:	581f883a 	mov	r15,r11
101072f0:	1811883a 	mov	r8,r3
101072f4:	5825883a 	mov	r18,r11
101072f8:	000f883a 	mov	r7,zero
101072fc:	00000106 	br	10107304 <__multiply+0x144>
10107300:	8825883a 	mov	r18,r17
10107304:	7140000b 	ldhu	r5,0(r14)
10107308:	4010d43a 	srli	r8,r8,16
1010730c:	193fffcc 	andi	r4,r3,65535
10107310:	2fcb383a 	mul	r5,r5,ra
10107314:	7bc00104 	addi	r15,r15,4
10107318:	73800104 	addi	r14,r14,4
1010731c:	2a0b883a 	add	r5,r5,r8
10107320:	29cb883a 	add	r5,r5,r7
10107324:	2806943a 	slli	r3,r5,16
10107328:	94400104 	addi	r17,r18,4
1010732c:	280ad43a 	srli	r5,r5,16
10107330:	1908b03a 	or	r4,r3,r4
10107334:	793fff15 	stw	r4,-4(r15)
10107338:	70ffff17 	ldw	r3,-4(r14)
1010733c:	8a000017 	ldw	r8,0(r17)
10107340:	1806d43a 	srli	r3,r3,16
10107344:	413fffcc 	andi	r4,r8,65535
10107348:	1fc7383a 	mul	r3,r3,ra
1010734c:	1907883a 	add	r3,r3,r4
10107350:	1947883a 	add	r3,r3,r5
10107354:	180ed43a 	srli	r7,r3,16
10107358:	727fe936 	bltu	r14,r9,10107300 <__alt_data_end+0xfffe7300>
1010735c:	90c00115 	stw	r3,4(r18)
10107360:	31800104 	addi	r6,r6,4
10107364:	5ac00104 	addi	r11,r11,4
10107368:	333fbe36 	bltu	r6,r12,10107264 <__alt_data_end+0xfffe7264>
1010736c:	0400090e 	bge	zero,r16,10107394 <__multiply+0x1d4>
10107370:	50ffff17 	ldw	r3,-4(r10)
10107374:	52bfff04 	addi	r10,r10,-4
10107378:	18000326 	beq	r3,zero,10107388 <__multiply+0x1c8>
1010737c:	00000506 	br	10107394 <__multiply+0x1d4>
10107380:	50c00017 	ldw	r3,0(r10)
10107384:	1800031e 	bne	r3,zero,10107394 <__multiply+0x1d4>
10107388:	843fffc4 	addi	r16,r16,-1
1010738c:	52bfff04 	addi	r10,r10,-4
10107390:	803ffb1e 	bne	r16,zero,10107380 <__alt_data_end+0xfffe7380>
10107394:	14000415 	stw	r16,16(r2)
10107398:	dfc00517 	ldw	ra,20(sp)
1010739c:	dd000417 	ldw	r20,16(sp)
101073a0:	dcc00317 	ldw	r19,12(sp)
101073a4:	dc800217 	ldw	r18,8(sp)
101073a8:	dc400117 	ldw	r17,4(sp)
101073ac:	dc000017 	ldw	r16,0(sp)
101073b0:	dec00604 	addi	sp,sp,24
101073b4:	f800283a 	ret

101073b8 <__pow5mult>:
101073b8:	defffa04 	addi	sp,sp,-24
101073bc:	dcc00315 	stw	r19,12(sp)
101073c0:	dc000015 	stw	r16,0(sp)
101073c4:	dfc00515 	stw	ra,20(sp)
101073c8:	dd000415 	stw	r20,16(sp)
101073cc:	dc800215 	stw	r18,8(sp)
101073d0:	dc400115 	stw	r17,4(sp)
101073d4:	308000cc 	andi	r2,r6,3
101073d8:	3021883a 	mov	r16,r6
101073dc:	2027883a 	mov	r19,r4
101073e0:	10002f1e 	bne	r2,zero,101074a0 <__pow5mult+0xe8>
101073e4:	2825883a 	mov	r18,r5
101073e8:	8021d0ba 	srai	r16,r16,2
101073ec:	80001a26 	beq	r16,zero,10107458 <__pow5mult+0xa0>
101073f0:	9c401217 	ldw	r17,72(r19)
101073f4:	8800061e 	bne	r17,zero,10107410 <__pow5mult+0x58>
101073f8:	00003406 	br	101074cc <__pow5mult+0x114>
101073fc:	8021d07a 	srai	r16,r16,1
10107400:	80001526 	beq	r16,zero,10107458 <__pow5mult+0xa0>
10107404:	88800017 	ldw	r2,0(r17)
10107408:	10001c26 	beq	r2,zero,1010747c <__pow5mult+0xc4>
1010740c:	1023883a 	mov	r17,r2
10107410:	8080004c 	andi	r2,r16,1
10107414:	103ff926 	beq	r2,zero,101073fc <__alt_data_end+0xfffe73fc>
10107418:	880d883a 	mov	r6,r17
1010741c:	900b883a 	mov	r5,r18
10107420:	9809883a 	mov	r4,r19
10107424:	01071c00 	call	101071c0 <__multiply>
10107428:	90001b26 	beq	r18,zero,10107498 <__pow5mult+0xe0>
1010742c:	91000117 	ldw	r4,4(r18)
10107430:	98c01317 	ldw	r3,76(r19)
10107434:	8021d07a 	srai	r16,r16,1
10107438:	2109883a 	add	r4,r4,r4
1010743c:	2109883a 	add	r4,r4,r4
10107440:	1907883a 	add	r3,r3,r4
10107444:	19000017 	ldw	r4,0(r3)
10107448:	91000015 	stw	r4,0(r18)
1010744c:	1c800015 	stw	r18,0(r3)
10107450:	1025883a 	mov	r18,r2
10107454:	803feb1e 	bne	r16,zero,10107404 <__alt_data_end+0xfffe7404>
10107458:	9005883a 	mov	r2,r18
1010745c:	dfc00517 	ldw	ra,20(sp)
10107460:	dd000417 	ldw	r20,16(sp)
10107464:	dcc00317 	ldw	r19,12(sp)
10107468:	dc800217 	ldw	r18,8(sp)
1010746c:	dc400117 	ldw	r17,4(sp)
10107470:	dc000017 	ldw	r16,0(sp)
10107474:	dec00604 	addi	sp,sp,24
10107478:	f800283a 	ret
1010747c:	880d883a 	mov	r6,r17
10107480:	880b883a 	mov	r5,r17
10107484:	9809883a 	mov	r4,r19
10107488:	01071c00 	call	101071c0 <__multiply>
1010748c:	88800015 	stw	r2,0(r17)
10107490:	10000015 	stw	zero,0(r2)
10107494:	003fdd06 	br	1010740c <__alt_data_end+0xfffe740c>
10107498:	1025883a 	mov	r18,r2
1010749c:	003fd706 	br	101073fc <__alt_data_end+0xfffe73fc>
101074a0:	10bfffc4 	addi	r2,r2,-1
101074a4:	1085883a 	add	r2,r2,r2
101074a8:	00c40474 	movhi	r3,4113
101074ac:	18c0ba04 	addi	r3,r3,744
101074b0:	1085883a 	add	r2,r2,r2
101074b4:	1885883a 	add	r2,r3,r2
101074b8:	11800017 	ldw	r6,0(r2)
101074bc:	000f883a 	mov	r7,zero
101074c0:	0106e480 	call	10106e48 <__multadd>
101074c4:	1025883a 	mov	r18,r2
101074c8:	003fc706 	br	101073e8 <__alt_data_end+0xfffe73e8>
101074cc:	05000044 	movi	r20,1
101074d0:	a00b883a 	mov	r5,r20
101074d4:	9809883a 	mov	r4,r19
101074d8:	0106d780 	call	10106d78 <_Balloc>
101074dc:	1023883a 	mov	r17,r2
101074e0:	00809c44 	movi	r2,625
101074e4:	88800515 	stw	r2,20(r17)
101074e8:	8d000415 	stw	r20,16(r17)
101074ec:	9c401215 	stw	r17,72(r19)
101074f0:	88000015 	stw	zero,0(r17)
101074f4:	003fc606 	br	10107410 <__alt_data_end+0xfffe7410>

101074f8 <__lshift>:
101074f8:	defff904 	addi	sp,sp,-28
101074fc:	dd400515 	stw	r21,20(sp)
10107500:	dcc00315 	stw	r19,12(sp)
10107504:	302bd17a 	srai	r21,r6,5
10107508:	2cc00417 	ldw	r19,16(r5)
1010750c:	28800217 	ldw	r2,8(r5)
10107510:	dd000415 	stw	r20,16(sp)
10107514:	ace7883a 	add	r19,r21,r19
10107518:	dc800215 	stw	r18,8(sp)
1010751c:	dc400115 	stw	r17,4(sp)
10107520:	dc000015 	stw	r16,0(sp)
10107524:	dfc00615 	stw	ra,24(sp)
10107528:	9c000044 	addi	r16,r19,1
1010752c:	2823883a 	mov	r17,r5
10107530:	3029883a 	mov	r20,r6
10107534:	2025883a 	mov	r18,r4
10107538:	29400117 	ldw	r5,4(r5)
1010753c:	1400030e 	bge	r2,r16,1010754c <__lshift+0x54>
10107540:	1085883a 	add	r2,r2,r2
10107544:	29400044 	addi	r5,r5,1
10107548:	143ffd16 	blt	r2,r16,10107540 <__alt_data_end+0xfffe7540>
1010754c:	9009883a 	mov	r4,r18
10107550:	0106d780 	call	10106d78 <_Balloc>
10107554:	10c00504 	addi	r3,r2,20
10107558:	0540070e 	bge	zero,r21,10107578 <__lshift+0x80>
1010755c:	ad6b883a 	add	r21,r21,r21
10107560:	ad6b883a 	add	r21,r21,r21
10107564:	1809883a 	mov	r4,r3
10107568:	1d47883a 	add	r3,r3,r21
1010756c:	20000015 	stw	zero,0(r4)
10107570:	21000104 	addi	r4,r4,4
10107574:	193ffd1e 	bne	r3,r4,1010756c <__alt_data_end+0xfffe756c>
10107578:	8a000417 	ldw	r8,16(r17)
1010757c:	89000504 	addi	r4,r17,20
10107580:	a18007cc 	andi	r6,r20,31
10107584:	4211883a 	add	r8,r8,r8
10107588:	4211883a 	add	r8,r8,r8
1010758c:	2211883a 	add	r8,r4,r8
10107590:	30002326 	beq	r6,zero,10107620 <__lshift+0x128>
10107594:	02400804 	movi	r9,32
10107598:	4993c83a 	sub	r9,r9,r6
1010759c:	000b883a 	mov	r5,zero
101075a0:	21c00017 	ldw	r7,0(r4)
101075a4:	1815883a 	mov	r10,r3
101075a8:	18c00104 	addi	r3,r3,4
101075ac:	398e983a 	sll	r7,r7,r6
101075b0:	21000104 	addi	r4,r4,4
101075b4:	394ab03a 	or	r5,r7,r5
101075b8:	197fff15 	stw	r5,-4(r3)
101075bc:	217fff17 	ldw	r5,-4(r4)
101075c0:	2a4ad83a 	srl	r5,r5,r9
101075c4:	223ff636 	bltu	r4,r8,101075a0 <__alt_data_end+0xfffe75a0>
101075c8:	51400115 	stw	r5,4(r10)
101075cc:	28001a1e 	bne	r5,zero,10107638 <__lshift+0x140>
101075d0:	843fffc4 	addi	r16,r16,-1
101075d4:	14000415 	stw	r16,16(r2)
101075d8:	88000826 	beq	r17,zero,101075fc <__lshift+0x104>
101075dc:	89000117 	ldw	r4,4(r17)
101075e0:	90c01317 	ldw	r3,76(r18)
101075e4:	2109883a 	add	r4,r4,r4
101075e8:	2109883a 	add	r4,r4,r4
101075ec:	1907883a 	add	r3,r3,r4
101075f0:	19000017 	ldw	r4,0(r3)
101075f4:	89000015 	stw	r4,0(r17)
101075f8:	1c400015 	stw	r17,0(r3)
101075fc:	dfc00617 	ldw	ra,24(sp)
10107600:	dd400517 	ldw	r21,20(sp)
10107604:	dd000417 	ldw	r20,16(sp)
10107608:	dcc00317 	ldw	r19,12(sp)
1010760c:	dc800217 	ldw	r18,8(sp)
10107610:	dc400117 	ldw	r17,4(sp)
10107614:	dc000017 	ldw	r16,0(sp)
10107618:	dec00704 	addi	sp,sp,28
1010761c:	f800283a 	ret
10107620:	21400017 	ldw	r5,0(r4)
10107624:	18c00104 	addi	r3,r3,4
10107628:	21000104 	addi	r4,r4,4
1010762c:	197fff15 	stw	r5,-4(r3)
10107630:	223ffb36 	bltu	r4,r8,10107620 <__alt_data_end+0xfffe7620>
10107634:	003fe606 	br	101075d0 <__alt_data_end+0xfffe75d0>
10107638:	9c000084 	addi	r16,r19,2
1010763c:	003fe406 	br	101075d0 <__alt_data_end+0xfffe75d0>

10107640 <__mcmp>:
10107640:	20800417 	ldw	r2,16(r4)
10107644:	28c00417 	ldw	r3,16(r5)
10107648:	10c5c83a 	sub	r2,r2,r3
1010764c:	1000111e 	bne	r2,zero,10107694 <__mcmp+0x54>
10107650:	18c7883a 	add	r3,r3,r3
10107654:	18c7883a 	add	r3,r3,r3
10107658:	21000504 	addi	r4,r4,20
1010765c:	29400504 	addi	r5,r5,20
10107660:	20c5883a 	add	r2,r4,r3
10107664:	28cb883a 	add	r5,r5,r3
10107668:	00000106 	br	10107670 <__mcmp+0x30>
1010766c:	20800a2e 	bgeu	r4,r2,10107698 <__mcmp+0x58>
10107670:	10bfff04 	addi	r2,r2,-4
10107674:	297fff04 	addi	r5,r5,-4
10107678:	11800017 	ldw	r6,0(r2)
1010767c:	28c00017 	ldw	r3,0(r5)
10107680:	30fffa26 	beq	r6,r3,1010766c <__alt_data_end+0xfffe766c>
10107684:	30c00236 	bltu	r6,r3,10107690 <__mcmp+0x50>
10107688:	00800044 	movi	r2,1
1010768c:	f800283a 	ret
10107690:	00bfffc4 	movi	r2,-1
10107694:	f800283a 	ret
10107698:	0005883a 	mov	r2,zero
1010769c:	f800283a 	ret

101076a0 <__mdiff>:
101076a0:	28c00417 	ldw	r3,16(r5)
101076a4:	30800417 	ldw	r2,16(r6)
101076a8:	defffa04 	addi	sp,sp,-24
101076ac:	dcc00315 	stw	r19,12(sp)
101076b0:	dc800215 	stw	r18,8(sp)
101076b4:	dfc00515 	stw	ra,20(sp)
101076b8:	dd000415 	stw	r20,16(sp)
101076bc:	dc400115 	stw	r17,4(sp)
101076c0:	dc000015 	stw	r16,0(sp)
101076c4:	1887c83a 	sub	r3,r3,r2
101076c8:	2825883a 	mov	r18,r5
101076cc:	3027883a 	mov	r19,r6
101076d0:	1800141e 	bne	r3,zero,10107724 <__mdiff+0x84>
101076d4:	1085883a 	add	r2,r2,r2
101076d8:	1085883a 	add	r2,r2,r2
101076dc:	2a000504 	addi	r8,r5,20
101076e0:	34000504 	addi	r16,r6,20
101076e4:	4087883a 	add	r3,r8,r2
101076e8:	8085883a 	add	r2,r16,r2
101076ec:	00000106 	br	101076f4 <__mdiff+0x54>
101076f0:	40c0592e 	bgeu	r8,r3,10107858 <__mdiff+0x1b8>
101076f4:	18ffff04 	addi	r3,r3,-4
101076f8:	10bfff04 	addi	r2,r2,-4
101076fc:	19c00017 	ldw	r7,0(r3)
10107700:	11400017 	ldw	r5,0(r2)
10107704:	397ffa26 	beq	r7,r5,101076f0 <__alt_data_end+0xfffe76f0>
10107708:	3940592e 	bgeu	r7,r5,10107870 <__mdiff+0x1d0>
1010770c:	9005883a 	mov	r2,r18
10107710:	4023883a 	mov	r17,r8
10107714:	9825883a 	mov	r18,r19
10107718:	05000044 	movi	r20,1
1010771c:	1027883a 	mov	r19,r2
10107720:	00000406 	br	10107734 <__mdiff+0x94>
10107724:	18005616 	blt	r3,zero,10107880 <__mdiff+0x1e0>
10107728:	34400504 	addi	r17,r6,20
1010772c:	2c000504 	addi	r16,r5,20
10107730:	0029883a 	mov	r20,zero
10107734:	91400117 	ldw	r5,4(r18)
10107738:	0106d780 	call	10106d78 <_Balloc>
1010773c:	92400417 	ldw	r9,16(r18)
10107740:	9b000417 	ldw	r12,16(r19)
10107744:	12c00504 	addi	r11,r2,20
10107748:	4a51883a 	add	r8,r9,r9
1010774c:	6319883a 	add	r12,r12,r12
10107750:	4211883a 	add	r8,r8,r8
10107754:	6319883a 	add	r12,r12,r12
10107758:	15000315 	stw	r20,12(r2)
1010775c:	8211883a 	add	r8,r16,r8
10107760:	8b19883a 	add	r12,r17,r12
10107764:	0007883a 	mov	r3,zero
10107768:	81400017 	ldw	r5,0(r16)
1010776c:	89c00017 	ldw	r7,0(r17)
10107770:	59800104 	addi	r6,r11,4
10107774:	293fffcc 	andi	r4,r5,65535
10107778:	20c7883a 	add	r3,r4,r3
1010777c:	393fffcc 	andi	r4,r7,65535
10107780:	1909c83a 	sub	r4,r3,r4
10107784:	280ad43a 	srli	r5,r5,16
10107788:	380ed43a 	srli	r7,r7,16
1010778c:	2007d43a 	srai	r3,r4,16
10107790:	213fffcc 	andi	r4,r4,65535
10107794:	29cbc83a 	sub	r5,r5,r7
10107798:	28c7883a 	add	r3,r5,r3
1010779c:	180a943a 	slli	r5,r3,16
101077a0:	8c400104 	addi	r17,r17,4
101077a4:	84000104 	addi	r16,r16,4
101077a8:	2908b03a 	or	r4,r5,r4
101077ac:	59000015 	stw	r4,0(r11)
101077b0:	1807d43a 	srai	r3,r3,16
101077b4:	3015883a 	mov	r10,r6
101077b8:	3017883a 	mov	r11,r6
101077bc:	8b3fea36 	bltu	r17,r12,10107768 <__alt_data_end+0xfffe7768>
101077c0:	8200162e 	bgeu	r16,r8,1010781c <__mdiff+0x17c>
101077c4:	8017883a 	mov	r11,r16
101077c8:	59400017 	ldw	r5,0(r11)
101077cc:	31800104 	addi	r6,r6,4
101077d0:	5ac00104 	addi	r11,r11,4
101077d4:	293fffcc 	andi	r4,r5,65535
101077d8:	20c7883a 	add	r3,r4,r3
101077dc:	280ed43a 	srli	r7,r5,16
101077e0:	180bd43a 	srai	r5,r3,16
101077e4:	193fffcc 	andi	r4,r3,65535
101077e8:	3947883a 	add	r3,r7,r5
101077ec:	180a943a 	slli	r5,r3,16
101077f0:	1807d43a 	srai	r3,r3,16
101077f4:	2908b03a 	or	r4,r5,r4
101077f8:	313fff15 	stw	r4,-4(r6)
101077fc:	5a3ff236 	bltu	r11,r8,101077c8 <__alt_data_end+0xfffe77c8>
10107800:	0406303a 	nor	r3,zero,r16
10107804:	1a07883a 	add	r3,r3,r8
10107808:	1806d0ba 	srli	r3,r3,2
1010780c:	18c00044 	addi	r3,r3,1
10107810:	18c7883a 	add	r3,r3,r3
10107814:	18c7883a 	add	r3,r3,r3
10107818:	50d5883a 	add	r10,r10,r3
1010781c:	50ffff04 	addi	r3,r10,-4
10107820:	2000041e 	bne	r4,zero,10107834 <__mdiff+0x194>
10107824:	18ffff04 	addi	r3,r3,-4
10107828:	19000017 	ldw	r4,0(r3)
1010782c:	4a7fffc4 	addi	r9,r9,-1
10107830:	203ffc26 	beq	r4,zero,10107824 <__alt_data_end+0xfffe7824>
10107834:	12400415 	stw	r9,16(r2)
10107838:	dfc00517 	ldw	ra,20(sp)
1010783c:	dd000417 	ldw	r20,16(sp)
10107840:	dcc00317 	ldw	r19,12(sp)
10107844:	dc800217 	ldw	r18,8(sp)
10107848:	dc400117 	ldw	r17,4(sp)
1010784c:	dc000017 	ldw	r16,0(sp)
10107850:	dec00604 	addi	sp,sp,24
10107854:	f800283a 	ret
10107858:	000b883a 	mov	r5,zero
1010785c:	0106d780 	call	10106d78 <_Balloc>
10107860:	00c00044 	movi	r3,1
10107864:	10c00415 	stw	r3,16(r2)
10107868:	10000515 	stw	zero,20(r2)
1010786c:	003ff206 	br	10107838 <__alt_data_end+0xfffe7838>
10107870:	8023883a 	mov	r17,r16
10107874:	0029883a 	mov	r20,zero
10107878:	4021883a 	mov	r16,r8
1010787c:	003fad06 	br	10107734 <__alt_data_end+0xfffe7734>
10107880:	9005883a 	mov	r2,r18
10107884:	94400504 	addi	r17,r18,20
10107888:	9c000504 	addi	r16,r19,20
1010788c:	9825883a 	mov	r18,r19
10107890:	05000044 	movi	r20,1
10107894:	1027883a 	mov	r19,r2
10107898:	003fa606 	br	10107734 <__alt_data_end+0xfffe7734>

1010789c <__ulp>:
1010789c:	295ffc2c 	andhi	r5,r5,32752
101078a0:	00bf3034 	movhi	r2,64704
101078a4:	2887883a 	add	r3,r5,r2
101078a8:	00c0020e 	bge	zero,r3,101078b4 <__ulp+0x18>
101078ac:	0005883a 	mov	r2,zero
101078b0:	f800283a 	ret
101078b4:	00c7c83a 	sub	r3,zero,r3
101078b8:	1807d53a 	srai	r3,r3,20
101078bc:	008004c4 	movi	r2,19
101078c0:	10c00b0e 	bge	r2,r3,101078f0 <__ulp+0x54>
101078c4:	18bffb04 	addi	r2,r3,-20
101078c8:	01000784 	movi	r4,30
101078cc:	0007883a 	mov	r3,zero
101078d0:	20800516 	blt	r4,r2,101078e8 <__ulp+0x4c>
101078d4:	010007c4 	movi	r4,31
101078d8:	2089c83a 	sub	r4,r4,r2
101078dc:	00800044 	movi	r2,1
101078e0:	1104983a 	sll	r2,r2,r4
101078e4:	f800283a 	ret
101078e8:	00800044 	movi	r2,1
101078ec:	f800283a 	ret
101078f0:	01400234 	movhi	r5,8
101078f4:	28c7d83a 	sra	r3,r5,r3
101078f8:	0005883a 	mov	r2,zero
101078fc:	f800283a 	ret

10107900 <__b2d>:
10107900:	defffa04 	addi	sp,sp,-24
10107904:	dc000015 	stw	r16,0(sp)
10107908:	24000417 	ldw	r16,16(r4)
1010790c:	dc400115 	stw	r17,4(sp)
10107910:	24400504 	addi	r17,r4,20
10107914:	8421883a 	add	r16,r16,r16
10107918:	8421883a 	add	r16,r16,r16
1010791c:	8c21883a 	add	r16,r17,r16
10107920:	dc800215 	stw	r18,8(sp)
10107924:	84bfff17 	ldw	r18,-4(r16)
10107928:	dd000415 	stw	r20,16(sp)
1010792c:	dcc00315 	stw	r19,12(sp)
10107930:	9009883a 	mov	r4,r18
10107934:	2829883a 	mov	r20,r5
10107938:	dfc00515 	stw	ra,20(sp)
1010793c:	010706c0 	call	1010706c <__hi0bits>
10107940:	00c00804 	movi	r3,32
10107944:	1889c83a 	sub	r4,r3,r2
10107948:	a1000015 	stw	r4,0(r20)
1010794c:	01000284 	movi	r4,10
10107950:	84ffff04 	addi	r19,r16,-4
10107954:	20801216 	blt	r4,r2,101079a0 <__b2d+0xa0>
10107958:	018002c4 	movi	r6,11
1010795c:	308dc83a 	sub	r6,r6,r2
10107960:	9186d83a 	srl	r3,r18,r6
10107964:	18cffc34 	orhi	r3,r3,16368
10107968:	8cc0212e 	bgeu	r17,r19,101079f0 <__b2d+0xf0>
1010796c:	813ffe17 	ldw	r4,-8(r16)
10107970:	218cd83a 	srl	r6,r4,r6
10107974:	10800544 	addi	r2,r2,21
10107978:	9084983a 	sll	r2,r18,r2
1010797c:	1184b03a 	or	r2,r2,r6
10107980:	dfc00517 	ldw	ra,20(sp)
10107984:	dd000417 	ldw	r20,16(sp)
10107988:	dcc00317 	ldw	r19,12(sp)
1010798c:	dc800217 	ldw	r18,8(sp)
10107990:	dc400117 	ldw	r17,4(sp)
10107994:	dc000017 	ldw	r16,0(sp)
10107998:	dec00604 	addi	sp,sp,24
1010799c:	f800283a 	ret
101079a0:	8cc00f2e 	bgeu	r17,r19,101079e0 <__b2d+0xe0>
101079a4:	117ffd44 	addi	r5,r2,-11
101079a8:	80bffe17 	ldw	r2,-8(r16)
101079ac:	28000e26 	beq	r5,zero,101079e8 <__b2d+0xe8>
101079b0:	1949c83a 	sub	r4,r3,r5
101079b4:	9164983a 	sll	r18,r18,r5
101079b8:	1106d83a 	srl	r3,r2,r4
101079bc:	81bffe04 	addi	r6,r16,-8
101079c0:	948ffc34 	orhi	r18,r18,16368
101079c4:	90c6b03a 	or	r3,r18,r3
101079c8:	89800e2e 	bgeu	r17,r6,10107a04 <__b2d+0x104>
101079cc:	81bffd17 	ldw	r6,-12(r16)
101079d0:	1144983a 	sll	r2,r2,r5
101079d4:	310ad83a 	srl	r5,r6,r4
101079d8:	2884b03a 	or	r2,r5,r2
101079dc:	003fe806 	br	10107980 <__alt_data_end+0xfffe7980>
101079e0:	10bffd44 	addi	r2,r2,-11
101079e4:	1000041e 	bne	r2,zero,101079f8 <__b2d+0xf8>
101079e8:	90cffc34 	orhi	r3,r18,16368
101079ec:	003fe406 	br	10107980 <__alt_data_end+0xfffe7980>
101079f0:	000d883a 	mov	r6,zero
101079f4:	003fdf06 	br	10107974 <__alt_data_end+0xfffe7974>
101079f8:	90a4983a 	sll	r18,r18,r2
101079fc:	0005883a 	mov	r2,zero
10107a00:	003ff906 	br	101079e8 <__alt_data_end+0xfffe79e8>
10107a04:	1144983a 	sll	r2,r2,r5
10107a08:	003fdd06 	br	10107980 <__alt_data_end+0xfffe7980>

10107a0c <__d2b>:
10107a0c:	defff804 	addi	sp,sp,-32
10107a10:	dc000215 	stw	r16,8(sp)
10107a14:	3021883a 	mov	r16,r6
10107a18:	dc400315 	stw	r17,12(sp)
10107a1c:	8022907a 	slli	r17,r16,1
10107a20:	dd000615 	stw	r20,24(sp)
10107a24:	2829883a 	mov	r20,r5
10107a28:	01400044 	movi	r5,1
10107a2c:	dcc00515 	stw	r19,20(sp)
10107a30:	dc800415 	stw	r18,16(sp)
10107a34:	dfc00715 	stw	ra,28(sp)
10107a38:	3825883a 	mov	r18,r7
10107a3c:	8822d57a 	srli	r17,r17,21
10107a40:	0106d780 	call	10106d78 <_Balloc>
10107a44:	1027883a 	mov	r19,r2
10107a48:	00800434 	movhi	r2,16
10107a4c:	10bfffc4 	addi	r2,r2,-1
10107a50:	808c703a 	and	r6,r16,r2
10107a54:	88000126 	beq	r17,zero,10107a5c <__d2b+0x50>
10107a58:	31800434 	orhi	r6,r6,16
10107a5c:	d9800015 	stw	r6,0(sp)
10107a60:	a0002426 	beq	r20,zero,10107af4 <__d2b+0xe8>
10107a64:	d9000104 	addi	r4,sp,4
10107a68:	dd000115 	stw	r20,4(sp)
10107a6c:	01070d40 	call	101070d4 <__lo0bits>
10107a70:	d8c00017 	ldw	r3,0(sp)
10107a74:	10002f1e 	bne	r2,zero,10107b34 <__d2b+0x128>
10107a78:	d9000117 	ldw	r4,4(sp)
10107a7c:	99000515 	stw	r4,20(r19)
10107a80:	1821003a 	cmpeq	r16,r3,zero
10107a84:	01000084 	movi	r4,2
10107a88:	2421c83a 	sub	r16,r4,r16
10107a8c:	98c00615 	stw	r3,24(r19)
10107a90:	9c000415 	stw	r16,16(r19)
10107a94:	88001f1e 	bne	r17,zero,10107b14 <__d2b+0x108>
10107a98:	10bef384 	addi	r2,r2,-1074
10107a9c:	90800015 	stw	r2,0(r18)
10107aa0:	00900034 	movhi	r2,16384
10107aa4:	10bfffc4 	addi	r2,r2,-1
10107aa8:	8085883a 	add	r2,r16,r2
10107aac:	1085883a 	add	r2,r2,r2
10107ab0:	1085883a 	add	r2,r2,r2
10107ab4:	9885883a 	add	r2,r19,r2
10107ab8:	11000517 	ldw	r4,20(r2)
10107abc:	8020917a 	slli	r16,r16,5
10107ac0:	010706c0 	call	1010706c <__hi0bits>
10107ac4:	d8c00817 	ldw	r3,32(sp)
10107ac8:	8085c83a 	sub	r2,r16,r2
10107acc:	18800015 	stw	r2,0(r3)
10107ad0:	9805883a 	mov	r2,r19
10107ad4:	dfc00717 	ldw	ra,28(sp)
10107ad8:	dd000617 	ldw	r20,24(sp)
10107adc:	dcc00517 	ldw	r19,20(sp)
10107ae0:	dc800417 	ldw	r18,16(sp)
10107ae4:	dc400317 	ldw	r17,12(sp)
10107ae8:	dc000217 	ldw	r16,8(sp)
10107aec:	dec00804 	addi	sp,sp,32
10107af0:	f800283a 	ret
10107af4:	d809883a 	mov	r4,sp
10107af8:	01070d40 	call	101070d4 <__lo0bits>
10107afc:	d8c00017 	ldw	r3,0(sp)
10107b00:	04000044 	movi	r16,1
10107b04:	9c000415 	stw	r16,16(r19)
10107b08:	98c00515 	stw	r3,20(r19)
10107b0c:	10800804 	addi	r2,r2,32
10107b10:	883fe126 	beq	r17,zero,10107a98 <__alt_data_end+0xfffe7a98>
10107b14:	00c00d44 	movi	r3,53
10107b18:	8c7ef344 	addi	r17,r17,-1075
10107b1c:	88a3883a 	add	r17,r17,r2
10107b20:	1885c83a 	sub	r2,r3,r2
10107b24:	d8c00817 	ldw	r3,32(sp)
10107b28:	94400015 	stw	r17,0(r18)
10107b2c:	18800015 	stw	r2,0(r3)
10107b30:	003fe706 	br	10107ad0 <__alt_data_end+0xfffe7ad0>
10107b34:	01000804 	movi	r4,32
10107b38:	2089c83a 	sub	r4,r4,r2
10107b3c:	1908983a 	sll	r4,r3,r4
10107b40:	d9400117 	ldw	r5,4(sp)
10107b44:	1886d83a 	srl	r3,r3,r2
10107b48:	2148b03a 	or	r4,r4,r5
10107b4c:	99000515 	stw	r4,20(r19)
10107b50:	d8c00015 	stw	r3,0(sp)
10107b54:	003fca06 	br	10107a80 <__alt_data_end+0xfffe7a80>

10107b58 <__ratio>:
10107b58:	defff904 	addi	sp,sp,-28
10107b5c:	dc400315 	stw	r17,12(sp)
10107b60:	2823883a 	mov	r17,r5
10107b64:	d9400104 	addi	r5,sp,4
10107b68:	dfc00615 	stw	ra,24(sp)
10107b6c:	dcc00515 	stw	r19,20(sp)
10107b70:	dc800415 	stw	r18,16(sp)
10107b74:	2027883a 	mov	r19,r4
10107b78:	dc000215 	stw	r16,8(sp)
10107b7c:	01079000 	call	10107900 <__b2d>
10107b80:	d80b883a 	mov	r5,sp
10107b84:	8809883a 	mov	r4,r17
10107b88:	1025883a 	mov	r18,r2
10107b8c:	1821883a 	mov	r16,r3
10107b90:	01079000 	call	10107900 <__b2d>
10107b94:	8a000417 	ldw	r8,16(r17)
10107b98:	99000417 	ldw	r4,16(r19)
10107b9c:	d9400117 	ldw	r5,4(sp)
10107ba0:	2209c83a 	sub	r4,r4,r8
10107ba4:	2010917a 	slli	r8,r4,5
10107ba8:	d9000017 	ldw	r4,0(sp)
10107bac:	2909c83a 	sub	r4,r5,r4
10107bb0:	4109883a 	add	r4,r8,r4
10107bb4:	01000e0e 	bge	zero,r4,10107bf0 <__ratio+0x98>
10107bb8:	2008953a 	slli	r4,r4,20
10107bbc:	2421883a 	add	r16,r4,r16
10107bc0:	100d883a 	mov	r6,r2
10107bc4:	180f883a 	mov	r7,r3
10107bc8:	9009883a 	mov	r4,r18
10107bcc:	800b883a 	mov	r5,r16
10107bd0:	010b8900 	call	1010b890 <__divdf3>
10107bd4:	dfc00617 	ldw	ra,24(sp)
10107bd8:	dcc00517 	ldw	r19,20(sp)
10107bdc:	dc800417 	ldw	r18,16(sp)
10107be0:	dc400317 	ldw	r17,12(sp)
10107be4:	dc000217 	ldw	r16,8(sp)
10107be8:	dec00704 	addi	sp,sp,28
10107bec:	f800283a 	ret
10107bf0:	2008953a 	slli	r4,r4,20
10107bf4:	1907c83a 	sub	r3,r3,r4
10107bf8:	003ff106 	br	10107bc0 <__alt_data_end+0xfffe7bc0>

10107bfc <_mprec_log10>:
10107bfc:	defffe04 	addi	sp,sp,-8
10107c00:	dc000015 	stw	r16,0(sp)
10107c04:	dfc00115 	stw	ra,4(sp)
10107c08:	008005c4 	movi	r2,23
10107c0c:	2021883a 	mov	r16,r4
10107c10:	11000d0e 	bge	r2,r4,10107c48 <_mprec_log10+0x4c>
10107c14:	0005883a 	mov	r2,zero
10107c18:	00cffc34 	movhi	r3,16368
10107c1c:	843fffc4 	addi	r16,r16,-1
10107c20:	000d883a 	mov	r6,zero
10107c24:	01d00934 	movhi	r7,16420
10107c28:	1009883a 	mov	r4,r2
10107c2c:	180b883a 	mov	r5,r3
10107c30:	010c3d00 	call	1010c3d0 <__muldf3>
10107c34:	803ff91e 	bne	r16,zero,10107c1c <__alt_data_end+0xfffe7c1c>
10107c38:	dfc00117 	ldw	ra,4(sp)
10107c3c:	dc000017 	ldw	r16,0(sp)
10107c40:	dec00204 	addi	sp,sp,8
10107c44:	f800283a 	ret
10107c48:	202090fa 	slli	r16,r4,3
10107c4c:	00840474 	movhi	r2,4113
10107c50:	1080d104 	addi	r2,r2,836
10107c54:	1421883a 	add	r16,r2,r16
10107c58:	80800017 	ldw	r2,0(r16)
10107c5c:	80c00117 	ldw	r3,4(r16)
10107c60:	dfc00117 	ldw	ra,4(sp)
10107c64:	dc000017 	ldw	r16,0(sp)
10107c68:	dec00204 	addi	sp,sp,8
10107c6c:	f800283a 	ret

10107c70 <__copybits>:
10107c70:	297fffc4 	addi	r5,r5,-1
10107c74:	280fd17a 	srai	r7,r5,5
10107c78:	30c00417 	ldw	r3,16(r6)
10107c7c:	30800504 	addi	r2,r6,20
10107c80:	39c00044 	addi	r7,r7,1
10107c84:	18c7883a 	add	r3,r3,r3
10107c88:	39cf883a 	add	r7,r7,r7
10107c8c:	18c7883a 	add	r3,r3,r3
10107c90:	39cf883a 	add	r7,r7,r7
10107c94:	10c7883a 	add	r3,r2,r3
10107c98:	21cf883a 	add	r7,r4,r7
10107c9c:	10c00d2e 	bgeu	r2,r3,10107cd4 <__copybits+0x64>
10107ca0:	200b883a 	mov	r5,r4
10107ca4:	12000017 	ldw	r8,0(r2)
10107ca8:	29400104 	addi	r5,r5,4
10107cac:	10800104 	addi	r2,r2,4
10107cb0:	2a3fff15 	stw	r8,-4(r5)
10107cb4:	10fffb36 	bltu	r2,r3,10107ca4 <__alt_data_end+0xfffe7ca4>
10107cb8:	1985c83a 	sub	r2,r3,r6
10107cbc:	10bffac4 	addi	r2,r2,-21
10107cc0:	1004d0ba 	srli	r2,r2,2
10107cc4:	10800044 	addi	r2,r2,1
10107cc8:	1085883a 	add	r2,r2,r2
10107ccc:	1085883a 	add	r2,r2,r2
10107cd0:	2089883a 	add	r4,r4,r2
10107cd4:	21c0032e 	bgeu	r4,r7,10107ce4 <__copybits+0x74>
10107cd8:	20000015 	stw	zero,0(r4)
10107cdc:	21000104 	addi	r4,r4,4
10107ce0:	21fffd36 	bltu	r4,r7,10107cd8 <__alt_data_end+0xfffe7cd8>
10107ce4:	f800283a 	ret

10107ce8 <__any_on>:
10107ce8:	20c00417 	ldw	r3,16(r4)
10107cec:	2805d17a 	srai	r2,r5,5
10107cf0:	21000504 	addi	r4,r4,20
10107cf4:	18800d0e 	bge	r3,r2,10107d2c <__any_on+0x44>
10107cf8:	18c7883a 	add	r3,r3,r3
10107cfc:	18c7883a 	add	r3,r3,r3
10107d00:	20c7883a 	add	r3,r4,r3
10107d04:	20c0192e 	bgeu	r4,r3,10107d6c <__any_on+0x84>
10107d08:	18bfff17 	ldw	r2,-4(r3)
10107d0c:	18ffff04 	addi	r3,r3,-4
10107d10:	1000041e 	bne	r2,zero,10107d24 <__any_on+0x3c>
10107d14:	20c0142e 	bgeu	r4,r3,10107d68 <__any_on+0x80>
10107d18:	18ffff04 	addi	r3,r3,-4
10107d1c:	19400017 	ldw	r5,0(r3)
10107d20:	283ffc26 	beq	r5,zero,10107d14 <__alt_data_end+0xfffe7d14>
10107d24:	00800044 	movi	r2,1
10107d28:	f800283a 	ret
10107d2c:	10c00a0e 	bge	r2,r3,10107d58 <__any_on+0x70>
10107d30:	1085883a 	add	r2,r2,r2
10107d34:	1085883a 	add	r2,r2,r2
10107d38:	294007cc 	andi	r5,r5,31
10107d3c:	2087883a 	add	r3,r4,r2
10107d40:	283ff026 	beq	r5,zero,10107d04 <__alt_data_end+0xfffe7d04>
10107d44:	19800017 	ldw	r6,0(r3)
10107d48:	3144d83a 	srl	r2,r6,r5
10107d4c:	114a983a 	sll	r5,r2,r5
10107d50:	317ff41e 	bne	r6,r5,10107d24 <__alt_data_end+0xfffe7d24>
10107d54:	003feb06 	br	10107d04 <__alt_data_end+0xfffe7d04>
10107d58:	1085883a 	add	r2,r2,r2
10107d5c:	1085883a 	add	r2,r2,r2
10107d60:	2087883a 	add	r3,r4,r2
10107d64:	003fe706 	br	10107d04 <__alt_data_end+0xfffe7d04>
10107d68:	f800283a 	ret
10107d6c:	0005883a 	mov	r2,zero
10107d70:	f800283a 	ret

10107d74 <_realloc_r>:
10107d74:	defff604 	addi	sp,sp,-40
10107d78:	dc800215 	stw	r18,8(sp)
10107d7c:	dfc00915 	stw	ra,36(sp)
10107d80:	df000815 	stw	fp,32(sp)
10107d84:	ddc00715 	stw	r23,28(sp)
10107d88:	dd800615 	stw	r22,24(sp)
10107d8c:	dd400515 	stw	r21,20(sp)
10107d90:	dd000415 	stw	r20,16(sp)
10107d94:	dcc00315 	stw	r19,12(sp)
10107d98:	dc400115 	stw	r17,4(sp)
10107d9c:	dc000015 	stw	r16,0(sp)
10107da0:	3025883a 	mov	r18,r6
10107da4:	2800b726 	beq	r5,zero,10108084 <_realloc_r+0x310>
10107da8:	282b883a 	mov	r21,r5
10107dac:	2029883a 	mov	r20,r4
10107db0:	010dbc80 	call	1010dbc8 <__malloc_lock>
10107db4:	a8bfff17 	ldw	r2,-4(r21)
10107db8:	043fff04 	movi	r16,-4
10107dbc:	90c002c4 	addi	r3,r18,11
10107dc0:	01000584 	movi	r4,22
10107dc4:	acfffe04 	addi	r19,r21,-8
10107dc8:	1420703a 	and	r16,r2,r16
10107dcc:	20c0332e 	bgeu	r4,r3,10107e9c <_realloc_r+0x128>
10107dd0:	047ffe04 	movi	r17,-8
10107dd4:	1c62703a 	and	r17,r3,r17
10107dd8:	8807883a 	mov	r3,r17
10107ddc:	88005816 	blt	r17,zero,10107f40 <_realloc_r+0x1cc>
10107de0:	8c805736 	bltu	r17,r18,10107f40 <_realloc_r+0x1cc>
10107de4:	80c0300e 	bge	r16,r3,10107ea8 <_realloc_r+0x134>
10107de8:	07040474 	movhi	fp,4113
10107dec:	e7028204 	addi	fp,fp,2568
10107df0:	e1c00217 	ldw	r7,8(fp)
10107df4:	9c09883a 	add	r4,r19,r16
10107df8:	22000117 	ldw	r8,4(r4)
10107dfc:	21c06326 	beq	r4,r7,10107f8c <_realloc_r+0x218>
10107e00:	017fff84 	movi	r5,-2
10107e04:	414a703a 	and	r5,r8,r5
10107e08:	214b883a 	add	r5,r4,r5
10107e0c:	29800117 	ldw	r6,4(r5)
10107e10:	3180004c 	andi	r6,r6,1
10107e14:	30003f26 	beq	r6,zero,10107f14 <_realloc_r+0x1a0>
10107e18:	1080004c 	andi	r2,r2,1
10107e1c:	10008326 	beq	r2,zero,1010802c <_realloc_r+0x2b8>
10107e20:	900b883a 	mov	r5,r18
10107e24:	a009883a 	mov	r4,r20
10107e28:	01060bc0 	call	101060bc <_malloc_r>
10107e2c:	1025883a 	mov	r18,r2
10107e30:	10011e26 	beq	r2,zero,101082ac <_realloc_r+0x538>
10107e34:	a93fff17 	ldw	r4,-4(r21)
10107e38:	10fffe04 	addi	r3,r2,-8
10107e3c:	00bfff84 	movi	r2,-2
10107e40:	2084703a 	and	r2,r4,r2
10107e44:	9885883a 	add	r2,r19,r2
10107e48:	1880ee26 	beq	r3,r2,10108204 <_realloc_r+0x490>
10107e4c:	81bfff04 	addi	r6,r16,-4
10107e50:	00800904 	movi	r2,36
10107e54:	1180b836 	bltu	r2,r6,10108138 <_realloc_r+0x3c4>
10107e58:	00c004c4 	movi	r3,19
10107e5c:	19809636 	bltu	r3,r6,101080b8 <_realloc_r+0x344>
10107e60:	9005883a 	mov	r2,r18
10107e64:	a807883a 	mov	r3,r21
10107e68:	19000017 	ldw	r4,0(r3)
10107e6c:	11000015 	stw	r4,0(r2)
10107e70:	19000117 	ldw	r4,4(r3)
10107e74:	11000115 	stw	r4,4(r2)
10107e78:	18c00217 	ldw	r3,8(r3)
10107e7c:	10c00215 	stw	r3,8(r2)
10107e80:	a80b883a 	mov	r5,r21
10107e84:	a009883a 	mov	r4,r20
10107e88:	01054d00 	call	101054d0 <_free_r>
10107e8c:	a009883a 	mov	r4,r20
10107e90:	010dbec0 	call	1010dbec <__malloc_unlock>
10107e94:	9005883a 	mov	r2,r18
10107e98:	00001206 	br	10107ee4 <_realloc_r+0x170>
10107e9c:	00c00404 	movi	r3,16
10107ea0:	1823883a 	mov	r17,r3
10107ea4:	003fce06 	br	10107de0 <__alt_data_end+0xfffe7de0>
10107ea8:	a825883a 	mov	r18,r21
10107eac:	8445c83a 	sub	r2,r16,r17
10107eb0:	00c003c4 	movi	r3,15
10107eb4:	18802636 	bltu	r3,r2,10107f50 <_realloc_r+0x1dc>
10107eb8:	99800117 	ldw	r6,4(r19)
10107ebc:	9c07883a 	add	r3,r19,r16
10107ec0:	3180004c 	andi	r6,r6,1
10107ec4:	3420b03a 	or	r16,r6,r16
10107ec8:	9c000115 	stw	r16,4(r19)
10107ecc:	18800117 	ldw	r2,4(r3)
10107ed0:	10800054 	ori	r2,r2,1
10107ed4:	18800115 	stw	r2,4(r3)
10107ed8:	a009883a 	mov	r4,r20
10107edc:	010dbec0 	call	1010dbec <__malloc_unlock>
10107ee0:	9005883a 	mov	r2,r18
10107ee4:	dfc00917 	ldw	ra,36(sp)
10107ee8:	df000817 	ldw	fp,32(sp)
10107eec:	ddc00717 	ldw	r23,28(sp)
10107ef0:	dd800617 	ldw	r22,24(sp)
10107ef4:	dd400517 	ldw	r21,20(sp)
10107ef8:	dd000417 	ldw	r20,16(sp)
10107efc:	dcc00317 	ldw	r19,12(sp)
10107f00:	dc800217 	ldw	r18,8(sp)
10107f04:	dc400117 	ldw	r17,4(sp)
10107f08:	dc000017 	ldw	r16,0(sp)
10107f0c:	dec00a04 	addi	sp,sp,40
10107f10:	f800283a 	ret
10107f14:	017fff04 	movi	r5,-4
10107f18:	414a703a 	and	r5,r8,r5
10107f1c:	814d883a 	add	r6,r16,r5
10107f20:	30c01f16 	blt	r6,r3,10107fa0 <_realloc_r+0x22c>
10107f24:	20800317 	ldw	r2,12(r4)
10107f28:	20c00217 	ldw	r3,8(r4)
10107f2c:	a825883a 	mov	r18,r21
10107f30:	3021883a 	mov	r16,r6
10107f34:	18800315 	stw	r2,12(r3)
10107f38:	10c00215 	stw	r3,8(r2)
10107f3c:	003fdb06 	br	10107eac <__alt_data_end+0xfffe7eac>
10107f40:	00800304 	movi	r2,12
10107f44:	a0800015 	stw	r2,0(r20)
10107f48:	0005883a 	mov	r2,zero
10107f4c:	003fe506 	br	10107ee4 <__alt_data_end+0xfffe7ee4>
10107f50:	98c00117 	ldw	r3,4(r19)
10107f54:	9c4b883a 	add	r5,r19,r17
10107f58:	11000054 	ori	r4,r2,1
10107f5c:	18c0004c 	andi	r3,r3,1
10107f60:	1c62b03a 	or	r17,r3,r17
10107f64:	9c400115 	stw	r17,4(r19)
10107f68:	29000115 	stw	r4,4(r5)
10107f6c:	2885883a 	add	r2,r5,r2
10107f70:	10c00117 	ldw	r3,4(r2)
10107f74:	29400204 	addi	r5,r5,8
10107f78:	a009883a 	mov	r4,r20
10107f7c:	18c00054 	ori	r3,r3,1
10107f80:	10c00115 	stw	r3,4(r2)
10107f84:	01054d00 	call	101054d0 <_free_r>
10107f88:	003fd306 	br	10107ed8 <__alt_data_end+0xfffe7ed8>
10107f8c:	017fff04 	movi	r5,-4
10107f90:	414a703a 	and	r5,r8,r5
10107f94:	89800404 	addi	r6,r17,16
10107f98:	8151883a 	add	r8,r16,r5
10107f9c:	4180590e 	bge	r8,r6,10108104 <_realloc_r+0x390>
10107fa0:	1080004c 	andi	r2,r2,1
10107fa4:	103f9e1e 	bne	r2,zero,10107e20 <__alt_data_end+0xfffe7e20>
10107fa8:	adbffe17 	ldw	r22,-8(r21)
10107fac:	00bfff04 	movi	r2,-4
10107fb0:	9dadc83a 	sub	r22,r19,r22
10107fb4:	b1800117 	ldw	r6,4(r22)
10107fb8:	3084703a 	and	r2,r6,r2
10107fbc:	20002026 	beq	r4,zero,10108040 <_realloc_r+0x2cc>
10107fc0:	80af883a 	add	r23,r16,r2
10107fc4:	b96f883a 	add	r23,r23,r5
10107fc8:	21c05f26 	beq	r4,r7,10108148 <_realloc_r+0x3d4>
10107fcc:	b8c01c16 	blt	r23,r3,10108040 <_realloc_r+0x2cc>
10107fd0:	20800317 	ldw	r2,12(r4)
10107fd4:	20c00217 	ldw	r3,8(r4)
10107fd8:	81bfff04 	addi	r6,r16,-4
10107fdc:	01000904 	movi	r4,36
10107fe0:	18800315 	stw	r2,12(r3)
10107fe4:	10c00215 	stw	r3,8(r2)
10107fe8:	b0c00217 	ldw	r3,8(r22)
10107fec:	b0800317 	ldw	r2,12(r22)
10107ff0:	b4800204 	addi	r18,r22,8
10107ff4:	18800315 	stw	r2,12(r3)
10107ff8:	10c00215 	stw	r3,8(r2)
10107ffc:	21801b36 	bltu	r4,r6,1010806c <_realloc_r+0x2f8>
10108000:	008004c4 	movi	r2,19
10108004:	1180352e 	bgeu	r2,r6,101080dc <_realloc_r+0x368>
10108008:	a8800017 	ldw	r2,0(r21)
1010800c:	b0800215 	stw	r2,8(r22)
10108010:	a8800117 	ldw	r2,4(r21)
10108014:	b0800315 	stw	r2,12(r22)
10108018:	008006c4 	movi	r2,27
1010801c:	11807f36 	bltu	r2,r6,1010821c <_realloc_r+0x4a8>
10108020:	b0800404 	addi	r2,r22,16
10108024:	ad400204 	addi	r21,r21,8
10108028:	00002d06 	br	101080e0 <_realloc_r+0x36c>
1010802c:	adbffe17 	ldw	r22,-8(r21)
10108030:	00bfff04 	movi	r2,-4
10108034:	9dadc83a 	sub	r22,r19,r22
10108038:	b1000117 	ldw	r4,4(r22)
1010803c:	2084703a 	and	r2,r4,r2
10108040:	b03f7726 	beq	r22,zero,10107e20 <__alt_data_end+0xfffe7e20>
10108044:	80af883a 	add	r23,r16,r2
10108048:	b8ff7516 	blt	r23,r3,10107e20 <__alt_data_end+0xfffe7e20>
1010804c:	b0800317 	ldw	r2,12(r22)
10108050:	b0c00217 	ldw	r3,8(r22)
10108054:	81bfff04 	addi	r6,r16,-4
10108058:	01000904 	movi	r4,36
1010805c:	18800315 	stw	r2,12(r3)
10108060:	10c00215 	stw	r3,8(r2)
10108064:	b4800204 	addi	r18,r22,8
10108068:	21bfe52e 	bgeu	r4,r6,10108000 <__alt_data_end+0xfffe8000>
1010806c:	a80b883a 	mov	r5,r21
10108070:	9009883a 	mov	r4,r18
10108074:	0106af40 	call	10106af4 <memmove>
10108078:	b821883a 	mov	r16,r23
1010807c:	b027883a 	mov	r19,r22
10108080:	003f8a06 	br	10107eac <__alt_data_end+0xfffe7eac>
10108084:	300b883a 	mov	r5,r6
10108088:	dfc00917 	ldw	ra,36(sp)
1010808c:	df000817 	ldw	fp,32(sp)
10108090:	ddc00717 	ldw	r23,28(sp)
10108094:	dd800617 	ldw	r22,24(sp)
10108098:	dd400517 	ldw	r21,20(sp)
1010809c:	dd000417 	ldw	r20,16(sp)
101080a0:	dcc00317 	ldw	r19,12(sp)
101080a4:	dc800217 	ldw	r18,8(sp)
101080a8:	dc400117 	ldw	r17,4(sp)
101080ac:	dc000017 	ldw	r16,0(sp)
101080b0:	dec00a04 	addi	sp,sp,40
101080b4:	01060bc1 	jmpi	101060bc <_malloc_r>
101080b8:	a8c00017 	ldw	r3,0(r21)
101080bc:	90c00015 	stw	r3,0(r18)
101080c0:	a8c00117 	ldw	r3,4(r21)
101080c4:	90c00115 	stw	r3,4(r18)
101080c8:	00c006c4 	movi	r3,27
101080cc:	19804536 	bltu	r3,r6,101081e4 <_realloc_r+0x470>
101080d0:	90800204 	addi	r2,r18,8
101080d4:	a8c00204 	addi	r3,r21,8
101080d8:	003f6306 	br	10107e68 <__alt_data_end+0xfffe7e68>
101080dc:	9005883a 	mov	r2,r18
101080e0:	a8c00017 	ldw	r3,0(r21)
101080e4:	b821883a 	mov	r16,r23
101080e8:	b027883a 	mov	r19,r22
101080ec:	10c00015 	stw	r3,0(r2)
101080f0:	a8c00117 	ldw	r3,4(r21)
101080f4:	10c00115 	stw	r3,4(r2)
101080f8:	a8c00217 	ldw	r3,8(r21)
101080fc:	10c00215 	stw	r3,8(r2)
10108100:	003f6a06 	br	10107eac <__alt_data_end+0xfffe7eac>
10108104:	9c67883a 	add	r19,r19,r17
10108108:	4445c83a 	sub	r2,r8,r17
1010810c:	e4c00215 	stw	r19,8(fp)
10108110:	10800054 	ori	r2,r2,1
10108114:	98800115 	stw	r2,4(r19)
10108118:	a8bfff17 	ldw	r2,-4(r21)
1010811c:	a009883a 	mov	r4,r20
10108120:	1080004c 	andi	r2,r2,1
10108124:	1462b03a 	or	r17,r2,r17
10108128:	ac7fff15 	stw	r17,-4(r21)
1010812c:	010dbec0 	call	1010dbec <__malloc_unlock>
10108130:	a805883a 	mov	r2,r21
10108134:	003f6b06 	br	10107ee4 <__alt_data_end+0xfffe7ee4>
10108138:	a80b883a 	mov	r5,r21
1010813c:	9009883a 	mov	r4,r18
10108140:	0106af40 	call	10106af4 <memmove>
10108144:	003f4e06 	br	10107e80 <__alt_data_end+0xfffe7e80>
10108148:	89000404 	addi	r4,r17,16
1010814c:	b93fbc16 	blt	r23,r4,10108040 <__alt_data_end+0xfffe8040>
10108150:	b0800317 	ldw	r2,12(r22)
10108154:	b0c00217 	ldw	r3,8(r22)
10108158:	81bfff04 	addi	r6,r16,-4
1010815c:	01000904 	movi	r4,36
10108160:	18800315 	stw	r2,12(r3)
10108164:	10c00215 	stw	r3,8(r2)
10108168:	b4800204 	addi	r18,r22,8
1010816c:	21804336 	bltu	r4,r6,1010827c <_realloc_r+0x508>
10108170:	008004c4 	movi	r2,19
10108174:	11803f2e 	bgeu	r2,r6,10108274 <_realloc_r+0x500>
10108178:	a8800017 	ldw	r2,0(r21)
1010817c:	b0800215 	stw	r2,8(r22)
10108180:	a8800117 	ldw	r2,4(r21)
10108184:	b0800315 	stw	r2,12(r22)
10108188:	008006c4 	movi	r2,27
1010818c:	11803f36 	bltu	r2,r6,1010828c <_realloc_r+0x518>
10108190:	b0800404 	addi	r2,r22,16
10108194:	ad400204 	addi	r21,r21,8
10108198:	a8c00017 	ldw	r3,0(r21)
1010819c:	10c00015 	stw	r3,0(r2)
101081a0:	a8c00117 	ldw	r3,4(r21)
101081a4:	10c00115 	stw	r3,4(r2)
101081a8:	a8c00217 	ldw	r3,8(r21)
101081ac:	10c00215 	stw	r3,8(r2)
101081b0:	b447883a 	add	r3,r22,r17
101081b4:	bc45c83a 	sub	r2,r23,r17
101081b8:	e0c00215 	stw	r3,8(fp)
101081bc:	10800054 	ori	r2,r2,1
101081c0:	18800115 	stw	r2,4(r3)
101081c4:	b0800117 	ldw	r2,4(r22)
101081c8:	a009883a 	mov	r4,r20
101081cc:	1080004c 	andi	r2,r2,1
101081d0:	1462b03a 	or	r17,r2,r17
101081d4:	b4400115 	stw	r17,4(r22)
101081d8:	010dbec0 	call	1010dbec <__malloc_unlock>
101081dc:	9005883a 	mov	r2,r18
101081e0:	003f4006 	br	10107ee4 <__alt_data_end+0xfffe7ee4>
101081e4:	a8c00217 	ldw	r3,8(r21)
101081e8:	90c00215 	stw	r3,8(r18)
101081ec:	a8c00317 	ldw	r3,12(r21)
101081f0:	90c00315 	stw	r3,12(r18)
101081f4:	30801126 	beq	r6,r2,1010823c <_realloc_r+0x4c8>
101081f8:	90800404 	addi	r2,r18,16
101081fc:	a8c00404 	addi	r3,r21,16
10108200:	003f1906 	br	10107e68 <__alt_data_end+0xfffe7e68>
10108204:	90ffff17 	ldw	r3,-4(r18)
10108208:	00bfff04 	movi	r2,-4
1010820c:	a825883a 	mov	r18,r21
10108210:	1884703a 	and	r2,r3,r2
10108214:	80a1883a 	add	r16,r16,r2
10108218:	003f2406 	br	10107eac <__alt_data_end+0xfffe7eac>
1010821c:	a8800217 	ldw	r2,8(r21)
10108220:	b0800415 	stw	r2,16(r22)
10108224:	a8800317 	ldw	r2,12(r21)
10108228:	b0800515 	stw	r2,20(r22)
1010822c:	31000a26 	beq	r6,r4,10108258 <_realloc_r+0x4e4>
10108230:	b0800604 	addi	r2,r22,24
10108234:	ad400404 	addi	r21,r21,16
10108238:	003fa906 	br	101080e0 <__alt_data_end+0xfffe80e0>
1010823c:	a9000417 	ldw	r4,16(r21)
10108240:	90800604 	addi	r2,r18,24
10108244:	a8c00604 	addi	r3,r21,24
10108248:	91000415 	stw	r4,16(r18)
1010824c:	a9000517 	ldw	r4,20(r21)
10108250:	91000515 	stw	r4,20(r18)
10108254:	003f0406 	br	10107e68 <__alt_data_end+0xfffe7e68>
10108258:	a8c00417 	ldw	r3,16(r21)
1010825c:	ad400604 	addi	r21,r21,24
10108260:	b0800804 	addi	r2,r22,32
10108264:	b0c00615 	stw	r3,24(r22)
10108268:	a8ffff17 	ldw	r3,-4(r21)
1010826c:	b0c00715 	stw	r3,28(r22)
10108270:	003f9b06 	br	101080e0 <__alt_data_end+0xfffe80e0>
10108274:	9005883a 	mov	r2,r18
10108278:	003fc706 	br	10108198 <__alt_data_end+0xfffe8198>
1010827c:	a80b883a 	mov	r5,r21
10108280:	9009883a 	mov	r4,r18
10108284:	0106af40 	call	10106af4 <memmove>
10108288:	003fc906 	br	101081b0 <__alt_data_end+0xfffe81b0>
1010828c:	a8800217 	ldw	r2,8(r21)
10108290:	b0800415 	stw	r2,16(r22)
10108294:	a8800317 	ldw	r2,12(r21)
10108298:	b0800515 	stw	r2,20(r22)
1010829c:	31000726 	beq	r6,r4,101082bc <_realloc_r+0x548>
101082a0:	b0800604 	addi	r2,r22,24
101082a4:	ad400404 	addi	r21,r21,16
101082a8:	003fbb06 	br	10108198 <__alt_data_end+0xfffe8198>
101082ac:	a009883a 	mov	r4,r20
101082b0:	010dbec0 	call	1010dbec <__malloc_unlock>
101082b4:	0005883a 	mov	r2,zero
101082b8:	003f0a06 	br	10107ee4 <__alt_data_end+0xfffe7ee4>
101082bc:	a8c00417 	ldw	r3,16(r21)
101082c0:	ad400604 	addi	r21,r21,24
101082c4:	b0800804 	addi	r2,r22,32
101082c8:	b0c00615 	stw	r3,24(r22)
101082cc:	a8ffff17 	ldw	r3,-4(r21)
101082d0:	b0c00715 	stw	r3,28(r22)
101082d4:	003fb006 	br	10108198 <__alt_data_end+0xfffe8198>

101082d8 <__fpclassifyd>:
101082d8:	00a00034 	movhi	r2,32768
101082dc:	10bfffc4 	addi	r2,r2,-1
101082e0:	2884703a 	and	r2,r5,r2
101082e4:	10000726 	beq	r2,zero,10108304 <__fpclassifyd+0x2c>
101082e8:	00fffc34 	movhi	r3,65520
101082ec:	019ff834 	movhi	r6,32736
101082f0:	28c7883a 	add	r3,r5,r3
101082f4:	31bfffc4 	addi	r6,r6,-1
101082f8:	30c00536 	bltu	r6,r3,10108310 <__fpclassifyd+0x38>
101082fc:	00800104 	movi	r2,4
10108300:	f800283a 	ret
10108304:	2000021e 	bne	r4,zero,10108310 <__fpclassifyd+0x38>
10108308:	00800084 	movi	r2,2
1010830c:	f800283a 	ret
10108310:	00dffc34 	movhi	r3,32752
10108314:	019ff834 	movhi	r6,32736
10108318:	28cb883a 	add	r5,r5,r3
1010831c:	31bfffc4 	addi	r6,r6,-1
10108320:	317ff62e 	bgeu	r6,r5,101082fc <__alt_data_end+0xfffe82fc>
10108324:	01400434 	movhi	r5,16
10108328:	297fffc4 	addi	r5,r5,-1
1010832c:	28800236 	bltu	r5,r2,10108338 <__fpclassifyd+0x60>
10108330:	008000c4 	movi	r2,3
10108334:	f800283a 	ret
10108338:	10c00226 	beq	r2,r3,10108344 <__fpclassifyd+0x6c>
1010833c:	0005883a 	mov	r2,zero
10108340:	f800283a 	ret
10108344:	2005003a 	cmpeq	r2,r4,zero
10108348:	f800283a 	ret

1010834c <_sbrk_r>:
1010834c:	defffd04 	addi	sp,sp,-12
10108350:	dc000015 	stw	r16,0(sp)
10108354:	04040474 	movhi	r16,4113
10108358:	dc400115 	stw	r17,4(sp)
1010835c:	840f0f04 	addi	r16,r16,15420
10108360:	2023883a 	mov	r17,r4
10108364:	2809883a 	mov	r4,r5
10108368:	dfc00215 	stw	ra,8(sp)
1010836c:	80000015 	stw	zero,0(r16)
10108370:	010ddac0 	call	1010ddac <sbrk>
10108374:	00ffffc4 	movi	r3,-1
10108378:	10c00526 	beq	r2,r3,10108390 <_sbrk_r+0x44>
1010837c:	dfc00217 	ldw	ra,8(sp)
10108380:	dc400117 	ldw	r17,4(sp)
10108384:	dc000017 	ldw	r16,0(sp)
10108388:	dec00304 	addi	sp,sp,12
1010838c:	f800283a 	ret
10108390:	80c00017 	ldw	r3,0(r16)
10108394:	183ff926 	beq	r3,zero,1010837c <__alt_data_end+0xfffe837c>
10108398:	88c00015 	stw	r3,0(r17)
1010839c:	003ff706 	br	1010837c <__alt_data_end+0xfffe837c>

101083a0 <__sread>:
101083a0:	defffe04 	addi	sp,sp,-8
101083a4:	dc000015 	stw	r16,0(sp)
101083a8:	2821883a 	mov	r16,r5
101083ac:	2940038f 	ldh	r5,14(r5)
101083b0:	dfc00115 	stw	ra,4(sp)
101083b4:	010a1940 	call	1010a194 <_read_r>
101083b8:	10000716 	blt	r2,zero,101083d8 <__sread+0x38>
101083bc:	80c01417 	ldw	r3,80(r16)
101083c0:	1887883a 	add	r3,r3,r2
101083c4:	80c01415 	stw	r3,80(r16)
101083c8:	dfc00117 	ldw	ra,4(sp)
101083cc:	dc000017 	ldw	r16,0(sp)
101083d0:	dec00204 	addi	sp,sp,8
101083d4:	f800283a 	ret
101083d8:	80c0030b 	ldhu	r3,12(r16)
101083dc:	18fbffcc 	andi	r3,r3,61439
101083e0:	80c0030d 	sth	r3,12(r16)
101083e4:	dfc00117 	ldw	ra,4(sp)
101083e8:	dc000017 	ldw	r16,0(sp)
101083ec:	dec00204 	addi	sp,sp,8
101083f0:	f800283a 	ret

101083f4 <__seofread>:
101083f4:	0005883a 	mov	r2,zero
101083f8:	f800283a 	ret

101083fc <__swrite>:
101083fc:	2880030b 	ldhu	r2,12(r5)
10108400:	defffb04 	addi	sp,sp,-20
10108404:	dcc00315 	stw	r19,12(sp)
10108408:	dc800215 	stw	r18,8(sp)
1010840c:	dc400115 	stw	r17,4(sp)
10108410:	dc000015 	stw	r16,0(sp)
10108414:	dfc00415 	stw	ra,16(sp)
10108418:	10c0400c 	andi	r3,r2,256
1010841c:	2821883a 	mov	r16,r5
10108420:	2023883a 	mov	r17,r4
10108424:	3025883a 	mov	r18,r6
10108428:	3827883a 	mov	r19,r7
1010842c:	18000526 	beq	r3,zero,10108444 <__swrite+0x48>
10108430:	2940038f 	ldh	r5,14(r5)
10108434:	01c00084 	movi	r7,2
10108438:	000d883a 	mov	r6,zero
1010843c:	010a1340 	call	1010a134 <_lseek_r>
10108440:	8080030b 	ldhu	r2,12(r16)
10108444:	8140038f 	ldh	r5,14(r16)
10108448:	10bbffcc 	andi	r2,r2,61439
1010844c:	980f883a 	mov	r7,r19
10108450:	900d883a 	mov	r6,r18
10108454:	8809883a 	mov	r4,r17
10108458:	8080030d 	sth	r2,12(r16)
1010845c:	dfc00417 	ldw	ra,16(sp)
10108460:	dcc00317 	ldw	r19,12(sp)
10108464:	dc800217 	ldw	r18,8(sp)
10108468:	dc400117 	ldw	r17,4(sp)
1010846c:	dc000017 	ldw	r16,0(sp)
10108470:	dec00504 	addi	sp,sp,20
10108474:	0109c001 	jmpi	10109c00 <_write_r>

10108478 <__sseek>:
10108478:	defffe04 	addi	sp,sp,-8
1010847c:	dc000015 	stw	r16,0(sp)
10108480:	2821883a 	mov	r16,r5
10108484:	2940038f 	ldh	r5,14(r5)
10108488:	dfc00115 	stw	ra,4(sp)
1010848c:	010a1340 	call	1010a134 <_lseek_r>
10108490:	00ffffc4 	movi	r3,-1
10108494:	10c00826 	beq	r2,r3,101084b8 <__sseek+0x40>
10108498:	80c0030b 	ldhu	r3,12(r16)
1010849c:	80801415 	stw	r2,80(r16)
101084a0:	18c40014 	ori	r3,r3,4096
101084a4:	80c0030d 	sth	r3,12(r16)
101084a8:	dfc00117 	ldw	ra,4(sp)
101084ac:	dc000017 	ldw	r16,0(sp)
101084b0:	dec00204 	addi	sp,sp,8
101084b4:	f800283a 	ret
101084b8:	80c0030b 	ldhu	r3,12(r16)
101084bc:	18fbffcc 	andi	r3,r3,61439
101084c0:	80c0030d 	sth	r3,12(r16)
101084c4:	dfc00117 	ldw	ra,4(sp)
101084c8:	dc000017 	ldw	r16,0(sp)
101084cc:	dec00204 	addi	sp,sp,8
101084d0:	f800283a 	ret

101084d4 <__sclose>:
101084d4:	2940038f 	ldh	r5,14(r5)
101084d8:	0109c601 	jmpi	10109c60 <_close_r>

101084dc <strcmp>:
101084dc:	2144b03a 	or	r2,r4,r5
101084e0:	108000cc 	andi	r2,r2,3
101084e4:	1000171e 	bne	r2,zero,10108544 <strcmp+0x68>
101084e8:	20800017 	ldw	r2,0(r4)
101084ec:	28c00017 	ldw	r3,0(r5)
101084f0:	10c0141e 	bne	r2,r3,10108544 <strcmp+0x68>
101084f4:	027fbff4 	movhi	r9,65279
101084f8:	4a7fbfc4 	addi	r9,r9,-257
101084fc:	0086303a 	nor	r3,zero,r2
10108500:	02202074 	movhi	r8,32897
10108504:	1245883a 	add	r2,r2,r9
10108508:	42202004 	addi	r8,r8,-32640
1010850c:	10c4703a 	and	r2,r2,r3
10108510:	1204703a 	and	r2,r2,r8
10108514:	10000226 	beq	r2,zero,10108520 <strcmp+0x44>
10108518:	00002306 	br	101085a8 <strcmp+0xcc>
1010851c:	1000221e 	bne	r2,zero,101085a8 <strcmp+0xcc>
10108520:	21000104 	addi	r4,r4,4
10108524:	20c00017 	ldw	r3,0(r4)
10108528:	29400104 	addi	r5,r5,4
1010852c:	29800017 	ldw	r6,0(r5)
10108530:	1a4f883a 	add	r7,r3,r9
10108534:	00c4303a 	nor	r2,zero,r3
10108538:	3884703a 	and	r2,r7,r2
1010853c:	1204703a 	and	r2,r2,r8
10108540:	19bff626 	beq	r3,r6,1010851c <__alt_data_end+0xfffe851c>
10108544:	20800003 	ldbu	r2,0(r4)
10108548:	10c03fcc 	andi	r3,r2,255
1010854c:	18c0201c 	xori	r3,r3,128
10108550:	18ffe004 	addi	r3,r3,-128
10108554:	18000c26 	beq	r3,zero,10108588 <strcmp+0xac>
10108558:	29800007 	ldb	r6,0(r5)
1010855c:	19800326 	beq	r3,r6,1010856c <strcmp+0x90>
10108560:	00001306 	br	101085b0 <strcmp+0xd4>
10108564:	29800007 	ldb	r6,0(r5)
10108568:	11800b1e 	bne	r2,r6,10108598 <strcmp+0xbc>
1010856c:	21000044 	addi	r4,r4,1
10108570:	20c00003 	ldbu	r3,0(r4)
10108574:	29400044 	addi	r5,r5,1
10108578:	18803fcc 	andi	r2,r3,255
1010857c:	1080201c 	xori	r2,r2,128
10108580:	10bfe004 	addi	r2,r2,-128
10108584:	103ff71e 	bne	r2,zero,10108564 <__alt_data_end+0xfffe8564>
10108588:	0007883a 	mov	r3,zero
1010858c:	28800003 	ldbu	r2,0(r5)
10108590:	1885c83a 	sub	r2,r3,r2
10108594:	f800283a 	ret
10108598:	28800003 	ldbu	r2,0(r5)
1010859c:	18c03fcc 	andi	r3,r3,255
101085a0:	1885c83a 	sub	r2,r3,r2
101085a4:	f800283a 	ret
101085a8:	0005883a 	mov	r2,zero
101085ac:	f800283a 	ret
101085b0:	10c03fcc 	andi	r3,r2,255
101085b4:	003ff506 	br	1010858c <__alt_data_end+0xfffe858c>

101085b8 <__sprint_r.part.0>:
101085b8:	28801917 	ldw	r2,100(r5)
101085bc:	defff604 	addi	sp,sp,-40
101085c0:	dd400515 	stw	r21,20(sp)
101085c4:	dfc00915 	stw	ra,36(sp)
101085c8:	df000815 	stw	fp,32(sp)
101085cc:	ddc00715 	stw	r23,28(sp)
101085d0:	dd800615 	stw	r22,24(sp)
101085d4:	dd000415 	stw	r20,16(sp)
101085d8:	dcc00315 	stw	r19,12(sp)
101085dc:	dc800215 	stw	r18,8(sp)
101085e0:	dc400115 	stw	r17,4(sp)
101085e4:	dc000015 	stw	r16,0(sp)
101085e8:	1088000c 	andi	r2,r2,8192
101085ec:	302b883a 	mov	r21,r6
101085f0:	10002e26 	beq	r2,zero,101086ac <__sprint_r.part.0+0xf4>
101085f4:	30800217 	ldw	r2,8(r6)
101085f8:	35800017 	ldw	r22,0(r6)
101085fc:	10002926 	beq	r2,zero,101086a4 <__sprint_r.part.0+0xec>
10108600:	2827883a 	mov	r19,r5
10108604:	2029883a 	mov	r20,r4
10108608:	b5c00104 	addi	r23,r22,4
1010860c:	04bfffc4 	movi	r18,-1
10108610:	bc400017 	ldw	r17,0(r23)
10108614:	b4000017 	ldw	r16,0(r22)
10108618:	0039883a 	mov	fp,zero
1010861c:	8822d0ba 	srli	r17,r17,2
10108620:	8800031e 	bne	r17,zero,10108630 <__sprint_r.part.0+0x78>
10108624:	00001806 	br	10108688 <__sprint_r.part.0+0xd0>
10108628:	84000104 	addi	r16,r16,4
1010862c:	8f001526 	beq	r17,fp,10108684 <__sprint_r.part.0+0xcc>
10108630:	81400017 	ldw	r5,0(r16)
10108634:	980d883a 	mov	r6,r19
10108638:	a009883a 	mov	r4,r20
1010863c:	0109fe00 	call	10109fe0 <_fputwc_r>
10108640:	e7000044 	addi	fp,fp,1
10108644:	14bff81e 	bne	r2,r18,10108628 <__alt_data_end+0xfffe8628>
10108648:	9005883a 	mov	r2,r18
1010864c:	a8000215 	stw	zero,8(r21)
10108650:	a8000115 	stw	zero,4(r21)
10108654:	dfc00917 	ldw	ra,36(sp)
10108658:	df000817 	ldw	fp,32(sp)
1010865c:	ddc00717 	ldw	r23,28(sp)
10108660:	dd800617 	ldw	r22,24(sp)
10108664:	dd400517 	ldw	r21,20(sp)
10108668:	dd000417 	ldw	r20,16(sp)
1010866c:	dcc00317 	ldw	r19,12(sp)
10108670:	dc800217 	ldw	r18,8(sp)
10108674:	dc400117 	ldw	r17,4(sp)
10108678:	dc000017 	ldw	r16,0(sp)
1010867c:	dec00a04 	addi	sp,sp,40
10108680:	f800283a 	ret
10108684:	a8800217 	ldw	r2,8(r21)
10108688:	8c63883a 	add	r17,r17,r17
1010868c:	8c63883a 	add	r17,r17,r17
10108690:	1445c83a 	sub	r2,r2,r17
10108694:	a8800215 	stw	r2,8(r21)
10108698:	b5800204 	addi	r22,r22,8
1010869c:	bdc00204 	addi	r23,r23,8
101086a0:	103fdb1e 	bne	r2,zero,10108610 <__alt_data_end+0xfffe8610>
101086a4:	0005883a 	mov	r2,zero
101086a8:	003fe806 	br	1010864c <__alt_data_end+0xfffe864c>
101086ac:	01057e00 	call	101057e0 <__sfvwrite_r>
101086b0:	003fe606 	br	1010864c <__alt_data_end+0xfffe864c>

101086b4 <__sprint_r>:
101086b4:	30c00217 	ldw	r3,8(r6)
101086b8:	18000126 	beq	r3,zero,101086c0 <__sprint_r+0xc>
101086bc:	01085b81 	jmpi	101085b8 <__sprint_r.part.0>
101086c0:	30000115 	stw	zero,4(r6)
101086c4:	0005883a 	mov	r2,zero
101086c8:	f800283a 	ret

101086cc <___vfiprintf_internal_r>:
101086cc:	deffc904 	addi	sp,sp,-220
101086d0:	df003515 	stw	fp,212(sp)
101086d4:	dd003115 	stw	r20,196(sp)
101086d8:	dfc03615 	stw	ra,216(sp)
101086dc:	ddc03415 	stw	r23,208(sp)
101086e0:	dd803315 	stw	r22,204(sp)
101086e4:	dd403215 	stw	r21,200(sp)
101086e8:	dcc03015 	stw	r19,192(sp)
101086ec:	dc802f15 	stw	r18,188(sp)
101086f0:	dc402e15 	stw	r17,184(sp)
101086f4:	dc002d15 	stw	r16,180(sp)
101086f8:	d9002015 	stw	r4,128(sp)
101086fc:	d9c02215 	stw	r7,136(sp)
10108700:	2829883a 	mov	r20,r5
10108704:	3039883a 	mov	fp,r6
10108708:	20000226 	beq	r4,zero,10108714 <___vfiprintf_internal_r+0x48>
1010870c:	20800e17 	ldw	r2,56(r4)
10108710:	1000cf26 	beq	r2,zero,10108a50 <___vfiprintf_internal_r+0x384>
10108714:	a080030b 	ldhu	r2,12(r20)
10108718:	10c8000c 	andi	r3,r2,8192
1010871c:	1800061e 	bne	r3,zero,10108738 <___vfiprintf_internal_r+0x6c>
10108720:	a1001917 	ldw	r4,100(r20)
10108724:	00f7ffc4 	movi	r3,-8193
10108728:	10880014 	ori	r2,r2,8192
1010872c:	20c6703a 	and	r3,r4,r3
10108730:	a080030d 	sth	r2,12(r20)
10108734:	a0c01915 	stw	r3,100(r20)
10108738:	10c0020c 	andi	r3,r2,8
1010873c:	1800a926 	beq	r3,zero,101089e4 <___vfiprintf_internal_r+0x318>
10108740:	a0c00417 	ldw	r3,16(r20)
10108744:	1800a726 	beq	r3,zero,101089e4 <___vfiprintf_internal_r+0x318>
10108748:	1080068c 	andi	r2,r2,26
1010874c:	00c00284 	movi	r3,10
10108750:	10c0ac26 	beq	r2,r3,10108a04 <___vfiprintf_internal_r+0x338>
10108754:	da801a04 	addi	r10,sp,104
10108758:	da801e15 	stw	r10,120(sp)
1010875c:	d8801e17 	ldw	r2,120(sp)
10108760:	da8019c4 	addi	r10,sp,103
10108764:	05840474 	movhi	r22,4113
10108768:	05c40474 	movhi	r23,4113
1010876c:	da801f15 	stw	r10,124(sp)
10108770:	1295c83a 	sub	r10,r2,r10
10108774:	b5810704 	addi	r22,r22,1052
10108778:	bdc10304 	addi	r23,r23,1036
1010877c:	dec01a15 	stw	sp,104(sp)
10108780:	d8001c15 	stw	zero,112(sp)
10108784:	d8001b15 	stw	zero,108(sp)
10108788:	d8002615 	stw	zero,152(sp)
1010878c:	d8002315 	stw	zero,140(sp)
10108790:	da802715 	stw	r10,156(sp)
10108794:	d811883a 	mov	r8,sp
10108798:	dd002115 	stw	r20,132(sp)
1010879c:	e021883a 	mov	r16,fp
101087a0:	80800007 	ldb	r2,0(r16)
101087a4:	1003ea26 	beq	r2,zero,10109750 <___vfiprintf_internal_r+0x1084>
101087a8:	00c00944 	movi	r3,37
101087ac:	8025883a 	mov	r18,r16
101087b0:	10c0021e 	bne	r2,r3,101087bc <___vfiprintf_internal_r+0xf0>
101087b4:	00001606 	br	10108810 <___vfiprintf_internal_r+0x144>
101087b8:	10c00326 	beq	r2,r3,101087c8 <___vfiprintf_internal_r+0xfc>
101087bc:	94800044 	addi	r18,r18,1
101087c0:	90800007 	ldb	r2,0(r18)
101087c4:	103ffc1e 	bne	r2,zero,101087b8 <__alt_data_end+0xfffe87b8>
101087c8:	9423c83a 	sub	r17,r18,r16
101087cc:	88001026 	beq	r17,zero,10108810 <___vfiprintf_internal_r+0x144>
101087d0:	d8c01c17 	ldw	r3,112(sp)
101087d4:	d8801b17 	ldw	r2,108(sp)
101087d8:	44000015 	stw	r16,0(r8)
101087dc:	88c7883a 	add	r3,r17,r3
101087e0:	10800044 	addi	r2,r2,1
101087e4:	44400115 	stw	r17,4(r8)
101087e8:	d8c01c15 	stw	r3,112(sp)
101087ec:	d8801b15 	stw	r2,108(sp)
101087f0:	010001c4 	movi	r4,7
101087f4:	2080760e 	bge	r4,r2,101089d0 <___vfiprintf_internal_r+0x304>
101087f8:	1803821e 	bne	r3,zero,10109604 <___vfiprintf_internal_r+0xf38>
101087fc:	da802317 	ldw	r10,140(sp)
10108800:	d8001b15 	stw	zero,108(sp)
10108804:	d811883a 	mov	r8,sp
10108808:	5455883a 	add	r10,r10,r17
1010880c:	da802315 	stw	r10,140(sp)
10108810:	90800007 	ldb	r2,0(r18)
10108814:	10044626 	beq	r2,zero,10109930 <___vfiprintf_internal_r+0x1264>
10108818:	90c00047 	ldb	r3,1(r18)
1010881c:	94000044 	addi	r16,r18,1
10108820:	d8001d85 	stb	zero,118(sp)
10108824:	0009883a 	mov	r4,zero
10108828:	000f883a 	mov	r7,zero
1010882c:	027fffc4 	movi	r9,-1
10108830:	0023883a 	mov	r17,zero
10108834:	0029883a 	mov	r20,zero
10108838:	01401604 	movi	r5,88
1010883c:	01800244 	movi	r6,9
10108840:	03400a84 	movi	r13,42
10108844:	03001b04 	movi	r12,108
10108848:	84000044 	addi	r16,r16,1
1010884c:	18bff804 	addi	r2,r3,-32
10108850:	28827336 	bltu	r5,r2,10109220 <___vfiprintf_internal_r+0xb54>
10108854:	100490ba 	slli	r2,r2,2
10108858:	02840474 	movhi	r10,4113
1010885c:	52a21b04 	addi	r10,r10,-30612
10108860:	1285883a 	add	r2,r2,r10
10108864:	10800017 	ldw	r2,0(r2)
10108868:	1000683a 	jmp	r2
1010886c:	10108f54 	ori	zero,r2,16957
10108870:	10109220 	cmpeqi	zero,r2,16968
10108874:	10109220 	cmpeqi	zero,r2,16968
10108878:	10108f74 	orhi	zero,r2,16957
1010887c:	10109220 	cmpeqi	zero,r2,16968
10108880:	10109220 	cmpeqi	zero,r2,16968
10108884:	10109220 	cmpeqi	zero,r2,16968
10108888:	10109220 	cmpeqi	zero,r2,16968
1010888c:	10109220 	cmpeqi	zero,r2,16968
10108890:	10109220 	cmpeqi	zero,r2,16968
10108894:	1010915c 	xori	zero,r2,16965
10108898:	10109178 	rdprs	zero,r2,16965
1010889c:	10109220 	cmpeqi	zero,r2,16968
101088a0:	10108a60 	cmpeqi	zero,r2,16937
101088a4:	10109188 	cmpgei	zero,r2,16966
101088a8:	10109220 	cmpeqi	zero,r2,16968
101088ac:	10108f80 	call	110108f8 <__alt_data_end+0xef08f8>
101088b0:	10108f8c 	andi	zero,r2,16958
101088b4:	10108f8c 	andi	zero,r2,16958
101088b8:	10108f8c 	andi	zero,r2,16958
101088bc:	10108f8c 	andi	zero,r2,16958
101088c0:	10108f8c 	andi	zero,r2,16958
101088c4:	10108f8c 	andi	zero,r2,16958
101088c8:	10108f8c 	andi	zero,r2,16958
101088cc:	10108f8c 	andi	zero,r2,16958
101088d0:	10108f8c 	andi	zero,r2,16958
101088d4:	10109220 	cmpeqi	zero,r2,16968
101088d8:	10109220 	cmpeqi	zero,r2,16968
101088dc:	10109220 	cmpeqi	zero,r2,16968
101088e0:	10109220 	cmpeqi	zero,r2,16968
101088e4:	10109220 	cmpeqi	zero,r2,16968
101088e8:	10109220 	cmpeqi	zero,r2,16968
101088ec:	10109220 	cmpeqi	zero,r2,16968
101088f0:	10109220 	cmpeqi	zero,r2,16968
101088f4:	10109220 	cmpeqi	zero,r2,16968
101088f8:	10109220 	cmpeqi	zero,r2,16968
101088fc:	10108fb8 	rdprs	zero,r2,16958
10108900:	10109220 	cmpeqi	zero,r2,16968
10108904:	10109220 	cmpeqi	zero,r2,16968
10108908:	10109220 	cmpeqi	zero,r2,16968
1010890c:	10109220 	cmpeqi	zero,r2,16968
10108910:	10109220 	cmpeqi	zero,r2,16968
10108914:	10109220 	cmpeqi	zero,r2,16968
10108918:	10109220 	cmpeqi	zero,r2,16968
1010891c:	10109220 	cmpeqi	zero,r2,16968
10108920:	10109220 	cmpeqi	zero,r2,16968
10108924:	10109220 	cmpeqi	zero,r2,16968
10108928:	10108ff0 	cmpltui	zero,r2,16959
1010892c:	10109220 	cmpeqi	zero,r2,16968
10108930:	10109220 	cmpeqi	zero,r2,16968
10108934:	10109220 	cmpeqi	zero,r2,16968
10108938:	10109220 	cmpeqi	zero,r2,16968
1010893c:	10109220 	cmpeqi	zero,r2,16968
10108940:	10109048 	cmpgei	zero,r2,16961
10108944:	10109220 	cmpeqi	zero,r2,16968
10108948:	10109220 	cmpeqi	zero,r2,16968
1010894c:	101090b8 	rdprs	zero,r2,16962
10108950:	10109220 	cmpeqi	zero,r2,16968
10108954:	10109220 	cmpeqi	zero,r2,16968
10108958:	10109220 	cmpeqi	zero,r2,16968
1010895c:	10109220 	cmpeqi	zero,r2,16968
10108960:	10109220 	cmpeqi	zero,r2,16968
10108964:	10109220 	cmpeqi	zero,r2,16968
10108968:	10109220 	cmpeqi	zero,r2,16968
1010896c:	10109220 	cmpeqi	zero,r2,16968
10108970:	10109220 	cmpeqi	zero,r2,16968
10108974:	10109220 	cmpeqi	zero,r2,16968
10108978:	10108e64 	muli	zero,r2,16953
1010897c:	10108e90 	cmplti	zero,r2,16954
10108980:	10109220 	cmpeqi	zero,r2,16968
10108984:	10109220 	cmpeqi	zero,r2,16968
10108988:	10109220 	cmpeqi	zero,r2,16968
1010898c:	101091c8 	cmpgei	zero,r2,16967
10108990:	10108e90 	cmplti	zero,r2,16954
10108994:	10109220 	cmpeqi	zero,r2,16968
10108998:	10109220 	cmpeqi	zero,r2,16968
1010899c:	10108d24 	muli	zero,r2,16948
101089a0:	10109220 	cmpeqi	zero,r2,16968
101089a4:	10108d34 	orhi	zero,r2,16948
101089a8:	10108d70 	cmpltui	zero,r2,16949
101089ac:	10108a6c 	andhi	zero,r2,16937
101089b0:	10108d18 	cmpnei	zero,r2,16948
101089b4:	10109220 	cmpeqi	zero,r2,16968
101089b8:	101090f4 	orhi	zero,r2,16963
101089bc:	10109220 	cmpeqi	zero,r2,16968
101089c0:	1010914c 	andi	zero,r2,16965
101089c4:	10109220 	cmpeqi	zero,r2,16968
101089c8:	10109220 	cmpeqi	zero,r2,16968
101089cc:	10108e10 	cmplti	zero,r2,16952
101089d0:	42000204 	addi	r8,r8,8
101089d4:	da802317 	ldw	r10,140(sp)
101089d8:	5455883a 	add	r10,r10,r17
101089dc:	da802315 	stw	r10,140(sp)
101089e0:	003f8b06 	br	10108810 <__alt_data_end+0xfffe8810>
101089e4:	d9002017 	ldw	r4,128(sp)
101089e8:	a00b883a 	mov	r5,r20
101089ec:	01033880 	call	10103388 <__swsetup_r>
101089f0:	1003b11e 	bne	r2,zero,101098b8 <___vfiprintf_internal_r+0x11ec>
101089f4:	a080030b 	ldhu	r2,12(r20)
101089f8:	00c00284 	movi	r3,10
101089fc:	1080068c 	andi	r2,r2,26
10108a00:	10ff541e 	bne	r2,r3,10108754 <__alt_data_end+0xfffe8754>
10108a04:	a080038f 	ldh	r2,14(r20)
10108a08:	103f5216 	blt	r2,zero,10108754 <__alt_data_end+0xfffe8754>
10108a0c:	d9c02217 	ldw	r7,136(sp)
10108a10:	d9002017 	ldw	r4,128(sp)
10108a14:	e00d883a 	mov	r6,fp
10108a18:	a00b883a 	mov	r5,r20
10108a1c:	0109b440 	call	10109b44 <__sbprintf>
10108a20:	dfc03617 	ldw	ra,216(sp)
10108a24:	df003517 	ldw	fp,212(sp)
10108a28:	ddc03417 	ldw	r23,208(sp)
10108a2c:	dd803317 	ldw	r22,204(sp)
10108a30:	dd403217 	ldw	r21,200(sp)
10108a34:	dd003117 	ldw	r20,196(sp)
10108a38:	dcc03017 	ldw	r19,192(sp)
10108a3c:	dc802f17 	ldw	r18,188(sp)
10108a40:	dc402e17 	ldw	r17,184(sp)
10108a44:	dc002d17 	ldw	r16,180(sp)
10108a48:	dec03704 	addi	sp,sp,220
10108a4c:	f800283a 	ret
10108a50:	010535c0 	call	1010535c <__sinit>
10108a54:	003f2f06 	br	10108714 <__alt_data_end+0xfffe8714>
10108a58:	0463c83a 	sub	r17,zero,r17
10108a5c:	d8802215 	stw	r2,136(sp)
10108a60:	a5000114 	ori	r20,r20,4
10108a64:	80c00007 	ldb	r3,0(r16)
10108a68:	003f7706 	br	10108848 <__alt_data_end+0xfffe8848>
10108a6c:	00800c04 	movi	r2,48
10108a70:	da802217 	ldw	r10,136(sp)
10108a74:	d8801d05 	stb	r2,116(sp)
10108a78:	00801e04 	movi	r2,120
10108a7c:	d8801d45 	stb	r2,117(sp)
10108a80:	d8001d85 	stb	zero,118(sp)
10108a84:	50c00104 	addi	r3,r10,4
10108a88:	54800017 	ldw	r18,0(r10)
10108a8c:	0027883a 	mov	r19,zero
10108a90:	a0800094 	ori	r2,r20,2
10108a94:	48030b16 	blt	r9,zero,101096c4 <___vfiprintf_internal_r+0xff8>
10108a98:	00bfdfc4 	movi	r2,-129
10108a9c:	a096703a 	and	r11,r20,r2
10108aa0:	d8c02215 	stw	r3,136(sp)
10108aa4:	5d000094 	ori	r20,r11,2
10108aa8:	90032b1e 	bne	r18,zero,10109758 <___vfiprintf_internal_r+0x108c>
10108aac:	00840474 	movhi	r2,4113
10108ab0:	1080a204 	addi	r2,r2,648
10108ab4:	d8802615 	stw	r2,152(sp)
10108ab8:	0039883a 	mov	fp,zero
10108abc:	48017b1e 	bne	r9,zero,101090ac <___vfiprintf_internal_r+0x9e0>
10108ac0:	0013883a 	mov	r9,zero
10108ac4:	0027883a 	mov	r19,zero
10108ac8:	dd401a04 	addi	r21,sp,104
10108acc:	4825883a 	mov	r18,r9
10108ad0:	4cc0010e 	bge	r9,r19,10108ad8 <___vfiprintf_internal_r+0x40c>
10108ad4:	9825883a 	mov	r18,r19
10108ad8:	e7003fcc 	andi	fp,fp,255
10108adc:	e700201c 	xori	fp,fp,128
10108ae0:	e73fe004 	addi	fp,fp,-128
10108ae4:	e0000126 	beq	fp,zero,10108aec <___vfiprintf_internal_r+0x420>
10108ae8:	94800044 	addi	r18,r18,1
10108aec:	a380008c 	andi	r14,r20,2
10108af0:	70000126 	beq	r14,zero,10108af8 <___vfiprintf_internal_r+0x42c>
10108af4:	94800084 	addi	r18,r18,2
10108af8:	a700210c 	andi	fp,r20,132
10108afc:	e001df1e 	bne	fp,zero,1010927c <___vfiprintf_internal_r+0xbb0>
10108b00:	8c87c83a 	sub	r3,r17,r18
10108b04:	00c1dd0e 	bge	zero,r3,1010927c <___vfiprintf_internal_r+0xbb0>
10108b08:	01c00404 	movi	r7,16
10108b0c:	d8801c17 	ldw	r2,112(sp)
10108b10:	38c3ad0e 	bge	r7,r3,101099c8 <___vfiprintf_internal_r+0x12fc>
10108b14:	02840474 	movhi	r10,4113
10108b18:	52810704 	addi	r10,r10,1052
10108b1c:	dc002915 	stw	r16,164(sp)
10108b20:	d9801b17 	ldw	r6,108(sp)
10108b24:	da802415 	stw	r10,144(sp)
10108b28:	03c001c4 	movi	r15,7
10108b2c:	da402515 	stw	r9,148(sp)
10108b30:	db802815 	stw	r14,160(sp)
10108b34:	1821883a 	mov	r16,r3
10108b38:	00000506 	br	10108b50 <___vfiprintf_internal_r+0x484>
10108b3c:	31400084 	addi	r5,r6,2
10108b40:	42000204 	addi	r8,r8,8
10108b44:	200d883a 	mov	r6,r4
10108b48:	843ffc04 	addi	r16,r16,-16
10108b4c:	3c000d0e 	bge	r7,r16,10108b84 <___vfiprintf_internal_r+0x4b8>
10108b50:	10800404 	addi	r2,r2,16
10108b54:	31000044 	addi	r4,r6,1
10108b58:	45800015 	stw	r22,0(r8)
10108b5c:	41c00115 	stw	r7,4(r8)
10108b60:	d8801c15 	stw	r2,112(sp)
10108b64:	d9001b15 	stw	r4,108(sp)
10108b68:	793ff40e 	bge	r15,r4,10108b3c <__alt_data_end+0xfffe8b3c>
10108b6c:	1001b51e 	bne	r2,zero,10109244 <___vfiprintf_internal_r+0xb78>
10108b70:	843ffc04 	addi	r16,r16,-16
10108b74:	000d883a 	mov	r6,zero
10108b78:	01400044 	movi	r5,1
10108b7c:	d811883a 	mov	r8,sp
10108b80:	3c3ff316 	blt	r7,r16,10108b50 <__alt_data_end+0xfffe8b50>
10108b84:	8007883a 	mov	r3,r16
10108b88:	da402517 	ldw	r9,148(sp)
10108b8c:	db802817 	ldw	r14,160(sp)
10108b90:	dc002917 	ldw	r16,164(sp)
10108b94:	da802417 	ldw	r10,144(sp)
10108b98:	1885883a 	add	r2,r3,r2
10108b9c:	40c00115 	stw	r3,4(r8)
10108ba0:	42800015 	stw	r10,0(r8)
10108ba4:	d8801c15 	stw	r2,112(sp)
10108ba8:	d9401b15 	stw	r5,108(sp)
10108bac:	00c001c4 	movi	r3,7
10108bb0:	19426016 	blt	r3,r5,10109534 <___vfiprintf_internal_r+0xe68>
10108bb4:	d8c01d87 	ldb	r3,118(sp)
10108bb8:	42000204 	addi	r8,r8,8
10108bbc:	29000044 	addi	r4,r5,1
10108bc0:	1801b31e 	bne	r3,zero,10109290 <___vfiprintf_internal_r+0xbc4>
10108bc4:	7001c026 	beq	r14,zero,101092c8 <___vfiprintf_internal_r+0xbfc>
10108bc8:	d8c01d04 	addi	r3,sp,116
10108bcc:	10800084 	addi	r2,r2,2
10108bd0:	40c00015 	stw	r3,0(r8)
10108bd4:	00c00084 	movi	r3,2
10108bd8:	40c00115 	stw	r3,4(r8)
10108bdc:	d8801c15 	stw	r2,112(sp)
10108be0:	d9001b15 	stw	r4,108(sp)
10108be4:	00c001c4 	movi	r3,7
10108be8:	1902650e 	bge	r3,r4,10109580 <___vfiprintf_internal_r+0xeb4>
10108bec:	10029a1e 	bne	r2,zero,10109658 <___vfiprintf_internal_r+0xf8c>
10108bf0:	00c02004 	movi	r3,128
10108bf4:	01000044 	movi	r4,1
10108bf8:	000b883a 	mov	r5,zero
10108bfc:	d811883a 	mov	r8,sp
10108c00:	e0c1b31e 	bne	fp,r3,101092d0 <___vfiprintf_internal_r+0xc04>
10108c04:	8cb9c83a 	sub	fp,r17,r18
10108c08:	0701b10e 	bge	zero,fp,101092d0 <___vfiprintf_internal_r+0xc04>
10108c0c:	01c00404 	movi	r7,16
10108c10:	3f03890e 	bge	r7,fp,10109a38 <___vfiprintf_internal_r+0x136c>
10108c14:	00c40474 	movhi	r3,4113
10108c18:	18c10304 	addi	r3,r3,1036
10108c1c:	d8c02415 	stw	r3,144(sp)
10108c20:	8007883a 	mov	r3,r16
10108c24:	034001c4 	movi	r13,7
10108c28:	e021883a 	mov	r16,fp
10108c2c:	da402515 	stw	r9,148(sp)
10108c30:	1839883a 	mov	fp,r3
10108c34:	00000506 	br	10108c4c <___vfiprintf_internal_r+0x580>
10108c38:	29800084 	addi	r6,r5,2
10108c3c:	42000204 	addi	r8,r8,8
10108c40:	180b883a 	mov	r5,r3
10108c44:	843ffc04 	addi	r16,r16,-16
10108c48:	3c000d0e 	bge	r7,r16,10108c80 <___vfiprintf_internal_r+0x5b4>
10108c4c:	10800404 	addi	r2,r2,16
10108c50:	28c00044 	addi	r3,r5,1
10108c54:	45c00015 	stw	r23,0(r8)
10108c58:	41c00115 	stw	r7,4(r8)
10108c5c:	d8801c15 	stw	r2,112(sp)
10108c60:	d8c01b15 	stw	r3,108(sp)
10108c64:	68fff40e 	bge	r13,r3,10108c38 <__alt_data_end+0xfffe8c38>
10108c68:	1002241e 	bne	r2,zero,101094fc <___vfiprintf_internal_r+0xe30>
10108c6c:	843ffc04 	addi	r16,r16,-16
10108c70:	01800044 	movi	r6,1
10108c74:	000b883a 	mov	r5,zero
10108c78:	d811883a 	mov	r8,sp
10108c7c:	3c3ff316 	blt	r7,r16,10108c4c <__alt_data_end+0xfffe8c4c>
10108c80:	da402517 	ldw	r9,148(sp)
10108c84:	e007883a 	mov	r3,fp
10108c88:	8039883a 	mov	fp,r16
10108c8c:	1821883a 	mov	r16,r3
10108c90:	d8c02417 	ldw	r3,144(sp)
10108c94:	1705883a 	add	r2,r2,fp
10108c98:	47000115 	stw	fp,4(r8)
10108c9c:	40c00015 	stw	r3,0(r8)
10108ca0:	d8801c15 	stw	r2,112(sp)
10108ca4:	d9801b15 	stw	r6,108(sp)
10108ca8:	00c001c4 	movi	r3,7
10108cac:	19827616 	blt	r3,r6,10109688 <___vfiprintf_internal_r+0xfbc>
10108cb0:	4cf9c83a 	sub	fp,r9,r19
10108cb4:	42000204 	addi	r8,r8,8
10108cb8:	31000044 	addi	r4,r6,1
10108cbc:	300b883a 	mov	r5,r6
10108cc0:	07018516 	blt	zero,fp,101092d8 <___vfiprintf_internal_r+0xc0c>
10108cc4:	9885883a 	add	r2,r19,r2
10108cc8:	45400015 	stw	r21,0(r8)
10108ccc:	44c00115 	stw	r19,4(r8)
10108cd0:	d8801c15 	stw	r2,112(sp)
10108cd4:	d9001b15 	stw	r4,108(sp)
10108cd8:	00c001c4 	movi	r3,7
10108cdc:	1901dd0e 	bge	r3,r4,10109454 <___vfiprintf_internal_r+0xd88>
10108ce0:	1002401e 	bne	r2,zero,101095e4 <___vfiprintf_internal_r+0xf18>
10108ce4:	d8001b15 	stw	zero,108(sp)
10108ce8:	a2c0010c 	andi	r11,r20,4
10108cec:	58000226 	beq	r11,zero,10108cf8 <___vfiprintf_internal_r+0x62c>
10108cf0:	8ca7c83a 	sub	r19,r17,r18
10108cf4:	04c2f216 	blt	zero,r19,101098c0 <___vfiprintf_internal_r+0x11f4>
10108cf8:	8c80010e 	bge	r17,r18,10108d00 <___vfiprintf_internal_r+0x634>
10108cfc:	9023883a 	mov	r17,r18
10108d00:	da802317 	ldw	r10,140(sp)
10108d04:	5455883a 	add	r10,r10,r17
10108d08:	da802315 	stw	r10,140(sp)
10108d0c:	d8001b15 	stw	zero,108(sp)
10108d10:	d811883a 	mov	r8,sp
10108d14:	003ea206 	br	101087a0 <__alt_data_end+0xfffe87a0>
10108d18:	a5000814 	ori	r20,r20,32
10108d1c:	80c00007 	ldb	r3,0(r16)
10108d20:	003ec906 	br	10108848 <__alt_data_end+0xfffe8848>
10108d24:	80c00007 	ldb	r3,0(r16)
10108d28:	1b030926 	beq	r3,r12,10109950 <___vfiprintf_internal_r+0x1284>
10108d2c:	a5000414 	ori	r20,r20,16
10108d30:	003ec506 	br	10108848 <__alt_data_end+0xfffe8848>
10108d34:	21003fcc 	andi	r4,r4,255
10108d38:	20035e1e 	bne	r4,zero,10109ab4 <___vfiprintf_internal_r+0x13e8>
10108d3c:	a080080c 	andi	r2,r20,32
10108d40:	1002a526 	beq	r2,zero,101097d8 <___vfiprintf_internal_r+0x110c>
10108d44:	da802217 	ldw	r10,136(sp)
10108d48:	50800017 	ldw	r2,0(r10)
10108d4c:	da802317 	ldw	r10,140(sp)
10108d50:	5007d7fa 	srai	r3,r10,31
10108d54:	da802217 	ldw	r10,136(sp)
10108d58:	10c00115 	stw	r3,4(r2)
10108d5c:	52800104 	addi	r10,r10,4
10108d60:	da802215 	stw	r10,136(sp)
10108d64:	da802317 	ldw	r10,140(sp)
10108d68:	12800015 	stw	r10,0(r2)
10108d6c:	003e8c06 	br	101087a0 <__alt_data_end+0xfffe87a0>
10108d70:	21003fcc 	andi	r4,r4,255
10108d74:	2003511e 	bne	r4,zero,10109abc <___vfiprintf_internal_r+0x13f0>
10108d78:	a080080c 	andi	r2,r20,32
10108d7c:	1000a126 	beq	r2,zero,10109004 <___vfiprintf_internal_r+0x938>
10108d80:	da802217 	ldw	r10,136(sp)
10108d84:	d8001d85 	stb	zero,118(sp)
10108d88:	50800204 	addi	r2,r10,8
10108d8c:	54800017 	ldw	r18,0(r10)
10108d90:	54c00117 	ldw	r19,4(r10)
10108d94:	4802b416 	blt	r9,zero,10109868 <___vfiprintf_internal_r+0x119c>
10108d98:	013fdfc4 	movi	r4,-129
10108d9c:	94c6b03a 	or	r3,r18,r19
10108da0:	d8802215 	stw	r2,136(sp)
10108da4:	a128703a 	and	r20,r20,r4
10108da8:	1800a226 	beq	r3,zero,10109034 <___vfiprintf_internal_r+0x968>
10108dac:	0039883a 	mov	fp,zero
10108db0:	dd401a04 	addi	r21,sp,104
10108db4:	9006d0fa 	srli	r3,r18,3
10108db8:	9808977a 	slli	r4,r19,29
10108dbc:	9826d0fa 	srli	r19,r19,3
10108dc0:	948001cc 	andi	r18,r18,7
10108dc4:	90800c04 	addi	r2,r18,48
10108dc8:	ad7fffc4 	addi	r21,r21,-1
10108dcc:	20e4b03a 	or	r18,r4,r3
10108dd0:	a8800005 	stb	r2,0(r21)
10108dd4:	94c6b03a 	or	r3,r18,r19
10108dd8:	183ff61e 	bne	r3,zero,10108db4 <__alt_data_end+0xfffe8db4>
10108ddc:	a0c0004c 	andi	r3,r20,1
10108de0:	18005926 	beq	r3,zero,10108f48 <___vfiprintf_internal_r+0x87c>
10108de4:	10803fcc 	andi	r2,r2,255
10108de8:	1080201c 	xori	r2,r2,128
10108dec:	10bfe004 	addi	r2,r2,-128
10108df0:	00c00c04 	movi	r3,48
10108df4:	10c05426 	beq	r2,r3,10108f48 <___vfiprintf_internal_r+0x87c>
10108df8:	da801e17 	ldw	r10,120(sp)
10108dfc:	a8bfffc4 	addi	r2,r21,-1
10108e00:	a8ffffc5 	stb	r3,-1(r21)
10108e04:	50a7c83a 	sub	r19,r10,r2
10108e08:	102b883a 	mov	r21,r2
10108e0c:	003f2f06 	br	10108acc <__alt_data_end+0xfffe8acc>
10108e10:	21003fcc 	andi	r4,r4,255
10108e14:	2003421e 	bne	r4,zero,10109b20 <___vfiprintf_internal_r+0x1454>
10108e18:	00840474 	movhi	r2,4113
10108e1c:	1080a204 	addi	r2,r2,648
10108e20:	d8802615 	stw	r2,152(sp)
10108e24:	a080080c 	andi	r2,r20,32
10108e28:	1000aa26 	beq	r2,zero,101090d4 <___vfiprintf_internal_r+0xa08>
10108e2c:	da802217 	ldw	r10,136(sp)
10108e30:	54800017 	ldw	r18,0(r10)
10108e34:	54c00117 	ldw	r19,4(r10)
10108e38:	52800204 	addi	r10,r10,8
10108e3c:	da802215 	stw	r10,136(sp)
10108e40:	a080004c 	andi	r2,r20,1
10108e44:	1001d226 	beq	r2,zero,10109590 <___vfiprintf_internal_r+0xec4>
10108e48:	94c4b03a 	or	r2,r18,r19
10108e4c:	1002351e 	bne	r2,zero,10109724 <___vfiprintf_internal_r+0x1058>
10108e50:	d8001d85 	stb	zero,118(sp)
10108e54:	48022216 	blt	r9,zero,101096e0 <___vfiprintf_internal_r+0x1014>
10108e58:	00bfdfc4 	movi	r2,-129
10108e5c:	a0a8703a 	and	r20,r20,r2
10108e60:	003f1506 	br	10108ab8 <__alt_data_end+0xfffe8ab8>
10108e64:	da802217 	ldw	r10,136(sp)
10108e68:	04800044 	movi	r18,1
10108e6c:	d8001d85 	stb	zero,118(sp)
10108e70:	50800017 	ldw	r2,0(r10)
10108e74:	52800104 	addi	r10,r10,4
10108e78:	da802215 	stw	r10,136(sp)
10108e7c:	d8801005 	stb	r2,64(sp)
10108e80:	9027883a 	mov	r19,r18
10108e84:	dd401004 	addi	r21,sp,64
10108e88:	0013883a 	mov	r9,zero
10108e8c:	003f1706 	br	10108aec <__alt_data_end+0xfffe8aec>
10108e90:	21003fcc 	andi	r4,r4,255
10108e94:	2003201e 	bne	r4,zero,10109b18 <___vfiprintf_internal_r+0x144c>
10108e98:	a080080c 	andi	r2,r20,32
10108e9c:	10004b26 	beq	r2,zero,10108fcc <___vfiprintf_internal_r+0x900>
10108ea0:	da802217 	ldw	r10,136(sp)
10108ea4:	50800117 	ldw	r2,4(r10)
10108ea8:	54800017 	ldw	r18,0(r10)
10108eac:	52800204 	addi	r10,r10,8
10108eb0:	da802215 	stw	r10,136(sp)
10108eb4:	1027883a 	mov	r19,r2
10108eb8:	10022c16 	blt	r2,zero,1010976c <___vfiprintf_internal_r+0x10a0>
10108ebc:	df001d83 	ldbu	fp,118(sp)
10108ec0:	48007216 	blt	r9,zero,1010908c <___vfiprintf_internal_r+0x9c0>
10108ec4:	00ffdfc4 	movi	r3,-129
10108ec8:	94c4b03a 	or	r2,r18,r19
10108ecc:	a0e8703a 	and	r20,r20,r3
10108ed0:	1000cc26 	beq	r2,zero,10109204 <___vfiprintf_internal_r+0xb38>
10108ed4:	98021026 	beq	r19,zero,10109718 <___vfiprintf_internal_r+0x104c>
10108ed8:	dc402415 	stw	r17,144(sp)
10108edc:	dc002515 	stw	r16,148(sp)
10108ee0:	9823883a 	mov	r17,r19
10108ee4:	9021883a 	mov	r16,r18
10108ee8:	dd401a04 	addi	r21,sp,104
10108eec:	4825883a 	mov	r18,r9
10108ef0:	4027883a 	mov	r19,r8
10108ef4:	8009883a 	mov	r4,r16
10108ef8:	880b883a 	mov	r5,r17
10108efc:	01800284 	movi	r6,10
10108f00:	000f883a 	mov	r7,zero
10108f04:	010aaac0 	call	1010aaac <__umoddi3>
10108f08:	10800c04 	addi	r2,r2,48
10108f0c:	ad7fffc4 	addi	r21,r21,-1
10108f10:	8009883a 	mov	r4,r16
10108f14:	880b883a 	mov	r5,r17
10108f18:	a8800005 	stb	r2,0(r21)
10108f1c:	01800284 	movi	r6,10
10108f20:	000f883a 	mov	r7,zero
10108f24:	010a5340 	call	1010a534 <__udivdi3>
10108f28:	1021883a 	mov	r16,r2
10108f2c:	10c4b03a 	or	r2,r2,r3
10108f30:	1823883a 	mov	r17,r3
10108f34:	103fef1e 	bne	r2,zero,10108ef4 <__alt_data_end+0xfffe8ef4>
10108f38:	dc402417 	ldw	r17,144(sp)
10108f3c:	dc002517 	ldw	r16,148(sp)
10108f40:	9013883a 	mov	r9,r18
10108f44:	9811883a 	mov	r8,r19
10108f48:	da801e17 	ldw	r10,120(sp)
10108f4c:	5567c83a 	sub	r19,r10,r21
10108f50:	003ede06 	br	10108acc <__alt_data_end+0xfffe8acc>
10108f54:	38803fcc 	andi	r2,r7,255
10108f58:	1080201c 	xori	r2,r2,128
10108f5c:	10bfe004 	addi	r2,r2,-128
10108f60:	1002371e 	bne	r2,zero,10109840 <___vfiprintf_internal_r+0x1174>
10108f64:	01000044 	movi	r4,1
10108f68:	01c00804 	movi	r7,32
10108f6c:	80c00007 	ldb	r3,0(r16)
10108f70:	003e3506 	br	10108848 <__alt_data_end+0xfffe8848>
10108f74:	a5000054 	ori	r20,r20,1
10108f78:	80c00007 	ldb	r3,0(r16)
10108f7c:	003e3206 	br	10108848 <__alt_data_end+0xfffe8848>
10108f80:	a5002014 	ori	r20,r20,128
10108f84:	80c00007 	ldb	r3,0(r16)
10108f88:	003e2f06 	br	10108848 <__alt_data_end+0xfffe8848>
10108f8c:	8015883a 	mov	r10,r16
10108f90:	0023883a 	mov	r17,zero
10108f94:	18bff404 	addi	r2,r3,-48
10108f98:	50c00007 	ldb	r3,0(r10)
10108f9c:	8c4002a4 	muli	r17,r17,10
10108fa0:	84000044 	addi	r16,r16,1
10108fa4:	8015883a 	mov	r10,r16
10108fa8:	1463883a 	add	r17,r2,r17
10108fac:	18bff404 	addi	r2,r3,-48
10108fb0:	30bff92e 	bgeu	r6,r2,10108f98 <__alt_data_end+0xfffe8f98>
10108fb4:	003e2506 	br	1010884c <__alt_data_end+0xfffe884c>
10108fb8:	21003fcc 	andi	r4,r4,255
10108fbc:	2002d41e 	bne	r4,zero,10109b10 <___vfiprintf_internal_r+0x1444>
10108fc0:	a5000414 	ori	r20,r20,16
10108fc4:	a080080c 	andi	r2,r20,32
10108fc8:	103fb51e 	bne	r2,zero,10108ea0 <__alt_data_end+0xfffe8ea0>
10108fcc:	a080040c 	andi	r2,r20,16
10108fd0:	1001f826 	beq	r2,zero,101097b4 <___vfiprintf_internal_r+0x10e8>
10108fd4:	da802217 	ldw	r10,136(sp)
10108fd8:	54800017 	ldw	r18,0(r10)
10108fdc:	52800104 	addi	r10,r10,4
10108fe0:	da802215 	stw	r10,136(sp)
10108fe4:	9027d7fa 	srai	r19,r18,31
10108fe8:	9805883a 	mov	r2,r19
10108fec:	003fb206 	br	10108eb8 <__alt_data_end+0xfffe8eb8>
10108ff0:	21003fcc 	andi	r4,r4,255
10108ff4:	2002c41e 	bne	r4,zero,10109b08 <___vfiprintf_internal_r+0x143c>
10108ff8:	a5000414 	ori	r20,r20,16
10108ffc:	a080080c 	andi	r2,r20,32
10109000:	103f5f1e 	bne	r2,zero,10108d80 <__alt_data_end+0xfffe8d80>
10109004:	a080040c 	andi	r2,r20,16
10109008:	10020f26 	beq	r2,zero,10109848 <___vfiprintf_internal_r+0x117c>
1010900c:	da802217 	ldw	r10,136(sp)
10109010:	d8001d85 	stb	zero,118(sp)
10109014:	0027883a 	mov	r19,zero
10109018:	50800104 	addi	r2,r10,4
1010901c:	54800017 	ldw	r18,0(r10)
10109020:	48021116 	blt	r9,zero,10109868 <___vfiprintf_internal_r+0x119c>
10109024:	00ffdfc4 	movi	r3,-129
10109028:	d8802215 	stw	r2,136(sp)
1010902c:	a0e8703a 	and	r20,r20,r3
10109030:	903f5e1e 	bne	r18,zero,10108dac <__alt_data_end+0xfffe8dac>
10109034:	0039883a 	mov	fp,zero
10109038:	4802a626 	beq	r9,zero,10109ad4 <___vfiprintf_internal_r+0x1408>
1010903c:	0025883a 	mov	r18,zero
10109040:	0027883a 	mov	r19,zero
10109044:	003f5a06 	br	10108db0 <__alt_data_end+0xfffe8db0>
10109048:	21003fcc 	andi	r4,r4,255
1010904c:	20029f1e 	bne	r4,zero,10109acc <___vfiprintf_internal_r+0x1400>
10109050:	a5000414 	ori	r20,r20,16
10109054:	a080080c 	andi	r2,r20,32
10109058:	10005e1e 	bne	r2,zero,101091d4 <___vfiprintf_internal_r+0xb08>
1010905c:	a080040c 	andi	r2,r20,16
10109060:	1001a21e 	bne	r2,zero,101096ec <___vfiprintf_internal_r+0x1020>
10109064:	a080100c 	andi	r2,r20,64
10109068:	d8001d85 	stb	zero,118(sp)
1010906c:	da802217 	ldw	r10,136(sp)
10109070:	1002231e 	bne	r2,zero,10109900 <___vfiprintf_internal_r+0x1234>
10109074:	50800104 	addi	r2,r10,4
10109078:	54800017 	ldw	r18,0(r10)
1010907c:	0027883a 	mov	r19,zero
10109080:	4801a00e 	bge	r9,zero,10109704 <___vfiprintf_internal_r+0x1038>
10109084:	d8802215 	stw	r2,136(sp)
10109088:	0039883a 	mov	fp,zero
1010908c:	94c4b03a 	or	r2,r18,r19
10109090:	103f901e 	bne	r2,zero,10108ed4 <__alt_data_end+0xfffe8ed4>
10109094:	00800044 	movi	r2,1
10109098:	10803fcc 	andi	r2,r2,255
1010909c:	00c00044 	movi	r3,1
101090a0:	10c05926 	beq	r2,r3,10109208 <___vfiprintf_internal_r+0xb3c>
101090a4:	00c00084 	movi	r3,2
101090a8:	10ffe41e 	bne	r2,r3,1010903c <__alt_data_end+0xfffe903c>
101090ac:	0025883a 	mov	r18,zero
101090b0:	0027883a 	mov	r19,zero
101090b4:	00013d06 	br	101095ac <___vfiprintf_internal_r+0xee0>
101090b8:	21003fcc 	andi	r4,r4,255
101090bc:	2002811e 	bne	r4,zero,10109ac4 <___vfiprintf_internal_r+0x13f8>
101090c0:	00840474 	movhi	r2,4113
101090c4:	10809d04 	addi	r2,r2,628
101090c8:	d8802615 	stw	r2,152(sp)
101090cc:	a080080c 	andi	r2,r20,32
101090d0:	103f561e 	bne	r2,zero,10108e2c <__alt_data_end+0xfffe8e2c>
101090d4:	a080040c 	andi	r2,r20,16
101090d8:	1001d126 	beq	r2,zero,10109820 <___vfiprintf_internal_r+0x1154>
101090dc:	da802217 	ldw	r10,136(sp)
101090e0:	0027883a 	mov	r19,zero
101090e4:	54800017 	ldw	r18,0(r10)
101090e8:	52800104 	addi	r10,r10,4
101090ec:	da802215 	stw	r10,136(sp)
101090f0:	003f5306 	br	10108e40 <__alt_data_end+0xfffe8e40>
101090f4:	da802217 	ldw	r10,136(sp)
101090f8:	d8001d85 	stb	zero,118(sp)
101090fc:	55400017 	ldw	r21,0(r10)
10109100:	50c00104 	addi	r3,r10,4
10109104:	a8024226 	beq	r21,zero,10109a10 <___vfiprintf_internal_r+0x1344>
10109108:	48021816 	blt	r9,zero,1010996c <___vfiprintf_internal_r+0x12a0>
1010910c:	480d883a 	mov	r6,r9
10109110:	000b883a 	mov	r5,zero
10109114:	a809883a 	mov	r4,r21
10109118:	d8c02a15 	stw	r3,168(sp)
1010911c:	da002b15 	stw	r8,172(sp)
10109120:	da402c15 	stw	r9,176(sp)
10109124:	01068c80 	call	101068c8 <memchr>
10109128:	d8c02a17 	ldw	r3,168(sp)
1010912c:	da002b17 	ldw	r8,172(sp)
10109130:	da402c17 	ldw	r9,176(sp)
10109134:	10024826 	beq	r2,zero,10109a58 <___vfiprintf_internal_r+0x138c>
10109138:	1567c83a 	sub	r19,r2,r21
1010913c:	df001d83 	ldbu	fp,118(sp)
10109140:	d8c02215 	stw	r3,136(sp)
10109144:	0013883a 	mov	r9,zero
10109148:	003e6006 	br	10108acc <__alt_data_end+0xfffe8acc>
1010914c:	21003fcc 	andi	r4,r4,255
10109150:	203fc026 	beq	r4,zero,10109054 <__alt_data_end+0xfffe9054>
10109154:	d9c01d85 	stb	r7,118(sp)
10109158:	003fbe06 	br	10109054 <__alt_data_end+0xfffe9054>
1010915c:	da802217 	ldw	r10,136(sp)
10109160:	54400017 	ldw	r17,0(r10)
10109164:	50800104 	addi	r2,r10,4
10109168:	883e3b16 	blt	r17,zero,10108a58 <__alt_data_end+0xfffe8a58>
1010916c:	d8802215 	stw	r2,136(sp)
10109170:	80c00007 	ldb	r3,0(r16)
10109174:	003db406 	br	10108848 <__alt_data_end+0xfffe8848>
10109178:	01000044 	movi	r4,1
1010917c:	01c00ac4 	movi	r7,43
10109180:	80c00007 	ldb	r3,0(r16)
10109184:	003db006 	br	10108848 <__alt_data_end+0xfffe8848>
10109188:	80c00007 	ldb	r3,0(r16)
1010918c:	82800044 	addi	r10,r16,1
10109190:	1b423c26 	beq	r3,r13,10109a84 <___vfiprintf_internal_r+0x13b8>
10109194:	18bff404 	addi	r2,r3,-48
10109198:	0013883a 	mov	r9,zero
1010919c:	30822b36 	bltu	r6,r2,10109a4c <___vfiprintf_internal_r+0x1380>
101091a0:	50c00007 	ldb	r3,0(r10)
101091a4:	4a4002a4 	muli	r9,r9,10
101091a8:	54000044 	addi	r16,r10,1
101091ac:	8015883a 	mov	r10,r16
101091b0:	4893883a 	add	r9,r9,r2
101091b4:	18bff404 	addi	r2,r3,-48
101091b8:	30bff92e 	bgeu	r6,r2,101091a0 <__alt_data_end+0xfffe91a0>
101091bc:	483da30e 	bge	r9,zero,1010884c <__alt_data_end+0xfffe884c>
101091c0:	027fffc4 	movi	r9,-1
101091c4:	003da106 	br	1010884c <__alt_data_end+0xfffe884c>
101091c8:	a5001014 	ori	r20,r20,64
101091cc:	80c00007 	ldb	r3,0(r16)
101091d0:	003d9d06 	br	10108848 <__alt_data_end+0xfffe8848>
101091d4:	da802217 	ldw	r10,136(sp)
101091d8:	d8001d85 	stb	zero,118(sp)
101091dc:	50c00204 	addi	r3,r10,8
101091e0:	54800017 	ldw	r18,0(r10)
101091e4:	54c00117 	ldw	r19,4(r10)
101091e8:	4801ca16 	blt	r9,zero,10109914 <___vfiprintf_internal_r+0x1248>
101091ec:	013fdfc4 	movi	r4,-129
101091f0:	94c4b03a 	or	r2,r18,r19
101091f4:	d8c02215 	stw	r3,136(sp)
101091f8:	a128703a 	and	r20,r20,r4
101091fc:	0039883a 	mov	fp,zero
10109200:	103f341e 	bne	r2,zero,10108ed4 <__alt_data_end+0xfffe8ed4>
10109204:	483e2e26 	beq	r9,zero,10108ac0 <__alt_data_end+0xfffe8ac0>
10109208:	0025883a 	mov	r18,zero
1010920c:	94800c04 	addi	r18,r18,48
10109210:	dc8019c5 	stb	r18,103(sp)
10109214:	dcc02717 	ldw	r19,156(sp)
10109218:	dd4019c4 	addi	r21,sp,103
1010921c:	003e2b06 	br	10108acc <__alt_data_end+0xfffe8acc>
10109220:	21003fcc 	andi	r4,r4,255
10109224:	2002361e 	bne	r4,zero,10109b00 <___vfiprintf_internal_r+0x1434>
10109228:	1801c126 	beq	r3,zero,10109930 <___vfiprintf_internal_r+0x1264>
1010922c:	04800044 	movi	r18,1
10109230:	d8c01005 	stb	r3,64(sp)
10109234:	d8001d85 	stb	zero,118(sp)
10109238:	9027883a 	mov	r19,r18
1010923c:	dd401004 	addi	r21,sp,64
10109240:	003f1106 	br	10108e88 <__alt_data_end+0xfffe8e88>
10109244:	d9402117 	ldw	r5,132(sp)
10109248:	d9002017 	ldw	r4,128(sp)
1010924c:	d9801a04 	addi	r6,sp,104
10109250:	d9c02b15 	stw	r7,172(sp)
10109254:	dbc02a15 	stw	r15,168(sp)
10109258:	01085b80 	call	101085b8 <__sprint_r.part.0>
1010925c:	d9c02b17 	ldw	r7,172(sp)
10109260:	dbc02a17 	ldw	r15,168(sp)
10109264:	10006d1e 	bne	r2,zero,1010941c <___vfiprintf_internal_r+0xd50>
10109268:	d9801b17 	ldw	r6,108(sp)
1010926c:	d8801c17 	ldw	r2,112(sp)
10109270:	d811883a 	mov	r8,sp
10109274:	31400044 	addi	r5,r6,1
10109278:	003e3306 	br	10108b48 <__alt_data_end+0xfffe8b48>
1010927c:	d9401b17 	ldw	r5,108(sp)
10109280:	d8801c17 	ldw	r2,112(sp)
10109284:	29000044 	addi	r4,r5,1
10109288:	d8c01d87 	ldb	r3,118(sp)
1010928c:	183e4d26 	beq	r3,zero,10108bc4 <__alt_data_end+0xfffe8bc4>
10109290:	00c00044 	movi	r3,1
10109294:	d9401d84 	addi	r5,sp,118
10109298:	10c5883a 	add	r2,r2,r3
1010929c:	41400015 	stw	r5,0(r8)
101092a0:	40c00115 	stw	r3,4(r8)
101092a4:	d8801c15 	stw	r2,112(sp)
101092a8:	d9001b15 	stw	r4,108(sp)
101092ac:	014001c4 	movi	r5,7
101092b0:	2900a90e 	bge	r5,r4,10109558 <___vfiprintf_internal_r+0xe8c>
101092b4:	1000da1e 	bne	r2,zero,10109620 <___vfiprintf_internal_r+0xf54>
101092b8:	7000ab1e 	bne	r14,zero,10109568 <___vfiprintf_internal_r+0xe9c>
101092bc:	000b883a 	mov	r5,zero
101092c0:	1809883a 	mov	r4,r3
101092c4:	d811883a 	mov	r8,sp
101092c8:	00c02004 	movi	r3,128
101092cc:	e0fe4d26 	beq	fp,r3,10108c04 <__alt_data_end+0xfffe8c04>
101092d0:	4cf9c83a 	sub	fp,r9,r19
101092d4:	073e7b0e 	bge	zero,fp,10108cc4 <__alt_data_end+0xfffe8cc4>
101092d8:	01c00404 	movi	r7,16
101092dc:	3f01900e 	bge	r7,fp,10109920 <___vfiprintf_internal_r+0x1254>
101092e0:	00c40474 	movhi	r3,4113
101092e4:	18c10304 	addi	r3,r3,1036
101092e8:	d8c02415 	stw	r3,144(sp)
101092ec:	034001c4 	movi	r13,7
101092f0:	00000506 	br	10109308 <___vfiprintf_internal_r+0xc3c>
101092f4:	29000084 	addi	r4,r5,2
101092f8:	42000204 	addi	r8,r8,8
101092fc:	180b883a 	mov	r5,r3
10109300:	e73ffc04 	addi	fp,fp,-16
10109304:	3f000d0e 	bge	r7,fp,1010933c <___vfiprintf_internal_r+0xc70>
10109308:	10800404 	addi	r2,r2,16
1010930c:	28c00044 	addi	r3,r5,1
10109310:	45c00015 	stw	r23,0(r8)
10109314:	41c00115 	stw	r7,4(r8)
10109318:	d8801c15 	stw	r2,112(sp)
1010931c:	d8c01b15 	stw	r3,108(sp)
10109320:	68fff40e 	bge	r13,r3,101092f4 <__alt_data_end+0xfffe92f4>
10109324:	1000101e 	bne	r2,zero,10109368 <___vfiprintf_internal_r+0xc9c>
10109328:	e73ffc04 	addi	fp,fp,-16
1010932c:	01000044 	movi	r4,1
10109330:	000b883a 	mov	r5,zero
10109334:	d811883a 	mov	r8,sp
10109338:	3f3ff316 	blt	r7,fp,10109308 <__alt_data_end+0xfffe9308>
1010933c:	da802417 	ldw	r10,144(sp)
10109340:	1705883a 	add	r2,r2,fp
10109344:	47000115 	stw	fp,4(r8)
10109348:	42800015 	stw	r10,0(r8)
1010934c:	d8801c15 	stw	r2,112(sp)
10109350:	d9001b15 	stw	r4,108(sp)
10109354:	00c001c4 	movi	r3,7
10109358:	19003616 	blt	r3,r4,10109434 <___vfiprintf_internal_r+0xd68>
1010935c:	42000204 	addi	r8,r8,8
10109360:	21000044 	addi	r4,r4,1
10109364:	003e5706 	br	10108cc4 <__alt_data_end+0xfffe8cc4>
10109368:	d9402117 	ldw	r5,132(sp)
1010936c:	d9002017 	ldw	r4,128(sp)
10109370:	d9801a04 	addi	r6,sp,104
10109374:	d9c02b15 	stw	r7,172(sp)
10109378:	db402a15 	stw	r13,168(sp)
1010937c:	01085b80 	call	101085b8 <__sprint_r.part.0>
10109380:	d9c02b17 	ldw	r7,172(sp)
10109384:	db402a17 	ldw	r13,168(sp)
10109388:	1000241e 	bne	r2,zero,1010941c <___vfiprintf_internal_r+0xd50>
1010938c:	d9401b17 	ldw	r5,108(sp)
10109390:	d8801c17 	ldw	r2,112(sp)
10109394:	d811883a 	mov	r8,sp
10109398:	29000044 	addi	r4,r5,1
1010939c:	003fd806 	br	10109300 <__alt_data_end+0xfffe9300>
101093a0:	d9401b17 	ldw	r5,108(sp)
101093a4:	00c40474 	movhi	r3,4113
101093a8:	18c10704 	addi	r3,r3,1052
101093ac:	d8c02415 	stw	r3,144(sp)
101093b0:	29400044 	addi	r5,r5,1
101093b4:	d8c02417 	ldw	r3,144(sp)
101093b8:	14c5883a 	add	r2,r2,r19
101093bc:	44c00115 	stw	r19,4(r8)
101093c0:	40c00015 	stw	r3,0(r8)
101093c4:	d8801c15 	stw	r2,112(sp)
101093c8:	d9401b15 	stw	r5,108(sp)
101093cc:	00c001c4 	movi	r3,7
101093d0:	1940070e 	bge	r3,r5,101093f0 <___vfiprintf_internal_r+0xd24>
101093d4:	103e4826 	beq	r2,zero,10108cf8 <__alt_data_end+0xfffe8cf8>
101093d8:	d9402117 	ldw	r5,132(sp)
101093dc:	d9002017 	ldw	r4,128(sp)
101093e0:	d9801a04 	addi	r6,sp,104
101093e4:	01085b80 	call	101085b8 <__sprint_r.part.0>
101093e8:	10000c1e 	bne	r2,zero,1010941c <___vfiprintf_internal_r+0xd50>
101093ec:	d8801c17 	ldw	r2,112(sp)
101093f0:	8c80010e 	bge	r17,r18,101093f8 <___vfiprintf_internal_r+0xd2c>
101093f4:	9023883a 	mov	r17,r18
101093f8:	da802317 	ldw	r10,140(sp)
101093fc:	5455883a 	add	r10,r10,r17
10109400:	da802315 	stw	r10,140(sp)
10109404:	103e4126 	beq	r2,zero,10108d0c <__alt_data_end+0xfffe8d0c>
10109408:	d9402117 	ldw	r5,132(sp)
1010940c:	d9002017 	ldw	r4,128(sp)
10109410:	d9801a04 	addi	r6,sp,104
10109414:	01085b80 	call	101085b8 <__sprint_r.part.0>
10109418:	103e3c26 	beq	r2,zero,10108d0c <__alt_data_end+0xfffe8d0c>
1010941c:	dd002117 	ldw	r20,132(sp)
10109420:	a080030b 	ldhu	r2,12(r20)
10109424:	1080100c 	andi	r2,r2,64
10109428:	1001231e 	bne	r2,zero,101098b8 <___vfiprintf_internal_r+0x11ec>
1010942c:	d8802317 	ldw	r2,140(sp)
10109430:	003d7b06 	br	10108a20 <__alt_data_end+0xfffe8a20>
10109434:	1000991e 	bne	r2,zero,1010969c <___vfiprintf_internal_r+0xfd0>
10109438:	00c00044 	movi	r3,1
1010943c:	9805883a 	mov	r2,r19
10109440:	dd400015 	stw	r21,0(sp)
10109444:	dcc00115 	stw	r19,4(sp)
10109448:	dcc01c15 	stw	r19,112(sp)
1010944c:	d8c01b15 	stw	r3,108(sp)
10109450:	d811883a 	mov	r8,sp
10109454:	42000204 	addi	r8,r8,8
10109458:	a2c0010c 	andi	r11,r20,4
1010945c:	583fe426 	beq	r11,zero,101093f0 <__alt_data_end+0xfffe93f0>
10109460:	8ca7c83a 	sub	r19,r17,r18
10109464:	04ffe20e 	bge	zero,r19,101093f0 <__alt_data_end+0xfffe93f0>
10109468:	01c00404 	movi	r7,16
1010946c:	3cffcc0e 	bge	r7,r19,101093a0 <__alt_data_end+0xfffe93a0>
10109470:	02840474 	movhi	r10,4113
10109474:	52810704 	addi	r10,r10,1052
10109478:	d9001b17 	ldw	r4,108(sp)
1010947c:	da802415 	stw	r10,144(sp)
10109480:	382b883a 	mov	r21,r7
10109484:	050001c4 	movi	r20,7
10109488:	df002017 	ldw	fp,128(sp)
1010948c:	00000506 	br	101094a4 <___vfiprintf_internal_r+0xdd8>
10109490:	21400084 	addi	r5,r4,2
10109494:	42000204 	addi	r8,r8,8
10109498:	1809883a 	mov	r4,r3
1010949c:	9cfffc04 	addi	r19,r19,-16
101094a0:	acffc40e 	bge	r21,r19,101093b4 <__alt_data_end+0xfffe93b4>
101094a4:	10800404 	addi	r2,r2,16
101094a8:	20c00044 	addi	r3,r4,1
101094ac:	45800015 	stw	r22,0(r8)
101094b0:	45400115 	stw	r21,4(r8)
101094b4:	d8801c15 	stw	r2,112(sp)
101094b8:	d8c01b15 	stw	r3,108(sp)
101094bc:	a0fff40e 	bge	r20,r3,10109490 <__alt_data_end+0xfffe9490>
101094c0:	1000041e 	bne	r2,zero,101094d4 <___vfiprintf_internal_r+0xe08>
101094c4:	01400044 	movi	r5,1
101094c8:	0009883a 	mov	r4,zero
101094cc:	d811883a 	mov	r8,sp
101094d0:	003ff206 	br	1010949c <__alt_data_end+0xfffe949c>
101094d4:	d9402117 	ldw	r5,132(sp)
101094d8:	d9801a04 	addi	r6,sp,104
101094dc:	e009883a 	mov	r4,fp
101094e0:	01085b80 	call	101085b8 <__sprint_r.part.0>
101094e4:	103fcd1e 	bne	r2,zero,1010941c <__alt_data_end+0xfffe941c>
101094e8:	d9001b17 	ldw	r4,108(sp)
101094ec:	d8801c17 	ldw	r2,112(sp)
101094f0:	d811883a 	mov	r8,sp
101094f4:	21400044 	addi	r5,r4,1
101094f8:	003fe806 	br	1010949c <__alt_data_end+0xfffe949c>
101094fc:	d9402117 	ldw	r5,132(sp)
10109500:	d9002017 	ldw	r4,128(sp)
10109504:	d9801a04 	addi	r6,sp,104
10109508:	d9c02b15 	stw	r7,172(sp)
1010950c:	db402a15 	stw	r13,168(sp)
10109510:	01085b80 	call	101085b8 <__sprint_r.part.0>
10109514:	d9c02b17 	ldw	r7,172(sp)
10109518:	db402a17 	ldw	r13,168(sp)
1010951c:	103fbf1e 	bne	r2,zero,1010941c <__alt_data_end+0xfffe941c>
10109520:	d9401b17 	ldw	r5,108(sp)
10109524:	d8801c17 	ldw	r2,112(sp)
10109528:	d811883a 	mov	r8,sp
1010952c:	29800044 	addi	r6,r5,1
10109530:	003dc406 	br	10108c44 <__alt_data_end+0xfffe8c44>
10109534:	1000d21e 	bne	r2,zero,10109880 <___vfiprintf_internal_r+0x11b4>
10109538:	d8c01d87 	ldb	r3,118(sp)
1010953c:	18009526 	beq	r3,zero,10109794 <___vfiprintf_internal_r+0x10c8>
10109540:	00800044 	movi	r2,1
10109544:	d8c01d84 	addi	r3,sp,118
10109548:	1009883a 	mov	r4,r2
1010954c:	d8c00015 	stw	r3,0(sp)
10109550:	d8800115 	stw	r2,4(sp)
10109554:	d811883a 	mov	r8,sp
10109558:	200b883a 	mov	r5,r4
1010955c:	42000204 	addi	r8,r8,8
10109560:	21000044 	addi	r4,r4,1
10109564:	003d9706 	br	10108bc4 <__alt_data_end+0xfffe8bc4>
10109568:	d9001d04 	addi	r4,sp,116
1010956c:	00800084 	movi	r2,2
10109570:	d9000015 	stw	r4,0(sp)
10109574:	d8800115 	stw	r2,4(sp)
10109578:	1809883a 	mov	r4,r3
1010957c:	d811883a 	mov	r8,sp
10109580:	200b883a 	mov	r5,r4
10109584:	42000204 	addi	r8,r8,8
10109588:	21000044 	addi	r4,r4,1
1010958c:	003f4e06 	br	101092c8 <__alt_data_end+0xfffe92c8>
10109590:	d8001d85 	stb	zero,118(sp)
10109594:	48005016 	blt	r9,zero,101096d8 <___vfiprintf_internal_r+0x100c>
10109598:	00ffdfc4 	movi	r3,-129
1010959c:	94c4b03a 	or	r2,r18,r19
101095a0:	a0e8703a 	and	r20,r20,r3
101095a4:	103d4426 	beq	r2,zero,10108ab8 <__alt_data_end+0xfffe8ab8>
101095a8:	0039883a 	mov	fp,zero
101095ac:	d9002617 	ldw	r4,152(sp)
101095b0:	dd401a04 	addi	r21,sp,104
101095b4:	908003cc 	andi	r2,r18,15
101095b8:	9806973a 	slli	r3,r19,28
101095bc:	2085883a 	add	r2,r4,r2
101095c0:	9024d13a 	srli	r18,r18,4
101095c4:	10800003 	ldbu	r2,0(r2)
101095c8:	9826d13a 	srli	r19,r19,4
101095cc:	ad7fffc4 	addi	r21,r21,-1
101095d0:	1ca4b03a 	or	r18,r3,r18
101095d4:	a8800005 	stb	r2,0(r21)
101095d8:	94c4b03a 	or	r2,r18,r19
101095dc:	103ff51e 	bne	r2,zero,101095b4 <__alt_data_end+0xfffe95b4>
101095e0:	003e5906 	br	10108f48 <__alt_data_end+0xfffe8f48>
101095e4:	d9402117 	ldw	r5,132(sp)
101095e8:	d9002017 	ldw	r4,128(sp)
101095ec:	d9801a04 	addi	r6,sp,104
101095f0:	01085b80 	call	101085b8 <__sprint_r.part.0>
101095f4:	103f891e 	bne	r2,zero,1010941c <__alt_data_end+0xfffe941c>
101095f8:	d8801c17 	ldw	r2,112(sp)
101095fc:	d811883a 	mov	r8,sp
10109600:	003f9506 	br	10109458 <__alt_data_end+0xfffe9458>
10109604:	d9402117 	ldw	r5,132(sp)
10109608:	d9002017 	ldw	r4,128(sp)
1010960c:	d9801a04 	addi	r6,sp,104
10109610:	01085b80 	call	101085b8 <__sprint_r.part.0>
10109614:	103f811e 	bne	r2,zero,1010941c <__alt_data_end+0xfffe941c>
10109618:	d811883a 	mov	r8,sp
1010961c:	003ced06 	br	101089d4 <__alt_data_end+0xfffe89d4>
10109620:	d9402117 	ldw	r5,132(sp)
10109624:	d9002017 	ldw	r4,128(sp)
10109628:	d9801a04 	addi	r6,sp,104
1010962c:	da402c15 	stw	r9,176(sp)
10109630:	db802a15 	stw	r14,168(sp)
10109634:	01085b80 	call	101085b8 <__sprint_r.part.0>
10109638:	da402c17 	ldw	r9,176(sp)
1010963c:	db802a17 	ldw	r14,168(sp)
10109640:	103f761e 	bne	r2,zero,1010941c <__alt_data_end+0xfffe941c>
10109644:	d9401b17 	ldw	r5,108(sp)
10109648:	d8801c17 	ldw	r2,112(sp)
1010964c:	d811883a 	mov	r8,sp
10109650:	29000044 	addi	r4,r5,1
10109654:	003d5b06 	br	10108bc4 <__alt_data_end+0xfffe8bc4>
10109658:	d9402117 	ldw	r5,132(sp)
1010965c:	d9002017 	ldw	r4,128(sp)
10109660:	d9801a04 	addi	r6,sp,104
10109664:	da402c15 	stw	r9,176(sp)
10109668:	01085b80 	call	101085b8 <__sprint_r.part.0>
1010966c:	da402c17 	ldw	r9,176(sp)
10109670:	103f6a1e 	bne	r2,zero,1010941c <__alt_data_end+0xfffe941c>
10109674:	d9401b17 	ldw	r5,108(sp)
10109678:	d8801c17 	ldw	r2,112(sp)
1010967c:	d811883a 	mov	r8,sp
10109680:	29000044 	addi	r4,r5,1
10109684:	003f1006 	br	101092c8 <__alt_data_end+0xfffe92c8>
10109688:	1000c31e 	bne	r2,zero,10109998 <___vfiprintf_internal_r+0x12cc>
1010968c:	01000044 	movi	r4,1
10109690:	000b883a 	mov	r5,zero
10109694:	d811883a 	mov	r8,sp
10109698:	003f0d06 	br	101092d0 <__alt_data_end+0xfffe92d0>
1010969c:	d9402117 	ldw	r5,132(sp)
101096a0:	d9002017 	ldw	r4,128(sp)
101096a4:	d9801a04 	addi	r6,sp,104
101096a8:	01085b80 	call	101085b8 <__sprint_r.part.0>
101096ac:	103f5b1e 	bne	r2,zero,1010941c <__alt_data_end+0xfffe941c>
101096b0:	d9001b17 	ldw	r4,108(sp)
101096b4:	d8801c17 	ldw	r2,112(sp)
101096b8:	d811883a 	mov	r8,sp
101096bc:	21000044 	addi	r4,r4,1
101096c0:	003d8006 	br	10108cc4 <__alt_data_end+0xfffe8cc4>
101096c4:	01040474 	movhi	r4,4113
101096c8:	2100a204 	addi	r4,r4,648
101096cc:	d9002615 	stw	r4,152(sp)
101096d0:	d8c02215 	stw	r3,136(sp)
101096d4:	1029883a 	mov	r20,r2
101096d8:	94c4b03a 	or	r2,r18,r19
101096dc:	103fb21e 	bne	r2,zero,101095a8 <__alt_data_end+0xfffe95a8>
101096e0:	0039883a 	mov	fp,zero
101096e4:	00800084 	movi	r2,2
101096e8:	003e6b06 	br	10109098 <__alt_data_end+0xfffe9098>
101096ec:	da802217 	ldw	r10,136(sp)
101096f0:	d8001d85 	stb	zero,118(sp)
101096f4:	0027883a 	mov	r19,zero
101096f8:	50800104 	addi	r2,r10,4
101096fc:	54800017 	ldw	r18,0(r10)
10109700:	483e6016 	blt	r9,zero,10109084 <__alt_data_end+0xfffe9084>
10109704:	00ffdfc4 	movi	r3,-129
10109708:	d8802215 	stw	r2,136(sp)
1010970c:	a0e8703a 	and	r20,r20,r3
10109710:	0039883a 	mov	fp,zero
10109714:	903ebb26 	beq	r18,zero,10109204 <__alt_data_end+0xfffe9204>
10109718:	00800244 	movi	r2,9
1010971c:	14bdee36 	bltu	r2,r18,10108ed8 <__alt_data_end+0xfffe8ed8>
10109720:	003eba06 	br	1010920c <__alt_data_end+0xfffe920c>
10109724:	00800c04 	movi	r2,48
10109728:	d8c01d45 	stb	r3,117(sp)
1010972c:	d8801d05 	stb	r2,116(sp)
10109730:	d8001d85 	stb	zero,118(sp)
10109734:	a0c00094 	ori	r3,r20,2
10109738:	4800a916 	blt	r9,zero,101099e0 <___vfiprintf_internal_r+0x1314>
1010973c:	00bfdfc4 	movi	r2,-129
10109740:	a096703a 	and	r11,r20,r2
10109744:	5d000094 	ori	r20,r11,2
10109748:	0039883a 	mov	fp,zero
1010974c:	003f9706 	br	101095ac <__alt_data_end+0xfffe95ac>
10109750:	8025883a 	mov	r18,r16
10109754:	003c2e06 	br	10108810 <__alt_data_end+0xfffe8810>
10109758:	00840474 	movhi	r2,4113
1010975c:	1080a204 	addi	r2,r2,648
10109760:	0039883a 	mov	fp,zero
10109764:	d8802615 	stw	r2,152(sp)
10109768:	003f9006 	br	101095ac <__alt_data_end+0xfffe95ac>
1010976c:	04a5c83a 	sub	r18,zero,r18
10109770:	07000b44 	movi	fp,45
10109774:	9004c03a 	cmpne	r2,r18,zero
10109778:	04e7c83a 	sub	r19,zero,r19
1010977c:	df001d85 	stb	fp,118(sp)
10109780:	98a7c83a 	sub	r19,r19,r2
10109784:	48009f16 	blt	r9,zero,10109a04 <___vfiprintf_internal_r+0x1338>
10109788:	00bfdfc4 	movi	r2,-129
1010978c:	a0a8703a 	and	r20,r20,r2
10109790:	003dd006 	br	10108ed4 <__alt_data_end+0xfffe8ed4>
10109794:	70004c26 	beq	r14,zero,101098c8 <___vfiprintf_internal_r+0x11fc>
10109798:	00800084 	movi	r2,2
1010979c:	d8c01d04 	addi	r3,sp,116
101097a0:	d8c00015 	stw	r3,0(sp)
101097a4:	d8800115 	stw	r2,4(sp)
101097a8:	01000044 	movi	r4,1
101097ac:	d811883a 	mov	r8,sp
101097b0:	003f7306 	br	10109580 <__alt_data_end+0xfffe9580>
101097b4:	a080100c 	andi	r2,r20,64
101097b8:	da802217 	ldw	r10,136(sp)
101097bc:	103e0626 	beq	r2,zero,10108fd8 <__alt_data_end+0xfffe8fd8>
101097c0:	5480000f 	ldh	r18,0(r10)
101097c4:	52800104 	addi	r10,r10,4
101097c8:	da802215 	stw	r10,136(sp)
101097cc:	9027d7fa 	srai	r19,r18,31
101097d0:	9805883a 	mov	r2,r19
101097d4:	003db806 	br	10108eb8 <__alt_data_end+0xfffe8eb8>
101097d8:	a080040c 	andi	r2,r20,16
101097dc:	1000091e 	bne	r2,zero,10109804 <___vfiprintf_internal_r+0x1138>
101097e0:	a2c0100c 	andi	r11,r20,64
101097e4:	58000726 	beq	r11,zero,10109804 <___vfiprintf_internal_r+0x1138>
101097e8:	da802217 	ldw	r10,136(sp)
101097ec:	50800017 	ldw	r2,0(r10)
101097f0:	52800104 	addi	r10,r10,4
101097f4:	da802215 	stw	r10,136(sp)
101097f8:	da802317 	ldw	r10,140(sp)
101097fc:	1280000d 	sth	r10,0(r2)
10109800:	003be706 	br	101087a0 <__alt_data_end+0xfffe87a0>
10109804:	da802217 	ldw	r10,136(sp)
10109808:	50800017 	ldw	r2,0(r10)
1010980c:	52800104 	addi	r10,r10,4
10109810:	da802215 	stw	r10,136(sp)
10109814:	da802317 	ldw	r10,140(sp)
10109818:	12800015 	stw	r10,0(r2)
1010981c:	003be006 	br	101087a0 <__alt_data_end+0xfffe87a0>
10109820:	a080100c 	andi	r2,r20,64
10109824:	da802217 	ldw	r10,136(sp)
10109828:	10003026 	beq	r2,zero,101098ec <___vfiprintf_internal_r+0x1220>
1010982c:	5480000b 	ldhu	r18,0(r10)
10109830:	52800104 	addi	r10,r10,4
10109834:	0027883a 	mov	r19,zero
10109838:	da802215 	stw	r10,136(sp)
1010983c:	003d8006 	br	10108e40 <__alt_data_end+0xfffe8e40>
10109840:	80c00007 	ldb	r3,0(r16)
10109844:	003c0006 	br	10108848 <__alt_data_end+0xfffe8848>
10109848:	a080100c 	andi	r2,r20,64
1010984c:	d8001d85 	stb	zero,118(sp)
10109850:	da802217 	ldw	r10,136(sp)
10109854:	1000201e 	bne	r2,zero,101098d8 <___vfiprintf_internal_r+0x120c>
10109858:	50800104 	addi	r2,r10,4
1010985c:	54800017 	ldw	r18,0(r10)
10109860:	0027883a 	mov	r19,zero
10109864:	483def0e 	bge	r9,zero,10109024 <__alt_data_end+0xfffe9024>
10109868:	94c6b03a 	or	r3,r18,r19
1010986c:	d8802215 	stw	r2,136(sp)
10109870:	183d4e1e 	bne	r3,zero,10108dac <__alt_data_end+0xfffe8dac>
10109874:	0039883a 	mov	fp,zero
10109878:	0005883a 	mov	r2,zero
1010987c:	003e0606 	br	10109098 <__alt_data_end+0xfffe9098>
10109880:	d9402117 	ldw	r5,132(sp)
10109884:	d9002017 	ldw	r4,128(sp)
10109888:	d9801a04 	addi	r6,sp,104
1010988c:	da402c15 	stw	r9,176(sp)
10109890:	db802a15 	stw	r14,168(sp)
10109894:	01085b80 	call	101085b8 <__sprint_r.part.0>
10109898:	da402c17 	ldw	r9,176(sp)
1010989c:	db802a17 	ldw	r14,168(sp)
101098a0:	103ede1e 	bne	r2,zero,1010941c <__alt_data_end+0xfffe941c>
101098a4:	d9401b17 	ldw	r5,108(sp)
101098a8:	d8801c17 	ldw	r2,112(sp)
101098ac:	d811883a 	mov	r8,sp
101098b0:	29000044 	addi	r4,r5,1
101098b4:	003e7406 	br	10109288 <__alt_data_end+0xfffe9288>
101098b8:	00bfffc4 	movi	r2,-1
101098bc:	003c5806 	br	10108a20 <__alt_data_end+0xfffe8a20>
101098c0:	d811883a 	mov	r8,sp
101098c4:	003ee806 	br	10109468 <__alt_data_end+0xfffe9468>
101098c8:	000b883a 	mov	r5,zero
101098cc:	01000044 	movi	r4,1
101098d0:	d811883a 	mov	r8,sp
101098d4:	003e7c06 	br	101092c8 <__alt_data_end+0xfffe92c8>
101098d8:	50800104 	addi	r2,r10,4
101098dc:	5480000b 	ldhu	r18,0(r10)
101098e0:	0027883a 	mov	r19,zero
101098e4:	483dcf0e 	bge	r9,zero,10109024 <__alt_data_end+0xfffe9024>
101098e8:	003fdf06 	br	10109868 <__alt_data_end+0xfffe9868>
101098ec:	54800017 	ldw	r18,0(r10)
101098f0:	52800104 	addi	r10,r10,4
101098f4:	0027883a 	mov	r19,zero
101098f8:	da802215 	stw	r10,136(sp)
101098fc:	003d5006 	br	10108e40 <__alt_data_end+0xfffe8e40>
10109900:	50800104 	addi	r2,r10,4
10109904:	5480000b 	ldhu	r18,0(r10)
10109908:	0027883a 	mov	r19,zero
1010990c:	483f7d0e 	bge	r9,zero,10109704 <__alt_data_end+0xfffe9704>
10109910:	003ddc06 	br	10109084 <__alt_data_end+0xfffe9084>
10109914:	d8c02215 	stw	r3,136(sp)
10109918:	0039883a 	mov	fp,zero
1010991c:	003ddb06 	br	1010908c <__alt_data_end+0xfffe908c>
10109920:	02840474 	movhi	r10,4113
10109924:	52810304 	addi	r10,r10,1036
10109928:	da802415 	stw	r10,144(sp)
1010992c:	003e8306 	br	1010933c <__alt_data_end+0xfffe933c>
10109930:	d8801c17 	ldw	r2,112(sp)
10109934:	dd002117 	ldw	r20,132(sp)
10109938:	103eb926 	beq	r2,zero,10109420 <__alt_data_end+0xfffe9420>
1010993c:	d9002017 	ldw	r4,128(sp)
10109940:	d9801a04 	addi	r6,sp,104
10109944:	a00b883a 	mov	r5,r20
10109948:	01085b80 	call	101085b8 <__sprint_r.part.0>
1010994c:	003eb406 	br	10109420 <__alt_data_end+0xfffe9420>
10109950:	80c00043 	ldbu	r3,1(r16)
10109954:	a5000814 	ori	r20,r20,32
10109958:	84000044 	addi	r16,r16,1
1010995c:	18c03fcc 	andi	r3,r3,255
10109960:	18c0201c 	xori	r3,r3,128
10109964:	18ffe004 	addi	r3,r3,-128
10109968:	003bb706 	br	10108848 <__alt_data_end+0xfffe8848>
1010996c:	a809883a 	mov	r4,r21
10109970:	d8c02a15 	stw	r3,168(sp)
10109974:	da002b15 	stw	r8,172(sp)
10109978:	01010200 	call	10101020 <strlen>
1010997c:	d8c02a17 	ldw	r3,168(sp)
10109980:	1027883a 	mov	r19,r2
10109984:	df001d83 	ldbu	fp,118(sp)
10109988:	d8c02215 	stw	r3,136(sp)
1010998c:	0013883a 	mov	r9,zero
10109990:	da002b17 	ldw	r8,172(sp)
10109994:	003c4d06 	br	10108acc <__alt_data_end+0xfffe8acc>
10109998:	d9402117 	ldw	r5,132(sp)
1010999c:	d9002017 	ldw	r4,128(sp)
101099a0:	d9801a04 	addi	r6,sp,104
101099a4:	da402c15 	stw	r9,176(sp)
101099a8:	01085b80 	call	101085b8 <__sprint_r.part.0>
101099ac:	da402c17 	ldw	r9,176(sp)
101099b0:	103e9a1e 	bne	r2,zero,1010941c <__alt_data_end+0xfffe941c>
101099b4:	d9401b17 	ldw	r5,108(sp)
101099b8:	d8801c17 	ldw	r2,112(sp)
101099bc:	d811883a 	mov	r8,sp
101099c0:	29000044 	addi	r4,r5,1
101099c4:	003e4206 	br	101092d0 <__alt_data_end+0xfffe92d0>
101099c8:	d9401b17 	ldw	r5,108(sp)
101099cc:	01040474 	movhi	r4,4113
101099d0:	21010704 	addi	r4,r4,1052
101099d4:	d9002415 	stw	r4,144(sp)
101099d8:	29400044 	addi	r5,r5,1
101099dc:	003c6d06 	br	10108b94 <__alt_data_end+0xfffe8b94>
101099e0:	0039883a 	mov	fp,zero
101099e4:	00800084 	movi	r2,2
101099e8:	10803fcc 	andi	r2,r2,255
101099ec:	01000044 	movi	r4,1
101099f0:	11001e26 	beq	r2,r4,10109a6c <___vfiprintf_internal_r+0x13a0>
101099f4:	01000084 	movi	r4,2
101099f8:	11001e1e 	bne	r2,r4,10109a74 <___vfiprintf_internal_r+0x13a8>
101099fc:	1829883a 	mov	r20,r3
10109a00:	003eea06 	br	101095ac <__alt_data_end+0xfffe95ac>
10109a04:	a007883a 	mov	r3,r20
10109a08:	00800044 	movi	r2,1
10109a0c:	003ff606 	br	101099e8 <__alt_data_end+0xfffe99e8>
10109a10:	00800184 	movi	r2,6
10109a14:	1240012e 	bgeu	r2,r9,10109a1c <___vfiprintf_internal_r+0x1350>
10109a18:	1013883a 	mov	r9,r2
10109a1c:	4827883a 	mov	r19,r9
10109a20:	4825883a 	mov	r18,r9
10109a24:	48001516 	blt	r9,zero,10109a7c <___vfiprintf_internal_r+0x13b0>
10109a28:	05440474 	movhi	r21,4113
10109a2c:	d8c02215 	stw	r3,136(sp)
10109a30:	ad40a704 	addi	r21,r21,668
10109a34:	003d1406 	br	10108e88 <__alt_data_end+0xfffe8e88>
10109a38:	02840474 	movhi	r10,4113
10109a3c:	52810304 	addi	r10,r10,1036
10109a40:	da802415 	stw	r10,144(sp)
10109a44:	200d883a 	mov	r6,r4
10109a48:	003c9106 	br	10108c90 <__alt_data_end+0xfffe8c90>
10109a4c:	5021883a 	mov	r16,r10
10109a50:	0013883a 	mov	r9,zero
10109a54:	003b7d06 	br	1010884c <__alt_data_end+0xfffe884c>
10109a58:	4827883a 	mov	r19,r9
10109a5c:	df001d83 	ldbu	fp,118(sp)
10109a60:	d8c02215 	stw	r3,136(sp)
10109a64:	0013883a 	mov	r9,zero
10109a68:	003c1806 	br	10108acc <__alt_data_end+0xfffe8acc>
10109a6c:	1829883a 	mov	r20,r3
10109a70:	003d1806 	br	10108ed4 <__alt_data_end+0xfffe8ed4>
10109a74:	1829883a 	mov	r20,r3
10109a78:	003ccd06 	br	10108db0 <__alt_data_end+0xfffe8db0>
10109a7c:	0025883a 	mov	r18,zero
10109a80:	003fe906 	br	10109a28 <__alt_data_end+0xfffe9a28>
10109a84:	d8802217 	ldw	r2,136(sp)
10109a88:	80c00043 	ldbu	r3,1(r16)
10109a8c:	5021883a 	mov	r16,r10
10109a90:	12400017 	ldw	r9,0(r2)
10109a94:	10800104 	addi	r2,r2,4
10109a98:	d8802215 	stw	r2,136(sp)
10109a9c:	483faf0e 	bge	r9,zero,1010995c <__alt_data_end+0xfffe995c>
10109aa0:	18c03fcc 	andi	r3,r3,255
10109aa4:	18c0201c 	xori	r3,r3,128
10109aa8:	027fffc4 	movi	r9,-1
10109aac:	18ffe004 	addi	r3,r3,-128
10109ab0:	003b6506 	br	10108848 <__alt_data_end+0xfffe8848>
10109ab4:	d9c01d85 	stb	r7,118(sp)
10109ab8:	003ca006 	br	10108d3c <__alt_data_end+0xfffe8d3c>
10109abc:	d9c01d85 	stb	r7,118(sp)
10109ac0:	003cad06 	br	10108d78 <__alt_data_end+0xfffe8d78>
10109ac4:	d9c01d85 	stb	r7,118(sp)
10109ac8:	003d7d06 	br	101090c0 <__alt_data_end+0xfffe90c0>
10109acc:	d9c01d85 	stb	r7,118(sp)
10109ad0:	003d5f06 	br	10109050 <__alt_data_end+0xfffe9050>
10109ad4:	a080004c 	andi	r2,r20,1
10109ad8:	0039883a 	mov	fp,zero
10109adc:	10000526 	beq	r2,zero,10109af4 <___vfiprintf_internal_r+0x1428>
10109ae0:	00800c04 	movi	r2,48
10109ae4:	d88019c5 	stb	r2,103(sp)
10109ae8:	dcc02717 	ldw	r19,156(sp)
10109aec:	dd4019c4 	addi	r21,sp,103
10109af0:	003bf606 	br	10108acc <__alt_data_end+0xfffe8acc>
10109af4:	0027883a 	mov	r19,zero
10109af8:	dd401a04 	addi	r21,sp,104
10109afc:	003bf306 	br	10108acc <__alt_data_end+0xfffe8acc>
10109b00:	d9c01d85 	stb	r7,118(sp)
10109b04:	003dc806 	br	10109228 <__alt_data_end+0xfffe9228>
10109b08:	d9c01d85 	stb	r7,118(sp)
10109b0c:	003d3a06 	br	10108ff8 <__alt_data_end+0xfffe8ff8>
10109b10:	d9c01d85 	stb	r7,118(sp)
10109b14:	003d2a06 	br	10108fc0 <__alt_data_end+0xfffe8fc0>
10109b18:	d9c01d85 	stb	r7,118(sp)
10109b1c:	003cde06 	br	10108e98 <__alt_data_end+0xfffe8e98>
10109b20:	d9c01d85 	stb	r7,118(sp)
10109b24:	003cbc06 	br	10108e18 <__alt_data_end+0xfffe8e18>

10109b28 <__vfiprintf_internal>:
10109b28:	00840474 	movhi	r2,4113
10109b2c:	10881104 	addi	r2,r2,8260
10109b30:	300f883a 	mov	r7,r6
10109b34:	280d883a 	mov	r6,r5
10109b38:	200b883a 	mov	r5,r4
10109b3c:	11000017 	ldw	r4,0(r2)
10109b40:	01086cc1 	jmpi	101086cc <___vfiprintf_internal_r>

10109b44 <__sbprintf>:
10109b44:	2880030b 	ldhu	r2,12(r5)
10109b48:	2ac01917 	ldw	r11,100(r5)
10109b4c:	2a80038b 	ldhu	r10,14(r5)
10109b50:	2a400717 	ldw	r9,28(r5)
10109b54:	2a000917 	ldw	r8,36(r5)
10109b58:	defee204 	addi	sp,sp,-1144
10109b5c:	00c10004 	movi	r3,1024
10109b60:	dc011a15 	stw	r16,1128(sp)
10109b64:	10bfff4c 	andi	r2,r2,65533
10109b68:	2821883a 	mov	r16,r5
10109b6c:	d8cb883a 	add	r5,sp,r3
10109b70:	dc811c15 	stw	r18,1136(sp)
10109b74:	dc411b15 	stw	r17,1132(sp)
10109b78:	dfc11d15 	stw	ra,1140(sp)
10109b7c:	2025883a 	mov	r18,r4
10109b80:	d881030d 	sth	r2,1036(sp)
10109b84:	dac11915 	stw	r11,1124(sp)
10109b88:	da81038d 	sth	r10,1038(sp)
10109b8c:	da410715 	stw	r9,1052(sp)
10109b90:	da010915 	stw	r8,1060(sp)
10109b94:	dec10015 	stw	sp,1024(sp)
10109b98:	dec10415 	stw	sp,1040(sp)
10109b9c:	d8c10215 	stw	r3,1032(sp)
10109ba0:	d8c10515 	stw	r3,1044(sp)
10109ba4:	d8010615 	stw	zero,1048(sp)
10109ba8:	01086cc0 	call	101086cc <___vfiprintf_internal_r>
10109bac:	1023883a 	mov	r17,r2
10109bb0:	10000416 	blt	r2,zero,10109bc4 <__sbprintf+0x80>
10109bb4:	d9410004 	addi	r5,sp,1024
10109bb8:	9009883a 	mov	r4,r18
10109bbc:	0104f800 	call	10104f80 <_fflush_r>
10109bc0:	10000d1e 	bne	r2,zero,10109bf8 <__sbprintf+0xb4>
10109bc4:	d881030b 	ldhu	r2,1036(sp)
10109bc8:	1080100c 	andi	r2,r2,64
10109bcc:	10000326 	beq	r2,zero,10109bdc <__sbprintf+0x98>
10109bd0:	8080030b 	ldhu	r2,12(r16)
10109bd4:	10801014 	ori	r2,r2,64
10109bd8:	8080030d 	sth	r2,12(r16)
10109bdc:	8805883a 	mov	r2,r17
10109be0:	dfc11d17 	ldw	ra,1140(sp)
10109be4:	dc811c17 	ldw	r18,1136(sp)
10109be8:	dc411b17 	ldw	r17,1132(sp)
10109bec:	dc011a17 	ldw	r16,1128(sp)
10109bf0:	dec11e04 	addi	sp,sp,1144
10109bf4:	f800283a 	ret
10109bf8:	047fffc4 	movi	r17,-1
10109bfc:	003ff106 	br	10109bc4 <__alt_data_end+0xfffe9bc4>

10109c00 <_write_r>:
10109c00:	defffd04 	addi	sp,sp,-12
10109c04:	2805883a 	mov	r2,r5
10109c08:	dc000015 	stw	r16,0(sp)
10109c0c:	04040474 	movhi	r16,4113
10109c10:	dc400115 	stw	r17,4(sp)
10109c14:	300b883a 	mov	r5,r6
10109c18:	840f0f04 	addi	r16,r16,15420
10109c1c:	2023883a 	mov	r17,r4
10109c20:	380d883a 	mov	r6,r7
10109c24:	1009883a 	mov	r4,r2
10109c28:	dfc00215 	stw	ra,8(sp)
10109c2c:	80000015 	stw	zero,0(r16)
10109c30:	010de980 	call	1010de98 <write>
10109c34:	00ffffc4 	movi	r3,-1
10109c38:	10c00526 	beq	r2,r3,10109c50 <_write_r+0x50>
10109c3c:	dfc00217 	ldw	ra,8(sp)
10109c40:	dc400117 	ldw	r17,4(sp)
10109c44:	dc000017 	ldw	r16,0(sp)
10109c48:	dec00304 	addi	sp,sp,12
10109c4c:	f800283a 	ret
10109c50:	80c00017 	ldw	r3,0(r16)
10109c54:	183ff926 	beq	r3,zero,10109c3c <__alt_data_end+0xfffe9c3c>
10109c58:	88c00015 	stw	r3,0(r17)
10109c5c:	003ff706 	br	10109c3c <__alt_data_end+0xfffe9c3c>

10109c60 <_close_r>:
10109c60:	defffd04 	addi	sp,sp,-12
10109c64:	dc000015 	stw	r16,0(sp)
10109c68:	04040474 	movhi	r16,4113
10109c6c:	dc400115 	stw	r17,4(sp)
10109c70:	840f0f04 	addi	r16,r16,15420
10109c74:	2023883a 	mov	r17,r4
10109c78:	2809883a 	mov	r4,r5
10109c7c:	dfc00215 	stw	ra,8(sp)
10109c80:	80000015 	stw	zero,0(r16)
10109c84:	010d6880 	call	1010d688 <close>
10109c88:	00ffffc4 	movi	r3,-1
10109c8c:	10c00526 	beq	r2,r3,10109ca4 <_close_r+0x44>
10109c90:	dfc00217 	ldw	ra,8(sp)
10109c94:	dc400117 	ldw	r17,4(sp)
10109c98:	dc000017 	ldw	r16,0(sp)
10109c9c:	dec00304 	addi	sp,sp,12
10109ca0:	f800283a 	ret
10109ca4:	80c00017 	ldw	r3,0(r16)
10109ca8:	183ff926 	beq	r3,zero,10109c90 <__alt_data_end+0xfffe9c90>
10109cac:	88c00015 	stw	r3,0(r17)
10109cb0:	003ff706 	br	10109c90 <__alt_data_end+0xfffe9c90>

10109cb4 <_calloc_r>:
10109cb4:	298b383a 	mul	r5,r5,r6
10109cb8:	defffe04 	addi	sp,sp,-8
10109cbc:	dfc00115 	stw	ra,4(sp)
10109cc0:	dc000015 	stw	r16,0(sp)
10109cc4:	01060bc0 	call	101060bc <_malloc_r>
10109cc8:	10002926 	beq	r2,zero,10109d70 <_calloc_r+0xbc>
10109ccc:	11bfff17 	ldw	r6,-4(r2)
10109cd0:	1021883a 	mov	r16,r2
10109cd4:	00bfff04 	movi	r2,-4
10109cd8:	308c703a 	and	r6,r6,r2
10109cdc:	00c00904 	movi	r3,36
10109ce0:	308d883a 	add	r6,r6,r2
10109ce4:	19801636 	bltu	r3,r6,10109d40 <_calloc_r+0x8c>
10109ce8:	008004c4 	movi	r2,19
10109cec:	11800b2e 	bgeu	r2,r6,10109d1c <_calloc_r+0x68>
10109cf0:	80000015 	stw	zero,0(r16)
10109cf4:	80000115 	stw	zero,4(r16)
10109cf8:	008006c4 	movi	r2,27
10109cfc:	11801a2e 	bgeu	r2,r6,10109d68 <_calloc_r+0xb4>
10109d00:	80000215 	stw	zero,8(r16)
10109d04:	80000315 	stw	zero,12(r16)
10109d08:	30c0151e 	bne	r6,r3,10109d60 <_calloc_r+0xac>
10109d0c:	80000415 	stw	zero,16(r16)
10109d10:	80800604 	addi	r2,r16,24
10109d14:	80000515 	stw	zero,20(r16)
10109d18:	00000106 	br	10109d20 <_calloc_r+0x6c>
10109d1c:	8005883a 	mov	r2,r16
10109d20:	10000015 	stw	zero,0(r2)
10109d24:	10000115 	stw	zero,4(r2)
10109d28:	10000215 	stw	zero,8(r2)
10109d2c:	8005883a 	mov	r2,r16
10109d30:	dfc00117 	ldw	ra,4(sp)
10109d34:	dc000017 	ldw	r16,0(sp)
10109d38:	dec00204 	addi	sp,sp,8
10109d3c:	f800283a 	ret
10109d40:	000b883a 	mov	r5,zero
10109d44:	8009883a 	mov	r4,r16
10109d48:	0106c500 	call	10106c50 <memset>
10109d4c:	8005883a 	mov	r2,r16
10109d50:	dfc00117 	ldw	ra,4(sp)
10109d54:	dc000017 	ldw	r16,0(sp)
10109d58:	dec00204 	addi	sp,sp,8
10109d5c:	f800283a 	ret
10109d60:	80800404 	addi	r2,r16,16
10109d64:	003fee06 	br	10109d20 <__alt_data_end+0xfffe9d20>
10109d68:	80800204 	addi	r2,r16,8
10109d6c:	003fec06 	br	10109d20 <__alt_data_end+0xfffe9d20>
10109d70:	0005883a 	mov	r2,zero
10109d74:	003fee06 	br	10109d30 <__alt_data_end+0xfffe9d30>

10109d78 <_fclose_r>:
10109d78:	28003926 	beq	r5,zero,10109e60 <_fclose_r+0xe8>
10109d7c:	defffc04 	addi	sp,sp,-16
10109d80:	dc400115 	stw	r17,4(sp)
10109d84:	dc000015 	stw	r16,0(sp)
10109d88:	dfc00315 	stw	ra,12(sp)
10109d8c:	dc800215 	stw	r18,8(sp)
10109d90:	2023883a 	mov	r17,r4
10109d94:	2821883a 	mov	r16,r5
10109d98:	20000226 	beq	r4,zero,10109da4 <_fclose_r+0x2c>
10109d9c:	20800e17 	ldw	r2,56(r4)
10109da0:	10002726 	beq	r2,zero,10109e40 <_fclose_r+0xc8>
10109da4:	8080030f 	ldh	r2,12(r16)
10109da8:	1000071e 	bne	r2,zero,10109dc8 <_fclose_r+0x50>
10109dac:	0005883a 	mov	r2,zero
10109db0:	dfc00317 	ldw	ra,12(sp)
10109db4:	dc800217 	ldw	r18,8(sp)
10109db8:	dc400117 	ldw	r17,4(sp)
10109dbc:	dc000017 	ldw	r16,0(sp)
10109dc0:	dec00404 	addi	sp,sp,16
10109dc4:	f800283a 	ret
10109dc8:	800b883a 	mov	r5,r16
10109dcc:	8809883a 	mov	r4,r17
10109dd0:	0104d640 	call	10104d64 <__sflush_r>
10109dd4:	1025883a 	mov	r18,r2
10109dd8:	80800b17 	ldw	r2,44(r16)
10109ddc:	10000426 	beq	r2,zero,10109df0 <_fclose_r+0x78>
10109de0:	81400717 	ldw	r5,28(r16)
10109de4:	8809883a 	mov	r4,r17
10109de8:	103ee83a 	callr	r2
10109dec:	10001616 	blt	r2,zero,10109e48 <_fclose_r+0xd0>
10109df0:	8080030b 	ldhu	r2,12(r16)
10109df4:	1080200c 	andi	r2,r2,128
10109df8:	1000151e 	bne	r2,zero,10109e50 <_fclose_r+0xd8>
10109dfc:	81400c17 	ldw	r5,48(r16)
10109e00:	28000526 	beq	r5,zero,10109e18 <_fclose_r+0xa0>
10109e04:	80801004 	addi	r2,r16,64
10109e08:	28800226 	beq	r5,r2,10109e14 <_fclose_r+0x9c>
10109e0c:	8809883a 	mov	r4,r17
10109e10:	01054d00 	call	101054d0 <_free_r>
10109e14:	80000c15 	stw	zero,48(r16)
10109e18:	81401117 	ldw	r5,68(r16)
10109e1c:	28000326 	beq	r5,zero,10109e2c <_fclose_r+0xb4>
10109e20:	8809883a 	mov	r4,r17
10109e24:	01054d00 	call	101054d0 <_free_r>
10109e28:	80001115 	stw	zero,68(r16)
10109e2c:	010536c0 	call	1010536c <__sfp_lock_acquire>
10109e30:	8000030d 	sth	zero,12(r16)
10109e34:	01053700 	call	10105370 <__sfp_lock_release>
10109e38:	9005883a 	mov	r2,r18
10109e3c:	003fdc06 	br	10109db0 <__alt_data_end+0xfffe9db0>
10109e40:	010535c0 	call	1010535c <__sinit>
10109e44:	003fd706 	br	10109da4 <__alt_data_end+0xfffe9da4>
10109e48:	04bfffc4 	movi	r18,-1
10109e4c:	003fe806 	br	10109df0 <__alt_data_end+0xfffe9df0>
10109e50:	81400417 	ldw	r5,16(r16)
10109e54:	8809883a 	mov	r4,r17
10109e58:	01054d00 	call	101054d0 <_free_r>
10109e5c:	003fe706 	br	10109dfc <__alt_data_end+0xfffe9dfc>
10109e60:	0005883a 	mov	r2,zero
10109e64:	f800283a 	ret

10109e68 <fclose>:
10109e68:	00840474 	movhi	r2,4113
10109e6c:	10881104 	addi	r2,r2,8260
10109e70:	200b883a 	mov	r5,r4
10109e74:	11000017 	ldw	r4,0(r2)
10109e78:	0109d781 	jmpi	10109d78 <_fclose_r>

10109e7c <__fputwc>:
10109e7c:	defff804 	addi	sp,sp,-32
10109e80:	dcc00415 	stw	r19,16(sp)
10109e84:	dc800315 	stw	r18,12(sp)
10109e88:	dc000115 	stw	r16,4(sp)
10109e8c:	dfc00715 	stw	ra,28(sp)
10109e90:	dd400615 	stw	r21,24(sp)
10109e94:	dd000515 	stw	r20,20(sp)
10109e98:	dc400215 	stw	r17,8(sp)
10109e9c:	2027883a 	mov	r19,r4
10109ea0:	2825883a 	mov	r18,r5
10109ea4:	3021883a 	mov	r16,r6
10109ea8:	0105eac0 	call	10105eac <__locale_mb_cur_max>
10109eac:	00c00044 	movi	r3,1
10109eb0:	10c03e26 	beq	r2,r3,10109fac <__fputwc+0x130>
10109eb4:	81c01704 	addi	r7,r16,92
10109eb8:	900d883a 	mov	r6,r18
10109ebc:	d80b883a 	mov	r5,sp
10109ec0:	9809883a 	mov	r4,r19
10109ec4:	010a34c0 	call	1010a34c <_wcrtomb_r>
10109ec8:	1029883a 	mov	r20,r2
10109ecc:	00bfffc4 	movi	r2,-1
10109ed0:	a0802026 	beq	r20,r2,10109f54 <__fputwc+0xd8>
10109ed4:	d9400003 	ldbu	r5,0(sp)
10109ed8:	a0001c26 	beq	r20,zero,10109f4c <__fputwc+0xd0>
10109edc:	0023883a 	mov	r17,zero
10109ee0:	05400284 	movi	r21,10
10109ee4:	00000906 	br	10109f0c <__fputwc+0x90>
10109ee8:	80800017 	ldw	r2,0(r16)
10109eec:	11400005 	stb	r5,0(r2)
10109ef0:	80c00017 	ldw	r3,0(r16)
10109ef4:	18c00044 	addi	r3,r3,1
10109ef8:	80c00015 	stw	r3,0(r16)
10109efc:	8c400044 	addi	r17,r17,1
10109f00:	dc45883a 	add	r2,sp,r17
10109f04:	8d00112e 	bgeu	r17,r20,10109f4c <__fputwc+0xd0>
10109f08:	11400003 	ldbu	r5,0(r2)
10109f0c:	80c00217 	ldw	r3,8(r16)
10109f10:	18ffffc4 	addi	r3,r3,-1
10109f14:	80c00215 	stw	r3,8(r16)
10109f18:	183ff30e 	bge	r3,zero,10109ee8 <__alt_data_end+0xfffe9ee8>
10109f1c:	80800617 	ldw	r2,24(r16)
10109f20:	18801916 	blt	r3,r2,10109f88 <__fputwc+0x10c>
10109f24:	80800017 	ldw	r2,0(r16)
10109f28:	11400005 	stb	r5,0(r2)
10109f2c:	80800017 	ldw	r2,0(r16)
10109f30:	10c00003 	ldbu	r3,0(r2)
10109f34:	10800044 	addi	r2,r2,1
10109f38:	1d402326 	beq	r3,r21,10109fc8 <__fputwc+0x14c>
10109f3c:	80800015 	stw	r2,0(r16)
10109f40:	8c400044 	addi	r17,r17,1
10109f44:	dc45883a 	add	r2,sp,r17
10109f48:	8d3fef36 	bltu	r17,r20,10109f08 <__alt_data_end+0xfffe9f08>
10109f4c:	9005883a 	mov	r2,r18
10109f50:	00000406 	br	10109f64 <__fputwc+0xe8>
10109f54:	80c0030b 	ldhu	r3,12(r16)
10109f58:	a005883a 	mov	r2,r20
10109f5c:	18c01014 	ori	r3,r3,64
10109f60:	80c0030d 	sth	r3,12(r16)
10109f64:	dfc00717 	ldw	ra,28(sp)
10109f68:	dd400617 	ldw	r21,24(sp)
10109f6c:	dd000517 	ldw	r20,20(sp)
10109f70:	dcc00417 	ldw	r19,16(sp)
10109f74:	dc800317 	ldw	r18,12(sp)
10109f78:	dc400217 	ldw	r17,8(sp)
10109f7c:	dc000117 	ldw	r16,4(sp)
10109f80:	dec00804 	addi	sp,sp,32
10109f84:	f800283a 	ret
10109f88:	800d883a 	mov	r6,r16
10109f8c:	29403fcc 	andi	r5,r5,255
10109f90:	9809883a 	mov	r4,r19
10109f94:	010a1f40 	call	1010a1f4 <__swbuf_r>
10109f98:	10bfffe0 	cmpeqi	r2,r2,-1
10109f9c:	10803fcc 	andi	r2,r2,255
10109fa0:	103fd626 	beq	r2,zero,10109efc <__alt_data_end+0xfffe9efc>
10109fa4:	00bfffc4 	movi	r2,-1
10109fa8:	003fee06 	br	10109f64 <__alt_data_end+0xfffe9f64>
10109fac:	90ffffc4 	addi	r3,r18,-1
10109fb0:	01003f84 	movi	r4,254
10109fb4:	20ffbf36 	bltu	r4,r3,10109eb4 <__alt_data_end+0xfffe9eb4>
10109fb8:	900b883a 	mov	r5,r18
10109fbc:	dc800005 	stb	r18,0(sp)
10109fc0:	1029883a 	mov	r20,r2
10109fc4:	003fc506 	br	10109edc <__alt_data_end+0xfffe9edc>
10109fc8:	800d883a 	mov	r6,r16
10109fcc:	a80b883a 	mov	r5,r21
10109fd0:	9809883a 	mov	r4,r19
10109fd4:	010a1f40 	call	1010a1f4 <__swbuf_r>
10109fd8:	10bfffe0 	cmpeqi	r2,r2,-1
10109fdc:	003fef06 	br	10109f9c <__alt_data_end+0xfffe9f9c>

10109fe0 <_fputwc_r>:
10109fe0:	3080030b 	ldhu	r2,12(r6)
10109fe4:	10c8000c 	andi	r3,r2,8192
10109fe8:	1800051e 	bne	r3,zero,1010a000 <_fputwc_r+0x20>
10109fec:	30c01917 	ldw	r3,100(r6)
10109ff0:	10880014 	ori	r2,r2,8192
10109ff4:	3080030d 	sth	r2,12(r6)
10109ff8:	18880014 	ori	r2,r3,8192
10109ffc:	30801915 	stw	r2,100(r6)
1010a000:	0109e7c1 	jmpi	10109e7c <__fputwc>

1010a004 <fputwc>:
1010a004:	00840474 	movhi	r2,4113
1010a008:	defffc04 	addi	sp,sp,-16
1010a00c:	10881104 	addi	r2,r2,8260
1010a010:	dc000115 	stw	r16,4(sp)
1010a014:	14000017 	ldw	r16,0(r2)
1010a018:	dc400215 	stw	r17,8(sp)
1010a01c:	dfc00315 	stw	ra,12(sp)
1010a020:	2023883a 	mov	r17,r4
1010a024:	80000226 	beq	r16,zero,1010a030 <fputwc+0x2c>
1010a028:	80800e17 	ldw	r2,56(r16)
1010a02c:	10001026 	beq	r2,zero,1010a070 <fputwc+0x6c>
1010a030:	2880030b 	ldhu	r2,12(r5)
1010a034:	10c8000c 	andi	r3,r2,8192
1010a038:	1800051e 	bne	r3,zero,1010a050 <fputwc+0x4c>
1010a03c:	28c01917 	ldw	r3,100(r5)
1010a040:	10880014 	ori	r2,r2,8192
1010a044:	2880030d 	sth	r2,12(r5)
1010a048:	18880014 	ori	r2,r3,8192
1010a04c:	28801915 	stw	r2,100(r5)
1010a050:	280d883a 	mov	r6,r5
1010a054:	8009883a 	mov	r4,r16
1010a058:	880b883a 	mov	r5,r17
1010a05c:	dfc00317 	ldw	ra,12(sp)
1010a060:	dc400217 	ldw	r17,8(sp)
1010a064:	dc000117 	ldw	r16,4(sp)
1010a068:	dec00404 	addi	sp,sp,16
1010a06c:	0109e7c1 	jmpi	10109e7c <__fputwc>
1010a070:	8009883a 	mov	r4,r16
1010a074:	d9400015 	stw	r5,0(sp)
1010a078:	010535c0 	call	1010535c <__sinit>
1010a07c:	d9400017 	ldw	r5,0(sp)
1010a080:	003feb06 	br	1010a030 <__alt_data_end+0xfffea030>

1010a084 <_fstat_r>:
1010a084:	defffd04 	addi	sp,sp,-12
1010a088:	2805883a 	mov	r2,r5
1010a08c:	dc000015 	stw	r16,0(sp)
1010a090:	04040474 	movhi	r16,4113
1010a094:	dc400115 	stw	r17,4(sp)
1010a098:	840f0f04 	addi	r16,r16,15420
1010a09c:	2023883a 	mov	r17,r4
1010a0a0:	300b883a 	mov	r5,r6
1010a0a4:	1009883a 	mov	r4,r2
1010a0a8:	dfc00215 	stw	ra,8(sp)
1010a0ac:	80000015 	stw	zero,0(r16)
1010a0b0:	010d7c00 	call	1010d7c0 <fstat>
1010a0b4:	00ffffc4 	movi	r3,-1
1010a0b8:	10c00526 	beq	r2,r3,1010a0d0 <_fstat_r+0x4c>
1010a0bc:	dfc00217 	ldw	ra,8(sp)
1010a0c0:	dc400117 	ldw	r17,4(sp)
1010a0c4:	dc000017 	ldw	r16,0(sp)
1010a0c8:	dec00304 	addi	sp,sp,12
1010a0cc:	f800283a 	ret
1010a0d0:	80c00017 	ldw	r3,0(r16)
1010a0d4:	183ff926 	beq	r3,zero,1010a0bc <__alt_data_end+0xfffea0bc>
1010a0d8:	88c00015 	stw	r3,0(r17)
1010a0dc:	003ff706 	br	1010a0bc <__alt_data_end+0xfffea0bc>

1010a0e0 <_isatty_r>:
1010a0e0:	defffd04 	addi	sp,sp,-12
1010a0e4:	dc000015 	stw	r16,0(sp)
1010a0e8:	04040474 	movhi	r16,4113
1010a0ec:	dc400115 	stw	r17,4(sp)
1010a0f0:	840f0f04 	addi	r16,r16,15420
1010a0f4:	2023883a 	mov	r17,r4
1010a0f8:	2809883a 	mov	r4,r5
1010a0fc:	dfc00215 	stw	ra,8(sp)
1010a100:	80000015 	stw	zero,0(r16)
1010a104:	010d8ac0 	call	1010d8ac <isatty>
1010a108:	00ffffc4 	movi	r3,-1
1010a10c:	10c00526 	beq	r2,r3,1010a124 <_isatty_r+0x44>
1010a110:	dfc00217 	ldw	ra,8(sp)
1010a114:	dc400117 	ldw	r17,4(sp)
1010a118:	dc000017 	ldw	r16,0(sp)
1010a11c:	dec00304 	addi	sp,sp,12
1010a120:	f800283a 	ret
1010a124:	80c00017 	ldw	r3,0(r16)
1010a128:	183ff926 	beq	r3,zero,1010a110 <__alt_data_end+0xfffea110>
1010a12c:	88c00015 	stw	r3,0(r17)
1010a130:	003ff706 	br	1010a110 <__alt_data_end+0xfffea110>

1010a134 <_lseek_r>:
1010a134:	defffd04 	addi	sp,sp,-12
1010a138:	2805883a 	mov	r2,r5
1010a13c:	dc000015 	stw	r16,0(sp)
1010a140:	04040474 	movhi	r16,4113
1010a144:	dc400115 	stw	r17,4(sp)
1010a148:	300b883a 	mov	r5,r6
1010a14c:	840f0f04 	addi	r16,r16,15420
1010a150:	2023883a 	mov	r17,r4
1010a154:	380d883a 	mov	r6,r7
1010a158:	1009883a 	mov	r4,r2
1010a15c:	dfc00215 	stw	ra,8(sp)
1010a160:	80000015 	stw	zero,0(r16)
1010a164:	010da780 	call	1010da78 <lseek>
1010a168:	00ffffc4 	movi	r3,-1
1010a16c:	10c00526 	beq	r2,r3,1010a184 <_lseek_r+0x50>
1010a170:	dfc00217 	ldw	ra,8(sp)
1010a174:	dc400117 	ldw	r17,4(sp)
1010a178:	dc000017 	ldw	r16,0(sp)
1010a17c:	dec00304 	addi	sp,sp,12
1010a180:	f800283a 	ret
1010a184:	80c00017 	ldw	r3,0(r16)
1010a188:	183ff926 	beq	r3,zero,1010a170 <__alt_data_end+0xfffea170>
1010a18c:	88c00015 	stw	r3,0(r17)
1010a190:	003ff706 	br	1010a170 <__alt_data_end+0xfffea170>

1010a194 <_read_r>:
1010a194:	defffd04 	addi	sp,sp,-12
1010a198:	2805883a 	mov	r2,r5
1010a19c:	dc000015 	stw	r16,0(sp)
1010a1a0:	04040474 	movhi	r16,4113
1010a1a4:	dc400115 	stw	r17,4(sp)
1010a1a8:	300b883a 	mov	r5,r6
1010a1ac:	840f0f04 	addi	r16,r16,15420
1010a1b0:	2023883a 	mov	r17,r4
1010a1b4:	380d883a 	mov	r6,r7
1010a1b8:	1009883a 	mov	r4,r2
1010a1bc:	dfc00215 	stw	ra,8(sp)
1010a1c0:	80000015 	stw	zero,0(r16)
1010a1c4:	010dc4c0 	call	1010dc4c <read>
1010a1c8:	00ffffc4 	movi	r3,-1
1010a1cc:	10c00526 	beq	r2,r3,1010a1e4 <_read_r+0x50>
1010a1d0:	dfc00217 	ldw	ra,8(sp)
1010a1d4:	dc400117 	ldw	r17,4(sp)
1010a1d8:	dc000017 	ldw	r16,0(sp)
1010a1dc:	dec00304 	addi	sp,sp,12
1010a1e0:	f800283a 	ret
1010a1e4:	80c00017 	ldw	r3,0(r16)
1010a1e8:	183ff926 	beq	r3,zero,1010a1d0 <__alt_data_end+0xfffea1d0>
1010a1ec:	88c00015 	stw	r3,0(r17)
1010a1f0:	003ff706 	br	1010a1d0 <__alt_data_end+0xfffea1d0>

1010a1f4 <__swbuf_r>:
1010a1f4:	defffb04 	addi	sp,sp,-20
1010a1f8:	dcc00315 	stw	r19,12(sp)
1010a1fc:	dc800215 	stw	r18,8(sp)
1010a200:	dc000015 	stw	r16,0(sp)
1010a204:	dfc00415 	stw	ra,16(sp)
1010a208:	dc400115 	stw	r17,4(sp)
1010a20c:	2025883a 	mov	r18,r4
1010a210:	2827883a 	mov	r19,r5
1010a214:	3021883a 	mov	r16,r6
1010a218:	20000226 	beq	r4,zero,1010a224 <__swbuf_r+0x30>
1010a21c:	20800e17 	ldw	r2,56(r4)
1010a220:	10004226 	beq	r2,zero,1010a32c <__swbuf_r+0x138>
1010a224:	80800617 	ldw	r2,24(r16)
1010a228:	8100030b 	ldhu	r4,12(r16)
1010a22c:	80800215 	stw	r2,8(r16)
1010a230:	2080020c 	andi	r2,r4,8
1010a234:	10003626 	beq	r2,zero,1010a310 <__swbuf_r+0x11c>
1010a238:	80c00417 	ldw	r3,16(r16)
1010a23c:	18003426 	beq	r3,zero,1010a310 <__swbuf_r+0x11c>
1010a240:	2088000c 	andi	r2,r4,8192
1010a244:	9c403fcc 	andi	r17,r19,255
1010a248:	10001a26 	beq	r2,zero,1010a2b4 <__swbuf_r+0xc0>
1010a24c:	80800017 	ldw	r2,0(r16)
1010a250:	81000517 	ldw	r4,20(r16)
1010a254:	10c7c83a 	sub	r3,r2,r3
1010a258:	1900200e 	bge	r3,r4,1010a2dc <__swbuf_r+0xe8>
1010a25c:	18c00044 	addi	r3,r3,1
1010a260:	81000217 	ldw	r4,8(r16)
1010a264:	11400044 	addi	r5,r2,1
1010a268:	81400015 	stw	r5,0(r16)
1010a26c:	213fffc4 	addi	r4,r4,-1
1010a270:	81000215 	stw	r4,8(r16)
1010a274:	14c00005 	stb	r19,0(r2)
1010a278:	80800517 	ldw	r2,20(r16)
1010a27c:	10c01e26 	beq	r2,r3,1010a2f8 <__swbuf_r+0x104>
1010a280:	8080030b 	ldhu	r2,12(r16)
1010a284:	1080004c 	andi	r2,r2,1
1010a288:	10000226 	beq	r2,zero,1010a294 <__swbuf_r+0xa0>
1010a28c:	00800284 	movi	r2,10
1010a290:	88801926 	beq	r17,r2,1010a2f8 <__swbuf_r+0x104>
1010a294:	8805883a 	mov	r2,r17
1010a298:	dfc00417 	ldw	ra,16(sp)
1010a29c:	dcc00317 	ldw	r19,12(sp)
1010a2a0:	dc800217 	ldw	r18,8(sp)
1010a2a4:	dc400117 	ldw	r17,4(sp)
1010a2a8:	dc000017 	ldw	r16,0(sp)
1010a2ac:	dec00504 	addi	sp,sp,20
1010a2b0:	f800283a 	ret
1010a2b4:	81401917 	ldw	r5,100(r16)
1010a2b8:	00b7ffc4 	movi	r2,-8193
1010a2bc:	21080014 	ori	r4,r4,8192
1010a2c0:	2884703a 	and	r2,r5,r2
1010a2c4:	80801915 	stw	r2,100(r16)
1010a2c8:	80800017 	ldw	r2,0(r16)
1010a2cc:	8100030d 	sth	r4,12(r16)
1010a2d0:	81000517 	ldw	r4,20(r16)
1010a2d4:	10c7c83a 	sub	r3,r2,r3
1010a2d8:	193fe016 	blt	r3,r4,1010a25c <__alt_data_end+0xfffea25c>
1010a2dc:	800b883a 	mov	r5,r16
1010a2e0:	9009883a 	mov	r4,r18
1010a2e4:	0104f800 	call	10104f80 <_fflush_r>
1010a2e8:	1000071e 	bne	r2,zero,1010a308 <__swbuf_r+0x114>
1010a2ec:	80800017 	ldw	r2,0(r16)
1010a2f0:	00c00044 	movi	r3,1
1010a2f4:	003fda06 	br	1010a260 <__alt_data_end+0xfffea260>
1010a2f8:	800b883a 	mov	r5,r16
1010a2fc:	9009883a 	mov	r4,r18
1010a300:	0104f800 	call	10104f80 <_fflush_r>
1010a304:	103fe326 	beq	r2,zero,1010a294 <__alt_data_end+0xfffea294>
1010a308:	00bfffc4 	movi	r2,-1
1010a30c:	003fe206 	br	1010a298 <__alt_data_end+0xfffea298>
1010a310:	800b883a 	mov	r5,r16
1010a314:	9009883a 	mov	r4,r18
1010a318:	01033880 	call	10103388 <__swsetup_r>
1010a31c:	103ffa1e 	bne	r2,zero,1010a308 <__alt_data_end+0xfffea308>
1010a320:	8100030b 	ldhu	r4,12(r16)
1010a324:	80c00417 	ldw	r3,16(r16)
1010a328:	003fc506 	br	1010a240 <__alt_data_end+0xfffea240>
1010a32c:	010535c0 	call	1010535c <__sinit>
1010a330:	003fbc06 	br	1010a224 <__alt_data_end+0xfffea224>

1010a334 <__swbuf>:
1010a334:	00840474 	movhi	r2,4113
1010a338:	10881104 	addi	r2,r2,8260
1010a33c:	280d883a 	mov	r6,r5
1010a340:	200b883a 	mov	r5,r4
1010a344:	11000017 	ldw	r4,0(r2)
1010a348:	010a1f41 	jmpi	1010a1f4 <__swbuf_r>

1010a34c <_wcrtomb_r>:
1010a34c:	defff604 	addi	sp,sp,-40
1010a350:	00840474 	movhi	r2,4113
1010a354:	dc800815 	stw	r18,32(sp)
1010a358:	dc400715 	stw	r17,28(sp)
1010a35c:	dc000615 	stw	r16,24(sp)
1010a360:	10881504 	addi	r2,r2,8276
1010a364:	dfc00915 	stw	ra,36(sp)
1010a368:	2021883a 	mov	r16,r4
1010a36c:	3823883a 	mov	r17,r7
1010a370:	14800017 	ldw	r18,0(r2)
1010a374:	28001426 	beq	r5,zero,1010a3c8 <_wcrtomb_r+0x7c>
1010a378:	d9400415 	stw	r5,16(sp)
1010a37c:	d9800515 	stw	r6,20(sp)
1010a380:	0105ea00 	call	10105ea0 <__locale_charset>
1010a384:	d9800517 	ldw	r6,20(sp)
1010a388:	d9400417 	ldw	r5,16(sp)
1010a38c:	100f883a 	mov	r7,r2
1010a390:	dc400015 	stw	r17,0(sp)
1010a394:	8009883a 	mov	r4,r16
1010a398:	903ee83a 	callr	r18
1010a39c:	00ffffc4 	movi	r3,-1
1010a3a0:	10c0031e 	bne	r2,r3,1010a3b0 <_wcrtomb_r+0x64>
1010a3a4:	88000015 	stw	zero,0(r17)
1010a3a8:	00c02284 	movi	r3,138
1010a3ac:	80c00015 	stw	r3,0(r16)
1010a3b0:	dfc00917 	ldw	ra,36(sp)
1010a3b4:	dc800817 	ldw	r18,32(sp)
1010a3b8:	dc400717 	ldw	r17,28(sp)
1010a3bc:	dc000617 	ldw	r16,24(sp)
1010a3c0:	dec00a04 	addi	sp,sp,40
1010a3c4:	f800283a 	ret
1010a3c8:	0105ea00 	call	10105ea0 <__locale_charset>
1010a3cc:	100f883a 	mov	r7,r2
1010a3d0:	dc400015 	stw	r17,0(sp)
1010a3d4:	000d883a 	mov	r6,zero
1010a3d8:	d9400104 	addi	r5,sp,4
1010a3dc:	8009883a 	mov	r4,r16
1010a3e0:	903ee83a 	callr	r18
1010a3e4:	003fed06 	br	1010a39c <__alt_data_end+0xfffea39c>

1010a3e8 <wcrtomb>:
1010a3e8:	defff604 	addi	sp,sp,-40
1010a3ec:	00840474 	movhi	r2,4113
1010a3f0:	dc800615 	stw	r18,24(sp)
1010a3f4:	dc400515 	stw	r17,20(sp)
1010a3f8:	10881104 	addi	r2,r2,8260
1010a3fc:	dfc00915 	stw	ra,36(sp)
1010a400:	dd000815 	stw	r20,32(sp)
1010a404:	dcc00715 	stw	r19,28(sp)
1010a408:	dc000415 	stw	r16,16(sp)
1010a40c:	3025883a 	mov	r18,r6
1010a410:	14400017 	ldw	r17,0(r2)
1010a414:	20001926 	beq	r4,zero,1010a47c <wcrtomb+0x94>
1010a418:	00840474 	movhi	r2,4113
1010a41c:	10881504 	addi	r2,r2,8276
1010a420:	15000017 	ldw	r20,0(r2)
1010a424:	2021883a 	mov	r16,r4
1010a428:	2827883a 	mov	r19,r5
1010a42c:	0105ea00 	call	10105ea0 <__locale_charset>
1010a430:	100f883a 	mov	r7,r2
1010a434:	dc800015 	stw	r18,0(sp)
1010a438:	980d883a 	mov	r6,r19
1010a43c:	800b883a 	mov	r5,r16
1010a440:	8809883a 	mov	r4,r17
1010a444:	a03ee83a 	callr	r20
1010a448:	00ffffc4 	movi	r3,-1
1010a44c:	10c0031e 	bne	r2,r3,1010a45c <wcrtomb+0x74>
1010a450:	90000015 	stw	zero,0(r18)
1010a454:	00c02284 	movi	r3,138
1010a458:	88c00015 	stw	r3,0(r17)
1010a45c:	dfc00917 	ldw	ra,36(sp)
1010a460:	dd000817 	ldw	r20,32(sp)
1010a464:	dcc00717 	ldw	r19,28(sp)
1010a468:	dc800617 	ldw	r18,24(sp)
1010a46c:	dc400517 	ldw	r17,20(sp)
1010a470:	dc000417 	ldw	r16,16(sp)
1010a474:	dec00a04 	addi	sp,sp,40
1010a478:	f800283a 	ret
1010a47c:	00840474 	movhi	r2,4113
1010a480:	10881504 	addi	r2,r2,8276
1010a484:	14000017 	ldw	r16,0(r2)
1010a488:	0105ea00 	call	10105ea0 <__locale_charset>
1010a48c:	100f883a 	mov	r7,r2
1010a490:	dc800015 	stw	r18,0(sp)
1010a494:	000d883a 	mov	r6,zero
1010a498:	d9400104 	addi	r5,sp,4
1010a49c:	8809883a 	mov	r4,r17
1010a4a0:	803ee83a 	callr	r16
1010a4a4:	003fe806 	br	1010a448 <__alt_data_end+0xfffea448>

1010a4a8 <__ascii_wctomb>:
1010a4a8:	28000526 	beq	r5,zero,1010a4c0 <__ascii_wctomb+0x18>
1010a4ac:	00803fc4 	movi	r2,255
1010a4b0:	11800536 	bltu	r2,r6,1010a4c8 <__ascii_wctomb+0x20>
1010a4b4:	29800005 	stb	r6,0(r5)
1010a4b8:	00800044 	movi	r2,1
1010a4bc:	f800283a 	ret
1010a4c0:	0005883a 	mov	r2,zero
1010a4c4:	f800283a 	ret
1010a4c8:	00802284 	movi	r2,138
1010a4cc:	20800015 	stw	r2,0(r4)
1010a4d0:	00bfffc4 	movi	r2,-1
1010a4d4:	f800283a 	ret

1010a4d8 <_wctomb_r>:
1010a4d8:	00840474 	movhi	r2,4113
1010a4dc:	defff904 	addi	sp,sp,-28
1010a4e0:	10881504 	addi	r2,r2,8276
1010a4e4:	dfc00615 	stw	ra,24(sp)
1010a4e8:	dc400515 	stw	r17,20(sp)
1010a4ec:	dc000415 	stw	r16,16(sp)
1010a4f0:	3823883a 	mov	r17,r7
1010a4f4:	14000017 	ldw	r16,0(r2)
1010a4f8:	d9000115 	stw	r4,4(sp)
1010a4fc:	d9400215 	stw	r5,8(sp)
1010a500:	d9800315 	stw	r6,12(sp)
1010a504:	0105ea00 	call	10105ea0 <__locale_charset>
1010a508:	d9800317 	ldw	r6,12(sp)
1010a50c:	d9400217 	ldw	r5,8(sp)
1010a510:	d9000117 	ldw	r4,4(sp)
1010a514:	100f883a 	mov	r7,r2
1010a518:	dc400015 	stw	r17,0(sp)
1010a51c:	803ee83a 	callr	r16
1010a520:	dfc00617 	ldw	ra,24(sp)
1010a524:	dc400517 	ldw	r17,20(sp)
1010a528:	dc000417 	ldw	r16,16(sp)
1010a52c:	dec00704 	addi	sp,sp,28
1010a530:	f800283a 	ret

1010a534 <__udivdi3>:
1010a534:	defff504 	addi	sp,sp,-44
1010a538:	dcc00415 	stw	r19,16(sp)
1010a53c:	dc000115 	stw	r16,4(sp)
1010a540:	dfc00a15 	stw	ra,40(sp)
1010a544:	df000915 	stw	fp,36(sp)
1010a548:	ddc00815 	stw	r23,32(sp)
1010a54c:	dd800715 	stw	r22,28(sp)
1010a550:	dd400615 	stw	r21,24(sp)
1010a554:	dd000515 	stw	r20,20(sp)
1010a558:	dc800315 	stw	r18,12(sp)
1010a55c:	dc400215 	stw	r17,8(sp)
1010a560:	2027883a 	mov	r19,r4
1010a564:	2821883a 	mov	r16,r5
1010a568:	3800411e 	bne	r7,zero,1010a670 <__udivdi3+0x13c>
1010a56c:	3023883a 	mov	r17,r6
1010a570:	2025883a 	mov	r18,r4
1010a574:	2980522e 	bgeu	r5,r6,1010a6c0 <__udivdi3+0x18c>
1010a578:	00bfffd4 	movui	r2,65535
1010a57c:	282d883a 	mov	r22,r5
1010a580:	1180a836 	bltu	r2,r6,1010a824 <__udivdi3+0x2f0>
1010a584:	00803fc4 	movi	r2,255
1010a588:	1185803a 	cmpltu	r2,r2,r6
1010a58c:	100490fa 	slli	r2,r2,3
1010a590:	3086d83a 	srl	r3,r6,r2
1010a594:	01040474 	movhi	r4,4113
1010a598:	21010b04 	addi	r4,r4,1068
1010a59c:	20c7883a 	add	r3,r4,r3
1010a5a0:	18c00003 	ldbu	r3,0(r3)
1010a5a4:	1885883a 	add	r2,r3,r2
1010a5a8:	00c00804 	movi	r3,32
1010a5ac:	1887c83a 	sub	r3,r3,r2
1010a5b0:	18000526 	beq	r3,zero,1010a5c8 <__udivdi3+0x94>
1010a5b4:	80e0983a 	sll	r16,r16,r3
1010a5b8:	9884d83a 	srl	r2,r19,r2
1010a5bc:	30e2983a 	sll	r17,r6,r3
1010a5c0:	98e4983a 	sll	r18,r19,r3
1010a5c4:	142cb03a 	or	r22,r2,r16
1010a5c8:	882ad43a 	srli	r21,r17,16
1010a5cc:	b009883a 	mov	r4,r22
1010a5d0:	8d3fffcc 	andi	r20,r17,65535
1010a5d4:	a80b883a 	mov	r5,r21
1010a5d8:	0100e880 	call	10100e88 <__umodsi3>
1010a5dc:	b009883a 	mov	r4,r22
1010a5e0:	a80b883a 	mov	r5,r21
1010a5e4:	1027883a 	mov	r19,r2
1010a5e8:	0100e240 	call	10100e24 <__udivsi3>
1010a5ec:	102d883a 	mov	r22,r2
1010a5f0:	9826943a 	slli	r19,r19,16
1010a5f4:	9004d43a 	srli	r2,r18,16
1010a5f8:	a5a1383a 	mul	r16,r20,r22
1010a5fc:	14c4b03a 	or	r2,r2,r19
1010a600:	1400052e 	bgeu	r2,r16,1010a618 <__udivdi3+0xe4>
1010a604:	1445883a 	add	r2,r2,r17
1010a608:	b0ffffc4 	addi	r3,r22,-1
1010a60c:	14400136 	bltu	r2,r17,1010a614 <__udivdi3+0xe0>
1010a610:	14012336 	bltu	r2,r16,1010aaa0 <__udivdi3+0x56c>
1010a614:	182d883a 	mov	r22,r3
1010a618:	1421c83a 	sub	r16,r2,r16
1010a61c:	a80b883a 	mov	r5,r21
1010a620:	8009883a 	mov	r4,r16
1010a624:	0100e880 	call	10100e88 <__umodsi3>
1010a628:	1027883a 	mov	r19,r2
1010a62c:	a80b883a 	mov	r5,r21
1010a630:	8009883a 	mov	r4,r16
1010a634:	0100e240 	call	10100e24 <__udivsi3>
1010a638:	9826943a 	slli	r19,r19,16
1010a63c:	a0a9383a 	mul	r20,r20,r2
1010a640:	94bfffcc 	andi	r18,r18,65535
1010a644:	94e4b03a 	or	r18,r18,r19
1010a648:	9500052e 	bgeu	r18,r20,1010a660 <__udivdi3+0x12c>
1010a64c:	8ca5883a 	add	r18,r17,r18
1010a650:	10ffffc4 	addi	r3,r2,-1
1010a654:	9440f136 	bltu	r18,r17,1010aa1c <__udivdi3+0x4e8>
1010a658:	9500f02e 	bgeu	r18,r20,1010aa1c <__udivdi3+0x4e8>
1010a65c:	10bfff84 	addi	r2,r2,-2
1010a660:	b00c943a 	slli	r6,r22,16
1010a664:	0007883a 	mov	r3,zero
1010a668:	3084b03a 	or	r2,r6,r2
1010a66c:	00005906 	br	1010a7d4 <__udivdi3+0x2a0>
1010a670:	29c05636 	bltu	r5,r7,1010a7cc <__udivdi3+0x298>
1010a674:	00bfffd4 	movui	r2,65535
1010a678:	11c0622e 	bgeu	r2,r7,1010a804 <__udivdi3+0x2d0>
1010a67c:	00804034 	movhi	r2,256
1010a680:	10bfffc4 	addi	r2,r2,-1
1010a684:	11c0ee36 	bltu	r2,r7,1010aa40 <__udivdi3+0x50c>
1010a688:	00800404 	movi	r2,16
1010a68c:	3886d83a 	srl	r3,r7,r2
1010a690:	01040474 	movhi	r4,4113
1010a694:	21010b04 	addi	r4,r4,1068
1010a698:	20c7883a 	add	r3,r4,r3
1010a69c:	18c00003 	ldbu	r3,0(r3)
1010a6a0:	05400804 	movi	r21,32
1010a6a4:	1885883a 	add	r2,r3,r2
1010a6a8:	a8abc83a 	sub	r21,r21,r2
1010a6ac:	a800621e 	bne	r21,zero,1010a838 <__udivdi3+0x304>
1010a6b0:	3c00e936 	bltu	r7,r16,1010aa58 <__udivdi3+0x524>
1010a6b4:	9985403a 	cmpgeu	r2,r19,r6
1010a6b8:	0007883a 	mov	r3,zero
1010a6bc:	00004506 	br	1010a7d4 <__udivdi3+0x2a0>
1010a6c0:	3000041e 	bne	r6,zero,1010a6d4 <__udivdi3+0x1a0>
1010a6c4:	000b883a 	mov	r5,zero
1010a6c8:	01000044 	movi	r4,1
1010a6cc:	0100e240 	call	10100e24 <__udivsi3>
1010a6d0:	1023883a 	mov	r17,r2
1010a6d4:	00bfffd4 	movui	r2,65535
1010a6d8:	14404e2e 	bgeu	r2,r17,1010a814 <__udivdi3+0x2e0>
1010a6dc:	00804034 	movhi	r2,256
1010a6e0:	10bfffc4 	addi	r2,r2,-1
1010a6e4:	1440d836 	bltu	r2,r17,1010aa48 <__udivdi3+0x514>
1010a6e8:	00800404 	movi	r2,16
1010a6ec:	8886d83a 	srl	r3,r17,r2
1010a6f0:	01040474 	movhi	r4,4113
1010a6f4:	21010b04 	addi	r4,r4,1068
1010a6f8:	20c7883a 	add	r3,r4,r3
1010a6fc:	18c00003 	ldbu	r3,0(r3)
1010a700:	1885883a 	add	r2,r3,r2
1010a704:	00c00804 	movi	r3,32
1010a708:	1887c83a 	sub	r3,r3,r2
1010a70c:	18008f1e 	bne	r3,zero,1010a94c <__udivdi3+0x418>
1010a710:	882ad43a 	srli	r21,r17,16
1010a714:	8461c83a 	sub	r16,r16,r17
1010a718:	8d3fffcc 	andi	r20,r17,65535
1010a71c:	00c00044 	movi	r3,1
1010a720:	8009883a 	mov	r4,r16
1010a724:	a80b883a 	mov	r5,r21
1010a728:	d8c00015 	stw	r3,0(sp)
1010a72c:	0100e880 	call	10100e88 <__umodsi3>
1010a730:	8009883a 	mov	r4,r16
1010a734:	a80b883a 	mov	r5,r21
1010a738:	1027883a 	mov	r19,r2
1010a73c:	0100e240 	call	10100e24 <__udivsi3>
1010a740:	9826943a 	slli	r19,r19,16
1010a744:	9008d43a 	srli	r4,r18,16
1010a748:	1521383a 	mul	r16,r2,r20
1010a74c:	102d883a 	mov	r22,r2
1010a750:	24c8b03a 	or	r4,r4,r19
1010a754:	d8c00017 	ldw	r3,0(sp)
1010a758:	2400052e 	bgeu	r4,r16,1010a770 <__udivdi3+0x23c>
1010a75c:	2449883a 	add	r4,r4,r17
1010a760:	b0bfffc4 	addi	r2,r22,-1
1010a764:	24400136 	bltu	r4,r17,1010a76c <__udivdi3+0x238>
1010a768:	2400ca36 	bltu	r4,r16,1010aa94 <__udivdi3+0x560>
1010a76c:	102d883a 	mov	r22,r2
1010a770:	2421c83a 	sub	r16,r4,r16
1010a774:	a80b883a 	mov	r5,r21
1010a778:	8009883a 	mov	r4,r16
1010a77c:	d8c00015 	stw	r3,0(sp)
1010a780:	0100e880 	call	10100e88 <__umodsi3>
1010a784:	1027883a 	mov	r19,r2
1010a788:	a80b883a 	mov	r5,r21
1010a78c:	8009883a 	mov	r4,r16
1010a790:	0100e240 	call	10100e24 <__udivsi3>
1010a794:	9826943a 	slli	r19,r19,16
1010a798:	1529383a 	mul	r20,r2,r20
1010a79c:	94bfffcc 	andi	r18,r18,65535
1010a7a0:	94e4b03a 	or	r18,r18,r19
1010a7a4:	d8c00017 	ldw	r3,0(sp)
1010a7a8:	9500052e 	bgeu	r18,r20,1010a7c0 <__udivdi3+0x28c>
1010a7ac:	8ca5883a 	add	r18,r17,r18
1010a7b0:	113fffc4 	addi	r4,r2,-1
1010a7b4:	94409736 	bltu	r18,r17,1010aa14 <__udivdi3+0x4e0>
1010a7b8:	9500962e 	bgeu	r18,r20,1010aa14 <__udivdi3+0x4e0>
1010a7bc:	10bfff84 	addi	r2,r2,-2
1010a7c0:	b00c943a 	slli	r6,r22,16
1010a7c4:	3084b03a 	or	r2,r6,r2
1010a7c8:	00000206 	br	1010a7d4 <__udivdi3+0x2a0>
1010a7cc:	0007883a 	mov	r3,zero
1010a7d0:	0005883a 	mov	r2,zero
1010a7d4:	dfc00a17 	ldw	ra,40(sp)
1010a7d8:	df000917 	ldw	fp,36(sp)
1010a7dc:	ddc00817 	ldw	r23,32(sp)
1010a7e0:	dd800717 	ldw	r22,28(sp)
1010a7e4:	dd400617 	ldw	r21,24(sp)
1010a7e8:	dd000517 	ldw	r20,20(sp)
1010a7ec:	dcc00417 	ldw	r19,16(sp)
1010a7f0:	dc800317 	ldw	r18,12(sp)
1010a7f4:	dc400217 	ldw	r17,8(sp)
1010a7f8:	dc000117 	ldw	r16,4(sp)
1010a7fc:	dec00b04 	addi	sp,sp,44
1010a800:	f800283a 	ret
1010a804:	00803fc4 	movi	r2,255
1010a808:	11c5803a 	cmpltu	r2,r2,r7
1010a80c:	100490fa 	slli	r2,r2,3
1010a810:	003f9e06 	br	1010a68c <__alt_data_end+0xfffea68c>
1010a814:	00803fc4 	movi	r2,255
1010a818:	1445803a 	cmpltu	r2,r2,r17
1010a81c:	100490fa 	slli	r2,r2,3
1010a820:	003fb206 	br	1010a6ec <__alt_data_end+0xfffea6ec>
1010a824:	00804034 	movhi	r2,256
1010a828:	10bfffc4 	addi	r2,r2,-1
1010a82c:	11808836 	bltu	r2,r6,1010aa50 <__udivdi3+0x51c>
1010a830:	00800404 	movi	r2,16
1010a834:	003f5606 	br	1010a590 <__alt_data_end+0xfffea590>
1010a838:	30aed83a 	srl	r23,r6,r2
1010a83c:	3d4e983a 	sll	r7,r7,r21
1010a840:	80acd83a 	srl	r22,r16,r2
1010a844:	9884d83a 	srl	r2,r19,r2
1010a848:	3deeb03a 	or	r23,r7,r23
1010a84c:	b824d43a 	srli	r18,r23,16
1010a850:	8560983a 	sll	r16,r16,r21
1010a854:	b009883a 	mov	r4,r22
1010a858:	900b883a 	mov	r5,r18
1010a85c:	3568983a 	sll	r20,r6,r21
1010a860:	1420b03a 	or	r16,r2,r16
1010a864:	0100e880 	call	10100e88 <__umodsi3>
1010a868:	b009883a 	mov	r4,r22
1010a86c:	900b883a 	mov	r5,r18
1010a870:	1023883a 	mov	r17,r2
1010a874:	0100e240 	call	10100e24 <__udivsi3>
1010a878:	8808943a 	slli	r4,r17,16
1010a87c:	bf3fffcc 	andi	fp,r23,65535
1010a880:	8006d43a 	srli	r3,r16,16
1010a884:	e0a3383a 	mul	r17,fp,r2
1010a888:	100d883a 	mov	r6,r2
1010a88c:	1906b03a 	or	r3,r3,r4
1010a890:	1c40042e 	bgeu	r3,r17,1010a8a4 <__udivdi3+0x370>
1010a894:	1dc7883a 	add	r3,r3,r23
1010a898:	10bfffc4 	addi	r2,r2,-1
1010a89c:	1dc0752e 	bgeu	r3,r23,1010aa74 <__udivdi3+0x540>
1010a8a0:	100d883a 	mov	r6,r2
1010a8a4:	1c63c83a 	sub	r17,r3,r17
1010a8a8:	900b883a 	mov	r5,r18
1010a8ac:	8809883a 	mov	r4,r17
1010a8b0:	d9800015 	stw	r6,0(sp)
1010a8b4:	0100e880 	call	10100e88 <__umodsi3>
1010a8b8:	102d883a 	mov	r22,r2
1010a8bc:	8809883a 	mov	r4,r17
1010a8c0:	900b883a 	mov	r5,r18
1010a8c4:	0100e240 	call	10100e24 <__udivsi3>
1010a8c8:	b02c943a 	slli	r22,r22,16
1010a8cc:	e089383a 	mul	r4,fp,r2
1010a8d0:	843fffcc 	andi	r16,r16,65535
1010a8d4:	85a0b03a 	or	r16,r16,r22
1010a8d8:	d9800017 	ldw	r6,0(sp)
1010a8dc:	8100042e 	bgeu	r16,r4,1010a8f0 <__udivdi3+0x3bc>
1010a8e0:	85e1883a 	add	r16,r16,r23
1010a8e4:	10ffffc4 	addi	r3,r2,-1
1010a8e8:	85c05e2e 	bgeu	r16,r23,1010aa64 <__udivdi3+0x530>
1010a8ec:	1805883a 	mov	r2,r3
1010a8f0:	300c943a 	slli	r6,r6,16
1010a8f4:	a17fffcc 	andi	r5,r20,65535
1010a8f8:	a028d43a 	srli	r20,r20,16
1010a8fc:	3084b03a 	or	r2,r6,r2
1010a900:	10ffffcc 	andi	r3,r2,65535
1010a904:	100cd43a 	srli	r6,r2,16
1010a908:	194f383a 	mul	r7,r3,r5
1010a90c:	1d07383a 	mul	r3,r3,r20
1010a910:	314b383a 	mul	r5,r6,r5
1010a914:	3810d43a 	srli	r8,r7,16
1010a918:	8121c83a 	sub	r16,r16,r4
1010a91c:	1947883a 	add	r3,r3,r5
1010a920:	40c7883a 	add	r3,r8,r3
1010a924:	350d383a 	mul	r6,r6,r20
1010a928:	1940022e 	bgeu	r3,r5,1010a934 <__udivdi3+0x400>
1010a92c:	01000074 	movhi	r4,1
1010a930:	310d883a 	add	r6,r6,r4
1010a934:	1828d43a 	srli	r20,r3,16
1010a938:	a18d883a 	add	r6,r20,r6
1010a93c:	81803e36 	bltu	r16,r6,1010aa38 <__udivdi3+0x504>
1010a940:	81803826 	beq	r16,r6,1010aa24 <__udivdi3+0x4f0>
1010a944:	0007883a 	mov	r3,zero
1010a948:	003fa206 	br	1010a7d4 <__alt_data_end+0xfffea7d4>
1010a94c:	88e2983a 	sll	r17,r17,r3
1010a950:	80a8d83a 	srl	r20,r16,r2
1010a954:	80e0983a 	sll	r16,r16,r3
1010a958:	882ad43a 	srli	r21,r17,16
1010a95c:	9884d83a 	srl	r2,r19,r2
1010a960:	a009883a 	mov	r4,r20
1010a964:	a80b883a 	mov	r5,r21
1010a968:	142eb03a 	or	r23,r2,r16
1010a96c:	98e4983a 	sll	r18,r19,r3
1010a970:	0100e880 	call	10100e88 <__umodsi3>
1010a974:	a009883a 	mov	r4,r20
1010a978:	a80b883a 	mov	r5,r21
1010a97c:	1021883a 	mov	r16,r2
1010a980:	0100e240 	call	10100e24 <__udivsi3>
1010a984:	1039883a 	mov	fp,r2
1010a988:	8d3fffcc 	andi	r20,r17,65535
1010a98c:	8020943a 	slli	r16,r16,16
1010a990:	b804d43a 	srli	r2,r23,16
1010a994:	a72d383a 	mul	r22,r20,fp
1010a998:	1404b03a 	or	r2,r2,r16
1010a99c:	1580062e 	bgeu	r2,r22,1010a9b8 <__udivdi3+0x484>
1010a9a0:	1445883a 	add	r2,r2,r17
1010a9a4:	e0ffffc4 	addi	r3,fp,-1
1010a9a8:	14403836 	bltu	r2,r17,1010aa8c <__udivdi3+0x558>
1010a9ac:	1580372e 	bgeu	r2,r22,1010aa8c <__udivdi3+0x558>
1010a9b0:	e73fff84 	addi	fp,fp,-2
1010a9b4:	1445883a 	add	r2,r2,r17
1010a9b8:	15adc83a 	sub	r22,r2,r22
1010a9bc:	a80b883a 	mov	r5,r21
1010a9c0:	b009883a 	mov	r4,r22
1010a9c4:	0100e880 	call	10100e88 <__umodsi3>
1010a9c8:	1027883a 	mov	r19,r2
1010a9cc:	b009883a 	mov	r4,r22
1010a9d0:	a80b883a 	mov	r5,r21
1010a9d4:	0100e240 	call	10100e24 <__udivsi3>
1010a9d8:	9826943a 	slli	r19,r19,16
1010a9dc:	a0a1383a 	mul	r16,r20,r2
1010a9e0:	b93fffcc 	andi	r4,r23,65535
1010a9e4:	24c8b03a 	or	r4,r4,r19
1010a9e8:	2400062e 	bgeu	r4,r16,1010aa04 <__udivdi3+0x4d0>
1010a9ec:	2449883a 	add	r4,r4,r17
1010a9f0:	10ffffc4 	addi	r3,r2,-1
1010a9f4:	24402336 	bltu	r4,r17,1010aa84 <__udivdi3+0x550>
1010a9f8:	2400222e 	bgeu	r4,r16,1010aa84 <__udivdi3+0x550>
1010a9fc:	10bfff84 	addi	r2,r2,-2
1010aa00:	2449883a 	add	r4,r4,r17
1010aa04:	e038943a 	slli	fp,fp,16
1010aa08:	2421c83a 	sub	r16,r4,r16
1010aa0c:	e086b03a 	or	r3,fp,r2
1010aa10:	003f4306 	br	1010a720 <__alt_data_end+0xfffea720>
1010aa14:	2005883a 	mov	r2,r4
1010aa18:	003f6906 	br	1010a7c0 <__alt_data_end+0xfffea7c0>
1010aa1c:	1805883a 	mov	r2,r3
1010aa20:	003f0f06 	br	1010a660 <__alt_data_end+0xfffea660>
1010aa24:	1806943a 	slli	r3,r3,16
1010aa28:	9d66983a 	sll	r19,r19,r21
1010aa2c:	39ffffcc 	andi	r7,r7,65535
1010aa30:	19c7883a 	add	r3,r3,r7
1010aa34:	98ffc32e 	bgeu	r19,r3,1010a944 <__alt_data_end+0xfffea944>
1010aa38:	10bfffc4 	addi	r2,r2,-1
1010aa3c:	003fc106 	br	1010a944 <__alt_data_end+0xfffea944>
1010aa40:	00800604 	movi	r2,24
1010aa44:	003f1106 	br	1010a68c <__alt_data_end+0xfffea68c>
1010aa48:	00800604 	movi	r2,24
1010aa4c:	003f2706 	br	1010a6ec <__alt_data_end+0xfffea6ec>
1010aa50:	00800604 	movi	r2,24
1010aa54:	003ece06 	br	1010a590 <__alt_data_end+0xfffea590>
1010aa58:	0007883a 	mov	r3,zero
1010aa5c:	00800044 	movi	r2,1
1010aa60:	003f5c06 	br	1010a7d4 <__alt_data_end+0xfffea7d4>
1010aa64:	813fa12e 	bgeu	r16,r4,1010a8ec <__alt_data_end+0xfffea8ec>
1010aa68:	10bfff84 	addi	r2,r2,-2
1010aa6c:	85e1883a 	add	r16,r16,r23
1010aa70:	003f9f06 	br	1010a8f0 <__alt_data_end+0xfffea8f0>
1010aa74:	1c7f8a2e 	bgeu	r3,r17,1010a8a0 <__alt_data_end+0xfffea8a0>
1010aa78:	31bfff84 	addi	r6,r6,-2
1010aa7c:	1dc7883a 	add	r3,r3,r23
1010aa80:	003f8806 	br	1010a8a4 <__alt_data_end+0xfffea8a4>
1010aa84:	1805883a 	mov	r2,r3
1010aa88:	003fde06 	br	1010aa04 <__alt_data_end+0xfffeaa04>
1010aa8c:	1839883a 	mov	fp,r3
1010aa90:	003fc906 	br	1010a9b8 <__alt_data_end+0xfffea9b8>
1010aa94:	b5bfff84 	addi	r22,r22,-2
1010aa98:	2449883a 	add	r4,r4,r17
1010aa9c:	003f3406 	br	1010a770 <__alt_data_end+0xfffea770>
1010aaa0:	b5bfff84 	addi	r22,r22,-2
1010aaa4:	1445883a 	add	r2,r2,r17
1010aaa8:	003edb06 	br	1010a618 <__alt_data_end+0xfffea618>

1010aaac <__umoddi3>:
1010aaac:	defff404 	addi	sp,sp,-48
1010aab0:	df000a15 	stw	fp,40(sp)
1010aab4:	dc400315 	stw	r17,12(sp)
1010aab8:	dc000215 	stw	r16,8(sp)
1010aabc:	dfc00b15 	stw	ra,44(sp)
1010aac0:	ddc00915 	stw	r23,36(sp)
1010aac4:	dd800815 	stw	r22,32(sp)
1010aac8:	dd400715 	stw	r21,28(sp)
1010aacc:	dd000615 	stw	r20,24(sp)
1010aad0:	dcc00515 	stw	r19,20(sp)
1010aad4:	dc800415 	stw	r18,16(sp)
1010aad8:	2021883a 	mov	r16,r4
1010aadc:	2823883a 	mov	r17,r5
1010aae0:	2839883a 	mov	fp,r5
1010aae4:	38003c1e 	bne	r7,zero,1010abd8 <__umoddi3+0x12c>
1010aae8:	3027883a 	mov	r19,r6
1010aaec:	2029883a 	mov	r20,r4
1010aaf0:	2980512e 	bgeu	r5,r6,1010ac38 <__umoddi3+0x18c>
1010aaf4:	00bfffd4 	movui	r2,65535
1010aaf8:	11809a36 	bltu	r2,r6,1010ad64 <__umoddi3+0x2b8>
1010aafc:	01003fc4 	movi	r4,255
1010ab00:	2189803a 	cmpltu	r4,r4,r6
1010ab04:	200890fa 	slli	r4,r4,3
1010ab08:	3104d83a 	srl	r2,r6,r4
1010ab0c:	00c40474 	movhi	r3,4113
1010ab10:	18c10b04 	addi	r3,r3,1068
1010ab14:	1885883a 	add	r2,r3,r2
1010ab18:	10c00003 	ldbu	r3,0(r2)
1010ab1c:	00800804 	movi	r2,32
1010ab20:	1909883a 	add	r4,r3,r4
1010ab24:	1125c83a 	sub	r18,r2,r4
1010ab28:	90000526 	beq	r18,zero,1010ab40 <__umoddi3+0x94>
1010ab2c:	8ca2983a 	sll	r17,r17,r18
1010ab30:	8108d83a 	srl	r4,r16,r4
1010ab34:	34a6983a 	sll	r19,r6,r18
1010ab38:	84a8983a 	sll	r20,r16,r18
1010ab3c:	2478b03a 	or	fp,r4,r17
1010ab40:	982ed43a 	srli	r23,r19,16
1010ab44:	e009883a 	mov	r4,fp
1010ab48:	9dbfffcc 	andi	r22,r19,65535
1010ab4c:	b80b883a 	mov	r5,r23
1010ab50:	0100e880 	call	10100e88 <__umodsi3>
1010ab54:	e009883a 	mov	r4,fp
1010ab58:	b80b883a 	mov	r5,r23
1010ab5c:	102b883a 	mov	r21,r2
1010ab60:	0100e240 	call	10100e24 <__udivsi3>
1010ab64:	a806943a 	slli	r3,r21,16
1010ab68:	a008d43a 	srli	r4,r20,16
1010ab6c:	b085383a 	mul	r2,r22,r2
1010ab70:	20c8b03a 	or	r4,r4,r3
1010ab74:	2080032e 	bgeu	r4,r2,1010ab84 <__umoddi3+0xd8>
1010ab78:	24c9883a 	add	r4,r4,r19
1010ab7c:	24c00136 	bltu	r4,r19,1010ab84 <__umoddi3+0xd8>
1010ab80:	20811036 	bltu	r4,r2,1010afc4 <__umoddi3+0x518>
1010ab84:	20abc83a 	sub	r21,r4,r2
1010ab88:	b80b883a 	mov	r5,r23
1010ab8c:	a809883a 	mov	r4,r21
1010ab90:	0100e880 	call	10100e88 <__umodsi3>
1010ab94:	1023883a 	mov	r17,r2
1010ab98:	b80b883a 	mov	r5,r23
1010ab9c:	a809883a 	mov	r4,r21
1010aba0:	0100e240 	call	10100e24 <__udivsi3>
1010aba4:	8822943a 	slli	r17,r17,16
1010aba8:	b085383a 	mul	r2,r22,r2
1010abac:	a0ffffcc 	andi	r3,r20,65535
1010abb0:	1c46b03a 	or	r3,r3,r17
1010abb4:	1880042e 	bgeu	r3,r2,1010abc8 <__umoddi3+0x11c>
1010abb8:	1cc7883a 	add	r3,r3,r19
1010abbc:	1cc00236 	bltu	r3,r19,1010abc8 <__umoddi3+0x11c>
1010abc0:	1880012e 	bgeu	r3,r2,1010abc8 <__umoddi3+0x11c>
1010abc4:	1cc7883a 	add	r3,r3,r19
1010abc8:	1885c83a 	sub	r2,r3,r2
1010abcc:	1484d83a 	srl	r2,r2,r18
1010abd0:	0007883a 	mov	r3,zero
1010abd4:	00004f06 	br	1010ad14 <__umoddi3+0x268>
1010abd8:	29c04c36 	bltu	r5,r7,1010ad0c <__umoddi3+0x260>
1010abdc:	00bfffd4 	movui	r2,65535
1010abe0:	11c0582e 	bgeu	r2,r7,1010ad44 <__umoddi3+0x298>
1010abe4:	00804034 	movhi	r2,256
1010abe8:	10bfffc4 	addi	r2,r2,-1
1010abec:	11c0e736 	bltu	r2,r7,1010af8c <__umoddi3+0x4e0>
1010abf0:	01000404 	movi	r4,16
1010abf4:	3904d83a 	srl	r2,r7,r4
1010abf8:	00c40474 	movhi	r3,4113
1010abfc:	18c10b04 	addi	r3,r3,1068
1010ac00:	1885883a 	add	r2,r3,r2
1010ac04:	14c00003 	ldbu	r19,0(r2)
1010ac08:	00c00804 	movi	r3,32
1010ac0c:	9927883a 	add	r19,r19,r4
1010ac10:	1ce9c83a 	sub	r20,r3,r19
1010ac14:	a000581e 	bne	r20,zero,1010ad78 <__umoddi3+0x2cc>
1010ac18:	3c400136 	bltu	r7,r17,1010ac20 <__umoddi3+0x174>
1010ac1c:	8180eb36 	bltu	r16,r6,1010afcc <__umoddi3+0x520>
1010ac20:	8185c83a 	sub	r2,r16,r6
1010ac24:	89e3c83a 	sub	r17,r17,r7
1010ac28:	8089803a 	cmpltu	r4,r16,r2
1010ac2c:	8939c83a 	sub	fp,r17,r4
1010ac30:	e007883a 	mov	r3,fp
1010ac34:	00003706 	br	1010ad14 <__umoddi3+0x268>
1010ac38:	3000041e 	bne	r6,zero,1010ac4c <__umoddi3+0x1a0>
1010ac3c:	000b883a 	mov	r5,zero
1010ac40:	01000044 	movi	r4,1
1010ac44:	0100e240 	call	10100e24 <__udivsi3>
1010ac48:	1027883a 	mov	r19,r2
1010ac4c:	00bfffd4 	movui	r2,65535
1010ac50:	14c0402e 	bgeu	r2,r19,1010ad54 <__umoddi3+0x2a8>
1010ac54:	00804034 	movhi	r2,256
1010ac58:	10bfffc4 	addi	r2,r2,-1
1010ac5c:	14c0cd36 	bltu	r2,r19,1010af94 <__umoddi3+0x4e8>
1010ac60:	00800404 	movi	r2,16
1010ac64:	9886d83a 	srl	r3,r19,r2
1010ac68:	01040474 	movhi	r4,4113
1010ac6c:	21010b04 	addi	r4,r4,1068
1010ac70:	20c7883a 	add	r3,r4,r3
1010ac74:	18c00003 	ldbu	r3,0(r3)
1010ac78:	1887883a 	add	r3,r3,r2
1010ac7c:	00800804 	movi	r2,32
1010ac80:	10e5c83a 	sub	r18,r2,r3
1010ac84:	9000901e 	bne	r18,zero,1010aec8 <__umoddi3+0x41c>
1010ac88:	982cd43a 	srli	r22,r19,16
1010ac8c:	8ce3c83a 	sub	r17,r17,r19
1010ac90:	9d7fffcc 	andi	r21,r19,65535
1010ac94:	b00b883a 	mov	r5,r22
1010ac98:	8809883a 	mov	r4,r17
1010ac9c:	0100e880 	call	10100e88 <__umodsi3>
1010aca0:	8809883a 	mov	r4,r17
1010aca4:	b00b883a 	mov	r5,r22
1010aca8:	1021883a 	mov	r16,r2
1010acac:	0100e240 	call	10100e24 <__udivsi3>
1010acb0:	8006943a 	slli	r3,r16,16
1010acb4:	a008d43a 	srli	r4,r20,16
1010acb8:	1545383a 	mul	r2,r2,r21
1010acbc:	20c8b03a 	or	r4,r4,r3
1010acc0:	2080042e 	bgeu	r4,r2,1010acd4 <__umoddi3+0x228>
1010acc4:	24c9883a 	add	r4,r4,r19
1010acc8:	24c00236 	bltu	r4,r19,1010acd4 <__umoddi3+0x228>
1010accc:	2080012e 	bgeu	r4,r2,1010acd4 <__umoddi3+0x228>
1010acd0:	24c9883a 	add	r4,r4,r19
1010acd4:	20a1c83a 	sub	r16,r4,r2
1010acd8:	b00b883a 	mov	r5,r22
1010acdc:	8009883a 	mov	r4,r16
1010ace0:	0100e880 	call	10100e88 <__umodsi3>
1010ace4:	1023883a 	mov	r17,r2
1010ace8:	b00b883a 	mov	r5,r22
1010acec:	8009883a 	mov	r4,r16
1010acf0:	0100e240 	call	10100e24 <__udivsi3>
1010acf4:	8822943a 	slli	r17,r17,16
1010acf8:	1545383a 	mul	r2,r2,r21
1010acfc:	a53fffcc 	andi	r20,r20,65535
1010ad00:	a446b03a 	or	r3,r20,r17
1010ad04:	18bfb02e 	bgeu	r3,r2,1010abc8 <__alt_data_end+0xfffeabc8>
1010ad08:	003fab06 	br	1010abb8 <__alt_data_end+0xfffeabb8>
1010ad0c:	2005883a 	mov	r2,r4
1010ad10:	2807883a 	mov	r3,r5
1010ad14:	dfc00b17 	ldw	ra,44(sp)
1010ad18:	df000a17 	ldw	fp,40(sp)
1010ad1c:	ddc00917 	ldw	r23,36(sp)
1010ad20:	dd800817 	ldw	r22,32(sp)
1010ad24:	dd400717 	ldw	r21,28(sp)
1010ad28:	dd000617 	ldw	r20,24(sp)
1010ad2c:	dcc00517 	ldw	r19,20(sp)
1010ad30:	dc800417 	ldw	r18,16(sp)
1010ad34:	dc400317 	ldw	r17,12(sp)
1010ad38:	dc000217 	ldw	r16,8(sp)
1010ad3c:	dec00c04 	addi	sp,sp,48
1010ad40:	f800283a 	ret
1010ad44:	04c03fc4 	movi	r19,255
1010ad48:	99c9803a 	cmpltu	r4,r19,r7
1010ad4c:	200890fa 	slli	r4,r4,3
1010ad50:	003fa806 	br	1010abf4 <__alt_data_end+0xfffeabf4>
1010ad54:	00803fc4 	movi	r2,255
1010ad58:	14c5803a 	cmpltu	r2,r2,r19
1010ad5c:	100490fa 	slli	r2,r2,3
1010ad60:	003fc006 	br	1010ac64 <__alt_data_end+0xfffeac64>
1010ad64:	00804034 	movhi	r2,256
1010ad68:	10bfffc4 	addi	r2,r2,-1
1010ad6c:	11808b36 	bltu	r2,r6,1010af9c <__umoddi3+0x4f0>
1010ad70:	01000404 	movi	r4,16
1010ad74:	003f6406 	br	1010ab08 <__alt_data_end+0xfffeab08>
1010ad78:	34c4d83a 	srl	r2,r6,r19
1010ad7c:	3d0e983a 	sll	r7,r7,r20
1010ad80:	8cf8d83a 	srl	fp,r17,r19
1010ad84:	8d10983a 	sll	r8,r17,r20
1010ad88:	38aab03a 	or	r21,r7,r2
1010ad8c:	a82cd43a 	srli	r22,r21,16
1010ad90:	84e2d83a 	srl	r17,r16,r19
1010ad94:	e009883a 	mov	r4,fp
1010ad98:	b00b883a 	mov	r5,r22
1010ad9c:	8a22b03a 	or	r17,r17,r8
1010ada0:	3524983a 	sll	r18,r6,r20
1010ada4:	0100e880 	call	10100e88 <__umodsi3>
1010ada8:	e009883a 	mov	r4,fp
1010adac:	b00b883a 	mov	r5,r22
1010adb0:	102f883a 	mov	r23,r2
1010adb4:	0100e240 	call	10100e24 <__udivsi3>
1010adb8:	100d883a 	mov	r6,r2
1010adbc:	b808943a 	slli	r4,r23,16
1010adc0:	aa3fffcc 	andi	r8,r21,65535
1010adc4:	8804d43a 	srli	r2,r17,16
1010adc8:	41af383a 	mul	r23,r8,r6
1010adcc:	8520983a 	sll	r16,r16,r20
1010add0:	1104b03a 	or	r2,r2,r4
1010add4:	15c0042e 	bgeu	r2,r23,1010ade8 <__umoddi3+0x33c>
1010add8:	1545883a 	add	r2,r2,r21
1010addc:	30ffffc4 	addi	r3,r6,-1
1010ade0:	1540742e 	bgeu	r2,r21,1010afb4 <__umoddi3+0x508>
1010ade4:	180d883a 	mov	r6,r3
1010ade8:	15efc83a 	sub	r23,r2,r23
1010adec:	b00b883a 	mov	r5,r22
1010adf0:	b809883a 	mov	r4,r23
1010adf4:	d9800115 	stw	r6,4(sp)
1010adf8:	da000015 	stw	r8,0(sp)
1010adfc:	0100e880 	call	10100e88 <__umodsi3>
1010ae00:	b00b883a 	mov	r5,r22
1010ae04:	b809883a 	mov	r4,r23
1010ae08:	1039883a 	mov	fp,r2
1010ae0c:	0100e240 	call	10100e24 <__udivsi3>
1010ae10:	da000017 	ldw	r8,0(sp)
1010ae14:	e038943a 	slli	fp,fp,16
1010ae18:	100b883a 	mov	r5,r2
1010ae1c:	4089383a 	mul	r4,r8,r2
1010ae20:	8a3fffcc 	andi	r8,r17,65535
1010ae24:	4710b03a 	or	r8,r8,fp
1010ae28:	d9800117 	ldw	r6,4(sp)
1010ae2c:	4100042e 	bgeu	r8,r4,1010ae40 <__umoddi3+0x394>
1010ae30:	4551883a 	add	r8,r8,r21
1010ae34:	10bfffc4 	addi	r2,r2,-1
1010ae38:	45405a2e 	bgeu	r8,r21,1010afa4 <__umoddi3+0x4f8>
1010ae3c:	100b883a 	mov	r5,r2
1010ae40:	300c943a 	slli	r6,r6,16
1010ae44:	91ffffcc 	andi	r7,r18,65535
1010ae48:	9004d43a 	srli	r2,r18,16
1010ae4c:	314cb03a 	or	r6,r6,r5
1010ae50:	317fffcc 	andi	r5,r6,65535
1010ae54:	300cd43a 	srli	r6,r6,16
1010ae58:	29d3383a 	mul	r9,r5,r7
1010ae5c:	288b383a 	mul	r5,r5,r2
1010ae60:	31cf383a 	mul	r7,r6,r7
1010ae64:	4806d43a 	srli	r3,r9,16
1010ae68:	4111c83a 	sub	r8,r8,r4
1010ae6c:	29cb883a 	add	r5,r5,r7
1010ae70:	194b883a 	add	r5,r3,r5
1010ae74:	3085383a 	mul	r2,r6,r2
1010ae78:	29c0022e 	bgeu	r5,r7,1010ae84 <__umoddi3+0x3d8>
1010ae7c:	00c00074 	movhi	r3,1
1010ae80:	10c5883a 	add	r2,r2,r3
1010ae84:	2808d43a 	srli	r4,r5,16
1010ae88:	280a943a 	slli	r5,r5,16
1010ae8c:	4a7fffcc 	andi	r9,r9,65535
1010ae90:	2085883a 	add	r2,r4,r2
1010ae94:	2a4b883a 	add	r5,r5,r9
1010ae98:	40803636 	bltu	r8,r2,1010af74 <__umoddi3+0x4c8>
1010ae9c:	40804d26 	beq	r8,r2,1010afd4 <__umoddi3+0x528>
1010aea0:	4089c83a 	sub	r4,r8,r2
1010aea4:	280f883a 	mov	r7,r5
1010aea8:	81cfc83a 	sub	r7,r16,r7
1010aeac:	81c7803a 	cmpltu	r3,r16,r7
1010aeb0:	20c7c83a 	sub	r3,r4,r3
1010aeb4:	1cc4983a 	sll	r2,r3,r19
1010aeb8:	3d0ed83a 	srl	r7,r7,r20
1010aebc:	1d06d83a 	srl	r3,r3,r20
1010aec0:	11c4b03a 	or	r2,r2,r7
1010aec4:	003f9306 	br	1010ad14 <__alt_data_end+0xfffead14>
1010aec8:	9ca6983a 	sll	r19,r19,r18
1010aecc:	88e8d83a 	srl	r20,r17,r3
1010aed0:	80c4d83a 	srl	r2,r16,r3
1010aed4:	982cd43a 	srli	r22,r19,16
1010aed8:	8ca2983a 	sll	r17,r17,r18
1010aedc:	a009883a 	mov	r4,r20
1010aee0:	b00b883a 	mov	r5,r22
1010aee4:	1478b03a 	or	fp,r2,r17
1010aee8:	0100e880 	call	10100e88 <__umodsi3>
1010aeec:	a009883a 	mov	r4,r20
1010aef0:	b00b883a 	mov	r5,r22
1010aef4:	1023883a 	mov	r17,r2
1010aef8:	0100e240 	call	10100e24 <__udivsi3>
1010aefc:	9d7fffcc 	andi	r21,r19,65535
1010af00:	880a943a 	slli	r5,r17,16
1010af04:	e008d43a 	srli	r4,fp,16
1010af08:	a885383a 	mul	r2,r21,r2
1010af0c:	84a8983a 	sll	r20,r16,r18
1010af10:	2148b03a 	or	r4,r4,r5
1010af14:	2080042e 	bgeu	r4,r2,1010af28 <__umoddi3+0x47c>
1010af18:	24c9883a 	add	r4,r4,r19
1010af1c:	24c00236 	bltu	r4,r19,1010af28 <__umoddi3+0x47c>
1010af20:	2080012e 	bgeu	r4,r2,1010af28 <__umoddi3+0x47c>
1010af24:	24c9883a 	add	r4,r4,r19
1010af28:	20a3c83a 	sub	r17,r4,r2
1010af2c:	b00b883a 	mov	r5,r22
1010af30:	8809883a 	mov	r4,r17
1010af34:	0100e880 	call	10100e88 <__umodsi3>
1010af38:	102f883a 	mov	r23,r2
1010af3c:	8809883a 	mov	r4,r17
1010af40:	b00b883a 	mov	r5,r22
1010af44:	0100e240 	call	10100e24 <__udivsi3>
1010af48:	b82e943a 	slli	r23,r23,16
1010af4c:	a885383a 	mul	r2,r21,r2
1010af50:	e13fffcc 	andi	r4,fp,65535
1010af54:	25c8b03a 	or	r4,r4,r23
1010af58:	2080042e 	bgeu	r4,r2,1010af6c <__umoddi3+0x4c0>
1010af5c:	24c9883a 	add	r4,r4,r19
1010af60:	24c00236 	bltu	r4,r19,1010af6c <__umoddi3+0x4c0>
1010af64:	2080012e 	bgeu	r4,r2,1010af6c <__umoddi3+0x4c0>
1010af68:	24c9883a 	add	r4,r4,r19
1010af6c:	20a3c83a 	sub	r17,r4,r2
1010af70:	003f4806 	br	1010ac94 <__alt_data_end+0xfffeac94>
1010af74:	2c8fc83a 	sub	r7,r5,r18
1010af78:	1545c83a 	sub	r2,r2,r21
1010af7c:	29cb803a 	cmpltu	r5,r5,r7
1010af80:	1145c83a 	sub	r2,r2,r5
1010af84:	4089c83a 	sub	r4,r8,r2
1010af88:	003fc706 	br	1010aea8 <__alt_data_end+0xfffeaea8>
1010af8c:	01000604 	movi	r4,24
1010af90:	003f1806 	br	1010abf4 <__alt_data_end+0xfffeabf4>
1010af94:	00800604 	movi	r2,24
1010af98:	003f3206 	br	1010ac64 <__alt_data_end+0xfffeac64>
1010af9c:	01000604 	movi	r4,24
1010afa0:	003ed906 	br	1010ab08 <__alt_data_end+0xfffeab08>
1010afa4:	413fa52e 	bgeu	r8,r4,1010ae3c <__alt_data_end+0xfffeae3c>
1010afa8:	297fff84 	addi	r5,r5,-2
1010afac:	4551883a 	add	r8,r8,r21
1010afb0:	003fa306 	br	1010ae40 <__alt_data_end+0xfffeae40>
1010afb4:	15ff8b2e 	bgeu	r2,r23,1010ade4 <__alt_data_end+0xfffeade4>
1010afb8:	31bfff84 	addi	r6,r6,-2
1010afbc:	1545883a 	add	r2,r2,r21
1010afc0:	003f8906 	br	1010ade8 <__alt_data_end+0xfffeade8>
1010afc4:	24c9883a 	add	r4,r4,r19
1010afc8:	003eee06 	br	1010ab84 <__alt_data_end+0xfffeab84>
1010afcc:	8005883a 	mov	r2,r16
1010afd0:	003f1706 	br	1010ac30 <__alt_data_end+0xfffeac30>
1010afd4:	817fe736 	bltu	r16,r5,1010af74 <__alt_data_end+0xfffeaf74>
1010afd8:	280f883a 	mov	r7,r5
1010afdc:	0009883a 	mov	r4,zero
1010afe0:	003fb106 	br	1010aea8 <__alt_data_end+0xfffeaea8>

1010afe4 <__adddf3>:
1010afe4:	02c00434 	movhi	r11,16
1010afe8:	5affffc4 	addi	r11,r11,-1
1010afec:	2806d7fa 	srli	r3,r5,31
1010aff0:	2ad4703a 	and	r10,r5,r11
1010aff4:	3ad2703a 	and	r9,r7,r11
1010aff8:	3804d53a 	srli	r2,r7,20
1010affc:	3018d77a 	srli	r12,r6,29
1010b000:	280ad53a 	srli	r5,r5,20
1010b004:	501490fa 	slli	r10,r10,3
1010b008:	2010d77a 	srli	r8,r4,29
1010b00c:	481290fa 	slli	r9,r9,3
1010b010:	380ed7fa 	srli	r7,r7,31
1010b014:	defffb04 	addi	sp,sp,-20
1010b018:	dc800215 	stw	r18,8(sp)
1010b01c:	dc400115 	stw	r17,4(sp)
1010b020:	dc000015 	stw	r16,0(sp)
1010b024:	dfc00415 	stw	ra,16(sp)
1010b028:	dcc00315 	stw	r19,12(sp)
1010b02c:	1c803fcc 	andi	r18,r3,255
1010b030:	2c01ffcc 	andi	r16,r5,2047
1010b034:	5210b03a 	or	r8,r10,r8
1010b038:	202290fa 	slli	r17,r4,3
1010b03c:	1081ffcc 	andi	r2,r2,2047
1010b040:	4b12b03a 	or	r9,r9,r12
1010b044:	300c90fa 	slli	r6,r6,3
1010b048:	91c07526 	beq	r18,r7,1010b220 <__adddf3+0x23c>
1010b04c:	8087c83a 	sub	r3,r16,r2
1010b050:	00c0ab0e 	bge	zero,r3,1010b300 <__adddf3+0x31c>
1010b054:	10002a1e 	bne	r2,zero,1010b100 <__adddf3+0x11c>
1010b058:	4984b03a 	or	r2,r9,r6
1010b05c:	1000961e 	bne	r2,zero,1010b2b8 <__adddf3+0x2d4>
1010b060:	888001cc 	andi	r2,r17,7
1010b064:	10000726 	beq	r2,zero,1010b084 <__adddf3+0xa0>
1010b068:	888003cc 	andi	r2,r17,15
1010b06c:	00c00104 	movi	r3,4
1010b070:	10c00426 	beq	r2,r3,1010b084 <__adddf3+0xa0>
1010b074:	88c7883a 	add	r3,r17,r3
1010b078:	1c63803a 	cmpltu	r17,r3,r17
1010b07c:	4451883a 	add	r8,r8,r17
1010b080:	1823883a 	mov	r17,r3
1010b084:	4080202c 	andhi	r2,r8,128
1010b088:	10005926 	beq	r2,zero,1010b1f0 <__adddf3+0x20c>
1010b08c:	84000044 	addi	r16,r16,1
1010b090:	0081ffc4 	movi	r2,2047
1010b094:	8080ba26 	beq	r16,r2,1010b380 <__adddf3+0x39c>
1010b098:	00bfe034 	movhi	r2,65408
1010b09c:	10bfffc4 	addi	r2,r2,-1
1010b0a0:	4090703a 	and	r8,r8,r2
1010b0a4:	4004977a 	slli	r2,r8,29
1010b0a8:	4010927a 	slli	r8,r8,9
1010b0ac:	8822d0fa 	srli	r17,r17,3
1010b0b0:	8401ffcc 	andi	r16,r16,2047
1010b0b4:	4010d33a 	srli	r8,r8,12
1010b0b8:	9007883a 	mov	r3,r18
1010b0bc:	1444b03a 	or	r2,r2,r17
1010b0c0:	8401ffcc 	andi	r16,r16,2047
1010b0c4:	8020953a 	slli	r16,r16,20
1010b0c8:	18c03fcc 	andi	r3,r3,255
1010b0cc:	01000434 	movhi	r4,16
1010b0d0:	213fffc4 	addi	r4,r4,-1
1010b0d4:	180697fa 	slli	r3,r3,31
1010b0d8:	4110703a 	and	r8,r8,r4
1010b0dc:	4410b03a 	or	r8,r8,r16
1010b0e0:	40c6b03a 	or	r3,r8,r3
1010b0e4:	dfc00417 	ldw	ra,16(sp)
1010b0e8:	dcc00317 	ldw	r19,12(sp)
1010b0ec:	dc800217 	ldw	r18,8(sp)
1010b0f0:	dc400117 	ldw	r17,4(sp)
1010b0f4:	dc000017 	ldw	r16,0(sp)
1010b0f8:	dec00504 	addi	sp,sp,20
1010b0fc:	f800283a 	ret
1010b100:	0081ffc4 	movi	r2,2047
1010b104:	80bfd626 	beq	r16,r2,1010b060 <__alt_data_end+0xfffeb060>
1010b108:	4a402034 	orhi	r9,r9,128
1010b10c:	00800e04 	movi	r2,56
1010b110:	10c09f16 	blt	r2,r3,1010b390 <__adddf3+0x3ac>
1010b114:	008007c4 	movi	r2,31
1010b118:	10c0c216 	blt	r2,r3,1010b424 <__adddf3+0x440>
1010b11c:	00800804 	movi	r2,32
1010b120:	10c5c83a 	sub	r2,r2,r3
1010b124:	488a983a 	sll	r5,r9,r2
1010b128:	30c8d83a 	srl	r4,r6,r3
1010b12c:	3084983a 	sll	r2,r6,r2
1010b130:	48c6d83a 	srl	r3,r9,r3
1010b134:	290cb03a 	or	r6,r5,r4
1010b138:	1004c03a 	cmpne	r2,r2,zero
1010b13c:	308cb03a 	or	r6,r6,r2
1010b140:	898dc83a 	sub	r6,r17,r6
1010b144:	89a3803a 	cmpltu	r17,r17,r6
1010b148:	40d1c83a 	sub	r8,r8,r3
1010b14c:	4451c83a 	sub	r8,r8,r17
1010b150:	3023883a 	mov	r17,r6
1010b154:	4080202c 	andhi	r2,r8,128
1010b158:	10002326 	beq	r2,zero,1010b1e8 <__adddf3+0x204>
1010b15c:	04c02034 	movhi	r19,128
1010b160:	9cffffc4 	addi	r19,r19,-1
1010b164:	44e6703a 	and	r19,r8,r19
1010b168:	98007626 	beq	r19,zero,1010b344 <__adddf3+0x360>
1010b16c:	9809883a 	mov	r4,r19
1010b170:	010d5e80 	call	1010d5e8 <__clzsi2>
1010b174:	10fffe04 	addi	r3,r2,-8
1010b178:	010007c4 	movi	r4,31
1010b17c:	20c07716 	blt	r4,r3,1010b35c <__adddf3+0x378>
1010b180:	00800804 	movi	r2,32
1010b184:	10c5c83a 	sub	r2,r2,r3
1010b188:	8884d83a 	srl	r2,r17,r2
1010b18c:	98d0983a 	sll	r8,r19,r3
1010b190:	88e2983a 	sll	r17,r17,r3
1010b194:	1204b03a 	or	r2,r2,r8
1010b198:	1c007416 	blt	r3,r16,1010b36c <__adddf3+0x388>
1010b19c:	1c21c83a 	sub	r16,r3,r16
1010b1a0:	82000044 	addi	r8,r16,1
1010b1a4:	00c007c4 	movi	r3,31
1010b1a8:	1a009116 	blt	r3,r8,1010b3f0 <__adddf3+0x40c>
1010b1ac:	00c00804 	movi	r3,32
1010b1b0:	1a07c83a 	sub	r3,r3,r8
1010b1b4:	8a08d83a 	srl	r4,r17,r8
1010b1b8:	88e2983a 	sll	r17,r17,r3
1010b1bc:	10c6983a 	sll	r3,r2,r3
1010b1c0:	1210d83a 	srl	r8,r2,r8
1010b1c4:	8804c03a 	cmpne	r2,r17,zero
1010b1c8:	1906b03a 	or	r3,r3,r4
1010b1cc:	18a2b03a 	or	r17,r3,r2
1010b1d0:	0021883a 	mov	r16,zero
1010b1d4:	003fa206 	br	1010b060 <__alt_data_end+0xfffeb060>
1010b1d8:	1890b03a 	or	r8,r3,r2
1010b1dc:	40017d26 	beq	r8,zero,1010b7d4 <__adddf3+0x7f0>
1010b1e0:	1011883a 	mov	r8,r2
1010b1e4:	1823883a 	mov	r17,r3
1010b1e8:	888001cc 	andi	r2,r17,7
1010b1ec:	103f9e1e 	bne	r2,zero,1010b068 <__alt_data_end+0xfffeb068>
1010b1f0:	4004977a 	slli	r2,r8,29
1010b1f4:	8822d0fa 	srli	r17,r17,3
1010b1f8:	4010d0fa 	srli	r8,r8,3
1010b1fc:	9007883a 	mov	r3,r18
1010b200:	1444b03a 	or	r2,r2,r17
1010b204:	0101ffc4 	movi	r4,2047
1010b208:	81002426 	beq	r16,r4,1010b29c <__adddf3+0x2b8>
1010b20c:	8120703a 	and	r16,r16,r4
1010b210:	01000434 	movhi	r4,16
1010b214:	213fffc4 	addi	r4,r4,-1
1010b218:	4110703a 	and	r8,r8,r4
1010b21c:	003fa806 	br	1010b0c0 <__alt_data_end+0xfffeb0c0>
1010b220:	8089c83a 	sub	r4,r16,r2
1010b224:	01005e0e 	bge	zero,r4,1010b3a0 <__adddf3+0x3bc>
1010b228:	10002b26 	beq	r2,zero,1010b2d8 <__adddf3+0x2f4>
1010b22c:	0081ffc4 	movi	r2,2047
1010b230:	80bf8b26 	beq	r16,r2,1010b060 <__alt_data_end+0xfffeb060>
1010b234:	4a402034 	orhi	r9,r9,128
1010b238:	00800e04 	movi	r2,56
1010b23c:	1100a40e 	bge	r2,r4,1010b4d0 <__adddf3+0x4ec>
1010b240:	498cb03a 	or	r6,r9,r6
1010b244:	300ac03a 	cmpne	r5,r6,zero
1010b248:	0013883a 	mov	r9,zero
1010b24c:	2c4b883a 	add	r5,r5,r17
1010b250:	2c63803a 	cmpltu	r17,r5,r17
1010b254:	4a11883a 	add	r8,r9,r8
1010b258:	8a11883a 	add	r8,r17,r8
1010b25c:	2823883a 	mov	r17,r5
1010b260:	4080202c 	andhi	r2,r8,128
1010b264:	103fe026 	beq	r2,zero,1010b1e8 <__alt_data_end+0xfffeb1e8>
1010b268:	84000044 	addi	r16,r16,1
1010b26c:	0081ffc4 	movi	r2,2047
1010b270:	8080d226 	beq	r16,r2,1010b5bc <__adddf3+0x5d8>
1010b274:	00bfe034 	movhi	r2,65408
1010b278:	10bfffc4 	addi	r2,r2,-1
1010b27c:	4090703a 	and	r8,r8,r2
1010b280:	880ad07a 	srli	r5,r17,1
1010b284:	400897fa 	slli	r4,r8,31
1010b288:	88c0004c 	andi	r3,r17,1
1010b28c:	28e2b03a 	or	r17,r5,r3
1010b290:	4010d07a 	srli	r8,r8,1
1010b294:	2462b03a 	or	r17,r4,r17
1010b298:	003f7106 	br	1010b060 <__alt_data_end+0xfffeb060>
1010b29c:	4088b03a 	or	r4,r8,r2
1010b2a0:	20014526 	beq	r4,zero,1010b7b8 <__adddf3+0x7d4>
1010b2a4:	01000434 	movhi	r4,16
1010b2a8:	42000234 	orhi	r8,r8,8
1010b2ac:	213fffc4 	addi	r4,r4,-1
1010b2b0:	4110703a 	and	r8,r8,r4
1010b2b4:	003f8206 	br	1010b0c0 <__alt_data_end+0xfffeb0c0>
1010b2b8:	18ffffc4 	addi	r3,r3,-1
1010b2bc:	1800491e 	bne	r3,zero,1010b3e4 <__adddf3+0x400>
1010b2c0:	898bc83a 	sub	r5,r17,r6
1010b2c4:	8963803a 	cmpltu	r17,r17,r5
1010b2c8:	4251c83a 	sub	r8,r8,r9
1010b2cc:	4451c83a 	sub	r8,r8,r17
1010b2d0:	2823883a 	mov	r17,r5
1010b2d4:	003f9f06 	br	1010b154 <__alt_data_end+0xfffeb154>
1010b2d8:	4984b03a 	or	r2,r9,r6
1010b2dc:	103f6026 	beq	r2,zero,1010b060 <__alt_data_end+0xfffeb060>
1010b2e0:	213fffc4 	addi	r4,r4,-1
1010b2e4:	2000931e 	bne	r4,zero,1010b534 <__adddf3+0x550>
1010b2e8:	898d883a 	add	r6,r17,r6
1010b2ec:	3463803a 	cmpltu	r17,r6,r17
1010b2f0:	4251883a 	add	r8,r8,r9
1010b2f4:	8a11883a 	add	r8,r17,r8
1010b2f8:	3023883a 	mov	r17,r6
1010b2fc:	003fd806 	br	1010b260 <__alt_data_end+0xfffeb260>
1010b300:	1800541e 	bne	r3,zero,1010b454 <__adddf3+0x470>
1010b304:	80800044 	addi	r2,r16,1
1010b308:	1081ffcc 	andi	r2,r2,2047
1010b30c:	00c00044 	movi	r3,1
1010b310:	1880a00e 	bge	r3,r2,1010b594 <__adddf3+0x5b0>
1010b314:	8989c83a 	sub	r4,r17,r6
1010b318:	8905803a 	cmpltu	r2,r17,r4
1010b31c:	4267c83a 	sub	r19,r8,r9
1010b320:	98a7c83a 	sub	r19,r19,r2
1010b324:	9880202c 	andhi	r2,r19,128
1010b328:	10006326 	beq	r2,zero,1010b4b8 <__adddf3+0x4d4>
1010b32c:	3463c83a 	sub	r17,r6,r17
1010b330:	4a07c83a 	sub	r3,r9,r8
1010b334:	344d803a 	cmpltu	r6,r6,r17
1010b338:	19a7c83a 	sub	r19,r3,r6
1010b33c:	3825883a 	mov	r18,r7
1010b340:	983f8a1e 	bne	r19,zero,1010b16c <__alt_data_end+0xfffeb16c>
1010b344:	8809883a 	mov	r4,r17
1010b348:	010d5e80 	call	1010d5e8 <__clzsi2>
1010b34c:	10800804 	addi	r2,r2,32
1010b350:	10fffe04 	addi	r3,r2,-8
1010b354:	010007c4 	movi	r4,31
1010b358:	20ff890e 	bge	r4,r3,1010b180 <__alt_data_end+0xfffeb180>
1010b35c:	10bff604 	addi	r2,r2,-40
1010b360:	8884983a 	sll	r2,r17,r2
1010b364:	0023883a 	mov	r17,zero
1010b368:	1c3f8c0e 	bge	r3,r16,1010b19c <__alt_data_end+0xfffeb19c>
1010b36c:	023fe034 	movhi	r8,65408
1010b370:	423fffc4 	addi	r8,r8,-1
1010b374:	80e1c83a 	sub	r16,r16,r3
1010b378:	1210703a 	and	r8,r2,r8
1010b37c:	003f3806 	br	1010b060 <__alt_data_end+0xfffeb060>
1010b380:	9007883a 	mov	r3,r18
1010b384:	0011883a 	mov	r8,zero
1010b388:	0005883a 	mov	r2,zero
1010b38c:	003f4c06 	br	1010b0c0 <__alt_data_end+0xfffeb0c0>
1010b390:	498cb03a 	or	r6,r9,r6
1010b394:	300cc03a 	cmpne	r6,r6,zero
1010b398:	0007883a 	mov	r3,zero
1010b39c:	003f6806 	br	1010b140 <__alt_data_end+0xfffeb140>
1010b3a0:	20009c1e 	bne	r4,zero,1010b614 <__adddf3+0x630>
1010b3a4:	80800044 	addi	r2,r16,1
1010b3a8:	1141ffcc 	andi	r5,r2,2047
1010b3ac:	01000044 	movi	r4,1
1010b3b0:	2140670e 	bge	r4,r5,1010b550 <__adddf3+0x56c>
1010b3b4:	0101ffc4 	movi	r4,2047
1010b3b8:	11007f26 	beq	r2,r4,1010b5b8 <__adddf3+0x5d4>
1010b3bc:	898d883a 	add	r6,r17,r6
1010b3c0:	4247883a 	add	r3,r8,r9
1010b3c4:	3451803a 	cmpltu	r8,r6,r17
1010b3c8:	40d1883a 	add	r8,r8,r3
1010b3cc:	402297fa 	slli	r17,r8,31
1010b3d0:	300cd07a 	srli	r6,r6,1
1010b3d4:	4010d07a 	srli	r8,r8,1
1010b3d8:	1021883a 	mov	r16,r2
1010b3dc:	89a2b03a 	or	r17,r17,r6
1010b3e0:	003f1f06 	br	1010b060 <__alt_data_end+0xfffeb060>
1010b3e4:	0081ffc4 	movi	r2,2047
1010b3e8:	80bf481e 	bne	r16,r2,1010b10c <__alt_data_end+0xfffeb10c>
1010b3ec:	003f1c06 	br	1010b060 <__alt_data_end+0xfffeb060>
1010b3f0:	843ff844 	addi	r16,r16,-31
1010b3f4:	01000804 	movi	r4,32
1010b3f8:	1406d83a 	srl	r3,r2,r16
1010b3fc:	41005026 	beq	r8,r4,1010b540 <__adddf3+0x55c>
1010b400:	01001004 	movi	r4,64
1010b404:	2211c83a 	sub	r8,r4,r8
1010b408:	1204983a 	sll	r2,r2,r8
1010b40c:	88a2b03a 	or	r17,r17,r2
1010b410:	8822c03a 	cmpne	r17,r17,zero
1010b414:	1c62b03a 	or	r17,r3,r17
1010b418:	0011883a 	mov	r8,zero
1010b41c:	0021883a 	mov	r16,zero
1010b420:	003f7106 	br	1010b1e8 <__alt_data_end+0xfffeb1e8>
1010b424:	193ff804 	addi	r4,r3,-32
1010b428:	00800804 	movi	r2,32
1010b42c:	4908d83a 	srl	r4,r9,r4
1010b430:	18804526 	beq	r3,r2,1010b548 <__adddf3+0x564>
1010b434:	00801004 	movi	r2,64
1010b438:	10c5c83a 	sub	r2,r2,r3
1010b43c:	4886983a 	sll	r3,r9,r2
1010b440:	198cb03a 	or	r6,r3,r6
1010b444:	300cc03a 	cmpne	r6,r6,zero
1010b448:	218cb03a 	or	r6,r4,r6
1010b44c:	0007883a 	mov	r3,zero
1010b450:	003f3b06 	br	1010b140 <__alt_data_end+0xfffeb140>
1010b454:	80002a26 	beq	r16,zero,1010b500 <__adddf3+0x51c>
1010b458:	0101ffc4 	movi	r4,2047
1010b45c:	11006826 	beq	r2,r4,1010b600 <__adddf3+0x61c>
1010b460:	00c7c83a 	sub	r3,zero,r3
1010b464:	42002034 	orhi	r8,r8,128
1010b468:	01000e04 	movi	r4,56
1010b46c:	20c07c16 	blt	r4,r3,1010b660 <__adddf3+0x67c>
1010b470:	010007c4 	movi	r4,31
1010b474:	20c0da16 	blt	r4,r3,1010b7e0 <__adddf3+0x7fc>
1010b478:	01000804 	movi	r4,32
1010b47c:	20c9c83a 	sub	r4,r4,r3
1010b480:	4114983a 	sll	r10,r8,r4
1010b484:	88cad83a 	srl	r5,r17,r3
1010b488:	8908983a 	sll	r4,r17,r4
1010b48c:	40c6d83a 	srl	r3,r8,r3
1010b490:	5162b03a 	or	r17,r10,r5
1010b494:	2008c03a 	cmpne	r4,r4,zero
1010b498:	8922b03a 	or	r17,r17,r4
1010b49c:	3463c83a 	sub	r17,r6,r17
1010b4a0:	48c7c83a 	sub	r3,r9,r3
1010b4a4:	344d803a 	cmpltu	r6,r6,r17
1010b4a8:	1991c83a 	sub	r8,r3,r6
1010b4ac:	1021883a 	mov	r16,r2
1010b4b0:	3825883a 	mov	r18,r7
1010b4b4:	003f2706 	br	1010b154 <__alt_data_end+0xfffeb154>
1010b4b8:	24d0b03a 	or	r8,r4,r19
1010b4bc:	40001b1e 	bne	r8,zero,1010b52c <__adddf3+0x548>
1010b4c0:	0005883a 	mov	r2,zero
1010b4c4:	0007883a 	mov	r3,zero
1010b4c8:	0021883a 	mov	r16,zero
1010b4cc:	003f4d06 	br	1010b204 <__alt_data_end+0xfffeb204>
1010b4d0:	008007c4 	movi	r2,31
1010b4d4:	11003c16 	blt	r2,r4,1010b5c8 <__adddf3+0x5e4>
1010b4d8:	00800804 	movi	r2,32
1010b4dc:	1105c83a 	sub	r2,r2,r4
1010b4e0:	488e983a 	sll	r7,r9,r2
1010b4e4:	310ad83a 	srl	r5,r6,r4
1010b4e8:	3084983a 	sll	r2,r6,r2
1010b4ec:	4912d83a 	srl	r9,r9,r4
1010b4f0:	394ab03a 	or	r5,r7,r5
1010b4f4:	1004c03a 	cmpne	r2,r2,zero
1010b4f8:	288ab03a 	or	r5,r5,r2
1010b4fc:	003f5306 	br	1010b24c <__alt_data_end+0xfffeb24c>
1010b500:	4448b03a 	or	r4,r8,r17
1010b504:	20003e26 	beq	r4,zero,1010b600 <__adddf3+0x61c>
1010b508:	00c6303a 	nor	r3,zero,r3
1010b50c:	18003a1e 	bne	r3,zero,1010b5f8 <__adddf3+0x614>
1010b510:	3463c83a 	sub	r17,r6,r17
1010b514:	4a07c83a 	sub	r3,r9,r8
1010b518:	344d803a 	cmpltu	r6,r6,r17
1010b51c:	1991c83a 	sub	r8,r3,r6
1010b520:	1021883a 	mov	r16,r2
1010b524:	3825883a 	mov	r18,r7
1010b528:	003f0a06 	br	1010b154 <__alt_data_end+0xfffeb154>
1010b52c:	2023883a 	mov	r17,r4
1010b530:	003f0d06 	br	1010b168 <__alt_data_end+0xfffeb168>
1010b534:	0081ffc4 	movi	r2,2047
1010b538:	80bf3f1e 	bne	r16,r2,1010b238 <__alt_data_end+0xfffeb238>
1010b53c:	003ec806 	br	1010b060 <__alt_data_end+0xfffeb060>
1010b540:	0005883a 	mov	r2,zero
1010b544:	003fb106 	br	1010b40c <__alt_data_end+0xfffeb40c>
1010b548:	0007883a 	mov	r3,zero
1010b54c:	003fbc06 	br	1010b440 <__alt_data_end+0xfffeb440>
1010b550:	4444b03a 	or	r2,r8,r17
1010b554:	8000871e 	bne	r16,zero,1010b774 <__adddf3+0x790>
1010b558:	1000ba26 	beq	r2,zero,1010b844 <__adddf3+0x860>
1010b55c:	4984b03a 	or	r2,r9,r6
1010b560:	103ebf26 	beq	r2,zero,1010b060 <__alt_data_end+0xfffeb060>
1010b564:	8985883a 	add	r2,r17,r6
1010b568:	4247883a 	add	r3,r8,r9
1010b56c:	1451803a 	cmpltu	r8,r2,r17
1010b570:	40d1883a 	add	r8,r8,r3
1010b574:	40c0202c 	andhi	r3,r8,128
1010b578:	1023883a 	mov	r17,r2
1010b57c:	183f1a26 	beq	r3,zero,1010b1e8 <__alt_data_end+0xfffeb1e8>
1010b580:	00bfe034 	movhi	r2,65408
1010b584:	10bfffc4 	addi	r2,r2,-1
1010b588:	2021883a 	mov	r16,r4
1010b58c:	4090703a 	and	r8,r8,r2
1010b590:	003eb306 	br	1010b060 <__alt_data_end+0xfffeb060>
1010b594:	4444b03a 	or	r2,r8,r17
1010b598:	8000291e 	bne	r16,zero,1010b640 <__adddf3+0x65c>
1010b59c:	10004b1e 	bne	r2,zero,1010b6cc <__adddf3+0x6e8>
1010b5a0:	4990b03a 	or	r8,r9,r6
1010b5a4:	40008b26 	beq	r8,zero,1010b7d4 <__adddf3+0x7f0>
1010b5a8:	4811883a 	mov	r8,r9
1010b5ac:	3023883a 	mov	r17,r6
1010b5b0:	3825883a 	mov	r18,r7
1010b5b4:	003eaa06 	br	1010b060 <__alt_data_end+0xfffeb060>
1010b5b8:	1021883a 	mov	r16,r2
1010b5bc:	0011883a 	mov	r8,zero
1010b5c0:	0005883a 	mov	r2,zero
1010b5c4:	003f0f06 	br	1010b204 <__alt_data_end+0xfffeb204>
1010b5c8:	217ff804 	addi	r5,r4,-32
1010b5cc:	00800804 	movi	r2,32
1010b5d0:	494ad83a 	srl	r5,r9,r5
1010b5d4:	20807d26 	beq	r4,r2,1010b7cc <__adddf3+0x7e8>
1010b5d8:	00801004 	movi	r2,64
1010b5dc:	1109c83a 	sub	r4,r2,r4
1010b5e0:	4912983a 	sll	r9,r9,r4
1010b5e4:	498cb03a 	or	r6,r9,r6
1010b5e8:	300cc03a 	cmpne	r6,r6,zero
1010b5ec:	298ab03a 	or	r5,r5,r6
1010b5f0:	0013883a 	mov	r9,zero
1010b5f4:	003f1506 	br	1010b24c <__alt_data_end+0xfffeb24c>
1010b5f8:	0101ffc4 	movi	r4,2047
1010b5fc:	113f9a1e 	bne	r2,r4,1010b468 <__alt_data_end+0xfffeb468>
1010b600:	4811883a 	mov	r8,r9
1010b604:	3023883a 	mov	r17,r6
1010b608:	1021883a 	mov	r16,r2
1010b60c:	3825883a 	mov	r18,r7
1010b610:	003e9306 	br	1010b060 <__alt_data_end+0xfffeb060>
1010b614:	8000161e 	bne	r16,zero,1010b670 <__adddf3+0x68c>
1010b618:	444ab03a 	or	r5,r8,r17
1010b61c:	28005126 	beq	r5,zero,1010b764 <__adddf3+0x780>
1010b620:	0108303a 	nor	r4,zero,r4
1010b624:	20004d1e 	bne	r4,zero,1010b75c <__adddf3+0x778>
1010b628:	89a3883a 	add	r17,r17,r6
1010b62c:	4253883a 	add	r9,r8,r9
1010b630:	898d803a 	cmpltu	r6,r17,r6
1010b634:	3251883a 	add	r8,r6,r9
1010b638:	1021883a 	mov	r16,r2
1010b63c:	003f0806 	br	1010b260 <__alt_data_end+0xfffeb260>
1010b640:	1000301e 	bne	r2,zero,1010b704 <__adddf3+0x720>
1010b644:	4984b03a 	or	r2,r9,r6
1010b648:	10007126 	beq	r2,zero,1010b810 <__adddf3+0x82c>
1010b64c:	4811883a 	mov	r8,r9
1010b650:	3023883a 	mov	r17,r6
1010b654:	3825883a 	mov	r18,r7
1010b658:	0401ffc4 	movi	r16,2047
1010b65c:	003e8006 	br	1010b060 <__alt_data_end+0xfffeb060>
1010b660:	4462b03a 	or	r17,r8,r17
1010b664:	8822c03a 	cmpne	r17,r17,zero
1010b668:	0007883a 	mov	r3,zero
1010b66c:	003f8b06 	br	1010b49c <__alt_data_end+0xfffeb49c>
1010b670:	0141ffc4 	movi	r5,2047
1010b674:	11403b26 	beq	r2,r5,1010b764 <__adddf3+0x780>
1010b678:	0109c83a 	sub	r4,zero,r4
1010b67c:	42002034 	orhi	r8,r8,128
1010b680:	01400e04 	movi	r5,56
1010b684:	29006716 	blt	r5,r4,1010b824 <__adddf3+0x840>
1010b688:	014007c4 	movi	r5,31
1010b68c:	29007016 	blt	r5,r4,1010b850 <__adddf3+0x86c>
1010b690:	01400804 	movi	r5,32
1010b694:	290bc83a 	sub	r5,r5,r4
1010b698:	4154983a 	sll	r10,r8,r5
1010b69c:	890ed83a 	srl	r7,r17,r4
1010b6a0:	894a983a 	sll	r5,r17,r5
1010b6a4:	4108d83a 	srl	r4,r8,r4
1010b6a8:	51e2b03a 	or	r17,r10,r7
1010b6ac:	280ac03a 	cmpne	r5,r5,zero
1010b6b0:	8962b03a 	or	r17,r17,r5
1010b6b4:	89a3883a 	add	r17,r17,r6
1010b6b8:	2253883a 	add	r9,r4,r9
1010b6bc:	898d803a 	cmpltu	r6,r17,r6
1010b6c0:	3251883a 	add	r8,r6,r9
1010b6c4:	1021883a 	mov	r16,r2
1010b6c8:	003ee506 	br	1010b260 <__alt_data_end+0xfffeb260>
1010b6cc:	4984b03a 	or	r2,r9,r6
1010b6d0:	103e6326 	beq	r2,zero,1010b060 <__alt_data_end+0xfffeb060>
1010b6d4:	8987c83a 	sub	r3,r17,r6
1010b6d8:	88c9803a 	cmpltu	r4,r17,r3
1010b6dc:	4245c83a 	sub	r2,r8,r9
1010b6e0:	1105c83a 	sub	r2,r2,r4
1010b6e4:	1100202c 	andhi	r4,r2,128
1010b6e8:	203ebb26 	beq	r4,zero,1010b1d8 <__alt_data_end+0xfffeb1d8>
1010b6ec:	3463c83a 	sub	r17,r6,r17
1010b6f0:	4a07c83a 	sub	r3,r9,r8
1010b6f4:	344d803a 	cmpltu	r6,r6,r17
1010b6f8:	1991c83a 	sub	r8,r3,r6
1010b6fc:	3825883a 	mov	r18,r7
1010b700:	003e5706 	br	1010b060 <__alt_data_end+0xfffeb060>
1010b704:	4984b03a 	or	r2,r9,r6
1010b708:	10002e26 	beq	r2,zero,1010b7c4 <__adddf3+0x7e0>
1010b70c:	4004d0fa 	srli	r2,r8,3
1010b710:	8822d0fa 	srli	r17,r17,3
1010b714:	4010977a 	slli	r8,r8,29
1010b718:	10c0022c 	andhi	r3,r2,8
1010b71c:	4462b03a 	or	r17,r8,r17
1010b720:	18000826 	beq	r3,zero,1010b744 <__adddf3+0x760>
1010b724:	4808d0fa 	srli	r4,r9,3
1010b728:	20c0022c 	andhi	r3,r4,8
1010b72c:	1800051e 	bne	r3,zero,1010b744 <__adddf3+0x760>
1010b730:	300cd0fa 	srli	r6,r6,3
1010b734:	4806977a 	slli	r3,r9,29
1010b738:	2005883a 	mov	r2,r4
1010b73c:	3825883a 	mov	r18,r7
1010b740:	19a2b03a 	or	r17,r3,r6
1010b744:	8810d77a 	srli	r8,r17,29
1010b748:	100490fa 	slli	r2,r2,3
1010b74c:	882290fa 	slli	r17,r17,3
1010b750:	0401ffc4 	movi	r16,2047
1010b754:	4090b03a 	or	r8,r8,r2
1010b758:	003e4106 	br	1010b060 <__alt_data_end+0xfffeb060>
1010b75c:	0141ffc4 	movi	r5,2047
1010b760:	117fc71e 	bne	r2,r5,1010b680 <__alt_data_end+0xfffeb680>
1010b764:	4811883a 	mov	r8,r9
1010b768:	3023883a 	mov	r17,r6
1010b76c:	1021883a 	mov	r16,r2
1010b770:	003e3b06 	br	1010b060 <__alt_data_end+0xfffeb060>
1010b774:	10002f26 	beq	r2,zero,1010b834 <__adddf3+0x850>
1010b778:	4984b03a 	or	r2,r9,r6
1010b77c:	10001126 	beq	r2,zero,1010b7c4 <__adddf3+0x7e0>
1010b780:	4004d0fa 	srli	r2,r8,3
1010b784:	8822d0fa 	srli	r17,r17,3
1010b788:	4010977a 	slli	r8,r8,29
1010b78c:	10c0022c 	andhi	r3,r2,8
1010b790:	4462b03a 	or	r17,r8,r17
1010b794:	183feb26 	beq	r3,zero,1010b744 <__alt_data_end+0xfffeb744>
1010b798:	4808d0fa 	srli	r4,r9,3
1010b79c:	20c0022c 	andhi	r3,r4,8
1010b7a0:	183fe81e 	bne	r3,zero,1010b744 <__alt_data_end+0xfffeb744>
1010b7a4:	300cd0fa 	srli	r6,r6,3
1010b7a8:	4806977a 	slli	r3,r9,29
1010b7ac:	2005883a 	mov	r2,r4
1010b7b0:	19a2b03a 	or	r17,r3,r6
1010b7b4:	003fe306 	br	1010b744 <__alt_data_end+0xfffeb744>
1010b7b8:	0011883a 	mov	r8,zero
1010b7bc:	0005883a 	mov	r2,zero
1010b7c0:	003e3f06 	br	1010b0c0 <__alt_data_end+0xfffeb0c0>
1010b7c4:	0401ffc4 	movi	r16,2047
1010b7c8:	003e2506 	br	1010b060 <__alt_data_end+0xfffeb060>
1010b7cc:	0013883a 	mov	r9,zero
1010b7d0:	003f8406 	br	1010b5e4 <__alt_data_end+0xfffeb5e4>
1010b7d4:	0005883a 	mov	r2,zero
1010b7d8:	0007883a 	mov	r3,zero
1010b7dc:	003e8906 	br	1010b204 <__alt_data_end+0xfffeb204>
1010b7e0:	197ff804 	addi	r5,r3,-32
1010b7e4:	01000804 	movi	r4,32
1010b7e8:	414ad83a 	srl	r5,r8,r5
1010b7ec:	19002426 	beq	r3,r4,1010b880 <__adddf3+0x89c>
1010b7f0:	01001004 	movi	r4,64
1010b7f4:	20c7c83a 	sub	r3,r4,r3
1010b7f8:	40c6983a 	sll	r3,r8,r3
1010b7fc:	1c46b03a 	or	r3,r3,r17
1010b800:	1806c03a 	cmpne	r3,r3,zero
1010b804:	28e2b03a 	or	r17,r5,r3
1010b808:	0007883a 	mov	r3,zero
1010b80c:	003f2306 	br	1010b49c <__alt_data_end+0xfffeb49c>
1010b810:	0007883a 	mov	r3,zero
1010b814:	5811883a 	mov	r8,r11
1010b818:	00bfffc4 	movi	r2,-1
1010b81c:	0401ffc4 	movi	r16,2047
1010b820:	003e7806 	br	1010b204 <__alt_data_end+0xfffeb204>
1010b824:	4462b03a 	or	r17,r8,r17
1010b828:	8822c03a 	cmpne	r17,r17,zero
1010b82c:	0009883a 	mov	r4,zero
1010b830:	003fa006 	br	1010b6b4 <__alt_data_end+0xfffeb6b4>
1010b834:	4811883a 	mov	r8,r9
1010b838:	3023883a 	mov	r17,r6
1010b83c:	0401ffc4 	movi	r16,2047
1010b840:	003e0706 	br	1010b060 <__alt_data_end+0xfffeb060>
1010b844:	4811883a 	mov	r8,r9
1010b848:	3023883a 	mov	r17,r6
1010b84c:	003e0406 	br	1010b060 <__alt_data_end+0xfffeb060>
1010b850:	21fff804 	addi	r7,r4,-32
1010b854:	01400804 	movi	r5,32
1010b858:	41ced83a 	srl	r7,r8,r7
1010b85c:	21400a26 	beq	r4,r5,1010b888 <__adddf3+0x8a4>
1010b860:	01401004 	movi	r5,64
1010b864:	2909c83a 	sub	r4,r5,r4
1010b868:	4108983a 	sll	r4,r8,r4
1010b86c:	2448b03a 	or	r4,r4,r17
1010b870:	2008c03a 	cmpne	r4,r4,zero
1010b874:	3922b03a 	or	r17,r7,r4
1010b878:	0009883a 	mov	r4,zero
1010b87c:	003f8d06 	br	1010b6b4 <__alt_data_end+0xfffeb6b4>
1010b880:	0007883a 	mov	r3,zero
1010b884:	003fdd06 	br	1010b7fc <__alt_data_end+0xfffeb7fc>
1010b888:	0009883a 	mov	r4,zero
1010b88c:	003ff706 	br	1010b86c <__alt_data_end+0xfffeb86c>

1010b890 <__divdf3>:
1010b890:	defff204 	addi	sp,sp,-56
1010b894:	dd400915 	stw	r21,36(sp)
1010b898:	282ad53a 	srli	r21,r5,20
1010b89c:	dd000815 	stw	r20,32(sp)
1010b8a0:	2828d7fa 	srli	r20,r5,31
1010b8a4:	dc000415 	stw	r16,16(sp)
1010b8a8:	04000434 	movhi	r16,16
1010b8ac:	df000c15 	stw	fp,48(sp)
1010b8b0:	843fffc4 	addi	r16,r16,-1
1010b8b4:	dfc00d15 	stw	ra,52(sp)
1010b8b8:	ddc00b15 	stw	r23,44(sp)
1010b8bc:	dd800a15 	stw	r22,40(sp)
1010b8c0:	dcc00715 	stw	r19,28(sp)
1010b8c4:	dc800615 	stw	r18,24(sp)
1010b8c8:	dc400515 	stw	r17,20(sp)
1010b8cc:	ad41ffcc 	andi	r21,r21,2047
1010b8d0:	2c20703a 	and	r16,r5,r16
1010b8d4:	a7003fcc 	andi	fp,r20,255
1010b8d8:	a8006126 	beq	r21,zero,1010ba60 <__divdf3+0x1d0>
1010b8dc:	0081ffc4 	movi	r2,2047
1010b8e0:	2025883a 	mov	r18,r4
1010b8e4:	a8803726 	beq	r21,r2,1010b9c4 <__divdf3+0x134>
1010b8e8:	80800434 	orhi	r2,r16,16
1010b8ec:	100490fa 	slli	r2,r2,3
1010b8f0:	2020d77a 	srli	r16,r4,29
1010b8f4:	202490fa 	slli	r18,r4,3
1010b8f8:	ad7f0044 	addi	r21,r21,-1023
1010b8fc:	80a0b03a 	or	r16,r16,r2
1010b900:	0027883a 	mov	r19,zero
1010b904:	0013883a 	mov	r9,zero
1010b908:	3804d53a 	srli	r2,r7,20
1010b90c:	382cd7fa 	srli	r22,r7,31
1010b910:	04400434 	movhi	r17,16
1010b914:	8c7fffc4 	addi	r17,r17,-1
1010b918:	1081ffcc 	andi	r2,r2,2047
1010b91c:	3011883a 	mov	r8,r6
1010b920:	3c62703a 	and	r17,r7,r17
1010b924:	b5c03fcc 	andi	r23,r22,255
1010b928:	10006c26 	beq	r2,zero,1010badc <__divdf3+0x24c>
1010b92c:	00c1ffc4 	movi	r3,2047
1010b930:	10c06426 	beq	r2,r3,1010bac4 <__divdf3+0x234>
1010b934:	88c00434 	orhi	r3,r17,16
1010b938:	180690fa 	slli	r3,r3,3
1010b93c:	3022d77a 	srli	r17,r6,29
1010b940:	301090fa 	slli	r8,r6,3
1010b944:	10bf0044 	addi	r2,r2,-1023
1010b948:	88e2b03a 	or	r17,r17,r3
1010b94c:	000f883a 	mov	r7,zero
1010b950:	a58cf03a 	xor	r6,r20,r22
1010b954:	3cc8b03a 	or	r4,r7,r19
1010b958:	a8abc83a 	sub	r21,r21,r2
1010b95c:	008003c4 	movi	r2,15
1010b960:	3007883a 	mov	r3,r6
1010b964:	34c03fcc 	andi	r19,r6,255
1010b968:	11009036 	bltu	r2,r4,1010bbac <__divdf3+0x31c>
1010b96c:	200890ba 	slli	r4,r4,2
1010b970:	00840474 	movhi	r2,4113
1010b974:	10ae6104 	addi	r2,r2,-18044
1010b978:	2089883a 	add	r4,r4,r2
1010b97c:	20800017 	ldw	r2,0(r4)
1010b980:	1000683a 	jmp	r2
1010b984:	1010bbac 	andhi	zero,r2,17134
1010b988:	1010b9fc 	xorhi	zero,r2,17127
1010b98c:	1010bb9c 	xori	zero,r2,17134
1010b990:	1010b9f0 	cmpltui	zero,r2,17127
1010b994:	1010bb9c 	xori	zero,r2,17134
1010b998:	1010bb70 	cmpltui	zero,r2,17133
1010b99c:	1010bb9c 	xori	zero,r2,17134
1010b9a0:	1010b9f0 	cmpltui	zero,r2,17127
1010b9a4:	1010b9fc 	xorhi	zero,r2,17127
1010b9a8:	1010b9fc 	xorhi	zero,r2,17127
1010b9ac:	1010bb70 	cmpltui	zero,r2,17133
1010b9b0:	1010b9f0 	cmpltui	zero,r2,17127
1010b9b4:	1010b9e0 	cmpeqi	zero,r2,17127
1010b9b8:	1010b9e0 	cmpeqi	zero,r2,17127
1010b9bc:	1010b9e0 	cmpeqi	zero,r2,17127
1010b9c0:	1010be90 	cmplti	zero,r2,17146
1010b9c4:	2404b03a 	or	r2,r4,r16
1010b9c8:	1000661e 	bne	r2,zero,1010bb64 <__divdf3+0x2d4>
1010b9cc:	04c00204 	movi	r19,8
1010b9d0:	0021883a 	mov	r16,zero
1010b9d4:	0025883a 	mov	r18,zero
1010b9d8:	02400084 	movi	r9,2
1010b9dc:	003fca06 	br	1010b908 <__alt_data_end+0xfffeb908>
1010b9e0:	8023883a 	mov	r17,r16
1010b9e4:	9011883a 	mov	r8,r18
1010b9e8:	e02f883a 	mov	r23,fp
1010b9ec:	480f883a 	mov	r7,r9
1010b9f0:	00800084 	movi	r2,2
1010b9f4:	3881311e 	bne	r7,r2,1010bebc <__divdf3+0x62c>
1010b9f8:	b827883a 	mov	r19,r23
1010b9fc:	98c0004c 	andi	r3,r19,1
1010ba00:	0081ffc4 	movi	r2,2047
1010ba04:	000b883a 	mov	r5,zero
1010ba08:	0025883a 	mov	r18,zero
1010ba0c:	1004953a 	slli	r2,r2,20
1010ba10:	18c03fcc 	andi	r3,r3,255
1010ba14:	04400434 	movhi	r17,16
1010ba18:	8c7fffc4 	addi	r17,r17,-1
1010ba1c:	180697fa 	slli	r3,r3,31
1010ba20:	2c4a703a 	and	r5,r5,r17
1010ba24:	288ab03a 	or	r5,r5,r2
1010ba28:	28c6b03a 	or	r3,r5,r3
1010ba2c:	9005883a 	mov	r2,r18
1010ba30:	dfc00d17 	ldw	ra,52(sp)
1010ba34:	df000c17 	ldw	fp,48(sp)
1010ba38:	ddc00b17 	ldw	r23,44(sp)
1010ba3c:	dd800a17 	ldw	r22,40(sp)
1010ba40:	dd400917 	ldw	r21,36(sp)
1010ba44:	dd000817 	ldw	r20,32(sp)
1010ba48:	dcc00717 	ldw	r19,28(sp)
1010ba4c:	dc800617 	ldw	r18,24(sp)
1010ba50:	dc400517 	ldw	r17,20(sp)
1010ba54:	dc000417 	ldw	r16,16(sp)
1010ba58:	dec00e04 	addi	sp,sp,56
1010ba5c:	f800283a 	ret
1010ba60:	2404b03a 	or	r2,r4,r16
1010ba64:	2027883a 	mov	r19,r4
1010ba68:	10003926 	beq	r2,zero,1010bb50 <__divdf3+0x2c0>
1010ba6c:	80012e26 	beq	r16,zero,1010bf28 <__divdf3+0x698>
1010ba70:	8009883a 	mov	r4,r16
1010ba74:	d9800315 	stw	r6,12(sp)
1010ba78:	d9c00215 	stw	r7,8(sp)
1010ba7c:	010d5e80 	call	1010d5e8 <__clzsi2>
1010ba80:	d9800317 	ldw	r6,12(sp)
1010ba84:	d9c00217 	ldw	r7,8(sp)
1010ba88:	113ffd44 	addi	r4,r2,-11
1010ba8c:	00c00704 	movi	r3,28
1010ba90:	19012116 	blt	r3,r4,1010bf18 <__divdf3+0x688>
1010ba94:	00c00744 	movi	r3,29
1010ba98:	147ffe04 	addi	r17,r2,-8
1010ba9c:	1907c83a 	sub	r3,r3,r4
1010baa0:	8460983a 	sll	r16,r16,r17
1010baa4:	98c6d83a 	srl	r3,r19,r3
1010baa8:	9c64983a 	sll	r18,r19,r17
1010baac:	1c20b03a 	or	r16,r3,r16
1010bab0:	1080fcc4 	addi	r2,r2,1011
1010bab4:	00abc83a 	sub	r21,zero,r2
1010bab8:	0027883a 	mov	r19,zero
1010babc:	0013883a 	mov	r9,zero
1010bac0:	003f9106 	br	1010b908 <__alt_data_end+0xfffeb908>
1010bac4:	3446b03a 	or	r3,r6,r17
1010bac8:	18001f1e 	bne	r3,zero,1010bb48 <__divdf3+0x2b8>
1010bacc:	0023883a 	mov	r17,zero
1010bad0:	0011883a 	mov	r8,zero
1010bad4:	01c00084 	movi	r7,2
1010bad8:	003f9d06 	br	1010b950 <__alt_data_end+0xfffeb950>
1010badc:	3446b03a 	or	r3,r6,r17
1010bae0:	18001526 	beq	r3,zero,1010bb38 <__divdf3+0x2a8>
1010bae4:	88011b26 	beq	r17,zero,1010bf54 <__divdf3+0x6c4>
1010bae8:	8809883a 	mov	r4,r17
1010baec:	d9800315 	stw	r6,12(sp)
1010baf0:	da400115 	stw	r9,4(sp)
1010baf4:	010d5e80 	call	1010d5e8 <__clzsi2>
1010baf8:	d9800317 	ldw	r6,12(sp)
1010bafc:	da400117 	ldw	r9,4(sp)
1010bb00:	113ffd44 	addi	r4,r2,-11
1010bb04:	00c00704 	movi	r3,28
1010bb08:	19010e16 	blt	r3,r4,1010bf44 <__divdf3+0x6b4>
1010bb0c:	00c00744 	movi	r3,29
1010bb10:	123ffe04 	addi	r8,r2,-8
1010bb14:	1907c83a 	sub	r3,r3,r4
1010bb18:	8a22983a 	sll	r17,r17,r8
1010bb1c:	30c6d83a 	srl	r3,r6,r3
1010bb20:	3210983a 	sll	r8,r6,r8
1010bb24:	1c62b03a 	or	r17,r3,r17
1010bb28:	1080fcc4 	addi	r2,r2,1011
1010bb2c:	0085c83a 	sub	r2,zero,r2
1010bb30:	000f883a 	mov	r7,zero
1010bb34:	003f8606 	br	1010b950 <__alt_data_end+0xfffeb950>
1010bb38:	0023883a 	mov	r17,zero
1010bb3c:	0011883a 	mov	r8,zero
1010bb40:	01c00044 	movi	r7,1
1010bb44:	003f8206 	br	1010b950 <__alt_data_end+0xfffeb950>
1010bb48:	01c000c4 	movi	r7,3
1010bb4c:	003f8006 	br	1010b950 <__alt_data_end+0xfffeb950>
1010bb50:	04c00104 	movi	r19,4
1010bb54:	0021883a 	mov	r16,zero
1010bb58:	0025883a 	mov	r18,zero
1010bb5c:	02400044 	movi	r9,1
1010bb60:	003f6906 	br	1010b908 <__alt_data_end+0xfffeb908>
1010bb64:	04c00304 	movi	r19,12
1010bb68:	024000c4 	movi	r9,3
1010bb6c:	003f6606 	br	1010b908 <__alt_data_end+0xfffeb908>
1010bb70:	01400434 	movhi	r5,16
1010bb74:	0007883a 	mov	r3,zero
1010bb78:	297fffc4 	addi	r5,r5,-1
1010bb7c:	04bfffc4 	movi	r18,-1
1010bb80:	0081ffc4 	movi	r2,2047
1010bb84:	003fa106 	br	1010ba0c <__alt_data_end+0xfffeba0c>
1010bb88:	00c00044 	movi	r3,1
1010bb8c:	1887c83a 	sub	r3,r3,r2
1010bb90:	01000e04 	movi	r4,56
1010bb94:	20c1210e 	bge	r4,r3,1010c01c <__divdf3+0x78c>
1010bb98:	98c0004c 	andi	r3,r19,1
1010bb9c:	0005883a 	mov	r2,zero
1010bba0:	000b883a 	mov	r5,zero
1010bba4:	0025883a 	mov	r18,zero
1010bba8:	003f9806 	br	1010ba0c <__alt_data_end+0xfffeba0c>
1010bbac:	8c00fd36 	bltu	r17,r16,1010bfa4 <__divdf3+0x714>
1010bbb0:	8440fb26 	beq	r16,r17,1010bfa0 <__divdf3+0x710>
1010bbb4:	8007883a 	mov	r3,r16
1010bbb8:	ad7fffc4 	addi	r21,r21,-1
1010bbbc:	0021883a 	mov	r16,zero
1010bbc0:	4004d63a 	srli	r2,r8,24
1010bbc4:	8822923a 	slli	r17,r17,8
1010bbc8:	1809883a 	mov	r4,r3
1010bbcc:	402c923a 	slli	r22,r8,8
1010bbd0:	88b8b03a 	or	fp,r17,r2
1010bbd4:	e028d43a 	srli	r20,fp,16
1010bbd8:	d8c00015 	stw	r3,0(sp)
1010bbdc:	e5ffffcc 	andi	r23,fp,65535
1010bbe0:	a00b883a 	mov	r5,r20
1010bbe4:	0100e240 	call	10100e24 <__udivsi3>
1010bbe8:	d8c00017 	ldw	r3,0(sp)
1010bbec:	a00b883a 	mov	r5,r20
1010bbf0:	d8800315 	stw	r2,12(sp)
1010bbf4:	1809883a 	mov	r4,r3
1010bbf8:	0100e880 	call	10100e88 <__umodsi3>
1010bbfc:	d9800317 	ldw	r6,12(sp)
1010bc00:	1006943a 	slli	r3,r2,16
1010bc04:	9004d43a 	srli	r2,r18,16
1010bc08:	b9a3383a 	mul	r17,r23,r6
1010bc0c:	10c4b03a 	or	r2,r2,r3
1010bc10:	1440062e 	bgeu	r2,r17,1010bc2c <__divdf3+0x39c>
1010bc14:	1705883a 	add	r2,r2,fp
1010bc18:	30ffffc4 	addi	r3,r6,-1
1010bc1c:	1700ee36 	bltu	r2,fp,1010bfd8 <__divdf3+0x748>
1010bc20:	1440ed2e 	bgeu	r2,r17,1010bfd8 <__divdf3+0x748>
1010bc24:	31bfff84 	addi	r6,r6,-2
1010bc28:	1705883a 	add	r2,r2,fp
1010bc2c:	1463c83a 	sub	r17,r2,r17
1010bc30:	a00b883a 	mov	r5,r20
1010bc34:	8809883a 	mov	r4,r17
1010bc38:	d9800315 	stw	r6,12(sp)
1010bc3c:	0100e240 	call	10100e24 <__udivsi3>
1010bc40:	a00b883a 	mov	r5,r20
1010bc44:	8809883a 	mov	r4,r17
1010bc48:	d8800215 	stw	r2,8(sp)
1010bc4c:	0100e880 	call	10100e88 <__umodsi3>
1010bc50:	d9c00217 	ldw	r7,8(sp)
1010bc54:	1004943a 	slli	r2,r2,16
1010bc58:	94bfffcc 	andi	r18,r18,65535
1010bc5c:	b9d1383a 	mul	r8,r23,r7
1010bc60:	90a4b03a 	or	r18,r18,r2
1010bc64:	d9800317 	ldw	r6,12(sp)
1010bc68:	9200062e 	bgeu	r18,r8,1010bc84 <__divdf3+0x3f4>
1010bc6c:	9725883a 	add	r18,r18,fp
1010bc70:	38bfffc4 	addi	r2,r7,-1
1010bc74:	9700d636 	bltu	r18,fp,1010bfd0 <__divdf3+0x740>
1010bc78:	9200d52e 	bgeu	r18,r8,1010bfd0 <__divdf3+0x740>
1010bc7c:	39ffff84 	addi	r7,r7,-2
1010bc80:	9725883a 	add	r18,r18,fp
1010bc84:	3004943a 	slli	r2,r6,16
1010bc88:	b012d43a 	srli	r9,r22,16
1010bc8c:	b1bfffcc 	andi	r6,r22,65535
1010bc90:	11e2b03a 	or	r17,r2,r7
1010bc94:	8806d43a 	srli	r3,r17,16
1010bc98:	893fffcc 	andi	r4,r17,65535
1010bc9c:	218b383a 	mul	r5,r4,r6
1010bca0:	30c5383a 	mul	r2,r6,r3
1010bca4:	2249383a 	mul	r4,r4,r9
1010bca8:	280ed43a 	srli	r7,r5,16
1010bcac:	9225c83a 	sub	r18,r18,r8
1010bcb0:	2089883a 	add	r4,r4,r2
1010bcb4:	3909883a 	add	r4,r7,r4
1010bcb8:	1a47383a 	mul	r3,r3,r9
1010bcbc:	2080022e 	bgeu	r4,r2,1010bcc8 <__divdf3+0x438>
1010bcc0:	00800074 	movhi	r2,1
1010bcc4:	1887883a 	add	r3,r3,r2
1010bcc8:	2004d43a 	srli	r2,r4,16
1010bccc:	2008943a 	slli	r4,r4,16
1010bcd0:	297fffcc 	andi	r5,r5,65535
1010bcd4:	10c7883a 	add	r3,r2,r3
1010bcd8:	2149883a 	add	r4,r4,r5
1010bcdc:	90c0a536 	bltu	r18,r3,1010bf74 <__divdf3+0x6e4>
1010bce0:	90c0bf26 	beq	r18,r3,1010bfe0 <__divdf3+0x750>
1010bce4:	90c7c83a 	sub	r3,r18,r3
1010bce8:	810fc83a 	sub	r7,r16,r4
1010bcec:	81e5803a 	cmpltu	r18,r16,r7
1010bcf0:	1ca5c83a 	sub	r18,r3,r18
1010bcf4:	e480c126 	beq	fp,r18,1010bffc <__divdf3+0x76c>
1010bcf8:	a00b883a 	mov	r5,r20
1010bcfc:	9009883a 	mov	r4,r18
1010bd00:	d9800315 	stw	r6,12(sp)
1010bd04:	d9c00215 	stw	r7,8(sp)
1010bd08:	da400115 	stw	r9,4(sp)
1010bd0c:	0100e240 	call	10100e24 <__udivsi3>
1010bd10:	a00b883a 	mov	r5,r20
1010bd14:	9009883a 	mov	r4,r18
1010bd18:	d8800015 	stw	r2,0(sp)
1010bd1c:	0100e880 	call	10100e88 <__umodsi3>
1010bd20:	d9c00217 	ldw	r7,8(sp)
1010bd24:	da000017 	ldw	r8,0(sp)
1010bd28:	1006943a 	slli	r3,r2,16
1010bd2c:	3804d43a 	srli	r2,r7,16
1010bd30:	ba21383a 	mul	r16,r23,r8
1010bd34:	d9800317 	ldw	r6,12(sp)
1010bd38:	10c4b03a 	or	r2,r2,r3
1010bd3c:	da400117 	ldw	r9,4(sp)
1010bd40:	1400062e 	bgeu	r2,r16,1010bd5c <__divdf3+0x4cc>
1010bd44:	1705883a 	add	r2,r2,fp
1010bd48:	40ffffc4 	addi	r3,r8,-1
1010bd4c:	1700ad36 	bltu	r2,fp,1010c004 <__divdf3+0x774>
1010bd50:	1400ac2e 	bgeu	r2,r16,1010c004 <__divdf3+0x774>
1010bd54:	423fff84 	addi	r8,r8,-2
1010bd58:	1705883a 	add	r2,r2,fp
1010bd5c:	1421c83a 	sub	r16,r2,r16
1010bd60:	a00b883a 	mov	r5,r20
1010bd64:	8009883a 	mov	r4,r16
1010bd68:	d9800315 	stw	r6,12(sp)
1010bd6c:	d9c00215 	stw	r7,8(sp)
1010bd70:	da000015 	stw	r8,0(sp)
1010bd74:	da400115 	stw	r9,4(sp)
1010bd78:	0100e240 	call	10100e24 <__udivsi3>
1010bd7c:	8009883a 	mov	r4,r16
1010bd80:	a00b883a 	mov	r5,r20
1010bd84:	1025883a 	mov	r18,r2
1010bd88:	0100e880 	call	10100e88 <__umodsi3>
1010bd8c:	d9c00217 	ldw	r7,8(sp)
1010bd90:	1004943a 	slli	r2,r2,16
1010bd94:	bcaf383a 	mul	r23,r23,r18
1010bd98:	393fffcc 	andi	r4,r7,65535
1010bd9c:	2088b03a 	or	r4,r4,r2
1010bda0:	d9800317 	ldw	r6,12(sp)
1010bda4:	da000017 	ldw	r8,0(sp)
1010bda8:	da400117 	ldw	r9,4(sp)
1010bdac:	25c0062e 	bgeu	r4,r23,1010bdc8 <__divdf3+0x538>
1010bdb0:	2709883a 	add	r4,r4,fp
1010bdb4:	90bfffc4 	addi	r2,r18,-1
1010bdb8:	27009436 	bltu	r4,fp,1010c00c <__divdf3+0x77c>
1010bdbc:	25c0932e 	bgeu	r4,r23,1010c00c <__divdf3+0x77c>
1010bdc0:	94bfff84 	addi	r18,r18,-2
1010bdc4:	2709883a 	add	r4,r4,fp
1010bdc8:	4004943a 	slli	r2,r8,16
1010bdcc:	25efc83a 	sub	r23,r4,r23
1010bdd0:	1490b03a 	or	r8,r2,r18
1010bdd4:	4008d43a 	srli	r4,r8,16
1010bdd8:	40ffffcc 	andi	r3,r8,65535
1010bddc:	30c5383a 	mul	r2,r6,r3
1010bde0:	1a47383a 	mul	r3,r3,r9
1010bde4:	310d383a 	mul	r6,r6,r4
1010bde8:	100ad43a 	srli	r5,r2,16
1010bdec:	4913383a 	mul	r9,r9,r4
1010bdf0:	1987883a 	add	r3,r3,r6
1010bdf4:	28c7883a 	add	r3,r5,r3
1010bdf8:	1980022e 	bgeu	r3,r6,1010be04 <__divdf3+0x574>
1010bdfc:	01000074 	movhi	r4,1
1010be00:	4913883a 	add	r9,r9,r4
1010be04:	1808d43a 	srli	r4,r3,16
1010be08:	1806943a 	slli	r3,r3,16
1010be0c:	10bfffcc 	andi	r2,r2,65535
1010be10:	2253883a 	add	r9,r4,r9
1010be14:	1887883a 	add	r3,r3,r2
1010be18:	ba403836 	bltu	r23,r9,1010befc <__divdf3+0x66c>
1010be1c:	ba403626 	beq	r23,r9,1010bef8 <__divdf3+0x668>
1010be20:	42000054 	ori	r8,r8,1
1010be24:	a880ffc4 	addi	r2,r21,1023
1010be28:	00bf570e 	bge	zero,r2,1010bb88 <__alt_data_end+0xfffebb88>
1010be2c:	40c001cc 	andi	r3,r8,7
1010be30:	18000726 	beq	r3,zero,1010be50 <__divdf3+0x5c0>
1010be34:	40c003cc 	andi	r3,r8,15
1010be38:	01000104 	movi	r4,4
1010be3c:	19000426 	beq	r3,r4,1010be50 <__divdf3+0x5c0>
1010be40:	4107883a 	add	r3,r8,r4
1010be44:	1a11803a 	cmpltu	r8,r3,r8
1010be48:	8a23883a 	add	r17,r17,r8
1010be4c:	1811883a 	mov	r8,r3
1010be50:	88c0402c 	andhi	r3,r17,256
1010be54:	18000426 	beq	r3,zero,1010be68 <__divdf3+0x5d8>
1010be58:	00ffc034 	movhi	r3,65280
1010be5c:	18ffffc4 	addi	r3,r3,-1
1010be60:	a8810004 	addi	r2,r21,1024
1010be64:	88e2703a 	and	r17,r17,r3
1010be68:	00c1ff84 	movi	r3,2046
1010be6c:	18bee316 	blt	r3,r2,1010b9fc <__alt_data_end+0xfffeb9fc>
1010be70:	8824977a 	slli	r18,r17,29
1010be74:	4010d0fa 	srli	r8,r8,3
1010be78:	8822927a 	slli	r17,r17,9
1010be7c:	1081ffcc 	andi	r2,r2,2047
1010be80:	9224b03a 	or	r18,r18,r8
1010be84:	880ad33a 	srli	r5,r17,12
1010be88:	98c0004c 	andi	r3,r19,1
1010be8c:	003edf06 	br	1010ba0c <__alt_data_end+0xfffeba0c>
1010be90:	8080022c 	andhi	r2,r16,8
1010be94:	10001226 	beq	r2,zero,1010bee0 <__divdf3+0x650>
1010be98:	8880022c 	andhi	r2,r17,8
1010be9c:	1000101e 	bne	r2,zero,1010bee0 <__divdf3+0x650>
1010bea0:	00800434 	movhi	r2,16
1010bea4:	89400234 	orhi	r5,r17,8
1010bea8:	10bfffc4 	addi	r2,r2,-1
1010beac:	b007883a 	mov	r3,r22
1010beb0:	288a703a 	and	r5,r5,r2
1010beb4:	4025883a 	mov	r18,r8
1010beb8:	003f3106 	br	1010bb80 <__alt_data_end+0xfffebb80>
1010bebc:	008000c4 	movi	r2,3
1010bec0:	3880a626 	beq	r7,r2,1010c15c <__divdf3+0x8cc>
1010bec4:	00800044 	movi	r2,1
1010bec8:	3880521e 	bne	r7,r2,1010c014 <__divdf3+0x784>
1010becc:	b807883a 	mov	r3,r23
1010bed0:	0005883a 	mov	r2,zero
1010bed4:	000b883a 	mov	r5,zero
1010bed8:	0025883a 	mov	r18,zero
1010bedc:	003ecb06 	br	1010ba0c <__alt_data_end+0xfffeba0c>
1010bee0:	00800434 	movhi	r2,16
1010bee4:	81400234 	orhi	r5,r16,8
1010bee8:	10bfffc4 	addi	r2,r2,-1
1010beec:	a007883a 	mov	r3,r20
1010bef0:	288a703a 	and	r5,r5,r2
1010bef4:	003f2206 	br	1010bb80 <__alt_data_end+0xfffebb80>
1010bef8:	183fca26 	beq	r3,zero,1010be24 <__alt_data_end+0xfffebe24>
1010befc:	e5ef883a 	add	r23,fp,r23
1010bf00:	40bfffc4 	addi	r2,r8,-1
1010bf04:	bf00392e 	bgeu	r23,fp,1010bfec <__divdf3+0x75c>
1010bf08:	1011883a 	mov	r8,r2
1010bf0c:	ba7fc41e 	bne	r23,r9,1010be20 <__alt_data_end+0xfffebe20>
1010bf10:	b0ffc31e 	bne	r22,r3,1010be20 <__alt_data_end+0xfffebe20>
1010bf14:	003fc306 	br	1010be24 <__alt_data_end+0xfffebe24>
1010bf18:	143ff604 	addi	r16,r2,-40
1010bf1c:	9c20983a 	sll	r16,r19,r16
1010bf20:	0025883a 	mov	r18,zero
1010bf24:	003ee206 	br	1010bab0 <__alt_data_end+0xfffebab0>
1010bf28:	d9800315 	stw	r6,12(sp)
1010bf2c:	d9c00215 	stw	r7,8(sp)
1010bf30:	010d5e80 	call	1010d5e8 <__clzsi2>
1010bf34:	10800804 	addi	r2,r2,32
1010bf38:	d9c00217 	ldw	r7,8(sp)
1010bf3c:	d9800317 	ldw	r6,12(sp)
1010bf40:	003ed106 	br	1010ba88 <__alt_data_end+0xfffeba88>
1010bf44:	147ff604 	addi	r17,r2,-40
1010bf48:	3462983a 	sll	r17,r6,r17
1010bf4c:	0011883a 	mov	r8,zero
1010bf50:	003ef506 	br	1010bb28 <__alt_data_end+0xfffebb28>
1010bf54:	3009883a 	mov	r4,r6
1010bf58:	d9800315 	stw	r6,12(sp)
1010bf5c:	da400115 	stw	r9,4(sp)
1010bf60:	010d5e80 	call	1010d5e8 <__clzsi2>
1010bf64:	10800804 	addi	r2,r2,32
1010bf68:	da400117 	ldw	r9,4(sp)
1010bf6c:	d9800317 	ldw	r6,12(sp)
1010bf70:	003ee306 	br	1010bb00 <__alt_data_end+0xfffebb00>
1010bf74:	85a1883a 	add	r16,r16,r22
1010bf78:	8585803a 	cmpltu	r2,r16,r22
1010bf7c:	1705883a 	add	r2,r2,fp
1010bf80:	14a5883a 	add	r18,r2,r18
1010bf84:	88bfffc4 	addi	r2,r17,-1
1010bf88:	e4800c2e 	bgeu	fp,r18,1010bfbc <__divdf3+0x72c>
1010bf8c:	90c03e36 	bltu	r18,r3,1010c088 <__divdf3+0x7f8>
1010bf90:	1c806926 	beq	r3,r18,1010c138 <__divdf3+0x8a8>
1010bf94:	90c7c83a 	sub	r3,r18,r3
1010bf98:	1023883a 	mov	r17,r2
1010bf9c:	003f5206 	br	1010bce8 <__alt_data_end+0xfffebce8>
1010bfa0:	923f0436 	bltu	r18,r8,1010bbb4 <__alt_data_end+0xfffebbb4>
1010bfa4:	800897fa 	slli	r4,r16,31
1010bfa8:	9004d07a 	srli	r2,r18,1
1010bfac:	8006d07a 	srli	r3,r16,1
1010bfb0:	902097fa 	slli	r16,r18,31
1010bfb4:	20a4b03a 	or	r18,r4,r2
1010bfb8:	003f0106 	br	1010bbc0 <__alt_data_end+0xfffebbc0>
1010bfbc:	e4bff51e 	bne	fp,r18,1010bf94 <__alt_data_end+0xfffebf94>
1010bfc0:	85bff22e 	bgeu	r16,r22,1010bf8c <__alt_data_end+0xfffebf8c>
1010bfc4:	e0c7c83a 	sub	r3,fp,r3
1010bfc8:	1023883a 	mov	r17,r2
1010bfcc:	003f4606 	br	1010bce8 <__alt_data_end+0xfffebce8>
1010bfd0:	100f883a 	mov	r7,r2
1010bfd4:	003f2b06 	br	1010bc84 <__alt_data_end+0xfffebc84>
1010bfd8:	180d883a 	mov	r6,r3
1010bfdc:	003f1306 	br	1010bc2c <__alt_data_end+0xfffebc2c>
1010bfe0:	813fe436 	bltu	r16,r4,1010bf74 <__alt_data_end+0xfffebf74>
1010bfe4:	0007883a 	mov	r3,zero
1010bfe8:	003f3f06 	br	1010bce8 <__alt_data_end+0xfffebce8>
1010bfec:	ba402c36 	bltu	r23,r9,1010c0a0 <__divdf3+0x810>
1010bff0:	4dc05426 	beq	r9,r23,1010c144 <__divdf3+0x8b4>
1010bff4:	1011883a 	mov	r8,r2
1010bff8:	003f8906 	br	1010be20 <__alt_data_end+0xfffebe20>
1010bffc:	023fffc4 	movi	r8,-1
1010c000:	003f8806 	br	1010be24 <__alt_data_end+0xfffebe24>
1010c004:	1811883a 	mov	r8,r3
1010c008:	003f5406 	br	1010bd5c <__alt_data_end+0xfffebd5c>
1010c00c:	1025883a 	mov	r18,r2
1010c010:	003f6d06 	br	1010bdc8 <__alt_data_end+0xfffebdc8>
1010c014:	b827883a 	mov	r19,r23
1010c018:	003f8206 	br	1010be24 <__alt_data_end+0xfffebe24>
1010c01c:	010007c4 	movi	r4,31
1010c020:	20c02616 	blt	r4,r3,1010c0bc <__divdf3+0x82c>
1010c024:	00800804 	movi	r2,32
1010c028:	10c5c83a 	sub	r2,r2,r3
1010c02c:	888a983a 	sll	r5,r17,r2
1010c030:	40c8d83a 	srl	r4,r8,r3
1010c034:	4084983a 	sll	r2,r8,r2
1010c038:	88e2d83a 	srl	r17,r17,r3
1010c03c:	2906b03a 	or	r3,r5,r4
1010c040:	1004c03a 	cmpne	r2,r2,zero
1010c044:	1886b03a 	or	r3,r3,r2
1010c048:	188001cc 	andi	r2,r3,7
1010c04c:	10000726 	beq	r2,zero,1010c06c <__divdf3+0x7dc>
1010c050:	188003cc 	andi	r2,r3,15
1010c054:	01000104 	movi	r4,4
1010c058:	11000426 	beq	r2,r4,1010c06c <__divdf3+0x7dc>
1010c05c:	1805883a 	mov	r2,r3
1010c060:	10c00104 	addi	r3,r2,4
1010c064:	1885803a 	cmpltu	r2,r3,r2
1010c068:	88a3883a 	add	r17,r17,r2
1010c06c:	8880202c 	andhi	r2,r17,128
1010c070:	10002726 	beq	r2,zero,1010c110 <__divdf3+0x880>
1010c074:	98c0004c 	andi	r3,r19,1
1010c078:	00800044 	movi	r2,1
1010c07c:	000b883a 	mov	r5,zero
1010c080:	0025883a 	mov	r18,zero
1010c084:	003e6106 	br	1010ba0c <__alt_data_end+0xfffeba0c>
1010c088:	85a1883a 	add	r16,r16,r22
1010c08c:	8585803a 	cmpltu	r2,r16,r22
1010c090:	1705883a 	add	r2,r2,fp
1010c094:	14a5883a 	add	r18,r2,r18
1010c098:	8c7fff84 	addi	r17,r17,-2
1010c09c:	003f1106 	br	1010bce4 <__alt_data_end+0xfffebce4>
1010c0a0:	b589883a 	add	r4,r22,r22
1010c0a4:	25ad803a 	cmpltu	r22,r4,r22
1010c0a8:	b739883a 	add	fp,r22,fp
1010c0ac:	40bfff84 	addi	r2,r8,-2
1010c0b0:	bf2f883a 	add	r23,r23,fp
1010c0b4:	202d883a 	mov	r22,r4
1010c0b8:	003f9306 	br	1010bf08 <__alt_data_end+0xfffebf08>
1010c0bc:	013ff844 	movi	r4,-31
1010c0c0:	2085c83a 	sub	r2,r4,r2
1010c0c4:	8888d83a 	srl	r4,r17,r2
1010c0c8:	00800804 	movi	r2,32
1010c0cc:	18802126 	beq	r3,r2,1010c154 <__divdf3+0x8c4>
1010c0d0:	00801004 	movi	r2,64
1010c0d4:	10c5c83a 	sub	r2,r2,r3
1010c0d8:	8884983a 	sll	r2,r17,r2
1010c0dc:	1204b03a 	or	r2,r2,r8
1010c0e0:	1004c03a 	cmpne	r2,r2,zero
1010c0e4:	2084b03a 	or	r2,r4,r2
1010c0e8:	144001cc 	andi	r17,r2,7
1010c0ec:	88000d1e 	bne	r17,zero,1010c124 <__divdf3+0x894>
1010c0f0:	000b883a 	mov	r5,zero
1010c0f4:	1024d0fa 	srli	r18,r2,3
1010c0f8:	98c0004c 	andi	r3,r19,1
1010c0fc:	0005883a 	mov	r2,zero
1010c100:	9464b03a 	or	r18,r18,r17
1010c104:	003e4106 	br	1010ba0c <__alt_data_end+0xfffeba0c>
1010c108:	1007883a 	mov	r3,r2
1010c10c:	0023883a 	mov	r17,zero
1010c110:	880a927a 	slli	r5,r17,9
1010c114:	1805883a 	mov	r2,r3
1010c118:	8822977a 	slli	r17,r17,29
1010c11c:	280ad33a 	srli	r5,r5,12
1010c120:	003ff406 	br	1010c0f4 <__alt_data_end+0xfffec0f4>
1010c124:	10c003cc 	andi	r3,r2,15
1010c128:	01000104 	movi	r4,4
1010c12c:	193ff626 	beq	r3,r4,1010c108 <__alt_data_end+0xfffec108>
1010c130:	0023883a 	mov	r17,zero
1010c134:	003fca06 	br	1010c060 <__alt_data_end+0xfffec060>
1010c138:	813fd336 	bltu	r16,r4,1010c088 <__alt_data_end+0xfffec088>
1010c13c:	1023883a 	mov	r17,r2
1010c140:	003fa806 	br	1010bfe4 <__alt_data_end+0xfffebfe4>
1010c144:	b0ffd636 	bltu	r22,r3,1010c0a0 <__alt_data_end+0xfffec0a0>
1010c148:	1011883a 	mov	r8,r2
1010c14c:	b0ff341e 	bne	r22,r3,1010be20 <__alt_data_end+0xfffebe20>
1010c150:	003f3406 	br	1010be24 <__alt_data_end+0xfffebe24>
1010c154:	0005883a 	mov	r2,zero
1010c158:	003fe006 	br	1010c0dc <__alt_data_end+0xfffec0dc>
1010c15c:	00800434 	movhi	r2,16
1010c160:	89400234 	orhi	r5,r17,8
1010c164:	10bfffc4 	addi	r2,r2,-1
1010c168:	b807883a 	mov	r3,r23
1010c16c:	288a703a 	and	r5,r5,r2
1010c170:	4025883a 	mov	r18,r8
1010c174:	003e8206 	br	1010bb80 <__alt_data_end+0xfffebb80>

1010c178 <__eqdf2>:
1010c178:	2804d53a 	srli	r2,r5,20
1010c17c:	3806d53a 	srli	r3,r7,20
1010c180:	02000434 	movhi	r8,16
1010c184:	423fffc4 	addi	r8,r8,-1
1010c188:	1081ffcc 	andi	r2,r2,2047
1010c18c:	0281ffc4 	movi	r10,2047
1010c190:	2a12703a 	and	r9,r5,r8
1010c194:	18c1ffcc 	andi	r3,r3,2047
1010c198:	3a10703a 	and	r8,r7,r8
1010c19c:	280ad7fa 	srli	r5,r5,31
1010c1a0:	380ed7fa 	srli	r7,r7,31
1010c1a4:	12801026 	beq	r2,r10,1010c1e8 <__eqdf2+0x70>
1010c1a8:	0281ffc4 	movi	r10,2047
1010c1ac:	1a800a26 	beq	r3,r10,1010c1d8 <__eqdf2+0x60>
1010c1b0:	10c00226 	beq	r2,r3,1010c1bc <__eqdf2+0x44>
1010c1b4:	00800044 	movi	r2,1
1010c1b8:	f800283a 	ret
1010c1bc:	4a3ffd1e 	bne	r9,r8,1010c1b4 <__alt_data_end+0xfffec1b4>
1010c1c0:	21bffc1e 	bne	r4,r6,1010c1b4 <__alt_data_end+0xfffec1b4>
1010c1c4:	29c00c26 	beq	r5,r7,1010c1f8 <__eqdf2+0x80>
1010c1c8:	103ffa1e 	bne	r2,zero,1010c1b4 <__alt_data_end+0xfffec1b4>
1010c1cc:	2244b03a 	or	r2,r4,r9
1010c1d0:	1004c03a 	cmpne	r2,r2,zero
1010c1d4:	f800283a 	ret
1010c1d8:	3214b03a 	or	r10,r6,r8
1010c1dc:	503ff426 	beq	r10,zero,1010c1b0 <__alt_data_end+0xfffec1b0>
1010c1e0:	00800044 	movi	r2,1
1010c1e4:	f800283a 	ret
1010c1e8:	2254b03a 	or	r10,r4,r9
1010c1ec:	503fee26 	beq	r10,zero,1010c1a8 <__alt_data_end+0xfffec1a8>
1010c1f0:	00800044 	movi	r2,1
1010c1f4:	f800283a 	ret
1010c1f8:	0005883a 	mov	r2,zero
1010c1fc:	f800283a 	ret

1010c200 <__gedf2>:
1010c200:	2804d53a 	srli	r2,r5,20
1010c204:	3806d53a 	srli	r3,r7,20
1010c208:	02000434 	movhi	r8,16
1010c20c:	423fffc4 	addi	r8,r8,-1
1010c210:	1081ffcc 	andi	r2,r2,2047
1010c214:	0241ffc4 	movi	r9,2047
1010c218:	2a14703a 	and	r10,r5,r8
1010c21c:	18c1ffcc 	andi	r3,r3,2047
1010c220:	3a10703a 	and	r8,r7,r8
1010c224:	280ad7fa 	srli	r5,r5,31
1010c228:	380ed7fa 	srli	r7,r7,31
1010c22c:	12401d26 	beq	r2,r9,1010c2a4 <__gedf2+0xa4>
1010c230:	0241ffc4 	movi	r9,2047
1010c234:	1a401226 	beq	r3,r9,1010c280 <__gedf2+0x80>
1010c238:	1000081e 	bne	r2,zero,1010c25c <__gedf2+0x5c>
1010c23c:	2296b03a 	or	r11,r4,r10
1010c240:	5813003a 	cmpeq	r9,r11,zero
1010c244:	1800091e 	bne	r3,zero,1010c26c <__gedf2+0x6c>
1010c248:	3218b03a 	or	r12,r6,r8
1010c24c:	6000071e 	bne	r12,zero,1010c26c <__gedf2+0x6c>
1010c250:	0005883a 	mov	r2,zero
1010c254:	5800101e 	bne	r11,zero,1010c298 <__gedf2+0x98>
1010c258:	f800283a 	ret
1010c25c:	18000c1e 	bne	r3,zero,1010c290 <__gedf2+0x90>
1010c260:	3212b03a 	or	r9,r6,r8
1010c264:	48000c26 	beq	r9,zero,1010c298 <__gedf2+0x98>
1010c268:	0013883a 	mov	r9,zero
1010c26c:	39c03fcc 	andi	r7,r7,255
1010c270:	48000826 	beq	r9,zero,1010c294 <__gedf2+0x94>
1010c274:	38000926 	beq	r7,zero,1010c29c <__gedf2+0x9c>
1010c278:	00800044 	movi	r2,1
1010c27c:	f800283a 	ret
1010c280:	3212b03a 	or	r9,r6,r8
1010c284:	483fec26 	beq	r9,zero,1010c238 <__alt_data_end+0xfffec238>
1010c288:	00bfff84 	movi	r2,-2
1010c28c:	f800283a 	ret
1010c290:	39c03fcc 	andi	r7,r7,255
1010c294:	29c00626 	beq	r5,r7,1010c2b0 <__gedf2+0xb0>
1010c298:	283ff726 	beq	r5,zero,1010c278 <__alt_data_end+0xfffec278>
1010c29c:	00bfffc4 	movi	r2,-1
1010c2a0:	f800283a 	ret
1010c2a4:	2292b03a 	or	r9,r4,r10
1010c2a8:	483fe126 	beq	r9,zero,1010c230 <__alt_data_end+0xfffec230>
1010c2ac:	003ff606 	br	1010c288 <__alt_data_end+0xfffec288>
1010c2b0:	18bff916 	blt	r3,r2,1010c298 <__alt_data_end+0xfffec298>
1010c2b4:	10c00316 	blt	r2,r3,1010c2c4 <__gedf2+0xc4>
1010c2b8:	42bff736 	bltu	r8,r10,1010c298 <__alt_data_end+0xfffec298>
1010c2bc:	52000326 	beq	r10,r8,1010c2cc <__gedf2+0xcc>
1010c2c0:	5200042e 	bgeu	r10,r8,1010c2d4 <__gedf2+0xd4>
1010c2c4:	283fec1e 	bne	r5,zero,1010c278 <__alt_data_end+0xfffec278>
1010c2c8:	003ff406 	br	1010c29c <__alt_data_end+0xfffec29c>
1010c2cc:	313ff236 	bltu	r6,r4,1010c298 <__alt_data_end+0xfffec298>
1010c2d0:	21bffc36 	bltu	r4,r6,1010c2c4 <__alt_data_end+0xfffec2c4>
1010c2d4:	0005883a 	mov	r2,zero
1010c2d8:	f800283a 	ret

1010c2dc <__ledf2>:
1010c2dc:	2804d53a 	srli	r2,r5,20
1010c2e0:	3810d53a 	srli	r8,r7,20
1010c2e4:	00c00434 	movhi	r3,16
1010c2e8:	18ffffc4 	addi	r3,r3,-1
1010c2ec:	1081ffcc 	andi	r2,r2,2047
1010c2f0:	0241ffc4 	movi	r9,2047
1010c2f4:	28d4703a 	and	r10,r5,r3
1010c2f8:	4201ffcc 	andi	r8,r8,2047
1010c2fc:	38c6703a 	and	r3,r7,r3
1010c300:	280ad7fa 	srli	r5,r5,31
1010c304:	380ed7fa 	srli	r7,r7,31
1010c308:	12401f26 	beq	r2,r9,1010c388 <__ledf2+0xac>
1010c30c:	0241ffc4 	movi	r9,2047
1010c310:	42401426 	beq	r8,r9,1010c364 <__ledf2+0x88>
1010c314:	1000091e 	bne	r2,zero,1010c33c <__ledf2+0x60>
1010c318:	2296b03a 	or	r11,r4,r10
1010c31c:	5813003a 	cmpeq	r9,r11,zero
1010c320:	29403fcc 	andi	r5,r5,255
1010c324:	40000a1e 	bne	r8,zero,1010c350 <__ledf2+0x74>
1010c328:	30d8b03a 	or	r12,r6,r3
1010c32c:	6000081e 	bne	r12,zero,1010c350 <__ledf2+0x74>
1010c330:	0005883a 	mov	r2,zero
1010c334:	5800111e 	bne	r11,zero,1010c37c <__ledf2+0xa0>
1010c338:	f800283a 	ret
1010c33c:	29403fcc 	andi	r5,r5,255
1010c340:	40000c1e 	bne	r8,zero,1010c374 <__ledf2+0x98>
1010c344:	30d2b03a 	or	r9,r6,r3
1010c348:	48000c26 	beq	r9,zero,1010c37c <__ledf2+0xa0>
1010c34c:	0013883a 	mov	r9,zero
1010c350:	39c03fcc 	andi	r7,r7,255
1010c354:	48000826 	beq	r9,zero,1010c378 <__ledf2+0x9c>
1010c358:	38001126 	beq	r7,zero,1010c3a0 <__ledf2+0xc4>
1010c35c:	00800044 	movi	r2,1
1010c360:	f800283a 	ret
1010c364:	30d2b03a 	or	r9,r6,r3
1010c368:	483fea26 	beq	r9,zero,1010c314 <__alt_data_end+0xfffec314>
1010c36c:	00800084 	movi	r2,2
1010c370:	f800283a 	ret
1010c374:	39c03fcc 	andi	r7,r7,255
1010c378:	39400726 	beq	r7,r5,1010c398 <__ledf2+0xbc>
1010c37c:	2800081e 	bne	r5,zero,1010c3a0 <__ledf2+0xc4>
1010c380:	00800044 	movi	r2,1
1010c384:	f800283a 	ret
1010c388:	2292b03a 	or	r9,r4,r10
1010c38c:	483fdf26 	beq	r9,zero,1010c30c <__alt_data_end+0xfffec30c>
1010c390:	00800084 	movi	r2,2
1010c394:	f800283a 	ret
1010c398:	4080030e 	bge	r8,r2,1010c3a8 <__ledf2+0xcc>
1010c39c:	383fef26 	beq	r7,zero,1010c35c <__alt_data_end+0xfffec35c>
1010c3a0:	00bfffc4 	movi	r2,-1
1010c3a4:	f800283a 	ret
1010c3a8:	123feb16 	blt	r2,r8,1010c358 <__alt_data_end+0xfffec358>
1010c3ac:	1abff336 	bltu	r3,r10,1010c37c <__alt_data_end+0xfffec37c>
1010c3b0:	50c00326 	beq	r10,r3,1010c3c0 <__ledf2+0xe4>
1010c3b4:	50c0042e 	bgeu	r10,r3,1010c3c8 <__ledf2+0xec>
1010c3b8:	283fe81e 	bne	r5,zero,1010c35c <__alt_data_end+0xfffec35c>
1010c3bc:	003ff806 	br	1010c3a0 <__alt_data_end+0xfffec3a0>
1010c3c0:	313fee36 	bltu	r6,r4,1010c37c <__alt_data_end+0xfffec37c>
1010c3c4:	21bffc36 	bltu	r4,r6,1010c3b8 <__alt_data_end+0xfffec3b8>
1010c3c8:	0005883a 	mov	r2,zero
1010c3cc:	f800283a 	ret

1010c3d0 <__muldf3>:
1010c3d0:	defff304 	addi	sp,sp,-52
1010c3d4:	2804d53a 	srli	r2,r5,20
1010c3d8:	dd800915 	stw	r22,36(sp)
1010c3dc:	282cd7fa 	srli	r22,r5,31
1010c3e0:	dc000315 	stw	r16,12(sp)
1010c3e4:	04000434 	movhi	r16,16
1010c3e8:	dd400815 	stw	r21,32(sp)
1010c3ec:	dc800515 	stw	r18,20(sp)
1010c3f0:	843fffc4 	addi	r16,r16,-1
1010c3f4:	dfc00c15 	stw	ra,48(sp)
1010c3f8:	df000b15 	stw	fp,44(sp)
1010c3fc:	ddc00a15 	stw	r23,40(sp)
1010c400:	dd000715 	stw	r20,28(sp)
1010c404:	dcc00615 	stw	r19,24(sp)
1010c408:	dc400415 	stw	r17,16(sp)
1010c40c:	1481ffcc 	andi	r18,r2,2047
1010c410:	2c20703a 	and	r16,r5,r16
1010c414:	b02b883a 	mov	r21,r22
1010c418:	b2403fcc 	andi	r9,r22,255
1010c41c:	90006026 	beq	r18,zero,1010c5a0 <__muldf3+0x1d0>
1010c420:	0081ffc4 	movi	r2,2047
1010c424:	2029883a 	mov	r20,r4
1010c428:	90803626 	beq	r18,r2,1010c504 <__muldf3+0x134>
1010c42c:	80800434 	orhi	r2,r16,16
1010c430:	100490fa 	slli	r2,r2,3
1010c434:	2020d77a 	srli	r16,r4,29
1010c438:	202890fa 	slli	r20,r4,3
1010c43c:	94bf0044 	addi	r18,r18,-1023
1010c440:	80a0b03a 	or	r16,r16,r2
1010c444:	0027883a 	mov	r19,zero
1010c448:	0039883a 	mov	fp,zero
1010c44c:	3804d53a 	srli	r2,r7,20
1010c450:	382ed7fa 	srli	r23,r7,31
1010c454:	04400434 	movhi	r17,16
1010c458:	8c7fffc4 	addi	r17,r17,-1
1010c45c:	1081ffcc 	andi	r2,r2,2047
1010c460:	3011883a 	mov	r8,r6
1010c464:	3c62703a 	and	r17,r7,r17
1010c468:	ba803fcc 	andi	r10,r23,255
1010c46c:	10006d26 	beq	r2,zero,1010c624 <__muldf3+0x254>
1010c470:	00c1ffc4 	movi	r3,2047
1010c474:	10c06526 	beq	r2,r3,1010c60c <__muldf3+0x23c>
1010c478:	88c00434 	orhi	r3,r17,16
1010c47c:	180690fa 	slli	r3,r3,3
1010c480:	3022d77a 	srli	r17,r6,29
1010c484:	301090fa 	slli	r8,r6,3
1010c488:	10bf0044 	addi	r2,r2,-1023
1010c48c:	88e2b03a 	or	r17,r17,r3
1010c490:	000b883a 	mov	r5,zero
1010c494:	9085883a 	add	r2,r18,r2
1010c498:	2cc8b03a 	or	r4,r5,r19
1010c49c:	00c003c4 	movi	r3,15
1010c4a0:	bdacf03a 	xor	r22,r23,r22
1010c4a4:	12c00044 	addi	r11,r2,1
1010c4a8:	19009936 	bltu	r3,r4,1010c710 <__muldf3+0x340>
1010c4ac:	200890ba 	slli	r4,r4,2
1010c4b0:	00c40474 	movhi	r3,4113
1010c4b4:	18f13104 	addi	r3,r3,-15164
1010c4b8:	20c9883a 	add	r4,r4,r3
1010c4bc:	20c00017 	ldw	r3,0(r4)
1010c4c0:	1800683a 	jmp	r3
1010c4c4:	1010c710 	cmplti	zero,r2,17180
1010c4c8:	1010c524 	muli	zero,r2,17172
1010c4cc:	1010c524 	muli	zero,r2,17172
1010c4d0:	1010c520 	cmpeqi	zero,r2,17172
1010c4d4:	1010c6ec 	andhi	zero,r2,17179
1010c4d8:	1010c6ec 	andhi	zero,r2,17179
1010c4dc:	1010c6d4 	ori	zero,r2,17179
1010c4e0:	1010c520 	cmpeqi	zero,r2,17172
1010c4e4:	1010c6ec 	andhi	zero,r2,17179
1010c4e8:	1010c6d4 	ori	zero,r2,17179
1010c4ec:	1010c6ec 	andhi	zero,r2,17179
1010c4f0:	1010c520 	cmpeqi	zero,r2,17172
1010c4f4:	1010c6fc 	xorhi	zero,r2,17179
1010c4f8:	1010c6fc 	xorhi	zero,r2,17179
1010c4fc:	1010c6fc 	xorhi	zero,r2,17179
1010c500:	1010c918 	cmpnei	zero,r2,17188
1010c504:	2404b03a 	or	r2,r4,r16
1010c508:	10006f1e 	bne	r2,zero,1010c6c8 <__muldf3+0x2f8>
1010c50c:	04c00204 	movi	r19,8
1010c510:	0021883a 	mov	r16,zero
1010c514:	0029883a 	mov	r20,zero
1010c518:	07000084 	movi	fp,2
1010c51c:	003fcb06 	br	1010c44c <__alt_data_end+0xfffec44c>
1010c520:	502d883a 	mov	r22,r10
1010c524:	00800084 	movi	r2,2
1010c528:	28805726 	beq	r5,r2,1010c688 <__muldf3+0x2b8>
1010c52c:	008000c4 	movi	r2,3
1010c530:	28816626 	beq	r5,r2,1010cacc <__muldf3+0x6fc>
1010c534:	00800044 	movi	r2,1
1010c538:	2881411e 	bne	r5,r2,1010ca40 <__muldf3+0x670>
1010c53c:	b02b883a 	mov	r21,r22
1010c540:	0005883a 	mov	r2,zero
1010c544:	000b883a 	mov	r5,zero
1010c548:	0029883a 	mov	r20,zero
1010c54c:	1004953a 	slli	r2,r2,20
1010c550:	a8c03fcc 	andi	r3,r21,255
1010c554:	04400434 	movhi	r17,16
1010c558:	8c7fffc4 	addi	r17,r17,-1
1010c55c:	180697fa 	slli	r3,r3,31
1010c560:	2c4a703a 	and	r5,r5,r17
1010c564:	288ab03a 	or	r5,r5,r2
1010c568:	28c6b03a 	or	r3,r5,r3
1010c56c:	a005883a 	mov	r2,r20
1010c570:	dfc00c17 	ldw	ra,48(sp)
1010c574:	df000b17 	ldw	fp,44(sp)
1010c578:	ddc00a17 	ldw	r23,40(sp)
1010c57c:	dd800917 	ldw	r22,36(sp)
1010c580:	dd400817 	ldw	r21,32(sp)
1010c584:	dd000717 	ldw	r20,28(sp)
1010c588:	dcc00617 	ldw	r19,24(sp)
1010c58c:	dc800517 	ldw	r18,20(sp)
1010c590:	dc400417 	ldw	r17,16(sp)
1010c594:	dc000317 	ldw	r16,12(sp)
1010c598:	dec00d04 	addi	sp,sp,52
1010c59c:	f800283a 	ret
1010c5a0:	2404b03a 	or	r2,r4,r16
1010c5a4:	2027883a 	mov	r19,r4
1010c5a8:	10004226 	beq	r2,zero,1010c6b4 <__muldf3+0x2e4>
1010c5ac:	8000fc26 	beq	r16,zero,1010c9a0 <__muldf3+0x5d0>
1010c5b0:	8009883a 	mov	r4,r16
1010c5b4:	d9800215 	stw	r6,8(sp)
1010c5b8:	d9c00015 	stw	r7,0(sp)
1010c5bc:	da400115 	stw	r9,4(sp)
1010c5c0:	010d5e80 	call	1010d5e8 <__clzsi2>
1010c5c4:	d9800217 	ldw	r6,8(sp)
1010c5c8:	d9c00017 	ldw	r7,0(sp)
1010c5cc:	da400117 	ldw	r9,4(sp)
1010c5d0:	113ffd44 	addi	r4,r2,-11
1010c5d4:	00c00704 	movi	r3,28
1010c5d8:	1900ed16 	blt	r3,r4,1010c990 <__muldf3+0x5c0>
1010c5dc:	00c00744 	movi	r3,29
1010c5e0:	147ffe04 	addi	r17,r2,-8
1010c5e4:	1907c83a 	sub	r3,r3,r4
1010c5e8:	8460983a 	sll	r16,r16,r17
1010c5ec:	98c6d83a 	srl	r3,r19,r3
1010c5f0:	9c68983a 	sll	r20,r19,r17
1010c5f4:	1c20b03a 	or	r16,r3,r16
1010c5f8:	1080fcc4 	addi	r2,r2,1011
1010c5fc:	00a5c83a 	sub	r18,zero,r2
1010c600:	0027883a 	mov	r19,zero
1010c604:	0039883a 	mov	fp,zero
1010c608:	003f9006 	br	1010c44c <__alt_data_end+0xfffec44c>
1010c60c:	3446b03a 	or	r3,r6,r17
1010c610:	1800261e 	bne	r3,zero,1010c6ac <__muldf3+0x2dc>
1010c614:	0023883a 	mov	r17,zero
1010c618:	0011883a 	mov	r8,zero
1010c61c:	01400084 	movi	r5,2
1010c620:	003f9c06 	br	1010c494 <__alt_data_end+0xfffec494>
1010c624:	3446b03a 	or	r3,r6,r17
1010c628:	18001c26 	beq	r3,zero,1010c69c <__muldf3+0x2cc>
1010c62c:	8800ce26 	beq	r17,zero,1010c968 <__muldf3+0x598>
1010c630:	8809883a 	mov	r4,r17
1010c634:	d9800215 	stw	r6,8(sp)
1010c638:	da400115 	stw	r9,4(sp)
1010c63c:	da800015 	stw	r10,0(sp)
1010c640:	010d5e80 	call	1010d5e8 <__clzsi2>
1010c644:	d9800217 	ldw	r6,8(sp)
1010c648:	da400117 	ldw	r9,4(sp)
1010c64c:	da800017 	ldw	r10,0(sp)
1010c650:	113ffd44 	addi	r4,r2,-11
1010c654:	00c00704 	movi	r3,28
1010c658:	1900bf16 	blt	r3,r4,1010c958 <__muldf3+0x588>
1010c65c:	00c00744 	movi	r3,29
1010c660:	123ffe04 	addi	r8,r2,-8
1010c664:	1907c83a 	sub	r3,r3,r4
1010c668:	8a22983a 	sll	r17,r17,r8
1010c66c:	30c6d83a 	srl	r3,r6,r3
1010c670:	3210983a 	sll	r8,r6,r8
1010c674:	1c62b03a 	or	r17,r3,r17
1010c678:	1080fcc4 	addi	r2,r2,1011
1010c67c:	0085c83a 	sub	r2,zero,r2
1010c680:	000b883a 	mov	r5,zero
1010c684:	003f8306 	br	1010c494 <__alt_data_end+0xfffec494>
1010c688:	b02b883a 	mov	r21,r22
1010c68c:	0081ffc4 	movi	r2,2047
1010c690:	000b883a 	mov	r5,zero
1010c694:	0029883a 	mov	r20,zero
1010c698:	003fac06 	br	1010c54c <__alt_data_end+0xfffec54c>
1010c69c:	0023883a 	mov	r17,zero
1010c6a0:	0011883a 	mov	r8,zero
1010c6a4:	01400044 	movi	r5,1
1010c6a8:	003f7a06 	br	1010c494 <__alt_data_end+0xfffec494>
1010c6ac:	014000c4 	movi	r5,3
1010c6b0:	003f7806 	br	1010c494 <__alt_data_end+0xfffec494>
1010c6b4:	04c00104 	movi	r19,4
1010c6b8:	0021883a 	mov	r16,zero
1010c6bc:	0029883a 	mov	r20,zero
1010c6c0:	07000044 	movi	fp,1
1010c6c4:	003f6106 	br	1010c44c <__alt_data_end+0xfffec44c>
1010c6c8:	04c00304 	movi	r19,12
1010c6cc:	070000c4 	movi	fp,3
1010c6d0:	003f5e06 	br	1010c44c <__alt_data_end+0xfffec44c>
1010c6d4:	01400434 	movhi	r5,16
1010c6d8:	002b883a 	mov	r21,zero
1010c6dc:	297fffc4 	addi	r5,r5,-1
1010c6e0:	053fffc4 	movi	r20,-1
1010c6e4:	0081ffc4 	movi	r2,2047
1010c6e8:	003f9806 	br	1010c54c <__alt_data_end+0xfffec54c>
1010c6ec:	8023883a 	mov	r17,r16
1010c6f0:	a011883a 	mov	r8,r20
1010c6f4:	e00b883a 	mov	r5,fp
1010c6f8:	003f8a06 	br	1010c524 <__alt_data_end+0xfffec524>
1010c6fc:	8023883a 	mov	r17,r16
1010c700:	a011883a 	mov	r8,r20
1010c704:	482d883a 	mov	r22,r9
1010c708:	e00b883a 	mov	r5,fp
1010c70c:	003f8506 	br	1010c524 <__alt_data_end+0xfffec524>
1010c710:	a00ad43a 	srli	r5,r20,16
1010c714:	401ad43a 	srli	r13,r8,16
1010c718:	a53fffcc 	andi	r20,r20,65535
1010c71c:	423fffcc 	andi	r8,r8,65535
1010c720:	4519383a 	mul	r12,r8,r20
1010c724:	4147383a 	mul	r3,r8,r5
1010c728:	6d09383a 	mul	r4,r13,r20
1010c72c:	600cd43a 	srli	r6,r12,16
1010c730:	2b5d383a 	mul	r14,r5,r13
1010c734:	20c9883a 	add	r4,r4,r3
1010c738:	310d883a 	add	r6,r6,r4
1010c73c:	30c0022e 	bgeu	r6,r3,1010c748 <__muldf3+0x378>
1010c740:	00c00074 	movhi	r3,1
1010c744:	70dd883a 	add	r14,r14,r3
1010c748:	8826d43a 	srli	r19,r17,16
1010c74c:	8bffffcc 	andi	r15,r17,65535
1010c750:	7d23383a 	mul	r17,r15,r20
1010c754:	7949383a 	mul	r4,r15,r5
1010c758:	9d29383a 	mul	r20,r19,r20
1010c75c:	8814d43a 	srli	r10,r17,16
1010c760:	3012943a 	slli	r9,r6,16
1010c764:	a129883a 	add	r20,r20,r4
1010c768:	633fffcc 	andi	r12,r12,65535
1010c76c:	5515883a 	add	r10,r10,r20
1010c770:	3006d43a 	srli	r3,r6,16
1010c774:	4b13883a 	add	r9,r9,r12
1010c778:	2ccb383a 	mul	r5,r5,r19
1010c77c:	5100022e 	bgeu	r10,r4,1010c788 <__muldf3+0x3b8>
1010c780:	01000074 	movhi	r4,1
1010c784:	290b883a 	add	r5,r5,r4
1010c788:	802ad43a 	srli	r21,r16,16
1010c78c:	843fffcc 	andi	r16,r16,65535
1010c790:	440d383a 	mul	r6,r8,r16
1010c794:	4565383a 	mul	r18,r8,r21
1010c798:	8349383a 	mul	r4,r16,r13
1010c79c:	500e943a 	slli	r7,r10,16
1010c7a0:	3010d43a 	srli	r8,r6,16
1010c7a4:	5028d43a 	srli	r20,r10,16
1010c7a8:	2489883a 	add	r4,r4,r18
1010c7ac:	8abfffcc 	andi	r10,r17,65535
1010c7b0:	3a95883a 	add	r10,r7,r10
1010c7b4:	4119883a 	add	r12,r8,r4
1010c7b8:	a169883a 	add	r20,r20,r5
1010c7bc:	1a87883a 	add	r3,r3,r10
1010c7c0:	6d5b383a 	mul	r13,r13,r21
1010c7c4:	6480022e 	bgeu	r12,r18,1010c7d0 <__muldf3+0x400>
1010c7c8:	01000074 	movhi	r4,1
1010c7cc:	691b883a 	add	r13,r13,r4
1010c7d0:	7c25383a 	mul	r18,r15,r16
1010c7d4:	7d4b383a 	mul	r5,r15,r21
1010c7d8:	84cf383a 	mul	r7,r16,r19
1010c7dc:	901ed43a 	srli	r15,r18,16
1010c7e0:	6008d43a 	srli	r4,r12,16
1010c7e4:	6010943a 	slli	r8,r12,16
1010c7e8:	394f883a 	add	r7,r7,r5
1010c7ec:	333fffcc 	andi	r12,r6,65535
1010c7f0:	79df883a 	add	r15,r15,r7
1010c7f4:	235b883a 	add	r13,r4,r13
1010c7f8:	9d63383a 	mul	r17,r19,r21
1010c7fc:	4309883a 	add	r4,r8,r12
1010c800:	7940022e 	bgeu	r15,r5,1010c80c <__muldf3+0x43c>
1010c804:	01400074 	movhi	r5,1
1010c808:	8963883a 	add	r17,r17,r5
1010c80c:	780a943a 	slli	r5,r15,16
1010c810:	91bfffcc 	andi	r6,r18,65535
1010c814:	70c7883a 	add	r3,r14,r3
1010c818:	298d883a 	add	r6,r5,r6
1010c81c:	1a8f803a 	cmpltu	r7,r3,r10
1010c820:	350b883a 	add	r5,r6,r20
1010c824:	20c7883a 	add	r3,r4,r3
1010c828:	3955883a 	add	r10,r7,r5
1010c82c:	1909803a 	cmpltu	r4,r3,r4
1010c830:	6a91883a 	add	r8,r13,r10
1010c834:	780cd43a 	srli	r6,r15,16
1010c838:	2219883a 	add	r12,r4,r8
1010c83c:	2d0b803a 	cmpltu	r5,r5,r20
1010c840:	51cf803a 	cmpltu	r7,r10,r7
1010c844:	29ceb03a 	or	r7,r5,r7
1010c848:	4351803a 	cmpltu	r8,r8,r13
1010c84c:	610b803a 	cmpltu	r5,r12,r4
1010c850:	4148b03a 	or	r4,r8,r5
1010c854:	398f883a 	add	r7,r7,r6
1010c858:	3909883a 	add	r4,r7,r4
1010c85c:	1810927a 	slli	r8,r3,9
1010c860:	2449883a 	add	r4,r4,r17
1010c864:	2008927a 	slli	r4,r4,9
1010c868:	6022d5fa 	srli	r17,r12,23
1010c86c:	1806d5fa 	srli	r3,r3,23
1010c870:	4252b03a 	or	r9,r8,r9
1010c874:	600a927a 	slli	r5,r12,9
1010c878:	4810c03a 	cmpne	r8,r9,zero
1010c87c:	2462b03a 	or	r17,r4,r17
1010c880:	40c6b03a 	or	r3,r8,r3
1010c884:	8900402c 	andhi	r4,r17,256
1010c888:	1950b03a 	or	r8,r3,r5
1010c88c:	20000726 	beq	r4,zero,1010c8ac <__muldf3+0x4dc>
1010c890:	4006d07a 	srli	r3,r8,1
1010c894:	880497fa 	slli	r2,r17,31
1010c898:	4200004c 	andi	r8,r8,1
1010c89c:	8822d07a 	srli	r17,r17,1
1010c8a0:	1a10b03a 	or	r8,r3,r8
1010c8a4:	1210b03a 	or	r8,r2,r8
1010c8a8:	5805883a 	mov	r2,r11
1010c8ac:	1140ffc4 	addi	r5,r2,1023
1010c8b0:	0140440e 	bge	zero,r5,1010c9c4 <__muldf3+0x5f4>
1010c8b4:	40c001cc 	andi	r3,r8,7
1010c8b8:	18000726 	beq	r3,zero,1010c8d8 <__muldf3+0x508>
1010c8bc:	40c003cc 	andi	r3,r8,15
1010c8c0:	01000104 	movi	r4,4
1010c8c4:	19000426 	beq	r3,r4,1010c8d8 <__muldf3+0x508>
1010c8c8:	4107883a 	add	r3,r8,r4
1010c8cc:	1a11803a 	cmpltu	r8,r3,r8
1010c8d0:	8a23883a 	add	r17,r17,r8
1010c8d4:	1811883a 	mov	r8,r3
1010c8d8:	88c0402c 	andhi	r3,r17,256
1010c8dc:	18000426 	beq	r3,zero,1010c8f0 <__muldf3+0x520>
1010c8e0:	11410004 	addi	r5,r2,1024
1010c8e4:	00bfc034 	movhi	r2,65280
1010c8e8:	10bfffc4 	addi	r2,r2,-1
1010c8ec:	88a2703a 	and	r17,r17,r2
1010c8f0:	0081ff84 	movi	r2,2046
1010c8f4:	117f6416 	blt	r2,r5,1010c688 <__alt_data_end+0xfffec688>
1010c8f8:	8828977a 	slli	r20,r17,29
1010c8fc:	4010d0fa 	srli	r8,r8,3
1010c900:	8822927a 	slli	r17,r17,9
1010c904:	2881ffcc 	andi	r2,r5,2047
1010c908:	a228b03a 	or	r20,r20,r8
1010c90c:	880ad33a 	srli	r5,r17,12
1010c910:	b02b883a 	mov	r21,r22
1010c914:	003f0d06 	br	1010c54c <__alt_data_end+0xfffec54c>
1010c918:	8080022c 	andhi	r2,r16,8
1010c91c:	10000926 	beq	r2,zero,1010c944 <__muldf3+0x574>
1010c920:	8880022c 	andhi	r2,r17,8
1010c924:	1000071e 	bne	r2,zero,1010c944 <__muldf3+0x574>
1010c928:	00800434 	movhi	r2,16
1010c92c:	89400234 	orhi	r5,r17,8
1010c930:	10bfffc4 	addi	r2,r2,-1
1010c934:	b82b883a 	mov	r21,r23
1010c938:	288a703a 	and	r5,r5,r2
1010c93c:	4029883a 	mov	r20,r8
1010c940:	003f6806 	br	1010c6e4 <__alt_data_end+0xfffec6e4>
1010c944:	00800434 	movhi	r2,16
1010c948:	81400234 	orhi	r5,r16,8
1010c94c:	10bfffc4 	addi	r2,r2,-1
1010c950:	288a703a 	and	r5,r5,r2
1010c954:	003f6306 	br	1010c6e4 <__alt_data_end+0xfffec6e4>
1010c958:	147ff604 	addi	r17,r2,-40
1010c95c:	3462983a 	sll	r17,r6,r17
1010c960:	0011883a 	mov	r8,zero
1010c964:	003f4406 	br	1010c678 <__alt_data_end+0xfffec678>
1010c968:	3009883a 	mov	r4,r6
1010c96c:	d9800215 	stw	r6,8(sp)
1010c970:	da400115 	stw	r9,4(sp)
1010c974:	da800015 	stw	r10,0(sp)
1010c978:	010d5e80 	call	1010d5e8 <__clzsi2>
1010c97c:	10800804 	addi	r2,r2,32
1010c980:	da800017 	ldw	r10,0(sp)
1010c984:	da400117 	ldw	r9,4(sp)
1010c988:	d9800217 	ldw	r6,8(sp)
1010c98c:	003f3006 	br	1010c650 <__alt_data_end+0xfffec650>
1010c990:	143ff604 	addi	r16,r2,-40
1010c994:	9c20983a 	sll	r16,r19,r16
1010c998:	0029883a 	mov	r20,zero
1010c99c:	003f1606 	br	1010c5f8 <__alt_data_end+0xfffec5f8>
1010c9a0:	d9800215 	stw	r6,8(sp)
1010c9a4:	d9c00015 	stw	r7,0(sp)
1010c9a8:	da400115 	stw	r9,4(sp)
1010c9ac:	010d5e80 	call	1010d5e8 <__clzsi2>
1010c9b0:	10800804 	addi	r2,r2,32
1010c9b4:	da400117 	ldw	r9,4(sp)
1010c9b8:	d9c00017 	ldw	r7,0(sp)
1010c9bc:	d9800217 	ldw	r6,8(sp)
1010c9c0:	003f0306 	br	1010c5d0 <__alt_data_end+0xfffec5d0>
1010c9c4:	00c00044 	movi	r3,1
1010c9c8:	1947c83a 	sub	r3,r3,r5
1010c9cc:	00800e04 	movi	r2,56
1010c9d0:	10feda16 	blt	r2,r3,1010c53c <__alt_data_end+0xfffec53c>
1010c9d4:	008007c4 	movi	r2,31
1010c9d8:	10c01b16 	blt	r2,r3,1010ca48 <__muldf3+0x678>
1010c9dc:	00800804 	movi	r2,32
1010c9e0:	10c5c83a 	sub	r2,r2,r3
1010c9e4:	888a983a 	sll	r5,r17,r2
1010c9e8:	40c8d83a 	srl	r4,r8,r3
1010c9ec:	4084983a 	sll	r2,r8,r2
1010c9f0:	88e2d83a 	srl	r17,r17,r3
1010c9f4:	2906b03a 	or	r3,r5,r4
1010c9f8:	1004c03a 	cmpne	r2,r2,zero
1010c9fc:	1886b03a 	or	r3,r3,r2
1010ca00:	188001cc 	andi	r2,r3,7
1010ca04:	10000726 	beq	r2,zero,1010ca24 <__muldf3+0x654>
1010ca08:	188003cc 	andi	r2,r3,15
1010ca0c:	01000104 	movi	r4,4
1010ca10:	11000426 	beq	r2,r4,1010ca24 <__muldf3+0x654>
1010ca14:	1805883a 	mov	r2,r3
1010ca18:	10c00104 	addi	r3,r2,4
1010ca1c:	1885803a 	cmpltu	r2,r3,r2
1010ca20:	88a3883a 	add	r17,r17,r2
1010ca24:	8880202c 	andhi	r2,r17,128
1010ca28:	10001c26 	beq	r2,zero,1010ca9c <__muldf3+0x6cc>
1010ca2c:	b02b883a 	mov	r21,r22
1010ca30:	00800044 	movi	r2,1
1010ca34:	000b883a 	mov	r5,zero
1010ca38:	0029883a 	mov	r20,zero
1010ca3c:	003ec306 	br	1010c54c <__alt_data_end+0xfffec54c>
1010ca40:	5805883a 	mov	r2,r11
1010ca44:	003f9906 	br	1010c8ac <__alt_data_end+0xfffec8ac>
1010ca48:	00bff844 	movi	r2,-31
1010ca4c:	1145c83a 	sub	r2,r2,r5
1010ca50:	8888d83a 	srl	r4,r17,r2
1010ca54:	00800804 	movi	r2,32
1010ca58:	18801a26 	beq	r3,r2,1010cac4 <__muldf3+0x6f4>
1010ca5c:	00801004 	movi	r2,64
1010ca60:	10c5c83a 	sub	r2,r2,r3
1010ca64:	8884983a 	sll	r2,r17,r2
1010ca68:	1204b03a 	or	r2,r2,r8
1010ca6c:	1004c03a 	cmpne	r2,r2,zero
1010ca70:	2084b03a 	or	r2,r4,r2
1010ca74:	144001cc 	andi	r17,r2,7
1010ca78:	88000d1e 	bne	r17,zero,1010cab0 <__muldf3+0x6e0>
1010ca7c:	000b883a 	mov	r5,zero
1010ca80:	1028d0fa 	srli	r20,r2,3
1010ca84:	b02b883a 	mov	r21,r22
1010ca88:	0005883a 	mov	r2,zero
1010ca8c:	a468b03a 	or	r20,r20,r17
1010ca90:	003eae06 	br	1010c54c <__alt_data_end+0xfffec54c>
1010ca94:	1007883a 	mov	r3,r2
1010ca98:	0023883a 	mov	r17,zero
1010ca9c:	880a927a 	slli	r5,r17,9
1010caa0:	1805883a 	mov	r2,r3
1010caa4:	8822977a 	slli	r17,r17,29
1010caa8:	280ad33a 	srli	r5,r5,12
1010caac:	003ff406 	br	1010ca80 <__alt_data_end+0xfffeca80>
1010cab0:	10c003cc 	andi	r3,r2,15
1010cab4:	01000104 	movi	r4,4
1010cab8:	193ff626 	beq	r3,r4,1010ca94 <__alt_data_end+0xfffeca94>
1010cabc:	0023883a 	mov	r17,zero
1010cac0:	003fd506 	br	1010ca18 <__alt_data_end+0xfffeca18>
1010cac4:	0005883a 	mov	r2,zero
1010cac8:	003fe706 	br	1010ca68 <__alt_data_end+0xfffeca68>
1010cacc:	00800434 	movhi	r2,16
1010cad0:	89400234 	orhi	r5,r17,8
1010cad4:	10bfffc4 	addi	r2,r2,-1
1010cad8:	b02b883a 	mov	r21,r22
1010cadc:	288a703a 	and	r5,r5,r2
1010cae0:	4029883a 	mov	r20,r8
1010cae4:	003eff06 	br	1010c6e4 <__alt_data_end+0xfffec6e4>

1010cae8 <__subdf3>:
1010cae8:	02000434 	movhi	r8,16
1010caec:	423fffc4 	addi	r8,r8,-1
1010caf0:	defffb04 	addi	sp,sp,-20
1010caf4:	2a14703a 	and	r10,r5,r8
1010caf8:	3812d53a 	srli	r9,r7,20
1010cafc:	3a10703a 	and	r8,r7,r8
1010cb00:	2006d77a 	srli	r3,r4,29
1010cb04:	3004d77a 	srli	r2,r6,29
1010cb08:	dc000015 	stw	r16,0(sp)
1010cb0c:	501490fa 	slli	r10,r10,3
1010cb10:	2820d53a 	srli	r16,r5,20
1010cb14:	401090fa 	slli	r8,r8,3
1010cb18:	dc800215 	stw	r18,8(sp)
1010cb1c:	dc400115 	stw	r17,4(sp)
1010cb20:	dfc00415 	stw	ra,16(sp)
1010cb24:	202290fa 	slli	r17,r4,3
1010cb28:	dcc00315 	stw	r19,12(sp)
1010cb2c:	4a41ffcc 	andi	r9,r9,2047
1010cb30:	0101ffc4 	movi	r4,2047
1010cb34:	2824d7fa 	srli	r18,r5,31
1010cb38:	8401ffcc 	andi	r16,r16,2047
1010cb3c:	50c6b03a 	or	r3,r10,r3
1010cb40:	380ed7fa 	srli	r7,r7,31
1010cb44:	408ab03a 	or	r5,r8,r2
1010cb48:	300c90fa 	slli	r6,r6,3
1010cb4c:	49009626 	beq	r9,r4,1010cda8 <__subdf3+0x2c0>
1010cb50:	39c0005c 	xori	r7,r7,1
1010cb54:	8245c83a 	sub	r2,r16,r9
1010cb58:	3c807426 	beq	r7,r18,1010cd2c <__subdf3+0x244>
1010cb5c:	0080af0e 	bge	zero,r2,1010ce1c <__subdf3+0x334>
1010cb60:	48002a1e 	bne	r9,zero,1010cc0c <__subdf3+0x124>
1010cb64:	2988b03a 	or	r4,r5,r6
1010cb68:	20009a1e 	bne	r4,zero,1010cdd4 <__subdf3+0x2ec>
1010cb6c:	888001cc 	andi	r2,r17,7
1010cb70:	10000726 	beq	r2,zero,1010cb90 <__subdf3+0xa8>
1010cb74:	888003cc 	andi	r2,r17,15
1010cb78:	01000104 	movi	r4,4
1010cb7c:	11000426 	beq	r2,r4,1010cb90 <__subdf3+0xa8>
1010cb80:	890b883a 	add	r5,r17,r4
1010cb84:	2c63803a 	cmpltu	r17,r5,r17
1010cb88:	1c47883a 	add	r3,r3,r17
1010cb8c:	2823883a 	mov	r17,r5
1010cb90:	1880202c 	andhi	r2,r3,128
1010cb94:	10005926 	beq	r2,zero,1010ccfc <__subdf3+0x214>
1010cb98:	84000044 	addi	r16,r16,1
1010cb9c:	0081ffc4 	movi	r2,2047
1010cba0:	8080be26 	beq	r16,r2,1010ce9c <__subdf3+0x3b4>
1010cba4:	017fe034 	movhi	r5,65408
1010cba8:	297fffc4 	addi	r5,r5,-1
1010cbac:	1946703a 	and	r3,r3,r5
1010cbb0:	1804977a 	slli	r2,r3,29
1010cbb4:	1806927a 	slli	r3,r3,9
1010cbb8:	8822d0fa 	srli	r17,r17,3
1010cbbc:	8401ffcc 	andi	r16,r16,2047
1010cbc0:	180ad33a 	srli	r5,r3,12
1010cbc4:	9100004c 	andi	r4,r18,1
1010cbc8:	1444b03a 	or	r2,r2,r17
1010cbcc:	80c1ffcc 	andi	r3,r16,2047
1010cbd0:	1820953a 	slli	r16,r3,20
1010cbd4:	20c03fcc 	andi	r3,r4,255
1010cbd8:	180897fa 	slli	r4,r3,31
1010cbdc:	00c00434 	movhi	r3,16
1010cbe0:	18ffffc4 	addi	r3,r3,-1
1010cbe4:	28c6703a 	and	r3,r5,r3
1010cbe8:	1c06b03a 	or	r3,r3,r16
1010cbec:	1906b03a 	or	r3,r3,r4
1010cbf0:	dfc00417 	ldw	ra,16(sp)
1010cbf4:	dcc00317 	ldw	r19,12(sp)
1010cbf8:	dc800217 	ldw	r18,8(sp)
1010cbfc:	dc400117 	ldw	r17,4(sp)
1010cc00:	dc000017 	ldw	r16,0(sp)
1010cc04:	dec00504 	addi	sp,sp,20
1010cc08:	f800283a 	ret
1010cc0c:	0101ffc4 	movi	r4,2047
1010cc10:	813fd626 	beq	r16,r4,1010cb6c <__alt_data_end+0xfffecb6c>
1010cc14:	29402034 	orhi	r5,r5,128
1010cc18:	01000e04 	movi	r4,56
1010cc1c:	2080a316 	blt	r4,r2,1010ceac <__subdf3+0x3c4>
1010cc20:	010007c4 	movi	r4,31
1010cc24:	2080c616 	blt	r4,r2,1010cf40 <__subdf3+0x458>
1010cc28:	01000804 	movi	r4,32
1010cc2c:	2089c83a 	sub	r4,r4,r2
1010cc30:	2910983a 	sll	r8,r5,r4
1010cc34:	308ed83a 	srl	r7,r6,r2
1010cc38:	3108983a 	sll	r4,r6,r4
1010cc3c:	2884d83a 	srl	r2,r5,r2
1010cc40:	41ccb03a 	or	r6,r8,r7
1010cc44:	2008c03a 	cmpne	r4,r4,zero
1010cc48:	310cb03a 	or	r6,r6,r4
1010cc4c:	898dc83a 	sub	r6,r17,r6
1010cc50:	89a3803a 	cmpltu	r17,r17,r6
1010cc54:	1887c83a 	sub	r3,r3,r2
1010cc58:	1c47c83a 	sub	r3,r3,r17
1010cc5c:	3023883a 	mov	r17,r6
1010cc60:	1880202c 	andhi	r2,r3,128
1010cc64:	10002326 	beq	r2,zero,1010ccf4 <__subdf3+0x20c>
1010cc68:	04c02034 	movhi	r19,128
1010cc6c:	9cffffc4 	addi	r19,r19,-1
1010cc70:	1ce6703a 	and	r19,r3,r19
1010cc74:	98007a26 	beq	r19,zero,1010ce60 <__subdf3+0x378>
1010cc78:	9809883a 	mov	r4,r19
1010cc7c:	010d5e80 	call	1010d5e8 <__clzsi2>
1010cc80:	113ffe04 	addi	r4,r2,-8
1010cc84:	00c007c4 	movi	r3,31
1010cc88:	19007b16 	blt	r3,r4,1010ce78 <__subdf3+0x390>
1010cc8c:	00800804 	movi	r2,32
1010cc90:	1105c83a 	sub	r2,r2,r4
1010cc94:	8884d83a 	srl	r2,r17,r2
1010cc98:	9906983a 	sll	r3,r19,r4
1010cc9c:	8922983a 	sll	r17,r17,r4
1010cca0:	10c4b03a 	or	r2,r2,r3
1010cca4:	24007816 	blt	r4,r16,1010ce88 <__subdf3+0x3a0>
1010cca8:	2421c83a 	sub	r16,r4,r16
1010ccac:	80c00044 	addi	r3,r16,1
1010ccb0:	010007c4 	movi	r4,31
1010ccb4:	20c09516 	blt	r4,r3,1010cf0c <__subdf3+0x424>
1010ccb8:	01400804 	movi	r5,32
1010ccbc:	28cbc83a 	sub	r5,r5,r3
1010ccc0:	88c8d83a 	srl	r4,r17,r3
1010ccc4:	8962983a 	sll	r17,r17,r5
1010ccc8:	114a983a 	sll	r5,r2,r5
1010cccc:	10c6d83a 	srl	r3,r2,r3
1010ccd0:	8804c03a 	cmpne	r2,r17,zero
1010ccd4:	290ab03a 	or	r5,r5,r4
1010ccd8:	28a2b03a 	or	r17,r5,r2
1010ccdc:	0021883a 	mov	r16,zero
1010cce0:	003fa206 	br	1010cb6c <__alt_data_end+0xfffecb6c>
1010cce4:	2090b03a 	or	r8,r4,r2
1010cce8:	40018e26 	beq	r8,zero,1010d324 <__subdf3+0x83c>
1010ccec:	1007883a 	mov	r3,r2
1010ccf0:	2023883a 	mov	r17,r4
1010ccf4:	888001cc 	andi	r2,r17,7
1010ccf8:	103f9e1e 	bne	r2,zero,1010cb74 <__alt_data_end+0xfffecb74>
1010ccfc:	1804977a 	slli	r2,r3,29
1010cd00:	8822d0fa 	srli	r17,r17,3
1010cd04:	1810d0fa 	srli	r8,r3,3
1010cd08:	9100004c 	andi	r4,r18,1
1010cd0c:	1444b03a 	or	r2,r2,r17
1010cd10:	00c1ffc4 	movi	r3,2047
1010cd14:	80c02826 	beq	r16,r3,1010cdb8 <__subdf3+0x2d0>
1010cd18:	01400434 	movhi	r5,16
1010cd1c:	297fffc4 	addi	r5,r5,-1
1010cd20:	80e0703a 	and	r16,r16,r3
1010cd24:	414a703a 	and	r5,r8,r5
1010cd28:	003fa806 	br	1010cbcc <__alt_data_end+0xfffecbcc>
1010cd2c:	0080630e 	bge	zero,r2,1010cebc <__subdf3+0x3d4>
1010cd30:	48003026 	beq	r9,zero,1010cdf4 <__subdf3+0x30c>
1010cd34:	0101ffc4 	movi	r4,2047
1010cd38:	813f8c26 	beq	r16,r4,1010cb6c <__alt_data_end+0xfffecb6c>
1010cd3c:	29402034 	orhi	r5,r5,128
1010cd40:	01000e04 	movi	r4,56
1010cd44:	2080a90e 	bge	r4,r2,1010cfec <__subdf3+0x504>
1010cd48:	298cb03a 	or	r6,r5,r6
1010cd4c:	3012c03a 	cmpne	r9,r6,zero
1010cd50:	0005883a 	mov	r2,zero
1010cd54:	4c53883a 	add	r9,r9,r17
1010cd58:	4c63803a 	cmpltu	r17,r9,r17
1010cd5c:	10c7883a 	add	r3,r2,r3
1010cd60:	88c7883a 	add	r3,r17,r3
1010cd64:	4823883a 	mov	r17,r9
1010cd68:	1880202c 	andhi	r2,r3,128
1010cd6c:	1000d026 	beq	r2,zero,1010d0b0 <__subdf3+0x5c8>
1010cd70:	84000044 	addi	r16,r16,1
1010cd74:	0081ffc4 	movi	r2,2047
1010cd78:	8080fe26 	beq	r16,r2,1010d174 <__subdf3+0x68c>
1010cd7c:	00bfe034 	movhi	r2,65408
1010cd80:	10bfffc4 	addi	r2,r2,-1
1010cd84:	1886703a 	and	r3,r3,r2
1010cd88:	880ad07a 	srli	r5,r17,1
1010cd8c:	180497fa 	slli	r2,r3,31
1010cd90:	8900004c 	andi	r4,r17,1
1010cd94:	2922b03a 	or	r17,r5,r4
1010cd98:	1806d07a 	srli	r3,r3,1
1010cd9c:	1462b03a 	or	r17,r2,r17
1010cda0:	3825883a 	mov	r18,r7
1010cda4:	003f7106 	br	1010cb6c <__alt_data_end+0xfffecb6c>
1010cda8:	2984b03a 	or	r2,r5,r6
1010cdac:	103f6826 	beq	r2,zero,1010cb50 <__alt_data_end+0xfffecb50>
1010cdb0:	39c03fcc 	andi	r7,r7,255
1010cdb4:	003f6706 	br	1010cb54 <__alt_data_end+0xfffecb54>
1010cdb8:	4086b03a 	or	r3,r8,r2
1010cdbc:	18015226 	beq	r3,zero,1010d308 <__subdf3+0x820>
1010cdc0:	00c00434 	movhi	r3,16
1010cdc4:	41400234 	orhi	r5,r8,8
1010cdc8:	18ffffc4 	addi	r3,r3,-1
1010cdcc:	28ca703a 	and	r5,r5,r3
1010cdd0:	003f7e06 	br	1010cbcc <__alt_data_end+0xfffecbcc>
1010cdd4:	10bfffc4 	addi	r2,r2,-1
1010cdd8:	1000491e 	bne	r2,zero,1010cf00 <__subdf3+0x418>
1010cddc:	898fc83a 	sub	r7,r17,r6
1010cde0:	89e3803a 	cmpltu	r17,r17,r7
1010cde4:	1947c83a 	sub	r3,r3,r5
1010cde8:	1c47c83a 	sub	r3,r3,r17
1010cdec:	3823883a 	mov	r17,r7
1010cdf0:	003f9b06 	br	1010cc60 <__alt_data_end+0xfffecc60>
1010cdf4:	2988b03a 	or	r4,r5,r6
1010cdf8:	203f5c26 	beq	r4,zero,1010cb6c <__alt_data_end+0xfffecb6c>
1010cdfc:	10bfffc4 	addi	r2,r2,-1
1010ce00:	1000931e 	bne	r2,zero,1010d050 <__subdf3+0x568>
1010ce04:	898d883a 	add	r6,r17,r6
1010ce08:	3463803a 	cmpltu	r17,r6,r17
1010ce0c:	1947883a 	add	r3,r3,r5
1010ce10:	88c7883a 	add	r3,r17,r3
1010ce14:	3023883a 	mov	r17,r6
1010ce18:	003fd306 	br	1010cd68 <__alt_data_end+0xfffecd68>
1010ce1c:	1000541e 	bne	r2,zero,1010cf70 <__subdf3+0x488>
1010ce20:	80800044 	addi	r2,r16,1
1010ce24:	1081ffcc 	andi	r2,r2,2047
1010ce28:	01000044 	movi	r4,1
1010ce2c:	2080a20e 	bge	r4,r2,1010d0b8 <__subdf3+0x5d0>
1010ce30:	8989c83a 	sub	r4,r17,r6
1010ce34:	8905803a 	cmpltu	r2,r17,r4
1010ce38:	1967c83a 	sub	r19,r3,r5
1010ce3c:	98a7c83a 	sub	r19,r19,r2
1010ce40:	9880202c 	andhi	r2,r19,128
1010ce44:	10006326 	beq	r2,zero,1010cfd4 <__subdf3+0x4ec>
1010ce48:	3463c83a 	sub	r17,r6,r17
1010ce4c:	28c7c83a 	sub	r3,r5,r3
1010ce50:	344d803a 	cmpltu	r6,r6,r17
1010ce54:	19a7c83a 	sub	r19,r3,r6
1010ce58:	3825883a 	mov	r18,r7
1010ce5c:	983f861e 	bne	r19,zero,1010cc78 <__alt_data_end+0xfffecc78>
1010ce60:	8809883a 	mov	r4,r17
1010ce64:	010d5e80 	call	1010d5e8 <__clzsi2>
1010ce68:	10800804 	addi	r2,r2,32
1010ce6c:	113ffe04 	addi	r4,r2,-8
1010ce70:	00c007c4 	movi	r3,31
1010ce74:	193f850e 	bge	r3,r4,1010cc8c <__alt_data_end+0xfffecc8c>
1010ce78:	10bff604 	addi	r2,r2,-40
1010ce7c:	8884983a 	sll	r2,r17,r2
1010ce80:	0023883a 	mov	r17,zero
1010ce84:	243f880e 	bge	r4,r16,1010cca8 <__alt_data_end+0xfffecca8>
1010ce88:	00ffe034 	movhi	r3,65408
1010ce8c:	18ffffc4 	addi	r3,r3,-1
1010ce90:	8121c83a 	sub	r16,r16,r4
1010ce94:	10c6703a 	and	r3,r2,r3
1010ce98:	003f3406 	br	1010cb6c <__alt_data_end+0xfffecb6c>
1010ce9c:	9100004c 	andi	r4,r18,1
1010cea0:	000b883a 	mov	r5,zero
1010cea4:	0005883a 	mov	r2,zero
1010cea8:	003f4806 	br	1010cbcc <__alt_data_end+0xfffecbcc>
1010ceac:	298cb03a 	or	r6,r5,r6
1010ceb0:	300cc03a 	cmpne	r6,r6,zero
1010ceb4:	0005883a 	mov	r2,zero
1010ceb8:	003f6406 	br	1010cc4c <__alt_data_end+0xfffecc4c>
1010cebc:	10009a1e 	bne	r2,zero,1010d128 <__subdf3+0x640>
1010cec0:	82400044 	addi	r9,r16,1
1010cec4:	4881ffcc 	andi	r2,r9,2047
1010cec8:	02800044 	movi	r10,1
1010cecc:	5080670e 	bge	r10,r2,1010d06c <__subdf3+0x584>
1010ced0:	0081ffc4 	movi	r2,2047
1010ced4:	4880af26 	beq	r9,r2,1010d194 <__subdf3+0x6ac>
1010ced8:	898d883a 	add	r6,r17,r6
1010cedc:	1945883a 	add	r2,r3,r5
1010cee0:	3447803a 	cmpltu	r3,r6,r17
1010cee4:	1887883a 	add	r3,r3,r2
1010cee8:	182297fa 	slli	r17,r3,31
1010ceec:	300cd07a 	srli	r6,r6,1
1010cef0:	1806d07a 	srli	r3,r3,1
1010cef4:	4821883a 	mov	r16,r9
1010cef8:	89a2b03a 	or	r17,r17,r6
1010cefc:	003f1b06 	br	1010cb6c <__alt_data_end+0xfffecb6c>
1010cf00:	0101ffc4 	movi	r4,2047
1010cf04:	813f441e 	bne	r16,r4,1010cc18 <__alt_data_end+0xfffecc18>
1010cf08:	003f1806 	br	1010cb6c <__alt_data_end+0xfffecb6c>
1010cf0c:	843ff844 	addi	r16,r16,-31
1010cf10:	01400804 	movi	r5,32
1010cf14:	1408d83a 	srl	r4,r2,r16
1010cf18:	19405026 	beq	r3,r5,1010d05c <__subdf3+0x574>
1010cf1c:	01401004 	movi	r5,64
1010cf20:	28c7c83a 	sub	r3,r5,r3
1010cf24:	10c4983a 	sll	r2,r2,r3
1010cf28:	88a2b03a 	or	r17,r17,r2
1010cf2c:	8822c03a 	cmpne	r17,r17,zero
1010cf30:	2462b03a 	or	r17,r4,r17
1010cf34:	0007883a 	mov	r3,zero
1010cf38:	0021883a 	mov	r16,zero
1010cf3c:	003f6d06 	br	1010ccf4 <__alt_data_end+0xfffeccf4>
1010cf40:	11fff804 	addi	r7,r2,-32
1010cf44:	01000804 	movi	r4,32
1010cf48:	29ced83a 	srl	r7,r5,r7
1010cf4c:	11004526 	beq	r2,r4,1010d064 <__subdf3+0x57c>
1010cf50:	01001004 	movi	r4,64
1010cf54:	2089c83a 	sub	r4,r4,r2
1010cf58:	2904983a 	sll	r2,r5,r4
1010cf5c:	118cb03a 	or	r6,r2,r6
1010cf60:	300cc03a 	cmpne	r6,r6,zero
1010cf64:	398cb03a 	or	r6,r7,r6
1010cf68:	0005883a 	mov	r2,zero
1010cf6c:	003f3706 	br	1010cc4c <__alt_data_end+0xfffecc4c>
1010cf70:	80002a26 	beq	r16,zero,1010d01c <__subdf3+0x534>
1010cf74:	0101ffc4 	movi	r4,2047
1010cf78:	49006626 	beq	r9,r4,1010d114 <__subdf3+0x62c>
1010cf7c:	0085c83a 	sub	r2,zero,r2
1010cf80:	18c02034 	orhi	r3,r3,128
1010cf84:	01000e04 	movi	r4,56
1010cf88:	20807e16 	blt	r4,r2,1010d184 <__subdf3+0x69c>
1010cf8c:	010007c4 	movi	r4,31
1010cf90:	2080e716 	blt	r4,r2,1010d330 <__subdf3+0x848>
1010cf94:	01000804 	movi	r4,32
1010cf98:	2089c83a 	sub	r4,r4,r2
1010cf9c:	1914983a 	sll	r10,r3,r4
1010cfa0:	8890d83a 	srl	r8,r17,r2
1010cfa4:	8908983a 	sll	r4,r17,r4
1010cfa8:	1884d83a 	srl	r2,r3,r2
1010cfac:	5222b03a 	or	r17,r10,r8
1010cfb0:	2006c03a 	cmpne	r3,r4,zero
1010cfb4:	88e2b03a 	or	r17,r17,r3
1010cfb8:	3463c83a 	sub	r17,r6,r17
1010cfbc:	2885c83a 	sub	r2,r5,r2
1010cfc0:	344d803a 	cmpltu	r6,r6,r17
1010cfc4:	1187c83a 	sub	r3,r2,r6
1010cfc8:	4821883a 	mov	r16,r9
1010cfcc:	3825883a 	mov	r18,r7
1010cfd0:	003f2306 	br	1010cc60 <__alt_data_end+0xfffecc60>
1010cfd4:	24d0b03a 	or	r8,r4,r19
1010cfd8:	40001b1e 	bne	r8,zero,1010d048 <__subdf3+0x560>
1010cfdc:	0005883a 	mov	r2,zero
1010cfe0:	0009883a 	mov	r4,zero
1010cfe4:	0021883a 	mov	r16,zero
1010cfe8:	003f4906 	br	1010cd10 <__alt_data_end+0xfffecd10>
1010cfec:	010007c4 	movi	r4,31
1010cff0:	20803a16 	blt	r4,r2,1010d0dc <__subdf3+0x5f4>
1010cff4:	01000804 	movi	r4,32
1010cff8:	2089c83a 	sub	r4,r4,r2
1010cffc:	2912983a 	sll	r9,r5,r4
1010d000:	3090d83a 	srl	r8,r6,r2
1010d004:	3108983a 	sll	r4,r6,r4
1010d008:	2884d83a 	srl	r2,r5,r2
1010d00c:	4a12b03a 	or	r9,r9,r8
1010d010:	2008c03a 	cmpne	r4,r4,zero
1010d014:	4912b03a 	or	r9,r9,r4
1010d018:	003f4e06 	br	1010cd54 <__alt_data_end+0xfffecd54>
1010d01c:	1c48b03a 	or	r4,r3,r17
1010d020:	20003c26 	beq	r4,zero,1010d114 <__subdf3+0x62c>
1010d024:	0084303a 	nor	r2,zero,r2
1010d028:	1000381e 	bne	r2,zero,1010d10c <__subdf3+0x624>
1010d02c:	3463c83a 	sub	r17,r6,r17
1010d030:	28c5c83a 	sub	r2,r5,r3
1010d034:	344d803a 	cmpltu	r6,r6,r17
1010d038:	1187c83a 	sub	r3,r2,r6
1010d03c:	4821883a 	mov	r16,r9
1010d040:	3825883a 	mov	r18,r7
1010d044:	003f0606 	br	1010cc60 <__alt_data_end+0xfffecc60>
1010d048:	2023883a 	mov	r17,r4
1010d04c:	003f0906 	br	1010cc74 <__alt_data_end+0xfffecc74>
1010d050:	0101ffc4 	movi	r4,2047
1010d054:	813f3a1e 	bne	r16,r4,1010cd40 <__alt_data_end+0xfffecd40>
1010d058:	003ec406 	br	1010cb6c <__alt_data_end+0xfffecb6c>
1010d05c:	0005883a 	mov	r2,zero
1010d060:	003fb106 	br	1010cf28 <__alt_data_end+0xfffecf28>
1010d064:	0005883a 	mov	r2,zero
1010d068:	003fbc06 	br	1010cf5c <__alt_data_end+0xfffecf5c>
1010d06c:	1c44b03a 	or	r2,r3,r17
1010d070:	80008e1e 	bne	r16,zero,1010d2ac <__subdf3+0x7c4>
1010d074:	1000c826 	beq	r2,zero,1010d398 <__subdf3+0x8b0>
1010d078:	2984b03a 	or	r2,r5,r6
1010d07c:	103ebb26 	beq	r2,zero,1010cb6c <__alt_data_end+0xfffecb6c>
1010d080:	8989883a 	add	r4,r17,r6
1010d084:	1945883a 	add	r2,r3,r5
1010d088:	2447803a 	cmpltu	r3,r4,r17
1010d08c:	1887883a 	add	r3,r3,r2
1010d090:	1880202c 	andhi	r2,r3,128
1010d094:	2023883a 	mov	r17,r4
1010d098:	103f1626 	beq	r2,zero,1010ccf4 <__alt_data_end+0xfffeccf4>
1010d09c:	00bfe034 	movhi	r2,65408
1010d0a0:	10bfffc4 	addi	r2,r2,-1
1010d0a4:	5021883a 	mov	r16,r10
1010d0a8:	1886703a 	and	r3,r3,r2
1010d0ac:	003eaf06 	br	1010cb6c <__alt_data_end+0xfffecb6c>
1010d0b0:	3825883a 	mov	r18,r7
1010d0b4:	003f0f06 	br	1010ccf4 <__alt_data_end+0xfffeccf4>
1010d0b8:	1c44b03a 	or	r2,r3,r17
1010d0bc:	8000251e 	bne	r16,zero,1010d154 <__subdf3+0x66c>
1010d0c0:	1000661e 	bne	r2,zero,1010d25c <__subdf3+0x774>
1010d0c4:	2990b03a 	or	r8,r5,r6
1010d0c8:	40009626 	beq	r8,zero,1010d324 <__subdf3+0x83c>
1010d0cc:	2807883a 	mov	r3,r5
1010d0d0:	3023883a 	mov	r17,r6
1010d0d4:	3825883a 	mov	r18,r7
1010d0d8:	003ea406 	br	1010cb6c <__alt_data_end+0xfffecb6c>
1010d0dc:	127ff804 	addi	r9,r2,-32
1010d0e0:	01000804 	movi	r4,32
1010d0e4:	2a52d83a 	srl	r9,r5,r9
1010d0e8:	11008c26 	beq	r2,r4,1010d31c <__subdf3+0x834>
1010d0ec:	01001004 	movi	r4,64
1010d0f0:	2085c83a 	sub	r2,r4,r2
1010d0f4:	2884983a 	sll	r2,r5,r2
1010d0f8:	118cb03a 	or	r6,r2,r6
1010d0fc:	300cc03a 	cmpne	r6,r6,zero
1010d100:	4992b03a 	or	r9,r9,r6
1010d104:	0005883a 	mov	r2,zero
1010d108:	003f1206 	br	1010cd54 <__alt_data_end+0xfffecd54>
1010d10c:	0101ffc4 	movi	r4,2047
1010d110:	493f9c1e 	bne	r9,r4,1010cf84 <__alt_data_end+0xfffecf84>
1010d114:	2807883a 	mov	r3,r5
1010d118:	3023883a 	mov	r17,r6
1010d11c:	4821883a 	mov	r16,r9
1010d120:	3825883a 	mov	r18,r7
1010d124:	003e9106 	br	1010cb6c <__alt_data_end+0xfffecb6c>
1010d128:	80001f1e 	bne	r16,zero,1010d1a8 <__subdf3+0x6c0>
1010d12c:	1c48b03a 	or	r4,r3,r17
1010d130:	20005a26 	beq	r4,zero,1010d29c <__subdf3+0x7b4>
1010d134:	0084303a 	nor	r2,zero,r2
1010d138:	1000561e 	bne	r2,zero,1010d294 <__subdf3+0x7ac>
1010d13c:	89a3883a 	add	r17,r17,r6
1010d140:	1945883a 	add	r2,r3,r5
1010d144:	898d803a 	cmpltu	r6,r17,r6
1010d148:	3087883a 	add	r3,r6,r2
1010d14c:	4821883a 	mov	r16,r9
1010d150:	003f0506 	br	1010cd68 <__alt_data_end+0xfffecd68>
1010d154:	10002b1e 	bne	r2,zero,1010d204 <__subdf3+0x71c>
1010d158:	2984b03a 	or	r2,r5,r6
1010d15c:	10008026 	beq	r2,zero,1010d360 <__subdf3+0x878>
1010d160:	2807883a 	mov	r3,r5
1010d164:	3023883a 	mov	r17,r6
1010d168:	3825883a 	mov	r18,r7
1010d16c:	0401ffc4 	movi	r16,2047
1010d170:	003e7e06 	br	1010cb6c <__alt_data_end+0xfffecb6c>
1010d174:	3809883a 	mov	r4,r7
1010d178:	0011883a 	mov	r8,zero
1010d17c:	0005883a 	mov	r2,zero
1010d180:	003ee306 	br	1010cd10 <__alt_data_end+0xfffecd10>
1010d184:	1c62b03a 	or	r17,r3,r17
1010d188:	8822c03a 	cmpne	r17,r17,zero
1010d18c:	0005883a 	mov	r2,zero
1010d190:	003f8906 	br	1010cfb8 <__alt_data_end+0xfffecfb8>
1010d194:	3809883a 	mov	r4,r7
1010d198:	4821883a 	mov	r16,r9
1010d19c:	0011883a 	mov	r8,zero
1010d1a0:	0005883a 	mov	r2,zero
1010d1a4:	003eda06 	br	1010cd10 <__alt_data_end+0xfffecd10>
1010d1a8:	0101ffc4 	movi	r4,2047
1010d1ac:	49003b26 	beq	r9,r4,1010d29c <__subdf3+0x7b4>
1010d1b0:	0085c83a 	sub	r2,zero,r2
1010d1b4:	18c02034 	orhi	r3,r3,128
1010d1b8:	01000e04 	movi	r4,56
1010d1bc:	20806e16 	blt	r4,r2,1010d378 <__subdf3+0x890>
1010d1c0:	010007c4 	movi	r4,31
1010d1c4:	20807716 	blt	r4,r2,1010d3a4 <__subdf3+0x8bc>
1010d1c8:	01000804 	movi	r4,32
1010d1cc:	2089c83a 	sub	r4,r4,r2
1010d1d0:	1914983a 	sll	r10,r3,r4
1010d1d4:	8890d83a 	srl	r8,r17,r2
1010d1d8:	8908983a 	sll	r4,r17,r4
1010d1dc:	1884d83a 	srl	r2,r3,r2
1010d1e0:	5222b03a 	or	r17,r10,r8
1010d1e4:	2006c03a 	cmpne	r3,r4,zero
1010d1e8:	88e2b03a 	or	r17,r17,r3
1010d1ec:	89a3883a 	add	r17,r17,r6
1010d1f0:	1145883a 	add	r2,r2,r5
1010d1f4:	898d803a 	cmpltu	r6,r17,r6
1010d1f8:	3087883a 	add	r3,r6,r2
1010d1fc:	4821883a 	mov	r16,r9
1010d200:	003ed906 	br	1010cd68 <__alt_data_end+0xfffecd68>
1010d204:	2984b03a 	or	r2,r5,r6
1010d208:	10004226 	beq	r2,zero,1010d314 <__subdf3+0x82c>
1010d20c:	1808d0fa 	srli	r4,r3,3
1010d210:	8822d0fa 	srli	r17,r17,3
1010d214:	1806977a 	slli	r3,r3,29
1010d218:	2080022c 	andhi	r2,r4,8
1010d21c:	1c62b03a 	or	r17,r3,r17
1010d220:	10000826 	beq	r2,zero,1010d244 <__subdf3+0x75c>
1010d224:	2812d0fa 	srli	r9,r5,3
1010d228:	4880022c 	andhi	r2,r9,8
1010d22c:	1000051e 	bne	r2,zero,1010d244 <__subdf3+0x75c>
1010d230:	300cd0fa 	srli	r6,r6,3
1010d234:	2804977a 	slli	r2,r5,29
1010d238:	4809883a 	mov	r4,r9
1010d23c:	3825883a 	mov	r18,r7
1010d240:	11a2b03a 	or	r17,r2,r6
1010d244:	8806d77a 	srli	r3,r17,29
1010d248:	200890fa 	slli	r4,r4,3
1010d24c:	882290fa 	slli	r17,r17,3
1010d250:	0401ffc4 	movi	r16,2047
1010d254:	1906b03a 	or	r3,r3,r4
1010d258:	003e4406 	br	1010cb6c <__alt_data_end+0xfffecb6c>
1010d25c:	2984b03a 	or	r2,r5,r6
1010d260:	103e4226 	beq	r2,zero,1010cb6c <__alt_data_end+0xfffecb6c>
1010d264:	8989c83a 	sub	r4,r17,r6
1010d268:	8911803a 	cmpltu	r8,r17,r4
1010d26c:	1945c83a 	sub	r2,r3,r5
1010d270:	1205c83a 	sub	r2,r2,r8
1010d274:	1200202c 	andhi	r8,r2,128
1010d278:	403e9a26 	beq	r8,zero,1010cce4 <__alt_data_end+0xfffecce4>
1010d27c:	3463c83a 	sub	r17,r6,r17
1010d280:	28c5c83a 	sub	r2,r5,r3
1010d284:	344d803a 	cmpltu	r6,r6,r17
1010d288:	1187c83a 	sub	r3,r2,r6
1010d28c:	3825883a 	mov	r18,r7
1010d290:	003e3606 	br	1010cb6c <__alt_data_end+0xfffecb6c>
1010d294:	0101ffc4 	movi	r4,2047
1010d298:	493fc71e 	bne	r9,r4,1010d1b8 <__alt_data_end+0xfffed1b8>
1010d29c:	2807883a 	mov	r3,r5
1010d2a0:	3023883a 	mov	r17,r6
1010d2a4:	4821883a 	mov	r16,r9
1010d2a8:	003e3006 	br	1010cb6c <__alt_data_end+0xfffecb6c>
1010d2ac:	10003626 	beq	r2,zero,1010d388 <__subdf3+0x8a0>
1010d2b0:	2984b03a 	or	r2,r5,r6
1010d2b4:	10001726 	beq	r2,zero,1010d314 <__subdf3+0x82c>
1010d2b8:	1808d0fa 	srli	r4,r3,3
1010d2bc:	8822d0fa 	srli	r17,r17,3
1010d2c0:	1806977a 	slli	r3,r3,29
1010d2c4:	2080022c 	andhi	r2,r4,8
1010d2c8:	1c62b03a 	or	r17,r3,r17
1010d2cc:	10000726 	beq	r2,zero,1010d2ec <__subdf3+0x804>
1010d2d0:	2812d0fa 	srli	r9,r5,3
1010d2d4:	4880022c 	andhi	r2,r9,8
1010d2d8:	1000041e 	bne	r2,zero,1010d2ec <__subdf3+0x804>
1010d2dc:	300cd0fa 	srli	r6,r6,3
1010d2e0:	2804977a 	slli	r2,r5,29
1010d2e4:	4809883a 	mov	r4,r9
1010d2e8:	11a2b03a 	or	r17,r2,r6
1010d2ec:	8806d77a 	srli	r3,r17,29
1010d2f0:	200890fa 	slli	r4,r4,3
1010d2f4:	882290fa 	slli	r17,r17,3
1010d2f8:	3825883a 	mov	r18,r7
1010d2fc:	1906b03a 	or	r3,r3,r4
1010d300:	0401ffc4 	movi	r16,2047
1010d304:	003e1906 	br	1010cb6c <__alt_data_end+0xfffecb6c>
1010d308:	000b883a 	mov	r5,zero
1010d30c:	0005883a 	mov	r2,zero
1010d310:	003e2e06 	br	1010cbcc <__alt_data_end+0xfffecbcc>
1010d314:	0401ffc4 	movi	r16,2047
1010d318:	003e1406 	br	1010cb6c <__alt_data_end+0xfffecb6c>
1010d31c:	0005883a 	mov	r2,zero
1010d320:	003f7506 	br	1010d0f8 <__alt_data_end+0xfffed0f8>
1010d324:	0005883a 	mov	r2,zero
1010d328:	0009883a 	mov	r4,zero
1010d32c:	003e7806 	br	1010cd10 <__alt_data_end+0xfffecd10>
1010d330:	123ff804 	addi	r8,r2,-32
1010d334:	01000804 	movi	r4,32
1010d338:	1a10d83a 	srl	r8,r3,r8
1010d33c:	11002526 	beq	r2,r4,1010d3d4 <__subdf3+0x8ec>
1010d340:	01001004 	movi	r4,64
1010d344:	2085c83a 	sub	r2,r4,r2
1010d348:	1884983a 	sll	r2,r3,r2
1010d34c:	1444b03a 	or	r2,r2,r17
1010d350:	1004c03a 	cmpne	r2,r2,zero
1010d354:	40a2b03a 	or	r17,r8,r2
1010d358:	0005883a 	mov	r2,zero
1010d35c:	003f1606 	br	1010cfb8 <__alt_data_end+0xfffecfb8>
1010d360:	02000434 	movhi	r8,16
1010d364:	0009883a 	mov	r4,zero
1010d368:	423fffc4 	addi	r8,r8,-1
1010d36c:	00bfffc4 	movi	r2,-1
1010d370:	0401ffc4 	movi	r16,2047
1010d374:	003e6606 	br	1010cd10 <__alt_data_end+0xfffecd10>
1010d378:	1c62b03a 	or	r17,r3,r17
1010d37c:	8822c03a 	cmpne	r17,r17,zero
1010d380:	0005883a 	mov	r2,zero
1010d384:	003f9906 	br	1010d1ec <__alt_data_end+0xfffed1ec>
1010d388:	2807883a 	mov	r3,r5
1010d38c:	3023883a 	mov	r17,r6
1010d390:	0401ffc4 	movi	r16,2047
1010d394:	003df506 	br	1010cb6c <__alt_data_end+0xfffecb6c>
1010d398:	2807883a 	mov	r3,r5
1010d39c:	3023883a 	mov	r17,r6
1010d3a0:	003df206 	br	1010cb6c <__alt_data_end+0xfffecb6c>
1010d3a4:	123ff804 	addi	r8,r2,-32
1010d3a8:	01000804 	movi	r4,32
1010d3ac:	1a10d83a 	srl	r8,r3,r8
1010d3b0:	11000a26 	beq	r2,r4,1010d3dc <__subdf3+0x8f4>
1010d3b4:	01001004 	movi	r4,64
1010d3b8:	2085c83a 	sub	r2,r4,r2
1010d3bc:	1884983a 	sll	r2,r3,r2
1010d3c0:	1444b03a 	or	r2,r2,r17
1010d3c4:	1004c03a 	cmpne	r2,r2,zero
1010d3c8:	40a2b03a 	or	r17,r8,r2
1010d3cc:	0005883a 	mov	r2,zero
1010d3d0:	003f8606 	br	1010d1ec <__alt_data_end+0xfffed1ec>
1010d3d4:	0005883a 	mov	r2,zero
1010d3d8:	003fdc06 	br	1010d34c <__alt_data_end+0xfffed34c>
1010d3dc:	0005883a 	mov	r2,zero
1010d3e0:	003ff706 	br	1010d3c0 <__alt_data_end+0xfffed3c0>

1010d3e4 <__fixdfsi>:
1010d3e4:	280cd53a 	srli	r6,r5,20
1010d3e8:	00c00434 	movhi	r3,16
1010d3ec:	18ffffc4 	addi	r3,r3,-1
1010d3f0:	3181ffcc 	andi	r6,r6,2047
1010d3f4:	01c0ff84 	movi	r7,1022
1010d3f8:	28c6703a 	and	r3,r5,r3
1010d3fc:	280ad7fa 	srli	r5,r5,31
1010d400:	3980120e 	bge	r7,r6,1010d44c <__fixdfsi+0x68>
1010d404:	00810744 	movi	r2,1053
1010d408:	11800c16 	blt	r2,r6,1010d43c <__fixdfsi+0x58>
1010d40c:	00810cc4 	movi	r2,1075
1010d410:	1185c83a 	sub	r2,r2,r6
1010d414:	01c007c4 	movi	r7,31
1010d418:	18c00434 	orhi	r3,r3,16
1010d41c:	38800d16 	blt	r7,r2,1010d454 <__fixdfsi+0x70>
1010d420:	31befb44 	addi	r6,r6,-1043
1010d424:	2084d83a 	srl	r2,r4,r2
1010d428:	1986983a 	sll	r3,r3,r6
1010d42c:	1884b03a 	or	r2,r3,r2
1010d430:	28000726 	beq	r5,zero,1010d450 <__fixdfsi+0x6c>
1010d434:	0085c83a 	sub	r2,zero,r2
1010d438:	f800283a 	ret
1010d43c:	00a00034 	movhi	r2,32768
1010d440:	10bfffc4 	addi	r2,r2,-1
1010d444:	2885883a 	add	r2,r5,r2
1010d448:	f800283a 	ret
1010d44c:	0005883a 	mov	r2,zero
1010d450:	f800283a 	ret
1010d454:	008104c4 	movi	r2,1043
1010d458:	1185c83a 	sub	r2,r2,r6
1010d45c:	1884d83a 	srl	r2,r3,r2
1010d460:	003ff306 	br	1010d430 <__alt_data_end+0xfffed430>

1010d464 <__floatsidf>:
1010d464:	defffd04 	addi	sp,sp,-12
1010d468:	dfc00215 	stw	ra,8(sp)
1010d46c:	dc400115 	stw	r17,4(sp)
1010d470:	dc000015 	stw	r16,0(sp)
1010d474:	20002b26 	beq	r4,zero,1010d524 <__floatsidf+0xc0>
1010d478:	2023883a 	mov	r17,r4
1010d47c:	2020d7fa 	srli	r16,r4,31
1010d480:	20002d16 	blt	r4,zero,1010d538 <__floatsidf+0xd4>
1010d484:	8809883a 	mov	r4,r17
1010d488:	010d5e80 	call	1010d5e8 <__clzsi2>
1010d48c:	01410784 	movi	r5,1054
1010d490:	288bc83a 	sub	r5,r5,r2
1010d494:	01010cc4 	movi	r4,1075
1010d498:	2149c83a 	sub	r4,r4,r5
1010d49c:	00c007c4 	movi	r3,31
1010d4a0:	1900160e 	bge	r3,r4,1010d4fc <__floatsidf+0x98>
1010d4a4:	00c104c4 	movi	r3,1043
1010d4a8:	1947c83a 	sub	r3,r3,r5
1010d4ac:	88c6983a 	sll	r3,r17,r3
1010d4b0:	00800434 	movhi	r2,16
1010d4b4:	10bfffc4 	addi	r2,r2,-1
1010d4b8:	1886703a 	and	r3,r3,r2
1010d4bc:	2941ffcc 	andi	r5,r5,2047
1010d4c0:	800d883a 	mov	r6,r16
1010d4c4:	0005883a 	mov	r2,zero
1010d4c8:	280a953a 	slli	r5,r5,20
1010d4cc:	31803fcc 	andi	r6,r6,255
1010d4d0:	01000434 	movhi	r4,16
1010d4d4:	300c97fa 	slli	r6,r6,31
1010d4d8:	213fffc4 	addi	r4,r4,-1
1010d4dc:	1906703a 	and	r3,r3,r4
1010d4e0:	1946b03a 	or	r3,r3,r5
1010d4e4:	1986b03a 	or	r3,r3,r6
1010d4e8:	dfc00217 	ldw	ra,8(sp)
1010d4ec:	dc400117 	ldw	r17,4(sp)
1010d4f0:	dc000017 	ldw	r16,0(sp)
1010d4f4:	dec00304 	addi	sp,sp,12
1010d4f8:	f800283a 	ret
1010d4fc:	00c002c4 	movi	r3,11
1010d500:	1887c83a 	sub	r3,r3,r2
1010d504:	88c6d83a 	srl	r3,r17,r3
1010d508:	8904983a 	sll	r2,r17,r4
1010d50c:	01000434 	movhi	r4,16
1010d510:	213fffc4 	addi	r4,r4,-1
1010d514:	2941ffcc 	andi	r5,r5,2047
1010d518:	1906703a 	and	r3,r3,r4
1010d51c:	800d883a 	mov	r6,r16
1010d520:	003fe906 	br	1010d4c8 <__alt_data_end+0xfffed4c8>
1010d524:	000d883a 	mov	r6,zero
1010d528:	000b883a 	mov	r5,zero
1010d52c:	0007883a 	mov	r3,zero
1010d530:	0005883a 	mov	r2,zero
1010d534:	003fe406 	br	1010d4c8 <__alt_data_end+0xfffed4c8>
1010d538:	0123c83a 	sub	r17,zero,r4
1010d53c:	003fd106 	br	1010d484 <__alt_data_end+0xfffed484>

1010d540 <__floatunsidf>:
1010d540:	defffe04 	addi	sp,sp,-8
1010d544:	dc000015 	stw	r16,0(sp)
1010d548:	dfc00115 	stw	ra,4(sp)
1010d54c:	2021883a 	mov	r16,r4
1010d550:	20002226 	beq	r4,zero,1010d5dc <__floatunsidf+0x9c>
1010d554:	010d5e80 	call	1010d5e8 <__clzsi2>
1010d558:	01010784 	movi	r4,1054
1010d55c:	2089c83a 	sub	r4,r4,r2
1010d560:	01810cc4 	movi	r6,1075
1010d564:	310dc83a 	sub	r6,r6,r4
1010d568:	00c007c4 	movi	r3,31
1010d56c:	1980120e 	bge	r3,r6,1010d5b8 <__floatunsidf+0x78>
1010d570:	00c104c4 	movi	r3,1043
1010d574:	1907c83a 	sub	r3,r3,r4
1010d578:	80ca983a 	sll	r5,r16,r3
1010d57c:	00800434 	movhi	r2,16
1010d580:	10bfffc4 	addi	r2,r2,-1
1010d584:	2101ffcc 	andi	r4,r4,2047
1010d588:	0021883a 	mov	r16,zero
1010d58c:	288a703a 	and	r5,r5,r2
1010d590:	2008953a 	slli	r4,r4,20
1010d594:	00c00434 	movhi	r3,16
1010d598:	18ffffc4 	addi	r3,r3,-1
1010d59c:	28c6703a 	and	r3,r5,r3
1010d5a0:	8005883a 	mov	r2,r16
1010d5a4:	1906b03a 	or	r3,r3,r4
1010d5a8:	dfc00117 	ldw	ra,4(sp)
1010d5ac:	dc000017 	ldw	r16,0(sp)
1010d5b0:	dec00204 	addi	sp,sp,8
1010d5b4:	f800283a 	ret
1010d5b8:	00c002c4 	movi	r3,11
1010d5bc:	188bc83a 	sub	r5,r3,r2
1010d5c0:	814ad83a 	srl	r5,r16,r5
1010d5c4:	00c00434 	movhi	r3,16
1010d5c8:	18ffffc4 	addi	r3,r3,-1
1010d5cc:	81a0983a 	sll	r16,r16,r6
1010d5d0:	2101ffcc 	andi	r4,r4,2047
1010d5d4:	28ca703a 	and	r5,r5,r3
1010d5d8:	003fed06 	br	1010d590 <__alt_data_end+0xfffed590>
1010d5dc:	0009883a 	mov	r4,zero
1010d5e0:	000b883a 	mov	r5,zero
1010d5e4:	003fea06 	br	1010d590 <__alt_data_end+0xfffed590>

1010d5e8 <__clzsi2>:
1010d5e8:	00bfffd4 	movui	r2,65535
1010d5ec:	11000536 	bltu	r2,r4,1010d604 <__clzsi2+0x1c>
1010d5f0:	00803fc4 	movi	r2,255
1010d5f4:	11000f36 	bltu	r2,r4,1010d634 <__clzsi2+0x4c>
1010d5f8:	00800804 	movi	r2,32
1010d5fc:	0007883a 	mov	r3,zero
1010d600:	00000506 	br	1010d618 <__clzsi2+0x30>
1010d604:	00804034 	movhi	r2,256
1010d608:	10bfffc4 	addi	r2,r2,-1
1010d60c:	11000c2e 	bgeu	r2,r4,1010d640 <__clzsi2+0x58>
1010d610:	00800204 	movi	r2,8
1010d614:	00c00604 	movi	r3,24
1010d618:	20c8d83a 	srl	r4,r4,r3
1010d61c:	00c40474 	movhi	r3,4113
1010d620:	18c10b04 	addi	r3,r3,1068
1010d624:	1909883a 	add	r4,r3,r4
1010d628:	20c00003 	ldbu	r3,0(r4)
1010d62c:	10c5c83a 	sub	r2,r2,r3
1010d630:	f800283a 	ret
1010d634:	00800604 	movi	r2,24
1010d638:	00c00204 	movi	r3,8
1010d63c:	003ff606 	br	1010d618 <__alt_data_end+0xfffed618>
1010d640:	00800404 	movi	r2,16
1010d644:	1007883a 	mov	r3,r2
1010d648:	003ff306 	br	1010d618 <__alt_data_end+0xfffed618>

1010d64c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010d64c:	defffe04 	addi	sp,sp,-8
1010d650:	dfc00115 	stw	ra,4(sp)
1010d654:	df000015 	stw	fp,0(sp)
1010d658:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010d65c:	d0a00b17 	ldw	r2,-32724(gp)
1010d660:	10000326 	beq	r2,zero,1010d670 <alt_get_errno+0x24>
1010d664:	d0a00b17 	ldw	r2,-32724(gp)
1010d668:	103ee83a 	callr	r2
1010d66c:	00000106 	br	1010d674 <alt_get_errno+0x28>
1010d670:	d0a6ff04 	addi	r2,gp,-25604
}
1010d674:	e037883a 	mov	sp,fp
1010d678:	dfc00117 	ldw	ra,4(sp)
1010d67c:	df000017 	ldw	fp,0(sp)
1010d680:	dec00204 	addi	sp,sp,8
1010d684:	f800283a 	ret

1010d688 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1010d688:	defffb04 	addi	sp,sp,-20
1010d68c:	dfc00415 	stw	ra,16(sp)
1010d690:	df000315 	stw	fp,12(sp)
1010d694:	df000304 	addi	fp,sp,12
1010d698:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1010d69c:	e0bfff17 	ldw	r2,-4(fp)
1010d6a0:	10000616 	blt	r2,zero,1010d6bc <close+0x34>
1010d6a4:	e0bfff17 	ldw	r2,-4(fp)
1010d6a8:	10c00324 	muli	r3,r2,12
1010d6ac:	00840474 	movhi	r2,4113
1010d6b0:	10838e04 	addi	r2,r2,3640
1010d6b4:	1885883a 	add	r2,r3,r2
1010d6b8:	00000106 	br	1010d6c0 <close+0x38>
1010d6bc:	0005883a 	mov	r2,zero
1010d6c0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1010d6c4:	e0bffd17 	ldw	r2,-12(fp)
1010d6c8:	10001926 	beq	r2,zero,1010d730 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1010d6cc:	e0bffd17 	ldw	r2,-12(fp)
1010d6d0:	10800017 	ldw	r2,0(r2)
1010d6d4:	10800417 	ldw	r2,16(r2)
1010d6d8:	10000626 	beq	r2,zero,1010d6f4 <close+0x6c>
1010d6dc:	e0bffd17 	ldw	r2,-12(fp)
1010d6e0:	10800017 	ldw	r2,0(r2)
1010d6e4:	10800417 	ldw	r2,16(r2)
1010d6e8:	e13ffd17 	ldw	r4,-12(fp)
1010d6ec:	103ee83a 	callr	r2
1010d6f0:	00000106 	br	1010d6f8 <close+0x70>
1010d6f4:	0005883a 	mov	r2,zero
1010d6f8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1010d6fc:	e13fff17 	ldw	r4,-4(fp)
1010d700:	010dd480 	call	1010dd48 <alt_release_fd>
    if (rval < 0)
1010d704:	e0bffe17 	ldw	r2,-8(fp)
1010d708:	1000070e 	bge	r2,zero,1010d728 <close+0xa0>
    {
      ALT_ERRNO = -rval;
1010d70c:	010d64c0 	call	1010d64c <alt_get_errno>
1010d710:	1007883a 	mov	r3,r2
1010d714:	e0bffe17 	ldw	r2,-8(fp)
1010d718:	0085c83a 	sub	r2,zero,r2
1010d71c:	18800015 	stw	r2,0(r3)
      return -1;
1010d720:	00bfffc4 	movi	r2,-1
1010d724:	00000706 	br	1010d744 <close+0xbc>
    }
    return 0;
1010d728:	0005883a 	mov	r2,zero
1010d72c:	00000506 	br	1010d744 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1010d730:	010d64c0 	call	1010d64c <alt_get_errno>
1010d734:	1007883a 	mov	r3,r2
1010d738:	00801444 	movi	r2,81
1010d73c:	18800015 	stw	r2,0(r3)
    return -1;
1010d740:	00bfffc4 	movi	r2,-1
  }
}
1010d744:	e037883a 	mov	sp,fp
1010d748:	dfc00117 	ldw	ra,4(sp)
1010d74c:	df000017 	ldw	fp,0(sp)
1010d750:	dec00204 	addi	sp,sp,8
1010d754:	f800283a 	ret

1010d758 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1010d758:	defffc04 	addi	sp,sp,-16
1010d75c:	df000315 	stw	fp,12(sp)
1010d760:	df000304 	addi	fp,sp,12
1010d764:	e13ffd15 	stw	r4,-12(fp)
1010d768:	e17ffe15 	stw	r5,-8(fp)
1010d76c:	e1bfff15 	stw	r6,-4(fp)
  return len;
1010d770:	e0bfff17 	ldw	r2,-4(fp)
}
1010d774:	e037883a 	mov	sp,fp
1010d778:	df000017 	ldw	fp,0(sp)
1010d77c:	dec00104 	addi	sp,sp,4
1010d780:	f800283a 	ret

1010d784 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010d784:	defffe04 	addi	sp,sp,-8
1010d788:	dfc00115 	stw	ra,4(sp)
1010d78c:	df000015 	stw	fp,0(sp)
1010d790:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010d794:	d0a00b17 	ldw	r2,-32724(gp)
1010d798:	10000326 	beq	r2,zero,1010d7a8 <alt_get_errno+0x24>
1010d79c:	d0a00b17 	ldw	r2,-32724(gp)
1010d7a0:	103ee83a 	callr	r2
1010d7a4:	00000106 	br	1010d7ac <alt_get_errno+0x28>
1010d7a8:	d0a6ff04 	addi	r2,gp,-25604
}
1010d7ac:	e037883a 	mov	sp,fp
1010d7b0:	dfc00117 	ldw	ra,4(sp)
1010d7b4:	df000017 	ldw	fp,0(sp)
1010d7b8:	dec00204 	addi	sp,sp,8
1010d7bc:	f800283a 	ret

1010d7c0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1010d7c0:	defffb04 	addi	sp,sp,-20
1010d7c4:	dfc00415 	stw	ra,16(sp)
1010d7c8:	df000315 	stw	fp,12(sp)
1010d7cc:	df000304 	addi	fp,sp,12
1010d7d0:	e13ffe15 	stw	r4,-8(fp)
1010d7d4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1010d7d8:	e0bffe17 	ldw	r2,-8(fp)
1010d7dc:	10000616 	blt	r2,zero,1010d7f8 <fstat+0x38>
1010d7e0:	e0bffe17 	ldw	r2,-8(fp)
1010d7e4:	10c00324 	muli	r3,r2,12
1010d7e8:	00840474 	movhi	r2,4113
1010d7ec:	10838e04 	addi	r2,r2,3640
1010d7f0:	1885883a 	add	r2,r3,r2
1010d7f4:	00000106 	br	1010d7fc <fstat+0x3c>
1010d7f8:	0005883a 	mov	r2,zero
1010d7fc:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1010d800:	e0bffd17 	ldw	r2,-12(fp)
1010d804:	10001026 	beq	r2,zero,1010d848 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1010d808:	e0bffd17 	ldw	r2,-12(fp)
1010d80c:	10800017 	ldw	r2,0(r2)
1010d810:	10800817 	ldw	r2,32(r2)
1010d814:	10000726 	beq	r2,zero,1010d834 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
1010d818:	e0bffd17 	ldw	r2,-12(fp)
1010d81c:	10800017 	ldw	r2,0(r2)
1010d820:	10800817 	ldw	r2,32(r2)
1010d824:	e17fff17 	ldw	r5,-4(fp)
1010d828:	e13ffd17 	ldw	r4,-12(fp)
1010d82c:	103ee83a 	callr	r2
1010d830:	00000a06 	br	1010d85c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1010d834:	e0bfff17 	ldw	r2,-4(fp)
1010d838:	00c80004 	movi	r3,8192
1010d83c:	10c00115 	stw	r3,4(r2)
      return 0;
1010d840:	0005883a 	mov	r2,zero
1010d844:	00000506 	br	1010d85c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1010d848:	010d7840 	call	1010d784 <alt_get_errno>
1010d84c:	1007883a 	mov	r3,r2
1010d850:	00801444 	movi	r2,81
1010d854:	18800015 	stw	r2,0(r3)
    return -1;
1010d858:	00bfffc4 	movi	r2,-1
  }
}
1010d85c:	e037883a 	mov	sp,fp
1010d860:	dfc00117 	ldw	ra,4(sp)
1010d864:	df000017 	ldw	fp,0(sp)
1010d868:	dec00204 	addi	sp,sp,8
1010d86c:	f800283a 	ret

1010d870 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010d870:	defffe04 	addi	sp,sp,-8
1010d874:	dfc00115 	stw	ra,4(sp)
1010d878:	df000015 	stw	fp,0(sp)
1010d87c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010d880:	d0a00b17 	ldw	r2,-32724(gp)
1010d884:	10000326 	beq	r2,zero,1010d894 <alt_get_errno+0x24>
1010d888:	d0a00b17 	ldw	r2,-32724(gp)
1010d88c:	103ee83a 	callr	r2
1010d890:	00000106 	br	1010d898 <alt_get_errno+0x28>
1010d894:	d0a6ff04 	addi	r2,gp,-25604
}
1010d898:	e037883a 	mov	sp,fp
1010d89c:	dfc00117 	ldw	ra,4(sp)
1010d8a0:	df000017 	ldw	fp,0(sp)
1010d8a4:	dec00204 	addi	sp,sp,8
1010d8a8:	f800283a 	ret

1010d8ac <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1010d8ac:	deffed04 	addi	sp,sp,-76
1010d8b0:	dfc01215 	stw	ra,72(sp)
1010d8b4:	df001115 	stw	fp,68(sp)
1010d8b8:	df001104 	addi	fp,sp,68
1010d8bc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1010d8c0:	e0bfff17 	ldw	r2,-4(fp)
1010d8c4:	10000616 	blt	r2,zero,1010d8e0 <isatty+0x34>
1010d8c8:	e0bfff17 	ldw	r2,-4(fp)
1010d8cc:	10c00324 	muli	r3,r2,12
1010d8d0:	00840474 	movhi	r2,4113
1010d8d4:	10838e04 	addi	r2,r2,3640
1010d8d8:	1885883a 	add	r2,r3,r2
1010d8dc:	00000106 	br	1010d8e4 <isatty+0x38>
1010d8e0:	0005883a 	mov	r2,zero
1010d8e4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
1010d8e8:	e0bfef17 	ldw	r2,-68(fp)
1010d8ec:	10000e26 	beq	r2,zero,1010d928 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1010d8f0:	e0bfef17 	ldw	r2,-68(fp)
1010d8f4:	10800017 	ldw	r2,0(r2)
1010d8f8:	10800817 	ldw	r2,32(r2)
1010d8fc:	1000021e 	bne	r2,zero,1010d908 <isatty+0x5c>
    {
      return 1;
1010d900:	00800044 	movi	r2,1
1010d904:	00000d06 	br	1010d93c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1010d908:	e0bff004 	addi	r2,fp,-64
1010d90c:	100b883a 	mov	r5,r2
1010d910:	e13fff17 	ldw	r4,-4(fp)
1010d914:	010d7c00 	call	1010d7c0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1010d918:	e0bff117 	ldw	r2,-60(fp)
1010d91c:	10880020 	cmpeqi	r2,r2,8192
1010d920:	10803fcc 	andi	r2,r2,255
1010d924:	00000506 	br	1010d93c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1010d928:	010d8700 	call	1010d870 <alt_get_errno>
1010d92c:	1007883a 	mov	r3,r2
1010d930:	00801444 	movi	r2,81
1010d934:	18800015 	stw	r2,0(r3)
    return 0;
1010d938:	0005883a 	mov	r2,zero
  }
}
1010d93c:	e037883a 	mov	sp,fp
1010d940:	dfc00117 	ldw	ra,4(sp)
1010d944:	df000017 	ldw	fp,0(sp)
1010d948:	dec00204 	addi	sp,sp,8
1010d94c:	f800283a 	ret

1010d950 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1010d950:	defffc04 	addi	sp,sp,-16
1010d954:	df000315 	stw	fp,12(sp)
1010d958:	df000304 	addi	fp,sp,12
1010d95c:	e13ffd15 	stw	r4,-12(fp)
1010d960:	e17ffe15 	stw	r5,-8(fp)
1010d964:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
1010d968:	e0fffe17 	ldw	r3,-8(fp)
1010d96c:	e0bffd17 	ldw	r2,-12(fp)
1010d970:	18800c26 	beq	r3,r2,1010d9a4 <alt_load_section+0x54>
  {
    while( to != end )
1010d974:	00000806 	br	1010d998 <alt_load_section+0x48>
    {
      *to++ = *from++;
1010d978:	e0bffe17 	ldw	r2,-8(fp)
1010d97c:	10c00104 	addi	r3,r2,4
1010d980:	e0fffe15 	stw	r3,-8(fp)
1010d984:	e0fffd17 	ldw	r3,-12(fp)
1010d988:	19000104 	addi	r4,r3,4
1010d98c:	e13ffd15 	stw	r4,-12(fp)
1010d990:	18c00017 	ldw	r3,0(r3)
1010d994:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
1010d998:	e0fffe17 	ldw	r3,-8(fp)
1010d99c:	e0bfff17 	ldw	r2,-4(fp)
1010d9a0:	18bff51e 	bne	r3,r2,1010d978 <__alt_data_end+0xfffed978>
    {
      *to++ = *from++;
    }
  }
}
1010d9a4:	0001883a 	nop
1010d9a8:	e037883a 	mov	sp,fp
1010d9ac:	df000017 	ldw	fp,0(sp)
1010d9b0:	dec00104 	addi	sp,sp,4
1010d9b4:	f800283a 	ret

1010d9b8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1010d9b8:	defffe04 	addi	sp,sp,-8
1010d9bc:	dfc00115 	stw	ra,4(sp)
1010d9c0:	df000015 	stw	fp,0(sp)
1010d9c4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1010d9c8:	01840474 	movhi	r6,4113
1010d9cc:	31883204 	addi	r6,r6,8392
1010d9d0:	01440474 	movhi	r5,4113
1010d9d4:	29415b04 	addi	r5,r5,1388
1010d9d8:	01040474 	movhi	r4,4113
1010d9dc:	21083204 	addi	r4,r4,8392
1010d9e0:	010d9500 	call	1010d950 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1010d9e4:	01840434 	movhi	r6,4112
1010d9e8:	31809104 	addi	r6,r6,580
1010d9ec:	01440434 	movhi	r5,4112
1010d9f0:	29400804 	addi	r5,r5,32
1010d9f4:	01040434 	movhi	r4,4112
1010d9f8:	21000804 	addi	r4,r4,32
1010d9fc:	010d9500 	call	1010d950 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
1010da00:	01840474 	movhi	r6,4113
1010da04:	31815b04 	addi	r6,r6,1388
1010da08:	01440474 	movhi	r5,4113
1010da0c:	29407f04 	addi	r5,r5,508
1010da10:	01040474 	movhi	r4,4113
1010da14:	21007f04 	addi	r4,r4,508
1010da18:	010d9500 	call	1010d950 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
1010da1c:	010f0680 	call	1010f068 <alt_dcache_flush_all>
  alt_icache_flush_all();
1010da20:	010f2d00 	call	1010f2d0 <alt_icache_flush_all>
}
1010da24:	0001883a 	nop
1010da28:	e037883a 	mov	sp,fp
1010da2c:	dfc00117 	ldw	ra,4(sp)
1010da30:	df000017 	ldw	fp,0(sp)
1010da34:	dec00204 	addi	sp,sp,8
1010da38:	f800283a 	ret

1010da3c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010da3c:	defffe04 	addi	sp,sp,-8
1010da40:	dfc00115 	stw	ra,4(sp)
1010da44:	df000015 	stw	fp,0(sp)
1010da48:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010da4c:	d0a00b17 	ldw	r2,-32724(gp)
1010da50:	10000326 	beq	r2,zero,1010da60 <alt_get_errno+0x24>
1010da54:	d0a00b17 	ldw	r2,-32724(gp)
1010da58:	103ee83a 	callr	r2
1010da5c:	00000106 	br	1010da64 <alt_get_errno+0x28>
1010da60:	d0a6ff04 	addi	r2,gp,-25604
}
1010da64:	e037883a 	mov	sp,fp
1010da68:	dfc00117 	ldw	ra,4(sp)
1010da6c:	df000017 	ldw	fp,0(sp)
1010da70:	dec00204 	addi	sp,sp,8
1010da74:	f800283a 	ret

1010da78 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1010da78:	defff904 	addi	sp,sp,-28
1010da7c:	dfc00615 	stw	ra,24(sp)
1010da80:	df000515 	stw	fp,20(sp)
1010da84:	df000504 	addi	fp,sp,20
1010da88:	e13ffd15 	stw	r4,-12(fp)
1010da8c:	e17ffe15 	stw	r5,-8(fp)
1010da90:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1010da94:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1010da98:	e0bffd17 	ldw	r2,-12(fp)
1010da9c:	10000616 	blt	r2,zero,1010dab8 <lseek+0x40>
1010daa0:	e0bffd17 	ldw	r2,-12(fp)
1010daa4:	10c00324 	muli	r3,r2,12
1010daa8:	00840474 	movhi	r2,4113
1010daac:	10838e04 	addi	r2,r2,3640
1010dab0:	1885883a 	add	r2,r3,r2
1010dab4:	00000106 	br	1010dabc <lseek+0x44>
1010dab8:	0005883a 	mov	r2,zero
1010dabc:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
1010dac0:	e0bffc17 	ldw	r2,-16(fp)
1010dac4:	10001026 	beq	r2,zero,1010db08 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
1010dac8:	e0bffc17 	ldw	r2,-16(fp)
1010dacc:	10800017 	ldw	r2,0(r2)
1010dad0:	10800717 	ldw	r2,28(r2)
1010dad4:	10000926 	beq	r2,zero,1010dafc <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
1010dad8:	e0bffc17 	ldw	r2,-16(fp)
1010dadc:	10800017 	ldw	r2,0(r2)
1010dae0:	10800717 	ldw	r2,28(r2)
1010dae4:	e1bfff17 	ldw	r6,-4(fp)
1010dae8:	e17ffe17 	ldw	r5,-8(fp)
1010daec:	e13ffc17 	ldw	r4,-16(fp)
1010daf0:	103ee83a 	callr	r2
1010daf4:	e0bffb15 	stw	r2,-20(fp)
1010daf8:	00000506 	br	1010db10 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1010dafc:	00bfde84 	movi	r2,-134
1010db00:	e0bffb15 	stw	r2,-20(fp)
1010db04:	00000206 	br	1010db10 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
1010db08:	00bfebc4 	movi	r2,-81
1010db0c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
1010db10:	e0bffb17 	ldw	r2,-20(fp)
1010db14:	1000070e 	bge	r2,zero,1010db34 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
1010db18:	010da3c0 	call	1010da3c <alt_get_errno>
1010db1c:	1007883a 	mov	r3,r2
1010db20:	e0bffb17 	ldw	r2,-20(fp)
1010db24:	0085c83a 	sub	r2,zero,r2
1010db28:	18800015 	stw	r2,0(r3)
    rc = -1;
1010db2c:	00bfffc4 	movi	r2,-1
1010db30:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
1010db34:	e0bffb17 	ldw	r2,-20(fp)
}
1010db38:	e037883a 	mov	sp,fp
1010db3c:	dfc00117 	ldw	ra,4(sp)
1010db40:	df000017 	ldw	fp,0(sp)
1010db44:	dec00204 	addi	sp,sp,8
1010db48:	f800283a 	ret

1010db4c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1010db4c:	defffd04 	addi	sp,sp,-12
1010db50:	dfc00215 	stw	ra,8(sp)
1010db54:	df000115 	stw	fp,4(sp)
1010db58:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1010db5c:	0009883a 	mov	r4,zero
1010db60:	010dfc40 	call	1010dfc4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
1010db64:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1010db68:	010dffc0 	call	1010dffc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1010db6c:	01840474 	movhi	r6,4113
1010db70:	31814e04 	addi	r6,r6,1336
1010db74:	01440474 	movhi	r5,4113
1010db78:	29414e04 	addi	r5,r5,1336
1010db7c:	01040474 	movhi	r4,4113
1010db80:	21014e04 	addi	r4,r4,1336
1010db84:	010f6680 	call	1010f668 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1010db88:	010f1900 	call	1010f190 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1010db8c:	01040474 	movhi	r4,4113
1010db90:	213c7c04 	addi	r4,r4,-3600
1010db94:	010fe680 	call	1010fe68 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1010db98:	d0a70017 	ldw	r2,-25600(gp)
1010db9c:	d0e70117 	ldw	r3,-25596(gp)
1010dba0:	d1270217 	ldw	r4,-25592(gp)
1010dba4:	200d883a 	mov	r6,r4
1010dba8:	180b883a 	mov	r5,r3
1010dbac:	1009883a 	mov	r4,r2
1010dbb0:	0100cb40 	call	10100cb4 <main>
1010dbb4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1010dbb8:	01000044 	movi	r4,1
1010dbbc:	010d6880 	call	1010d688 <close>
  exit (result);
1010dbc0:	e13fff17 	ldw	r4,-4(fp)
1010dbc4:	010fe7c0 	call	1010fe7c <exit>

1010dbc8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
1010dbc8:	defffe04 	addi	sp,sp,-8
1010dbcc:	df000115 	stw	fp,4(sp)
1010dbd0:	df000104 	addi	fp,sp,4
1010dbd4:	e13fff15 	stw	r4,-4(fp)
}
1010dbd8:	0001883a 	nop
1010dbdc:	e037883a 	mov	sp,fp
1010dbe0:	df000017 	ldw	fp,0(sp)
1010dbe4:	dec00104 	addi	sp,sp,4
1010dbe8:	f800283a 	ret

1010dbec <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
1010dbec:	defffe04 	addi	sp,sp,-8
1010dbf0:	df000115 	stw	fp,4(sp)
1010dbf4:	df000104 	addi	fp,sp,4
1010dbf8:	e13fff15 	stw	r4,-4(fp)
}
1010dbfc:	0001883a 	nop
1010dc00:	e037883a 	mov	sp,fp
1010dc04:	df000017 	ldw	fp,0(sp)
1010dc08:	dec00104 	addi	sp,sp,4
1010dc0c:	f800283a 	ret

1010dc10 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010dc10:	defffe04 	addi	sp,sp,-8
1010dc14:	dfc00115 	stw	ra,4(sp)
1010dc18:	df000015 	stw	fp,0(sp)
1010dc1c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010dc20:	d0a00b17 	ldw	r2,-32724(gp)
1010dc24:	10000326 	beq	r2,zero,1010dc34 <alt_get_errno+0x24>
1010dc28:	d0a00b17 	ldw	r2,-32724(gp)
1010dc2c:	103ee83a 	callr	r2
1010dc30:	00000106 	br	1010dc38 <alt_get_errno+0x28>
1010dc34:	d0a6ff04 	addi	r2,gp,-25604
}
1010dc38:	e037883a 	mov	sp,fp
1010dc3c:	dfc00117 	ldw	ra,4(sp)
1010dc40:	df000017 	ldw	fp,0(sp)
1010dc44:	dec00204 	addi	sp,sp,8
1010dc48:	f800283a 	ret

1010dc4c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
1010dc4c:	defff904 	addi	sp,sp,-28
1010dc50:	dfc00615 	stw	ra,24(sp)
1010dc54:	df000515 	stw	fp,20(sp)
1010dc58:	df000504 	addi	fp,sp,20
1010dc5c:	e13ffd15 	stw	r4,-12(fp)
1010dc60:	e17ffe15 	stw	r5,-8(fp)
1010dc64:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1010dc68:	e0bffd17 	ldw	r2,-12(fp)
1010dc6c:	10000616 	blt	r2,zero,1010dc88 <read+0x3c>
1010dc70:	e0bffd17 	ldw	r2,-12(fp)
1010dc74:	10c00324 	muli	r3,r2,12
1010dc78:	00840474 	movhi	r2,4113
1010dc7c:	10838e04 	addi	r2,r2,3640
1010dc80:	1885883a 	add	r2,r3,r2
1010dc84:	00000106 	br	1010dc8c <read+0x40>
1010dc88:	0005883a 	mov	r2,zero
1010dc8c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1010dc90:	e0bffb17 	ldw	r2,-20(fp)
1010dc94:	10002226 	beq	r2,zero,1010dd20 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1010dc98:	e0bffb17 	ldw	r2,-20(fp)
1010dc9c:	10800217 	ldw	r2,8(r2)
1010dca0:	108000cc 	andi	r2,r2,3
1010dca4:	10800060 	cmpeqi	r2,r2,1
1010dca8:	1000181e 	bne	r2,zero,1010dd0c <read+0xc0>
        (fd->dev->read))
1010dcac:	e0bffb17 	ldw	r2,-20(fp)
1010dcb0:	10800017 	ldw	r2,0(r2)
1010dcb4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1010dcb8:	10001426 	beq	r2,zero,1010dd0c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
1010dcbc:	e0bffb17 	ldw	r2,-20(fp)
1010dcc0:	10800017 	ldw	r2,0(r2)
1010dcc4:	10800517 	ldw	r2,20(r2)
1010dcc8:	e0ffff17 	ldw	r3,-4(fp)
1010dccc:	180d883a 	mov	r6,r3
1010dcd0:	e17ffe17 	ldw	r5,-8(fp)
1010dcd4:	e13ffb17 	ldw	r4,-20(fp)
1010dcd8:	103ee83a 	callr	r2
1010dcdc:	e0bffc15 	stw	r2,-16(fp)
1010dce0:	e0bffc17 	ldw	r2,-16(fp)
1010dce4:	1000070e 	bge	r2,zero,1010dd04 <read+0xb8>
        {
          ALT_ERRNO = -rval;
1010dce8:	010dc100 	call	1010dc10 <alt_get_errno>
1010dcec:	1007883a 	mov	r3,r2
1010dcf0:	e0bffc17 	ldw	r2,-16(fp)
1010dcf4:	0085c83a 	sub	r2,zero,r2
1010dcf8:	18800015 	stw	r2,0(r3)
          return -1;
1010dcfc:	00bfffc4 	movi	r2,-1
1010dd00:	00000c06 	br	1010dd34 <read+0xe8>
        }
        return rval;
1010dd04:	e0bffc17 	ldw	r2,-16(fp)
1010dd08:	00000a06 	br	1010dd34 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
1010dd0c:	010dc100 	call	1010dc10 <alt_get_errno>
1010dd10:	1007883a 	mov	r3,r2
1010dd14:	00800344 	movi	r2,13
1010dd18:	18800015 	stw	r2,0(r3)
1010dd1c:	00000406 	br	1010dd30 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
1010dd20:	010dc100 	call	1010dc10 <alt_get_errno>
1010dd24:	1007883a 	mov	r3,r2
1010dd28:	00801444 	movi	r2,81
1010dd2c:	18800015 	stw	r2,0(r3)
  }
  return -1;
1010dd30:	00bfffc4 	movi	r2,-1
}
1010dd34:	e037883a 	mov	sp,fp
1010dd38:	dfc00117 	ldw	ra,4(sp)
1010dd3c:	df000017 	ldw	fp,0(sp)
1010dd40:	dec00204 	addi	sp,sp,8
1010dd44:	f800283a 	ret

1010dd48 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1010dd48:	defffe04 	addi	sp,sp,-8
1010dd4c:	df000115 	stw	fp,4(sp)
1010dd50:	df000104 	addi	fp,sp,4
1010dd54:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
1010dd58:	e0bfff17 	ldw	r2,-4(fp)
1010dd5c:	108000d0 	cmplti	r2,r2,3
1010dd60:	10000d1e 	bne	r2,zero,1010dd98 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
1010dd64:	00840474 	movhi	r2,4113
1010dd68:	10838e04 	addi	r2,r2,3640
1010dd6c:	e0ffff17 	ldw	r3,-4(fp)
1010dd70:	18c00324 	muli	r3,r3,12
1010dd74:	10c5883a 	add	r2,r2,r3
1010dd78:	10800204 	addi	r2,r2,8
1010dd7c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
1010dd80:	00840474 	movhi	r2,4113
1010dd84:	10838e04 	addi	r2,r2,3640
1010dd88:	e0ffff17 	ldw	r3,-4(fp)
1010dd8c:	18c00324 	muli	r3,r3,12
1010dd90:	10c5883a 	add	r2,r2,r3
1010dd94:	10000015 	stw	zero,0(r2)
  }
}
1010dd98:	0001883a 	nop
1010dd9c:	e037883a 	mov	sp,fp
1010dda0:	df000017 	ldw	fp,0(sp)
1010dda4:	dec00104 	addi	sp,sp,4
1010dda8:	f800283a 	ret

1010ddac <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
1010ddac:	defff904 	addi	sp,sp,-28
1010ddb0:	df000615 	stw	fp,24(sp)
1010ddb4:	df000604 	addi	fp,sp,24
1010ddb8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1010ddbc:	0005303a 	rdctl	r2,status
1010ddc0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1010ddc4:	e0fffe17 	ldw	r3,-8(fp)
1010ddc8:	00bfff84 	movi	r2,-2
1010ddcc:	1884703a 	and	r2,r3,r2
1010ddd0:	1001703a 	wrctl	status,r2
  
  return context;
1010ddd4:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
1010ddd8:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
1010dddc:	d0a00c17 	ldw	r2,-32720(gp)
1010dde0:	10c000c4 	addi	r3,r2,3
1010dde4:	00bfff04 	movi	r2,-4
1010dde8:	1884703a 	and	r2,r3,r2
1010ddec:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1010ddf0:	d0e00c17 	ldw	r3,-32720(gp)
1010ddf4:	e0bfff17 	ldw	r2,-4(fp)
1010ddf8:	1887883a 	add	r3,r3,r2
1010ddfc:	008404b4 	movhi	r2,4114
1010de00:	10800004 	addi	r2,r2,0
1010de04:	10c0062e 	bgeu	r2,r3,1010de20 <sbrk+0x74>
1010de08:	e0bffb17 	ldw	r2,-20(fp)
1010de0c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1010de10:	e0bffa17 	ldw	r2,-24(fp)
1010de14:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
1010de18:	00bfffc4 	movi	r2,-1
1010de1c:	00000b06 	br	1010de4c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
1010de20:	d0a00c17 	ldw	r2,-32720(gp)
1010de24:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
1010de28:	d0e00c17 	ldw	r3,-32720(gp)
1010de2c:	e0bfff17 	ldw	r2,-4(fp)
1010de30:	1885883a 	add	r2,r3,r2
1010de34:	d0a00c15 	stw	r2,-32720(gp)
1010de38:	e0bffb17 	ldw	r2,-20(fp)
1010de3c:	e0bffc15 	stw	r2,-16(fp)
1010de40:	e0bffc17 	ldw	r2,-16(fp)
1010de44:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
1010de48:	e0bffd17 	ldw	r2,-12(fp)
} 
1010de4c:	e037883a 	mov	sp,fp
1010de50:	df000017 	ldw	fp,0(sp)
1010de54:	dec00104 	addi	sp,sp,4
1010de58:	f800283a 	ret

1010de5c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010de5c:	defffe04 	addi	sp,sp,-8
1010de60:	dfc00115 	stw	ra,4(sp)
1010de64:	df000015 	stw	fp,0(sp)
1010de68:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010de6c:	d0a00b17 	ldw	r2,-32724(gp)
1010de70:	10000326 	beq	r2,zero,1010de80 <alt_get_errno+0x24>
1010de74:	d0a00b17 	ldw	r2,-32724(gp)
1010de78:	103ee83a 	callr	r2
1010de7c:	00000106 	br	1010de84 <alt_get_errno+0x28>
1010de80:	d0a6ff04 	addi	r2,gp,-25604
}
1010de84:	e037883a 	mov	sp,fp
1010de88:	dfc00117 	ldw	ra,4(sp)
1010de8c:	df000017 	ldw	fp,0(sp)
1010de90:	dec00204 	addi	sp,sp,8
1010de94:	f800283a 	ret

1010de98 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
1010de98:	defff904 	addi	sp,sp,-28
1010de9c:	dfc00615 	stw	ra,24(sp)
1010dea0:	df000515 	stw	fp,20(sp)
1010dea4:	df000504 	addi	fp,sp,20
1010dea8:	e13ffd15 	stw	r4,-12(fp)
1010deac:	e17ffe15 	stw	r5,-8(fp)
1010deb0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1010deb4:	e0bffd17 	ldw	r2,-12(fp)
1010deb8:	10000616 	blt	r2,zero,1010ded4 <write+0x3c>
1010debc:	e0bffd17 	ldw	r2,-12(fp)
1010dec0:	10c00324 	muli	r3,r2,12
1010dec4:	00840474 	movhi	r2,4113
1010dec8:	10838e04 	addi	r2,r2,3640
1010decc:	1885883a 	add	r2,r3,r2
1010ded0:	00000106 	br	1010ded8 <write+0x40>
1010ded4:	0005883a 	mov	r2,zero
1010ded8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1010dedc:	e0bffb17 	ldw	r2,-20(fp)
1010dee0:	10002126 	beq	r2,zero,1010df68 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
1010dee4:	e0bffb17 	ldw	r2,-20(fp)
1010dee8:	10800217 	ldw	r2,8(r2)
1010deec:	108000cc 	andi	r2,r2,3
1010def0:	10001826 	beq	r2,zero,1010df54 <write+0xbc>
1010def4:	e0bffb17 	ldw	r2,-20(fp)
1010def8:	10800017 	ldw	r2,0(r2)
1010defc:	10800617 	ldw	r2,24(r2)
1010df00:	10001426 	beq	r2,zero,1010df54 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
1010df04:	e0bffb17 	ldw	r2,-20(fp)
1010df08:	10800017 	ldw	r2,0(r2)
1010df0c:	10800617 	ldw	r2,24(r2)
1010df10:	e0ffff17 	ldw	r3,-4(fp)
1010df14:	180d883a 	mov	r6,r3
1010df18:	e17ffe17 	ldw	r5,-8(fp)
1010df1c:	e13ffb17 	ldw	r4,-20(fp)
1010df20:	103ee83a 	callr	r2
1010df24:	e0bffc15 	stw	r2,-16(fp)
1010df28:	e0bffc17 	ldw	r2,-16(fp)
1010df2c:	1000070e 	bge	r2,zero,1010df4c <write+0xb4>
      {
        ALT_ERRNO = -rval;
1010df30:	010de5c0 	call	1010de5c <alt_get_errno>
1010df34:	1007883a 	mov	r3,r2
1010df38:	e0bffc17 	ldw	r2,-16(fp)
1010df3c:	0085c83a 	sub	r2,zero,r2
1010df40:	18800015 	stw	r2,0(r3)
        return -1;
1010df44:	00bfffc4 	movi	r2,-1
1010df48:	00000c06 	br	1010df7c <write+0xe4>
      }
      return rval;
1010df4c:	e0bffc17 	ldw	r2,-16(fp)
1010df50:	00000a06 	br	1010df7c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
1010df54:	010de5c0 	call	1010de5c <alt_get_errno>
1010df58:	1007883a 	mov	r3,r2
1010df5c:	00800344 	movi	r2,13
1010df60:	18800015 	stw	r2,0(r3)
1010df64:	00000406 	br	1010df78 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
1010df68:	010de5c0 	call	1010de5c <alt_get_errno>
1010df6c:	1007883a 	mov	r3,r2
1010df70:	00801444 	movi	r2,81
1010df74:	18800015 	stw	r2,0(r3)
  }
  return -1;
1010df78:	00bfffc4 	movi	r2,-1
}
1010df7c:	e037883a 	mov	sp,fp
1010df80:	dfc00117 	ldw	ra,4(sp)
1010df84:	df000017 	ldw	fp,0(sp)
1010df88:	dec00204 	addi	sp,sp,8
1010df8c:	f800283a 	ret

1010df90 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
1010df90:	defffd04 	addi	sp,sp,-12
1010df94:	dfc00215 	stw	ra,8(sp)
1010df98:	df000115 	stw	fp,4(sp)
1010df9c:	df000104 	addi	fp,sp,4
1010dfa0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
1010dfa4:	d1600804 	addi	r5,gp,-32736
1010dfa8:	e13fff17 	ldw	r4,-4(fp)
1010dfac:	010f0ec0 	call	1010f0ec <alt_dev_llist_insert>
}
1010dfb0:	e037883a 	mov	sp,fp
1010dfb4:	dfc00117 	ldw	ra,4(sp)
1010dfb8:	df000017 	ldw	fp,0(sp)
1010dfbc:	dec00204 	addi	sp,sp,8
1010dfc0:	f800283a 	ret

1010dfc4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
1010dfc4:	defffd04 	addi	sp,sp,-12
1010dfc8:	dfc00215 	stw	ra,8(sp)
1010dfcc:	df000115 	stw	fp,4(sp)
1010dfd0:	df000104 	addi	fp,sp,4
1010dfd4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
1010dfd8:	010fadc0 	call	1010fadc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
1010dfdc:	00800044 	movi	r2,1
1010dfe0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
1010dfe4:	0001883a 	nop
1010dfe8:	e037883a 	mov	sp,fp
1010dfec:	dfc00117 	ldw	ra,4(sp)
1010dff0:	df000017 	ldw	fp,0(sp)
1010dff4:	dec00204 	addi	sp,sp,8
1010dff8:	f800283a 	ret

1010dffc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
1010dffc:	defffe04 	addi	sp,sp,-8
1010e000:	dfc00115 	stw	ra,4(sp)
1010e004:	df000015 	stw	fp,0(sp)
1010e008:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
1010e00c:	000d883a 	mov	r6,zero
1010e010:	000b883a 	mov	r5,zero
1010e014:	01040474 	movhi	r4,4113
1010e018:	2103f804 	addi	r4,r4,4064
1010e01c:	010e1b40 	call	1010e1b4 <altera_avalon_jtag_uart_init>
1010e020:	01040474 	movhi	r4,4113
1010e024:	2103ee04 	addi	r4,r4,4024
1010e028:	010df900 	call	1010df90 <alt_dev_reg>
    ALTERA_HOSTFS_INIT ( ALTERA_HOSTFS, altera_hostfs);
1010e02c:	01040474 	movhi	r4,4113
1010e030:	21080604 	addi	r4,r4,8216
1010e034:	010f2500 	call	1010f250 <alt_fs_reg>
}
1010e038:	0001883a 	nop
1010e03c:	e037883a 	mov	sp,fp
1010e040:	dfc00117 	ldw	ra,4(sp)
1010e044:	df000017 	ldw	fp,0(sp)
1010e048:	dec00204 	addi	sp,sp,8
1010e04c:	f800283a 	ret

1010e050 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
1010e050:	defffa04 	addi	sp,sp,-24
1010e054:	dfc00515 	stw	ra,20(sp)
1010e058:	df000415 	stw	fp,16(sp)
1010e05c:	df000404 	addi	fp,sp,16
1010e060:	e13ffd15 	stw	r4,-12(fp)
1010e064:	e17ffe15 	stw	r5,-8(fp)
1010e068:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1010e06c:	e0bffd17 	ldw	r2,-12(fp)
1010e070:	10800017 	ldw	r2,0(r2)
1010e074:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
1010e078:	e0bffc17 	ldw	r2,-16(fp)
1010e07c:	10c00a04 	addi	r3,r2,40
1010e080:	e0bffd17 	ldw	r2,-12(fp)
1010e084:	10800217 	ldw	r2,8(r2)
1010e088:	100f883a 	mov	r7,r2
1010e08c:	e1bfff17 	ldw	r6,-4(fp)
1010e090:	e17ffe17 	ldw	r5,-8(fp)
1010e094:	1809883a 	mov	r4,r3
1010e098:	010e6780 	call	1010e678 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
1010e09c:	e037883a 	mov	sp,fp
1010e0a0:	dfc00117 	ldw	ra,4(sp)
1010e0a4:	df000017 	ldw	fp,0(sp)
1010e0a8:	dec00204 	addi	sp,sp,8
1010e0ac:	f800283a 	ret

1010e0b0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
1010e0b0:	defffa04 	addi	sp,sp,-24
1010e0b4:	dfc00515 	stw	ra,20(sp)
1010e0b8:	df000415 	stw	fp,16(sp)
1010e0bc:	df000404 	addi	fp,sp,16
1010e0c0:	e13ffd15 	stw	r4,-12(fp)
1010e0c4:	e17ffe15 	stw	r5,-8(fp)
1010e0c8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1010e0cc:	e0bffd17 	ldw	r2,-12(fp)
1010e0d0:	10800017 	ldw	r2,0(r2)
1010e0d4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
1010e0d8:	e0bffc17 	ldw	r2,-16(fp)
1010e0dc:	10c00a04 	addi	r3,r2,40
1010e0e0:	e0bffd17 	ldw	r2,-12(fp)
1010e0e4:	10800217 	ldw	r2,8(r2)
1010e0e8:	100f883a 	mov	r7,r2
1010e0ec:	e1bfff17 	ldw	r6,-4(fp)
1010e0f0:	e17ffe17 	ldw	r5,-8(fp)
1010e0f4:	1809883a 	mov	r4,r3
1010e0f8:	010e8940 	call	1010e894 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
1010e0fc:	e037883a 	mov	sp,fp
1010e100:	dfc00117 	ldw	ra,4(sp)
1010e104:	df000017 	ldw	fp,0(sp)
1010e108:	dec00204 	addi	sp,sp,8
1010e10c:	f800283a 	ret

1010e110 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
1010e110:	defffc04 	addi	sp,sp,-16
1010e114:	dfc00315 	stw	ra,12(sp)
1010e118:	df000215 	stw	fp,8(sp)
1010e11c:	df000204 	addi	fp,sp,8
1010e120:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1010e124:	e0bfff17 	ldw	r2,-4(fp)
1010e128:	10800017 	ldw	r2,0(r2)
1010e12c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
1010e130:	e0bffe17 	ldw	r2,-8(fp)
1010e134:	10c00a04 	addi	r3,r2,40
1010e138:	e0bfff17 	ldw	r2,-4(fp)
1010e13c:	10800217 	ldw	r2,8(r2)
1010e140:	100b883a 	mov	r5,r2
1010e144:	1809883a 	mov	r4,r3
1010e148:	010e5200 	call	1010e520 <altera_avalon_jtag_uart_close>
}
1010e14c:	e037883a 	mov	sp,fp
1010e150:	dfc00117 	ldw	ra,4(sp)
1010e154:	df000017 	ldw	fp,0(sp)
1010e158:	dec00204 	addi	sp,sp,8
1010e15c:	f800283a 	ret

1010e160 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
1010e160:	defffa04 	addi	sp,sp,-24
1010e164:	dfc00515 	stw	ra,20(sp)
1010e168:	df000415 	stw	fp,16(sp)
1010e16c:	df000404 	addi	fp,sp,16
1010e170:	e13ffd15 	stw	r4,-12(fp)
1010e174:	e17ffe15 	stw	r5,-8(fp)
1010e178:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
1010e17c:	e0bffd17 	ldw	r2,-12(fp)
1010e180:	10800017 	ldw	r2,0(r2)
1010e184:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
1010e188:	e0bffc17 	ldw	r2,-16(fp)
1010e18c:	10800a04 	addi	r2,r2,40
1010e190:	e1bfff17 	ldw	r6,-4(fp)
1010e194:	e17ffe17 	ldw	r5,-8(fp)
1010e198:	1009883a 	mov	r4,r2
1010e19c:	010e5880 	call	1010e588 <altera_avalon_jtag_uart_ioctl>
}
1010e1a0:	e037883a 	mov	sp,fp
1010e1a4:	dfc00117 	ldw	ra,4(sp)
1010e1a8:	df000017 	ldw	fp,0(sp)
1010e1ac:	dec00204 	addi	sp,sp,8
1010e1b0:	f800283a 	ret

1010e1b4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
1010e1b4:	defffa04 	addi	sp,sp,-24
1010e1b8:	dfc00515 	stw	ra,20(sp)
1010e1bc:	df000415 	stw	fp,16(sp)
1010e1c0:	df000404 	addi	fp,sp,16
1010e1c4:	e13ffd15 	stw	r4,-12(fp)
1010e1c8:	e17ffe15 	stw	r5,-8(fp)
1010e1cc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1010e1d0:	e0bffd17 	ldw	r2,-12(fp)
1010e1d4:	00c00044 	movi	r3,1
1010e1d8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
1010e1dc:	e0bffd17 	ldw	r2,-12(fp)
1010e1e0:	10800017 	ldw	r2,0(r2)
1010e1e4:	10800104 	addi	r2,r2,4
1010e1e8:	1007883a 	mov	r3,r2
1010e1ec:	e0bffd17 	ldw	r2,-12(fp)
1010e1f0:	10800817 	ldw	r2,32(r2)
1010e1f4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
1010e1f8:	e0bffe17 	ldw	r2,-8(fp)
1010e1fc:	e0ffff17 	ldw	r3,-4(fp)
1010e200:	d8000015 	stw	zero,0(sp)
1010e204:	e1fffd17 	ldw	r7,-12(fp)
1010e208:	01840474 	movhi	r6,4113
1010e20c:	31b89d04 	addi	r6,r6,-7564
1010e210:	180b883a 	mov	r5,r3
1010e214:	1009883a 	mov	r4,r2
1010e218:	010f3040 	call	1010f304 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
1010e21c:	e0bffd17 	ldw	r2,-12(fp)
1010e220:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
1010e224:	e0bffd17 	ldw	r2,-12(fp)
1010e228:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
1010e22c:	d0e70417 	ldw	r3,-25584(gp)
1010e230:	e1fffd17 	ldw	r7,-12(fp)
1010e234:	01840474 	movhi	r6,4113
1010e238:	31b92004 	addi	r6,r6,-7040
1010e23c:	180b883a 	mov	r5,r3
1010e240:	1009883a 	mov	r4,r2
1010e244:	010ef3c0 	call	1010ef3c <alt_alarm_start>
1010e248:	1000040e 	bge	r2,zero,1010e25c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
1010e24c:	e0fffd17 	ldw	r3,-12(fp)
1010e250:	00a00034 	movhi	r2,32768
1010e254:	10bfffc4 	addi	r2,r2,-1
1010e258:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
1010e25c:	0001883a 	nop
1010e260:	e037883a 	mov	sp,fp
1010e264:	dfc00117 	ldw	ra,4(sp)
1010e268:	df000017 	ldw	fp,0(sp)
1010e26c:	dec00204 	addi	sp,sp,8
1010e270:	f800283a 	ret

1010e274 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
1010e274:	defff804 	addi	sp,sp,-32
1010e278:	df000715 	stw	fp,28(sp)
1010e27c:	df000704 	addi	fp,sp,28
1010e280:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
1010e284:	e0bfff17 	ldw	r2,-4(fp)
1010e288:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
1010e28c:	e0bffb17 	ldw	r2,-20(fp)
1010e290:	10800017 	ldw	r2,0(r2)
1010e294:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1010e298:	e0bffc17 	ldw	r2,-16(fp)
1010e29c:	10800104 	addi	r2,r2,4
1010e2a0:	10800037 	ldwio	r2,0(r2)
1010e2a4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
1010e2a8:	e0bffd17 	ldw	r2,-12(fp)
1010e2ac:	1080c00c 	andi	r2,r2,768
1010e2b0:	10006d26 	beq	r2,zero,1010e468 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
1010e2b4:	e0bffd17 	ldw	r2,-12(fp)
1010e2b8:	1080400c 	andi	r2,r2,256
1010e2bc:	10003526 	beq	r2,zero,1010e394 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
1010e2c0:	00800074 	movhi	r2,1
1010e2c4:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1010e2c8:	e0bffb17 	ldw	r2,-20(fp)
1010e2cc:	10800a17 	ldw	r2,40(r2)
1010e2d0:	10800044 	addi	r2,r2,1
1010e2d4:	1081ffcc 	andi	r2,r2,2047
1010e2d8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
1010e2dc:	e0bffb17 	ldw	r2,-20(fp)
1010e2e0:	10c00b17 	ldw	r3,44(r2)
1010e2e4:	e0bffe17 	ldw	r2,-8(fp)
1010e2e8:	18801526 	beq	r3,r2,1010e340 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
1010e2ec:	e0bffc17 	ldw	r2,-16(fp)
1010e2f0:	10800037 	ldwio	r2,0(r2)
1010e2f4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
1010e2f8:	e0bff917 	ldw	r2,-28(fp)
1010e2fc:	10a0000c 	andi	r2,r2,32768
1010e300:	10001126 	beq	r2,zero,1010e348 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
1010e304:	e0bffb17 	ldw	r2,-20(fp)
1010e308:	10800a17 	ldw	r2,40(r2)
1010e30c:	e0fff917 	ldw	r3,-28(fp)
1010e310:	1809883a 	mov	r4,r3
1010e314:	e0fffb17 	ldw	r3,-20(fp)
1010e318:	1885883a 	add	r2,r3,r2
1010e31c:	10800e04 	addi	r2,r2,56
1010e320:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1010e324:	e0bffb17 	ldw	r2,-20(fp)
1010e328:	10800a17 	ldw	r2,40(r2)
1010e32c:	10800044 	addi	r2,r2,1
1010e330:	10c1ffcc 	andi	r3,r2,2047
1010e334:	e0bffb17 	ldw	r2,-20(fp)
1010e338:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
1010e33c:	003fe206 	br	1010e2c8 <__alt_data_end+0xfffee2c8>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
1010e340:	0001883a 	nop
1010e344:	00000106 	br	1010e34c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
1010e348:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
1010e34c:	e0bff917 	ldw	r2,-28(fp)
1010e350:	10bfffec 	andhi	r2,r2,65535
1010e354:	10000f26 	beq	r2,zero,1010e394 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1010e358:	e0bffb17 	ldw	r2,-20(fp)
1010e35c:	10c00817 	ldw	r3,32(r2)
1010e360:	00bfff84 	movi	r2,-2
1010e364:	1886703a 	and	r3,r3,r2
1010e368:	e0bffb17 	ldw	r2,-20(fp)
1010e36c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
1010e370:	e0bffc17 	ldw	r2,-16(fp)
1010e374:	10800104 	addi	r2,r2,4
1010e378:	1007883a 	mov	r3,r2
1010e37c:	e0bffb17 	ldw	r2,-20(fp)
1010e380:	10800817 	ldw	r2,32(r2)
1010e384:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1010e388:	e0bffc17 	ldw	r2,-16(fp)
1010e38c:	10800104 	addi	r2,r2,4
1010e390:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
1010e394:	e0bffd17 	ldw	r2,-12(fp)
1010e398:	1080800c 	andi	r2,r2,512
1010e39c:	103fbe26 	beq	r2,zero,1010e298 <__alt_data_end+0xfffee298>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
1010e3a0:	e0bffd17 	ldw	r2,-12(fp)
1010e3a4:	1004d43a 	srli	r2,r2,16
1010e3a8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
1010e3ac:	00001406 	br	1010e400 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
1010e3b0:	e0bffc17 	ldw	r2,-16(fp)
1010e3b4:	e0fffb17 	ldw	r3,-20(fp)
1010e3b8:	18c00d17 	ldw	r3,52(r3)
1010e3bc:	e13ffb17 	ldw	r4,-20(fp)
1010e3c0:	20c7883a 	add	r3,r4,r3
1010e3c4:	18c20e04 	addi	r3,r3,2104
1010e3c8:	18c00003 	ldbu	r3,0(r3)
1010e3cc:	18c03fcc 	andi	r3,r3,255
1010e3d0:	18c0201c 	xori	r3,r3,128
1010e3d4:	18ffe004 	addi	r3,r3,-128
1010e3d8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1010e3dc:	e0bffb17 	ldw	r2,-20(fp)
1010e3e0:	10800d17 	ldw	r2,52(r2)
1010e3e4:	10800044 	addi	r2,r2,1
1010e3e8:	10c1ffcc 	andi	r3,r2,2047
1010e3ec:	e0bffb17 	ldw	r2,-20(fp)
1010e3f0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
1010e3f4:	e0bffa17 	ldw	r2,-24(fp)
1010e3f8:	10bfffc4 	addi	r2,r2,-1
1010e3fc:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
1010e400:	e0bffa17 	ldw	r2,-24(fp)
1010e404:	10000526 	beq	r2,zero,1010e41c <altera_avalon_jtag_uart_irq+0x1a8>
1010e408:	e0bffb17 	ldw	r2,-20(fp)
1010e40c:	10c00d17 	ldw	r3,52(r2)
1010e410:	e0bffb17 	ldw	r2,-20(fp)
1010e414:	10800c17 	ldw	r2,48(r2)
1010e418:	18bfe51e 	bne	r3,r2,1010e3b0 <__alt_data_end+0xfffee3b0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
1010e41c:	e0bffa17 	ldw	r2,-24(fp)
1010e420:	103f9d26 	beq	r2,zero,1010e298 <__alt_data_end+0xfffee298>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1010e424:	e0bffb17 	ldw	r2,-20(fp)
1010e428:	10c00817 	ldw	r3,32(r2)
1010e42c:	00bfff44 	movi	r2,-3
1010e430:	1886703a 	and	r3,r3,r2
1010e434:	e0bffb17 	ldw	r2,-20(fp)
1010e438:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1010e43c:	e0bffb17 	ldw	r2,-20(fp)
1010e440:	10800017 	ldw	r2,0(r2)
1010e444:	10800104 	addi	r2,r2,4
1010e448:	1007883a 	mov	r3,r2
1010e44c:	e0bffb17 	ldw	r2,-20(fp)
1010e450:	10800817 	ldw	r2,32(r2)
1010e454:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1010e458:	e0bffc17 	ldw	r2,-16(fp)
1010e45c:	10800104 	addi	r2,r2,4
1010e460:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
1010e464:	003f8c06 	br	1010e298 <__alt_data_end+0xfffee298>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
1010e468:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
1010e46c:	0001883a 	nop
1010e470:	e037883a 	mov	sp,fp
1010e474:	df000017 	ldw	fp,0(sp)
1010e478:	dec00104 	addi	sp,sp,4
1010e47c:	f800283a 	ret

1010e480 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
1010e480:	defff804 	addi	sp,sp,-32
1010e484:	df000715 	stw	fp,28(sp)
1010e488:	df000704 	addi	fp,sp,28
1010e48c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
1010e490:	e0bffb17 	ldw	r2,-20(fp)
1010e494:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
1010e498:	e0bff917 	ldw	r2,-28(fp)
1010e49c:	10800017 	ldw	r2,0(r2)
1010e4a0:	10800104 	addi	r2,r2,4
1010e4a4:	10800037 	ldwio	r2,0(r2)
1010e4a8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
1010e4ac:	e0bffa17 	ldw	r2,-24(fp)
1010e4b0:	1081000c 	andi	r2,r2,1024
1010e4b4:	10000b26 	beq	r2,zero,1010e4e4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
1010e4b8:	e0bff917 	ldw	r2,-28(fp)
1010e4bc:	10800017 	ldw	r2,0(r2)
1010e4c0:	10800104 	addi	r2,r2,4
1010e4c4:	1007883a 	mov	r3,r2
1010e4c8:	e0bff917 	ldw	r2,-28(fp)
1010e4cc:	10800817 	ldw	r2,32(r2)
1010e4d0:	10810014 	ori	r2,r2,1024
1010e4d4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
1010e4d8:	e0bff917 	ldw	r2,-28(fp)
1010e4dc:	10000915 	stw	zero,36(r2)
1010e4e0:	00000a06 	br	1010e50c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
1010e4e4:	e0bff917 	ldw	r2,-28(fp)
1010e4e8:	10c00917 	ldw	r3,36(r2)
1010e4ec:	00a00034 	movhi	r2,32768
1010e4f0:	10bfff04 	addi	r2,r2,-4
1010e4f4:	10c00536 	bltu	r2,r3,1010e50c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
1010e4f8:	e0bff917 	ldw	r2,-28(fp)
1010e4fc:	10800917 	ldw	r2,36(r2)
1010e500:	10c00044 	addi	r3,r2,1
1010e504:	e0bff917 	ldw	r2,-28(fp)
1010e508:	10c00915 	stw	r3,36(r2)
1010e50c:	d0a70417 	ldw	r2,-25584(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
1010e510:	e037883a 	mov	sp,fp
1010e514:	df000017 	ldw	fp,0(sp)
1010e518:	dec00104 	addi	sp,sp,4
1010e51c:	f800283a 	ret

1010e520 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
1010e520:	defffd04 	addi	sp,sp,-12
1010e524:	df000215 	stw	fp,8(sp)
1010e528:	df000204 	addi	fp,sp,8
1010e52c:	e13ffe15 	stw	r4,-8(fp)
1010e530:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1010e534:	00000506 	br	1010e54c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
1010e538:	e0bfff17 	ldw	r2,-4(fp)
1010e53c:	1090000c 	andi	r2,r2,16384
1010e540:	10000226 	beq	r2,zero,1010e54c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
1010e544:	00bffd44 	movi	r2,-11
1010e548:	00000b06 	br	1010e578 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1010e54c:	e0bffe17 	ldw	r2,-8(fp)
1010e550:	10c00d17 	ldw	r3,52(r2)
1010e554:	e0bffe17 	ldw	r2,-8(fp)
1010e558:	10800c17 	ldw	r2,48(r2)
1010e55c:	18800526 	beq	r3,r2,1010e574 <altera_avalon_jtag_uart_close+0x54>
1010e560:	e0bffe17 	ldw	r2,-8(fp)
1010e564:	10c00917 	ldw	r3,36(r2)
1010e568:	e0bffe17 	ldw	r2,-8(fp)
1010e56c:	10800117 	ldw	r2,4(r2)
1010e570:	18bff136 	bltu	r3,r2,1010e538 <__alt_data_end+0xfffee538>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
1010e574:	0005883a 	mov	r2,zero
}
1010e578:	e037883a 	mov	sp,fp
1010e57c:	df000017 	ldw	fp,0(sp)
1010e580:	dec00104 	addi	sp,sp,4
1010e584:	f800283a 	ret

1010e588 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
1010e588:	defffa04 	addi	sp,sp,-24
1010e58c:	df000515 	stw	fp,20(sp)
1010e590:	df000504 	addi	fp,sp,20
1010e594:	e13ffd15 	stw	r4,-12(fp)
1010e598:	e17ffe15 	stw	r5,-8(fp)
1010e59c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
1010e5a0:	00bff9c4 	movi	r2,-25
1010e5a4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
1010e5a8:	e0bffe17 	ldw	r2,-8(fp)
1010e5ac:	10da8060 	cmpeqi	r3,r2,27137
1010e5b0:	1800031e 	bne	r3,zero,1010e5c0 <altera_avalon_jtag_uart_ioctl+0x38>
1010e5b4:	109a80a0 	cmpeqi	r2,r2,27138
1010e5b8:	1000181e 	bne	r2,zero,1010e61c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
1010e5bc:	00002906 	br	1010e664 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
1010e5c0:	e0bffd17 	ldw	r2,-12(fp)
1010e5c4:	10c00117 	ldw	r3,4(r2)
1010e5c8:	00a00034 	movhi	r2,32768
1010e5cc:	10bfffc4 	addi	r2,r2,-1
1010e5d0:	18802126 	beq	r3,r2,1010e658 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
1010e5d4:	e0bfff17 	ldw	r2,-4(fp)
1010e5d8:	10800017 	ldw	r2,0(r2)
1010e5dc:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
1010e5e0:	e0bffc17 	ldw	r2,-16(fp)
1010e5e4:	10800090 	cmplti	r2,r2,2
1010e5e8:	1000061e 	bne	r2,zero,1010e604 <altera_avalon_jtag_uart_ioctl+0x7c>
1010e5ec:	e0fffc17 	ldw	r3,-16(fp)
1010e5f0:	00a00034 	movhi	r2,32768
1010e5f4:	10bfffc4 	addi	r2,r2,-1
1010e5f8:	18800226 	beq	r3,r2,1010e604 <altera_avalon_jtag_uart_ioctl+0x7c>
1010e5fc:	e0bffc17 	ldw	r2,-16(fp)
1010e600:	00000206 	br	1010e60c <altera_avalon_jtag_uart_ioctl+0x84>
1010e604:	00a00034 	movhi	r2,32768
1010e608:	10bfff84 	addi	r2,r2,-2
1010e60c:	e0fffd17 	ldw	r3,-12(fp)
1010e610:	18800115 	stw	r2,4(r3)
      rc = 0;
1010e614:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1010e618:	00000f06 	br	1010e658 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
1010e61c:	e0bffd17 	ldw	r2,-12(fp)
1010e620:	10c00117 	ldw	r3,4(r2)
1010e624:	00a00034 	movhi	r2,32768
1010e628:	10bfffc4 	addi	r2,r2,-1
1010e62c:	18800c26 	beq	r3,r2,1010e660 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
1010e630:	e0bffd17 	ldw	r2,-12(fp)
1010e634:	10c00917 	ldw	r3,36(r2)
1010e638:	e0bffd17 	ldw	r2,-12(fp)
1010e63c:	10800117 	ldw	r2,4(r2)
1010e640:	1885803a 	cmpltu	r2,r3,r2
1010e644:	10c03fcc 	andi	r3,r2,255
1010e648:	e0bfff17 	ldw	r2,-4(fp)
1010e64c:	10c00015 	stw	r3,0(r2)
      rc = 0;
1010e650:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1010e654:	00000206 	br	1010e660 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
1010e658:	0001883a 	nop
1010e65c:	00000106 	br	1010e664 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
1010e660:	0001883a 	nop

  default:
    break;
  }

  return rc;
1010e664:	e0bffb17 	ldw	r2,-20(fp)
}
1010e668:	e037883a 	mov	sp,fp
1010e66c:	df000017 	ldw	fp,0(sp)
1010e670:	dec00104 	addi	sp,sp,4
1010e674:	f800283a 	ret

1010e678 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
1010e678:	defff304 	addi	sp,sp,-52
1010e67c:	dfc00c15 	stw	ra,48(sp)
1010e680:	df000b15 	stw	fp,44(sp)
1010e684:	df000b04 	addi	fp,sp,44
1010e688:	e13ffc15 	stw	r4,-16(fp)
1010e68c:	e17ffd15 	stw	r5,-12(fp)
1010e690:	e1bffe15 	stw	r6,-8(fp)
1010e694:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
1010e698:	e0bffd17 	ldw	r2,-12(fp)
1010e69c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1010e6a0:	00004706 	br	1010e7c0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
1010e6a4:	e0bffc17 	ldw	r2,-16(fp)
1010e6a8:	10800a17 	ldw	r2,40(r2)
1010e6ac:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
1010e6b0:	e0bffc17 	ldw	r2,-16(fp)
1010e6b4:	10800b17 	ldw	r2,44(r2)
1010e6b8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
1010e6bc:	e0fff717 	ldw	r3,-36(fp)
1010e6c0:	e0bff817 	ldw	r2,-32(fp)
1010e6c4:	18800536 	bltu	r3,r2,1010e6dc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
1010e6c8:	e0fff717 	ldw	r3,-36(fp)
1010e6cc:	e0bff817 	ldw	r2,-32(fp)
1010e6d0:	1885c83a 	sub	r2,r3,r2
1010e6d4:	e0bff615 	stw	r2,-40(fp)
1010e6d8:	00000406 	br	1010e6ec <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
1010e6dc:	00c20004 	movi	r3,2048
1010e6e0:	e0bff817 	ldw	r2,-32(fp)
1010e6e4:	1885c83a 	sub	r2,r3,r2
1010e6e8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1010e6ec:	e0bff617 	ldw	r2,-40(fp)
1010e6f0:	10001e26 	beq	r2,zero,1010e76c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
1010e6f4:	e0fffe17 	ldw	r3,-8(fp)
1010e6f8:	e0bff617 	ldw	r2,-40(fp)
1010e6fc:	1880022e 	bgeu	r3,r2,1010e708 <altera_avalon_jtag_uart_read+0x90>
        n = space;
1010e700:	e0bffe17 	ldw	r2,-8(fp)
1010e704:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
1010e708:	e0bffc17 	ldw	r2,-16(fp)
1010e70c:	10c00e04 	addi	r3,r2,56
1010e710:	e0bff817 	ldw	r2,-32(fp)
1010e714:	1885883a 	add	r2,r3,r2
1010e718:	e1bff617 	ldw	r6,-40(fp)
1010e71c:	100b883a 	mov	r5,r2
1010e720:	e13ff517 	ldw	r4,-44(fp)
1010e724:	01069ac0 	call	101069ac <memcpy>
      ptr   += n;
1010e728:	e0fff517 	ldw	r3,-44(fp)
1010e72c:	e0bff617 	ldw	r2,-40(fp)
1010e730:	1885883a 	add	r2,r3,r2
1010e734:	e0bff515 	stw	r2,-44(fp)
      space -= n;
1010e738:	e0fffe17 	ldw	r3,-8(fp)
1010e73c:	e0bff617 	ldw	r2,-40(fp)
1010e740:	1885c83a 	sub	r2,r3,r2
1010e744:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1010e748:	e0fff817 	ldw	r3,-32(fp)
1010e74c:	e0bff617 	ldw	r2,-40(fp)
1010e750:	1885883a 	add	r2,r3,r2
1010e754:	10c1ffcc 	andi	r3,r2,2047
1010e758:	e0bffc17 	ldw	r2,-16(fp)
1010e75c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
1010e760:	e0bffe17 	ldw	r2,-8(fp)
1010e764:	00bfcf16 	blt	zero,r2,1010e6a4 <__alt_data_end+0xfffee6a4>
1010e768:	00000106 	br	1010e770 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
1010e76c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
1010e770:	e0fff517 	ldw	r3,-44(fp)
1010e774:	e0bffd17 	ldw	r2,-12(fp)
1010e778:	1880141e 	bne	r3,r2,1010e7cc <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
1010e77c:	e0bfff17 	ldw	r2,-4(fp)
1010e780:	1090000c 	andi	r2,r2,16384
1010e784:	1000131e 	bne	r2,zero,1010e7d4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
1010e788:	0001883a 	nop
1010e78c:	e0bffc17 	ldw	r2,-16(fp)
1010e790:	10c00a17 	ldw	r3,40(r2)
1010e794:	e0bff717 	ldw	r2,-36(fp)
1010e798:	1880051e 	bne	r3,r2,1010e7b0 <altera_avalon_jtag_uart_read+0x138>
1010e79c:	e0bffc17 	ldw	r2,-16(fp)
1010e7a0:	10c00917 	ldw	r3,36(r2)
1010e7a4:	e0bffc17 	ldw	r2,-16(fp)
1010e7a8:	10800117 	ldw	r2,4(r2)
1010e7ac:	18bff736 	bltu	r3,r2,1010e78c <__alt_data_end+0xfffee78c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
1010e7b0:	e0bffc17 	ldw	r2,-16(fp)
1010e7b4:	10c00a17 	ldw	r3,40(r2)
1010e7b8:	e0bff717 	ldw	r2,-36(fp)
1010e7bc:	18800726 	beq	r3,r2,1010e7dc <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1010e7c0:	e0bffe17 	ldw	r2,-8(fp)
1010e7c4:	00bfb716 	blt	zero,r2,1010e6a4 <__alt_data_end+0xfffee6a4>
1010e7c8:	00000506 	br	1010e7e0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
1010e7cc:	0001883a 	nop
1010e7d0:	00000306 	br	1010e7e0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
1010e7d4:	0001883a 	nop
1010e7d8:	00000106 	br	1010e7e0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
1010e7dc:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
1010e7e0:	e0fff517 	ldw	r3,-44(fp)
1010e7e4:	e0bffd17 	ldw	r2,-12(fp)
1010e7e8:	18801826 	beq	r3,r2,1010e84c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1010e7ec:	0005303a 	rdctl	r2,status
1010e7f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1010e7f4:	e0fffb17 	ldw	r3,-20(fp)
1010e7f8:	00bfff84 	movi	r2,-2
1010e7fc:	1884703a 	and	r2,r3,r2
1010e800:	1001703a 	wrctl	status,r2
  
  return context;
1010e804:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
1010e808:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1010e80c:	e0bffc17 	ldw	r2,-16(fp)
1010e810:	10800817 	ldw	r2,32(r2)
1010e814:	10c00054 	ori	r3,r2,1
1010e818:	e0bffc17 	ldw	r2,-16(fp)
1010e81c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1010e820:	e0bffc17 	ldw	r2,-16(fp)
1010e824:	10800017 	ldw	r2,0(r2)
1010e828:	10800104 	addi	r2,r2,4
1010e82c:	1007883a 	mov	r3,r2
1010e830:	e0bffc17 	ldw	r2,-16(fp)
1010e834:	10800817 	ldw	r2,32(r2)
1010e838:	18800035 	stwio	r2,0(r3)
1010e83c:	e0bffa17 	ldw	r2,-24(fp)
1010e840:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1010e844:	e0bff917 	ldw	r2,-28(fp)
1010e848:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
1010e84c:	e0fff517 	ldw	r3,-44(fp)
1010e850:	e0bffd17 	ldw	r2,-12(fp)
1010e854:	18800426 	beq	r3,r2,1010e868 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
1010e858:	e0fff517 	ldw	r3,-44(fp)
1010e85c:	e0bffd17 	ldw	r2,-12(fp)
1010e860:	1885c83a 	sub	r2,r3,r2
1010e864:	00000606 	br	1010e880 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
1010e868:	e0bfff17 	ldw	r2,-4(fp)
1010e86c:	1090000c 	andi	r2,r2,16384
1010e870:	10000226 	beq	r2,zero,1010e87c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
1010e874:	00bffd44 	movi	r2,-11
1010e878:	00000106 	br	1010e880 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
1010e87c:	00bffec4 	movi	r2,-5
}
1010e880:	e037883a 	mov	sp,fp
1010e884:	dfc00117 	ldw	ra,4(sp)
1010e888:	df000017 	ldw	fp,0(sp)
1010e88c:	dec00204 	addi	sp,sp,8
1010e890:	f800283a 	ret

1010e894 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
1010e894:	defff304 	addi	sp,sp,-52
1010e898:	dfc00c15 	stw	ra,48(sp)
1010e89c:	df000b15 	stw	fp,44(sp)
1010e8a0:	df000b04 	addi	fp,sp,44
1010e8a4:	e13ffc15 	stw	r4,-16(fp)
1010e8a8:	e17ffd15 	stw	r5,-12(fp)
1010e8ac:	e1bffe15 	stw	r6,-8(fp)
1010e8b0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
1010e8b4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
1010e8b8:	e0bffd17 	ldw	r2,-12(fp)
1010e8bc:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1010e8c0:	00003706 	br	1010e9a0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
1010e8c4:	e0bffc17 	ldw	r2,-16(fp)
1010e8c8:	10800c17 	ldw	r2,48(r2)
1010e8cc:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
1010e8d0:	e0bffc17 	ldw	r2,-16(fp)
1010e8d4:	10800d17 	ldw	r2,52(r2)
1010e8d8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
1010e8dc:	e0fff917 	ldw	r3,-28(fp)
1010e8e0:	e0bff517 	ldw	r2,-44(fp)
1010e8e4:	1880062e 	bgeu	r3,r2,1010e900 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
1010e8e8:	e0fff517 	ldw	r3,-44(fp)
1010e8ec:	e0bff917 	ldw	r2,-28(fp)
1010e8f0:	1885c83a 	sub	r2,r3,r2
1010e8f4:	10bfffc4 	addi	r2,r2,-1
1010e8f8:	e0bff615 	stw	r2,-40(fp)
1010e8fc:	00000b06 	br	1010e92c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
1010e900:	e0bff517 	ldw	r2,-44(fp)
1010e904:	10000526 	beq	r2,zero,1010e91c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
1010e908:	00c20004 	movi	r3,2048
1010e90c:	e0bff917 	ldw	r2,-28(fp)
1010e910:	1885c83a 	sub	r2,r3,r2
1010e914:	e0bff615 	stw	r2,-40(fp)
1010e918:	00000406 	br	1010e92c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
1010e91c:	00c1ffc4 	movi	r3,2047
1010e920:	e0bff917 	ldw	r2,-28(fp)
1010e924:	1885c83a 	sub	r2,r3,r2
1010e928:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1010e92c:	e0bff617 	ldw	r2,-40(fp)
1010e930:	10001e26 	beq	r2,zero,1010e9ac <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
1010e934:	e0fffe17 	ldw	r3,-8(fp)
1010e938:	e0bff617 	ldw	r2,-40(fp)
1010e93c:	1880022e 	bgeu	r3,r2,1010e948 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
1010e940:	e0bffe17 	ldw	r2,-8(fp)
1010e944:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
1010e948:	e0bffc17 	ldw	r2,-16(fp)
1010e94c:	10c20e04 	addi	r3,r2,2104
1010e950:	e0bff917 	ldw	r2,-28(fp)
1010e954:	1885883a 	add	r2,r3,r2
1010e958:	e1bff617 	ldw	r6,-40(fp)
1010e95c:	e17ffd17 	ldw	r5,-12(fp)
1010e960:	1009883a 	mov	r4,r2
1010e964:	01069ac0 	call	101069ac <memcpy>
      ptr   += n;
1010e968:	e0fffd17 	ldw	r3,-12(fp)
1010e96c:	e0bff617 	ldw	r2,-40(fp)
1010e970:	1885883a 	add	r2,r3,r2
1010e974:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
1010e978:	e0fffe17 	ldw	r3,-8(fp)
1010e97c:	e0bff617 	ldw	r2,-40(fp)
1010e980:	1885c83a 	sub	r2,r3,r2
1010e984:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1010e988:	e0fff917 	ldw	r3,-28(fp)
1010e98c:	e0bff617 	ldw	r2,-40(fp)
1010e990:	1885883a 	add	r2,r3,r2
1010e994:	10c1ffcc 	andi	r3,r2,2047
1010e998:	e0bffc17 	ldw	r2,-16(fp)
1010e99c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1010e9a0:	e0bffe17 	ldw	r2,-8(fp)
1010e9a4:	00bfc716 	blt	zero,r2,1010e8c4 <__alt_data_end+0xfffee8c4>
1010e9a8:	00000106 	br	1010e9b0 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
1010e9ac:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1010e9b0:	0005303a 	rdctl	r2,status
1010e9b4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1010e9b8:	e0fffb17 	ldw	r3,-20(fp)
1010e9bc:	00bfff84 	movi	r2,-2
1010e9c0:	1884703a 	and	r2,r3,r2
1010e9c4:	1001703a 	wrctl	status,r2
  
  return context;
1010e9c8:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
1010e9cc:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1010e9d0:	e0bffc17 	ldw	r2,-16(fp)
1010e9d4:	10800817 	ldw	r2,32(r2)
1010e9d8:	10c00094 	ori	r3,r2,2
1010e9dc:	e0bffc17 	ldw	r2,-16(fp)
1010e9e0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1010e9e4:	e0bffc17 	ldw	r2,-16(fp)
1010e9e8:	10800017 	ldw	r2,0(r2)
1010e9ec:	10800104 	addi	r2,r2,4
1010e9f0:	1007883a 	mov	r3,r2
1010e9f4:	e0bffc17 	ldw	r2,-16(fp)
1010e9f8:	10800817 	ldw	r2,32(r2)
1010e9fc:	18800035 	stwio	r2,0(r3)
1010ea00:	e0bffa17 	ldw	r2,-24(fp)
1010ea04:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1010ea08:	e0bff817 	ldw	r2,-32(fp)
1010ea0c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
1010ea10:	e0bffe17 	ldw	r2,-8(fp)
1010ea14:	0080100e 	bge	zero,r2,1010ea58 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
1010ea18:	e0bfff17 	ldw	r2,-4(fp)
1010ea1c:	1090000c 	andi	r2,r2,16384
1010ea20:	1000101e 	bne	r2,zero,1010ea64 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
1010ea24:	0001883a 	nop
1010ea28:	e0bffc17 	ldw	r2,-16(fp)
1010ea2c:	10c00d17 	ldw	r3,52(r2)
1010ea30:	e0bff517 	ldw	r2,-44(fp)
1010ea34:	1880051e 	bne	r3,r2,1010ea4c <altera_avalon_jtag_uart_write+0x1b8>
1010ea38:	e0bffc17 	ldw	r2,-16(fp)
1010ea3c:	10c00917 	ldw	r3,36(r2)
1010ea40:	e0bffc17 	ldw	r2,-16(fp)
1010ea44:	10800117 	ldw	r2,4(r2)
1010ea48:	18bff736 	bltu	r3,r2,1010ea28 <__alt_data_end+0xfffeea28>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
1010ea4c:	e0bffc17 	ldw	r2,-16(fp)
1010ea50:	10800917 	ldw	r2,36(r2)
1010ea54:	1000051e 	bne	r2,zero,1010ea6c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
1010ea58:	e0bffe17 	ldw	r2,-8(fp)
1010ea5c:	00bfd016 	blt	zero,r2,1010e9a0 <__alt_data_end+0xfffee9a0>
1010ea60:	00000306 	br	1010ea70 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
1010ea64:	0001883a 	nop
1010ea68:	00000106 	br	1010ea70 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
1010ea6c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
1010ea70:	e0fffd17 	ldw	r3,-12(fp)
1010ea74:	e0bff717 	ldw	r2,-36(fp)
1010ea78:	18800426 	beq	r3,r2,1010ea8c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
1010ea7c:	e0fffd17 	ldw	r3,-12(fp)
1010ea80:	e0bff717 	ldw	r2,-36(fp)
1010ea84:	1885c83a 	sub	r2,r3,r2
1010ea88:	00000606 	br	1010eaa4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
1010ea8c:	e0bfff17 	ldw	r2,-4(fp)
1010ea90:	1090000c 	andi	r2,r2,16384
1010ea94:	10000226 	beq	r2,zero,1010eaa0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
1010ea98:	00bffd44 	movi	r2,-11
1010ea9c:	00000106 	br	1010eaa4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
1010eaa0:	00bffec4 	movi	r2,-5
}
1010eaa4:	e037883a 	mov	sp,fp
1010eaa8:	dfc00117 	ldw	ra,4(sp)
1010eaac:	df000017 	ldw	fp,0(sp)
1010eab0:	dec00204 	addi	sp,sp,8
1010eab4:	f800283a 	ret

1010eab8 <alt_hostfs_open>:
* alt_hostfs_open
*
* If we can't find anything return -1
*/
int alt_hostfs_open(alt_fd* fd, const char * name, int flags, int mode)
{
1010eab8:	defff404 	addi	sp,sp,-48
1010eabc:	df000b15 	stw	fp,44(sp)
1010eac0:	df000b04 	addi	fp,sp,44
1010eac4:	e13ffc15 	stw	r4,-16(fp)
1010eac8:	e17ffd15 	stw	r5,-12(fp)
1010eacc:	e1bffe15 	stw	r6,-8(fp)
1010ead0:	e1ffff15 	stw	r7,-4(fp)
  static const struct HOSTCALL_INFO hcinfo = { 0x0103, "open" };

  alt_hostfs_dev* dev= (alt_hostfs_dev*)fd->dev;
1010ead4:	e0bffc17 	ldw	r2,-16(fp)
1010ead8:	10800017 	ldw	r2,0(r2)
1010eadc:	e0bff515 	stw	r2,-44(fp)
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
1010eae0:	e0bff517 	ldw	r2,-44(fp)
1010eae4:	10800217 	ldw	r2,8(r2)
1010eae8:	e0bff615 	stw	r2,-40(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
1010eaec:	e0bff617 	ldw	r2,-40(fp)
1010eaf0:	10bfffc4 	addi	r2,r2,-1
1010eaf4:	e0bffb15 	stw	r2,-20(fp)

  while (*++ptr != 0)
1010eaf8:	e0bffb17 	ldw	r2,-20(fp)
1010eafc:	10800044 	addi	r2,r2,1
1010eb00:	e0bffb15 	stw	r2,-20(fp)
1010eb04:	e0bffb17 	ldw	r2,-20(fp)
1010eb08:	10800003 	ldbu	r2,0(r2)
1010eb0c:	10803fcc 	andi	r2,r2,255
1010eb10:	1080201c 	xori	r2,r2,128
1010eb14:	10bfe004 	addi	r2,r2,-128
1010eb18:	103ff71e 	bne	r2,zero,1010eaf8 <__alt_data_end+0xfffeeaf8>
    ;

  return ptr - string;
1010eb1c:	e0fffb17 	ldw	r3,-20(fp)
1010eb20:	e0bff617 	ldw	r2,-40(fp)
1010eb24:	1885c83a 	sub	r2,r3,r2
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
1010eb28:	10800044 	addi	r2,r2,1
1010eb2c:	1007883a 	mov	r3,r2
1010eb30:	e0bffd17 	ldw	r2,-12(fp)
1010eb34:	10c5883a 	add	r2,r2,r3
1010eb38:	e0bffd15 	stw	r2,-12(fp)

  r3 = (int)&hcinfo;
1010eb3c:	d0a00d04 	addi	r2,gp,-32716
1010eb40:	1007883a 	mov	r3,r2
  r4 = (int)name;
1010eb44:	e0bffd17 	ldw	r2,-12(fp)
1010eb48:	1009883a 	mov	r4,r2
  r5 = flags;
1010eb4c:	e17ffe17 	ldw	r5,-8(fp)
  r6 = mode;
1010eb50:	e1bfff17 	ldw	r6,-4(fp)
1010eb54:	e0bffd17 	ldw	r2,-12(fp)
1010eb58:	e0bff915 	stw	r2,-28(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
1010eb5c:	e0bff917 	ldw	r2,-28(fp)
1010eb60:	10bfffc4 	addi	r2,r2,-1
1010eb64:	e0bffa15 	stw	r2,-24(fp)

  while (*++ptr != 0)
1010eb68:	e0bffa17 	ldw	r2,-24(fp)
1010eb6c:	10800044 	addi	r2,r2,1
1010eb70:	e0bffa15 	stw	r2,-24(fp)
1010eb74:	e0bffa17 	ldw	r2,-24(fp)
1010eb78:	10800003 	ldbu	r2,0(r2)
1010eb7c:	10803fcc 	andi	r2,r2,255
1010eb80:	1080201c 	xori	r2,r2,128
1010eb84:	10bfe004 	addi	r2,r2,-128
1010eb88:	103ff71e 	bne	r2,zero,1010eb68 <__alt_data_end+0xfffeeb68>
    ;

  return ptr - string;
1010eb8c:	e1fffa17 	ldw	r7,-24(fp)
1010eb90:	e0bff917 	ldw	r2,-28(fp)
1010eb94:	3885c83a 	sub	r2,r7,r2

  r3 = (int)&hcinfo;
  r4 = (int)name;
  r5 = flags;
  r6 = mode;
  r7 = inline_strlen(name);
1010eb98:	100f883a 	mov	r7,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6), "r" (r7) : "memory" );
1010eb9c:	003da07a 	break	1

  handle = (void *)r2;
1010eba0:	e0bff715 	stw	r2,-36(fp)
  error = r3;
1010eba4:	e0fff815 	stw	r3,-32(fp)

  if (error == 0)
1010eba8:	e0bff817 	ldw	r2,-32(fp)
1010ebac:	1000031e 	bne	r2,zero,1010ebbc <alt_hostfs_open+0x104>
    fd->priv = handle;
1010ebb0:	e0bffc17 	ldw	r2,-16(fp)
1010ebb4:	e0fff717 	ldw	r3,-36(fp)
1010ebb8:	10c00115 	stw	r3,4(r2)

  return -error;
1010ebbc:	e0bff817 	ldw	r2,-32(fp)
1010ebc0:	0085c83a 	sub	r2,zero,r2
}
1010ebc4:	e037883a 	mov	sp,fp
1010ebc8:	df000017 	ldw	fp,0(sp)
1010ebcc:	dec00104 	addi	sp,sp,4
1010ebd0:	f800283a 	ret

1010ebd4 <alt_hostfs_close>:
* alt_hostfs_close
*
* Read the file
*/
int alt_hostfs_close(alt_fd* fd)
{
1010ebd4:	defffd04 	addi	sp,sp,-12
1010ebd8:	df000215 	stw	fp,8(sp)
1010ebdc:	df000204 	addi	fp,sp,8
1010ebe0:	e13fff15 	stw	r4,-4(fp)

  /* Input and output parameters for the hostcall */
  register int r3 asm ("r3");
  register int r4 asm ("r4");

  r3 = (int)&hcinfo;
1010ebe4:	d0a01004 	addi	r2,gp,-32704
1010ebe8:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
1010ebec:	e0bfff17 	ldw	r2,-4(fp)
1010ebf0:	10800117 	ldw	r2,4(r2)
1010ebf4:	1009883a 	mov	r4,r2

  __asm__ volatile("break 1" : "+r" (r3) : "r" (r4) );
1010ebf8:	003da07a 	break	1

  error = r3;
1010ebfc:	e0fffe15 	stw	r3,-8(fp)

  return -error;
1010ec00:	e0bffe17 	ldw	r2,-8(fp)
1010ec04:	0085c83a 	sub	r2,zero,r2
}
1010ec08:	e037883a 	mov	sp,fp
1010ec0c:	df000017 	ldw	fp,0(sp)
1010ec10:	dec00104 	addi	sp,sp,4
1010ec14:	f800283a 	ret

1010ec18 <alt_hostfs_read>:
* alt_hostfs_read
*
* Read the file
*/
int alt_hostfs_read(alt_fd* fd, char * ptr, int len)
{
1010ec18:	defffa04 	addi	sp,sp,-24
1010ec1c:	df000515 	stw	fp,20(sp)
1010ec20:	df000504 	addi	fp,sp,20
1010ec24:	e13ffd15 	stw	r4,-12(fp)
1010ec28:	e17ffe15 	stw	r5,-8(fp)
1010ec2c:	e1bfff15 	stw	r6,-4(fp)
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");


  r3 = (int)&hcinfo;
1010ec30:	d0a01304 	addi	r2,gp,-32692
1010ec34:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
1010ec38:	e0bffd17 	ldw	r2,-12(fp)
1010ec3c:	10800117 	ldw	r2,4(r2)
1010ec40:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
1010ec44:	e0bffe17 	ldw	r2,-8(fp)
1010ec48:	100b883a 	mov	r5,r2
  r6 = len;
1010ec4c:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
1010ec50:	003da07a 	break	1

  rc = r2;
1010ec54:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
1010ec58:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
1010ec5c:	e0bffc17 	ldw	r2,-16(fp)
1010ec60:	10000326 	beq	r2,zero,1010ec70 <alt_hostfs_read+0x58>
1010ec64:	e0bffc17 	ldw	r2,-16(fp)
1010ec68:	0085c83a 	sub	r2,zero,r2
1010ec6c:	00000106 	br	1010ec74 <alt_hostfs_read+0x5c>
1010ec70:	e0bffb17 	ldw	r2,-20(fp)
}
1010ec74:	e037883a 	mov	sp,fp
1010ec78:	df000017 	ldw	fp,0(sp)
1010ec7c:	dec00104 	addi	sp,sp,4
1010ec80:	f800283a 	ret

1010ec84 <alt_hostfs_write>:
* alt_hostfs_write
*
* Read the file
*/
int alt_hostfs_write(alt_fd* fd, const char * ptr, int len)
{
1010ec84:	defffa04 	addi	sp,sp,-24
1010ec88:	df000515 	stw	fp,20(sp)
1010ec8c:	df000504 	addi	fp,sp,20
1010ec90:	e13ffd15 	stw	r4,-12(fp)
1010ec94:	e17ffe15 	stw	r5,-8(fp)
1010ec98:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
1010ec9c:	d0a01604 	addi	r2,gp,-32680
1010eca0:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
1010eca4:	e0bffd17 	ldw	r2,-12(fp)
1010eca8:	10800117 	ldw	r2,4(r2)
1010ecac:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
1010ecb0:	e0bffe17 	ldw	r2,-8(fp)
1010ecb4:	100b883a 	mov	r5,r2
  r6 = len;
1010ecb8:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
1010ecbc:	003da07a 	break	1

  rc = r2;
1010ecc0:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
1010ecc4:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
1010ecc8:	e0bffc17 	ldw	r2,-16(fp)
1010eccc:	10000326 	beq	r2,zero,1010ecdc <alt_hostfs_write+0x58>
1010ecd0:	e0bffc17 	ldw	r2,-16(fp)
1010ecd4:	0085c83a 	sub	r2,zero,r2
1010ecd8:	00000106 	br	1010ece0 <alt_hostfs_write+0x5c>
1010ecdc:	e0bffb17 	ldw	r2,-20(fp)
}
1010ece0:	e037883a 	mov	sp,fp
1010ece4:	df000017 	ldw	fp,0(sp)
1010ece8:	dec00104 	addi	sp,sp,4
1010ecec:	f800283a 	ret

1010ecf0 <alt_hostfs_seek>:
* Move around within a file
*
* returns -errno for an error or the offset within the file
*/
int alt_hostfs_seek(alt_fd* fd, int ptr, int dir)
{
1010ecf0:	defffa04 	addi	sp,sp,-24
1010ecf4:	df000515 	stw	fp,20(sp)
1010ecf8:	df000504 	addi	fp,sp,20
1010ecfc:	e13ffd15 	stw	r4,-12(fp)
1010ed00:	e17ffe15 	stw	r5,-8(fp)
1010ed04:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
1010ed08:	d0a01904 	addi	r2,gp,-32668
1010ed0c:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
1010ed10:	e0bffd17 	ldw	r2,-12(fp)
1010ed14:	10800117 	ldw	r2,4(r2)
1010ed18:	1009883a 	mov	r4,r2
  r5 = ptr;
1010ed1c:	e17ffe17 	ldw	r5,-8(fp)
  r6 = dir;
1010ed20:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
1010ed24:	003da07a 	break	1

  rc = r2;
1010ed28:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
1010ed2c:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
1010ed30:	e0bffc17 	ldw	r2,-16(fp)
1010ed34:	10000326 	beq	r2,zero,1010ed44 <alt_hostfs_seek+0x54>
1010ed38:	e0bffc17 	ldw	r2,-16(fp)
1010ed3c:	0085c83a 	sub	r2,zero,r2
1010ed40:	00000106 	br	1010ed48 <alt_hostfs_seek+0x58>
1010ed44:	e0bffb17 	ldw	r2,-20(fp)
}
1010ed48:	e037883a 	mov	sp,fp
1010ed4c:	df000017 	ldw	fp,0(sp)
1010ed50:	dec00104 	addi	sp,sp,4
1010ed54:	f800283a 	ret

1010ed58 <alt_hostfs_fstat>:
* at the lower address.
* We need to copy the structure and byte swap it to make it match our local
* layout of struct stat.
*/
int alt_hostfs_fstat(alt_fd* fd, struct stat* st)
{
1010ed58:	deffe904 	addi	sp,sp,-92
1010ed5c:	df001615 	stw	fp,88(sp)
1010ed60:	df001604 	addi	fp,sp,88
1010ed64:	e13ffe15 	stw	r4,-8(fp)
1010ed68:	e17fff15 	stw	r5,-4(fp)
  register int r2 asm ("r2");
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");

  r3 = (int)&hcinfo;
1010ed6c:	d0a01c04 	addi	r2,gp,-32656
1010ed70:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
1010ed74:	e0bffe17 	ldw	r2,-8(fp)
1010ed78:	10800117 	ldw	r2,4(r2)
1010ed7c:	1009883a 	mov	r4,r2
  r5 = (int)&hoststat;
1010ed80:	e0bfee04 	addi	r2,fp,-72
1010ed84:	100b883a 	mov	r5,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5) : "memory" );
1010ed88:	003da07a 	break	1

  rc = r2;
1010ed8c:	e0bfeb15 	stw	r2,-84(fp)
  error = r3;
1010ed90:	e0ffec15 	stw	r3,-80(fp)

  if (error == 0)
1010ed94:	e0bfec17 	ldw	r2,-80(fp)
1010ed98:	1000621e 	bne	r2,zero,1010ef24 <alt_hostfs_fstat+0x1cc>
     * no change is required.  On a little-endian processor we need to swap
     * the bytes in each word.
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
1010ed9c:	e0bfee04 	addi	r2,fp,-72
1010eda0:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
1010eda4:	e0bfea17 	ldw	r2,-88(fp)
1010eda8:	10801004 	addi	r2,r2,64
1010edac:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
1010edb0:	00001606 	br	1010ee0c <alt_hostfs_fstat+0xb4>
      *ptr = ((*ptr & 0xFF000000) >> 24) |
1010edb4:	e0bfea17 	ldw	r2,-88(fp)
1010edb8:	10800017 	ldw	r2,0(r2)
1010edbc:	1006d63a 	srli	r3,r2,24
             ((*ptr & 0x00FF0000) >> 8)  |
1010edc0:	e0bfea17 	ldw	r2,-88(fp)
1010edc4:	10800017 	ldw	r2,0(r2)
1010edc8:	10803fec 	andhi	r2,r2,255
1010edcc:	1004d23a 	srli	r2,r2,8

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
1010edd0:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
1010edd4:	e0bfea17 	ldw	r2,-88(fp)
1010edd8:	10800017 	ldw	r2,0(r2)
1010eddc:	10bfc00c 	andi	r2,r2,65280
1010ede0:	1004923a 	slli	r2,r2,8
#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
1010ede4:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
1010ede8:	e0bfea17 	ldw	r2,-88(fp)
1010edec:	10800017 	ldw	r2,0(r2)
1010edf0:	1004963a 	slli	r2,r2,24
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
1010edf4:	1886b03a 	or	r3,r3,r2

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
1010edf8:	e0bfea17 	ldw	r2,-88(fp)
1010edfc:	10c00015 	stw	r3,0(r2)
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
1010ee00:	e0bfea17 	ldw	r2,-88(fp)
1010ee04:	10800104 	addi	r2,r2,4
1010ee08:	e0bfea15 	stw	r2,-88(fp)
1010ee0c:	e0ffea17 	ldw	r3,-88(fp)
1010ee10:	e0bfed17 	ldw	r2,-76(fp)
1010ee14:	18bfe736 	bltu	r3,r2,1010edb4 <__alt_data_end+0xfffeedb4>
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
1010ee18:	e0bfff17 	ldw	r2,-4(fp)
1010ee1c:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
1010ee20:	e0bfea17 	ldw	r2,-88(fp)
1010ee24:	10800f04 	addi	r2,r2,60
1010ee28:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
1010ee2c:	00000506 	br	1010ee44 <alt_hostfs_fstat+0xec>
      *ptr = 0;
1010ee30:	e0bfea17 	ldw	r2,-88(fp)
1010ee34:	10000015 	stw	zero,0(r2)
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
    for ( ; ptr < end ; ptr++)
1010ee38:	e0bfea17 	ldw	r2,-88(fp)
1010ee3c:	10800104 	addi	r2,r2,4
1010ee40:	e0bfea15 	stw	r2,-88(fp)
1010ee44:	e0ffea17 	ldw	r3,-88(fp)
1010ee48:	e0bfed17 	ldw	r2,-76(fp)
1010ee4c:	18bff836 	bltu	r3,r2,1010ee30 <__alt_data_end+0xfffeee30>

    /* Copy the data provided by the host into our local copy, for data which
     * is provided as 64bit values by the host we just use the least
     * significant word.
     */
    st->st_dev     = hoststat.fst_dev;
1010ee50:	e0bfee17 	ldw	r2,-72(fp)
1010ee54:	1007883a 	mov	r3,r2
1010ee58:	e0bfff17 	ldw	r2,-4(fp)
1010ee5c:	10c0000d 	sth	r3,0(r2)
    st->st_ino     = hoststat.fst_ino;
1010ee60:	e0bfef17 	ldw	r2,-68(fp)
1010ee64:	1007883a 	mov	r3,r2
1010ee68:	e0bfff17 	ldw	r2,-4(fp)
1010ee6c:	10c0008d 	sth	r3,2(r2)
    st->st_mode    = hoststat.fst_mode;
1010ee70:	e0fff017 	ldw	r3,-64(fp)
1010ee74:	e0bfff17 	ldw	r2,-4(fp)
1010ee78:	10c00115 	stw	r3,4(r2)
    st->st_nlink   = hoststat.fst_nlink;
1010ee7c:	e0bff117 	ldw	r2,-60(fp)
1010ee80:	1007883a 	mov	r3,r2
1010ee84:	e0bfff17 	ldw	r2,-4(fp)
1010ee88:	10c0020d 	sth	r3,8(r2)
    st->st_uid     = hoststat.fst_uid;
1010ee8c:	e0bff217 	ldw	r2,-56(fp)
1010ee90:	1007883a 	mov	r3,r2
1010ee94:	e0bfff17 	ldw	r2,-4(fp)
1010ee98:	10c0028d 	sth	r3,10(r2)
    st->st_gid     = hoststat.fst_gid;
1010ee9c:	e0bff317 	ldw	r2,-52(fp)
1010eea0:	1007883a 	mov	r3,r2
1010eea4:	e0bfff17 	ldw	r2,-4(fp)
1010eea8:	10c0030d 	sth	r3,12(r2)
    st->st_rdev    = hoststat.fst_rdev;
1010eeac:	e0bff417 	ldw	r2,-48(fp)
1010eeb0:	1007883a 	mov	r3,r2
1010eeb4:	e0bfff17 	ldw	r2,-4(fp)
1010eeb8:	10c0038d 	sth	r3,14(r2)
    st->st_size    = hoststat.fst_size[1];
1010eebc:	e0bff617 	ldw	r2,-40(fp)
1010eec0:	1007883a 	mov	r3,r2
1010eec4:	e0bfff17 	ldw	r2,-4(fp)
1010eec8:	10c00415 	stw	r3,16(r2)

    st->st_atime   = hoststat.fst_atime;
1010eecc:	e0bffb17 	ldw	r2,-20(fp)
1010eed0:	1007883a 	mov	r3,r2
1010eed4:	e0bfff17 	ldw	r2,-4(fp)
1010eed8:	10c00515 	stw	r3,20(r2)
    st->st_mtime   = hoststat.fst_mtime;
1010eedc:	e0bffc17 	ldw	r2,-16(fp)
1010eee0:	1007883a 	mov	r3,r2
1010eee4:	e0bfff17 	ldw	r2,-4(fp)
1010eee8:	10c00715 	stw	r3,28(r2)
    st->st_ctime   = hoststat.fst_ctime;
1010eeec:	e0bffd17 	ldw	r2,-12(fp)
1010eef0:	1007883a 	mov	r3,r2
1010eef4:	e0bfff17 	ldw	r2,-4(fp)
1010eef8:	10c00915 	stw	r3,36(r2)

    st->st_blksize = hoststat.fst_blksize[1];
1010eefc:	e0bff817 	ldw	r2,-32(fp)
1010ef00:	1007883a 	mov	r3,r2
1010ef04:	e0bfff17 	ldw	r2,-4(fp)
1010ef08:	10c00b15 	stw	r3,44(r2)
    st->st_blocks  = hoststat.fst_blocks[1];
1010ef0c:	e0bffa17 	ldw	r2,-24(fp)
1010ef10:	1007883a 	mov	r3,r2
1010ef14:	e0bfff17 	ldw	r2,-4(fp)
1010ef18:	10c00c15 	stw	r3,48(r2)

    return rc;
1010ef1c:	e0bfeb17 	ldw	r2,-84(fp)
1010ef20:	00000206 	br	1010ef2c <alt_hostfs_fstat+0x1d4>
  }
  else
    return -error;
1010ef24:	e0bfec17 	ldw	r2,-80(fp)
1010ef28:	0085c83a 	sub	r2,zero,r2
}
1010ef2c:	e037883a 	mov	sp,fp
1010ef30:	df000017 	ldw	fp,0(sp)
1010ef34:	dec00104 	addi	sp,sp,4
1010ef38:	f800283a 	ret

1010ef3c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
1010ef3c:	defff504 	addi	sp,sp,-44
1010ef40:	df000a15 	stw	fp,40(sp)
1010ef44:	df000a04 	addi	fp,sp,40
1010ef48:	e13ffc15 	stw	r4,-16(fp)
1010ef4c:	e17ffd15 	stw	r5,-12(fp)
1010ef50:	e1bffe15 	stw	r6,-8(fp)
1010ef54:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
1010ef58:	e03ff615 	stw	zero,-40(fp)
1010ef5c:	d0a70417 	ldw	r2,-25584(gp)
  
  if (alt_ticks_per_second ())
1010ef60:	10003c26 	beq	r2,zero,1010f054 <alt_alarm_start+0x118>
  {
    if (alarm)
1010ef64:	e0bffc17 	ldw	r2,-16(fp)
1010ef68:	10003826 	beq	r2,zero,1010f04c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
1010ef6c:	e0bffc17 	ldw	r2,-16(fp)
1010ef70:	e0fffe17 	ldw	r3,-8(fp)
1010ef74:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
1010ef78:	e0bffc17 	ldw	r2,-16(fp)
1010ef7c:	e0ffff17 	ldw	r3,-4(fp)
1010ef80:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1010ef84:	0005303a 	rdctl	r2,status
1010ef88:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1010ef8c:	e0fff917 	ldw	r3,-28(fp)
1010ef90:	00bfff84 	movi	r2,-2
1010ef94:	1884703a 	and	r2,r3,r2
1010ef98:	1001703a 	wrctl	status,r2
  
  return context;
1010ef9c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
1010efa0:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
1010efa4:	d0a70517 	ldw	r2,-25580(gp)
      
      current_nticks = alt_nticks();
1010efa8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
1010efac:	e0fffd17 	ldw	r3,-12(fp)
1010efb0:	e0bff617 	ldw	r2,-40(fp)
1010efb4:	1885883a 	add	r2,r3,r2
1010efb8:	10c00044 	addi	r3,r2,1
1010efbc:	e0bffc17 	ldw	r2,-16(fp)
1010efc0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
1010efc4:	e0bffc17 	ldw	r2,-16(fp)
1010efc8:	10c00217 	ldw	r3,8(r2)
1010efcc:	e0bff617 	ldw	r2,-40(fp)
1010efd0:	1880042e 	bgeu	r3,r2,1010efe4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
1010efd4:	e0bffc17 	ldw	r2,-16(fp)
1010efd8:	00c00044 	movi	r3,1
1010efdc:	10c00405 	stb	r3,16(r2)
1010efe0:	00000206 	br	1010efec <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
1010efe4:	e0bffc17 	ldw	r2,-16(fp)
1010efe8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
1010efec:	e0bffc17 	ldw	r2,-16(fp)
1010eff0:	d0e02004 	addi	r3,gp,-32640
1010eff4:	e0fffa15 	stw	r3,-24(fp)
1010eff8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1010effc:	e0bffb17 	ldw	r2,-20(fp)
1010f000:	e0fffa17 	ldw	r3,-24(fp)
1010f004:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1010f008:	e0bffa17 	ldw	r2,-24(fp)
1010f00c:	10c00017 	ldw	r3,0(r2)
1010f010:	e0bffb17 	ldw	r2,-20(fp)
1010f014:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1010f018:	e0bffa17 	ldw	r2,-24(fp)
1010f01c:	10800017 	ldw	r2,0(r2)
1010f020:	e0fffb17 	ldw	r3,-20(fp)
1010f024:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1010f028:	e0bffa17 	ldw	r2,-24(fp)
1010f02c:	e0fffb17 	ldw	r3,-20(fp)
1010f030:	10c00015 	stw	r3,0(r2)
1010f034:	e0bff817 	ldw	r2,-32(fp)
1010f038:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1010f03c:	e0bff717 	ldw	r2,-36(fp)
1010f040:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
1010f044:	0005883a 	mov	r2,zero
1010f048:	00000306 	br	1010f058 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
1010f04c:	00bffa84 	movi	r2,-22
1010f050:	00000106 	br	1010f058 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
1010f054:	00bfde84 	movi	r2,-134
  }
}
1010f058:	e037883a 	mov	sp,fp
1010f05c:	df000017 	ldw	fp,0(sp)
1010f060:	dec00104 	addi	sp,sp,4
1010f064:	f800283a 	ret

1010f068 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
1010f068:	defffe04 	addi	sp,sp,-8
1010f06c:	df000115 	stw	fp,4(sp)
1010f070:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
1010f074:	e03fff15 	stw	zero,-4(fp)
1010f078:	00000506 	br	1010f090 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
1010f07c:	e0bfff17 	ldw	r2,-4(fp)
1010f080:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
1010f084:	e0bfff17 	ldw	r2,-4(fp)
1010f088:	10800804 	addi	r2,r2,32
1010f08c:	e0bfff15 	stw	r2,-4(fp)
1010f090:	e0bfff17 	ldw	r2,-4(fp)
1010f094:	10820030 	cmpltui	r2,r2,2048
1010f098:	103ff81e 	bne	r2,zero,1010f07c <__alt_data_end+0xfffef07c>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
1010f09c:	0001883a 	nop
1010f0a0:	e037883a 	mov	sp,fp
1010f0a4:	df000017 	ldw	fp,0(sp)
1010f0a8:	dec00104 	addi	sp,sp,4
1010f0ac:	f800283a 	ret

1010f0b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010f0b0:	defffe04 	addi	sp,sp,-8
1010f0b4:	dfc00115 	stw	ra,4(sp)
1010f0b8:	df000015 	stw	fp,0(sp)
1010f0bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010f0c0:	d0a00b17 	ldw	r2,-32724(gp)
1010f0c4:	10000326 	beq	r2,zero,1010f0d4 <alt_get_errno+0x24>
1010f0c8:	d0a00b17 	ldw	r2,-32724(gp)
1010f0cc:	103ee83a 	callr	r2
1010f0d0:	00000106 	br	1010f0d8 <alt_get_errno+0x28>
1010f0d4:	d0a6ff04 	addi	r2,gp,-25604
}
1010f0d8:	e037883a 	mov	sp,fp
1010f0dc:	dfc00117 	ldw	ra,4(sp)
1010f0e0:	df000017 	ldw	fp,0(sp)
1010f0e4:	dec00204 	addi	sp,sp,8
1010f0e8:	f800283a 	ret

1010f0ec <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
1010f0ec:	defffa04 	addi	sp,sp,-24
1010f0f0:	dfc00515 	stw	ra,20(sp)
1010f0f4:	df000415 	stw	fp,16(sp)
1010f0f8:	df000404 	addi	fp,sp,16
1010f0fc:	e13ffe15 	stw	r4,-8(fp)
1010f100:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
1010f104:	e0bffe17 	ldw	r2,-8(fp)
1010f108:	10000326 	beq	r2,zero,1010f118 <alt_dev_llist_insert+0x2c>
1010f10c:	e0bffe17 	ldw	r2,-8(fp)
1010f110:	10800217 	ldw	r2,8(r2)
1010f114:	1000061e 	bne	r2,zero,1010f130 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
1010f118:	010f0b00 	call	1010f0b0 <alt_get_errno>
1010f11c:	1007883a 	mov	r3,r2
1010f120:	00800584 	movi	r2,22
1010f124:	18800015 	stw	r2,0(r3)
    return -EINVAL;
1010f128:	00bffa84 	movi	r2,-22
1010f12c:	00001306 	br	1010f17c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
1010f130:	e0bffe17 	ldw	r2,-8(fp)
1010f134:	e0ffff17 	ldw	r3,-4(fp)
1010f138:	e0fffc15 	stw	r3,-16(fp)
1010f13c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1010f140:	e0bffd17 	ldw	r2,-12(fp)
1010f144:	e0fffc17 	ldw	r3,-16(fp)
1010f148:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1010f14c:	e0bffc17 	ldw	r2,-16(fp)
1010f150:	10c00017 	ldw	r3,0(r2)
1010f154:	e0bffd17 	ldw	r2,-12(fp)
1010f158:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1010f15c:	e0bffc17 	ldw	r2,-16(fp)
1010f160:	10800017 	ldw	r2,0(r2)
1010f164:	e0fffd17 	ldw	r3,-12(fp)
1010f168:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1010f16c:	e0bffc17 	ldw	r2,-16(fp)
1010f170:	e0fffd17 	ldw	r3,-12(fp)
1010f174:	10c00015 	stw	r3,0(r2)

  return 0;  
1010f178:	0005883a 	mov	r2,zero
}
1010f17c:	e037883a 	mov	sp,fp
1010f180:	dfc00117 	ldw	ra,4(sp)
1010f184:	df000017 	ldw	fp,0(sp)
1010f188:	dec00204 	addi	sp,sp,8
1010f18c:	f800283a 	ret

1010f190 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
1010f190:	defffd04 	addi	sp,sp,-12
1010f194:	dfc00215 	stw	ra,8(sp)
1010f198:	df000115 	stw	fp,4(sp)
1010f19c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1010f1a0:	00840474 	movhi	r2,4113
1010f1a4:	10807e04 	addi	r2,r2,504
1010f1a8:	e0bfff15 	stw	r2,-4(fp)
1010f1ac:	00000606 	br	1010f1c8 <_do_ctors+0x38>
        (*ctor) (); 
1010f1b0:	e0bfff17 	ldw	r2,-4(fp)
1010f1b4:	10800017 	ldw	r2,0(r2)
1010f1b8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1010f1bc:	e0bfff17 	ldw	r2,-4(fp)
1010f1c0:	10bfff04 	addi	r2,r2,-4
1010f1c4:	e0bfff15 	stw	r2,-4(fp)
1010f1c8:	e0ffff17 	ldw	r3,-4(fp)
1010f1cc:	00840474 	movhi	r2,4113
1010f1d0:	10807f04 	addi	r2,r2,508
1010f1d4:	18bff62e 	bgeu	r3,r2,1010f1b0 <__alt_data_end+0xfffef1b0>
        (*ctor) (); 
}
1010f1d8:	0001883a 	nop
1010f1dc:	e037883a 	mov	sp,fp
1010f1e0:	dfc00117 	ldw	ra,4(sp)
1010f1e4:	df000017 	ldw	fp,0(sp)
1010f1e8:	dec00204 	addi	sp,sp,8
1010f1ec:	f800283a 	ret

1010f1f0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
1010f1f0:	defffd04 	addi	sp,sp,-12
1010f1f4:	dfc00215 	stw	ra,8(sp)
1010f1f8:	df000115 	stw	fp,4(sp)
1010f1fc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1010f200:	00840474 	movhi	r2,4113
1010f204:	10807e04 	addi	r2,r2,504
1010f208:	e0bfff15 	stw	r2,-4(fp)
1010f20c:	00000606 	br	1010f228 <_do_dtors+0x38>
        (*dtor) (); 
1010f210:	e0bfff17 	ldw	r2,-4(fp)
1010f214:	10800017 	ldw	r2,0(r2)
1010f218:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1010f21c:	e0bfff17 	ldw	r2,-4(fp)
1010f220:	10bfff04 	addi	r2,r2,-4
1010f224:	e0bfff15 	stw	r2,-4(fp)
1010f228:	e0ffff17 	ldw	r3,-4(fp)
1010f22c:	00840474 	movhi	r2,4113
1010f230:	10807f04 	addi	r2,r2,508
1010f234:	18bff62e 	bgeu	r3,r2,1010f210 <__alt_data_end+0xfffef210>
        (*dtor) (); 
}
1010f238:	0001883a 	nop
1010f23c:	e037883a 	mov	sp,fp
1010f240:	dfc00117 	ldw	ra,4(sp)
1010f244:	df000017 	ldw	fp,0(sp)
1010f248:	dec00204 	addi	sp,sp,8
1010f24c:	f800283a 	ret

1010f250 <alt_fs_reg>:
 * A return value of zero indicates success. A negative return value indicates
 * failure. 
 */
 
int alt_fs_reg (alt_dev* dev)
{
1010f250:	defffc04 	addi	sp,sp,-16
1010f254:	df000315 	stw	fp,12(sp)
1010f258:	df000304 	addi	fp,sp,12
1010f25c:	e13fff15 	stw	r4,-4(fp)
  /*
   * check that the device has a name.
   */

  if (!dev->name)
1010f260:	e0bfff17 	ldw	r2,-4(fp)
1010f264:	10800217 	ldw	r2,8(r2)
1010f268:	1000021e 	bne	r2,zero,1010f274 <alt_fs_reg+0x24>
  {
    return -ENODEV;
1010f26c:	00bffb44 	movi	r2,-19
1010f270:	00001306 	br	1010f2c0 <alt_fs_reg+0x70>
  
  /*
   * register the file system.
   */

  alt_llist_insert(&alt_fs_list, &dev->llist);
1010f274:	e0bfff17 	ldw	r2,-4(fp)
1010f278:	d0e00604 	addi	r3,gp,-32744
1010f27c:	e0fffd15 	stw	r3,-12(fp)
1010f280:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1010f284:	e0bffe17 	ldw	r2,-8(fp)
1010f288:	e0fffd17 	ldw	r3,-12(fp)
1010f28c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1010f290:	e0bffd17 	ldw	r2,-12(fp)
1010f294:	10c00017 	ldw	r3,0(r2)
1010f298:	e0bffe17 	ldw	r2,-8(fp)
1010f29c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1010f2a0:	e0bffd17 	ldw	r2,-12(fp)
1010f2a4:	10800017 	ldw	r2,0(r2)
1010f2a8:	e0fffe17 	ldw	r3,-8(fp)
1010f2ac:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1010f2b0:	e0bffd17 	ldw	r2,-12(fp)
1010f2b4:	e0fffe17 	ldw	r3,-8(fp)
1010f2b8:	10c00015 	stw	r3,0(r2)

  return 0;
1010f2bc:	0005883a 	mov	r2,zero
} 
1010f2c0:	e037883a 	mov	sp,fp
1010f2c4:	df000017 	ldw	fp,0(sp)
1010f2c8:	dec00104 	addi	sp,sp,4
1010f2cc:	f800283a 	ret

1010f2d0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
1010f2d0:	defffe04 	addi	sp,sp,-8
1010f2d4:	dfc00115 	stw	ra,4(sp)
1010f2d8:	df000015 	stw	fp,0(sp)
1010f2dc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
1010f2e0:	01440004 	movi	r5,4096
1010f2e4:	0009883a 	mov	r4,zero
1010f2e8:	010fd3c0 	call	1010fd3c <alt_icache_flush>
#endif
}
1010f2ec:	0001883a 	nop
1010f2f0:	e037883a 	mov	sp,fp
1010f2f4:	dfc00117 	ldw	ra,4(sp)
1010f2f8:	df000017 	ldw	fp,0(sp)
1010f2fc:	dec00204 	addi	sp,sp,8
1010f300:	f800283a 	ret

1010f304 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1010f304:	defff904 	addi	sp,sp,-28
1010f308:	dfc00615 	stw	ra,24(sp)
1010f30c:	df000515 	stw	fp,20(sp)
1010f310:	df000504 	addi	fp,sp,20
1010f314:	e13ffc15 	stw	r4,-16(fp)
1010f318:	e17ffd15 	stw	r5,-12(fp)
1010f31c:	e1bffe15 	stw	r6,-8(fp)
1010f320:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
1010f324:	e0800217 	ldw	r2,8(fp)
1010f328:	d8800015 	stw	r2,0(sp)
1010f32c:	e1ffff17 	ldw	r7,-4(fp)
1010f330:	e1bffe17 	ldw	r6,-8(fp)
1010f334:	e17ffd17 	ldw	r5,-12(fp)
1010f338:	e13ffc17 	ldw	r4,-16(fp)
1010f33c:	010f4b40 	call	1010f4b4 <alt_iic_isr_register>
}  
1010f340:	e037883a 	mov	sp,fp
1010f344:	dfc00117 	ldw	ra,4(sp)
1010f348:	df000017 	ldw	fp,0(sp)
1010f34c:	dec00204 	addi	sp,sp,8
1010f350:	f800283a 	ret

1010f354 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
1010f354:	defff904 	addi	sp,sp,-28
1010f358:	df000615 	stw	fp,24(sp)
1010f35c:	df000604 	addi	fp,sp,24
1010f360:	e13ffe15 	stw	r4,-8(fp)
1010f364:	e17fff15 	stw	r5,-4(fp)
1010f368:	e0bfff17 	ldw	r2,-4(fp)
1010f36c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1010f370:	0005303a 	rdctl	r2,status
1010f374:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1010f378:	e0fffb17 	ldw	r3,-20(fp)
1010f37c:	00bfff84 	movi	r2,-2
1010f380:	1884703a 	and	r2,r3,r2
1010f384:	1001703a 	wrctl	status,r2
  
  return context;
1010f388:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1010f38c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
1010f390:	00c00044 	movi	r3,1
1010f394:	e0bffa17 	ldw	r2,-24(fp)
1010f398:	1884983a 	sll	r2,r3,r2
1010f39c:	1007883a 	mov	r3,r2
1010f3a0:	d0a70317 	ldw	r2,-25588(gp)
1010f3a4:	1884b03a 	or	r2,r3,r2
1010f3a8:	d0a70315 	stw	r2,-25588(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1010f3ac:	d0a70317 	ldw	r2,-25588(gp)
1010f3b0:	100170fa 	wrctl	ienable,r2
1010f3b4:	e0bffc17 	ldw	r2,-16(fp)
1010f3b8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1010f3bc:	e0bffd17 	ldw	r2,-12(fp)
1010f3c0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1010f3c4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
1010f3c8:	0001883a 	nop
}
1010f3cc:	e037883a 	mov	sp,fp
1010f3d0:	df000017 	ldw	fp,0(sp)
1010f3d4:	dec00104 	addi	sp,sp,4
1010f3d8:	f800283a 	ret

1010f3dc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
1010f3dc:	defff904 	addi	sp,sp,-28
1010f3e0:	df000615 	stw	fp,24(sp)
1010f3e4:	df000604 	addi	fp,sp,24
1010f3e8:	e13ffe15 	stw	r4,-8(fp)
1010f3ec:	e17fff15 	stw	r5,-4(fp)
1010f3f0:	e0bfff17 	ldw	r2,-4(fp)
1010f3f4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1010f3f8:	0005303a 	rdctl	r2,status
1010f3fc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1010f400:	e0fffb17 	ldw	r3,-20(fp)
1010f404:	00bfff84 	movi	r2,-2
1010f408:	1884703a 	and	r2,r3,r2
1010f40c:	1001703a 	wrctl	status,r2
  
  return context;
1010f410:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1010f414:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
1010f418:	00c00044 	movi	r3,1
1010f41c:	e0bffa17 	ldw	r2,-24(fp)
1010f420:	1884983a 	sll	r2,r3,r2
1010f424:	0084303a 	nor	r2,zero,r2
1010f428:	1007883a 	mov	r3,r2
1010f42c:	d0a70317 	ldw	r2,-25588(gp)
1010f430:	1884703a 	and	r2,r3,r2
1010f434:	d0a70315 	stw	r2,-25588(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1010f438:	d0a70317 	ldw	r2,-25588(gp)
1010f43c:	100170fa 	wrctl	ienable,r2
1010f440:	e0bffc17 	ldw	r2,-16(fp)
1010f444:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1010f448:	e0bffd17 	ldw	r2,-12(fp)
1010f44c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1010f450:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
1010f454:	0001883a 	nop
}
1010f458:	e037883a 	mov	sp,fp
1010f45c:	df000017 	ldw	fp,0(sp)
1010f460:	dec00104 	addi	sp,sp,4
1010f464:	f800283a 	ret

1010f468 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
1010f468:	defffc04 	addi	sp,sp,-16
1010f46c:	df000315 	stw	fp,12(sp)
1010f470:	df000304 	addi	fp,sp,12
1010f474:	e13ffe15 	stw	r4,-8(fp)
1010f478:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
1010f47c:	000530fa 	rdctl	r2,ienable
1010f480:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
1010f484:	00c00044 	movi	r3,1
1010f488:	e0bfff17 	ldw	r2,-4(fp)
1010f48c:	1884983a 	sll	r2,r3,r2
1010f490:	1007883a 	mov	r3,r2
1010f494:	e0bffd17 	ldw	r2,-12(fp)
1010f498:	1884703a 	and	r2,r3,r2
1010f49c:	1004c03a 	cmpne	r2,r2,zero
1010f4a0:	10803fcc 	andi	r2,r2,255
}
1010f4a4:	e037883a 	mov	sp,fp
1010f4a8:	df000017 	ldw	fp,0(sp)
1010f4ac:	dec00104 	addi	sp,sp,4
1010f4b0:	f800283a 	ret

1010f4b4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1010f4b4:	defff504 	addi	sp,sp,-44
1010f4b8:	dfc00a15 	stw	ra,40(sp)
1010f4bc:	df000915 	stw	fp,36(sp)
1010f4c0:	df000904 	addi	fp,sp,36
1010f4c4:	e13ffc15 	stw	r4,-16(fp)
1010f4c8:	e17ffd15 	stw	r5,-12(fp)
1010f4cc:	e1bffe15 	stw	r6,-8(fp)
1010f4d0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
1010f4d4:	00bffa84 	movi	r2,-22
1010f4d8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
1010f4dc:	e0bffd17 	ldw	r2,-12(fp)
1010f4e0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
1010f4e4:	e0bff817 	ldw	r2,-32(fp)
1010f4e8:	10800808 	cmpgei	r2,r2,32
1010f4ec:	1000271e 	bne	r2,zero,1010f58c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1010f4f0:	0005303a 	rdctl	r2,status
1010f4f4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1010f4f8:	e0fffb17 	ldw	r3,-20(fp)
1010f4fc:	00bfff84 	movi	r2,-2
1010f500:	1884703a 	and	r2,r3,r2
1010f504:	1001703a 	wrctl	status,r2
  
  return context;
1010f508:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
1010f50c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
1010f510:	00840474 	movhi	r2,4113
1010f514:	108f2104 	addi	r2,r2,15492
1010f518:	e0fff817 	ldw	r3,-32(fp)
1010f51c:	180690fa 	slli	r3,r3,3
1010f520:	10c5883a 	add	r2,r2,r3
1010f524:	e0fffe17 	ldw	r3,-8(fp)
1010f528:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
1010f52c:	00840474 	movhi	r2,4113
1010f530:	108f2104 	addi	r2,r2,15492
1010f534:	e0fff817 	ldw	r3,-32(fp)
1010f538:	180690fa 	slli	r3,r3,3
1010f53c:	10c5883a 	add	r2,r2,r3
1010f540:	10800104 	addi	r2,r2,4
1010f544:	e0ffff17 	ldw	r3,-4(fp)
1010f548:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
1010f54c:	e0bffe17 	ldw	r2,-8(fp)
1010f550:	10000526 	beq	r2,zero,1010f568 <alt_iic_isr_register+0xb4>
1010f554:	e0bff817 	ldw	r2,-32(fp)
1010f558:	100b883a 	mov	r5,r2
1010f55c:	e13ffc17 	ldw	r4,-16(fp)
1010f560:	010f3540 	call	1010f354 <alt_ic_irq_enable>
1010f564:	00000406 	br	1010f578 <alt_iic_isr_register+0xc4>
1010f568:	e0bff817 	ldw	r2,-32(fp)
1010f56c:	100b883a 	mov	r5,r2
1010f570:	e13ffc17 	ldw	r4,-16(fp)
1010f574:	010f3dc0 	call	1010f3dc <alt_ic_irq_disable>
1010f578:	e0bff715 	stw	r2,-36(fp)
1010f57c:	e0bffa17 	ldw	r2,-24(fp)
1010f580:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1010f584:	e0bff917 	ldw	r2,-28(fp)
1010f588:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
1010f58c:	e0bff717 	ldw	r2,-36(fp)
}
1010f590:	e037883a 	mov	sp,fp
1010f594:	dfc00117 	ldw	ra,4(sp)
1010f598:	df000017 	ldw	fp,0(sp)
1010f59c:	dec00204 	addi	sp,sp,8
1010f5a0:	f800283a 	ret

1010f5a4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
1010f5a4:	defff904 	addi	sp,sp,-28
1010f5a8:	dfc00615 	stw	ra,24(sp)
1010f5ac:	df000515 	stw	fp,20(sp)
1010f5b0:	df000504 	addi	fp,sp,20
1010f5b4:	e13ffc15 	stw	r4,-16(fp)
1010f5b8:	e17ffd15 	stw	r5,-12(fp)
1010f5bc:	e1bffe15 	stw	r6,-8(fp)
1010f5c0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
1010f5c4:	e1bfff17 	ldw	r6,-4(fp)
1010f5c8:	e17ffe17 	ldw	r5,-8(fp)
1010f5cc:	e13ffd17 	ldw	r4,-12(fp)
1010f5d0:	010f7e40 	call	1010f7e4 <open>
1010f5d4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
1010f5d8:	e0bffb17 	ldw	r2,-20(fp)
1010f5dc:	10001c16 	blt	r2,zero,1010f650 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
1010f5e0:	00840474 	movhi	r2,4113
1010f5e4:	10838e04 	addi	r2,r2,3640
1010f5e8:	e0fffb17 	ldw	r3,-20(fp)
1010f5ec:	18c00324 	muli	r3,r3,12
1010f5f0:	10c5883a 	add	r2,r2,r3
1010f5f4:	10c00017 	ldw	r3,0(r2)
1010f5f8:	e0bffc17 	ldw	r2,-16(fp)
1010f5fc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
1010f600:	00840474 	movhi	r2,4113
1010f604:	10838e04 	addi	r2,r2,3640
1010f608:	e0fffb17 	ldw	r3,-20(fp)
1010f60c:	18c00324 	muli	r3,r3,12
1010f610:	10c5883a 	add	r2,r2,r3
1010f614:	10800104 	addi	r2,r2,4
1010f618:	10c00017 	ldw	r3,0(r2)
1010f61c:	e0bffc17 	ldw	r2,-16(fp)
1010f620:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
1010f624:	00840474 	movhi	r2,4113
1010f628:	10838e04 	addi	r2,r2,3640
1010f62c:	e0fffb17 	ldw	r3,-20(fp)
1010f630:	18c00324 	muli	r3,r3,12
1010f634:	10c5883a 	add	r2,r2,r3
1010f638:	10800204 	addi	r2,r2,8
1010f63c:	10c00017 	ldw	r3,0(r2)
1010f640:	e0bffc17 	ldw	r2,-16(fp)
1010f644:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
1010f648:	e13ffb17 	ldw	r4,-20(fp)
1010f64c:	010dd480 	call	1010dd48 <alt_release_fd>
  }
} 
1010f650:	0001883a 	nop
1010f654:	e037883a 	mov	sp,fp
1010f658:	dfc00117 	ldw	ra,4(sp)
1010f65c:	df000017 	ldw	fp,0(sp)
1010f660:	dec00204 	addi	sp,sp,8
1010f664:	f800283a 	ret

1010f668 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
1010f668:	defffb04 	addi	sp,sp,-20
1010f66c:	dfc00415 	stw	ra,16(sp)
1010f670:	df000315 	stw	fp,12(sp)
1010f674:	df000304 	addi	fp,sp,12
1010f678:	e13ffd15 	stw	r4,-12(fp)
1010f67c:	e17ffe15 	stw	r5,-8(fp)
1010f680:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
1010f684:	01c07fc4 	movi	r7,511
1010f688:	01800044 	movi	r6,1
1010f68c:	e17ffd17 	ldw	r5,-12(fp)
1010f690:	01040474 	movhi	r4,4113
1010f694:	21039104 	addi	r4,r4,3652
1010f698:	010f5a40 	call	1010f5a4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
1010f69c:	01c07fc4 	movi	r7,511
1010f6a0:	000d883a 	mov	r6,zero
1010f6a4:	e17ffe17 	ldw	r5,-8(fp)
1010f6a8:	01040474 	movhi	r4,4113
1010f6ac:	21038e04 	addi	r4,r4,3640
1010f6b0:	010f5a40 	call	1010f5a4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
1010f6b4:	01c07fc4 	movi	r7,511
1010f6b8:	01800044 	movi	r6,1
1010f6bc:	e17fff17 	ldw	r5,-4(fp)
1010f6c0:	01040474 	movhi	r4,4113
1010f6c4:	21039404 	addi	r4,r4,3664
1010f6c8:	010f5a40 	call	1010f5a4 <alt_open_fd>
}  
1010f6cc:	0001883a 	nop
1010f6d0:	e037883a 	mov	sp,fp
1010f6d4:	dfc00117 	ldw	ra,4(sp)
1010f6d8:	df000017 	ldw	fp,0(sp)
1010f6dc:	dec00204 	addi	sp,sp,8
1010f6e0:	f800283a 	ret

1010f6e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010f6e4:	defffe04 	addi	sp,sp,-8
1010f6e8:	dfc00115 	stw	ra,4(sp)
1010f6ec:	df000015 	stw	fp,0(sp)
1010f6f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010f6f4:	d0a00b17 	ldw	r2,-32724(gp)
1010f6f8:	10000326 	beq	r2,zero,1010f708 <alt_get_errno+0x24>
1010f6fc:	d0a00b17 	ldw	r2,-32724(gp)
1010f700:	103ee83a 	callr	r2
1010f704:	00000106 	br	1010f70c <alt_get_errno+0x28>
1010f708:	d0a6ff04 	addi	r2,gp,-25604
}
1010f70c:	e037883a 	mov	sp,fp
1010f710:	dfc00117 	ldw	ra,4(sp)
1010f714:	df000017 	ldw	fp,0(sp)
1010f718:	dec00204 	addi	sp,sp,8
1010f71c:	f800283a 	ret

1010f720 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
1010f720:	defffd04 	addi	sp,sp,-12
1010f724:	df000215 	stw	fp,8(sp)
1010f728:	df000204 	addi	fp,sp,8
1010f72c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
1010f730:	e0bfff17 	ldw	r2,-4(fp)
1010f734:	10800217 	ldw	r2,8(r2)
1010f738:	10d00034 	orhi	r3,r2,16384
1010f73c:	e0bfff17 	ldw	r2,-4(fp)
1010f740:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1010f744:	e03ffe15 	stw	zero,-8(fp)
1010f748:	00001d06 	br	1010f7c0 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1010f74c:	00840474 	movhi	r2,4113
1010f750:	10838e04 	addi	r2,r2,3640
1010f754:	e0fffe17 	ldw	r3,-8(fp)
1010f758:	18c00324 	muli	r3,r3,12
1010f75c:	10c5883a 	add	r2,r2,r3
1010f760:	10c00017 	ldw	r3,0(r2)
1010f764:	e0bfff17 	ldw	r2,-4(fp)
1010f768:	10800017 	ldw	r2,0(r2)
1010f76c:	1880111e 	bne	r3,r2,1010f7b4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1010f770:	00840474 	movhi	r2,4113
1010f774:	10838e04 	addi	r2,r2,3640
1010f778:	e0fffe17 	ldw	r3,-8(fp)
1010f77c:	18c00324 	muli	r3,r3,12
1010f780:	10c5883a 	add	r2,r2,r3
1010f784:	10800204 	addi	r2,r2,8
1010f788:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1010f78c:	1000090e 	bge	r2,zero,1010f7b4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
1010f790:	e0bffe17 	ldw	r2,-8(fp)
1010f794:	10c00324 	muli	r3,r2,12
1010f798:	00840474 	movhi	r2,4113
1010f79c:	10838e04 	addi	r2,r2,3640
1010f7a0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1010f7a4:	e0bfff17 	ldw	r2,-4(fp)
1010f7a8:	18800226 	beq	r3,r2,1010f7b4 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
1010f7ac:	00bffcc4 	movi	r2,-13
1010f7b0:	00000806 	br	1010f7d4 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1010f7b4:	e0bffe17 	ldw	r2,-8(fp)
1010f7b8:	10800044 	addi	r2,r2,1
1010f7bc:	e0bffe15 	stw	r2,-8(fp)
1010f7c0:	d0a00a17 	ldw	r2,-32728(gp)
1010f7c4:	1007883a 	mov	r3,r2
1010f7c8:	e0bffe17 	ldw	r2,-8(fp)
1010f7cc:	18bfdf2e 	bgeu	r3,r2,1010f74c <__alt_data_end+0xfffef74c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
1010f7d0:	0005883a 	mov	r2,zero
}
1010f7d4:	e037883a 	mov	sp,fp
1010f7d8:	df000017 	ldw	fp,0(sp)
1010f7dc:	dec00104 	addi	sp,sp,4
1010f7e0:	f800283a 	ret

1010f7e4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
1010f7e4:	defff604 	addi	sp,sp,-40
1010f7e8:	dfc00915 	stw	ra,36(sp)
1010f7ec:	df000815 	stw	fp,32(sp)
1010f7f0:	df000804 	addi	fp,sp,32
1010f7f4:	e13ffd15 	stw	r4,-12(fp)
1010f7f8:	e17ffe15 	stw	r5,-8(fp)
1010f7fc:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
1010f800:	00bfffc4 	movi	r2,-1
1010f804:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
1010f808:	00bffb44 	movi	r2,-19
1010f80c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
1010f810:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
1010f814:	d1600804 	addi	r5,gp,-32736
1010f818:	e13ffd17 	ldw	r4,-12(fp)
1010f81c:	010fb000 	call	1010fb00 <alt_find_dev>
1010f820:	e0bff815 	stw	r2,-32(fp)
1010f824:	e0bff817 	ldw	r2,-32(fp)
1010f828:	1000051e 	bne	r2,zero,1010f840 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
1010f82c:	e13ffd17 	ldw	r4,-12(fp)
1010f830:	010fb900 	call	1010fb90 <alt_find_file>
1010f834:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
1010f838:	00800044 	movi	r2,1
1010f83c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
1010f840:	e0bff817 	ldw	r2,-32(fp)
1010f844:	10002926 	beq	r2,zero,1010f8ec <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
1010f848:	e13ff817 	ldw	r4,-32(fp)
1010f84c:	010fc980 	call	1010fc98 <alt_get_fd>
1010f850:	e0bff915 	stw	r2,-28(fp)
1010f854:	e0bff917 	ldw	r2,-28(fp)
1010f858:	1000030e 	bge	r2,zero,1010f868 <open+0x84>
    {
      status = index;
1010f85c:	e0bff917 	ldw	r2,-28(fp)
1010f860:	e0bffa15 	stw	r2,-24(fp)
1010f864:	00002306 	br	1010f8f4 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
1010f868:	e0bff917 	ldw	r2,-28(fp)
1010f86c:	10c00324 	muli	r3,r2,12
1010f870:	00840474 	movhi	r2,4113
1010f874:	10838e04 	addi	r2,r2,3640
1010f878:	1885883a 	add	r2,r3,r2
1010f87c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
1010f880:	e0fffe17 	ldw	r3,-8(fp)
1010f884:	00900034 	movhi	r2,16384
1010f888:	10bfffc4 	addi	r2,r2,-1
1010f88c:	1886703a 	and	r3,r3,r2
1010f890:	e0bffc17 	ldw	r2,-16(fp)
1010f894:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
1010f898:	e0bffb17 	ldw	r2,-20(fp)
1010f89c:	1000051e 	bne	r2,zero,1010f8b4 <open+0xd0>
1010f8a0:	e13ffc17 	ldw	r4,-16(fp)
1010f8a4:	010f7200 	call	1010f720 <alt_file_locked>
1010f8a8:	e0bffa15 	stw	r2,-24(fp)
1010f8ac:	e0bffa17 	ldw	r2,-24(fp)
1010f8b0:	10001016 	blt	r2,zero,1010f8f4 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
1010f8b4:	e0bff817 	ldw	r2,-32(fp)
1010f8b8:	10800317 	ldw	r2,12(r2)
1010f8bc:	10000826 	beq	r2,zero,1010f8e0 <open+0xfc>
1010f8c0:	e0bff817 	ldw	r2,-32(fp)
1010f8c4:	10800317 	ldw	r2,12(r2)
1010f8c8:	e1ffff17 	ldw	r7,-4(fp)
1010f8cc:	e1bffe17 	ldw	r6,-8(fp)
1010f8d0:	e17ffd17 	ldw	r5,-12(fp)
1010f8d4:	e13ffc17 	ldw	r4,-16(fp)
1010f8d8:	103ee83a 	callr	r2
1010f8dc:	00000106 	br	1010f8e4 <open+0x100>
1010f8e0:	0005883a 	mov	r2,zero
1010f8e4:	e0bffa15 	stw	r2,-24(fp)
1010f8e8:	00000206 	br	1010f8f4 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
1010f8ec:	00bffb44 	movi	r2,-19
1010f8f0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
1010f8f4:	e0bffa17 	ldw	r2,-24(fp)
1010f8f8:	1000090e 	bge	r2,zero,1010f920 <open+0x13c>
  {
    alt_release_fd (index);  
1010f8fc:	e13ff917 	ldw	r4,-28(fp)
1010f900:	010dd480 	call	1010dd48 <alt_release_fd>
    ALT_ERRNO = -status;
1010f904:	010f6e40 	call	1010f6e4 <alt_get_errno>
1010f908:	1007883a 	mov	r3,r2
1010f90c:	e0bffa17 	ldw	r2,-24(fp)
1010f910:	0085c83a 	sub	r2,zero,r2
1010f914:	18800015 	stw	r2,0(r3)
    return -1;
1010f918:	00bfffc4 	movi	r2,-1
1010f91c:	00000106 	br	1010f924 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
1010f920:	e0bff917 	ldw	r2,-28(fp)
}
1010f924:	e037883a 	mov	sp,fp
1010f928:	dfc00117 	ldw	ra,4(sp)
1010f92c:	df000017 	ldw	fp,0(sp)
1010f930:	dec00204 	addi	sp,sp,8
1010f934:	f800283a 	ret

1010f938 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
1010f938:	defffa04 	addi	sp,sp,-24
1010f93c:	df000515 	stw	fp,20(sp)
1010f940:	df000504 	addi	fp,sp,20
1010f944:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1010f948:	0005303a 	rdctl	r2,status
1010f94c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1010f950:	e0fffc17 	ldw	r3,-16(fp)
1010f954:	00bfff84 	movi	r2,-2
1010f958:	1884703a 	and	r2,r3,r2
1010f95c:	1001703a 	wrctl	status,r2
  
  return context;
1010f960:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
1010f964:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
1010f968:	e0bfff17 	ldw	r2,-4(fp)
1010f96c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
1010f970:	e0bffd17 	ldw	r2,-12(fp)
1010f974:	10800017 	ldw	r2,0(r2)
1010f978:	e0fffd17 	ldw	r3,-12(fp)
1010f97c:	18c00117 	ldw	r3,4(r3)
1010f980:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
1010f984:	e0bffd17 	ldw	r2,-12(fp)
1010f988:	10800117 	ldw	r2,4(r2)
1010f98c:	e0fffd17 	ldw	r3,-12(fp)
1010f990:	18c00017 	ldw	r3,0(r3)
1010f994:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
1010f998:	e0bffd17 	ldw	r2,-12(fp)
1010f99c:	e0fffd17 	ldw	r3,-12(fp)
1010f9a0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
1010f9a4:	e0bffd17 	ldw	r2,-12(fp)
1010f9a8:	e0fffd17 	ldw	r3,-12(fp)
1010f9ac:	10c00015 	stw	r3,0(r2)
1010f9b0:	e0bffb17 	ldw	r2,-20(fp)
1010f9b4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1010f9b8:	e0bffe17 	ldw	r2,-8(fp)
1010f9bc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
1010f9c0:	0001883a 	nop
1010f9c4:	e037883a 	mov	sp,fp
1010f9c8:	df000017 	ldw	fp,0(sp)
1010f9cc:	dec00104 	addi	sp,sp,4
1010f9d0:	f800283a 	ret

1010f9d4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
1010f9d4:	defffb04 	addi	sp,sp,-20
1010f9d8:	dfc00415 	stw	ra,16(sp)
1010f9dc:	df000315 	stw	fp,12(sp)
1010f9e0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
1010f9e4:	d0a02017 	ldw	r2,-32640(gp)
1010f9e8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
1010f9ec:	d0a70517 	ldw	r2,-25580(gp)
1010f9f0:	10800044 	addi	r2,r2,1
1010f9f4:	d0a70515 	stw	r2,-25580(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1010f9f8:	00002e06 	br	1010fab4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
1010f9fc:	e0bffd17 	ldw	r2,-12(fp)
1010fa00:	10800017 	ldw	r2,0(r2)
1010fa04:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
1010fa08:	e0bffd17 	ldw	r2,-12(fp)
1010fa0c:	10800403 	ldbu	r2,16(r2)
1010fa10:	10803fcc 	andi	r2,r2,255
1010fa14:	10000426 	beq	r2,zero,1010fa28 <alt_tick+0x54>
1010fa18:	d0a70517 	ldw	r2,-25580(gp)
1010fa1c:	1000021e 	bne	r2,zero,1010fa28 <alt_tick+0x54>
    {
      alarm->rollover = 0;
1010fa20:	e0bffd17 	ldw	r2,-12(fp)
1010fa24:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
1010fa28:	e0bffd17 	ldw	r2,-12(fp)
1010fa2c:	10800217 	ldw	r2,8(r2)
1010fa30:	d0e70517 	ldw	r3,-25580(gp)
1010fa34:	18801d36 	bltu	r3,r2,1010faac <alt_tick+0xd8>
1010fa38:	e0bffd17 	ldw	r2,-12(fp)
1010fa3c:	10800403 	ldbu	r2,16(r2)
1010fa40:	10803fcc 	andi	r2,r2,255
1010fa44:	1000191e 	bne	r2,zero,1010faac <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
1010fa48:	e0bffd17 	ldw	r2,-12(fp)
1010fa4c:	10800317 	ldw	r2,12(r2)
1010fa50:	e0fffd17 	ldw	r3,-12(fp)
1010fa54:	18c00517 	ldw	r3,20(r3)
1010fa58:	1809883a 	mov	r4,r3
1010fa5c:	103ee83a 	callr	r2
1010fa60:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
1010fa64:	e0bfff17 	ldw	r2,-4(fp)
1010fa68:	1000031e 	bne	r2,zero,1010fa78 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
1010fa6c:	e13ffd17 	ldw	r4,-12(fp)
1010fa70:	010f9380 	call	1010f938 <alt_alarm_stop>
1010fa74:	00000d06 	br	1010faac <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
1010fa78:	e0bffd17 	ldw	r2,-12(fp)
1010fa7c:	10c00217 	ldw	r3,8(r2)
1010fa80:	e0bfff17 	ldw	r2,-4(fp)
1010fa84:	1887883a 	add	r3,r3,r2
1010fa88:	e0bffd17 	ldw	r2,-12(fp)
1010fa8c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
1010fa90:	e0bffd17 	ldw	r2,-12(fp)
1010fa94:	10c00217 	ldw	r3,8(r2)
1010fa98:	d0a70517 	ldw	r2,-25580(gp)
1010fa9c:	1880032e 	bgeu	r3,r2,1010faac <alt_tick+0xd8>
        {
          alarm->rollover = 1;
1010faa0:	e0bffd17 	ldw	r2,-12(fp)
1010faa4:	00c00044 	movi	r3,1
1010faa8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
1010faac:	e0bffe17 	ldw	r2,-8(fp)
1010fab0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1010fab4:	e0fffd17 	ldw	r3,-12(fp)
1010fab8:	d0a02004 	addi	r2,gp,-32640
1010fabc:	18bfcf1e 	bne	r3,r2,1010f9fc <__alt_data_end+0xfffef9fc>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
1010fac0:	0001883a 	nop
}
1010fac4:	0001883a 	nop
1010fac8:	e037883a 	mov	sp,fp
1010facc:	dfc00117 	ldw	ra,4(sp)
1010fad0:	df000017 	ldw	fp,0(sp)
1010fad4:	dec00204 	addi	sp,sp,8
1010fad8:	f800283a 	ret

1010fadc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
1010fadc:	deffff04 	addi	sp,sp,-4
1010fae0:	df000015 	stw	fp,0(sp)
1010fae4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
1010fae8:	000170fa 	wrctl	ienable,zero
}
1010faec:	0001883a 	nop
1010faf0:	e037883a 	mov	sp,fp
1010faf4:	df000017 	ldw	fp,0(sp)
1010faf8:	dec00104 	addi	sp,sp,4
1010fafc:	f800283a 	ret

1010fb00 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
1010fb00:	defffa04 	addi	sp,sp,-24
1010fb04:	dfc00515 	stw	ra,20(sp)
1010fb08:	df000415 	stw	fp,16(sp)
1010fb0c:	df000404 	addi	fp,sp,16
1010fb10:	e13ffe15 	stw	r4,-8(fp)
1010fb14:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
1010fb18:	e0bfff17 	ldw	r2,-4(fp)
1010fb1c:	10800017 	ldw	r2,0(r2)
1010fb20:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
1010fb24:	e13ffe17 	ldw	r4,-8(fp)
1010fb28:	01010200 	call	10101020 <strlen>
1010fb2c:	10800044 	addi	r2,r2,1
1010fb30:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
1010fb34:	00000d06 	br	1010fb6c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
1010fb38:	e0bffc17 	ldw	r2,-16(fp)
1010fb3c:	10800217 	ldw	r2,8(r2)
1010fb40:	e0fffd17 	ldw	r3,-12(fp)
1010fb44:	180d883a 	mov	r6,r3
1010fb48:	e17ffe17 	ldw	r5,-8(fp)
1010fb4c:	1009883a 	mov	r4,r2
1010fb50:	010feb40 	call	1010feb4 <memcmp>
1010fb54:	1000021e 	bne	r2,zero,1010fb60 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
1010fb58:	e0bffc17 	ldw	r2,-16(fp)
1010fb5c:	00000706 	br	1010fb7c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
1010fb60:	e0bffc17 	ldw	r2,-16(fp)
1010fb64:	10800017 	ldw	r2,0(r2)
1010fb68:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
1010fb6c:	e0fffc17 	ldw	r3,-16(fp)
1010fb70:	e0bfff17 	ldw	r2,-4(fp)
1010fb74:	18bff01e 	bne	r3,r2,1010fb38 <__alt_data_end+0xfffefb38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
1010fb78:	0005883a 	mov	r2,zero
}
1010fb7c:	e037883a 	mov	sp,fp
1010fb80:	dfc00117 	ldw	ra,4(sp)
1010fb84:	df000017 	ldw	fp,0(sp)
1010fb88:	dec00204 	addi	sp,sp,8
1010fb8c:	f800283a 	ret

1010fb90 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
1010fb90:	defffb04 	addi	sp,sp,-20
1010fb94:	dfc00415 	stw	ra,16(sp)
1010fb98:	df000315 	stw	fp,12(sp)
1010fb9c:	df000304 	addi	fp,sp,12
1010fba0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
1010fba4:	d0a00617 	ldw	r2,-32744(gp)
1010fba8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
1010fbac:	00003106 	br	1010fc74 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
1010fbb0:	e0bffd17 	ldw	r2,-12(fp)
1010fbb4:	10800217 	ldw	r2,8(r2)
1010fbb8:	1009883a 	mov	r4,r2
1010fbbc:	01010200 	call	10101020 <strlen>
1010fbc0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
1010fbc4:	e0bffd17 	ldw	r2,-12(fp)
1010fbc8:	10c00217 	ldw	r3,8(r2)
1010fbcc:	e0bffe17 	ldw	r2,-8(fp)
1010fbd0:	10bfffc4 	addi	r2,r2,-1
1010fbd4:	1885883a 	add	r2,r3,r2
1010fbd8:	10800003 	ldbu	r2,0(r2)
1010fbdc:	10803fcc 	andi	r2,r2,255
1010fbe0:	1080201c 	xori	r2,r2,128
1010fbe4:	10bfe004 	addi	r2,r2,-128
1010fbe8:	10800bd8 	cmpnei	r2,r2,47
1010fbec:	1000031e 	bne	r2,zero,1010fbfc <alt_find_file+0x6c>
    {
      len -= 1;
1010fbf0:	e0bffe17 	ldw	r2,-8(fp)
1010fbf4:	10bfffc4 	addi	r2,r2,-1
1010fbf8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
1010fbfc:	e0bffe17 	ldw	r2,-8(fp)
1010fc00:	e0ffff17 	ldw	r3,-4(fp)
1010fc04:	1885883a 	add	r2,r3,r2
1010fc08:	10800003 	ldbu	r2,0(r2)
1010fc0c:	10803fcc 	andi	r2,r2,255
1010fc10:	1080201c 	xori	r2,r2,128
1010fc14:	10bfe004 	addi	r2,r2,-128
1010fc18:	10800be0 	cmpeqi	r2,r2,47
1010fc1c:	1000081e 	bne	r2,zero,1010fc40 <alt_find_file+0xb0>
1010fc20:	e0bffe17 	ldw	r2,-8(fp)
1010fc24:	e0ffff17 	ldw	r3,-4(fp)
1010fc28:	1885883a 	add	r2,r3,r2
1010fc2c:	10800003 	ldbu	r2,0(r2)
1010fc30:	10803fcc 	andi	r2,r2,255
1010fc34:	1080201c 	xori	r2,r2,128
1010fc38:	10bfe004 	addi	r2,r2,-128
1010fc3c:	10000a1e 	bne	r2,zero,1010fc68 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
1010fc40:	e0bffd17 	ldw	r2,-12(fp)
1010fc44:	10800217 	ldw	r2,8(r2)
1010fc48:	e0fffe17 	ldw	r3,-8(fp)
1010fc4c:	180d883a 	mov	r6,r3
1010fc50:	e17fff17 	ldw	r5,-4(fp)
1010fc54:	1009883a 	mov	r4,r2
1010fc58:	010feb40 	call	1010feb4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
1010fc5c:	1000021e 	bne	r2,zero,1010fc68 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
1010fc60:	e0bffd17 	ldw	r2,-12(fp)
1010fc64:	00000706 	br	1010fc84 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
1010fc68:	e0bffd17 	ldw	r2,-12(fp)
1010fc6c:	10800017 	ldw	r2,0(r2)
1010fc70:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
1010fc74:	e0fffd17 	ldw	r3,-12(fp)
1010fc78:	d0a00604 	addi	r2,gp,-32744
1010fc7c:	18bfcc1e 	bne	r3,r2,1010fbb0 <__alt_data_end+0xfffefbb0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
1010fc80:	0005883a 	mov	r2,zero
}
1010fc84:	e037883a 	mov	sp,fp
1010fc88:	dfc00117 	ldw	ra,4(sp)
1010fc8c:	df000017 	ldw	fp,0(sp)
1010fc90:	dec00204 	addi	sp,sp,8
1010fc94:	f800283a 	ret

1010fc98 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
1010fc98:	defffc04 	addi	sp,sp,-16
1010fc9c:	df000315 	stw	fp,12(sp)
1010fca0:	df000304 	addi	fp,sp,12
1010fca4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
1010fca8:	00bffa04 	movi	r2,-24
1010fcac:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1010fcb0:	e03ffd15 	stw	zero,-12(fp)
1010fcb4:	00001906 	br	1010fd1c <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
1010fcb8:	00840474 	movhi	r2,4113
1010fcbc:	10838e04 	addi	r2,r2,3640
1010fcc0:	e0fffd17 	ldw	r3,-12(fp)
1010fcc4:	18c00324 	muli	r3,r3,12
1010fcc8:	10c5883a 	add	r2,r2,r3
1010fccc:	10800017 	ldw	r2,0(r2)
1010fcd0:	10000f1e 	bne	r2,zero,1010fd10 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
1010fcd4:	00840474 	movhi	r2,4113
1010fcd8:	10838e04 	addi	r2,r2,3640
1010fcdc:	e0fffd17 	ldw	r3,-12(fp)
1010fce0:	18c00324 	muli	r3,r3,12
1010fce4:	10c5883a 	add	r2,r2,r3
1010fce8:	e0ffff17 	ldw	r3,-4(fp)
1010fcec:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
1010fcf0:	d0e00a17 	ldw	r3,-32728(gp)
1010fcf4:	e0bffd17 	ldw	r2,-12(fp)
1010fcf8:	1880020e 	bge	r3,r2,1010fd04 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
1010fcfc:	e0bffd17 	ldw	r2,-12(fp)
1010fd00:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
1010fd04:	e0bffd17 	ldw	r2,-12(fp)
1010fd08:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
1010fd0c:	00000606 	br	1010fd28 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1010fd10:	e0bffd17 	ldw	r2,-12(fp)
1010fd14:	10800044 	addi	r2,r2,1
1010fd18:	e0bffd15 	stw	r2,-12(fp)
1010fd1c:	e0bffd17 	ldw	r2,-12(fp)
1010fd20:	10800810 	cmplti	r2,r2,32
1010fd24:	103fe41e 	bne	r2,zero,1010fcb8 <__alt_data_end+0xfffefcb8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
1010fd28:	e0bffe17 	ldw	r2,-8(fp)
}
1010fd2c:	e037883a 	mov	sp,fp
1010fd30:	df000017 	ldw	fp,0(sp)
1010fd34:	dec00104 	addi	sp,sp,4
1010fd38:	f800283a 	ret

1010fd3c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
1010fd3c:	defffb04 	addi	sp,sp,-20
1010fd40:	df000415 	stw	fp,16(sp)
1010fd44:	df000404 	addi	fp,sp,16
1010fd48:	e13ffe15 	stw	r4,-8(fp)
1010fd4c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
1010fd50:	e0bfff17 	ldw	r2,-4(fp)
1010fd54:	10840070 	cmpltui	r2,r2,4097
1010fd58:	1000021e 	bne	r2,zero,1010fd64 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
1010fd5c:	00840004 	movi	r2,4096
1010fd60:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
1010fd64:	e0fffe17 	ldw	r3,-8(fp)
1010fd68:	e0bfff17 	ldw	r2,-4(fp)
1010fd6c:	1885883a 	add	r2,r3,r2
1010fd70:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
1010fd74:	e0bffe17 	ldw	r2,-8(fp)
1010fd78:	e0bffc15 	stw	r2,-16(fp)
1010fd7c:	00000506 	br	1010fd94 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
1010fd80:	e0bffc17 	ldw	r2,-16(fp)
1010fd84:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
1010fd88:	e0bffc17 	ldw	r2,-16(fp)
1010fd8c:	10800804 	addi	r2,r2,32
1010fd90:	e0bffc15 	stw	r2,-16(fp)
1010fd94:	e0fffc17 	ldw	r3,-16(fp)
1010fd98:	e0bffd17 	ldw	r2,-12(fp)
1010fd9c:	18bff836 	bltu	r3,r2,1010fd80 <__alt_data_end+0xfffefd80>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
1010fda0:	e0bffe17 	ldw	r2,-8(fp)
1010fda4:	108007cc 	andi	r2,r2,31
1010fda8:	10000226 	beq	r2,zero,1010fdb4 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
1010fdac:	e0bffc17 	ldw	r2,-16(fp)
1010fdb0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
1010fdb4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
1010fdb8:	0001883a 	nop
1010fdbc:	e037883a 	mov	sp,fp
1010fdc0:	df000017 	ldw	fp,0(sp)
1010fdc4:	dec00104 	addi	sp,sp,4
1010fdc8:	f800283a 	ret

1010fdcc <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
1010fdcc:	defffe04 	addi	sp,sp,-8
1010fdd0:	df000115 	stw	fp,4(sp)
1010fdd4:	df000104 	addi	fp,sp,4
1010fdd8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
1010fddc:	e0bfff17 	ldw	r2,-4(fp)
1010fde0:	10bffe84 	addi	r2,r2,-6
1010fde4:	10c00428 	cmpgeui	r3,r2,16
1010fde8:	18001a1e 	bne	r3,zero,1010fe54 <alt_exception_cause_generated_bad_addr+0x88>
1010fdec:	100690ba 	slli	r3,r2,2
1010fdf0:	00840474 	movhi	r2,4113
1010fdf4:	10bf8104 	addi	r2,r2,-508
1010fdf8:	1885883a 	add	r2,r3,r2
1010fdfc:	10800017 	ldw	r2,0(r2)
1010fe00:	1000683a 	jmp	r2
1010fe04:	1010fe44 	addi	zero,r2,17401
1010fe08:	1010fe44 	addi	zero,r2,17401
1010fe0c:	1010fe54 	ori	zero,r2,17401
1010fe10:	1010fe54 	ori	zero,r2,17401
1010fe14:	1010fe54 	ori	zero,r2,17401
1010fe18:	1010fe44 	addi	zero,r2,17401
1010fe1c:	1010fe4c 	andi	zero,r2,17401
1010fe20:	1010fe54 	ori	zero,r2,17401
1010fe24:	1010fe44 	addi	zero,r2,17401
1010fe28:	1010fe44 	addi	zero,r2,17401
1010fe2c:	1010fe54 	ori	zero,r2,17401
1010fe30:	1010fe44 	addi	zero,r2,17401
1010fe34:	1010fe4c 	andi	zero,r2,17401
1010fe38:	1010fe54 	ori	zero,r2,17401
1010fe3c:	1010fe54 	ori	zero,r2,17401
1010fe40:	1010fe44 	addi	zero,r2,17401
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
1010fe44:	00800044 	movi	r2,1
1010fe48:	00000306 	br	1010fe58 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
1010fe4c:	0005883a 	mov	r2,zero
1010fe50:	00000106 	br	1010fe58 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
1010fe54:	0005883a 	mov	r2,zero
  }
}
1010fe58:	e037883a 	mov	sp,fp
1010fe5c:	df000017 	ldw	fp,0(sp)
1010fe60:	dec00104 	addi	sp,sp,4
1010fe64:	f800283a 	ret

1010fe68 <atexit>:
1010fe68:	200b883a 	mov	r5,r4
1010fe6c:	000f883a 	mov	r7,zero
1010fe70:	000d883a 	mov	r6,zero
1010fe74:	0009883a 	mov	r4,zero
1010fe78:	010ff301 	jmpi	1010ff30 <__register_exitproc>

1010fe7c <exit>:
1010fe7c:	defffe04 	addi	sp,sp,-8
1010fe80:	000b883a 	mov	r5,zero
1010fe84:	dc000015 	stw	r16,0(sp)
1010fe88:	dfc00115 	stw	ra,4(sp)
1010fe8c:	2021883a 	mov	r16,r4
1010fe90:	01100480 	call	10110048 <__call_exitprocs>
1010fe94:	00840474 	movhi	r2,4113
1010fe98:	10881004 	addi	r2,r2,8256
1010fe9c:	11000017 	ldw	r4,0(r2)
1010fea0:	20800f17 	ldw	r2,60(r4)
1010fea4:	10000126 	beq	r2,zero,1010feac <exit+0x30>
1010fea8:	103ee83a 	callr	r2
1010feac:	8009883a 	mov	r4,r16
1010feb0:	01101c80 	call	101101c8 <_exit>

1010feb4 <memcmp>:
1010feb4:	01c000c4 	movi	r7,3
1010feb8:	3980192e 	bgeu	r7,r6,1010ff20 <memcmp+0x6c>
1010febc:	2144b03a 	or	r2,r4,r5
1010fec0:	11c4703a 	and	r2,r2,r7
1010fec4:	10000f26 	beq	r2,zero,1010ff04 <memcmp+0x50>
1010fec8:	20800003 	ldbu	r2,0(r4)
1010fecc:	28c00003 	ldbu	r3,0(r5)
1010fed0:	10c0151e 	bne	r2,r3,1010ff28 <memcmp+0x74>
1010fed4:	31bfff84 	addi	r6,r6,-2
1010fed8:	01ffffc4 	movi	r7,-1
1010fedc:	00000406 	br	1010fef0 <memcmp+0x3c>
1010fee0:	20800003 	ldbu	r2,0(r4)
1010fee4:	28c00003 	ldbu	r3,0(r5)
1010fee8:	31bfffc4 	addi	r6,r6,-1
1010feec:	10c00e1e 	bne	r2,r3,1010ff28 <memcmp+0x74>
1010fef0:	21000044 	addi	r4,r4,1
1010fef4:	29400044 	addi	r5,r5,1
1010fef8:	31fff91e 	bne	r6,r7,1010fee0 <__alt_data_end+0xfffefee0>
1010fefc:	0005883a 	mov	r2,zero
1010ff00:	f800283a 	ret
1010ff04:	20c00017 	ldw	r3,0(r4)
1010ff08:	28800017 	ldw	r2,0(r5)
1010ff0c:	18bfee1e 	bne	r3,r2,1010fec8 <__alt_data_end+0xfffefec8>
1010ff10:	31bfff04 	addi	r6,r6,-4
1010ff14:	21000104 	addi	r4,r4,4
1010ff18:	29400104 	addi	r5,r5,4
1010ff1c:	39bff936 	bltu	r7,r6,1010ff04 <__alt_data_end+0xfffeff04>
1010ff20:	303fe91e 	bne	r6,zero,1010fec8 <__alt_data_end+0xfffefec8>
1010ff24:	003ff506 	br	1010fefc <__alt_data_end+0xfffefefc>
1010ff28:	10c5c83a 	sub	r2,r2,r3
1010ff2c:	f800283a 	ret

1010ff30 <__register_exitproc>:
1010ff30:	defffa04 	addi	sp,sp,-24
1010ff34:	dc000315 	stw	r16,12(sp)
1010ff38:	04040474 	movhi	r16,4113
1010ff3c:	84081004 	addi	r16,r16,8256
1010ff40:	80c00017 	ldw	r3,0(r16)
1010ff44:	dc400415 	stw	r17,16(sp)
1010ff48:	dfc00515 	stw	ra,20(sp)
1010ff4c:	18805217 	ldw	r2,328(r3)
1010ff50:	2023883a 	mov	r17,r4
1010ff54:	10003726 	beq	r2,zero,10110034 <__register_exitproc+0x104>
1010ff58:	10c00117 	ldw	r3,4(r2)
1010ff5c:	010007c4 	movi	r4,31
1010ff60:	20c00e16 	blt	r4,r3,1010ff9c <__register_exitproc+0x6c>
1010ff64:	1a000044 	addi	r8,r3,1
1010ff68:	8800221e 	bne	r17,zero,1010fff4 <__register_exitproc+0xc4>
1010ff6c:	18c00084 	addi	r3,r3,2
1010ff70:	18c7883a 	add	r3,r3,r3
1010ff74:	18c7883a 	add	r3,r3,r3
1010ff78:	12000115 	stw	r8,4(r2)
1010ff7c:	10c7883a 	add	r3,r2,r3
1010ff80:	19400015 	stw	r5,0(r3)
1010ff84:	0005883a 	mov	r2,zero
1010ff88:	dfc00517 	ldw	ra,20(sp)
1010ff8c:	dc400417 	ldw	r17,16(sp)
1010ff90:	dc000317 	ldw	r16,12(sp)
1010ff94:	dec00604 	addi	sp,sp,24
1010ff98:	f800283a 	ret
1010ff9c:	00800034 	movhi	r2,0
1010ffa0:	10800004 	addi	r2,r2,0
1010ffa4:	10002626 	beq	r2,zero,10110040 <__register_exitproc+0x110>
1010ffa8:	01006404 	movi	r4,400
1010ffac:	d9400015 	stw	r5,0(sp)
1010ffb0:	d9800115 	stw	r6,4(sp)
1010ffb4:	d9c00215 	stw	r7,8(sp)
1010ffb8:	00000000 	call	10000000 <__reset-0x100000>
1010ffbc:	d9400017 	ldw	r5,0(sp)
1010ffc0:	d9800117 	ldw	r6,4(sp)
1010ffc4:	d9c00217 	ldw	r7,8(sp)
1010ffc8:	10001d26 	beq	r2,zero,10110040 <__register_exitproc+0x110>
1010ffcc:	81000017 	ldw	r4,0(r16)
1010ffd0:	10000115 	stw	zero,4(r2)
1010ffd4:	02000044 	movi	r8,1
1010ffd8:	22405217 	ldw	r9,328(r4)
1010ffdc:	0007883a 	mov	r3,zero
1010ffe0:	12400015 	stw	r9,0(r2)
1010ffe4:	20805215 	stw	r2,328(r4)
1010ffe8:	10006215 	stw	zero,392(r2)
1010ffec:	10006315 	stw	zero,396(r2)
1010fff0:	883fde26 	beq	r17,zero,1010ff6c <__alt_data_end+0xfffeff6c>
1010fff4:	18c9883a 	add	r4,r3,r3
1010fff8:	2109883a 	add	r4,r4,r4
1010fffc:	1109883a 	add	r4,r2,r4
10110000:	21802215 	stw	r6,136(r4)
10110004:	01800044 	movi	r6,1
10110008:	12406217 	ldw	r9,392(r2)
1011000c:	30cc983a 	sll	r6,r6,r3
10110010:	4992b03a 	or	r9,r9,r6
10110014:	12406215 	stw	r9,392(r2)
10110018:	21c04215 	stw	r7,264(r4)
1011001c:	01000084 	movi	r4,2
10110020:	893fd21e 	bne	r17,r4,1010ff6c <__alt_data_end+0xfffeff6c>
10110024:	11006317 	ldw	r4,396(r2)
10110028:	218cb03a 	or	r6,r4,r6
1011002c:	11806315 	stw	r6,396(r2)
10110030:	003fce06 	br	1010ff6c <__alt_data_end+0xfffeff6c>
10110034:	18805304 	addi	r2,r3,332
10110038:	18805215 	stw	r2,328(r3)
1011003c:	003fc606 	br	1010ff58 <__alt_data_end+0xfffeff58>
10110040:	00bfffc4 	movi	r2,-1
10110044:	003fd006 	br	1010ff88 <__alt_data_end+0xfffeff88>

10110048 <__call_exitprocs>:
10110048:	defff504 	addi	sp,sp,-44
1011004c:	df000915 	stw	fp,36(sp)
10110050:	dd400615 	stw	r21,24(sp)
10110054:	dc800315 	stw	r18,12(sp)
10110058:	dfc00a15 	stw	ra,40(sp)
1011005c:	ddc00815 	stw	r23,32(sp)
10110060:	dd800715 	stw	r22,28(sp)
10110064:	dd000515 	stw	r20,20(sp)
10110068:	dcc00415 	stw	r19,16(sp)
1011006c:	dc400215 	stw	r17,8(sp)
10110070:	dc000115 	stw	r16,4(sp)
10110074:	d9000015 	stw	r4,0(sp)
10110078:	2839883a 	mov	fp,r5
1011007c:	04800044 	movi	r18,1
10110080:	057fffc4 	movi	r21,-1
10110084:	00840474 	movhi	r2,4113
10110088:	10881004 	addi	r2,r2,8256
1011008c:	12000017 	ldw	r8,0(r2)
10110090:	45005217 	ldw	r20,328(r8)
10110094:	44c05204 	addi	r19,r8,328
10110098:	a0001c26 	beq	r20,zero,1011010c <__call_exitprocs+0xc4>
1011009c:	a0800117 	ldw	r2,4(r20)
101100a0:	15ffffc4 	addi	r23,r2,-1
101100a4:	b8000d16 	blt	r23,zero,101100dc <__call_exitprocs+0x94>
101100a8:	14000044 	addi	r16,r2,1
101100ac:	8421883a 	add	r16,r16,r16
101100b0:	8421883a 	add	r16,r16,r16
101100b4:	84402004 	addi	r17,r16,128
101100b8:	a463883a 	add	r17,r20,r17
101100bc:	a421883a 	add	r16,r20,r16
101100c0:	e0001e26 	beq	fp,zero,1011013c <__call_exitprocs+0xf4>
101100c4:	80804017 	ldw	r2,256(r16)
101100c8:	e0801c26 	beq	fp,r2,1011013c <__call_exitprocs+0xf4>
101100cc:	bdffffc4 	addi	r23,r23,-1
101100d0:	843fff04 	addi	r16,r16,-4
101100d4:	8c7fff04 	addi	r17,r17,-4
101100d8:	bd7ff91e 	bne	r23,r21,101100c0 <__alt_data_end+0xffff00c0>
101100dc:	00800034 	movhi	r2,0
101100e0:	10800004 	addi	r2,r2,0
101100e4:	10000926 	beq	r2,zero,1011010c <__call_exitprocs+0xc4>
101100e8:	a0800117 	ldw	r2,4(r20)
101100ec:	1000301e 	bne	r2,zero,101101b0 <__call_exitprocs+0x168>
101100f0:	a0800017 	ldw	r2,0(r20)
101100f4:	10003226 	beq	r2,zero,101101c0 <__call_exitprocs+0x178>
101100f8:	a009883a 	mov	r4,r20
101100fc:	98800015 	stw	r2,0(r19)
10110100:	00000000 	call	10000000 <__reset-0x100000>
10110104:	9d000017 	ldw	r20,0(r19)
10110108:	a03fe41e 	bne	r20,zero,1011009c <__alt_data_end+0xffff009c>
1011010c:	dfc00a17 	ldw	ra,40(sp)
10110110:	df000917 	ldw	fp,36(sp)
10110114:	ddc00817 	ldw	r23,32(sp)
10110118:	dd800717 	ldw	r22,28(sp)
1011011c:	dd400617 	ldw	r21,24(sp)
10110120:	dd000517 	ldw	r20,20(sp)
10110124:	dcc00417 	ldw	r19,16(sp)
10110128:	dc800317 	ldw	r18,12(sp)
1011012c:	dc400217 	ldw	r17,8(sp)
10110130:	dc000117 	ldw	r16,4(sp)
10110134:	dec00b04 	addi	sp,sp,44
10110138:	f800283a 	ret
1011013c:	a0800117 	ldw	r2,4(r20)
10110140:	80c00017 	ldw	r3,0(r16)
10110144:	10bfffc4 	addi	r2,r2,-1
10110148:	15c01426 	beq	r2,r23,1011019c <__call_exitprocs+0x154>
1011014c:	80000015 	stw	zero,0(r16)
10110150:	183fde26 	beq	r3,zero,101100cc <__alt_data_end+0xffff00cc>
10110154:	95c8983a 	sll	r4,r18,r23
10110158:	a0806217 	ldw	r2,392(r20)
1011015c:	a5800117 	ldw	r22,4(r20)
10110160:	2084703a 	and	r2,r4,r2
10110164:	10000b26 	beq	r2,zero,10110194 <__call_exitprocs+0x14c>
10110168:	a0806317 	ldw	r2,396(r20)
1011016c:	2088703a 	and	r4,r4,r2
10110170:	20000c1e 	bne	r4,zero,101101a4 <__call_exitprocs+0x15c>
10110174:	89400017 	ldw	r5,0(r17)
10110178:	d9000017 	ldw	r4,0(sp)
1011017c:	183ee83a 	callr	r3
10110180:	a0800117 	ldw	r2,4(r20)
10110184:	15bfbf1e 	bne	r2,r22,10110084 <__alt_data_end+0xffff0084>
10110188:	98800017 	ldw	r2,0(r19)
1011018c:	153fcf26 	beq	r2,r20,101100cc <__alt_data_end+0xffff00cc>
10110190:	003fbc06 	br	10110084 <__alt_data_end+0xffff0084>
10110194:	183ee83a 	callr	r3
10110198:	003ff906 	br	10110180 <__alt_data_end+0xffff0180>
1011019c:	a5c00115 	stw	r23,4(r20)
101101a0:	003feb06 	br	10110150 <__alt_data_end+0xffff0150>
101101a4:	89000017 	ldw	r4,0(r17)
101101a8:	183ee83a 	callr	r3
101101ac:	003ff406 	br	10110180 <__alt_data_end+0xffff0180>
101101b0:	a0800017 	ldw	r2,0(r20)
101101b4:	a027883a 	mov	r19,r20
101101b8:	1029883a 	mov	r20,r2
101101bc:	003fb606 	br	10110098 <__alt_data_end+0xffff0098>
101101c0:	0005883a 	mov	r2,zero
101101c4:	003ffb06 	br	101101b4 <__alt_data_end+0xffff01b4>

101101c8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
101101c8:	defffd04 	addi	sp,sp,-12
101101cc:	df000215 	stw	fp,8(sp)
101101d0:	df000204 	addi	fp,sp,8
101101d4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
101101d8:	0001883a 	nop
101101dc:	e0bfff17 	ldw	r2,-4(fp)
101101e0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
101101e4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
101101e8:	10000226 	beq	r2,zero,101101f4 <_exit+0x2c>
    ALT_SIM_FAIL();
101101ec:	002af070 	cmpltui	zero,zero,43969
101101f0:	00000106 	br	101101f8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
101101f4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
101101f8:	003fff06 	br	101101f8 <__alt_data_end+0xffff01f8>
