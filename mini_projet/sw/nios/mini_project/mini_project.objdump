
mini_project.elf:     file format elf32-littlenios2
mini_project.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10100224

Program Header:
    LOAD off    0x00001000 vaddr 0x10100000 paddr 0x10100000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10100020 paddr 0x10100020 align 2**12
         filesz 0x00005528 memsz 0x00005528 flags r-x
    LOAD off    0x00006548 vaddr 0x10105548 paddr 0x10106fb4 align 2**12
         filesz 0x00001a6c memsz 0x00001a6c flags rw-
    LOAD off    0x00008a20 vaddr 0x10108a20 paddr 0x10108a20 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10100000  10100000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000204  10100020  10100020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000052d8  10100224  10100224  00001224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000004c  101054fc  101054fc  000064fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a6c  10105548  10106fb4  00006548  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  10108a20  10108a20  00008a20  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  10108b74  10108b74  00007fb4  2**0
                  CONTENTS
  7 .comment      0000002c  00000000  00000000  00007fb4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000a18  00000000  00000000  00007fe0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00030c63  00000000  00000000  000089f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009f3d  00000000  00000000  0003965b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000bbd3  00000000  00000000  00043598  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000014e0  00000000  00000000  0004f16c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002c56  00000000  00000000  0005064c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00005a1d  00000000  00000000  000532a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00058cc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000006f8  00000000  00000000  00058cd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0005b833  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0005b836  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0005b842  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0005b843  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0005b844  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0005b84f  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0005b85a  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000a  00000000  00000000  0005b865  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000049  00000000  00000000  0005b86f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10100000 l    d  .entry	00000000 .entry
10100020 l    d  .exceptions	00000000 .exceptions
10100224 l    d  .text	00000000 .text
101054fc l    d  .rodata	00000000 .rodata
10105548 l    d  .rwdata	00000000 .rwdata
10108a20 l    d  .bss	00000000 .bss
10108b74 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/Iacopo/Documents/EPFL/ES/Embedded_Systems/mini_projet/sw/nios/mini_project_bsp/obj/HAL/src/crt0.o
1010025c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
10100408 l     F .text	00000008 __fp_lock
1010041c l     F .text	00000168 __sinit.part.0
10100584 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
10105548 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
10102f50 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
10103068 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
10103094 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
1010318c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
10103278 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
10103364 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
10103544 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10106fa4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
101037b0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
101038f0 l     F .text	00000034 alt_dev_reg
10105f1c l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
10103bcc l     F .text	0000020c altera_avalon_jtag_uart_irq
10103dd8 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
10104570 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
101049d4 l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
10104b24 l     F .text	0000003c alt_get_errno
10104b60 l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10108a48 g     O .bss	00000004 alt_instruction_exception_handler
10102d1c g     F .text	00000058 _isatty_r
10103480 g     F .text	0000007c alt_main
10100294 g     F .text	000000cc _puts_r
10108a74 g     O .bss	00000100 alt_irq
10102a1c g     F .text	00000064 _lseek_r
10106fb4 g       *ABS*	00000000 __flash_rwdata_start
10108b74 g       *ABS*	00000000 __alt_heap_start
10101fd0 g     F .text	0000005c __sseek
10100714 g     F .text	00000010 __sinit
1010058c g     F .text	00000078 __sfmoreglue
10103520 g     F .text	00000024 __malloc_unlock
1010171c g     F .text	0000012c memmove
10100700 g     F .text	00000014 _cleanup
10104f48 g     F .text	00000024 altera_nios2_gen2_irq_init
10100000 g     F .entry	0000000c __reset
10100020 g       *ABS*	00000000 __flash_exceptions_start
10102cbc g     F .text	00000060 _fstat_r
10108a2c g     O .bss	00000004 errno
10101f48 g     F .text	00000008 __seofread
10108a34 g     O .bss	00000004 alt_argv
1010ef7c g       *ABS*	00000000 _gp
10105d9c g     O .rwdata	00000180 alt_fd_list
10104f6c g     F .text	00000090 alt_find_dev
1010161c g     F .text	00000100 memcpy
10100410 g     F .text	0000000c _cleanup_r
10104aa8 g     F .text	0000007c alt_io_redirect
101054fc g       *ABS*	00000000 __DTOR_END__
10100360 g     F .text	00000010 puts
101051bc g     F .text	00000098 alt_exception_cause_generated_bad_addr
10103fd4 g     F .text	00000220 altera_avalon_jtag_uart_read
10100000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
10102e68 g     F .text	00000064 .hidden __udivsi3
101031c8 g     F .text	000000b0 isatty
10108a28 g     O .bss	00000004 __malloc_top_pad
1010075c g     F .text	000004cc __sfvwrite_r
10101e9c g     F .text	00000058 _sbrk_r
10102c58 g     F .text	00000064 _read_r
10106f9c g     O .rwdata	00000004 alt_max_fd
1010224c g     F .text	000000f8 _fclose_r
101025dc g     F .text	00000028 fflush
10108a24 g     O .bss	00000004 __malloc_max_sbrked_mem
101033a0 g     F .text	000000e0 lseek
10106f7c g     O .rwdata	00000004 _global_impure_ptr
10101938 g     F .text	00000564 _realloc_r
10108b74 g       *ABS*	00000000 __bss_end
101048ec g     F .text	000000e8 alt_iic_isr_register
10104e40 g     F .text	00000108 alt_tick
10100734 g     F .text	00000014 __fp_lock_all
101048a0 g     F .text	0000004c alt_ic_irq_enabled
10104d9c g     F .text	000000a4 alt_alarm_stop
10108a3c g     O .bss	00000004 alt_irq_active
101000fc g     F .exceptions	000000c8 alt_irq_handler
10105d74 g     O .rwdata	00000028 alt_dev_null
10104550 g     F .text	00000020 alt_dcache_flush_all
10106fb4 g       *ABS*	00000000 __ram_rwdata_end
10106f94 g     O .rwdata	00000008 alt_dev_list
101037ec g     F .text	00000104 write
10105548 g       *ABS*	00000000 __ram_rodata_end
101030d0 g     F .text	000000bc fstat
10102ecc g     F .text	0000005c .hidden __umodsi3
10108b74 g       *ABS*	00000000 end
10103b0c g     F .text	000000c0 altera_avalon_jtag_uart_init
101001c4 g     F .exceptions	00000060 alt_instruction_exception_entry
101054fc g       *ABS*	00000000 __CTOR_LIST__
10120000 g       *ABS*	00000000 __alt_stack_pointer
101041f4 g     F .text	00000228 altera_avalon_jtag_uart_write
10100724 g     F .text	00000004 __sfp_lock_acquire
10101548 g     F .text	000000d4 memchr
10102720 g     F .text	000002fc _free_r
101053a4 g     F .text	00000120 __call_exitprocs
10106f84 g     O .rwdata	00000004 __malloc_sbrk_base
10100224 g     F .text	0000003c _start
10108a40 g     O .bss	00000004 _alt_tick_rate
10108a44 g     O .bss	00000004 _alt_nticks
10103580 g     F .text	00000108 read
10103960 g     F .text	00000048 alt_sys_init
10105314 g     F .text	00000090 __register_exitproc
10103e78 g     F .text	00000068 altera_avalon_jtag_uart_close
10102f28 g     F .text	00000028 .hidden __mulsi3
10105548 g       *ABS*	00000000 __ram_rwdata_start
101054fc g       *ABS*	00000000 __ram_rodata_start
10108a4c g     O .bss	00000028 __malloc_current_mallinfo
101039a8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10105104 g     F .text	000000b8 alt_get_fd
101021f4 g     F .text	00000058 _close_r
1010529c g     F .text	00000078 memcmp
10103a68 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10108b74 g       *ABS*	00000000 __alt_stack_base
10103ab8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10102098 g     F .text	0000015c __swsetup_r
10100604 g     F .text	000000fc __sfp
1010596c g     O .rwdata	00000408 __malloc_av_
10100730 g     F .text	00000004 __sinit_lock_release
10101ef4 g     F .text	00000054 __sread
10104ffc g     F .text	00000108 alt_find_file
101045ac g     F .text	000000a8 alt_dev_llist_insert
101034fc g     F .text	00000024 __malloc_lock
101036f8 g     F .text	000000b8 sbrk
1010257c g     F .text	00000060 _fflush_r
10108a20 g       *ABS*	00000000 __bss_start
10101848 g     F .text	000000f0 memset
10100260 g     F .text	00000034 main
10108a38 g     O .bss	00000004 alt_envp
10108a20 g     O .bss	00000004 __malloc_max_total_mem
10103a08 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
1010202c g     F .text	00000008 __sclose
10120000 g       *ABS*	00000000 __alt_heap_limit
10102344 g     F .text	00000010 fclose
10100d68 g     F .text	000007e0 _malloc_r
10106fa0 g     O .rwdata	00000004 alt_errno
10100c28 g     F .text	00000098 _fwalk
10102d74 g     F .text	00000080 .hidden __divsi3
10102604 g     F .text	0000011c _malloc_trim_r
101054fc g       *ABS*	00000000 __CTOR_END__
101054fc g       *ABS*	00000000 __flash_rodata_start
101054fc g       *ABS*	00000000 __DTOR_LIST__
10103924 g     F .text	0000003c alt_irq_init
10103688 g     F .text	00000070 alt_release_fd
10105254 g     F .text	00000014 atexit
10102034 g     F .text	00000064 _write_r
10106f80 g     O .rwdata	00000004 _impure_ptr
10108a30 g     O .bss	00000004 alt_argc
10102354 g     F .text	00000228 __sflush_r
101046b8 g     F .text	00000064 _do_dtors
10100020 g       .exceptions	00000000 alt_irq_entry
10100748 g     F .text	00000014 __fp_unlock_all
10106f8c g     O .rwdata	00000008 alt_fs_list
10100020 g       *ABS*	00000000 __ram_exceptions_start
10102a80 g     F .text	00000098 __swhatbuf_r
1010473c g     F .text	00000050 alt_ic_isr_register
10106fb4 g       *ABS*	00000000 _edata
10108b74 g       *ABS*	00000000 _end
10100224 g       *ABS*	00000000 __ram_exceptions_end
10103ee0 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
10104814 g     F .text	0000008c alt_ic_irq_disable
10101f50 g     F .text	00000080 __swrite
10106f88 g     O .rwdata	00000004 __malloc_trim_threshold
10105268 g     F .text	00000034 exit
10100cc0 g     F .text	000000a8 _fwalk_reent
10102df4 g     F .text	00000074 .hidden __modsi3
10120000 g       *ABS*	00000000 __alt_data_end
10100020 g     F .exceptions	00000000 alt_exception
10100728 g     F .text	00000004 __sfp_lock_release
101054c4 g     F .text	00000038 _exit
1010441c g     F .text	00000134 alt_alarm_start
10102b18 g     F .text	00000140 __smakebuf_r
10100370 g     F .text	00000098 strlen
10104c3c g     F .text	00000160 open
1010471c g     F .text	00000020 alt_icache_flush_all
10106fa8 g     O .rwdata	00000004 alt_priority_mask
1010478c g     F .text	00000088 alt_ic_irq_enable
10106fac g     O .rwdata	00000008 alt_alarm_list
10104654 g     F .text	00000064 _do_ctors
10102f8c g     F .text	000000dc close
101032e0 g     F .text	00000084 alt_load
1010072c g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

10100000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10100000:	00440434 	movhi	at,4112
    ori r1, r1, %lo(_start)
10100004:	08408914 	ori	at,at,548
    jmp r1
10100008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10100020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10100020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10100024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10100028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1010002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10100030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10100034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10100038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1010003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10100040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10100044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10100048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1010004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10100050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10100054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10100058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1010005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10100060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10100064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10100068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1010006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10100070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10100074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10100078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1010007c:	10000326 	beq	r2,zero,1010008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10100080:	20000226 	beq	r4,zero,1010008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10100084:	01000fc0 	call	101000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10100088:	00000706 	br	101000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1010008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10100090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10100094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10100098:	01001c40 	call	101001c4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1010009c:	1000021e 	bne	r2,zero,101000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
101000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
101000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
101000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
101000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
101000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
101000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
101000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
101000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
101000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
101000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
101000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
101000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
101000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
101000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
101000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
101000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
101000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
101000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
101000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
101000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
101000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
101000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
101000f8:	ef80083a 	eret

101000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
101000fc:	defff904 	addi	sp,sp,-28
10100100:	dfc00615 	stw	ra,24(sp)
10100104:	df000515 	stw	fp,20(sp)
10100108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1010010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10100110:	0005313a 	rdctl	r2,ipending
10100114:	e0bffc15 	stw	r2,-16(fp)

  return active;
10100118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1010011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
10100120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10100124:	00800044 	movi	r2,1
10100128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1010012c:	e0ffff17 	ldw	r3,-4(fp)
10100130:	e0bffe17 	ldw	r2,-8(fp)
10100134:	1884703a 	and	r2,r3,r2
10100138:	10001126 	beq	r2,zero,10100180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1010013c:	e0bffd17 	ldw	r2,-12(fp)
10100140:	100690fa 	slli	r3,r2,3
10100144:	00840474 	movhi	r2,4113
10100148:	1885883a 	add	r2,r3,r2
1010014c:	10e29d17 	ldw	r3,-30092(r2)
10100150:	e0bffd17 	ldw	r2,-12(fp)
10100154:	100890fa 	slli	r4,r2,3
10100158:	00840474 	movhi	r2,4113
1010015c:	2085883a 	add	r2,r4,r2
10100160:	10a29e17 	ldw	r2,-30088(r2)
10100164:	1009883a 	mov	r4,r2
10100168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
1010016c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
10100170:	0005313a 	rdctl	r2,ipending
10100174:	e0bffb15 	stw	r2,-20(fp)
  return active;
10100178:	e0bffb17 	ldw	r2,-20(fp)
1010017c:	00000706 	br	1010019c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
10100180:	e0bffe17 	ldw	r2,-8(fp)
10100184:	1085883a 	add	r2,r2,r2
10100188:	e0bffe15 	stw	r2,-8(fp)
      i++;
1010018c:	e0bffd17 	ldw	r2,-12(fp)
10100190:	10800044 	addi	r2,r2,1
10100194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
10100198:	003fe406 	br	1010012c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
1010019c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
101001a0:	e0bfff17 	ldw	r2,-4(fp)
101001a4:	103fde1e 	bne	r2,zero,10100120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
101001a8:	0001883a 	nop
}
101001ac:	0001883a 	nop
101001b0:	e037883a 	mov	sp,fp
101001b4:	dfc00117 	ldw	ra,4(sp)
101001b8:	df000017 	ldw	fp,0(sp)
101001bc:	dec00204 	addi	sp,sp,8
101001c0:	f800283a 	ret

101001c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
101001c4:	defffb04 	addi	sp,sp,-20
101001c8:	dfc00415 	stw	ra,16(sp)
101001cc:	df000315 	stw	fp,12(sp)
101001d0:	df000304 	addi	fp,sp,12
101001d4:	e13ffd15 	stw	r4,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
101001d8:	00bfffc4 	movi	r2,-1
101001dc:	e0bfff15 	stw	r2,-4(fp)
  badaddr = 0;
101001e0:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
101001e4:	d0a6b317 	ldw	r2,-25908(gp)
101001e8:	10000726 	beq	r2,zero,10100208 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
101001ec:	d0a6b317 	ldw	r2,-25908(gp)
101001f0:	e0ffff17 	ldw	r3,-4(fp)
101001f4:	e1bffe17 	ldw	r6,-8(fp)
101001f8:	e17ffd17 	ldw	r5,-12(fp)
101001fc:	1809883a 	mov	r4,r3
10100200:	103ee83a 	callr	r2
10100204:	00000206 	br	10100210 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10100208:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
1010020c:	0005883a 	mov	r2,zero
}
10100210:	e037883a 	mov	sp,fp
10100214:	dfc00117 	ldw	ra,4(sp)
10100218:	df000017 	ldw	fp,0(sp)
1010021c:	dec00204 	addi	sp,sp,8
10100220:	f800283a 	ret

Disassembly of section .text:

10100224 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10100224:	06c404b4 	movhi	sp,4114
    ori sp, sp, %lo(__alt_stack_pointer)
10100228:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
1010022c:	06840434 	movhi	gp,4112
    ori gp, gp, %lo(_gp)
10100230:	d6bbdf14 	ori	gp,gp,61308
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10100234:	00840434 	movhi	r2,4112
    ori r2, r2, %lo(__bss_start)
10100238:	10a28814 	ori	r2,r2,35360

    movhi r3, %hi(__bss_end)
1010023c:	00c40434 	movhi	r3,4112
    ori r3, r3, %lo(__bss_end)
10100240:	18e2dd14 	ori	r3,r3,35700

    beq r2, r3, 1f
10100244:	10c00326 	beq	r2,r3,10100254 <_start+0x30>

0:
    stw zero, (r2)
10100248:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
1010024c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
10100250:	10fffd36 	bltu	r2,r3,10100248 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10100254:	01032e00 	call	101032e0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10100258:	01034800 	call	10103480 <alt_main>

1010025c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
1010025c:	003fff06 	br	1010025c <alt_after_alt_main>

10100260 <main>:
 */

#include <stdio.h>

int main()
{
10100260:	defffe04 	addi	sp,sp,-8
10100264:	dfc00115 	stw	ra,4(sp)
10100268:	df000015 	stw	fp,0(sp)
1010026c:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
10100270:	01040434 	movhi	r4,4112
10100274:	21153f04 	addi	r4,r4,21756
10100278:	01003600 	call	10100360 <puts>

  return 0;
1010027c:	0005883a 	mov	r2,zero
}
10100280:	e037883a 	mov	sp,fp
10100284:	dfc00117 	ldw	ra,4(sp)
10100288:	df000017 	ldw	fp,0(sp)
1010028c:	dec00204 	addi	sp,sp,8
10100290:	f800283a 	ret

10100294 <_puts_r>:
10100294:	defff504 	addi	sp,sp,-44
10100298:	dc000815 	stw	r16,32(sp)
1010029c:	2021883a 	mov	r16,r4
101002a0:	2809883a 	mov	r4,r5
101002a4:	dc400915 	stw	r17,36(sp)
101002a8:	dfc00a15 	stw	ra,40(sp)
101002ac:	2823883a 	mov	r17,r5
101002b0:	01003700 	call	10100370 <strlen>
101002b4:	11000044 	addi	r4,r2,1
101002b8:	d8800515 	stw	r2,20(sp)
101002bc:	00800044 	movi	r2,1
101002c0:	00c40434 	movhi	r3,4112
101002c4:	d8800715 	stw	r2,28(sp)
101002c8:	d8800404 	addi	r2,sp,16
101002cc:	18d54404 	addi	r3,r3,21776
101002d0:	d8800115 	stw	r2,4(sp)
101002d4:	00800084 	movi	r2,2
101002d8:	dc400415 	stw	r17,16(sp)
101002dc:	d8c00615 	stw	r3,24(sp)
101002e0:	d9000315 	stw	r4,12(sp)
101002e4:	d8800215 	stw	r2,8(sp)
101002e8:	81400217 	ldw	r5,8(r16)
101002ec:	80000226 	beq	r16,zero,101002f8 <_puts_r+0x64>
101002f0:	80800e17 	ldw	r2,56(r16)
101002f4:	10001326 	beq	r2,zero,10100344 <_puts_r+0xb0>
101002f8:	2880030b 	ldhu	r2,12(r5)
101002fc:	10c8000c 	andi	r3,r2,8192
10100300:	1800061e 	bne	r3,zero,1010031c <_puts_r+0x88>
10100304:	28c01917 	ldw	r3,100(r5)
10100308:	0137ffc4 	movi	r4,-8193
1010030c:	10880014 	ori	r2,r2,8192
10100310:	1906703a 	and	r3,r3,r4
10100314:	2880030d 	sth	r2,12(r5)
10100318:	28c01915 	stw	r3,100(r5)
1010031c:	d9800104 	addi	r6,sp,4
10100320:	8009883a 	mov	r4,r16
10100324:	010075c0 	call	1010075c <__sfvwrite_r>
10100328:	10000b1e 	bne	r2,zero,10100358 <_puts_r+0xc4>
1010032c:	00800284 	movi	r2,10
10100330:	dfc00a17 	ldw	ra,40(sp)
10100334:	dc400917 	ldw	r17,36(sp)
10100338:	dc000817 	ldw	r16,32(sp)
1010033c:	dec00b04 	addi	sp,sp,44
10100340:	f800283a 	ret
10100344:	8009883a 	mov	r4,r16
10100348:	d9400015 	stw	r5,0(sp)
1010034c:	01007140 	call	10100714 <__sinit>
10100350:	d9400017 	ldw	r5,0(sp)
10100354:	003fe806 	br	101002f8 <_puts_r+0x64>
10100358:	00bfffc4 	movi	r2,-1
1010035c:	003ff406 	br	10100330 <_puts_r+0x9c>

10100360 <puts>:
10100360:	00840434 	movhi	r2,4112
10100364:	200b883a 	mov	r5,r4
10100368:	111be017 	ldw	r4,28544(r2)
1010036c:	01002941 	jmpi	10100294 <_puts_r>

10100370 <strlen>:
10100370:	208000cc 	andi	r2,r4,3
10100374:	10000926 	beq	r2,zero,1010039c <strlen+0x2c>
10100378:	2005883a 	mov	r2,r4
1010037c:	00000306 	br	1010038c <strlen+0x1c>
10100380:	10800044 	addi	r2,r2,1
10100384:	10c000cc 	andi	r3,r2,3
10100388:	18000526 	beq	r3,zero,101003a0 <strlen+0x30>
1010038c:	10c00007 	ldb	r3,0(r2)
10100390:	183ffb1e 	bne	r3,zero,10100380 <strlen+0x10>
10100394:	1105c83a 	sub	r2,r2,r4
10100398:	f800283a 	ret
1010039c:	2005883a 	mov	r2,r4
101003a0:	11400017 	ldw	r5,0(r2)
101003a4:	01ffbff4 	movhi	r7,65279
101003a8:	39ffbfc4 	addi	r7,r7,-257
101003ac:	29c7883a 	add	r3,r5,r7
101003b0:	01a02074 	movhi	r6,32897
101003b4:	014a303a 	nor	r5,zero,r5
101003b8:	1946703a 	and	r3,r3,r5
101003bc:	31a02004 	addi	r6,r6,-32640
101003c0:	1986703a 	and	r3,r3,r6
101003c4:	1800071e 	bne	r3,zero,101003e4 <strlen+0x74>
101003c8:	11400117 	ldw	r5,4(r2)
101003cc:	10800104 	addi	r2,r2,4
101003d0:	29c7883a 	add	r3,r5,r7
101003d4:	014a303a 	nor	r5,zero,r5
101003d8:	1946703a 	and	r3,r3,r5
101003dc:	1986703a 	and	r3,r3,r6
101003e0:	183ff926 	beq	r3,zero,101003c8 <strlen+0x58>
101003e4:	10c00007 	ldb	r3,0(r2)
101003e8:	183fea26 	beq	r3,zero,10100394 <strlen+0x24>
101003ec:	10c00047 	ldb	r3,1(r2)
101003f0:	10800044 	addi	r2,r2,1
101003f4:	183fe726 	beq	r3,zero,10100394 <strlen+0x24>
101003f8:	10c00047 	ldb	r3,1(r2)
101003fc:	10800044 	addi	r2,r2,1
10100400:	183ffa1e 	bne	r3,zero,101003ec <strlen+0x7c>
10100404:	003fe306 	br	10100394 <strlen+0x24>

10100408 <__fp_lock>:
10100408:	0005883a 	mov	r2,zero
1010040c:	f800283a 	ret

10100410 <_cleanup_r>:
10100410:	01440434 	movhi	r5,4112
10100414:	29489304 	addi	r5,r5,8780
10100418:	0100cc01 	jmpi	10100cc0 <_fwalk_reent>

1010041c <__sinit.part.0>:
1010041c:	00c40434 	movhi	r3,4112
10100420:	20800117 	ldw	r2,4(r4)
10100424:	18c10404 	addi	r3,r3,1040
10100428:	20c00f15 	stw	r3,60(r4)
1010042c:	2140bb04 	addi	r5,r4,748
10100430:	00c000c4 	movi	r3,3
10100434:	20c0b915 	stw	r3,740(r4)
10100438:	2140ba15 	stw	r5,744(r4)
1010043c:	2000b815 	stw	zero,736(r4)
10100440:	10001705 	stb	zero,92(r2)
10100444:	10001745 	stb	zero,93(r2)
10100448:	10001785 	stb	zero,94(r2)
1010044c:	100017c5 	stb	zero,95(r2)
10100450:	10001805 	stb	zero,96(r2)
10100454:	10001845 	stb	zero,97(r2)
10100458:	10001885 	stb	zero,98(r2)
1010045c:	100018c5 	stb	zero,99(r2)
10100460:	00c00104 	movi	r3,4
10100464:	10c00315 	stw	r3,12(r2)
10100468:	02040434 	movhi	r8,4112
1010046c:	20c00217 	ldw	r3,8(r4)
10100470:	01c40434 	movhi	r7,4112
10100474:	01840434 	movhi	r6,4112
10100478:	01440434 	movhi	r5,4112
1010047c:	4207bd04 	addi	r8,r8,7924
10100480:	39c7d404 	addi	r7,r7,8016
10100484:	3187f404 	addi	r6,r6,8144
10100488:	29480b04 	addi	r5,r5,8236
1010048c:	02400074 	movhi	r9,1
10100490:	10001915 	stw	zero,100(r2)
10100494:	10000015 	stw	zero,0(r2)
10100498:	10000115 	stw	zero,4(r2)
1010049c:	10000215 	stw	zero,8(r2)
101004a0:	10000415 	stw	zero,16(r2)
101004a4:	10000515 	stw	zero,20(r2)
101004a8:	10000615 	stw	zero,24(r2)
101004ac:	10800715 	stw	r2,28(r2)
101004b0:	12000815 	stw	r8,32(r2)
101004b4:	11c00915 	stw	r7,36(r2)
101004b8:	11800a15 	stw	r6,40(r2)
101004bc:	11400b15 	stw	r5,44(r2)
101004c0:	4a400284 	addi	r9,r9,10
101004c4:	1a400315 	stw	r9,12(r3)
101004c8:	18001915 	stw	zero,100(r3)
101004cc:	18000015 	stw	zero,0(r3)
101004d0:	18000115 	stw	zero,4(r3)
101004d4:	18000215 	stw	zero,8(r3)
101004d8:	18000415 	stw	zero,16(r3)
101004dc:	18001705 	stb	zero,92(r3)
101004e0:	18001745 	stb	zero,93(r3)
101004e4:	18001785 	stb	zero,94(r3)
101004e8:	180017c5 	stb	zero,95(r3)
101004ec:	18001805 	stb	zero,96(r3)
101004f0:	18001845 	stb	zero,97(r3)
101004f4:	18001885 	stb	zero,98(r3)
101004f8:	180018c5 	stb	zero,99(r3)
101004fc:	20800317 	ldw	r2,12(r4)
10100500:	024000b4 	movhi	r9,2
10100504:	18000515 	stw	zero,20(r3)
10100508:	18000615 	stw	zero,24(r3)
1010050c:	18c00715 	stw	r3,28(r3)
10100510:	1a000815 	stw	r8,32(r3)
10100514:	19c00915 	stw	r7,36(r3)
10100518:	19800a15 	stw	r6,40(r3)
1010051c:	19400b15 	stw	r5,44(r3)
10100520:	4a400484 	addi	r9,r9,18
10100524:	10001915 	stw	zero,100(r2)
10100528:	10000015 	stw	zero,0(r2)
1010052c:	10000115 	stw	zero,4(r2)
10100530:	10000215 	stw	zero,8(r2)
10100534:	12400315 	stw	r9,12(r2)
10100538:	10000415 	stw	zero,16(r2)
1010053c:	10000515 	stw	zero,20(r2)
10100540:	10000615 	stw	zero,24(r2)
10100544:	10001705 	stb	zero,92(r2)
10100548:	10001745 	stb	zero,93(r2)
1010054c:	10001785 	stb	zero,94(r2)
10100550:	100017c5 	stb	zero,95(r2)
10100554:	10001805 	stb	zero,96(r2)
10100558:	10001845 	stb	zero,97(r2)
1010055c:	10001885 	stb	zero,98(r2)
10100560:	100018c5 	stb	zero,99(r2)
10100564:	10800715 	stw	r2,28(r2)
10100568:	12000815 	stw	r8,32(r2)
1010056c:	11c00915 	stw	r7,36(r2)
10100570:	11800a15 	stw	r6,40(r2)
10100574:	11400b15 	stw	r5,44(r2)
10100578:	00800044 	movi	r2,1
1010057c:	20800e15 	stw	r2,56(r4)
10100580:	f800283a 	ret

10100584 <__fp_unlock>:
10100584:	0005883a 	mov	r2,zero
10100588:	f800283a 	ret

1010058c <__sfmoreglue>:
1010058c:	defffc04 	addi	sp,sp,-16
10100590:	dc800215 	stw	r18,8(sp)
10100594:	2825883a 	mov	r18,r5
10100598:	dc000015 	stw	r16,0(sp)
1010059c:	01401a04 	movi	r5,104
101005a0:	2021883a 	mov	r16,r4
101005a4:	913fffc4 	addi	r4,r18,-1
101005a8:	dfc00315 	stw	ra,12(sp)
101005ac:	dc400115 	stw	r17,4(sp)
101005b0:	0102f280 	call	10102f28 <__mulsi3>
101005b4:	8009883a 	mov	r4,r16
101005b8:	11401d04 	addi	r5,r2,116
101005bc:	1023883a 	mov	r17,r2
101005c0:	0100d680 	call	10100d68 <_malloc_r>
101005c4:	1021883a 	mov	r16,r2
101005c8:	10000726 	beq	r2,zero,101005e8 <__sfmoreglue+0x5c>
101005cc:	11000304 	addi	r4,r2,12
101005d0:	10000015 	stw	zero,0(r2)
101005d4:	14800115 	stw	r18,4(r2)
101005d8:	11000215 	stw	r4,8(r2)
101005dc:	89801a04 	addi	r6,r17,104
101005e0:	000b883a 	mov	r5,zero
101005e4:	01018480 	call	10101848 <memset>
101005e8:	8005883a 	mov	r2,r16
101005ec:	dfc00317 	ldw	ra,12(sp)
101005f0:	dc800217 	ldw	r18,8(sp)
101005f4:	dc400117 	ldw	r17,4(sp)
101005f8:	dc000017 	ldw	r16,0(sp)
101005fc:	dec00404 	addi	sp,sp,16
10100600:	f800283a 	ret

10100604 <__sfp>:
10100604:	defffd04 	addi	sp,sp,-12
10100608:	00840434 	movhi	r2,4112
1010060c:	dc000015 	stw	r16,0(sp)
10100610:	141bdf17 	ldw	r16,28540(r2)
10100614:	dc400115 	stw	r17,4(sp)
10100618:	dfc00215 	stw	ra,8(sp)
1010061c:	80800e17 	ldw	r2,56(r16)
10100620:	2023883a 	mov	r17,r4
10100624:	10002b26 	beq	r2,zero,101006d4 <__sfp+0xd0>
10100628:	8400b804 	addi	r16,r16,736
1010062c:	80c00117 	ldw	r3,4(r16)
10100630:	80800217 	ldw	r2,8(r16)
10100634:	18ffffc4 	addi	r3,r3,-1
10100638:	1800030e 	bge	r3,zero,10100648 <__sfp+0x44>
1010063c:	00002106 	br	101006c4 <__sfp+0xc0>
10100640:	10801a04 	addi	r2,r2,104
10100644:	30001f26 	beq	r6,zero,101006c4 <__sfp+0xc0>
10100648:	1140030f 	ldh	r5,12(r2)
1010064c:	18ffffc4 	addi	r3,r3,-1
10100650:	19bfffd8 	cmpnei	r6,r3,-1
10100654:	283ffa1e 	bne	r5,zero,10100640 <__sfp+0x3c>
10100658:	00fffff4 	movhi	r3,65535
1010065c:	18c00044 	addi	r3,r3,1
10100660:	10001915 	stw	zero,100(r2)
10100664:	10000015 	stw	zero,0(r2)
10100668:	10000115 	stw	zero,4(r2)
1010066c:	10000215 	stw	zero,8(r2)
10100670:	10c00315 	stw	r3,12(r2)
10100674:	10000415 	stw	zero,16(r2)
10100678:	10000515 	stw	zero,20(r2)
1010067c:	10000615 	stw	zero,24(r2)
10100680:	10001705 	stb	zero,92(r2)
10100684:	10001745 	stb	zero,93(r2)
10100688:	10001785 	stb	zero,94(r2)
1010068c:	100017c5 	stb	zero,95(r2)
10100690:	10001805 	stb	zero,96(r2)
10100694:	10001845 	stb	zero,97(r2)
10100698:	10001885 	stb	zero,98(r2)
1010069c:	100018c5 	stb	zero,99(r2)
101006a0:	10000c15 	stw	zero,48(r2)
101006a4:	10000d15 	stw	zero,52(r2)
101006a8:	10001115 	stw	zero,68(r2)
101006ac:	10001215 	stw	zero,72(r2)
101006b0:	dfc00217 	ldw	ra,8(sp)
101006b4:	dc400117 	ldw	r17,4(sp)
101006b8:	dc000017 	ldw	r16,0(sp)
101006bc:	dec00304 	addi	sp,sp,12
101006c0:	f800283a 	ret
101006c4:	80800017 	ldw	r2,0(r16)
101006c8:	10000526 	beq	r2,zero,101006e0 <__sfp+0xdc>
101006cc:	1021883a 	mov	r16,r2
101006d0:	003fd606 	br	1010062c <__sfp+0x28>
101006d4:	8009883a 	mov	r4,r16
101006d8:	010041c0 	call	1010041c <__sinit.part.0>
101006dc:	003fd206 	br	10100628 <__sfp+0x24>
101006e0:	01400104 	movi	r5,4
101006e4:	8809883a 	mov	r4,r17
101006e8:	010058c0 	call	1010058c <__sfmoreglue>
101006ec:	80800015 	stw	r2,0(r16)
101006f0:	103ff61e 	bne	r2,zero,101006cc <__sfp+0xc8>
101006f4:	00c00304 	movi	r3,12
101006f8:	88c00015 	stw	r3,0(r17)
101006fc:	003fec06 	br	101006b0 <__sfp+0xac>

10100700 <_cleanup>:
10100700:	00840434 	movhi	r2,4112
10100704:	111bdf17 	ldw	r4,28540(r2)
10100708:	01440434 	movhi	r5,4112
1010070c:	29489304 	addi	r5,r5,8780
10100710:	0100cc01 	jmpi	10100cc0 <_fwalk_reent>

10100714 <__sinit>:
10100714:	20800e17 	ldw	r2,56(r4)
10100718:	10000126 	beq	r2,zero,10100720 <__sinit+0xc>
1010071c:	f800283a 	ret
10100720:	010041c1 	jmpi	1010041c <__sinit.part.0>

10100724 <__sfp_lock_acquire>:
10100724:	f800283a 	ret

10100728 <__sfp_lock_release>:
10100728:	f800283a 	ret

1010072c <__sinit_lock_acquire>:
1010072c:	f800283a 	ret

10100730 <__sinit_lock_release>:
10100730:	f800283a 	ret

10100734 <__fp_lock_all>:
10100734:	00840434 	movhi	r2,4112
10100738:	111be017 	ldw	r4,28544(r2)
1010073c:	01440434 	movhi	r5,4112
10100740:	29410204 	addi	r5,r5,1032
10100744:	0100c281 	jmpi	10100c28 <_fwalk>

10100748 <__fp_unlock_all>:
10100748:	00840434 	movhi	r2,4112
1010074c:	111be017 	ldw	r4,28544(r2)
10100750:	01440434 	movhi	r5,4112
10100754:	29416104 	addi	r5,r5,1412
10100758:	0100c281 	jmpi	10100c28 <_fwalk>

1010075c <__sfvwrite_r>:
1010075c:	30800217 	ldw	r2,8(r6)
10100760:	1000c826 	beq	r2,zero,10100a84 <__sfvwrite_r+0x328>
10100764:	29c0030b 	ldhu	r7,12(r5)
10100768:	defff404 	addi	sp,sp,-48
1010076c:	dd800815 	stw	r22,32(sp)
10100770:	dd400715 	stw	r21,28(sp)
10100774:	dc000215 	stw	r16,8(sp)
10100778:	dfc00b15 	stw	ra,44(sp)
1010077c:	df000a15 	stw	fp,40(sp)
10100780:	ddc00915 	stw	r23,36(sp)
10100784:	dd000615 	stw	r20,24(sp)
10100788:	dcc00515 	stw	r19,20(sp)
1010078c:	dc800415 	stw	r18,16(sp)
10100790:	dc400315 	stw	r17,12(sp)
10100794:	3880020c 	andi	r2,r7,8
10100798:	302d883a 	mov	r22,r6
1010079c:	202b883a 	mov	r21,r4
101007a0:	2821883a 	mov	r16,r5
101007a4:	10002226 	beq	r2,zero,10100830 <__sfvwrite_r+0xd4>
101007a8:	28800417 	ldw	r2,16(r5)
101007ac:	10002026 	beq	r2,zero,10100830 <__sfvwrite_r+0xd4>
101007b0:	3880008c 	andi	r2,r7,2
101007b4:	b4400017 	ldw	r17,0(r22)
101007b8:	10002526 	beq	r2,zero,10100850 <__sfvwrite_r+0xf4>
101007bc:	80800917 	ldw	r2,36(r16)
101007c0:	81400717 	ldw	r5,28(r16)
101007c4:	05200034 	movhi	r20,32768
101007c8:	0027883a 	mov	r19,zero
101007cc:	0025883a 	mov	r18,zero
101007d0:	a53f0004 	addi	r20,r20,-1024
101007d4:	980d883a 	mov	r6,r19
101007d8:	a809883a 	mov	r4,r21
101007dc:	90001026 	beq	r18,zero,10100820 <__sfvwrite_r+0xc4>
101007e0:	900f883a 	mov	r7,r18
101007e4:	a480012e 	bgeu	r20,r18,101007ec <__sfvwrite_r+0x90>
101007e8:	a00f883a 	mov	r7,r20
101007ec:	103ee83a 	callr	r2
101007f0:	00809f0e 	bge	zero,r2,10100a70 <__sfvwrite_r+0x314>
101007f4:	b1000217 	ldw	r4,8(r22)
101007f8:	98a7883a 	add	r19,r19,r2
101007fc:	90a5c83a 	sub	r18,r18,r2
10100800:	2085c83a 	sub	r2,r4,r2
10100804:	b0800215 	stw	r2,8(r22)
10100808:	10006326 	beq	r2,zero,10100998 <__sfvwrite_r+0x23c>
1010080c:	80800917 	ldw	r2,36(r16)
10100810:	81400717 	ldw	r5,28(r16)
10100814:	980d883a 	mov	r6,r19
10100818:	a809883a 	mov	r4,r21
1010081c:	903ff01e 	bne	r18,zero,101007e0 <__sfvwrite_r+0x84>
10100820:	8cc00017 	ldw	r19,0(r17)
10100824:	8c800117 	ldw	r18,4(r17)
10100828:	8c400204 	addi	r17,r17,8
1010082c:	003fe906 	br	101007d4 <__sfvwrite_r+0x78>
10100830:	800b883a 	mov	r5,r16
10100834:	a809883a 	mov	r4,r21
10100838:	01020980 	call	10102098 <__swsetup_r>
1010083c:	1000f81e 	bne	r2,zero,10100c20 <__sfvwrite_r+0x4c4>
10100840:	81c0030b 	ldhu	r7,12(r16)
10100844:	b4400017 	ldw	r17,0(r22)
10100848:	3880008c 	andi	r2,r7,2
1010084c:	103fdb1e 	bne	r2,zero,101007bc <__sfvwrite_r+0x60>
10100850:	3880004c 	andi	r2,r7,1
10100854:	84800217 	ldw	r18,8(r16)
10100858:	82000017 	ldw	r8,0(r16)
1010085c:	10008b1e 	bne	r2,zero,10100a8c <__sfvwrite_r+0x330>
10100860:	00a00034 	movhi	r2,32768
10100864:	10bfff84 	addi	r2,r2,-2
10100868:	00e00034 	movhi	r3,32768
1010086c:	d8800015 	stw	r2,0(sp)
10100870:	18bfffc4 	addi	r2,r3,-1
10100874:	0039883a 	mov	fp,zero
10100878:	0027883a 	mov	r19,zero
1010087c:	d8800115 	stw	r2,4(sp)
10100880:	98004126 	beq	r19,zero,10100988 <__sfvwrite_r+0x22c>
10100884:	3880800c 	andi	r2,r7,512
10100888:	10009326 	beq	r2,zero,10100ad8 <__sfvwrite_r+0x37c>
1010088c:	902f883a 	mov	r23,r18
10100890:	9c80ba36 	bltu	r19,r18,10100b7c <__sfvwrite_r+0x420>
10100894:	3881200c 	andi	r2,r7,1152
10100898:	10002626 	beq	r2,zero,10100934 <__sfvwrite_r+0x1d8>
1010089c:	81800517 	ldw	r6,20(r16)
101008a0:	81400417 	ldw	r5,16(r16)
101008a4:	98800044 	addi	r2,r19,1
101008a8:	3189883a 	add	r4,r6,r6
101008ac:	2189883a 	add	r4,r4,r6
101008b0:	2028d7fa 	srli	r20,r4,31
101008b4:	4165c83a 	sub	r18,r8,r5
101008b8:	1485883a 	add	r2,r2,r18
101008bc:	a109883a 	add	r4,r20,r4
101008c0:	2029d07a 	srai	r20,r4,1
101008c4:	a00d883a 	mov	r6,r20
101008c8:	a080022e 	bgeu	r20,r2,101008d4 <__sfvwrite_r+0x178>
101008cc:	1029883a 	mov	r20,r2
101008d0:	100d883a 	mov	r6,r2
101008d4:	39c1000c 	andi	r7,r7,1024
101008d8:	3800c126 	beq	r7,zero,10100be0 <__sfvwrite_r+0x484>
101008dc:	a809883a 	mov	r4,r21
101008e0:	300b883a 	mov	r5,r6
101008e4:	0100d680 	call	10100d68 <_malloc_r>
101008e8:	1009883a 	mov	r4,r2
101008ec:	1000c826 	beq	r2,zero,10100c10 <__sfvwrite_r+0x4b4>
101008f0:	81400417 	ldw	r5,16(r16)
101008f4:	900d883a 	mov	r6,r18
101008f8:	010161c0 	call	1010161c <memcpy>
101008fc:	1009883a 	mov	r4,r2
10100900:	8080030b 	ldhu	r2,12(r16)
10100904:	00fedfc4 	movi	r3,-1153
10100908:	10c4703a 	and	r2,r2,r3
1010090c:	10802014 	ori	r2,r2,128
10100910:	8080030d 	sth	r2,12(r16)
10100914:	2491883a 	add	r8,r4,r18
10100918:	a485c83a 	sub	r2,r20,r18
1010091c:	81000415 	stw	r4,16(r16)
10100920:	82000015 	stw	r8,0(r16)
10100924:	85000515 	stw	r20,20(r16)
10100928:	9825883a 	mov	r18,r19
1010092c:	80800215 	stw	r2,8(r16)
10100930:	982f883a 	mov	r23,r19
10100934:	4009883a 	mov	r4,r8
10100938:	b80d883a 	mov	r6,r23
1010093c:	e00b883a 	mov	r5,fp
10100940:	010171c0 	call	1010171c <memmove>
10100944:	81000217 	ldw	r4,8(r16)
10100948:	80800017 	ldw	r2,0(r16)
1010094c:	9829883a 	mov	r20,r19
10100950:	24a5c83a 	sub	r18,r4,r18
10100954:	15c5883a 	add	r2,r2,r23
10100958:	84800215 	stw	r18,8(r16)
1010095c:	80800015 	stw	r2,0(r16)
10100960:	0027883a 	mov	r19,zero
10100964:	b0800217 	ldw	r2,8(r22)
10100968:	e539883a 	add	fp,fp,r20
1010096c:	1529c83a 	sub	r20,r2,r20
10100970:	b5000215 	stw	r20,8(r22)
10100974:	a0000826 	beq	r20,zero,10100998 <__sfvwrite_r+0x23c>
10100978:	81c0030b 	ldhu	r7,12(r16)
1010097c:	84800217 	ldw	r18,8(r16)
10100980:	82000017 	ldw	r8,0(r16)
10100984:	983fbf1e 	bne	r19,zero,10100884 <__sfvwrite_r+0x128>
10100988:	8f000017 	ldw	fp,0(r17)
1010098c:	8cc00117 	ldw	r19,4(r17)
10100990:	8c400204 	addi	r17,r17,8
10100994:	003fba06 	br	10100880 <__sfvwrite_r+0x124>
10100998:	0005883a 	mov	r2,zero
1010099c:	dfc00b17 	ldw	ra,44(sp)
101009a0:	df000a17 	ldw	fp,40(sp)
101009a4:	ddc00917 	ldw	r23,36(sp)
101009a8:	dd800817 	ldw	r22,32(sp)
101009ac:	dd400717 	ldw	r21,28(sp)
101009b0:	dd000617 	ldw	r20,24(sp)
101009b4:	dcc00517 	ldw	r19,20(sp)
101009b8:	dc800417 	ldw	r18,16(sp)
101009bc:	dc400317 	ldw	r17,12(sp)
101009c0:	dc000217 	ldw	r16,8(sp)
101009c4:	dec00c04 	addi	sp,sp,48
101009c8:	f800283a 	ret
101009cc:	e1c07316 	blt	fp,r7,10100b9c <__sfvwrite_r+0x440>
101009d0:	80800917 	ldw	r2,36(r16)
101009d4:	81400717 	ldw	r5,28(r16)
101009d8:	b80d883a 	mov	r6,r23
101009dc:	a809883a 	mov	r4,r21
101009e0:	103ee83a 	callr	r2
101009e4:	1025883a 	mov	r18,r2
101009e8:	0080210e 	bge	zero,r2,10100a70 <__sfvwrite_r+0x314>
101009ec:	a4a9c83a 	sub	r20,r20,r18
101009f0:	a0006526 	beq	r20,zero,10100b88 <__sfvwrite_r+0x42c>
101009f4:	00800044 	movi	r2,1
101009f8:	b1800217 	ldw	r6,8(r22)
101009fc:	bcaf883a 	add	r23,r23,r18
10100a00:	9ca7c83a 	sub	r19,r19,r18
10100a04:	34a5c83a 	sub	r18,r6,r18
10100a08:	b4800215 	stw	r18,8(r22)
10100a0c:	903fe226 	beq	r18,zero,10100998 <__sfvwrite_r+0x23c>
10100a10:	84800217 	ldw	r18,8(r16)
10100a14:	82000017 	ldw	r8,0(r16)
10100a18:	98002126 	beq	r19,zero,10100aa0 <__sfvwrite_r+0x344>
10100a1c:	10002426 	beq	r2,zero,10100ab0 <__sfvwrite_r+0x354>
10100a20:	a005883a 	mov	r2,r20
10100a24:	9839883a 	mov	fp,r19
10100a28:	14c0012e 	bgeu	r2,r19,10100a30 <__sfvwrite_r+0x2d4>
10100a2c:	1039883a 	mov	fp,r2
10100a30:	80800417 	ldw	r2,16(r16)
10100a34:	81c00517 	ldw	r7,20(r16)
10100a38:	123fe42e 	bgeu	r2,r8,101009cc <__sfvwrite_r+0x270>
10100a3c:	3ca5883a 	add	r18,r7,r18
10100a40:	973fe20e 	bge	r18,fp,101009cc <__sfvwrite_r+0x270>
10100a44:	b80b883a 	mov	r5,r23
10100a48:	4009883a 	mov	r4,r8
10100a4c:	900d883a 	mov	r6,r18
10100a50:	010171c0 	call	1010171c <memmove>
10100a54:	80800017 	ldw	r2,0(r16)
10100a58:	800b883a 	mov	r5,r16
10100a5c:	a809883a 	mov	r4,r21
10100a60:	1485883a 	add	r2,r2,r18
10100a64:	80800015 	stw	r2,0(r16)
10100a68:	010257c0 	call	1010257c <_fflush_r>
10100a6c:	103fdf26 	beq	r2,zero,101009ec <__sfvwrite_r+0x290>
10100a70:	8080030b 	ldhu	r2,12(r16)
10100a74:	10801014 	ori	r2,r2,64
10100a78:	8080030d 	sth	r2,12(r16)
10100a7c:	00bfffc4 	movi	r2,-1
10100a80:	003fc606 	br	1010099c <__sfvwrite_r+0x240>
10100a84:	0005883a 	mov	r2,zero
10100a88:	f800283a 	ret
10100a8c:	0027883a 	mov	r19,zero
10100a90:	0029883a 	mov	r20,zero
10100a94:	0005883a 	mov	r2,zero
10100a98:	002f883a 	mov	r23,zero
10100a9c:	983fdf1e 	bne	r19,zero,10100a1c <__sfvwrite_r+0x2c0>
10100aa0:	8cc00117 	ldw	r19,4(r17)
10100aa4:	8dc00017 	ldw	r23,0(r17)
10100aa8:	8c400204 	addi	r17,r17,8
10100aac:	983ffc26 	beq	r19,zero,10100aa0 <__sfvwrite_r+0x344>
10100ab0:	980d883a 	mov	r6,r19
10100ab4:	01400284 	movi	r5,10
10100ab8:	b809883a 	mov	r4,r23
10100abc:	da000015 	stw	r8,0(sp)
10100ac0:	01015480 	call	10101548 <memchr>
10100ac4:	da000017 	ldw	r8,0(sp)
10100ac8:	10004226 	beq	r2,zero,10100bd4 <__sfvwrite_r+0x478>
10100acc:	10800044 	addi	r2,r2,1
10100ad0:	15e9c83a 	sub	r20,r2,r23
10100ad4:	003fd206 	br	10100a20 <__sfvwrite_r+0x2c4>
10100ad8:	80800417 	ldw	r2,16(r16)
10100adc:	12001436 	bltu	r2,r8,10100b30 <__sfvwrite_r+0x3d4>
10100ae0:	85000517 	ldw	r20,20(r16)
10100ae4:	9d001236 	bltu	r19,r20,10100b30 <__sfvwrite_r+0x3d4>
10100ae8:	d8800017 	ldw	r2,0(sp)
10100aec:	14c0372e 	bgeu	r2,r19,10100bcc <__sfvwrite_r+0x470>
10100af0:	d9000117 	ldw	r4,4(sp)
10100af4:	a00b883a 	mov	r5,r20
10100af8:	0102d740 	call	10102d74 <__divsi3>
10100afc:	a00b883a 	mov	r5,r20
10100b00:	1009883a 	mov	r4,r2
10100b04:	0102f280 	call	10102f28 <__mulsi3>
10100b08:	82000917 	ldw	r8,36(r16)
10100b0c:	81400717 	ldw	r5,28(r16)
10100b10:	100f883a 	mov	r7,r2
10100b14:	e00d883a 	mov	r6,fp
10100b18:	a809883a 	mov	r4,r21
10100b1c:	403ee83a 	callr	r8
10100b20:	1029883a 	mov	r20,r2
10100b24:	00bfd20e 	bge	zero,r2,10100a70 <__sfvwrite_r+0x314>
10100b28:	9d27c83a 	sub	r19,r19,r20
10100b2c:	003f8d06 	br	10100964 <__sfvwrite_r+0x208>
10100b30:	9029883a 	mov	r20,r18
10100b34:	9c80012e 	bgeu	r19,r18,10100b3c <__sfvwrite_r+0x3e0>
10100b38:	9829883a 	mov	r20,r19
10100b3c:	4009883a 	mov	r4,r8
10100b40:	a00d883a 	mov	r6,r20
10100b44:	e00b883a 	mov	r5,fp
10100b48:	010171c0 	call	1010171c <memmove>
10100b4c:	80800217 	ldw	r2,8(r16)
10100b50:	81000017 	ldw	r4,0(r16)
10100b54:	1505c83a 	sub	r2,r2,r20
10100b58:	2509883a 	add	r4,r4,r20
10100b5c:	80800215 	stw	r2,8(r16)
10100b60:	81000015 	stw	r4,0(r16)
10100b64:	103ff01e 	bne	r2,zero,10100b28 <__sfvwrite_r+0x3cc>
10100b68:	800b883a 	mov	r5,r16
10100b6c:	a809883a 	mov	r4,r21
10100b70:	010257c0 	call	1010257c <_fflush_r>
10100b74:	103fec26 	beq	r2,zero,10100b28 <__sfvwrite_r+0x3cc>
10100b78:	003fbd06 	br	10100a70 <__sfvwrite_r+0x314>
10100b7c:	9825883a 	mov	r18,r19
10100b80:	982f883a 	mov	r23,r19
10100b84:	003f6b06 	br	10100934 <__sfvwrite_r+0x1d8>
10100b88:	800b883a 	mov	r5,r16
10100b8c:	a809883a 	mov	r4,r21
10100b90:	010257c0 	call	1010257c <_fflush_r>
10100b94:	103f9826 	beq	r2,zero,101009f8 <__sfvwrite_r+0x29c>
10100b98:	003fb506 	br	10100a70 <__sfvwrite_r+0x314>
10100b9c:	e00d883a 	mov	r6,fp
10100ba0:	b80b883a 	mov	r5,r23
10100ba4:	4009883a 	mov	r4,r8
10100ba8:	010171c0 	call	1010171c <memmove>
10100bac:	80800217 	ldw	r2,8(r16)
10100bb0:	81800017 	ldw	r6,0(r16)
10100bb4:	e025883a 	mov	r18,fp
10100bb8:	1705c83a 	sub	r2,r2,fp
10100bbc:	370d883a 	add	r6,r6,fp
10100bc0:	80800215 	stw	r2,8(r16)
10100bc4:	81800015 	stw	r6,0(r16)
10100bc8:	003f8806 	br	101009ec <__sfvwrite_r+0x290>
10100bcc:	9809883a 	mov	r4,r19
10100bd0:	003fc806 	br	10100af4 <__sfvwrite_r+0x398>
10100bd4:	98800044 	addi	r2,r19,1
10100bd8:	1029883a 	mov	r20,r2
10100bdc:	003f9106 	br	10100a24 <__sfvwrite_r+0x2c8>
10100be0:	a809883a 	mov	r4,r21
10100be4:	01019380 	call	10101938 <_realloc_r>
10100be8:	1009883a 	mov	r4,r2
10100bec:	103f491e 	bne	r2,zero,10100914 <__sfvwrite_r+0x1b8>
10100bf0:	81400417 	ldw	r5,16(r16)
10100bf4:	a809883a 	mov	r4,r21
10100bf8:	01027200 	call	10102720 <_free_r>
10100bfc:	8080030b 	ldhu	r2,12(r16)
10100c00:	00c00304 	movi	r3,12
10100c04:	a8c00015 	stw	r3,0(r21)
10100c08:	10bfdfcc 	andi	r2,r2,65407
10100c0c:	003f9906 	br	10100a74 <__sfvwrite_r+0x318>
10100c10:	00c00304 	movi	r3,12
10100c14:	8080030b 	ldhu	r2,12(r16)
10100c18:	a8c00015 	stw	r3,0(r21)
10100c1c:	003f9506 	br	10100a74 <__sfvwrite_r+0x318>
10100c20:	00bfffc4 	movi	r2,-1
10100c24:	003f5d06 	br	1010099c <__sfvwrite_r+0x240>

10100c28 <_fwalk>:
10100c28:	defffa04 	addi	sp,sp,-24
10100c2c:	dd000415 	stw	r20,16(sp)
10100c30:	dcc00315 	stw	r19,12(sp)
10100c34:	dc800215 	stw	r18,8(sp)
10100c38:	dfc00515 	stw	ra,20(sp)
10100c3c:	dc400115 	stw	r17,4(sp)
10100c40:	dc000015 	stw	r16,0(sp)
10100c44:	2827883a 	mov	r19,r5
10100c48:	2480b804 	addi	r18,r4,736
10100c4c:	0029883a 	mov	r20,zero
10100c50:	94400117 	ldw	r17,4(r18)
10100c54:	94000217 	ldw	r16,8(r18)
10100c58:	8c7fffc4 	addi	r17,r17,-1
10100c5c:	88000d16 	blt	r17,zero,10100c94 <_fwalk+0x6c>
10100c60:	8080030b 	ldhu	r2,12(r16)
10100c64:	8c7fffc4 	addi	r17,r17,-1
10100c68:	108000b0 	cmpltui	r2,r2,2
10100c6c:	1000061e 	bne	r2,zero,10100c88 <_fwalk+0x60>
10100c70:	8080038f 	ldh	r2,14(r16)
10100c74:	8009883a 	mov	r4,r16
10100c78:	10bfffe0 	cmpeqi	r2,r2,-1
10100c7c:	1000021e 	bne	r2,zero,10100c88 <_fwalk+0x60>
10100c80:	983ee83a 	callr	r19
10100c84:	a0a8b03a 	or	r20,r20,r2
10100c88:	88bfffd8 	cmpnei	r2,r17,-1
10100c8c:	84001a04 	addi	r16,r16,104
10100c90:	103ff31e 	bne	r2,zero,10100c60 <_fwalk+0x38>
10100c94:	94800017 	ldw	r18,0(r18)
10100c98:	903fed1e 	bne	r18,zero,10100c50 <_fwalk+0x28>
10100c9c:	a005883a 	mov	r2,r20
10100ca0:	dfc00517 	ldw	ra,20(sp)
10100ca4:	dd000417 	ldw	r20,16(sp)
10100ca8:	dcc00317 	ldw	r19,12(sp)
10100cac:	dc800217 	ldw	r18,8(sp)
10100cb0:	dc400117 	ldw	r17,4(sp)
10100cb4:	dc000017 	ldw	r16,0(sp)
10100cb8:	dec00604 	addi	sp,sp,24
10100cbc:	f800283a 	ret

10100cc0 <_fwalk_reent>:
10100cc0:	defff904 	addi	sp,sp,-28
10100cc4:	dd400515 	stw	r21,20(sp)
10100cc8:	dd000415 	stw	r20,16(sp)
10100ccc:	dcc00315 	stw	r19,12(sp)
10100cd0:	dc800215 	stw	r18,8(sp)
10100cd4:	dfc00615 	stw	ra,24(sp)
10100cd8:	dc400115 	stw	r17,4(sp)
10100cdc:	dc000015 	stw	r16,0(sp)
10100ce0:	202b883a 	mov	r21,r4
10100ce4:	2827883a 	mov	r19,r5
10100ce8:	2480b804 	addi	r18,r4,736
10100cec:	0029883a 	mov	r20,zero
10100cf0:	94400117 	ldw	r17,4(r18)
10100cf4:	94000217 	ldw	r16,8(r18)
10100cf8:	8c7fffc4 	addi	r17,r17,-1
10100cfc:	88000e16 	blt	r17,zero,10100d38 <_fwalk_reent+0x78>
10100d00:	8080030b 	ldhu	r2,12(r16)
10100d04:	8c7fffc4 	addi	r17,r17,-1
10100d08:	108000b0 	cmpltui	r2,r2,2
10100d0c:	1000071e 	bne	r2,zero,10100d2c <_fwalk_reent+0x6c>
10100d10:	8080038f 	ldh	r2,14(r16)
10100d14:	800b883a 	mov	r5,r16
10100d18:	a809883a 	mov	r4,r21
10100d1c:	10bfffe0 	cmpeqi	r2,r2,-1
10100d20:	1000021e 	bne	r2,zero,10100d2c <_fwalk_reent+0x6c>
10100d24:	983ee83a 	callr	r19
10100d28:	a0a8b03a 	or	r20,r20,r2
10100d2c:	88bfffd8 	cmpnei	r2,r17,-1
10100d30:	84001a04 	addi	r16,r16,104
10100d34:	103ff21e 	bne	r2,zero,10100d00 <_fwalk_reent+0x40>
10100d38:	94800017 	ldw	r18,0(r18)
10100d3c:	903fec1e 	bne	r18,zero,10100cf0 <_fwalk_reent+0x30>
10100d40:	a005883a 	mov	r2,r20
10100d44:	dfc00617 	ldw	ra,24(sp)
10100d48:	dd400517 	ldw	r21,20(sp)
10100d4c:	dd000417 	ldw	r20,16(sp)
10100d50:	dcc00317 	ldw	r19,12(sp)
10100d54:	dc800217 	ldw	r18,8(sp)
10100d58:	dc400117 	ldw	r17,4(sp)
10100d5c:	dc000017 	ldw	r16,0(sp)
10100d60:	dec00704 	addi	sp,sp,28
10100d64:	f800283a 	ret

10100d68 <_malloc_r>:
10100d68:	defff604 	addi	sp,sp,-40
10100d6c:	dc400115 	stw	r17,4(sp)
10100d70:	2c4002c4 	addi	r17,r5,11
10100d74:	dc800215 	stw	r18,8(sp)
10100d78:	dfc00915 	stw	ra,36(sp)
10100d7c:	df000815 	stw	fp,32(sp)
10100d80:	ddc00715 	stw	r23,28(sp)
10100d84:	dd800615 	stw	r22,24(sp)
10100d88:	dd400515 	stw	r21,20(sp)
10100d8c:	dd000415 	stw	r20,16(sp)
10100d90:	dcc00315 	stw	r19,12(sp)
10100d94:	dc000015 	stw	r16,0(sp)
10100d98:	888005e8 	cmpgeui	r2,r17,23
10100d9c:	2025883a 	mov	r18,r4
10100da0:	10001b1e 	bne	r2,zero,10100e10 <_malloc_r+0xa8>
10100da4:	29400468 	cmpgeui	r5,r5,17
10100da8:	2800821e 	bne	r5,zero,10100fb4 <_malloc_r+0x24c>
10100dac:	01034fc0 	call	101034fc <__malloc_lock>
10100db0:	04400404 	movi	r17,16
10100db4:	01c00084 	movi	r7,2
10100db8:	00800604 	movi	r2,24
10100dbc:	04c40434 	movhi	r19,4112
10100dc0:	9cd65b04 	addi	r19,r19,22892
10100dc4:	9885883a 	add	r2,r19,r2
10100dc8:	14000117 	ldw	r16,4(r2)
10100dcc:	10fffe04 	addi	r3,r2,-8
10100dd0:	80c08b26 	beq	r16,r3,10101000 <_malloc_r+0x298>
10100dd4:	80800117 	ldw	r2,4(r16)
10100dd8:	81000317 	ldw	r4,12(r16)
10100ddc:	00ffff04 	movi	r3,-4
10100de0:	10c4703a 	and	r2,r2,r3
10100de4:	81400217 	ldw	r5,8(r16)
10100de8:	8085883a 	add	r2,r16,r2
10100dec:	10c00117 	ldw	r3,4(r2)
10100df0:	29000315 	stw	r4,12(r5)
10100df4:	21400215 	stw	r5,8(r4)
10100df8:	18c00054 	ori	r3,r3,1
10100dfc:	10c00115 	stw	r3,4(r2)
10100e00:	9009883a 	mov	r4,r18
10100e04:	01035200 	call	10103520 <__malloc_unlock>
10100e08:	80800204 	addi	r2,r16,8
10100e0c:	00006c06 	br	10100fc0 <_malloc_r+0x258>
10100e10:	00bffe04 	movi	r2,-8
10100e14:	88a2703a 	and	r17,r17,r2
10100e18:	88006616 	blt	r17,zero,10100fb4 <_malloc_r+0x24c>
10100e1c:	89406536 	bltu	r17,r5,10100fb4 <_malloc_r+0x24c>
10100e20:	01034fc0 	call	101034fc <__malloc_lock>
10100e24:	88807e28 	cmpgeui	r2,r17,504
10100e28:	10012226 	beq	r2,zero,101012b4 <_malloc_r+0x54c>
10100e2c:	8804d27a 	srli	r2,r17,9
10100e30:	10006f26 	beq	r2,zero,10100ff0 <_malloc_r+0x288>
10100e34:	10c00168 	cmpgeui	r3,r2,5
10100e38:	1800fe1e 	bne	r3,zero,10101234 <_malloc_r+0x4cc>
10100e3c:	8804d1ba 	srli	r2,r17,6
10100e40:	11c00e44 	addi	r7,r2,57
10100e44:	380890fa 	slli	r4,r7,3
10100e48:	12000e04 	addi	r8,r2,56
10100e4c:	04c40434 	movhi	r19,4112
10100e50:	9cd65b04 	addi	r19,r19,22892
10100e54:	9909883a 	add	r4,r19,r4
10100e58:	24000117 	ldw	r16,4(r4)
10100e5c:	213ffe04 	addi	r4,r4,-8
10100e60:	24000b26 	beq	r4,r16,10100e90 <_malloc_r+0x128>
10100e64:	01bfff04 	movi	r6,-4
10100e68:	00000306 	br	10100e78 <_malloc_r+0x110>
10100e6c:	1800d60e 	bge	r3,zero,101011c8 <_malloc_r+0x460>
10100e70:	84000317 	ldw	r16,12(r16)
10100e74:	24000626 	beq	r4,r16,10100e90 <_malloc_r+0x128>
10100e78:	80800117 	ldw	r2,4(r16)
10100e7c:	1184703a 	and	r2,r2,r6
10100e80:	1447c83a 	sub	r3,r2,r17
10100e84:	19400408 	cmpgei	r5,r3,16
10100e88:	283ff826 	beq	r5,zero,10100e6c <_malloc_r+0x104>
10100e8c:	400f883a 	mov	r7,r8
10100e90:	9c000417 	ldw	r16,16(r19)
10100e94:	02440434 	movhi	r9,4112
10100e98:	4a565d04 	addi	r9,r9,22900
10100e9c:	82405f26 	beq	r16,r9,1010101c <_malloc_r+0x2b4>
10100ea0:	80c00117 	ldw	r3,4(r16)
10100ea4:	00bfff04 	movi	r2,-4
10100ea8:	1884703a 	and	r2,r3,r2
10100eac:	1447c83a 	sub	r3,r2,r17
10100eb0:	19000410 	cmplti	r4,r3,16
10100eb4:	20010a26 	beq	r4,zero,101012e0 <_malloc_r+0x578>
10100eb8:	9a400515 	stw	r9,20(r19)
10100ebc:	9a400415 	stw	r9,16(r19)
10100ec0:	1800ff0e 	bge	r3,zero,101012c0 <_malloc_r+0x558>
10100ec4:	10c08028 	cmpgeui	r3,r2,512
10100ec8:	1800c11e 	bne	r3,zero,101011d0 <_malloc_r+0x468>
10100ecc:	1006d0fa 	srli	r3,r2,3
10100ed0:	1008d17a 	srli	r4,r2,5
10100ed4:	00800044 	movi	r2,1
10100ed8:	18c00044 	addi	r3,r3,1
10100edc:	180690fa 	slli	r3,r3,3
10100ee0:	99400117 	ldw	r5,4(r19)
10100ee4:	1104983a 	sll	r2,r2,r4
10100ee8:	98c7883a 	add	r3,r19,r3
10100eec:	19000017 	ldw	r4,0(r3)
10100ef0:	1144b03a 	or	r2,r2,r5
10100ef4:	197ffe04 	addi	r5,r3,-8
10100ef8:	81400315 	stw	r5,12(r16)
10100efc:	81000215 	stw	r4,8(r16)
10100f00:	98800115 	stw	r2,4(r19)
10100f04:	1c000015 	stw	r16,0(r3)
10100f08:	24000315 	stw	r16,12(r4)
10100f0c:	3807d0ba 	srai	r3,r7,2
10100f10:	01000044 	movi	r4,1
10100f14:	20c8983a 	sll	r4,r4,r3
10100f18:	11004536 	bltu	r2,r4,10101030 <_malloc_r+0x2c8>
10100f1c:	2086703a 	and	r3,r4,r2
10100f20:	18000a1e 	bne	r3,zero,10100f4c <_malloc_r+0x1e4>
10100f24:	00ffff04 	movi	r3,-4
10100f28:	2109883a 	add	r4,r4,r4
10100f2c:	38ce703a 	and	r7,r7,r3
10100f30:	2086703a 	and	r3,r4,r2
10100f34:	39c00104 	addi	r7,r7,4
10100f38:	1800041e 	bne	r3,zero,10100f4c <_malloc_r+0x1e4>
10100f3c:	2109883a 	add	r4,r4,r4
10100f40:	2086703a 	and	r3,r4,r2
10100f44:	39c00104 	addi	r7,r7,4
10100f48:	183ffc26 	beq	r3,zero,10100f3c <_malloc_r+0x1d4>
10100f4c:	02bfff04 	movi	r10,-4
10100f50:	381690fa 	slli	r11,r7,3
10100f54:	3819883a 	mov	r12,r7
10100f58:	9ad7883a 	add	r11,r19,r11
10100f5c:	5811883a 	mov	r8,r11
10100f60:	40800317 	ldw	r2,12(r8)
10100f64:	4080bc26 	beq	r8,r2,10101258 <_malloc_r+0x4f0>
10100f68:	10c00117 	ldw	r3,4(r2)
10100f6c:	1021883a 	mov	r16,r2
10100f70:	10800317 	ldw	r2,12(r2)
10100f74:	1a86703a 	and	r3,r3,r10
10100f78:	1c4bc83a 	sub	r5,r3,r17
10100f7c:	29800410 	cmplti	r6,r5,16
10100f80:	3000ba26 	beq	r6,zero,1010126c <_malloc_r+0x504>
10100f84:	283ff716 	blt	r5,zero,10100f64 <_malloc_r+0x1fc>
10100f88:	80c7883a 	add	r3,r16,r3
10100f8c:	19400117 	ldw	r5,4(r3)
10100f90:	81800217 	ldw	r6,8(r16)
10100f94:	9009883a 	mov	r4,r18
10100f98:	29400054 	ori	r5,r5,1
10100f9c:	19400115 	stw	r5,4(r3)
10100fa0:	30800315 	stw	r2,12(r6)
10100fa4:	11800215 	stw	r6,8(r2)
10100fa8:	01035200 	call	10103520 <__malloc_unlock>
10100fac:	80800204 	addi	r2,r16,8
10100fb0:	00000306 	br	10100fc0 <_malloc_r+0x258>
10100fb4:	00800304 	movi	r2,12
10100fb8:	90800015 	stw	r2,0(r18)
10100fbc:	0005883a 	mov	r2,zero
10100fc0:	dfc00917 	ldw	ra,36(sp)
10100fc4:	df000817 	ldw	fp,32(sp)
10100fc8:	ddc00717 	ldw	r23,28(sp)
10100fcc:	dd800617 	ldw	r22,24(sp)
10100fd0:	dd400517 	ldw	r21,20(sp)
10100fd4:	dd000417 	ldw	r20,16(sp)
10100fd8:	dcc00317 	ldw	r19,12(sp)
10100fdc:	dc800217 	ldw	r18,8(sp)
10100fe0:	dc400117 	ldw	r17,4(sp)
10100fe4:	dc000017 	ldw	r16,0(sp)
10100fe8:	dec00a04 	addi	sp,sp,40
10100fec:	f800283a 	ret
10100ff0:	01008004 	movi	r4,512
10100ff4:	01c01004 	movi	r7,64
10100ff8:	02000fc4 	movi	r8,63
10100ffc:	003f9306 	br	10100e4c <_malloc_r+0xe4>
10101000:	14000317 	ldw	r16,12(r2)
10101004:	39c00084 	addi	r7,r7,2
10101008:	143f721e 	bne	r2,r16,10100dd4 <_malloc_r+0x6c>
1010100c:	9c000417 	ldw	r16,16(r19)
10101010:	02440434 	movhi	r9,4112
10101014:	4a565d04 	addi	r9,r9,22900
10101018:	827fa11e 	bne	r16,r9,10100ea0 <_malloc_r+0x138>
1010101c:	3807d0ba 	srai	r3,r7,2
10101020:	01000044 	movi	r4,1
10101024:	98800117 	ldw	r2,4(r19)
10101028:	20c8983a 	sll	r4,r4,r3
1010102c:	113fbb2e 	bgeu	r2,r4,10100f1c <_malloc_r+0x1b4>
10101030:	9c000217 	ldw	r16,8(r19)
10101034:	00bfff04 	movi	r2,-4
10101038:	85400117 	ldw	r21,4(r16)
1010103c:	a8ac703a 	and	r22,r21,r2
10101040:	b4400336 	bltu	r22,r17,10101050 <_malloc_r+0x2e8>
10101044:	b445c83a 	sub	r2,r22,r17
10101048:	10c00408 	cmpgei	r3,r2,16
1010104c:	1800541e 	bne	r3,zero,101011a0 <_malloc_r+0x438>
10101050:	00840434 	movhi	r2,4112
10101054:	109be117 	ldw	r2,28548(r2)
10101058:	00c40474 	movhi	r3,4113
1010105c:	1d628a17 	ldw	r21,-30168(r3)
10101060:	10bfffd8 	cmpnei	r2,r2,-1
10101064:	85b9883a 	add	fp,r16,r22
10101068:	8d6b883a 	add	r21,r17,r21
1010106c:	1000d626 	beq	r2,zero,101013c8 <_malloc_r+0x660>
10101070:	ad4403c4 	addi	r21,r21,4111
10101074:	00bc0004 	movi	r2,-4096
10101078:	a8aa703a 	and	r21,r21,r2
1010107c:	a80b883a 	mov	r5,r21
10101080:	9009883a 	mov	r4,r18
10101084:	0101e9c0 	call	10101e9c <_sbrk_r>
10101088:	102f883a 	mov	r23,r2
1010108c:	10bfffd8 	cmpnei	r2,r2,-1
10101090:	1000a826 	beq	r2,zero,10101334 <_malloc_r+0x5cc>
10101094:	bf00a636 	bltu	r23,fp,10101330 <_malloc_r+0x5c8>
10101098:	00840474 	movhi	r2,4113
1010109c:	15229317 	ldw	r20,-30132(r2)
101010a0:	ad29883a 	add	r20,r21,r20
101010a4:	15229315 	stw	r20,-30132(r2)
101010a8:	a007883a 	mov	r3,r20
101010ac:	e5c0ec26 	beq	fp,r23,10101460 <_malloc_r+0x6f8>
101010b0:	00840434 	movhi	r2,4112
101010b4:	109be117 	ldw	r2,28548(r2)
101010b8:	10bfffd8 	cmpnei	r2,r2,-1
101010bc:	1000ef26 	beq	r2,zero,1010147c <_malloc_r+0x714>
101010c0:	bf39c83a 	sub	fp,r23,fp
101010c4:	e0c7883a 	add	r3,fp,r3
101010c8:	00840474 	movhi	r2,4113
101010cc:	10e29315 	stw	r3,-30132(r2)
101010d0:	bf0001cc 	andi	fp,r23,7
101010d4:	e000c526 	beq	fp,zero,101013ec <_malloc_r+0x684>
101010d8:	bf2fc83a 	sub	r23,r23,fp
101010dc:	bdc00204 	addi	r23,r23,8
101010e0:	05040204 	movi	r20,4104
101010e4:	a729c83a 	sub	r20,r20,fp
101010e8:	bd6b883a 	add	r21,r23,r21
101010ec:	a569c83a 	sub	r20,r20,r21
101010f0:	a503ffcc 	andi	r20,r20,4095
101010f4:	a00b883a 	mov	r5,r20
101010f8:	9009883a 	mov	r4,r18
101010fc:	0101e9c0 	call	10101e9c <_sbrk_r>
10101100:	10ffffe0 	cmpeqi	r3,r2,-1
10101104:	1800f31e 	bne	r3,zero,101014d4 <_malloc_r+0x76c>
10101108:	15c5c83a 	sub	r2,r2,r23
1010110c:	152b883a 	add	r21,r2,r20
10101110:	00840474 	movhi	r2,4113
10101114:	11629317 	ldw	r5,-30132(r2)
10101118:	9dc00215 	stw	r23,8(r19)
1010111c:	ad400054 	ori	r21,r21,1
10101120:	a169883a 	add	r20,r20,r5
10101124:	15229315 	stw	r20,-30132(r2)
10101128:	bd400115 	stw	r21,4(r23)
1010112c:	84c0d626 	beq	r16,r19,10101488 <_malloc_r+0x720>
10101130:	b0800428 	cmpgeui	r2,r22,16
10101134:	1000d626 	beq	r2,zero,10101490 <_malloc_r+0x728>
10101138:	80c00117 	ldw	r3,4(r16)
1010113c:	013ffe04 	movi	r4,-8
10101140:	b0bffd04 	addi	r2,r22,-12
10101144:	1104703a 	and	r2,r2,r4
10101148:	18c0004c 	andi	r3,r3,1
1010114c:	1886b03a 	or	r3,r3,r2
10101150:	80c00115 	stw	r3,4(r16)
10101154:	01000144 	movi	r4,5
10101158:	8087883a 	add	r3,r16,r2
1010115c:	19000115 	stw	r4,4(r3)
10101160:	19000215 	stw	r4,8(r3)
10101164:	10800428 	cmpgeui	r2,r2,16
10101168:	1000df1e 	bne	r2,zero,101014e8 <_malloc_r+0x780>
1010116c:	bd400117 	ldw	r21,4(r23)
10101170:	b821883a 	mov	r16,r23
10101174:	00840474 	movhi	r2,4113
10101178:	10a28917 	ldw	r2,-30172(r2)
1010117c:	1500022e 	bgeu	r2,r20,10101188 <_malloc_r+0x420>
10101180:	00840474 	movhi	r2,4113
10101184:	15228915 	stw	r20,-30172(r2)
10101188:	00840474 	movhi	r2,4113
1010118c:	10a28817 	ldw	r2,-30176(r2)
10101190:	15006a2e 	bgeu	r2,r20,1010133c <_malloc_r+0x5d4>
10101194:	00840474 	movhi	r2,4113
10101198:	15228815 	stw	r20,-30176(r2)
1010119c:	00006706 	br	1010133c <_malloc_r+0x5d4>
101011a0:	88c00054 	ori	r3,r17,1
101011a4:	80c00115 	stw	r3,4(r16)
101011a8:	8463883a 	add	r17,r16,r17
101011ac:	10800054 	ori	r2,r2,1
101011b0:	9c400215 	stw	r17,8(r19)
101011b4:	88800115 	stw	r2,4(r17)
101011b8:	9009883a 	mov	r4,r18
101011bc:	01035200 	call	10103520 <__malloc_unlock>
101011c0:	80800204 	addi	r2,r16,8
101011c4:	003f7e06 	br	10100fc0 <_malloc_r+0x258>
101011c8:	81000317 	ldw	r4,12(r16)
101011cc:	003f0506 	br	10100de4 <_malloc_r+0x7c>
101011d0:	1006d27a 	srli	r3,r2,9
101011d4:	19000168 	cmpgeui	r4,r3,5
101011d8:	20005026 	beq	r4,zero,1010131c <_malloc_r+0x5b4>
101011dc:	19000568 	cmpgeui	r4,r3,21
101011e0:	20008c1e 	bne	r4,zero,10101414 <_malloc_r+0x6ac>
101011e4:	19401704 	addi	r5,r3,92
101011e8:	280a90fa 	slli	r5,r5,3
101011ec:	190016c4 	addi	r4,r3,91
101011f0:	994b883a 	add	r5,r19,r5
101011f4:	28c00017 	ldw	r3,0(r5)
101011f8:	297ffe04 	addi	r5,r5,-8
101011fc:	28c07426 	beq	r5,r3,101013d0 <_malloc_r+0x668>
10101200:	01bfff04 	movi	r6,-4
10101204:	19000117 	ldw	r4,4(r3)
10101208:	2188703a 	and	r4,r4,r6
1010120c:	1100022e 	bgeu	r2,r4,10101218 <_malloc_r+0x4b0>
10101210:	18c00217 	ldw	r3,8(r3)
10101214:	28fffb1e 	bne	r5,r3,10101204 <_malloc_r+0x49c>
10101218:	19400317 	ldw	r5,12(r3)
1010121c:	98800117 	ldw	r2,4(r19)
10101220:	81400315 	stw	r5,12(r16)
10101224:	80c00215 	stw	r3,8(r16)
10101228:	2c000215 	stw	r16,8(r5)
1010122c:	1c000315 	stw	r16,12(r3)
10101230:	003f3606 	br	10100f0c <_malloc_r+0x1a4>
10101234:	10c00568 	cmpgeui	r3,r2,21
10101238:	18004a26 	beq	r3,zero,10101364 <_malloc_r+0x5fc>
1010123c:	10c01568 	cmpgeui	r3,r2,85
10101240:	18007b1e 	bne	r3,zero,10101430 <_malloc_r+0x6c8>
10101244:	8804d33a 	srli	r2,r17,12
10101248:	11c01bc4 	addi	r7,r2,111
1010124c:	380890fa 	slli	r4,r7,3
10101250:	12001b84 	addi	r8,r2,110
10101254:	003efd06 	br	10100e4c <_malloc_r+0xe4>
10101258:	63000044 	addi	r12,r12,1
1010125c:	608000cc 	andi	r2,r12,3
10101260:	42000204 	addi	r8,r8,8
10101264:	103f3e1e 	bne	r2,zero,10100f60 <_malloc_r+0x1f8>
10101268:	00004506 	br	10101380 <_malloc_r+0x618>
1010126c:	81000217 	ldw	r4,8(r16)
10101270:	89800054 	ori	r6,r17,1
10101274:	81800115 	stw	r6,4(r16)
10101278:	20800315 	stw	r2,12(r4)
1010127c:	11000215 	stw	r4,8(r2)
10101280:	8463883a 	add	r17,r16,r17
10101284:	9c400515 	stw	r17,20(r19)
10101288:	9c400415 	stw	r17,16(r19)
1010128c:	28800054 	ori	r2,r5,1
10101290:	88800115 	stw	r2,4(r17)
10101294:	8a400315 	stw	r9,12(r17)
10101298:	8a400215 	stw	r9,8(r17)
1010129c:	80c7883a 	add	r3,r16,r3
101012a0:	19400015 	stw	r5,0(r3)
101012a4:	9009883a 	mov	r4,r18
101012a8:	01035200 	call	10103520 <__malloc_unlock>
101012ac:	80800204 	addi	r2,r16,8
101012b0:	003f4306 	br	10100fc0 <_malloc_r+0x258>
101012b4:	880ed0fa 	srli	r7,r17,3
101012b8:	88800204 	addi	r2,r17,8
101012bc:	003ebf06 	br	10100dbc <_malloc_r+0x54>
101012c0:	8085883a 	add	r2,r16,r2
101012c4:	10c00117 	ldw	r3,4(r2)
101012c8:	9009883a 	mov	r4,r18
101012cc:	18c00054 	ori	r3,r3,1
101012d0:	10c00115 	stw	r3,4(r2)
101012d4:	01035200 	call	10103520 <__malloc_unlock>
101012d8:	80800204 	addi	r2,r16,8
101012dc:	003f3806 	br	10100fc0 <_malloc_r+0x258>
101012e0:	89000054 	ori	r4,r17,1
101012e4:	81000115 	stw	r4,4(r16)
101012e8:	8463883a 	add	r17,r16,r17
101012ec:	9c400515 	stw	r17,20(r19)
101012f0:	9c400415 	stw	r17,16(r19)
101012f4:	19000054 	ori	r4,r3,1
101012f8:	89000115 	stw	r4,4(r17)
101012fc:	8085883a 	add	r2,r16,r2
10101300:	8a400315 	stw	r9,12(r17)
10101304:	8a400215 	stw	r9,8(r17)
10101308:	10c00015 	stw	r3,0(r2)
1010130c:	9009883a 	mov	r4,r18
10101310:	01035200 	call	10103520 <__malloc_unlock>
10101314:	80800204 	addi	r2,r16,8
10101318:	003f2906 	br	10100fc0 <_malloc_r+0x258>
1010131c:	1006d1ba 	srli	r3,r2,6
10101320:	19400e44 	addi	r5,r3,57
10101324:	280a90fa 	slli	r5,r5,3
10101328:	19000e04 	addi	r4,r3,56
1010132c:	003fb006 	br	101011f0 <_malloc_r+0x488>
10101330:	84c04626 	beq	r16,r19,1010144c <_malloc_r+0x6e4>
10101334:	9c000217 	ldw	r16,8(r19)
10101338:	85400117 	ldw	r21,4(r16)
1010133c:	00bfff04 	movi	r2,-4
10101340:	a8aa703a 	and	r21,r21,r2
10101344:	ac45c83a 	sub	r2,r21,r17
10101348:	ac400236 	bltu	r21,r17,10101354 <_malloc_r+0x5ec>
1010134c:	10c00408 	cmpgei	r3,r2,16
10101350:	183f931e 	bne	r3,zero,101011a0 <_malloc_r+0x438>
10101354:	9009883a 	mov	r4,r18
10101358:	01035200 	call	10103520 <__malloc_unlock>
1010135c:	0005883a 	mov	r2,zero
10101360:	003f1706 	br	10100fc0 <_malloc_r+0x258>
10101364:	11c01704 	addi	r7,r2,92
10101368:	380890fa 	slli	r4,r7,3
1010136c:	120016c4 	addi	r8,r2,91
10101370:	003eb606 	br	10100e4c <_malloc_r+0xe4>
10101374:	58800217 	ldw	r2,8(r11)
10101378:	39ffffc4 	addi	r7,r7,-1
1010137c:	12c0701e 	bne	r2,r11,10101540 <_malloc_r+0x7d8>
10101380:	388000cc 	andi	r2,r7,3
10101384:	5afffe04 	addi	r11,r11,-8
10101388:	103ffa1e 	bne	r2,zero,10101374 <_malloc_r+0x60c>
1010138c:	98c00117 	ldw	r3,4(r19)
10101390:	0104303a 	nor	r2,zero,r4
10101394:	10c4703a 	and	r2,r2,r3
10101398:	98800115 	stw	r2,4(r19)
1010139c:	2109883a 	add	r4,r4,r4
101013a0:	113f2336 	bltu	r2,r4,10101030 <_malloc_r+0x2c8>
101013a4:	203f2226 	beq	r4,zero,10101030 <_malloc_r+0x2c8>
101013a8:	2086703a 	and	r3,r4,r2
101013ac:	1800041e 	bne	r3,zero,101013c0 <_malloc_r+0x658>
101013b0:	2109883a 	add	r4,r4,r4
101013b4:	2086703a 	and	r3,r4,r2
101013b8:	63000104 	addi	r12,r12,4
101013bc:	183ffc26 	beq	r3,zero,101013b0 <_malloc_r+0x648>
101013c0:	600f883a 	mov	r7,r12
101013c4:	003ee206 	br	10100f50 <_malloc_r+0x1e8>
101013c8:	ad400404 	addi	r21,r21,16
101013cc:	003f2b06 	br	1010107c <_malloc_r+0x314>
101013d0:	2009d0ba 	srai	r4,r4,2
101013d4:	00800044 	movi	r2,1
101013d8:	99800117 	ldw	r6,4(r19)
101013dc:	1104983a 	sll	r2,r2,r4
101013e0:	1184b03a 	or	r2,r2,r6
101013e4:	98800115 	stw	r2,4(r19)
101013e8:	003f8d06 	br	10101220 <_malloc_r+0x4b8>
101013ec:	bd69883a 	add	r20,r23,r21
101013f0:	0529c83a 	sub	r20,zero,r20
101013f4:	a503ffcc 	andi	r20,r20,4095
101013f8:	a00b883a 	mov	r5,r20
101013fc:	9009883a 	mov	r4,r18
10101400:	0101e9c0 	call	10101e9c <_sbrk_r>
10101404:	10ffffe0 	cmpeqi	r3,r2,-1
10101408:	183f3f26 	beq	r3,zero,10101108 <_malloc_r+0x3a0>
1010140c:	0029883a 	mov	r20,zero
10101410:	003f3f06 	br	10101110 <_malloc_r+0x3a8>
10101414:	19001568 	cmpgeui	r4,r3,85
10101418:	2000201e 	bne	r4,zero,1010149c <_malloc_r+0x734>
1010141c:	1006d33a 	srli	r3,r2,12
10101420:	19401bc4 	addi	r5,r3,111
10101424:	280a90fa 	slli	r5,r5,3
10101428:	19001b84 	addi	r4,r3,110
1010142c:	003f7006 	br	101011f0 <_malloc_r+0x488>
10101430:	10c05568 	cmpgeui	r3,r2,341
10101434:	1800201e 	bne	r3,zero,101014b8 <_malloc_r+0x750>
10101438:	8804d3fa 	srli	r2,r17,15
1010143c:	11c01e04 	addi	r7,r2,120
10101440:	380890fa 	slli	r4,r7,3
10101444:	12001dc4 	addi	r8,r2,119
10101448:	003e8006 	br	10100e4c <_malloc_r+0xe4>
1010144c:	00840474 	movhi	r2,4113
10101450:	10e29317 	ldw	r3,-30132(r2)
10101454:	a8c7883a 	add	r3,r21,r3
10101458:	10e29315 	stw	r3,-30132(r2)
1010145c:	003f1406 	br	101010b0 <_malloc_r+0x348>
10101460:	e083ffcc 	andi	r2,fp,4095
10101464:	103f121e 	bne	r2,zero,101010b0 <_malloc_r+0x348>
10101468:	9c000217 	ldw	r16,8(r19)
1010146c:	b56b883a 	add	r21,r22,r21
10101470:	ad400054 	ori	r21,r21,1
10101474:	85400115 	stw	r21,4(r16)
10101478:	003f3e06 	br	10101174 <_malloc_r+0x40c>
1010147c:	00840434 	movhi	r2,4112
10101480:	15dbe115 	stw	r23,28548(r2)
10101484:	003f1206 	br	101010d0 <_malloc_r+0x368>
10101488:	b821883a 	mov	r16,r23
1010148c:	003f3906 	br	10101174 <_malloc_r+0x40c>
10101490:	00800044 	movi	r2,1
10101494:	b8800115 	stw	r2,4(r23)
10101498:	003fae06 	br	10101354 <_malloc_r+0x5ec>
1010149c:	19005568 	cmpgeui	r4,r3,341
101014a0:	2000191e 	bne	r4,zero,10101508 <_malloc_r+0x7a0>
101014a4:	1006d3fa 	srli	r3,r2,15
101014a8:	19401e04 	addi	r5,r3,120
101014ac:	280a90fa 	slli	r5,r5,3
101014b0:	19001dc4 	addi	r4,r3,119
101014b4:	003f4e06 	br	101011f0 <_malloc_r+0x488>
101014b8:	10815568 	cmpgeui	r2,r2,1365
101014bc:	1000191e 	bne	r2,zero,10101524 <_malloc_r+0x7bc>
101014c0:	8804d4ba 	srli	r2,r17,18
101014c4:	11c01f44 	addi	r7,r2,125
101014c8:	380890fa 	slli	r4,r7,3
101014cc:	12001f04 	addi	r8,r2,124
101014d0:	003e5e06 	br	10100e4c <_malloc_r+0xe4>
101014d4:	e73ffe04 	addi	fp,fp,-8
101014d8:	af2b883a 	add	r21,r21,fp
101014dc:	adebc83a 	sub	r21,r21,r23
101014e0:	0029883a 	mov	r20,zero
101014e4:	003f0a06 	br	10101110 <_malloc_r+0x3a8>
101014e8:	81400204 	addi	r5,r16,8
101014ec:	9009883a 	mov	r4,r18
101014f0:	01027200 	call	10102720 <_free_r>
101014f4:	9c000217 	ldw	r16,8(r19)
101014f8:	00840474 	movhi	r2,4113
101014fc:	15229317 	ldw	r20,-30132(r2)
10101500:	85400117 	ldw	r21,4(r16)
10101504:	003f1b06 	br	10101174 <_malloc_r+0x40c>
10101508:	18c15568 	cmpgeui	r3,r3,1365
1010150c:	1800091e 	bne	r3,zero,10101534 <_malloc_r+0x7cc>
10101510:	1006d4ba 	srli	r3,r2,18
10101514:	19401f44 	addi	r5,r3,125
10101518:	280a90fa 	slli	r5,r5,3
1010151c:	19001f04 	addi	r4,r3,124
10101520:	003f3306 	br	101011f0 <_malloc_r+0x488>
10101524:	0100fe04 	movi	r4,1016
10101528:	01c01fc4 	movi	r7,127
1010152c:	02001f84 	movi	r8,126
10101530:	003e4606 	br	10100e4c <_malloc_r+0xe4>
10101534:	0140fe04 	movi	r5,1016
10101538:	01001f84 	movi	r4,126
1010153c:	003f2c06 	br	101011f0 <_malloc_r+0x488>
10101540:	98800117 	ldw	r2,4(r19)
10101544:	003f9506 	br	1010139c <_malloc_r+0x634>

10101548 <memchr>:
10101548:	208000cc 	andi	r2,r4,3
1010154c:	280f883a 	mov	r7,r5
10101550:	10000e26 	beq	r2,zero,1010158c <memchr+0x44>
10101554:	30bfffc4 	addi	r2,r6,-1
10101558:	30001726 	beq	r6,zero,101015b8 <memchr+0x70>
1010155c:	29803fcc 	andi	r6,r5,255
10101560:	00000606 	br	1010157c <memchr+0x34>
10101564:	21000044 	addi	r4,r4,1
10101568:	20c000cc 	andi	r3,r4,3
1010156c:	18000826 	beq	r3,zero,10101590 <memchr+0x48>
10101570:	10bfffc4 	addi	r2,r2,-1
10101574:	10ffffe0 	cmpeqi	r3,r2,-1
10101578:	18000f1e 	bne	r3,zero,101015b8 <memchr+0x70>
1010157c:	20c00003 	ldbu	r3,0(r4)
10101580:	19bff81e 	bne	r3,r6,10101564 <memchr+0x1c>
10101584:	2005883a 	mov	r2,r4
10101588:	f800283a 	ret
1010158c:	3005883a 	mov	r2,r6
10101590:	10c00128 	cmpgeui	r3,r2,4
10101594:	18000a1e 	bne	r3,zero,101015c0 <memchr+0x78>
10101598:	10001f26 	beq	r2,zero,10101618 <memchr+0xd0>
1010159c:	2087883a 	add	r3,r4,r2
101015a0:	39803fcc 	andi	r6,r7,255
101015a4:	2005883a 	mov	r2,r4
101015a8:	11000003 	ldbu	r4,0(r2)
101015ac:	21bff626 	beq	r4,r6,10101588 <memchr+0x40>
101015b0:	10800044 	addi	r2,r2,1
101015b4:	18bffc1e 	bne	r3,r2,101015a8 <memchr+0x60>
101015b8:	0005883a 	mov	r2,zero
101015bc:	f800283a 	ret
101015c0:	2810923a 	slli	r8,r5,8
101015c4:	29403fcc 	andi	r5,r5,255
101015c8:	027fbff4 	movhi	r9,65279
101015cc:	423fffcc 	andi	r8,r8,65535
101015d0:	414ab03a 	or	r5,r8,r5
101015d4:	2810943a 	slli	r8,r5,16
101015d8:	01a02074 	movhi	r6,32897
101015dc:	4a7fbfc4 	addi	r9,r9,-257
101015e0:	4150b03a 	or	r8,r8,r5
101015e4:	31a02004 	addi	r6,r6,-32640
101015e8:	20c00017 	ldw	r3,0(r4)
101015ec:	40c6f03a 	xor	r3,r8,r3
101015f0:	1a4b883a 	add	r5,r3,r9
101015f4:	00c6303a 	nor	r3,zero,r3
101015f8:	28c6703a 	and	r3,r5,r3
101015fc:	1986703a 	and	r3,r3,r6
10101600:	183fe61e 	bne	r3,zero,1010159c <memchr+0x54>
10101604:	10bfff04 	addi	r2,r2,-4
10101608:	10c00128 	cmpgeui	r3,r2,4
1010160c:	21000104 	addi	r4,r4,4
10101610:	183ff51e 	bne	r3,zero,101015e8 <memchr+0xa0>
10101614:	003fe006 	br	10101598 <memchr+0x50>
10101618:	f800283a 	ret

1010161c <memcpy>:
1010161c:	30c00430 	cmpltui	r3,r6,16
10101620:	2005883a 	mov	r2,r4
10101624:	18002d1e 	bne	r3,zero,101016dc <memcpy+0xc0>
10101628:	2906b03a 	or	r3,r5,r4
1010162c:	18c000cc 	andi	r3,r3,3
10101630:	1800351e 	bne	r3,zero,10101708 <memcpy+0xec>
10101634:	32fffc04 	addi	r11,r6,-16
10101638:	5816d13a 	srli	r11,r11,4
1010163c:	280f883a 	mov	r7,r5
10101640:	2007883a 	mov	r3,r4
10101644:	5ac00044 	addi	r11,r11,1
10101648:	5816913a 	slli	r11,r11,4
1010164c:	22d5883a 	add	r10,r4,r11
10101650:	39000117 	ldw	r4,4(r7)
10101654:	3a400017 	ldw	r9,0(r7)
10101658:	3a000217 	ldw	r8,8(r7)
1010165c:	19000115 	stw	r4,4(r3)
10101660:	39000317 	ldw	r4,12(r7)
10101664:	1a400015 	stw	r9,0(r3)
10101668:	1a000215 	stw	r8,8(r3)
1010166c:	19000315 	stw	r4,12(r3)
10101670:	18c00404 	addi	r3,r3,16
10101674:	39c00404 	addi	r7,r7,16
10101678:	50fff51e 	bne	r10,r3,10101650 <memcpy+0x34>
1010167c:	3100030c 	andi	r4,r6,12
10101680:	2acb883a 	add	r5,r5,r11
10101684:	320003cc 	andi	r8,r6,15
10101688:	20002226 	beq	r4,zero,10101714 <memcpy+0xf8>
1010168c:	280f883a 	mov	r7,r5
10101690:	1813883a 	mov	r9,r3
10101694:	39c00104 	addi	r7,r7,4
10101698:	3abfff17 	ldw	r10,-4(r7)
1010169c:	41c9c83a 	sub	r4,r8,r7
101016a0:	2909883a 	add	r4,r5,r4
101016a4:	4a800015 	stw	r10,0(r9)
101016a8:	21000128 	cmpgeui	r4,r4,4
101016ac:	4a400104 	addi	r9,r9,4
101016b0:	203ff81e 	bne	r4,zero,10101694 <memcpy+0x78>
101016b4:	413fff04 	addi	r4,r8,-4
101016b8:	2008d0ba 	srli	r4,r4,2
101016bc:	318000cc 	andi	r6,r6,3
101016c0:	31ffffc4 	addi	r7,r6,-1
101016c4:	21000044 	addi	r4,r4,1
101016c8:	200890ba 	slli	r4,r4,2
101016cc:	1907883a 	add	r3,r3,r4
101016d0:	290b883a 	add	r5,r5,r4
101016d4:	3000041e 	bne	r6,zero,101016e8 <memcpy+0xcc>
101016d8:	f800283a 	ret
101016dc:	2007883a 	mov	r3,r4
101016e0:	31ffffc4 	addi	r7,r6,-1
101016e4:	303ffc26 	beq	r6,zero,101016d8 <memcpy+0xbc>
101016e8:	39c00044 	addi	r7,r7,1
101016ec:	19cf883a 	add	r7,r3,r7
101016f0:	29800003 	ldbu	r6,0(r5)
101016f4:	18c00044 	addi	r3,r3,1
101016f8:	29400044 	addi	r5,r5,1
101016fc:	19bfffc5 	stb	r6,-1(r3)
10101700:	38fffb1e 	bne	r7,r3,101016f0 <memcpy+0xd4>
10101704:	f800283a 	ret
10101708:	31ffffc4 	addi	r7,r6,-1
1010170c:	2007883a 	mov	r3,r4
10101710:	003ff506 	br	101016e8 <memcpy+0xcc>
10101714:	400d883a 	mov	r6,r8
10101718:	003ff106 	br	101016e0 <memcpy+0xc4>

1010171c <memmove>:
1010171c:	2005883a 	mov	r2,r4
10101720:	29000a2e 	bgeu	r5,r4,1010174c <memmove+0x30>
10101724:	2989883a 	add	r4,r5,r6
10101728:	1100082e 	bgeu	r2,r4,1010174c <memmove+0x30>
1010172c:	1187883a 	add	r3,r2,r6
10101730:	30003e26 	beq	r6,zero,1010182c <memmove+0x110>
10101734:	217fffc3 	ldbu	r5,-1(r4)
10101738:	18ffffc4 	addi	r3,r3,-1
1010173c:	213fffc4 	addi	r4,r4,-1
10101740:	19400005 	stb	r5,0(r3)
10101744:	10fffb1e 	bne	r2,r3,10101734 <memmove+0x18>
10101748:	f800283a 	ret
1010174c:	30c00430 	cmpltui	r3,r6,16
10101750:	18000b26 	beq	r3,zero,10101780 <memmove+0x64>
10101754:	1007883a 	mov	r3,r2
10101758:	31ffffc4 	addi	r7,r6,-1
1010175c:	30003726 	beq	r6,zero,1010183c <memmove+0x120>
10101760:	39c00044 	addi	r7,r7,1
10101764:	29cf883a 	add	r7,r5,r7
10101768:	29800003 	ldbu	r6,0(r5)
1010176c:	29400044 	addi	r5,r5,1
10101770:	18c00044 	addi	r3,r3,1
10101774:	19bfffc5 	stb	r6,-1(r3)
10101778:	29fffb1e 	bne	r5,r7,10101768 <memmove+0x4c>
1010177c:	f800283a 	ret
10101780:	2886b03a 	or	r3,r5,r2
10101784:	18c000cc 	andi	r3,r3,3
10101788:	1800291e 	bne	r3,zero,10101830 <memmove+0x114>
1010178c:	327ffc04 	addi	r9,r6,-16
10101790:	4812d13a 	srli	r9,r9,4
10101794:	280f883a 	mov	r7,r5
10101798:	1007883a 	mov	r3,r2
1010179c:	4a400044 	addi	r9,r9,1
101017a0:	4812913a 	slli	r9,r9,4
101017a4:	1251883a 	add	r8,r2,r9
101017a8:	39000017 	ldw	r4,0(r7)
101017ac:	39c00404 	addi	r7,r7,16
101017b0:	18c00404 	addi	r3,r3,16
101017b4:	193ffc15 	stw	r4,-16(r3)
101017b8:	393ffd17 	ldw	r4,-12(r7)
101017bc:	193ffd15 	stw	r4,-12(r3)
101017c0:	393ffe17 	ldw	r4,-8(r7)
101017c4:	193ffe15 	stw	r4,-8(r3)
101017c8:	393fff17 	ldw	r4,-4(r7)
101017cc:	193fff15 	stw	r4,-4(r3)
101017d0:	40fff51e 	bne	r8,r3,101017a8 <memmove+0x8c>
101017d4:	3100030c 	andi	r4,r6,12
101017d8:	2a4b883a 	add	r5,r5,r9
101017dc:	320003cc 	andi	r8,r6,15
101017e0:	20001726 	beq	r4,zero,10101840 <memmove+0x124>
101017e4:	2813883a 	mov	r9,r5
101017e8:	180f883a 	mov	r7,r3
101017ec:	4a800017 	ldw	r10,0(r9)
101017f0:	39c00104 	addi	r7,r7,4
101017f4:	41c9c83a 	sub	r4,r8,r7
101017f8:	1909883a 	add	r4,r3,r4
101017fc:	21000128 	cmpgeui	r4,r4,4
10101800:	3abfff15 	stw	r10,-4(r7)
10101804:	4a400104 	addi	r9,r9,4
10101808:	203ff81e 	bne	r4,zero,101017ec <memmove+0xd0>
1010180c:	413fff04 	addi	r4,r8,-4
10101810:	2008d0ba 	srli	r4,r4,2
10101814:	318000cc 	andi	r6,r6,3
10101818:	21000044 	addi	r4,r4,1
1010181c:	200890ba 	slli	r4,r4,2
10101820:	1907883a 	add	r3,r3,r4
10101824:	290b883a 	add	r5,r5,r4
10101828:	003fcb06 	br	10101758 <memmove+0x3c>
1010182c:	f800283a 	ret
10101830:	31ffffc4 	addi	r7,r6,-1
10101834:	1007883a 	mov	r3,r2
10101838:	003fc906 	br	10101760 <memmove+0x44>
1010183c:	f800283a 	ret
10101840:	400d883a 	mov	r6,r8
10101844:	003fc406 	br	10101758 <memmove+0x3c>

10101848 <memset>:
10101848:	20c000cc 	andi	r3,r4,3
1010184c:	2005883a 	mov	r2,r4
10101850:	18003626 	beq	r3,zero,1010192c <memset+0xe4>
10101854:	31ffffc4 	addi	r7,r6,-1
10101858:	30003326 	beq	r6,zero,10101928 <memset+0xe0>
1010185c:	2811883a 	mov	r8,r5
10101860:	2007883a 	mov	r3,r4
10101864:	00000306 	br	10101874 <memset+0x2c>
10101868:	39ffffc4 	addi	r7,r7,-1
1010186c:	39bfffe0 	cmpeqi	r6,r7,-1
10101870:	30002d1e 	bne	r6,zero,10101928 <memset+0xe0>
10101874:	18c00044 	addi	r3,r3,1
10101878:	198000cc 	andi	r6,r3,3
1010187c:	1a3fffc5 	stb	r8,-1(r3)
10101880:	303ff91e 	bne	r6,zero,10101868 <memset+0x20>
10101884:	39000130 	cmpltui	r4,r7,4
10101888:	2000221e 	bne	r4,zero,10101914 <memset+0xcc>
1010188c:	29003fcc 	andi	r4,r5,255
10101890:	200c923a 	slli	r6,r4,8
10101894:	3a000430 	cmpltui	r8,r7,16
10101898:	3108b03a 	or	r4,r6,r4
1010189c:	200c943a 	slli	r6,r4,16
101018a0:	310cb03a 	or	r6,r6,r4
101018a4:	40000e1e 	bne	r8,zero,101018e0 <memset+0x98>
101018a8:	393ffc04 	addi	r4,r7,-16
101018ac:	2008d13a 	srli	r4,r4,4
101018b0:	21000044 	addi	r4,r4,1
101018b4:	2008913a 	slli	r4,r4,4
101018b8:	1909883a 	add	r4,r3,r4
101018bc:	19800015 	stw	r6,0(r3)
101018c0:	19800115 	stw	r6,4(r3)
101018c4:	19800215 	stw	r6,8(r3)
101018c8:	19800315 	stw	r6,12(r3)
101018cc:	18c00404 	addi	r3,r3,16
101018d0:	20fffa1e 	bne	r4,r3,101018bc <memset+0x74>
101018d4:	3900030c 	andi	r4,r7,12
101018d8:	39c003cc 	andi	r7,r7,15
101018dc:	20000d26 	beq	r4,zero,10101914 <memset+0xcc>
101018e0:	1811883a 	mov	r8,r3
101018e4:	42000104 	addi	r8,r8,4
101018e8:	3a09c83a 	sub	r4,r7,r8
101018ec:	1909883a 	add	r4,r3,r4
101018f0:	21000128 	cmpgeui	r4,r4,4
101018f4:	41bfff15 	stw	r6,-4(r8)
101018f8:	203ffa1e 	bne	r4,zero,101018e4 <memset+0x9c>
101018fc:	393fff04 	addi	r4,r7,-4
10101900:	2008d0ba 	srli	r4,r4,2
10101904:	39c000cc 	andi	r7,r7,3
10101908:	21000044 	addi	r4,r4,1
1010190c:	200890ba 	slli	r4,r4,2
10101910:	1907883a 	add	r3,r3,r4
10101914:	38000426 	beq	r7,zero,10101928 <memset+0xe0>
10101918:	19cf883a 	add	r7,r3,r7
1010191c:	18c00044 	addi	r3,r3,1
10101920:	197fffc5 	stb	r5,-1(r3)
10101924:	38fffd1e 	bne	r7,r3,1010191c <memset+0xd4>
10101928:	f800283a 	ret
1010192c:	2007883a 	mov	r3,r4
10101930:	300f883a 	mov	r7,r6
10101934:	003fd306 	br	10101884 <memset+0x3c>

10101938 <_realloc_r>:
10101938:	defff504 	addi	sp,sp,-44
1010193c:	dc800315 	stw	r18,12(sp)
10101940:	dfc00a15 	stw	ra,40(sp)
10101944:	df000915 	stw	fp,36(sp)
10101948:	ddc00815 	stw	r23,32(sp)
1010194c:	dd800715 	stw	r22,28(sp)
10101950:	dd400615 	stw	r21,24(sp)
10101954:	dd000515 	stw	r20,20(sp)
10101958:	dcc00415 	stw	r19,16(sp)
1010195c:	dc400215 	stw	r17,8(sp)
10101960:	dc000115 	stw	r16,4(sp)
10101964:	3025883a 	mov	r18,r6
10101968:	28008b26 	beq	r5,zero,10101b98 <_realloc_r+0x260>
1010196c:	2821883a 	mov	r16,r5
10101970:	2027883a 	mov	r19,r4
10101974:	944002c4 	addi	r17,r18,11
10101978:	01034fc0 	call	101034fc <__malloc_lock>
1010197c:	888005f0 	cmpltui	r2,r17,23
10101980:	1000521e 	bne	r2,zero,10101acc <_realloc_r+0x194>
10101984:	017ffe04 	movi	r5,-8
10101988:	8962703a 	and	r17,r17,r5
1010198c:	8807883a 	mov	r3,r17
10101990:	88005116 	blt	r17,zero,10101ad8 <_realloc_r+0x1a0>
10101994:	8c805036 	bltu	r17,r18,10101ad8 <_realloc_r+0x1a0>
10101998:	80bfff17 	ldw	r2,-4(r16)
1010199c:	017fff04 	movi	r5,-4
101019a0:	857ffe04 	addi	r21,r16,-8
101019a4:	1168703a 	and	r20,r2,r5
101019a8:	ad2d883a 	add	r22,r21,r20
101019ac:	a0c0390e 	bge	r20,r3,10101a94 <_realloc_r+0x15c>
101019b0:	07040434 	movhi	fp,4112
101019b4:	e7165b04 	addi	fp,fp,22892
101019b8:	e2000217 	ldw	r8,8(fp)
101019bc:	b1000117 	ldw	r4,4(r22)
101019c0:	45808e26 	beq	r8,r22,10101bfc <_realloc_r+0x2c4>
101019c4:	01bfff84 	movi	r6,-2
101019c8:	218c703a 	and	r6,r4,r6
101019cc:	b18d883a 	add	r6,r22,r6
101019d0:	31800117 	ldw	r6,4(r6)
101019d4:	3180004c 	andi	r6,r6,1
101019d8:	30004f1e 	bne	r6,zero,10101b18 <_realloc_r+0x1e0>
101019dc:	2148703a 	and	r4,r4,r5
101019e0:	a10b883a 	add	r5,r20,r4
101019e4:	28c0bf0e 	bge	r5,r3,10101ce4 <_realloc_r+0x3ac>
101019e8:	1080004c 	andi	r2,r2,1
101019ec:	10004c1e 	bne	r2,zero,10101b20 <_realloc_r+0x1e8>
101019f0:	81fffe17 	ldw	r7,-8(r16)
101019f4:	00bfff04 	movi	r2,-4
101019f8:	a9cfc83a 	sub	r7,r21,r7
101019fc:	39400117 	ldw	r5,4(r7)
10101a00:	288a703a 	and	r5,r5,r2
10101a04:	b0000426 	beq	r22,zero,10101a18 <_realloc_r+0xe0>
10101a08:	a16f883a 	add	r23,r20,r5
10101a0c:	b92f883a 	add	r23,r23,r4
10101a10:	4580bf26 	beq	r8,r22,10101d10 <_realloc_r+0x3d8>
10101a14:	b8c0930e 	bge	r23,r3,10101c64 <_realloc_r+0x32c>
10101a18:	38004126 	beq	r7,zero,10101b20 <_realloc_r+0x1e8>
10101a1c:	a16f883a 	add	r23,r20,r5
10101a20:	b8c03f16 	blt	r23,r3,10101b20 <_realloc_r+0x1e8>
10101a24:	38800317 	ldw	r2,12(r7)
10101a28:	38c00217 	ldw	r3,8(r7)
10101a2c:	a1bfff04 	addi	r6,r20,-4
10101a30:	31400968 	cmpgeui	r5,r6,37
10101a34:	18800315 	stw	r2,12(r3)
10101a38:	10c00215 	stw	r3,8(r2)
10101a3c:	39000204 	addi	r4,r7,8
10101a40:	3ded883a 	add	r22,r7,r23
10101a44:	2800941e 	bne	r5,zero,10101c98 <_realloc_r+0x360>
10101a48:	30800530 	cmpltui	r2,r6,20
10101a4c:	80c00017 	ldw	r3,0(r16)
10101a50:	1000df1e 	bne	r2,zero,10101dd0 <_realloc_r+0x498>
10101a54:	38c00215 	stw	r3,8(r7)
10101a58:	80c00117 	ldw	r3,4(r16)
10101a5c:	30800728 	cmpgeui	r2,r6,28
10101a60:	38c00315 	stw	r3,12(r7)
10101a64:	1000dc1e 	bne	r2,zero,10101dd8 <_realloc_r+0x4a0>
10101a68:	80c00217 	ldw	r3,8(r16)
10101a6c:	38800404 	addi	r2,r7,16
10101a70:	84000204 	addi	r16,r16,8
10101a74:	10c00015 	stw	r3,0(r2)
10101a78:	80c00117 	ldw	r3,4(r16)
10101a7c:	b829883a 	mov	r20,r23
10101a80:	382b883a 	mov	r21,r7
10101a84:	10c00115 	stw	r3,4(r2)
10101a88:	80c00217 	ldw	r3,8(r16)
10101a8c:	2021883a 	mov	r16,r4
10101a90:	10c00215 	stw	r3,8(r2)
10101a94:	a9800117 	ldw	r6,4(r21)
10101a98:	a445c83a 	sub	r2,r20,r17
10101a9c:	10c00430 	cmpltui	r3,r2,16
10101aa0:	3180004c 	andi	r6,r6,1
10101aa4:	18004926 	beq	r3,zero,10101bcc <_realloc_r+0x294>
10101aa8:	a18cb03a 	or	r6,r20,r6
10101aac:	a9800115 	stw	r6,4(r21)
10101ab0:	b0800117 	ldw	r2,4(r22)
10101ab4:	10800054 	ori	r2,r2,1
10101ab8:	b0800115 	stw	r2,4(r22)
10101abc:	9809883a 	mov	r4,r19
10101ac0:	01035200 	call	10103520 <__malloc_unlock>
10101ac4:	8025883a 	mov	r18,r16
10101ac8:	00000606 	br	10101ae4 <_realloc_r+0x1ac>
10101acc:	04400404 	movi	r17,16
10101ad0:	00c00404 	movi	r3,16
10101ad4:	8cbfb02e 	bgeu	r17,r18,10101998 <_realloc_r+0x60>
10101ad8:	00800304 	movi	r2,12
10101adc:	98800015 	stw	r2,0(r19)
10101ae0:	0025883a 	mov	r18,zero
10101ae4:	9005883a 	mov	r2,r18
10101ae8:	dfc00a17 	ldw	ra,40(sp)
10101aec:	df000917 	ldw	fp,36(sp)
10101af0:	ddc00817 	ldw	r23,32(sp)
10101af4:	dd800717 	ldw	r22,28(sp)
10101af8:	dd400617 	ldw	r21,24(sp)
10101afc:	dd000517 	ldw	r20,20(sp)
10101b00:	dcc00417 	ldw	r19,16(sp)
10101b04:	dc800317 	ldw	r18,12(sp)
10101b08:	dc400217 	ldw	r17,8(sp)
10101b0c:	dc000117 	ldw	r16,4(sp)
10101b10:	dec00b04 	addi	sp,sp,44
10101b14:	f800283a 	ret
10101b18:	1080004c 	andi	r2,r2,1
10101b1c:	10006c26 	beq	r2,zero,10101cd0 <_realloc_r+0x398>
10101b20:	900b883a 	mov	r5,r18
10101b24:	9809883a 	mov	r4,r19
10101b28:	0100d680 	call	10100d68 <_malloc_r>
10101b2c:	1025883a 	mov	r18,r2
10101b30:	10001626 	beq	r2,zero,10101b8c <_realloc_r+0x254>
10101b34:	80bfff17 	ldw	r2,-4(r16)
10101b38:	013fff84 	movi	r4,-2
10101b3c:	90fffe04 	addi	r3,r18,-8
10101b40:	1104703a 	and	r2,r2,r4
10101b44:	a885883a 	add	r2,r21,r2
10101b48:	10c05b26 	beq	r2,r3,10101cb8 <_realloc_r+0x380>
10101b4c:	a1bfff04 	addi	r6,r20,-4
10101b50:	30800968 	cmpgeui	r2,r6,37
10101b54:	10006a1e 	bne	r2,zero,10101d00 <_realloc_r+0x3c8>
10101b58:	30800530 	cmpltui	r2,r6,20
10101b5c:	81000017 	ldw	r4,0(r16)
10101b60:	10003726 	beq	r2,zero,10101c40 <_realloc_r+0x308>
10101b64:	9005883a 	mov	r2,r18
10101b68:	8007883a 	mov	r3,r16
10101b6c:	11000015 	stw	r4,0(r2)
10101b70:	19000117 	ldw	r4,4(r3)
10101b74:	11000115 	stw	r4,4(r2)
10101b78:	18c00217 	ldw	r3,8(r3)
10101b7c:	10c00215 	stw	r3,8(r2)
10101b80:	800b883a 	mov	r5,r16
10101b84:	9809883a 	mov	r4,r19
10101b88:	01027200 	call	10102720 <_free_r>
10101b8c:	9809883a 	mov	r4,r19
10101b90:	01035200 	call	10103520 <__malloc_unlock>
10101b94:	003fd306 	br	10101ae4 <_realloc_r+0x1ac>
10101b98:	300b883a 	mov	r5,r6
10101b9c:	dfc00a17 	ldw	ra,40(sp)
10101ba0:	df000917 	ldw	fp,36(sp)
10101ba4:	ddc00817 	ldw	r23,32(sp)
10101ba8:	dd800717 	ldw	r22,28(sp)
10101bac:	dd400617 	ldw	r21,24(sp)
10101bb0:	dd000517 	ldw	r20,20(sp)
10101bb4:	dcc00417 	ldw	r19,16(sp)
10101bb8:	dc800317 	ldw	r18,12(sp)
10101bbc:	dc400217 	ldw	r17,8(sp)
10101bc0:	dc000117 	ldw	r16,4(sp)
10101bc4:	dec00b04 	addi	sp,sp,44
10101bc8:	0100d681 	jmpi	10100d68 <_malloc_r>
10101bcc:	344cb03a 	or	r6,r6,r17
10101bd0:	a9800115 	stw	r6,4(r21)
10101bd4:	ac4b883a 	add	r5,r21,r17
10101bd8:	10800054 	ori	r2,r2,1
10101bdc:	28800115 	stw	r2,4(r5)
10101be0:	b0800117 	ldw	r2,4(r22)
10101be4:	29400204 	addi	r5,r5,8
10101be8:	9809883a 	mov	r4,r19
10101bec:	10800054 	ori	r2,r2,1
10101bf0:	b0800115 	stw	r2,4(r22)
10101bf4:	01027200 	call	10102720 <_free_r>
10101bf8:	003fb006 	br	10101abc <_realloc_r+0x184>
10101bfc:	2148703a 	and	r4,r4,r5
10101c00:	a10b883a 	add	r5,r20,r4
10101c04:	89800404 	addi	r6,r17,16
10101c08:	29bf7716 	blt	r5,r6,101019e8 <_realloc_r+0xb0>
10101c0c:	ac6b883a 	add	r21,r21,r17
10101c10:	2c45c83a 	sub	r2,r5,r17
10101c14:	e5400215 	stw	r21,8(fp)
10101c18:	10800054 	ori	r2,r2,1
10101c1c:	a8800115 	stw	r2,4(r21)
10101c20:	80bfff17 	ldw	r2,-4(r16)
10101c24:	9809883a 	mov	r4,r19
10101c28:	8025883a 	mov	r18,r16
10101c2c:	1080004c 	andi	r2,r2,1
10101c30:	1462b03a 	or	r17,r2,r17
10101c34:	847fff15 	stw	r17,-4(r16)
10101c38:	01035200 	call	10103520 <__malloc_unlock>
10101c3c:	003fa906 	br	10101ae4 <_realloc_r+0x1ac>
10101c40:	91000015 	stw	r4,0(r18)
10101c44:	80c00117 	ldw	r3,4(r16)
10101c48:	30800728 	cmpgeui	r2,r6,28
10101c4c:	90c00115 	stw	r3,4(r18)
10101c50:	1000551e 	bne	r2,zero,10101da8 <_realloc_r+0x470>
10101c54:	81000217 	ldw	r4,8(r16)
10101c58:	80c00204 	addi	r3,r16,8
10101c5c:	90800204 	addi	r2,r18,8
10101c60:	003fc206 	br	10101b6c <_realloc_r+0x234>
10101c64:	b0800317 	ldw	r2,12(r22)
10101c68:	b0c00217 	ldw	r3,8(r22)
10101c6c:	a1bfff04 	addi	r6,r20,-4
10101c70:	31400968 	cmpgeui	r5,r6,37
10101c74:	18800315 	stw	r2,12(r3)
10101c78:	10c00215 	stw	r3,8(r2)
10101c7c:	38c00217 	ldw	r3,8(r7)
10101c80:	38800317 	ldw	r2,12(r7)
10101c84:	39000204 	addi	r4,r7,8
10101c88:	3ded883a 	add	r22,r7,r23
10101c8c:	18800315 	stw	r2,12(r3)
10101c90:	10c00215 	stw	r3,8(r2)
10101c94:	283f6c26 	beq	r5,zero,10101a48 <_realloc_r+0x110>
10101c98:	800b883a 	mov	r5,r16
10101c9c:	d9c00015 	stw	r7,0(sp)
10101ca0:	010171c0 	call	1010171c <memmove>
10101ca4:	d9c00017 	ldw	r7,0(sp)
10101ca8:	1021883a 	mov	r16,r2
10101cac:	b829883a 	mov	r20,r23
10101cb0:	382b883a 	mov	r21,r7
10101cb4:	003f7706 	br	10101a94 <_realloc_r+0x15c>
10101cb8:	90bfff17 	ldw	r2,-4(r18)
10101cbc:	00ffff04 	movi	r3,-4
10101cc0:	10c4703a 	and	r2,r2,r3
10101cc4:	a0a9883a 	add	r20,r20,r2
10101cc8:	ad2d883a 	add	r22,r21,r20
10101ccc:	003f7106 	br	10101a94 <_realloc_r+0x15c>
10101cd0:	81fffe17 	ldw	r7,-8(r16)
10101cd4:	a9cfc83a 	sub	r7,r21,r7
10101cd8:	39000117 	ldw	r4,4(r7)
10101cdc:	214a703a 	and	r5,r4,r5
10101ce0:	003f4d06 	br	10101a18 <_realloc_r+0xe0>
10101ce4:	b0800317 	ldw	r2,12(r22)
10101ce8:	b0c00217 	ldw	r3,8(r22)
10101cec:	2829883a 	mov	r20,r5
10101cf0:	a96d883a 	add	r22,r21,r5
10101cf4:	18800315 	stw	r2,12(r3)
10101cf8:	10c00215 	stw	r3,8(r2)
10101cfc:	003f6506 	br	10101a94 <_realloc_r+0x15c>
10101d00:	800b883a 	mov	r5,r16
10101d04:	9009883a 	mov	r4,r18
10101d08:	010171c0 	call	1010171c <memmove>
10101d0c:	003f9c06 	br	10101b80 <_realloc_r+0x248>
10101d10:	88800404 	addi	r2,r17,16
10101d14:	b8bf4016 	blt	r23,r2,10101a18 <_realloc_r+0xe0>
10101d18:	38800317 	ldw	r2,12(r7)
10101d1c:	38c00217 	ldw	r3,8(r7)
10101d20:	a1bfff04 	addi	r6,r20,-4
10101d24:	31000968 	cmpgeui	r4,r6,37
10101d28:	18800315 	stw	r2,12(r3)
10101d2c:	10c00215 	stw	r3,8(r2)
10101d30:	3c800204 	addi	r18,r7,8
10101d34:	20003b1e 	bne	r4,zero,10101e24 <_realloc_r+0x4ec>
10101d38:	30800530 	cmpltui	r2,r6,20
10101d3c:	80c00017 	ldw	r3,0(r16)
10101d40:	1000361e 	bne	r2,zero,10101e1c <_realloc_r+0x4e4>
10101d44:	38c00215 	stw	r3,8(r7)
10101d48:	80c00117 	ldw	r3,4(r16)
10101d4c:	30800728 	cmpgeui	r2,r6,28
10101d50:	38c00315 	stw	r3,12(r7)
10101d54:	1000401e 	bne	r2,zero,10101e58 <_realloc_r+0x520>
10101d58:	80c00217 	ldw	r3,8(r16)
10101d5c:	38800404 	addi	r2,r7,16
10101d60:	84000204 	addi	r16,r16,8
10101d64:	10c00015 	stw	r3,0(r2)
10101d68:	80c00117 	ldw	r3,4(r16)
10101d6c:	10c00115 	stw	r3,4(r2)
10101d70:	80c00217 	ldw	r3,8(r16)
10101d74:	10c00215 	stw	r3,8(r2)
10101d78:	3c47883a 	add	r3,r7,r17
10101d7c:	bc45c83a 	sub	r2,r23,r17
10101d80:	e0c00215 	stw	r3,8(fp)
10101d84:	10800054 	ori	r2,r2,1
10101d88:	18800115 	stw	r2,4(r3)
10101d8c:	38800117 	ldw	r2,4(r7)
10101d90:	9809883a 	mov	r4,r19
10101d94:	1080004c 	andi	r2,r2,1
10101d98:	1462b03a 	or	r17,r2,r17
10101d9c:	3c400115 	stw	r17,4(r7)
10101da0:	01035200 	call	10103520 <__malloc_unlock>
10101da4:	003f4f06 	br	10101ae4 <_realloc_r+0x1ac>
10101da8:	80800217 	ldw	r2,8(r16)
10101dac:	31800920 	cmpeqi	r6,r6,36
10101db0:	90800215 	stw	r2,8(r18)
10101db4:	80800317 	ldw	r2,12(r16)
10101db8:	90800315 	stw	r2,12(r18)
10101dbc:	81000417 	ldw	r4,16(r16)
10101dc0:	30000f1e 	bne	r6,zero,10101e00 <_realloc_r+0x4c8>
10101dc4:	80c00404 	addi	r3,r16,16
10101dc8:	90800404 	addi	r2,r18,16
10101dcc:	003f6706 	br	10101b6c <_realloc_r+0x234>
10101dd0:	2005883a 	mov	r2,r4
10101dd4:	003f2706 	br	10101a74 <_realloc_r+0x13c>
10101dd8:	80800217 	ldw	r2,8(r16)
10101ddc:	31800920 	cmpeqi	r6,r6,36
10101de0:	38800415 	stw	r2,16(r7)
10101de4:	80800317 	ldw	r2,12(r16)
10101de8:	38800515 	stw	r2,20(r7)
10101dec:	80c00417 	ldw	r3,16(r16)
10101df0:	3000121e 	bne	r6,zero,10101e3c <_realloc_r+0x504>
10101df4:	38800604 	addi	r2,r7,24
10101df8:	84000404 	addi	r16,r16,16
10101dfc:	003f1d06 	br	10101a74 <_realloc_r+0x13c>
10101e00:	91000415 	stw	r4,16(r18)
10101e04:	81000517 	ldw	r4,20(r16)
10101e08:	80c00604 	addi	r3,r16,24
10101e0c:	90800604 	addi	r2,r18,24
10101e10:	91000515 	stw	r4,20(r18)
10101e14:	81000617 	ldw	r4,24(r16)
10101e18:	003f5406 	br	10101b6c <_realloc_r+0x234>
10101e1c:	9005883a 	mov	r2,r18
10101e20:	003fd006 	br	10101d64 <_realloc_r+0x42c>
10101e24:	800b883a 	mov	r5,r16
10101e28:	9009883a 	mov	r4,r18
10101e2c:	d9c00015 	stw	r7,0(sp)
10101e30:	010171c0 	call	1010171c <memmove>
10101e34:	d9c00017 	ldw	r7,0(sp)
10101e38:	003fcf06 	br	10101d78 <_realloc_r+0x440>
10101e3c:	84000604 	addi	r16,r16,24
10101e40:	38c00615 	stw	r3,24(r7)
10101e44:	80ffff17 	ldw	r3,-4(r16)
10101e48:	38800804 	addi	r2,r7,32
10101e4c:	38c00715 	stw	r3,28(r7)
10101e50:	80c00017 	ldw	r3,0(r16)
10101e54:	003f0706 	br	10101a74 <_realloc_r+0x13c>
10101e58:	80800217 	ldw	r2,8(r16)
10101e5c:	31800920 	cmpeqi	r6,r6,36
10101e60:	38800415 	stw	r2,16(r7)
10101e64:	80800317 	ldw	r2,12(r16)
10101e68:	38800515 	stw	r2,20(r7)
10101e6c:	80c00417 	ldw	r3,16(r16)
10101e70:	3000031e 	bne	r6,zero,10101e80 <_realloc_r+0x548>
10101e74:	38800604 	addi	r2,r7,24
10101e78:	84000404 	addi	r16,r16,16
10101e7c:	003fb906 	br	10101d64 <_realloc_r+0x42c>
10101e80:	84000604 	addi	r16,r16,24
10101e84:	38c00615 	stw	r3,24(r7)
10101e88:	80ffff17 	ldw	r3,-4(r16)
10101e8c:	38800804 	addi	r2,r7,32
10101e90:	38c00715 	stw	r3,28(r7)
10101e94:	80c00017 	ldw	r3,0(r16)
10101e98:	003fb206 	br	10101d64 <_realloc_r+0x42c>

10101e9c <_sbrk_r>:
10101e9c:	defffe04 	addi	sp,sp,-8
10101ea0:	dc000015 	stw	r16,0(sp)
10101ea4:	00840474 	movhi	r2,4113
10101ea8:	2021883a 	mov	r16,r4
10101eac:	2809883a 	mov	r4,r5
10101eb0:	dfc00115 	stw	ra,4(sp)
10101eb4:	10228b15 	stw	zero,-30164(r2)
10101eb8:	01036f80 	call	101036f8 <sbrk>
10101ebc:	10ffffd8 	cmpnei	r3,r2,-1
10101ec0:	18000426 	beq	r3,zero,10101ed4 <_sbrk_r+0x38>
10101ec4:	dfc00117 	ldw	ra,4(sp)
10101ec8:	dc000017 	ldw	r16,0(sp)
10101ecc:	dec00204 	addi	sp,sp,8
10101ed0:	f800283a 	ret
10101ed4:	00c40474 	movhi	r3,4113
10101ed8:	18e28b17 	ldw	r3,-30164(r3)
10101edc:	183ff926 	beq	r3,zero,10101ec4 <_sbrk_r+0x28>
10101ee0:	80c00015 	stw	r3,0(r16)
10101ee4:	dfc00117 	ldw	ra,4(sp)
10101ee8:	dc000017 	ldw	r16,0(sp)
10101eec:	dec00204 	addi	sp,sp,8
10101ef0:	f800283a 	ret

10101ef4 <__sread>:
10101ef4:	defffe04 	addi	sp,sp,-8
10101ef8:	dc000015 	stw	r16,0(sp)
10101efc:	2821883a 	mov	r16,r5
10101f00:	2940038f 	ldh	r5,14(r5)
10101f04:	dfc00115 	stw	ra,4(sp)
10101f08:	0102c580 	call	10102c58 <_read_r>
10101f0c:	10000716 	blt	r2,zero,10101f2c <__sread+0x38>
10101f10:	80c01417 	ldw	r3,80(r16)
10101f14:	1887883a 	add	r3,r3,r2
10101f18:	80c01415 	stw	r3,80(r16)
10101f1c:	dfc00117 	ldw	ra,4(sp)
10101f20:	dc000017 	ldw	r16,0(sp)
10101f24:	dec00204 	addi	sp,sp,8
10101f28:	f800283a 	ret
10101f2c:	80c0030b 	ldhu	r3,12(r16)
10101f30:	18fbffcc 	andi	r3,r3,61439
10101f34:	80c0030d 	sth	r3,12(r16)
10101f38:	dfc00117 	ldw	ra,4(sp)
10101f3c:	dc000017 	ldw	r16,0(sp)
10101f40:	dec00204 	addi	sp,sp,8
10101f44:	f800283a 	ret

10101f48 <__seofread>:
10101f48:	0005883a 	mov	r2,zero
10101f4c:	f800283a 	ret

10101f50 <__swrite>:
10101f50:	2880030b 	ldhu	r2,12(r5)
10101f54:	defffb04 	addi	sp,sp,-20
10101f58:	dcc00315 	stw	r19,12(sp)
10101f5c:	dc800215 	stw	r18,8(sp)
10101f60:	dc400115 	stw	r17,4(sp)
10101f64:	dc000015 	stw	r16,0(sp)
10101f68:	dfc00415 	stw	ra,16(sp)
10101f6c:	10c0400c 	andi	r3,r2,256
10101f70:	2821883a 	mov	r16,r5
10101f74:	2023883a 	mov	r17,r4
10101f78:	2940038f 	ldh	r5,14(r5)
10101f7c:	3025883a 	mov	r18,r6
10101f80:	3827883a 	mov	r19,r7
10101f84:	18000c1e 	bne	r3,zero,10101fb8 <__swrite+0x68>
10101f88:	10bbffcc 	andi	r2,r2,61439
10101f8c:	980f883a 	mov	r7,r19
10101f90:	900d883a 	mov	r6,r18
10101f94:	8809883a 	mov	r4,r17
10101f98:	8080030d 	sth	r2,12(r16)
10101f9c:	dfc00417 	ldw	ra,16(sp)
10101fa0:	dcc00317 	ldw	r19,12(sp)
10101fa4:	dc800217 	ldw	r18,8(sp)
10101fa8:	dc400117 	ldw	r17,4(sp)
10101fac:	dc000017 	ldw	r16,0(sp)
10101fb0:	dec00504 	addi	sp,sp,20
10101fb4:	01020341 	jmpi	10102034 <_write_r>
10101fb8:	01c00084 	movi	r7,2
10101fbc:	000d883a 	mov	r6,zero
10101fc0:	0102a1c0 	call	10102a1c <_lseek_r>
10101fc4:	8080030b 	ldhu	r2,12(r16)
10101fc8:	8140038f 	ldh	r5,14(r16)
10101fcc:	003fee06 	br	10101f88 <__swrite+0x38>

10101fd0 <__sseek>:
10101fd0:	defffe04 	addi	sp,sp,-8
10101fd4:	dc000015 	stw	r16,0(sp)
10101fd8:	2821883a 	mov	r16,r5
10101fdc:	2940038f 	ldh	r5,14(r5)
10101fe0:	dfc00115 	stw	ra,4(sp)
10101fe4:	0102a1c0 	call	10102a1c <_lseek_r>
10101fe8:	10ffffd8 	cmpnei	r3,r2,-1
10101fec:	18000826 	beq	r3,zero,10102010 <__sseek+0x40>
10101ff0:	80c0030b 	ldhu	r3,12(r16)
10101ff4:	80801415 	stw	r2,80(r16)
10101ff8:	18c40014 	ori	r3,r3,4096
10101ffc:	80c0030d 	sth	r3,12(r16)
10102000:	dfc00117 	ldw	ra,4(sp)
10102004:	dc000017 	ldw	r16,0(sp)
10102008:	dec00204 	addi	sp,sp,8
1010200c:	f800283a 	ret
10102010:	80c0030b 	ldhu	r3,12(r16)
10102014:	18fbffcc 	andi	r3,r3,61439
10102018:	80c0030d 	sth	r3,12(r16)
1010201c:	dfc00117 	ldw	ra,4(sp)
10102020:	dc000017 	ldw	r16,0(sp)
10102024:	dec00204 	addi	sp,sp,8
10102028:	f800283a 	ret

1010202c <__sclose>:
1010202c:	2940038f 	ldh	r5,14(r5)
10102030:	01021f41 	jmpi	101021f4 <_close_r>

10102034 <_write_r>:
10102034:	2807883a 	mov	r3,r5
10102038:	defffe04 	addi	sp,sp,-8
1010203c:	dc000015 	stw	r16,0(sp)
10102040:	300b883a 	mov	r5,r6
10102044:	00840474 	movhi	r2,4113
10102048:	380d883a 	mov	r6,r7
1010204c:	2021883a 	mov	r16,r4
10102050:	1809883a 	mov	r4,r3
10102054:	dfc00115 	stw	ra,4(sp)
10102058:	10228b15 	stw	zero,-30164(r2)
1010205c:	01037ec0 	call	101037ec <write>
10102060:	10ffffd8 	cmpnei	r3,r2,-1
10102064:	18000426 	beq	r3,zero,10102078 <_write_r+0x44>
10102068:	dfc00117 	ldw	ra,4(sp)
1010206c:	dc000017 	ldw	r16,0(sp)
10102070:	dec00204 	addi	sp,sp,8
10102074:	f800283a 	ret
10102078:	00c40474 	movhi	r3,4113
1010207c:	18e28b17 	ldw	r3,-30164(r3)
10102080:	183ff926 	beq	r3,zero,10102068 <_write_r+0x34>
10102084:	80c00015 	stw	r3,0(r16)
10102088:	dfc00117 	ldw	ra,4(sp)
1010208c:	dc000017 	ldw	r16,0(sp)
10102090:	dec00204 	addi	sp,sp,8
10102094:	f800283a 	ret

10102098 <__swsetup_r>:
10102098:	00840434 	movhi	r2,4112
1010209c:	109be017 	ldw	r2,28544(r2)
101020a0:	defffd04 	addi	sp,sp,-12
101020a4:	dc400115 	stw	r17,4(sp)
101020a8:	dc000015 	stw	r16,0(sp)
101020ac:	dfc00215 	stw	ra,8(sp)
101020b0:	2023883a 	mov	r17,r4
101020b4:	2821883a 	mov	r16,r5
101020b8:	10000226 	beq	r2,zero,101020c4 <__swsetup_r+0x2c>
101020bc:	10c00e17 	ldw	r3,56(r2)
101020c0:	18003326 	beq	r3,zero,10102190 <__swsetup_r+0xf8>
101020c4:	8180030b 	ldhu	r6,12(r16)
101020c8:	30c0020c 	andi	r3,r6,8
101020cc:	3005883a 	mov	r2,r6
101020d0:	18000f26 	beq	r3,zero,10102110 <__swsetup_r+0x78>
101020d4:	80c00417 	ldw	r3,16(r16)
101020d8:	18001626 	beq	r3,zero,10102134 <__swsetup_r+0x9c>
101020dc:	1100004c 	andi	r4,r2,1
101020e0:	20001f1e 	bne	r4,zero,10102160 <__swsetup_r+0xc8>
101020e4:	1100008c 	andi	r4,r2,2
101020e8:	20002c1e 	bne	r4,zero,1010219c <__swsetup_r+0x104>
101020ec:	81000517 	ldw	r4,20(r16)
101020f0:	81000215 	stw	r4,8(r16)
101020f4:	18001f26 	beq	r3,zero,10102174 <__swsetup_r+0xdc>
101020f8:	0005883a 	mov	r2,zero
101020fc:	dfc00217 	ldw	ra,8(sp)
10102100:	dc400117 	ldw	r17,4(sp)
10102104:	dc000017 	ldw	r16,0(sp)
10102108:	dec00304 	addi	sp,sp,12
1010210c:	f800283a 	ret
10102110:	3080040c 	andi	r2,r6,16
10102114:	10003126 	beq	r2,zero,101021dc <__swsetup_r+0x144>
10102118:	3080010c 	andi	r2,r6,4
1010211c:	1000211e 	bne	r2,zero,101021a4 <__swsetup_r+0x10c>
10102120:	80c00417 	ldw	r3,16(r16)
10102124:	30800214 	ori	r2,r6,8
10102128:	8080030d 	sth	r2,12(r16)
1010212c:	100d883a 	mov	r6,r2
10102130:	183fea1e 	bne	r3,zero,101020dc <__swsetup_r+0x44>
10102134:	1100a00c 	andi	r4,r2,640
10102138:	21008020 	cmpeqi	r4,r4,512
1010213c:	203fe71e 	bne	r4,zero,101020dc <__swsetup_r+0x44>
10102140:	8809883a 	mov	r4,r17
10102144:	800b883a 	mov	r5,r16
10102148:	0102b180 	call	10102b18 <__smakebuf_r>
1010214c:	8180030b 	ldhu	r6,12(r16)
10102150:	80c00417 	ldw	r3,16(r16)
10102154:	3005883a 	mov	r2,r6
10102158:	1100004c 	andi	r4,r2,1
1010215c:	203fe126 	beq	r4,zero,101020e4 <__swsetup_r+0x4c>
10102160:	81000517 	ldw	r4,20(r16)
10102164:	80000215 	stw	zero,8(r16)
10102168:	0109c83a 	sub	r4,zero,r4
1010216c:	81000615 	stw	r4,24(r16)
10102170:	183fe11e 	bne	r3,zero,101020f8 <__swsetup_r+0x60>
10102174:	10c0200c 	andi	r3,r2,128
10102178:	0005883a 	mov	r2,zero
1010217c:	183fdf26 	beq	r3,zero,101020fc <__swsetup_r+0x64>
10102180:	31801014 	ori	r6,r6,64
10102184:	8180030d 	sth	r6,12(r16)
10102188:	00bfffc4 	movi	r2,-1
1010218c:	003fdb06 	br	101020fc <__swsetup_r+0x64>
10102190:	1009883a 	mov	r4,r2
10102194:	01007140 	call	10100714 <__sinit>
10102198:	003fca06 	br	101020c4 <__swsetup_r+0x2c>
1010219c:	0009883a 	mov	r4,zero
101021a0:	003fd306 	br	101020f0 <__swsetup_r+0x58>
101021a4:	81400c17 	ldw	r5,48(r16)
101021a8:	28000626 	beq	r5,zero,101021c4 <__swsetup_r+0x12c>
101021ac:	80801004 	addi	r2,r16,64
101021b0:	28800326 	beq	r5,r2,101021c0 <__swsetup_r+0x128>
101021b4:	8809883a 	mov	r4,r17
101021b8:	01027200 	call	10102720 <_free_r>
101021bc:	8180030b 	ldhu	r6,12(r16)
101021c0:	80000c15 	stw	zero,48(r16)
101021c4:	80c00417 	ldw	r3,16(r16)
101021c8:	00bff6c4 	movi	r2,-37
101021cc:	118c703a 	and	r6,r2,r6
101021d0:	80000115 	stw	zero,4(r16)
101021d4:	80c00015 	stw	r3,0(r16)
101021d8:	003fd206 	br	10102124 <__swsetup_r+0x8c>
101021dc:	00800244 	movi	r2,9
101021e0:	88800015 	stw	r2,0(r17)
101021e4:	31801014 	ori	r6,r6,64
101021e8:	8180030d 	sth	r6,12(r16)
101021ec:	00bfffc4 	movi	r2,-1
101021f0:	003fc206 	br	101020fc <__swsetup_r+0x64>

101021f4 <_close_r>:
101021f4:	defffe04 	addi	sp,sp,-8
101021f8:	dc000015 	stw	r16,0(sp)
101021fc:	00840474 	movhi	r2,4113
10102200:	2021883a 	mov	r16,r4
10102204:	2809883a 	mov	r4,r5
10102208:	dfc00115 	stw	ra,4(sp)
1010220c:	10228b15 	stw	zero,-30164(r2)
10102210:	0102f8c0 	call	10102f8c <close>
10102214:	10ffffd8 	cmpnei	r3,r2,-1
10102218:	18000426 	beq	r3,zero,1010222c <_close_r+0x38>
1010221c:	dfc00117 	ldw	ra,4(sp)
10102220:	dc000017 	ldw	r16,0(sp)
10102224:	dec00204 	addi	sp,sp,8
10102228:	f800283a 	ret
1010222c:	00c40474 	movhi	r3,4113
10102230:	18e28b17 	ldw	r3,-30164(r3)
10102234:	183ff926 	beq	r3,zero,1010221c <_close_r+0x28>
10102238:	80c00015 	stw	r3,0(r16)
1010223c:	dfc00117 	ldw	ra,4(sp)
10102240:	dc000017 	ldw	r16,0(sp)
10102244:	dec00204 	addi	sp,sp,8
10102248:	f800283a 	ret

1010224c <_fclose_r>:
1010224c:	defffc04 	addi	sp,sp,-16
10102250:	dfc00315 	stw	ra,12(sp)
10102254:	dc800215 	stw	r18,8(sp)
10102258:	dc400115 	stw	r17,4(sp)
1010225c:	dc000015 	stw	r16,0(sp)
10102260:	28000726 	beq	r5,zero,10102280 <_fclose_r+0x34>
10102264:	2821883a 	mov	r16,r5
10102268:	2023883a 	mov	r17,r4
1010226c:	20000226 	beq	r4,zero,10102278 <_fclose_r+0x2c>
10102270:	20800e17 	ldw	r2,56(r4)
10102274:	10002726 	beq	r2,zero,10102314 <_fclose_r+0xc8>
10102278:	8080030f 	ldh	r2,12(r16)
1010227c:	1000081e 	bne	r2,zero,101022a0 <_fclose_r+0x54>
10102280:	0025883a 	mov	r18,zero
10102284:	9005883a 	mov	r2,r18
10102288:	dfc00317 	ldw	ra,12(sp)
1010228c:	dc800217 	ldw	r18,8(sp)
10102290:	dc400117 	ldw	r17,4(sp)
10102294:	dc000017 	ldw	r16,0(sp)
10102298:	dec00404 	addi	sp,sp,16
1010229c:	f800283a 	ret
101022a0:	800b883a 	mov	r5,r16
101022a4:	8809883a 	mov	r4,r17
101022a8:	01023540 	call	10102354 <__sflush_r>
101022ac:	80c00b17 	ldw	r3,44(r16)
101022b0:	1025883a 	mov	r18,r2
101022b4:	18000426 	beq	r3,zero,101022c8 <_fclose_r+0x7c>
101022b8:	81400717 	ldw	r5,28(r16)
101022bc:	8809883a 	mov	r4,r17
101022c0:	183ee83a 	callr	r3
101022c4:	10001716 	blt	r2,zero,10102324 <_fclose_r+0xd8>
101022c8:	8080030b 	ldhu	r2,12(r16)
101022cc:	1080200c 	andi	r2,r2,128
101022d0:	1000181e 	bne	r2,zero,10102334 <_fclose_r+0xe8>
101022d4:	81400c17 	ldw	r5,48(r16)
101022d8:	28000526 	beq	r5,zero,101022f0 <_fclose_r+0xa4>
101022dc:	80801004 	addi	r2,r16,64
101022e0:	28800226 	beq	r5,r2,101022ec <_fclose_r+0xa0>
101022e4:	8809883a 	mov	r4,r17
101022e8:	01027200 	call	10102720 <_free_r>
101022ec:	80000c15 	stw	zero,48(r16)
101022f0:	81401117 	ldw	r5,68(r16)
101022f4:	28000326 	beq	r5,zero,10102304 <_fclose_r+0xb8>
101022f8:	8809883a 	mov	r4,r17
101022fc:	01027200 	call	10102720 <_free_r>
10102300:	80001115 	stw	zero,68(r16)
10102304:	01007240 	call	10100724 <__sfp_lock_acquire>
10102308:	8000030d 	sth	zero,12(r16)
1010230c:	01007280 	call	10100728 <__sfp_lock_release>
10102310:	003fdc06 	br	10102284 <_fclose_r+0x38>
10102314:	01007140 	call	10100714 <__sinit>
10102318:	8080030f 	ldh	r2,12(r16)
1010231c:	103fd826 	beq	r2,zero,10102280 <_fclose_r+0x34>
10102320:	003fdf06 	br	101022a0 <_fclose_r+0x54>
10102324:	8080030b 	ldhu	r2,12(r16)
10102328:	04bfffc4 	movi	r18,-1
1010232c:	1080200c 	andi	r2,r2,128
10102330:	103fe826 	beq	r2,zero,101022d4 <_fclose_r+0x88>
10102334:	81400417 	ldw	r5,16(r16)
10102338:	8809883a 	mov	r4,r17
1010233c:	01027200 	call	10102720 <_free_r>
10102340:	003fe406 	br	101022d4 <_fclose_r+0x88>

10102344 <fclose>:
10102344:	00840434 	movhi	r2,4112
10102348:	200b883a 	mov	r5,r4
1010234c:	111be017 	ldw	r4,28544(r2)
10102350:	010224c1 	jmpi	1010224c <_fclose_r>

10102354 <__sflush_r>:
10102354:	2880030b 	ldhu	r2,12(r5)
10102358:	defffb04 	addi	sp,sp,-20
1010235c:	dcc00315 	stw	r19,12(sp)
10102360:	dc000015 	stw	r16,0(sp)
10102364:	dfc00415 	stw	ra,16(sp)
10102368:	dc800215 	stw	r18,8(sp)
1010236c:	dc400115 	stw	r17,4(sp)
10102370:	10c0020c 	andi	r3,r2,8
10102374:	2821883a 	mov	r16,r5
10102378:	2027883a 	mov	r19,r4
1010237c:	18003f1e 	bne	r3,zero,1010247c <__sflush_r+0x128>
10102380:	28c00117 	ldw	r3,4(r5)
10102384:	10820014 	ori	r2,r2,2048
10102388:	2880030d 	sth	r2,12(r5)
1010238c:	00c0550e 	bge	zero,r3,101024e4 <__sflush_r+0x190>
10102390:	82000a17 	ldw	r8,40(r16)
10102394:	40003126 	beq	r8,zero,1010245c <__sflush_r+0x108>
10102398:	9c400017 	ldw	r17,0(r19)
1010239c:	1104000c 	andi	r4,r2,4096
101023a0:	98000015 	stw	zero,0(r19)
101023a4:	81400717 	ldw	r5,28(r16)
101023a8:	1007883a 	mov	r3,r2
101023ac:	2000521e 	bne	r4,zero,101024f8 <__sflush_r+0x1a4>
101023b0:	01c00044 	movi	r7,1
101023b4:	000d883a 	mov	r6,zero
101023b8:	9809883a 	mov	r4,r19
101023bc:	403ee83a 	callr	r8
101023c0:	10ffffd8 	cmpnei	r3,r2,-1
101023c4:	18005826 	beq	r3,zero,10102528 <__sflush_r+0x1d4>
101023c8:	80c0030b 	ldhu	r3,12(r16)
101023cc:	82000a17 	ldw	r8,40(r16)
101023d0:	81400717 	ldw	r5,28(r16)
101023d4:	18c0010c 	andi	r3,r3,4
101023d8:	18000626 	beq	r3,zero,101023f4 <__sflush_r+0xa0>
101023dc:	81000117 	ldw	r4,4(r16)
101023e0:	80c00c17 	ldw	r3,48(r16)
101023e4:	1105c83a 	sub	r2,r2,r4
101023e8:	18000226 	beq	r3,zero,101023f4 <__sflush_r+0xa0>
101023ec:	80c00f17 	ldw	r3,60(r16)
101023f0:	10c5c83a 	sub	r2,r2,r3
101023f4:	100d883a 	mov	r6,r2
101023f8:	000f883a 	mov	r7,zero
101023fc:	9809883a 	mov	r4,r19
10102400:	403ee83a 	callr	r8
10102404:	10ffffd8 	cmpnei	r3,r2,-1
10102408:	18003d1e 	bne	r3,zero,10102500 <__sflush_r+0x1ac>
1010240c:	99000017 	ldw	r4,0(r19)
10102410:	80c0030b 	ldhu	r3,12(r16)
10102414:	20004e26 	beq	r4,zero,10102550 <__sflush_r+0x1fc>
10102418:	21400760 	cmpeqi	r5,r4,29
1010241c:	2800021e 	bne	r5,zero,10102428 <__sflush_r+0xd4>
10102420:	210005a0 	cmpeqi	r4,r4,22
10102424:	20002c26 	beq	r4,zero,101024d8 <__sflush_r+0x184>
10102428:	80800417 	ldw	r2,16(r16)
1010242c:	18fdffcc 	andi	r3,r3,63487
10102430:	80c0030d 	sth	r3,12(r16)
10102434:	80000115 	stw	zero,4(r16)
10102438:	80800015 	stw	r2,0(r16)
1010243c:	81400c17 	ldw	r5,48(r16)
10102440:	9c400015 	stw	r17,0(r19)
10102444:	28000526 	beq	r5,zero,1010245c <__sflush_r+0x108>
10102448:	80801004 	addi	r2,r16,64
1010244c:	28800226 	beq	r5,r2,10102458 <__sflush_r+0x104>
10102450:	9809883a 	mov	r4,r19
10102454:	01027200 	call	10102720 <_free_r>
10102458:	80000c15 	stw	zero,48(r16)
1010245c:	0005883a 	mov	r2,zero
10102460:	dfc00417 	ldw	ra,16(sp)
10102464:	dcc00317 	ldw	r19,12(sp)
10102468:	dc800217 	ldw	r18,8(sp)
1010246c:	dc400117 	ldw	r17,4(sp)
10102470:	dc000017 	ldw	r16,0(sp)
10102474:	dec00504 	addi	sp,sp,20
10102478:	f800283a 	ret
1010247c:	2c800417 	ldw	r18,16(r5)
10102480:	903ff626 	beq	r18,zero,1010245c <__sflush_r+0x108>
10102484:	2c400017 	ldw	r17,0(r5)
10102488:	108000cc 	andi	r2,r2,3
1010248c:	2c800015 	stw	r18,0(r5)
10102490:	8ca3c83a 	sub	r17,r17,r18
10102494:	1000161e 	bne	r2,zero,101024f0 <__sflush_r+0x19c>
10102498:	28800517 	ldw	r2,20(r5)
1010249c:	80800215 	stw	r2,8(r16)
101024a0:	04400316 	blt	zero,r17,101024b0 <__sflush_r+0x15c>
101024a4:	003fed06 	br	1010245c <__sflush_r+0x108>
101024a8:	90a5883a 	add	r18,r18,r2
101024ac:	047feb0e 	bge	zero,r17,1010245c <__sflush_r+0x108>
101024b0:	80800917 	ldw	r2,36(r16)
101024b4:	81400717 	ldw	r5,28(r16)
101024b8:	880f883a 	mov	r7,r17
101024bc:	900d883a 	mov	r6,r18
101024c0:	9809883a 	mov	r4,r19
101024c4:	103ee83a 	callr	r2
101024c8:	88a3c83a 	sub	r17,r17,r2
101024cc:	00bff616 	blt	zero,r2,101024a8 <__sflush_r+0x154>
101024d0:	80c0030b 	ldhu	r3,12(r16)
101024d4:	00bfffc4 	movi	r2,-1
101024d8:	18c01014 	ori	r3,r3,64
101024dc:	80c0030d 	sth	r3,12(r16)
101024e0:	003fdf06 	br	10102460 <__sflush_r+0x10c>
101024e4:	28c00f17 	ldw	r3,60(r5)
101024e8:	00ffa916 	blt	zero,r3,10102390 <__sflush_r+0x3c>
101024ec:	003fdb06 	br	1010245c <__sflush_r+0x108>
101024f0:	0005883a 	mov	r2,zero
101024f4:	003fe906 	br	1010249c <__sflush_r+0x148>
101024f8:	80801417 	ldw	r2,80(r16)
101024fc:	003fb506 	br	101023d4 <__sflush_r+0x80>
10102500:	80c0030b 	ldhu	r3,12(r16)
10102504:	81000417 	ldw	r4,16(r16)
10102508:	80000115 	stw	zero,4(r16)
1010250c:	197dffcc 	andi	r5,r3,63487
10102510:	8140030d 	sth	r5,12(r16)
10102514:	81000015 	stw	r4,0(r16)
10102518:	18c4000c 	andi	r3,r3,4096
1010251c:	183fc726 	beq	r3,zero,1010243c <__sflush_r+0xe8>
10102520:	80801415 	stw	r2,80(r16)
10102524:	003fc506 	br	1010243c <__sflush_r+0xe8>
10102528:	98c00017 	ldw	r3,0(r19)
1010252c:	183fa626 	beq	r3,zero,101023c8 <__sflush_r+0x74>
10102530:	19000760 	cmpeqi	r4,r3,29
10102534:	20000e1e 	bne	r4,zero,10102570 <__sflush_r+0x21c>
10102538:	18c00598 	cmpnei	r3,r3,22
1010253c:	18000c26 	beq	r3,zero,10102570 <__sflush_r+0x21c>
10102540:	80c0030b 	ldhu	r3,12(r16)
10102544:	18c01014 	ori	r3,r3,64
10102548:	80c0030d 	sth	r3,12(r16)
1010254c:	003fc406 	br	10102460 <__sflush_r+0x10c>
10102550:	81000417 	ldw	r4,16(r16)
10102554:	197dffcc 	andi	r5,r3,63487
10102558:	8140030d 	sth	r5,12(r16)
1010255c:	80000115 	stw	zero,4(r16)
10102560:	81000015 	stw	r4,0(r16)
10102564:	18c4000c 	andi	r3,r3,4096
10102568:	183fb426 	beq	r3,zero,1010243c <__sflush_r+0xe8>
1010256c:	003fec06 	br	10102520 <__sflush_r+0x1cc>
10102570:	9c400015 	stw	r17,0(r19)
10102574:	0005883a 	mov	r2,zero
10102578:	003fb906 	br	10102460 <__sflush_r+0x10c>

1010257c <_fflush_r>:
1010257c:	defffd04 	addi	sp,sp,-12
10102580:	dc000115 	stw	r16,4(sp)
10102584:	dfc00215 	stw	ra,8(sp)
10102588:	2021883a 	mov	r16,r4
1010258c:	20000226 	beq	r4,zero,10102598 <_fflush_r+0x1c>
10102590:	20800e17 	ldw	r2,56(r4)
10102594:	10000726 	beq	r2,zero,101025b4 <_fflush_r+0x38>
10102598:	2880030f 	ldh	r2,12(r5)
1010259c:	10000a1e 	bne	r2,zero,101025c8 <_fflush_r+0x4c>
101025a0:	0005883a 	mov	r2,zero
101025a4:	dfc00217 	ldw	ra,8(sp)
101025a8:	dc000117 	ldw	r16,4(sp)
101025ac:	dec00304 	addi	sp,sp,12
101025b0:	f800283a 	ret
101025b4:	d9400015 	stw	r5,0(sp)
101025b8:	01007140 	call	10100714 <__sinit>
101025bc:	d9400017 	ldw	r5,0(sp)
101025c0:	2880030f 	ldh	r2,12(r5)
101025c4:	103ff626 	beq	r2,zero,101025a0 <_fflush_r+0x24>
101025c8:	8009883a 	mov	r4,r16
101025cc:	dfc00217 	ldw	ra,8(sp)
101025d0:	dc000117 	ldw	r16,4(sp)
101025d4:	dec00304 	addi	sp,sp,12
101025d8:	01023541 	jmpi	10102354 <__sflush_r>

101025dc <fflush>:
101025dc:	200b883a 	mov	r5,r4
101025e0:	20000326 	beq	r4,zero,101025f0 <fflush+0x14>
101025e4:	00840434 	movhi	r2,4112
101025e8:	111be017 	ldw	r4,28544(r2)
101025ec:	010257c1 	jmpi	1010257c <_fflush_r>
101025f0:	00840434 	movhi	r2,4112
101025f4:	111bdf17 	ldw	r4,28540(r2)
101025f8:	01440434 	movhi	r5,4112
101025fc:	29495f04 	addi	r5,r5,9596
10102600:	0100cc01 	jmpi	10100cc0 <_fwalk_reent>

10102604 <_malloc_trim_r>:
10102604:	defffb04 	addi	sp,sp,-20
10102608:	dcc00315 	stw	r19,12(sp)
1010260c:	04c40434 	movhi	r19,4112
10102610:	dc800215 	stw	r18,8(sp)
10102614:	dc400115 	stw	r17,4(sp)
10102618:	dc000015 	stw	r16,0(sp)
1010261c:	dfc00415 	stw	ra,16(sp)
10102620:	2821883a 	mov	r16,r5
10102624:	9cd65b04 	addi	r19,r19,22892
10102628:	2025883a 	mov	r18,r4
1010262c:	01034fc0 	call	101034fc <__malloc_lock>
10102630:	98800217 	ldw	r2,8(r19)
10102634:	14400117 	ldw	r17,4(r2)
10102638:	00bfff04 	movi	r2,-4
1010263c:	88a2703a 	and	r17,r17,r2
10102640:	8c21c83a 	sub	r16,r17,r16
10102644:	8403fbc4 	addi	r16,r16,4079
10102648:	8020d33a 	srli	r16,r16,12
1010264c:	843fffc4 	addi	r16,r16,-1
10102650:	8020933a 	slli	r16,r16,12
10102654:	80840008 	cmpgei	r2,r16,4096
10102658:	10000626 	beq	r2,zero,10102674 <_malloc_trim_r+0x70>
1010265c:	000b883a 	mov	r5,zero
10102660:	9009883a 	mov	r4,r18
10102664:	0101e9c0 	call	10101e9c <_sbrk_r>
10102668:	98c00217 	ldw	r3,8(r19)
1010266c:	1c47883a 	add	r3,r3,r17
10102670:	10c00a26 	beq	r2,r3,1010269c <_malloc_trim_r+0x98>
10102674:	9009883a 	mov	r4,r18
10102678:	01035200 	call	10103520 <__malloc_unlock>
1010267c:	0005883a 	mov	r2,zero
10102680:	dfc00417 	ldw	ra,16(sp)
10102684:	dcc00317 	ldw	r19,12(sp)
10102688:	dc800217 	ldw	r18,8(sp)
1010268c:	dc400117 	ldw	r17,4(sp)
10102690:	dc000017 	ldw	r16,0(sp)
10102694:	dec00504 	addi	sp,sp,20
10102698:	f800283a 	ret
1010269c:	040bc83a 	sub	r5,zero,r16
101026a0:	9009883a 	mov	r4,r18
101026a4:	0101e9c0 	call	10101e9c <_sbrk_r>
101026a8:	10bfffd8 	cmpnei	r2,r2,-1
101026ac:	10000d26 	beq	r2,zero,101026e4 <_malloc_trim_r+0xe0>
101026b0:	00840474 	movhi	r2,4113
101026b4:	10a29317 	ldw	r2,-30132(r2)
101026b8:	98c00217 	ldw	r3,8(r19)
101026bc:	8c23c83a 	sub	r17,r17,r16
101026c0:	8c400054 	ori	r17,r17,1
101026c4:	1421c83a 	sub	r16,r2,r16
101026c8:	1c400115 	stw	r17,4(r3)
101026cc:	00840474 	movhi	r2,4113
101026d0:	9009883a 	mov	r4,r18
101026d4:	14229315 	stw	r16,-30132(r2)
101026d8:	01035200 	call	10103520 <__malloc_unlock>
101026dc:	00800044 	movi	r2,1
101026e0:	003fe706 	br	10102680 <_malloc_trim_r+0x7c>
101026e4:	000b883a 	mov	r5,zero
101026e8:	9009883a 	mov	r4,r18
101026ec:	0101e9c0 	call	10101e9c <_sbrk_r>
101026f0:	99000217 	ldw	r4,8(r19)
101026f4:	1107c83a 	sub	r3,r2,r4
101026f8:	19400410 	cmplti	r5,r3,16
101026fc:	283fdd1e 	bne	r5,zero,10102674 <_malloc_trim_r+0x70>
10102700:	01440434 	movhi	r5,4112
10102704:	295be117 	ldw	r5,28548(r5)
10102708:	18c00054 	ori	r3,r3,1
1010270c:	20c00115 	stw	r3,4(r4)
10102710:	1145c83a 	sub	r2,r2,r5
10102714:	01440474 	movhi	r5,4113
10102718:	28a29315 	stw	r2,-30132(r5)
1010271c:	003fd506 	br	10102674 <_malloc_trim_r+0x70>

10102720 <_free_r>:
10102720:	28004f26 	beq	r5,zero,10102860 <_free_r+0x140>
10102724:	defffd04 	addi	sp,sp,-12
10102728:	dc400115 	stw	r17,4(sp)
1010272c:	dc000015 	stw	r16,0(sp)
10102730:	2023883a 	mov	r17,r4
10102734:	2821883a 	mov	r16,r5
10102738:	dfc00215 	stw	ra,8(sp)
1010273c:	01034fc0 	call	101034fc <__malloc_lock>
10102740:	81ffff17 	ldw	r7,-4(r16)
10102744:	00bfff84 	movi	r2,-2
10102748:	80fffe04 	addi	r3,r16,-8
1010274c:	3884703a 	and	r2,r7,r2
10102750:	01040434 	movhi	r4,4112
10102754:	188d883a 	add	r6,r3,r2
10102758:	21165b04 	addi	r4,r4,22892
1010275c:	31400117 	ldw	r5,4(r6)
10102760:	22000217 	ldw	r8,8(r4)
10102764:	027fff04 	movi	r9,-4
10102768:	2a4a703a 	and	r5,r5,r9
1010276c:	41806426 	beq	r8,r6,10102900 <_free_r+0x1e0>
10102770:	31400115 	stw	r5,4(r6)
10102774:	39c0004c 	andi	r7,r7,1
10102778:	3151883a 	add	r8,r6,r5
1010277c:	3800281e 	bne	r7,zero,10102820 <_free_r+0x100>
10102780:	82bffe17 	ldw	r10,-8(r16)
10102784:	42000117 	ldw	r8,4(r8)
10102788:	01c40434 	movhi	r7,4112
1010278c:	1a87c83a 	sub	r3,r3,r10
10102790:	1a400217 	ldw	r9,8(r3)
10102794:	39d65d04 	addi	r7,r7,22900
10102798:	1285883a 	add	r2,r2,r10
1010279c:	4200004c 	andi	r8,r8,1
101027a0:	49c04c26 	beq	r9,r7,101028d4 <_free_r+0x1b4>
101027a4:	1a800317 	ldw	r10,12(r3)
101027a8:	4a800315 	stw	r10,12(r9)
101027ac:	52400215 	stw	r9,8(r10)
101027b0:	40007126 	beq	r8,zero,10102978 <_free_r+0x258>
101027b4:	11400054 	ori	r5,r2,1
101027b8:	19400115 	stw	r5,4(r3)
101027bc:	30800015 	stw	r2,0(r6)
101027c0:	11408028 	cmpgeui	r5,r2,512
101027c4:	28002c1e 	bne	r5,zero,10102878 <_free_r+0x158>
101027c8:	100ad0fa 	srli	r5,r2,3
101027cc:	100cd17a 	srli	r6,r2,5
101027d0:	00800044 	movi	r2,1
101027d4:	29400044 	addi	r5,r5,1
101027d8:	280a90fa 	slli	r5,r5,3
101027dc:	21c00117 	ldw	r7,4(r4)
101027e0:	1184983a 	sll	r2,r2,r6
101027e4:	214b883a 	add	r5,r4,r5
101027e8:	29800017 	ldw	r6,0(r5)
101027ec:	11c4b03a 	or	r2,r2,r7
101027f0:	29fffe04 	addi	r7,r5,-8
101027f4:	19c00315 	stw	r7,12(r3)
101027f8:	19800215 	stw	r6,8(r3)
101027fc:	20800115 	stw	r2,4(r4)
10102800:	28c00015 	stw	r3,0(r5)
10102804:	30c00315 	stw	r3,12(r6)
10102808:	8809883a 	mov	r4,r17
1010280c:	dfc00217 	ldw	ra,8(sp)
10102810:	dc400117 	ldw	r17,4(sp)
10102814:	dc000017 	ldw	r16,0(sp)
10102818:	dec00304 	addi	sp,sp,12
1010281c:	01035201 	jmpi	10103520 <__malloc_unlock>
10102820:	41c00117 	ldw	r7,4(r8)
10102824:	39c0004c 	andi	r7,r7,1
10102828:	38000e1e 	bne	r7,zero,10102864 <_free_r+0x144>
1010282c:	01c40434 	movhi	r7,4112
10102830:	1145883a 	add	r2,r2,r5
10102834:	39d65d04 	addi	r7,r7,22900
10102838:	31400217 	ldw	r5,8(r6)
1010283c:	12400054 	ori	r9,r2,1
10102840:	1891883a 	add	r8,r3,r2
10102844:	29c05226 	beq	r5,r7,10102990 <_free_r+0x270>
10102848:	31800317 	ldw	r6,12(r6)
1010284c:	29800315 	stw	r6,12(r5)
10102850:	31400215 	stw	r5,8(r6)
10102854:	1a400115 	stw	r9,4(r3)
10102858:	40800015 	stw	r2,0(r8)
1010285c:	003fd806 	br	101027c0 <_free_r+0xa0>
10102860:	f800283a 	ret
10102864:	11400054 	ori	r5,r2,1
10102868:	817fff15 	stw	r5,-4(r16)
1010286c:	30800015 	stw	r2,0(r6)
10102870:	11408028 	cmpgeui	r5,r2,512
10102874:	283fd426 	beq	r5,zero,101027c8 <_free_r+0xa8>
10102878:	100ad27a 	srli	r5,r2,9
1010287c:	29800168 	cmpgeui	r6,r5,5
10102880:	3000341e 	bne	r6,zero,10102954 <_free_r+0x234>
10102884:	100ad1ba 	srli	r5,r2,6
10102888:	29800e44 	addi	r6,r5,57
1010288c:	300c90fa 	slli	r6,r6,3
10102890:	29c00e04 	addi	r7,r5,56
10102894:	218d883a 	add	r6,r4,r6
10102898:	31400017 	ldw	r5,0(r6)
1010289c:	31bffe04 	addi	r6,r6,-8
101028a0:	31404226 	beq	r6,r5,101029ac <_free_r+0x28c>
101028a4:	01ffff04 	movi	r7,-4
101028a8:	29000117 	ldw	r4,4(r5)
101028ac:	21c8703a 	and	r4,r4,r7
101028b0:	1100022e 	bgeu	r2,r4,101028bc <_free_r+0x19c>
101028b4:	29400217 	ldw	r5,8(r5)
101028b8:	317ffb1e 	bne	r6,r5,101028a8 <_free_r+0x188>
101028bc:	29800317 	ldw	r6,12(r5)
101028c0:	19800315 	stw	r6,12(r3)
101028c4:	19400215 	stw	r5,8(r3)
101028c8:	30c00215 	stw	r3,8(r6)
101028cc:	28c00315 	stw	r3,12(r5)
101028d0:	003fcd06 	br	10102808 <_free_r+0xe8>
101028d4:	40004d1e 	bne	r8,zero,10102a0c <_free_r+0x2ec>
101028d8:	31000317 	ldw	r4,12(r6)
101028dc:	31800217 	ldw	r6,8(r6)
101028e0:	2885883a 	add	r2,r5,r2
101028e4:	11400054 	ori	r5,r2,1
101028e8:	31000315 	stw	r4,12(r6)
101028ec:	21800215 	stw	r6,8(r4)
101028f0:	19400115 	stw	r5,4(r3)
101028f4:	1887883a 	add	r3,r3,r2
101028f8:	18800015 	stw	r2,0(r3)
101028fc:	003fc206 	br	10102808 <_free_r+0xe8>
10102900:	39c0004c 	andi	r7,r7,1
10102904:	1145883a 	add	r2,r2,r5
10102908:	3800071e 	bne	r7,zero,10102928 <_free_r+0x208>
1010290c:	81fffe17 	ldw	r7,-8(r16)
10102910:	19c7c83a 	sub	r3,r3,r7
10102914:	19400317 	ldw	r5,12(r3)
10102918:	19800217 	ldw	r6,8(r3)
1010291c:	11c5883a 	add	r2,r2,r7
10102920:	31400315 	stw	r5,12(r6)
10102924:	29800215 	stw	r6,8(r5)
10102928:	01440434 	movhi	r5,4112
1010292c:	11800054 	ori	r6,r2,1
10102930:	295be217 	ldw	r5,28552(r5)
10102934:	19800115 	stw	r6,4(r3)
10102938:	20c00215 	stw	r3,8(r4)
1010293c:	117fb236 	bltu	r2,r5,10102808 <_free_r+0xe8>
10102940:	00840474 	movhi	r2,4113
10102944:	11628a17 	ldw	r5,-30168(r2)
10102948:	8809883a 	mov	r4,r17
1010294c:	01026040 	call	10102604 <_malloc_trim_r>
10102950:	003fad06 	br	10102808 <_free_r+0xe8>
10102954:	29800568 	cmpgeui	r6,r5,21
10102958:	30000926 	beq	r6,zero,10102980 <_free_r+0x260>
1010295c:	29801568 	cmpgeui	r6,r5,85
10102960:	3000191e 	bne	r6,zero,101029c8 <_free_r+0x2a8>
10102964:	100ad33a 	srli	r5,r2,12
10102968:	29801bc4 	addi	r6,r5,111
1010296c:	300c90fa 	slli	r6,r6,3
10102970:	29c01b84 	addi	r7,r5,110
10102974:	003fc706 	br	10102894 <_free_r+0x174>
10102978:	1145883a 	add	r2,r2,r5
1010297c:	003fae06 	br	10102838 <_free_r+0x118>
10102980:	29801704 	addi	r6,r5,92
10102984:	300c90fa 	slli	r6,r6,3
10102988:	29c016c4 	addi	r7,r5,91
1010298c:	003fc106 	br	10102894 <_free_r+0x174>
10102990:	20c00515 	stw	r3,20(r4)
10102994:	20c00415 	stw	r3,16(r4)
10102998:	19c00315 	stw	r7,12(r3)
1010299c:	19c00215 	stw	r7,8(r3)
101029a0:	1a400115 	stw	r9,4(r3)
101029a4:	40800015 	stw	r2,0(r8)
101029a8:	003f9706 	br	10102808 <_free_r+0xe8>
101029ac:	380fd0ba 	srai	r7,r7,2
101029b0:	00800044 	movi	r2,1
101029b4:	22000117 	ldw	r8,4(r4)
101029b8:	11ce983a 	sll	r7,r2,r7
101029bc:	3a0eb03a 	or	r7,r7,r8
101029c0:	21c00115 	stw	r7,4(r4)
101029c4:	003fbe06 	br	101028c0 <_free_r+0x1a0>
101029c8:	29805568 	cmpgeui	r6,r5,341
101029cc:	3000051e 	bne	r6,zero,101029e4 <_free_r+0x2c4>
101029d0:	100ad3fa 	srli	r5,r2,15
101029d4:	29801e04 	addi	r6,r5,120
101029d8:	300c90fa 	slli	r6,r6,3
101029dc:	29c01dc4 	addi	r7,r5,119
101029e0:	003fac06 	br	10102894 <_free_r+0x174>
101029e4:	29415568 	cmpgeui	r5,r5,1365
101029e8:	2800051e 	bne	r5,zero,10102a00 <_free_r+0x2e0>
101029ec:	100ad4ba 	srli	r5,r2,18
101029f0:	29801f44 	addi	r6,r5,125
101029f4:	300c90fa 	slli	r6,r6,3
101029f8:	29c01f04 	addi	r7,r5,124
101029fc:	003fa506 	br	10102894 <_free_r+0x174>
10102a00:	0180fe04 	movi	r6,1016
10102a04:	01c01f84 	movi	r7,126
10102a08:	003fa206 	br	10102894 <_free_r+0x174>
10102a0c:	11000054 	ori	r4,r2,1
10102a10:	19000115 	stw	r4,4(r3)
10102a14:	30800015 	stw	r2,0(r6)
10102a18:	003f7b06 	br	10102808 <_free_r+0xe8>

10102a1c <_lseek_r>:
10102a1c:	2807883a 	mov	r3,r5
10102a20:	defffe04 	addi	sp,sp,-8
10102a24:	dc000015 	stw	r16,0(sp)
10102a28:	300b883a 	mov	r5,r6
10102a2c:	00840474 	movhi	r2,4113
10102a30:	380d883a 	mov	r6,r7
10102a34:	2021883a 	mov	r16,r4
10102a38:	1809883a 	mov	r4,r3
10102a3c:	dfc00115 	stw	ra,4(sp)
10102a40:	10228b15 	stw	zero,-30164(r2)
10102a44:	01033a00 	call	101033a0 <lseek>
10102a48:	10ffffd8 	cmpnei	r3,r2,-1
10102a4c:	18000426 	beq	r3,zero,10102a60 <_lseek_r+0x44>
10102a50:	dfc00117 	ldw	ra,4(sp)
10102a54:	dc000017 	ldw	r16,0(sp)
10102a58:	dec00204 	addi	sp,sp,8
10102a5c:	f800283a 	ret
10102a60:	00c40474 	movhi	r3,4113
10102a64:	18e28b17 	ldw	r3,-30164(r3)
10102a68:	183ff926 	beq	r3,zero,10102a50 <_lseek_r+0x34>
10102a6c:	80c00015 	stw	r3,0(r16)
10102a70:	dfc00117 	ldw	ra,4(sp)
10102a74:	dc000017 	ldw	r16,0(sp)
10102a78:	dec00204 	addi	sp,sp,8
10102a7c:	f800283a 	ret

10102a80 <__swhatbuf_r>:
10102a80:	deffea04 	addi	sp,sp,-88
10102a84:	dc001215 	stw	r16,72(sp)
10102a88:	2821883a 	mov	r16,r5
10102a8c:	2940038f 	ldh	r5,14(r5)
10102a90:	dc801415 	stw	r18,80(sp)
10102a94:	dc401315 	stw	r17,76(sp)
10102a98:	dfc01515 	stw	ra,84(sp)
10102a9c:	3023883a 	mov	r17,r6
10102aa0:	3825883a 	mov	r18,r7
10102aa4:	28001016 	blt	r5,zero,10102ae8 <__swhatbuf_r+0x68>
10102aa8:	d80d883a 	mov	r6,sp
10102aac:	0102cbc0 	call	10102cbc <_fstat_r>
10102ab0:	10000d16 	blt	r2,zero,10102ae8 <__swhatbuf_r+0x68>
10102ab4:	d8c00117 	ldw	r3,4(sp)
10102ab8:	00820004 	movi	r2,2048
10102abc:	18fc000c 	andi	r3,r3,61440
10102ac0:	18c80020 	cmpeqi	r3,r3,8192
10102ac4:	90c00015 	stw	r3,0(r18)
10102ac8:	00c10004 	movi	r3,1024
10102acc:	88c00015 	stw	r3,0(r17)
10102ad0:	dfc01517 	ldw	ra,84(sp)
10102ad4:	dc801417 	ldw	r18,80(sp)
10102ad8:	dc401317 	ldw	r17,76(sp)
10102adc:	dc001217 	ldw	r16,72(sp)
10102ae0:	dec01604 	addi	sp,sp,88
10102ae4:	f800283a 	ret
10102ae8:	8080030b 	ldhu	r2,12(r16)
10102aec:	90000015 	stw	zero,0(r18)
10102af0:	1080200c 	andi	r2,r2,128
10102af4:	10000426 	beq	r2,zero,10102b08 <__swhatbuf_r+0x88>
10102af8:	00801004 	movi	r2,64
10102afc:	88800015 	stw	r2,0(r17)
10102b00:	0005883a 	mov	r2,zero
10102b04:	003ff206 	br	10102ad0 <__swhatbuf_r+0x50>
10102b08:	00810004 	movi	r2,1024
10102b0c:	88800015 	stw	r2,0(r17)
10102b10:	0005883a 	mov	r2,zero
10102b14:	003fee06 	br	10102ad0 <__swhatbuf_r+0x50>

10102b18 <__smakebuf_r>:
10102b18:	2880030b 	ldhu	r2,12(r5)
10102b1c:	defffa04 	addi	sp,sp,-24
10102b20:	dc000215 	stw	r16,8(sp)
10102b24:	dfc00515 	stw	ra,20(sp)
10102b28:	dc800415 	stw	r18,16(sp)
10102b2c:	dc400315 	stw	r17,12(sp)
10102b30:	1080008c 	andi	r2,r2,2
10102b34:	2821883a 	mov	r16,r5
10102b38:	10000b26 	beq	r2,zero,10102b68 <__smakebuf_r+0x50>
10102b3c:	288010c4 	addi	r2,r5,67
10102b40:	28800015 	stw	r2,0(r5)
10102b44:	28800415 	stw	r2,16(r5)
10102b48:	00800044 	movi	r2,1
10102b4c:	28800515 	stw	r2,20(r5)
10102b50:	dfc00517 	ldw	ra,20(sp)
10102b54:	dc800417 	ldw	r18,16(sp)
10102b58:	dc400317 	ldw	r17,12(sp)
10102b5c:	dc000217 	ldw	r16,8(sp)
10102b60:	dec00604 	addi	sp,sp,24
10102b64:	f800283a 	ret
10102b68:	d9c00104 	addi	r7,sp,4
10102b6c:	d80d883a 	mov	r6,sp
10102b70:	2023883a 	mov	r17,r4
10102b74:	0102a800 	call	10102a80 <__swhatbuf_r>
10102b78:	d9000117 	ldw	r4,4(sp)
10102b7c:	1025883a 	mov	r18,r2
10102b80:	2000131e 	bne	r4,zero,10102bd0 <__smakebuf_r+0xb8>
10102b84:	d9400017 	ldw	r5,0(sp)
10102b88:	8809883a 	mov	r4,r17
10102b8c:	0100d680 	call	10100d68 <_malloc_r>
10102b90:	10001c26 	beq	r2,zero,10102c04 <__smakebuf_r+0xec>
10102b94:	01040434 	movhi	r4,4112
10102b98:	21010404 	addi	r4,r4,1040
10102b9c:	80c0030b 	ldhu	r3,12(r16)
10102ba0:	89000f15 	stw	r4,60(r17)
10102ba4:	80800015 	stw	r2,0(r16)
10102ba8:	80800415 	stw	r2,16(r16)
10102bac:	d8800017 	ldw	r2,0(sp)
10102bb0:	d9400117 	ldw	r5,4(sp)
10102bb4:	18c02014 	ori	r3,r3,128
10102bb8:	80c0030d 	sth	r3,12(r16)
10102bbc:	80800515 	stw	r2,20(r16)
10102bc0:	28001d1e 	bne	r5,zero,10102c38 <__smakebuf_r+0x120>
10102bc4:	90c6b03a 	or	r3,r18,r3
10102bc8:	80c0030d 	sth	r3,12(r16)
10102bcc:	003fe006 	br	10102b50 <__smakebuf_r+0x38>
10102bd0:	8140038f 	ldh	r5,14(r16)
10102bd4:	8809883a 	mov	r4,r17
10102bd8:	0102d1c0 	call	10102d1c <_isatty_r>
10102bdc:	103fe926 	beq	r2,zero,10102b84 <__smakebuf_r+0x6c>
10102be0:	8080030b 	ldhu	r2,12(r16)
10102be4:	80c010c4 	addi	r3,r16,67
10102be8:	80c00015 	stw	r3,0(r16)
10102bec:	10800054 	ori	r2,r2,1
10102bf0:	8080030d 	sth	r2,12(r16)
10102bf4:	00800044 	movi	r2,1
10102bf8:	80c00415 	stw	r3,16(r16)
10102bfc:	80800515 	stw	r2,20(r16)
10102c00:	003fe006 	br	10102b84 <__smakebuf_r+0x6c>
10102c04:	8080030b 	ldhu	r2,12(r16)
10102c08:	10c0800c 	andi	r3,r2,512
10102c0c:	183fd01e 	bne	r3,zero,10102b50 <__smakebuf_r+0x38>
10102c10:	00ffff04 	movi	r3,-4
10102c14:	10c4703a 	and	r2,r2,r3
10102c18:	10800094 	ori	r2,r2,2
10102c1c:	80c010c4 	addi	r3,r16,67
10102c20:	8080030d 	sth	r2,12(r16)
10102c24:	00800044 	movi	r2,1
10102c28:	80c00015 	stw	r3,0(r16)
10102c2c:	80c00415 	stw	r3,16(r16)
10102c30:	80800515 	stw	r2,20(r16)
10102c34:	003fc606 	br	10102b50 <__smakebuf_r+0x38>
10102c38:	8140038f 	ldh	r5,14(r16)
10102c3c:	8809883a 	mov	r4,r17
10102c40:	0102d1c0 	call	10102d1c <_isatty_r>
10102c44:	80c0030b 	ldhu	r3,12(r16)
10102c48:	103fde26 	beq	r2,zero,10102bc4 <__smakebuf_r+0xac>
10102c4c:	18ffff0c 	andi	r3,r3,65532
10102c50:	18c00054 	ori	r3,r3,1
10102c54:	003fdb06 	br	10102bc4 <__smakebuf_r+0xac>

10102c58 <_read_r>:
10102c58:	2807883a 	mov	r3,r5
10102c5c:	defffe04 	addi	sp,sp,-8
10102c60:	dc000015 	stw	r16,0(sp)
10102c64:	300b883a 	mov	r5,r6
10102c68:	00840474 	movhi	r2,4113
10102c6c:	380d883a 	mov	r6,r7
10102c70:	2021883a 	mov	r16,r4
10102c74:	1809883a 	mov	r4,r3
10102c78:	dfc00115 	stw	ra,4(sp)
10102c7c:	10228b15 	stw	zero,-30164(r2)
10102c80:	01035800 	call	10103580 <read>
10102c84:	10ffffd8 	cmpnei	r3,r2,-1
10102c88:	18000426 	beq	r3,zero,10102c9c <_read_r+0x44>
10102c8c:	dfc00117 	ldw	ra,4(sp)
10102c90:	dc000017 	ldw	r16,0(sp)
10102c94:	dec00204 	addi	sp,sp,8
10102c98:	f800283a 	ret
10102c9c:	00c40474 	movhi	r3,4113
10102ca0:	18e28b17 	ldw	r3,-30164(r3)
10102ca4:	183ff926 	beq	r3,zero,10102c8c <_read_r+0x34>
10102ca8:	80c00015 	stw	r3,0(r16)
10102cac:	dfc00117 	ldw	ra,4(sp)
10102cb0:	dc000017 	ldw	r16,0(sp)
10102cb4:	dec00204 	addi	sp,sp,8
10102cb8:	f800283a 	ret

10102cbc <_fstat_r>:
10102cbc:	2807883a 	mov	r3,r5
10102cc0:	defffe04 	addi	sp,sp,-8
10102cc4:	dc000015 	stw	r16,0(sp)
10102cc8:	00840474 	movhi	r2,4113
10102ccc:	300b883a 	mov	r5,r6
10102cd0:	2021883a 	mov	r16,r4
10102cd4:	1809883a 	mov	r4,r3
10102cd8:	dfc00115 	stw	ra,4(sp)
10102cdc:	10228b15 	stw	zero,-30164(r2)
10102ce0:	01030d00 	call	101030d0 <fstat>
10102ce4:	10ffffd8 	cmpnei	r3,r2,-1
10102ce8:	18000426 	beq	r3,zero,10102cfc <_fstat_r+0x40>
10102cec:	dfc00117 	ldw	ra,4(sp)
10102cf0:	dc000017 	ldw	r16,0(sp)
10102cf4:	dec00204 	addi	sp,sp,8
10102cf8:	f800283a 	ret
10102cfc:	00c40474 	movhi	r3,4113
10102d00:	18e28b17 	ldw	r3,-30164(r3)
10102d04:	183ff926 	beq	r3,zero,10102cec <_fstat_r+0x30>
10102d08:	80c00015 	stw	r3,0(r16)
10102d0c:	dfc00117 	ldw	ra,4(sp)
10102d10:	dc000017 	ldw	r16,0(sp)
10102d14:	dec00204 	addi	sp,sp,8
10102d18:	f800283a 	ret

10102d1c <_isatty_r>:
10102d1c:	defffe04 	addi	sp,sp,-8
10102d20:	dc000015 	stw	r16,0(sp)
10102d24:	00840474 	movhi	r2,4113
10102d28:	2021883a 	mov	r16,r4
10102d2c:	2809883a 	mov	r4,r5
10102d30:	dfc00115 	stw	ra,4(sp)
10102d34:	10228b15 	stw	zero,-30164(r2)
10102d38:	01031c80 	call	101031c8 <isatty>
10102d3c:	10ffffd8 	cmpnei	r3,r2,-1
10102d40:	18000426 	beq	r3,zero,10102d54 <_isatty_r+0x38>
10102d44:	dfc00117 	ldw	ra,4(sp)
10102d48:	dc000017 	ldw	r16,0(sp)
10102d4c:	dec00204 	addi	sp,sp,8
10102d50:	f800283a 	ret
10102d54:	00c40474 	movhi	r3,4113
10102d58:	18e28b17 	ldw	r3,-30164(r3)
10102d5c:	183ff926 	beq	r3,zero,10102d44 <_isatty_r+0x28>
10102d60:	80c00015 	stw	r3,0(r16)
10102d64:	dfc00117 	ldw	ra,4(sp)
10102d68:	dc000017 	ldw	r16,0(sp)
10102d6c:	dec00204 	addi	sp,sp,8
10102d70:	f800283a 	ret

10102d74 <__divsi3>:
10102d74:	20001a16 	blt	r4,zero,10102de0 <__divsi3+0x6c>
10102d78:	000f883a 	mov	r7,zero
10102d7c:	2800020e 	bge	r5,zero,10102d88 <__divsi3+0x14>
10102d80:	014bc83a 	sub	r5,zero,r5
10102d84:	39c0005c 	xori	r7,r7,1
10102d88:	200d883a 	mov	r6,r4
10102d8c:	00c00044 	movi	r3,1
10102d90:	2900092e 	bgeu	r5,r4,10102db8 <__divsi3+0x44>
10102d94:	00800804 	movi	r2,32
10102d98:	00c00044 	movi	r3,1
10102d9c:	00000106 	br	10102da4 <__divsi3+0x30>
10102da0:	10001226 	beq	r2,zero,10102dec <__divsi3+0x78>
10102da4:	294b883a 	add	r5,r5,r5
10102da8:	10bfffc4 	addi	r2,r2,-1
10102dac:	18c7883a 	add	r3,r3,r3
10102db0:	293ffb36 	bltu	r5,r4,10102da0 <__divsi3+0x2c>
10102db4:	18000d26 	beq	r3,zero,10102dec <__divsi3+0x78>
10102db8:	0005883a 	mov	r2,zero
10102dbc:	31400236 	bltu	r6,r5,10102dc8 <__divsi3+0x54>
10102dc0:	314dc83a 	sub	r6,r6,r5
10102dc4:	10c4b03a 	or	r2,r2,r3
10102dc8:	1806d07a 	srli	r3,r3,1
10102dcc:	280ad07a 	srli	r5,r5,1
10102dd0:	183ffa1e 	bne	r3,zero,10102dbc <__divsi3+0x48>
10102dd4:	38000126 	beq	r7,zero,10102ddc <__divsi3+0x68>
10102dd8:	0085c83a 	sub	r2,zero,r2
10102ddc:	f800283a 	ret
10102de0:	0109c83a 	sub	r4,zero,r4
10102de4:	01c00044 	movi	r7,1
10102de8:	003fe406 	br	10102d7c <__divsi3+0x8>
10102dec:	0005883a 	mov	r2,zero
10102df0:	003ff806 	br	10102dd4 <__divsi3+0x60>

10102df4 <__modsi3>:
10102df4:	20001916 	blt	r4,zero,10102e5c <__modsi3+0x68>
10102df8:	000f883a 	mov	r7,zero
10102dfc:	2005883a 	mov	r2,r4
10102e00:	2800010e 	bge	r5,zero,10102e08 <__modsi3+0x14>
10102e04:	014bc83a 	sub	r5,zero,r5
10102e08:	00c00044 	movi	r3,1
10102e0c:	2900092e 	bgeu	r5,r4,10102e34 <__modsi3+0x40>
10102e10:	01800804 	movi	r6,32
10102e14:	00c00044 	movi	r3,1
10102e18:	00000106 	br	10102e20 <__modsi3+0x2c>
10102e1c:	30000d26 	beq	r6,zero,10102e54 <__modsi3+0x60>
10102e20:	294b883a 	add	r5,r5,r5
10102e24:	31bfffc4 	addi	r6,r6,-1
10102e28:	18c7883a 	add	r3,r3,r3
10102e2c:	293ffb36 	bltu	r5,r4,10102e1c <__modsi3+0x28>
10102e30:	18000826 	beq	r3,zero,10102e54 <__modsi3+0x60>
10102e34:	1806d07a 	srli	r3,r3,1
10102e38:	11400136 	bltu	r2,r5,10102e40 <__modsi3+0x4c>
10102e3c:	1145c83a 	sub	r2,r2,r5
10102e40:	280ad07a 	srli	r5,r5,1
10102e44:	183ffb1e 	bne	r3,zero,10102e34 <__modsi3+0x40>
10102e48:	38000126 	beq	r7,zero,10102e50 <__modsi3+0x5c>
10102e4c:	0085c83a 	sub	r2,zero,r2
10102e50:	f800283a 	ret
10102e54:	2005883a 	mov	r2,r4
10102e58:	003ffb06 	br	10102e48 <__modsi3+0x54>
10102e5c:	0109c83a 	sub	r4,zero,r4
10102e60:	01c00044 	movi	r7,1
10102e64:	003fe506 	br	10102dfc <__modsi3+0x8>

10102e68 <__udivsi3>:
10102e68:	200d883a 	mov	r6,r4
10102e6c:	2900152e 	bgeu	r5,r4,10102ec4 <__udivsi3+0x5c>
10102e70:	28001416 	blt	r5,zero,10102ec4 <__udivsi3+0x5c>
10102e74:	00800804 	movi	r2,32
10102e78:	00c00044 	movi	r3,1
10102e7c:	00000206 	br	10102e88 <__udivsi3+0x20>
10102e80:	10000e26 	beq	r2,zero,10102ebc <__udivsi3+0x54>
10102e84:	28000516 	blt	r5,zero,10102e9c <__udivsi3+0x34>
10102e88:	294b883a 	add	r5,r5,r5
10102e8c:	10bfffc4 	addi	r2,r2,-1
10102e90:	18c7883a 	add	r3,r3,r3
10102e94:	293ffa36 	bltu	r5,r4,10102e80 <__udivsi3+0x18>
10102e98:	18000826 	beq	r3,zero,10102ebc <__udivsi3+0x54>
10102e9c:	0005883a 	mov	r2,zero
10102ea0:	31400236 	bltu	r6,r5,10102eac <__udivsi3+0x44>
10102ea4:	314dc83a 	sub	r6,r6,r5
10102ea8:	10c4b03a 	or	r2,r2,r3
10102eac:	1806d07a 	srli	r3,r3,1
10102eb0:	280ad07a 	srli	r5,r5,1
10102eb4:	183ffa1e 	bne	r3,zero,10102ea0 <__udivsi3+0x38>
10102eb8:	f800283a 	ret
10102ebc:	0005883a 	mov	r2,zero
10102ec0:	f800283a 	ret
10102ec4:	00c00044 	movi	r3,1
10102ec8:	003ff406 	br	10102e9c <__udivsi3+0x34>

10102ecc <__umodsi3>:
10102ecc:	2005883a 	mov	r2,r4
10102ed0:	2900132e 	bgeu	r5,r4,10102f20 <__umodsi3+0x54>
10102ed4:	28001216 	blt	r5,zero,10102f20 <__umodsi3+0x54>
10102ed8:	01800804 	movi	r6,32
10102edc:	00c00044 	movi	r3,1
10102ee0:	00000206 	br	10102eec <__umodsi3+0x20>
10102ee4:	30000c26 	beq	r6,zero,10102f18 <__umodsi3+0x4c>
10102ee8:	28000516 	blt	r5,zero,10102f00 <__umodsi3+0x34>
10102eec:	294b883a 	add	r5,r5,r5
10102ef0:	31bfffc4 	addi	r6,r6,-1
10102ef4:	18c7883a 	add	r3,r3,r3
10102ef8:	293ffa36 	bltu	r5,r4,10102ee4 <__umodsi3+0x18>
10102efc:	18000626 	beq	r3,zero,10102f18 <__umodsi3+0x4c>
10102f00:	1806d07a 	srli	r3,r3,1
10102f04:	11400136 	bltu	r2,r5,10102f0c <__umodsi3+0x40>
10102f08:	1145c83a 	sub	r2,r2,r5
10102f0c:	280ad07a 	srli	r5,r5,1
10102f10:	183ffb1e 	bne	r3,zero,10102f00 <__umodsi3+0x34>
10102f14:	f800283a 	ret
10102f18:	2005883a 	mov	r2,r4
10102f1c:	f800283a 	ret
10102f20:	00c00044 	movi	r3,1
10102f24:	003ff606 	br	10102f00 <__umodsi3+0x34>

10102f28 <__mulsi3>:
10102f28:	0005883a 	mov	r2,zero
10102f2c:	20000726 	beq	r4,zero,10102f4c <__mulsi3+0x24>
10102f30:	20c0004c 	andi	r3,r4,1
10102f34:	2008d07a 	srli	r4,r4,1
10102f38:	18000126 	beq	r3,zero,10102f40 <__mulsi3+0x18>
10102f3c:	1145883a 	add	r2,r2,r5
10102f40:	294b883a 	add	r5,r5,r5
10102f44:	203ffa1e 	bne	r4,zero,10102f30 <__mulsi3+0x8>
10102f48:	f800283a 	ret
10102f4c:	f800283a 	ret

10102f50 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10102f50:	defffe04 	addi	sp,sp,-8
10102f54:	dfc00115 	stw	ra,4(sp)
10102f58:	df000015 	stw	fp,0(sp)
10102f5c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10102f60:	d0a00917 	ldw	r2,-32732(gp)
10102f64:	10000326 	beq	r2,zero,10102f74 <alt_get_errno+0x24>
10102f68:	d0a00917 	ldw	r2,-32732(gp)
10102f6c:	103ee83a 	callr	r2
10102f70:	00000106 	br	10102f78 <alt_get_errno+0x28>
10102f74:	d0a6ac04 	addi	r2,gp,-25936
}
10102f78:	e037883a 	mov	sp,fp
10102f7c:	dfc00117 	ldw	ra,4(sp)
10102f80:	df000017 	ldw	fp,0(sp)
10102f84:	dec00204 	addi	sp,sp,8
10102f88:	f800283a 	ret

10102f8c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
10102f8c:	defffb04 	addi	sp,sp,-20
10102f90:	dfc00415 	stw	ra,16(sp)
10102f94:	df000315 	stw	fp,12(sp)
10102f98:	df000304 	addi	fp,sp,12
10102f9c:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
10102fa0:	e0bffd17 	ldw	r2,-12(fp)
10102fa4:	10000916 	blt	r2,zero,10102fcc <close+0x40>
10102fa8:	e0fffd17 	ldw	r3,-12(fp)
10102fac:	1805883a 	mov	r2,r3
10102fb0:	1085883a 	add	r2,r2,r2
10102fb4:	10c5883a 	add	r2,r2,r3
10102fb8:	100490ba 	slli	r2,r2,2
10102fbc:	00c40434 	movhi	r3,4112
10102fc0:	18d76704 	addi	r3,r3,23964
10102fc4:	10c5883a 	add	r2,r2,r3
10102fc8:	00000106 	br	10102fd0 <close+0x44>
10102fcc:	0005883a 	mov	r2,zero
10102fd0:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
10102fd4:	e0bfff17 	ldw	r2,-4(fp)
10102fd8:	10001926 	beq	r2,zero,10103040 <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
10102fdc:	e0bfff17 	ldw	r2,-4(fp)
10102fe0:	10800017 	ldw	r2,0(r2)
10102fe4:	10800417 	ldw	r2,16(r2)
10102fe8:	10000626 	beq	r2,zero,10103004 <close+0x78>
10102fec:	e0bfff17 	ldw	r2,-4(fp)
10102ff0:	10800017 	ldw	r2,0(r2)
10102ff4:	10800417 	ldw	r2,16(r2)
10102ff8:	e13fff17 	ldw	r4,-4(fp)
10102ffc:	103ee83a 	callr	r2
10103000:	00000106 	br	10103008 <close+0x7c>
10103004:	0005883a 	mov	r2,zero
10103008:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1010300c:	e13ffd17 	ldw	r4,-12(fp)
10103010:	01036880 	call	10103688 <alt_release_fd>
    if (rval < 0)
10103014:	e0bffe17 	ldw	r2,-8(fp)
10103018:	1000070e 	bge	r2,zero,10103038 <close+0xac>
    {
      ALT_ERRNO = -rval;
1010301c:	0102f500 	call	10102f50 <alt_get_errno>
10103020:	1007883a 	mov	r3,r2
10103024:	e0bffe17 	ldw	r2,-8(fp)
10103028:	0085c83a 	sub	r2,zero,r2
1010302c:	18800015 	stw	r2,0(r3)
      return -1;
10103030:	00bfffc4 	movi	r2,-1
10103034:	00000706 	br	10103054 <close+0xc8>
    }
    return 0;
10103038:	0005883a 	mov	r2,zero
1010303c:	00000506 	br	10103054 <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
10103040:	0102f500 	call	10102f50 <alt_get_errno>
10103044:	1007883a 	mov	r3,r2
10103048:	00801444 	movi	r2,81
1010304c:	18800015 	stw	r2,0(r3)
    return -1;
10103050:	00bfffc4 	movi	r2,-1
  }
}
10103054:	e037883a 	mov	sp,fp
10103058:	dfc00117 	ldw	ra,4(sp)
1010305c:	df000017 	ldw	fp,0(sp)
10103060:	dec00204 	addi	sp,sp,8
10103064:	f800283a 	ret

10103068 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
10103068:	defffc04 	addi	sp,sp,-16
1010306c:	df000315 	stw	fp,12(sp)
10103070:	df000304 	addi	fp,sp,12
10103074:	e13fff15 	stw	r4,-4(fp)
10103078:	e17ffe15 	stw	r5,-8(fp)
1010307c:	e1bffd15 	stw	r6,-12(fp)
  return len;
10103080:	e0bffd17 	ldw	r2,-12(fp)
}
10103084:	e037883a 	mov	sp,fp
10103088:	df000017 	ldw	fp,0(sp)
1010308c:	dec00104 	addi	sp,sp,4
10103090:	f800283a 	ret

10103094 <alt_get_errno>:
{
10103094:	defffe04 	addi	sp,sp,-8
10103098:	dfc00115 	stw	ra,4(sp)
1010309c:	df000015 	stw	fp,0(sp)
101030a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
101030a4:	d0a00917 	ldw	r2,-32732(gp)
101030a8:	10000326 	beq	r2,zero,101030b8 <alt_get_errno+0x24>
101030ac:	d0a00917 	ldw	r2,-32732(gp)
101030b0:	103ee83a 	callr	r2
101030b4:	00000106 	br	101030bc <alt_get_errno+0x28>
101030b8:	d0a6ac04 	addi	r2,gp,-25936
}
101030bc:	e037883a 	mov	sp,fp
101030c0:	dfc00117 	ldw	ra,4(sp)
101030c4:	df000017 	ldw	fp,0(sp)
101030c8:	dec00204 	addi	sp,sp,8
101030cc:	f800283a 	ret

101030d0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
101030d0:	defffb04 	addi	sp,sp,-20
101030d4:	dfc00415 	stw	ra,16(sp)
101030d8:	df000315 	stw	fp,12(sp)
101030dc:	df000304 	addi	fp,sp,12
101030e0:	e13ffe15 	stw	r4,-8(fp)
101030e4:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
101030e8:	e0bffe17 	ldw	r2,-8(fp)
101030ec:	10000916 	blt	r2,zero,10103114 <fstat+0x44>
101030f0:	e0fffe17 	ldw	r3,-8(fp)
101030f4:	1805883a 	mov	r2,r3
101030f8:	1085883a 	add	r2,r2,r2
101030fc:	10c5883a 	add	r2,r2,r3
10103100:	100490ba 	slli	r2,r2,2
10103104:	00c40434 	movhi	r3,4112
10103108:	18d76704 	addi	r3,r3,23964
1010310c:	10c5883a 	add	r2,r2,r3
10103110:	00000106 	br	10103118 <fstat+0x48>
10103114:	0005883a 	mov	r2,zero
10103118:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
1010311c:	e0bfff17 	ldw	r2,-4(fp)
10103120:	10001026 	beq	r2,zero,10103164 <fstat+0x94>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
10103124:	e0bfff17 	ldw	r2,-4(fp)
10103128:	10800017 	ldw	r2,0(r2)
1010312c:	10800817 	ldw	r2,32(r2)
10103130:	10000726 	beq	r2,zero,10103150 <fstat+0x80>
    {
      return fd->dev->fstat(fd, st);
10103134:	e0bfff17 	ldw	r2,-4(fp)
10103138:	10800017 	ldw	r2,0(r2)
1010313c:	10800817 	ldw	r2,32(r2)
10103140:	e17ffd17 	ldw	r5,-12(fp)
10103144:	e13fff17 	ldw	r4,-4(fp)
10103148:	103ee83a 	callr	r2
1010314c:	00000a06 	br	10103178 <fstat+0xa8>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
10103150:	e0bffd17 	ldw	r2,-12(fp)
10103154:	00c80004 	movi	r3,8192
10103158:	10c00115 	stw	r3,4(r2)
      return 0;
1010315c:	0005883a 	mov	r2,zero
10103160:	00000506 	br	10103178 <fstat+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
10103164:	01030940 	call	10103094 <alt_get_errno>
10103168:	1007883a 	mov	r3,r2
1010316c:	00801444 	movi	r2,81
10103170:	18800015 	stw	r2,0(r3)
    return -1;
10103174:	00bfffc4 	movi	r2,-1
  }
}
10103178:	e037883a 	mov	sp,fp
1010317c:	dfc00117 	ldw	ra,4(sp)
10103180:	df000017 	ldw	fp,0(sp)
10103184:	dec00204 	addi	sp,sp,8
10103188:	f800283a 	ret

1010318c <alt_get_errno>:
{
1010318c:	defffe04 	addi	sp,sp,-8
10103190:	dfc00115 	stw	ra,4(sp)
10103194:	df000015 	stw	fp,0(sp)
10103198:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010319c:	d0a00917 	ldw	r2,-32732(gp)
101031a0:	10000326 	beq	r2,zero,101031b0 <alt_get_errno+0x24>
101031a4:	d0a00917 	ldw	r2,-32732(gp)
101031a8:	103ee83a 	callr	r2
101031ac:	00000106 	br	101031b4 <alt_get_errno+0x28>
101031b0:	d0a6ac04 	addi	r2,gp,-25936
}
101031b4:	e037883a 	mov	sp,fp
101031b8:	dfc00117 	ldw	ra,4(sp)
101031bc:	df000017 	ldw	fp,0(sp)
101031c0:	dec00204 	addi	sp,sp,8
101031c4:	f800283a 	ret

101031c8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
101031c8:	deffea04 	addi	sp,sp,-88
101031cc:	dfc01515 	stw	ra,84(sp)
101031d0:	df001415 	stw	fp,80(sp)
101031d4:	df001404 	addi	fp,sp,80
101031d8:	e13fec15 	stw	r4,-80(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
101031dc:	e0bfec17 	ldw	r2,-80(fp)
101031e0:	10000916 	blt	r2,zero,10103208 <isatty+0x40>
101031e4:	e0ffec17 	ldw	r3,-80(fp)
101031e8:	1805883a 	mov	r2,r3
101031ec:	1085883a 	add	r2,r2,r2
101031f0:	10c5883a 	add	r2,r2,r3
101031f4:	100490ba 	slli	r2,r2,2
101031f8:	00c40434 	movhi	r3,4112
101031fc:	18d76704 	addi	r3,r3,23964
10103200:	10c5883a 	add	r2,r2,r3
10103204:	00000106 	br	1010320c <isatty+0x44>
10103208:	0005883a 	mov	r2,zero
1010320c:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
10103210:	e0bfff17 	ldw	r2,-4(fp)
10103214:	10000e26 	beq	r2,zero,10103250 <isatty+0x88>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
10103218:	e0bfff17 	ldw	r2,-4(fp)
1010321c:	10800017 	ldw	r2,0(r2)
10103220:	10800817 	ldw	r2,32(r2)
10103224:	1000021e 	bne	r2,zero,10103230 <isatty+0x68>
    {
      return 1;
10103228:	00800044 	movi	r2,1
1010322c:	00000d06 	br	10103264 <isatty+0x9c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
10103230:	e0bfed04 	addi	r2,fp,-76
10103234:	100b883a 	mov	r5,r2
10103238:	e13fec17 	ldw	r4,-80(fp)
1010323c:	01030d00 	call	101030d0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
10103240:	e0bfee17 	ldw	r2,-72(fp)
10103244:	10880020 	cmpeqi	r2,r2,8192
10103248:	10803fcc 	andi	r2,r2,255
1010324c:	00000506 	br	10103264 <isatty+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
10103250:	010318c0 	call	1010318c <alt_get_errno>
10103254:	1007883a 	mov	r3,r2
10103258:	00801444 	movi	r2,81
1010325c:	18800015 	stw	r2,0(r3)
    return 0;
10103260:	0005883a 	mov	r2,zero
  }
}
10103264:	e037883a 	mov	sp,fp
10103268:	dfc00117 	ldw	ra,4(sp)
1010326c:	df000017 	ldw	fp,0(sp)
10103270:	dec00204 	addi	sp,sp,8
10103274:	f800283a 	ret

10103278 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
10103278:	defffc04 	addi	sp,sp,-16
1010327c:	df000315 	stw	fp,12(sp)
10103280:	df000304 	addi	fp,sp,12
10103284:	e13fff15 	stw	r4,-4(fp)
10103288:	e17ffe15 	stw	r5,-8(fp)
1010328c:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
10103290:	e0fffe17 	ldw	r3,-8(fp)
10103294:	e0bfff17 	ldw	r2,-4(fp)
10103298:	18800c26 	beq	r3,r2,101032cc <alt_load_section+0x54>
  {
    while( to != end )
1010329c:	00000806 	br	101032c0 <alt_load_section+0x48>
    {
      *to++ = *from++;
101032a0:	e0ffff17 	ldw	r3,-4(fp)
101032a4:	18800104 	addi	r2,r3,4
101032a8:	e0bfff15 	stw	r2,-4(fp)
101032ac:	e0bffe17 	ldw	r2,-8(fp)
101032b0:	11000104 	addi	r4,r2,4
101032b4:	e13ffe15 	stw	r4,-8(fp)
101032b8:	18c00017 	ldw	r3,0(r3)
101032bc:	10c00015 	stw	r3,0(r2)
    while( to != end )
101032c0:	e0fffe17 	ldw	r3,-8(fp)
101032c4:	e0bffd17 	ldw	r2,-12(fp)
101032c8:	18bff51e 	bne	r3,r2,101032a0 <alt_load_section+0x28>
    }
  }
}
101032cc:	0001883a 	nop
101032d0:	e037883a 	mov	sp,fp
101032d4:	df000017 	ldw	fp,0(sp)
101032d8:	dec00104 	addi	sp,sp,4
101032dc:	f800283a 	ret

101032e0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
101032e0:	defffe04 	addi	sp,sp,-8
101032e4:	dfc00115 	stw	ra,4(sp)
101032e8:	df000015 	stw	fp,0(sp)
101032ec:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
101032f0:	01840434 	movhi	r6,4112
101032f4:	319bed04 	addi	r6,r6,28596
101032f8:	01440434 	movhi	r5,4112
101032fc:	29555204 	addi	r5,r5,21832
10103300:	01040434 	movhi	r4,4112
10103304:	211bed04 	addi	r4,r4,28596
10103308:	01032780 	call	10103278 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1010330c:	01840434 	movhi	r6,4112
10103310:	31808904 	addi	r6,r6,548
10103314:	01440434 	movhi	r5,4112
10103318:	29400804 	addi	r5,r5,32
1010331c:	01040434 	movhi	r4,4112
10103320:	21000804 	addi	r4,r4,32
10103324:	01032780 	call	10103278 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
10103328:	01840434 	movhi	r6,4112
1010332c:	31955204 	addi	r6,r6,21832
10103330:	01440434 	movhi	r5,4112
10103334:	29553f04 	addi	r5,r5,21756
10103338:	01040434 	movhi	r4,4112
1010333c:	21153f04 	addi	r4,r4,21756
10103340:	01032780 	call	10103278 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
10103344:	01045500 	call	10104550 <alt_dcache_flush_all>
  alt_icache_flush_all();
10103348:	010471c0 	call	1010471c <alt_icache_flush_all>
}
1010334c:	0001883a 	nop
10103350:	e037883a 	mov	sp,fp
10103354:	dfc00117 	ldw	ra,4(sp)
10103358:	df000017 	ldw	fp,0(sp)
1010335c:	dec00204 	addi	sp,sp,8
10103360:	f800283a 	ret

10103364 <alt_get_errno>:
{
10103364:	defffe04 	addi	sp,sp,-8
10103368:	dfc00115 	stw	ra,4(sp)
1010336c:	df000015 	stw	fp,0(sp)
10103370:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10103374:	d0a00917 	ldw	r2,-32732(gp)
10103378:	10000326 	beq	r2,zero,10103388 <alt_get_errno+0x24>
1010337c:	d0a00917 	ldw	r2,-32732(gp)
10103380:	103ee83a 	callr	r2
10103384:	00000106 	br	1010338c <alt_get_errno+0x28>
10103388:	d0a6ac04 	addi	r2,gp,-25936
}
1010338c:	e037883a 	mov	sp,fp
10103390:	dfc00117 	ldw	ra,4(sp)
10103394:	df000017 	ldw	fp,0(sp)
10103398:	dec00204 	addi	sp,sp,8
1010339c:	f800283a 	ret

101033a0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
101033a0:	defff904 	addi	sp,sp,-28
101033a4:	dfc00615 	stw	ra,24(sp)
101033a8:	df000515 	stw	fp,20(sp)
101033ac:	df000504 	addi	fp,sp,20
101033b0:	e13ffd15 	stw	r4,-12(fp)
101033b4:	e17ffc15 	stw	r5,-16(fp)
101033b8:	e1bffb15 	stw	r6,-20(fp)
  alt_fd* fd;
  off_t   rc = 0; 
101033bc:	e03fff15 	stw	zero,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
101033c0:	e0bffd17 	ldw	r2,-12(fp)
101033c4:	10000916 	blt	r2,zero,101033ec <lseek+0x4c>
101033c8:	e0fffd17 	ldw	r3,-12(fp)
101033cc:	1805883a 	mov	r2,r3
101033d0:	1085883a 	add	r2,r2,r2
101033d4:	10c5883a 	add	r2,r2,r3
101033d8:	100490ba 	slli	r2,r2,2
101033dc:	00c40434 	movhi	r3,4112
101033e0:	18d76704 	addi	r3,r3,23964
101033e4:	10c5883a 	add	r2,r2,r3
101033e8:	00000106 	br	101033f0 <lseek+0x50>
101033ec:	0005883a 	mov	r2,zero
101033f0:	e0bffe15 	stw	r2,-8(fp)
  
  if (fd) 
101033f4:	e0bffe17 	ldw	r2,-8(fp)
101033f8:	10001026 	beq	r2,zero,1010343c <lseek+0x9c>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
101033fc:	e0bffe17 	ldw	r2,-8(fp)
10103400:	10800017 	ldw	r2,0(r2)
10103404:	10800717 	ldw	r2,28(r2)
10103408:	10000926 	beq	r2,zero,10103430 <lseek+0x90>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
1010340c:	e0bffe17 	ldw	r2,-8(fp)
10103410:	10800017 	ldw	r2,0(r2)
10103414:	10800717 	ldw	r2,28(r2)
10103418:	e1bffb17 	ldw	r6,-20(fp)
1010341c:	e17ffc17 	ldw	r5,-16(fp)
10103420:	e13ffe17 	ldw	r4,-8(fp)
10103424:	103ee83a 	callr	r2
10103428:	e0bfff15 	stw	r2,-4(fp)
1010342c:	00000506 	br	10103444 <lseek+0xa4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
10103430:	00bfde84 	movi	r2,-134
10103434:	e0bfff15 	stw	r2,-4(fp)
10103438:	00000206 	br	10103444 <lseek+0xa4>
    }
  }
  else  
  {
    rc = -EBADFD;
1010343c:	00bfebc4 	movi	r2,-81
10103440:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
10103444:	e0bfff17 	ldw	r2,-4(fp)
10103448:	1000070e 	bge	r2,zero,10103468 <lseek+0xc8>
  {
    ALT_ERRNO = -rc;
1010344c:	01033640 	call	10103364 <alt_get_errno>
10103450:	1007883a 	mov	r3,r2
10103454:	e0bfff17 	ldw	r2,-4(fp)
10103458:	0085c83a 	sub	r2,zero,r2
1010345c:	18800015 	stw	r2,0(r3)
    rc = -1;
10103460:	00bfffc4 	movi	r2,-1
10103464:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
10103468:	e0bfff17 	ldw	r2,-4(fp)
}
1010346c:	e037883a 	mov	sp,fp
10103470:	dfc00117 	ldw	ra,4(sp)
10103474:	df000017 	ldw	fp,0(sp)
10103478:	dec00204 	addi	sp,sp,8
1010347c:	f800283a 	ret

10103480 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
10103480:	defffd04 	addi	sp,sp,-12
10103484:	dfc00215 	stw	ra,8(sp)
10103488:	df000115 	stw	fp,4(sp)
1010348c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
10103490:	0009883a 	mov	r4,zero
10103494:	01039240 	call	10103924 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
10103498:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1010349c:	01039600 	call	10103960 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
101034a0:	01840434 	movhi	r6,4112
101034a4:	31954804 	addi	r6,r6,21792
101034a8:	01440434 	movhi	r5,4112
101034ac:	29554804 	addi	r5,r5,21792
101034b0:	01040434 	movhi	r4,4112
101034b4:	21154804 	addi	r4,r4,21792
101034b8:	0104aa80 	call	10104aa8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
101034bc:	01046540 	call	10104654 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
101034c0:	01040434 	movhi	r4,4112
101034c4:	2111ae04 	addi	r4,r4,18104
101034c8:	01052540 	call	10105254 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
101034cc:	d0a6ad17 	ldw	r2,-25932(gp)
101034d0:	d0e6ae17 	ldw	r3,-25928(gp)
101034d4:	d126af17 	ldw	r4,-25924(gp)
101034d8:	200d883a 	mov	r6,r4
101034dc:	180b883a 	mov	r5,r3
101034e0:	1009883a 	mov	r4,r2
101034e4:	01002600 	call	10100260 <main>
101034e8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
101034ec:	01000044 	movi	r4,1
101034f0:	0102f8c0 	call	10102f8c <close>
  exit (result);
101034f4:	e13fff17 	ldw	r4,-4(fp)
101034f8:	01052680 	call	10105268 <exit>

101034fc <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
101034fc:	defffe04 	addi	sp,sp,-8
10103500:	df000115 	stw	fp,4(sp)
10103504:	df000104 	addi	fp,sp,4
10103508:	e13fff15 	stw	r4,-4(fp)
}
1010350c:	0001883a 	nop
10103510:	e037883a 	mov	sp,fp
10103514:	df000017 	ldw	fp,0(sp)
10103518:	dec00104 	addi	sp,sp,4
1010351c:	f800283a 	ret

10103520 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
10103520:	defffe04 	addi	sp,sp,-8
10103524:	df000115 	stw	fp,4(sp)
10103528:	df000104 	addi	fp,sp,4
1010352c:	e13fff15 	stw	r4,-4(fp)
}
10103530:	0001883a 	nop
10103534:	e037883a 	mov	sp,fp
10103538:	df000017 	ldw	fp,0(sp)
1010353c:	dec00104 	addi	sp,sp,4
10103540:	f800283a 	ret

10103544 <alt_get_errno>:
{
10103544:	defffe04 	addi	sp,sp,-8
10103548:	dfc00115 	stw	ra,4(sp)
1010354c:	df000015 	stw	fp,0(sp)
10103550:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10103554:	d0a00917 	ldw	r2,-32732(gp)
10103558:	10000326 	beq	r2,zero,10103568 <alt_get_errno+0x24>
1010355c:	d0a00917 	ldw	r2,-32732(gp)
10103560:	103ee83a 	callr	r2
10103564:	00000106 	br	1010356c <alt_get_errno+0x28>
10103568:	d0a6ac04 	addi	r2,gp,-25936
}
1010356c:	e037883a 	mov	sp,fp
10103570:	dfc00117 	ldw	ra,4(sp)
10103574:	df000017 	ldw	fp,0(sp)
10103578:	dec00204 	addi	sp,sp,8
1010357c:	f800283a 	ret

10103580 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
10103580:	defff904 	addi	sp,sp,-28
10103584:	dfc00615 	stw	ra,24(sp)
10103588:	df000515 	stw	fp,20(sp)
1010358c:	df000504 	addi	fp,sp,20
10103590:	e13ffd15 	stw	r4,-12(fp)
10103594:	e17ffc15 	stw	r5,-16(fp)
10103598:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1010359c:	e0bffd17 	ldw	r2,-12(fp)
101035a0:	10000916 	blt	r2,zero,101035c8 <read+0x48>
101035a4:	e0fffd17 	ldw	r3,-12(fp)
101035a8:	1805883a 	mov	r2,r3
101035ac:	1085883a 	add	r2,r2,r2
101035b0:	10c5883a 	add	r2,r2,r3
101035b4:	100490ba 	slli	r2,r2,2
101035b8:	00c40434 	movhi	r3,4112
101035bc:	18d76704 	addi	r3,r3,23964
101035c0:	10c5883a 	add	r2,r2,r3
101035c4:	00000106 	br	101035cc <read+0x4c>
101035c8:	0005883a 	mov	r2,zero
101035cc:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
101035d0:	e0bfff17 	ldw	r2,-4(fp)
101035d4:	10002226 	beq	r2,zero,10103660 <read+0xe0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
101035d8:	e0bfff17 	ldw	r2,-4(fp)
101035dc:	10800217 	ldw	r2,8(r2)
101035e0:	108000cc 	andi	r2,r2,3
101035e4:	10800060 	cmpeqi	r2,r2,1
101035e8:	1000181e 	bne	r2,zero,1010364c <read+0xcc>
        (fd->dev->read))
101035ec:	e0bfff17 	ldw	r2,-4(fp)
101035f0:	10800017 	ldw	r2,0(r2)
101035f4:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
101035f8:	10001426 	beq	r2,zero,1010364c <read+0xcc>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
101035fc:	e0bfff17 	ldw	r2,-4(fp)
10103600:	10800017 	ldw	r2,0(r2)
10103604:	10800517 	ldw	r2,20(r2)
10103608:	e0fffb17 	ldw	r3,-20(fp)
1010360c:	180d883a 	mov	r6,r3
10103610:	e17ffc17 	ldw	r5,-16(fp)
10103614:	e13fff17 	ldw	r4,-4(fp)
10103618:	103ee83a 	callr	r2
1010361c:	e0bffe15 	stw	r2,-8(fp)
10103620:	e0bffe17 	ldw	r2,-8(fp)
10103624:	1000070e 	bge	r2,zero,10103644 <read+0xc4>
        {
          ALT_ERRNO = -rval;
10103628:	01035440 	call	10103544 <alt_get_errno>
1010362c:	1007883a 	mov	r3,r2
10103630:	e0bffe17 	ldw	r2,-8(fp)
10103634:	0085c83a 	sub	r2,zero,r2
10103638:	18800015 	stw	r2,0(r3)
          return -1;
1010363c:	00bfffc4 	movi	r2,-1
10103640:	00000c06 	br	10103674 <read+0xf4>
        }
        return rval;
10103644:	e0bffe17 	ldw	r2,-8(fp)
10103648:	00000a06 	br	10103674 <read+0xf4>
      }
      else
      {
        ALT_ERRNO = EACCES;
1010364c:	01035440 	call	10103544 <alt_get_errno>
10103650:	1007883a 	mov	r3,r2
10103654:	00800344 	movi	r2,13
10103658:	18800015 	stw	r2,0(r3)
1010365c:	00000406 	br	10103670 <read+0xf0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
10103660:	01035440 	call	10103544 <alt_get_errno>
10103664:	1007883a 	mov	r3,r2
10103668:	00801444 	movi	r2,81
1010366c:	18800015 	stw	r2,0(r3)
  }
  return -1;
10103670:	00bfffc4 	movi	r2,-1
}
10103674:	e037883a 	mov	sp,fp
10103678:	dfc00117 	ldw	ra,4(sp)
1010367c:	df000017 	ldw	fp,0(sp)
10103680:	dec00204 	addi	sp,sp,8
10103684:	f800283a 	ret

10103688 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
10103688:	defffe04 	addi	sp,sp,-8
1010368c:	df000115 	stw	fp,4(sp)
10103690:	df000104 	addi	fp,sp,4
10103694:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
10103698:	e0bfff17 	ldw	r2,-4(fp)
1010369c:	108000d0 	cmplti	r2,r2,3
101036a0:	1000101e 	bne	r2,zero,101036e4 <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
101036a4:	e0ffff17 	ldw	r3,-4(fp)
101036a8:	1805883a 	mov	r2,r3
101036ac:	1085883a 	add	r2,r2,r2
101036b0:	10c5883a 	add	r2,r2,r3
101036b4:	100490ba 	slli	r2,r2,2
101036b8:	00c40434 	movhi	r3,4112
101036bc:	10c7883a 	add	r3,r2,r3
101036c0:	18176915 	stw	zero,23972(r3)
    alt_fd_list[fd].dev      = 0;
101036c4:	e0ffff17 	ldw	r3,-4(fp)
101036c8:	1805883a 	mov	r2,r3
101036cc:	1085883a 	add	r2,r2,r2
101036d0:	10c5883a 	add	r2,r2,r3
101036d4:	100490ba 	slli	r2,r2,2
101036d8:	00c40434 	movhi	r3,4112
101036dc:	10c7883a 	add	r3,r2,r3
101036e0:	18176715 	stw	zero,23964(r3)
  }
}
101036e4:	0001883a 	nop
101036e8:	e037883a 	mov	sp,fp
101036ec:	df000017 	ldw	fp,0(sp)
101036f0:	dec00104 	addi	sp,sp,4
101036f4:	f800283a 	ret

101036f8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
101036f8:	defff904 	addi	sp,sp,-28
101036fc:	df000615 	stw	fp,24(sp)
10103700:	df000604 	addi	fp,sp,24
10103704:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
10103708:	0005303a 	rdctl	r2,status
1010370c:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10103710:	e0fffd17 	ldw	r3,-12(fp)
10103714:	00bfff84 	movi	r2,-2
10103718:	1884703a 	and	r2,r3,r2
1010371c:	1001703a 	wrctl	status,r2
  return context;
10103720:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
10103724:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
10103728:	d0a00a17 	ldw	r2,-32728(gp)
1010372c:	10c000c4 	addi	r3,r2,3
10103730:	00bfff04 	movi	r2,-4
10103734:	1884703a 	and	r2,r3,r2
10103738:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1010373c:	d0e00a17 	ldw	r3,-32728(gp)
10103740:	e0bffa17 	ldw	r2,-24(fp)
10103744:	1887883a 	add	r3,r3,r2
10103748:	008404b4 	movhi	r2,4114
1010374c:	10800004 	addi	r2,r2,0
10103750:	10c0072e 	bgeu	r2,r3,10103770 <sbrk+0x78>
10103754:	e0bfff17 	ldw	r2,-4(fp)
10103758:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
1010375c:	e0bffc17 	ldw	r2,-16(fp)
10103760:	1001703a 	wrctl	status,r2
}
10103764:	0001883a 	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
10103768:	00bfffc4 	movi	r2,-1
1010376c:	00000c06 	br	101037a0 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
10103770:	d0a00a17 	ldw	r2,-32728(gp)
10103774:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
10103778:	d0e00a17 	ldw	r3,-32728(gp)
1010377c:	e0bffa17 	ldw	r2,-24(fp)
10103780:	1885883a 	add	r2,r3,r2
10103784:	d0a00a15 	stw	r2,-32728(gp)
10103788:	e0bfff17 	ldw	r2,-4(fp)
1010378c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
10103790:	e0bffb17 	ldw	r2,-20(fp)
10103794:	1001703a 	wrctl	status,r2
}
10103798:	0001883a 	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
1010379c:	e0bffe17 	ldw	r2,-8(fp)
} 
101037a0:	e037883a 	mov	sp,fp
101037a4:	df000017 	ldw	fp,0(sp)
101037a8:	dec00104 	addi	sp,sp,4
101037ac:	f800283a 	ret

101037b0 <alt_get_errno>:
{
101037b0:	defffe04 	addi	sp,sp,-8
101037b4:	dfc00115 	stw	ra,4(sp)
101037b8:	df000015 	stw	fp,0(sp)
101037bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
101037c0:	d0a00917 	ldw	r2,-32732(gp)
101037c4:	10000326 	beq	r2,zero,101037d4 <alt_get_errno+0x24>
101037c8:	d0a00917 	ldw	r2,-32732(gp)
101037cc:	103ee83a 	callr	r2
101037d0:	00000106 	br	101037d8 <alt_get_errno+0x28>
101037d4:	d0a6ac04 	addi	r2,gp,-25936
}
101037d8:	e037883a 	mov	sp,fp
101037dc:	dfc00117 	ldw	ra,4(sp)
101037e0:	df000017 	ldw	fp,0(sp)
101037e4:	dec00204 	addi	sp,sp,8
101037e8:	f800283a 	ret

101037ec <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
101037ec:	defff904 	addi	sp,sp,-28
101037f0:	dfc00615 	stw	ra,24(sp)
101037f4:	df000515 	stw	fp,20(sp)
101037f8:	df000504 	addi	fp,sp,20
101037fc:	e13ffd15 	stw	r4,-12(fp)
10103800:	e17ffc15 	stw	r5,-16(fp)
10103804:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10103808:	e0bffd17 	ldw	r2,-12(fp)
1010380c:	10000916 	blt	r2,zero,10103834 <write+0x48>
10103810:	e0fffd17 	ldw	r3,-12(fp)
10103814:	1805883a 	mov	r2,r3
10103818:	1085883a 	add	r2,r2,r2
1010381c:	10c5883a 	add	r2,r2,r3
10103820:	100490ba 	slli	r2,r2,2
10103824:	00c40434 	movhi	r3,4112
10103828:	18d76704 	addi	r3,r3,23964
1010382c:	10c5883a 	add	r2,r2,r3
10103830:	00000106 	br	10103838 <write+0x4c>
10103834:	0005883a 	mov	r2,zero
10103838:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
1010383c:	e0bfff17 	ldw	r2,-4(fp)
10103840:	10002126 	beq	r2,zero,101038c8 <write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
10103844:	e0bfff17 	ldw	r2,-4(fp)
10103848:	10800217 	ldw	r2,8(r2)
1010384c:	108000cc 	andi	r2,r2,3
10103850:	10001826 	beq	r2,zero,101038b4 <write+0xc8>
10103854:	e0bfff17 	ldw	r2,-4(fp)
10103858:	10800017 	ldw	r2,0(r2)
1010385c:	10800617 	ldw	r2,24(r2)
10103860:	10001426 	beq	r2,zero,101038b4 <write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
10103864:	e0bfff17 	ldw	r2,-4(fp)
10103868:	10800017 	ldw	r2,0(r2)
1010386c:	10800617 	ldw	r2,24(r2)
10103870:	e0fffb17 	ldw	r3,-20(fp)
10103874:	180d883a 	mov	r6,r3
10103878:	e17ffc17 	ldw	r5,-16(fp)
1010387c:	e13fff17 	ldw	r4,-4(fp)
10103880:	103ee83a 	callr	r2
10103884:	e0bffe15 	stw	r2,-8(fp)
10103888:	e0bffe17 	ldw	r2,-8(fp)
1010388c:	1000070e 	bge	r2,zero,101038ac <write+0xc0>
      {
        ALT_ERRNO = -rval;
10103890:	01037b00 	call	101037b0 <alt_get_errno>
10103894:	1007883a 	mov	r3,r2
10103898:	e0bffe17 	ldw	r2,-8(fp)
1010389c:	0085c83a 	sub	r2,zero,r2
101038a0:	18800015 	stw	r2,0(r3)
        return -1;
101038a4:	00bfffc4 	movi	r2,-1
101038a8:	00000c06 	br	101038dc <write+0xf0>
      }
      return rval;
101038ac:	e0bffe17 	ldw	r2,-8(fp)
101038b0:	00000a06 	br	101038dc <write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
101038b4:	01037b00 	call	101037b0 <alt_get_errno>
101038b8:	1007883a 	mov	r3,r2
101038bc:	00800344 	movi	r2,13
101038c0:	18800015 	stw	r2,0(r3)
101038c4:	00000406 	br	101038d8 <write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
101038c8:	01037b00 	call	101037b0 <alt_get_errno>
101038cc:	1007883a 	mov	r3,r2
101038d0:	00801444 	movi	r2,81
101038d4:	18800015 	stw	r2,0(r3)
  }
  return -1;
101038d8:	00bfffc4 	movi	r2,-1
}
101038dc:	e037883a 	mov	sp,fp
101038e0:	dfc00117 	ldw	ra,4(sp)
101038e4:	df000017 	ldw	fp,0(sp)
101038e8:	dec00204 	addi	sp,sp,8
101038ec:	f800283a 	ret

101038f0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
101038f0:	defffd04 	addi	sp,sp,-12
101038f4:	dfc00215 	stw	ra,8(sp)
101038f8:	df000115 	stw	fp,4(sp)
101038fc:	df000104 	addi	fp,sp,4
10103900:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
10103904:	d1600604 	addi	r5,gp,-32744
10103908:	e13fff17 	ldw	r4,-4(fp)
1010390c:	01045ac0 	call	101045ac <alt_dev_llist_insert>
}
10103910:	e037883a 	mov	sp,fp
10103914:	dfc00117 	ldw	ra,4(sp)
10103918:	df000017 	ldw	fp,0(sp)
1010391c:	dec00204 	addi	sp,sp,8
10103920:	f800283a 	ret

10103924 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
10103924:	defffd04 	addi	sp,sp,-12
10103928:	dfc00215 	stw	ra,8(sp)
1010392c:	df000115 	stw	fp,4(sp)
10103930:	df000104 	addi	fp,sp,4
10103934:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
10103938:	0104f480 	call	10104f48 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
1010393c:	00800044 	movi	r2,1
10103940:	1001703a 	wrctl	status,r2
}
10103944:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
10103948:	0001883a 	nop
1010394c:	e037883a 	mov	sp,fp
10103950:	dfc00117 	ldw	ra,4(sp)
10103954:	df000017 	ldw	fp,0(sp)
10103958:	dec00204 	addi	sp,sp,8
1010395c:	f800283a 	ret

10103960 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
10103960:	defffe04 	addi	sp,sp,-8
10103964:	dfc00115 	stw	ra,4(sp)
10103968:	df000015 	stw	fp,0(sp)
1010396c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
10103970:	018000c4 	movi	r6,3
10103974:	000b883a 	mov	r5,zero
10103978:	01040434 	movhi	r4,4112
1010397c:	2117d104 	addi	r4,r4,24388
10103980:	0103b0c0 	call	10103b0c <altera_avalon_jtag_uart_init>
10103984:	01040434 	movhi	r4,4112
10103988:	2117c704 	addi	r4,r4,24348
1010398c:	01038f00 	call	101038f0 <alt_dev_reg>
}
10103990:	0001883a 	nop
10103994:	e037883a 	mov	sp,fp
10103998:	dfc00117 	ldw	ra,4(sp)
1010399c:	df000017 	ldw	fp,0(sp)
101039a0:	dec00204 	addi	sp,sp,8
101039a4:	f800283a 	ret

101039a8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
101039a8:	defffa04 	addi	sp,sp,-24
101039ac:	dfc00515 	stw	ra,20(sp)
101039b0:	df000415 	stw	fp,16(sp)
101039b4:	df000404 	addi	fp,sp,16
101039b8:	e13ffe15 	stw	r4,-8(fp)
101039bc:	e17ffd15 	stw	r5,-12(fp)
101039c0:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
101039c4:	e0bffe17 	ldw	r2,-8(fp)
101039c8:	10800017 	ldw	r2,0(r2)
101039cc:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
101039d0:	e0bfff17 	ldw	r2,-4(fp)
101039d4:	10c00a04 	addi	r3,r2,40
101039d8:	e0bffe17 	ldw	r2,-8(fp)
101039dc:	10800217 	ldw	r2,8(r2)
101039e0:	100f883a 	mov	r7,r2
101039e4:	e1bffc17 	ldw	r6,-16(fp)
101039e8:	e17ffd17 	ldw	r5,-12(fp)
101039ec:	1809883a 	mov	r4,r3
101039f0:	0103fd40 	call	10103fd4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
101039f4:	e037883a 	mov	sp,fp
101039f8:	dfc00117 	ldw	ra,4(sp)
101039fc:	df000017 	ldw	fp,0(sp)
10103a00:	dec00204 	addi	sp,sp,8
10103a04:	f800283a 	ret

10103a08 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
10103a08:	defffa04 	addi	sp,sp,-24
10103a0c:	dfc00515 	stw	ra,20(sp)
10103a10:	df000415 	stw	fp,16(sp)
10103a14:	df000404 	addi	fp,sp,16
10103a18:	e13ffe15 	stw	r4,-8(fp)
10103a1c:	e17ffd15 	stw	r5,-12(fp)
10103a20:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10103a24:	e0bffe17 	ldw	r2,-8(fp)
10103a28:	10800017 	ldw	r2,0(r2)
10103a2c:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
10103a30:	e0bfff17 	ldw	r2,-4(fp)
10103a34:	10c00a04 	addi	r3,r2,40
10103a38:	e0bffe17 	ldw	r2,-8(fp)
10103a3c:	10800217 	ldw	r2,8(r2)
10103a40:	100f883a 	mov	r7,r2
10103a44:	e1bffc17 	ldw	r6,-16(fp)
10103a48:	e17ffd17 	ldw	r5,-12(fp)
10103a4c:	1809883a 	mov	r4,r3
10103a50:	01041f40 	call	101041f4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
10103a54:	e037883a 	mov	sp,fp
10103a58:	dfc00117 	ldw	ra,4(sp)
10103a5c:	df000017 	ldw	fp,0(sp)
10103a60:	dec00204 	addi	sp,sp,8
10103a64:	f800283a 	ret

10103a68 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
10103a68:	defffc04 	addi	sp,sp,-16
10103a6c:	dfc00315 	stw	ra,12(sp)
10103a70:	df000215 	stw	fp,8(sp)
10103a74:	df000204 	addi	fp,sp,8
10103a78:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10103a7c:	e0bffe17 	ldw	r2,-8(fp)
10103a80:	10800017 	ldw	r2,0(r2)
10103a84:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
10103a88:	e0bfff17 	ldw	r2,-4(fp)
10103a8c:	10c00a04 	addi	r3,r2,40
10103a90:	e0bffe17 	ldw	r2,-8(fp)
10103a94:	10800217 	ldw	r2,8(r2)
10103a98:	100b883a 	mov	r5,r2
10103a9c:	1809883a 	mov	r4,r3
10103aa0:	0103e780 	call	10103e78 <altera_avalon_jtag_uart_close>
}
10103aa4:	e037883a 	mov	sp,fp
10103aa8:	dfc00117 	ldw	ra,4(sp)
10103aac:	df000017 	ldw	fp,0(sp)
10103ab0:	dec00204 	addi	sp,sp,8
10103ab4:	f800283a 	ret

10103ab8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
10103ab8:	defffa04 	addi	sp,sp,-24
10103abc:	dfc00515 	stw	ra,20(sp)
10103ac0:	df000415 	stw	fp,16(sp)
10103ac4:	df000404 	addi	fp,sp,16
10103ac8:	e13ffe15 	stw	r4,-8(fp)
10103acc:	e17ffd15 	stw	r5,-12(fp)
10103ad0:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
10103ad4:	e0bffe17 	ldw	r2,-8(fp)
10103ad8:	10800017 	ldw	r2,0(r2)
10103adc:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
10103ae0:	e0bfff17 	ldw	r2,-4(fp)
10103ae4:	10800a04 	addi	r2,r2,40
10103ae8:	e1bffc17 	ldw	r6,-16(fp)
10103aec:	e17ffd17 	ldw	r5,-12(fp)
10103af0:	1009883a 	mov	r4,r2
10103af4:	0103ee00 	call	10103ee0 <altera_avalon_jtag_uart_ioctl>
}
10103af8:	e037883a 	mov	sp,fp
10103afc:	dfc00117 	ldw	ra,4(sp)
10103b00:	df000017 	ldw	fp,0(sp)
10103b04:	dec00204 	addi	sp,sp,8
10103b08:	f800283a 	ret

10103b0c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
10103b0c:	defffa04 	addi	sp,sp,-24
10103b10:	dfc00515 	stw	ra,20(sp)
10103b14:	df000415 	stw	fp,16(sp)
10103b18:	df000404 	addi	fp,sp,16
10103b1c:	e13fff15 	stw	r4,-4(fp)
10103b20:	e17ffe15 	stw	r5,-8(fp)
10103b24:	e1bffd15 	stw	r6,-12(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10103b28:	e0bfff17 	ldw	r2,-4(fp)
10103b2c:	00c00044 	movi	r3,1
10103b30:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
10103b34:	e0bfff17 	ldw	r2,-4(fp)
10103b38:	10800017 	ldw	r2,0(r2)
10103b3c:	10800104 	addi	r2,r2,4
10103b40:	1007883a 	mov	r3,r2
10103b44:	e0bfff17 	ldw	r2,-4(fp)
10103b48:	10800817 	ldw	r2,32(r2)
10103b4c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
10103b50:	e0bffe17 	ldw	r2,-8(fp)
10103b54:	e0fffd17 	ldw	r3,-12(fp)
10103b58:	d8000015 	stw	zero,0(sp)
10103b5c:	e1ffff17 	ldw	r7,-4(fp)
10103b60:	01840434 	movhi	r6,4112
10103b64:	318ef304 	addi	r6,r6,15308
10103b68:	180b883a 	mov	r5,r3
10103b6c:	1009883a 	mov	r4,r2
10103b70:	010473c0 	call	1010473c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
10103b74:	e0bfff17 	ldw	r2,-4(fp)
10103b78:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
10103b7c:	e0bfff17 	ldw	r2,-4(fp)
10103b80:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
10103b84:	d0e6b117 	ldw	r3,-25916(gp)
10103b88:	e1ffff17 	ldw	r7,-4(fp)
10103b8c:	01840434 	movhi	r6,4112
10103b90:	318f7604 	addi	r6,r6,15832
10103b94:	180b883a 	mov	r5,r3
10103b98:	1009883a 	mov	r4,r2
10103b9c:	010441c0 	call	1010441c <alt_alarm_start>
10103ba0:	1000040e 	bge	r2,zero,10103bb4 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
10103ba4:	e0ffff17 	ldw	r3,-4(fp)
10103ba8:	00a00034 	movhi	r2,32768
10103bac:	10bfffc4 	addi	r2,r2,-1
10103bb0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
10103bb4:	0001883a 	nop
10103bb8:	e037883a 	mov	sp,fp
10103bbc:	dfc00117 	ldw	ra,4(sp)
10103bc0:	df000017 	ldw	fp,0(sp)
10103bc4:	dec00204 	addi	sp,sp,8
10103bc8:	f800283a 	ret

10103bcc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
10103bcc:	defff804 	addi	sp,sp,-32
10103bd0:	df000715 	stw	fp,28(sp)
10103bd4:	df000704 	addi	fp,sp,28
10103bd8:	e13ff915 	stw	r4,-28(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
10103bdc:	e0bff917 	ldw	r2,-28(fp)
10103be0:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
10103be4:	e0bffd17 	ldw	r2,-12(fp)
10103be8:	10800017 	ldw	r2,0(r2)
10103bec:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10103bf0:	e0bffc17 	ldw	r2,-16(fp)
10103bf4:	10800104 	addi	r2,r2,4
10103bf8:	10800037 	ldwio	r2,0(r2)
10103bfc:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
10103c00:	e0bffb17 	ldw	r2,-20(fp)
10103c04:	1080c00c 	andi	r2,r2,768
10103c08:	10006d26 	beq	r2,zero,10103dc0 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
10103c0c:	e0bffb17 	ldw	r2,-20(fp)
10103c10:	1080400c 	andi	r2,r2,256
10103c14:	10003526 	beq	r2,zero,10103cec <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
10103c18:	00800074 	movhi	r2,1
10103c1c:	e0bfff15 	stw	r2,-4(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10103c20:	e0bffd17 	ldw	r2,-12(fp)
10103c24:	10800a17 	ldw	r2,40(r2)
10103c28:	10800044 	addi	r2,r2,1
10103c2c:	1081ffcc 	andi	r2,r2,2047
10103c30:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
10103c34:	e0bffd17 	ldw	r2,-12(fp)
10103c38:	10800b17 	ldw	r2,44(r2)
10103c3c:	e0fffa17 	ldw	r3,-24(fp)
10103c40:	18801526 	beq	r3,r2,10103c98 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
10103c44:	e0bffc17 	ldw	r2,-16(fp)
10103c48:	10800037 	ldwio	r2,0(r2)
10103c4c:	e0bfff15 	stw	r2,-4(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
10103c50:	e0bfff17 	ldw	r2,-4(fp)
10103c54:	10a0000c 	andi	r2,r2,32768
10103c58:	10001126 	beq	r2,zero,10103ca0 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
10103c5c:	e0bffd17 	ldw	r2,-12(fp)
10103c60:	10800a17 	ldw	r2,40(r2)
10103c64:	e0ffff17 	ldw	r3,-4(fp)
10103c68:	1809883a 	mov	r4,r3
10103c6c:	e0fffd17 	ldw	r3,-12(fp)
10103c70:	1885883a 	add	r2,r3,r2
10103c74:	11000e05 	stb	r4,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10103c78:	e0bffd17 	ldw	r2,-12(fp)
10103c7c:	10800a17 	ldw	r2,40(r2)
10103c80:	10800044 	addi	r2,r2,1
10103c84:	10c1ffcc 	andi	r3,r2,2047
10103c88:	e0bffd17 	ldw	r2,-12(fp)
10103c8c:	10c00a15 	stw	r3,40(r2)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
10103c90:	0001883a 	nop
      {
10103c94:	003fe206 	br	10103c20 <altera_avalon_jtag_uart_irq+0x54>
          break;
10103c98:	0001883a 	nop
10103c9c:	00000106 	br	10103ca4 <altera_avalon_jtag_uart_irq+0xd8>
          break;
10103ca0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
10103ca4:	e0bfff17 	ldw	r2,-4(fp)
10103ca8:	10bfffec 	andhi	r2,r2,65535
10103cac:	10000f26 	beq	r2,zero,10103cec <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10103cb0:	e0bffd17 	ldw	r2,-12(fp)
10103cb4:	10c00817 	ldw	r3,32(r2)
10103cb8:	00bfff84 	movi	r2,-2
10103cbc:	1886703a 	and	r3,r3,r2
10103cc0:	e0bffd17 	ldw	r2,-12(fp)
10103cc4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
10103cc8:	e0bffc17 	ldw	r2,-16(fp)
10103ccc:	10800104 	addi	r2,r2,4
10103cd0:	1007883a 	mov	r3,r2
10103cd4:	e0bffd17 	ldw	r2,-12(fp)
10103cd8:	10800817 	ldw	r2,32(r2)
10103cdc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10103ce0:	e0bffc17 	ldw	r2,-16(fp)
10103ce4:	10800104 	addi	r2,r2,4
10103ce8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
10103cec:	e0bffb17 	ldw	r2,-20(fp)
10103cf0:	1080800c 	andi	r2,r2,512
10103cf4:	103fbe26 	beq	r2,zero,10103bf0 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
10103cf8:	e0bffb17 	ldw	r2,-20(fp)
10103cfc:	1004d43a 	srli	r2,r2,16
10103d00:	e0bffe15 	stw	r2,-8(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
10103d04:	00001406 	br	10103d58 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
10103d08:	e0bffc17 	ldw	r2,-16(fp)
10103d0c:	e0fffd17 	ldw	r3,-12(fp)
10103d10:	18c00d17 	ldw	r3,52(r3)
10103d14:	e13ffd17 	ldw	r4,-12(fp)
10103d18:	20c7883a 	add	r3,r4,r3
10103d1c:	18c20e03 	ldbu	r3,2104(r3)
10103d20:	18c03fcc 	andi	r3,r3,255
10103d24:	18c0201c 	xori	r3,r3,128
10103d28:	18ffe004 	addi	r3,r3,-128
10103d2c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10103d30:	e0bffd17 	ldw	r2,-12(fp)
10103d34:	10800d17 	ldw	r2,52(r2)
10103d38:	10800044 	addi	r2,r2,1
10103d3c:	10c1ffcc 	andi	r3,r2,2047
10103d40:	e0bffd17 	ldw	r2,-12(fp)
10103d44:	10c00d15 	stw	r3,52(r2)
10103d48:	0001883a 	nop

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
10103d4c:	e0bffe17 	ldw	r2,-8(fp)
10103d50:	10bfffc4 	addi	r2,r2,-1
10103d54:	e0bffe15 	stw	r2,-8(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
10103d58:	e0bffe17 	ldw	r2,-8(fp)
10103d5c:	10000526 	beq	r2,zero,10103d74 <altera_avalon_jtag_uart_irq+0x1a8>
10103d60:	e0bffd17 	ldw	r2,-12(fp)
10103d64:	10c00d17 	ldw	r3,52(r2)
10103d68:	e0bffd17 	ldw	r2,-12(fp)
10103d6c:	10800c17 	ldw	r2,48(r2)
10103d70:	18bfe51e 	bne	r3,r2,10103d08 <altera_avalon_jtag_uart_irq+0x13c>
      }

      if (space > 0)
10103d74:	e0bffe17 	ldw	r2,-8(fp)
10103d78:	103f9d26 	beq	r2,zero,10103bf0 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10103d7c:	e0bffd17 	ldw	r2,-12(fp)
10103d80:	10c00817 	ldw	r3,32(r2)
10103d84:	00bfff44 	movi	r2,-3
10103d88:	1886703a 	and	r3,r3,r2
10103d8c:	e0bffd17 	ldw	r2,-12(fp)
10103d90:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10103d94:	e0bffd17 	ldw	r2,-12(fp)
10103d98:	10800017 	ldw	r2,0(r2)
10103d9c:	10800104 	addi	r2,r2,4
10103da0:	1007883a 	mov	r3,r2
10103da4:	e0bffd17 	ldw	r2,-12(fp)
10103da8:	10800817 	ldw	r2,32(r2)
10103dac:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10103db0:	e0bffc17 	ldw	r2,-16(fp)
10103db4:	10800104 	addi	r2,r2,4
10103db8:	10800037 	ldwio	r2,0(r2)
  {
10103dbc:	003f8c06 	br	10103bf0 <altera_avalon_jtag_uart_irq+0x24>
      break;
10103dc0:	0001883a 	nop
      }
    }
  }
}
10103dc4:	0001883a 	nop
10103dc8:	e037883a 	mov	sp,fp
10103dcc:	df000017 	ldw	fp,0(sp)
10103dd0:	dec00104 	addi	sp,sp,4
10103dd4:	f800283a 	ret

10103dd8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
10103dd8:	defffc04 	addi	sp,sp,-16
10103ddc:	df000315 	stw	fp,12(sp)
10103de0:	df000304 	addi	fp,sp,12
10103de4:	e13ffd15 	stw	r4,-12(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
10103de8:	e0bffd17 	ldw	r2,-12(fp)
10103dec:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
10103df0:	e0bfff17 	ldw	r2,-4(fp)
10103df4:	10800017 	ldw	r2,0(r2)
10103df8:	10800104 	addi	r2,r2,4
10103dfc:	10800037 	ldwio	r2,0(r2)
10103e00:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
10103e04:	e0bffe17 	ldw	r2,-8(fp)
10103e08:	1081000c 	andi	r2,r2,1024
10103e0c:	10000b26 	beq	r2,zero,10103e3c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
10103e10:	e0bfff17 	ldw	r2,-4(fp)
10103e14:	10800017 	ldw	r2,0(r2)
10103e18:	10800104 	addi	r2,r2,4
10103e1c:	1007883a 	mov	r3,r2
10103e20:	e0bfff17 	ldw	r2,-4(fp)
10103e24:	10800817 	ldw	r2,32(r2)
10103e28:	10810014 	ori	r2,r2,1024
10103e2c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
10103e30:	e0bfff17 	ldw	r2,-4(fp)
10103e34:	10000915 	stw	zero,36(r2)
10103e38:	00000a06 	br	10103e64 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
10103e3c:	e0bfff17 	ldw	r2,-4(fp)
10103e40:	10c00917 	ldw	r3,36(r2)
10103e44:	00a00034 	movhi	r2,32768
10103e48:	10bfff04 	addi	r2,r2,-4
10103e4c:	10c00536 	bltu	r2,r3,10103e64 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
10103e50:	e0bfff17 	ldw	r2,-4(fp)
10103e54:	10800917 	ldw	r2,36(r2)
10103e58:	10c00044 	addi	r3,r2,1
10103e5c:	e0bfff17 	ldw	r2,-4(fp)
10103e60:	10c00915 	stw	r3,36(r2)
10103e64:	d0a6b117 	ldw	r2,-25916(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
10103e68:	e037883a 	mov	sp,fp
10103e6c:	df000017 	ldw	fp,0(sp)
10103e70:	dec00104 	addi	sp,sp,4
10103e74:	f800283a 	ret

10103e78 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
10103e78:	defffd04 	addi	sp,sp,-12
10103e7c:	df000215 	stw	fp,8(sp)
10103e80:	df000204 	addi	fp,sp,8
10103e84:	e13fff15 	stw	r4,-4(fp)
10103e88:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10103e8c:	00000506 	br	10103ea4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
10103e90:	e0bffe17 	ldw	r2,-8(fp)
10103e94:	1090000c 	andi	r2,r2,16384
10103e98:	10000226 	beq	r2,zero,10103ea4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
10103e9c:	00bffd44 	movi	r2,-11
10103ea0:	00000b06 	br	10103ed0 <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10103ea4:	e0bfff17 	ldw	r2,-4(fp)
10103ea8:	10c00d17 	ldw	r3,52(r2)
10103eac:	e0bfff17 	ldw	r2,-4(fp)
10103eb0:	10800c17 	ldw	r2,48(r2)
10103eb4:	18800526 	beq	r3,r2,10103ecc <altera_avalon_jtag_uart_close+0x54>
10103eb8:	e0bfff17 	ldw	r2,-4(fp)
10103ebc:	10c00917 	ldw	r3,36(r2)
10103ec0:	e0bfff17 	ldw	r2,-4(fp)
10103ec4:	10800117 	ldw	r2,4(r2)
10103ec8:	18bff136 	bltu	r3,r2,10103e90 <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
10103ecc:	0005883a 	mov	r2,zero
}
10103ed0:	e037883a 	mov	sp,fp
10103ed4:	df000017 	ldw	fp,0(sp)
10103ed8:	dec00104 	addi	sp,sp,4
10103edc:	f800283a 	ret

10103ee0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
10103ee0:	defffa04 	addi	sp,sp,-24
10103ee4:	df000515 	stw	fp,20(sp)
10103ee8:	df000504 	addi	fp,sp,20
10103eec:	e13ffd15 	stw	r4,-12(fp)
10103ef0:	e17ffc15 	stw	r5,-16(fp)
10103ef4:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
10103ef8:	00bff9c4 	movi	r2,-25
10103efc:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
10103f00:	e0bffc17 	ldw	r2,-16(fp)
10103f04:	109a8060 	cmpeqi	r2,r2,27137
10103f08:	1000041e 	bne	r2,zero,10103f1c <altera_avalon_jtag_uart_ioctl+0x3c>
10103f0c:	e0bffc17 	ldw	r2,-16(fp)
10103f10:	109a80a0 	cmpeqi	r2,r2,27138
10103f14:	1000181e 	bne	r2,zero,10103f78 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
10103f18:	00002906 	br	10103fc0 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
10103f1c:	e0bffd17 	ldw	r2,-12(fp)
10103f20:	10c00117 	ldw	r3,4(r2)
10103f24:	00a00034 	movhi	r2,32768
10103f28:	10bfffc4 	addi	r2,r2,-1
10103f2c:	18802126 	beq	r3,r2,10103fb4 <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
10103f30:	e0bffb17 	ldw	r2,-20(fp)
10103f34:	10800017 	ldw	r2,0(r2)
10103f38:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
10103f3c:	e0bffe17 	ldw	r2,-8(fp)
10103f40:	10800090 	cmplti	r2,r2,2
10103f44:	1000061e 	bne	r2,zero,10103f60 <altera_avalon_jtag_uart_ioctl+0x80>
10103f48:	e0fffe17 	ldw	r3,-8(fp)
10103f4c:	00a00034 	movhi	r2,32768
10103f50:	10bfffc4 	addi	r2,r2,-1
10103f54:	18800226 	beq	r3,r2,10103f60 <altera_avalon_jtag_uart_ioctl+0x80>
10103f58:	e0bffe17 	ldw	r2,-8(fp)
10103f5c:	00000206 	br	10103f68 <altera_avalon_jtag_uart_ioctl+0x88>
10103f60:	00a00034 	movhi	r2,32768
10103f64:	10bfff84 	addi	r2,r2,-2
10103f68:	e0fffd17 	ldw	r3,-12(fp)
10103f6c:	18800115 	stw	r2,4(r3)
      rc = 0;
10103f70:	e03fff15 	stw	zero,-4(fp)
    break;
10103f74:	00000f06 	br	10103fb4 <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
10103f78:	e0bffd17 	ldw	r2,-12(fp)
10103f7c:	10c00117 	ldw	r3,4(r2)
10103f80:	00a00034 	movhi	r2,32768
10103f84:	10bfffc4 	addi	r2,r2,-1
10103f88:	18800c26 	beq	r3,r2,10103fbc <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
10103f8c:	e0bffd17 	ldw	r2,-12(fp)
10103f90:	10c00917 	ldw	r3,36(r2)
10103f94:	e0bffd17 	ldw	r2,-12(fp)
10103f98:	10800117 	ldw	r2,4(r2)
10103f9c:	1885803a 	cmpltu	r2,r3,r2
10103fa0:	10c03fcc 	andi	r3,r2,255
10103fa4:	e0bffb17 	ldw	r2,-20(fp)
10103fa8:	10c00015 	stw	r3,0(r2)
      rc = 0;
10103fac:	e03fff15 	stw	zero,-4(fp)
    break;
10103fb0:	00000206 	br	10103fbc <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
10103fb4:	0001883a 	nop
10103fb8:	00000106 	br	10103fc0 <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
10103fbc:	0001883a 	nop
  }

  return rc;
10103fc0:	e0bfff17 	ldw	r2,-4(fp)
}
10103fc4:	e037883a 	mov	sp,fp
10103fc8:	df000017 	ldw	fp,0(sp)
10103fcc:	dec00104 	addi	sp,sp,4
10103fd0:	f800283a 	ret

10103fd4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
10103fd4:	defff304 	addi	sp,sp,-52
10103fd8:	dfc00c15 	stw	ra,48(sp)
10103fdc:	df000b15 	stw	fp,44(sp)
10103fe0:	df000b04 	addi	fp,sp,44
10103fe4:	e13ff815 	stw	r4,-32(fp)
10103fe8:	e17ff715 	stw	r5,-36(fp)
10103fec:	e1bff615 	stw	r6,-40(fp)
10103ff0:	e1fff515 	stw	r7,-44(fp)
  char * ptr = buffer;
10103ff4:	e0bff717 	ldw	r2,-36(fp)
10103ff8:	e0bfff15 	stw	r2,-4(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10103ffc:	00004706 	br	1010411c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
10104000:	e0bff817 	ldw	r2,-32(fp)
10104004:	10800a17 	ldw	r2,40(r2)
10104008:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
1010400c:	e0bff817 	ldw	r2,-32(fp)
10104010:	10800b17 	ldw	r2,44(r2)
10104014:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
10104018:	e0fffd17 	ldw	r3,-12(fp)
1010401c:	e0bffc17 	ldw	r2,-16(fp)
10104020:	18800536 	bltu	r3,r2,10104038 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
10104024:	e0fffd17 	ldw	r3,-12(fp)
10104028:	e0bffc17 	ldw	r2,-16(fp)
1010402c:	1885c83a 	sub	r2,r3,r2
10104030:	e0bffe15 	stw	r2,-8(fp)
10104034:	00000406 	br	10104048 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
10104038:	00c20004 	movi	r3,2048
1010403c:	e0bffc17 	ldw	r2,-16(fp)
10104040:	1885c83a 	sub	r2,r3,r2
10104044:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
10104048:	e0bffe17 	ldw	r2,-8(fp)
1010404c:	10001e26 	beq	r2,zero,101040c8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
10104050:	e0fff617 	ldw	r3,-40(fp)
10104054:	e0bffe17 	ldw	r2,-8(fp)
10104058:	1880022e 	bgeu	r3,r2,10104064 <altera_avalon_jtag_uart_read+0x90>
        n = space;
1010405c:	e0bff617 	ldw	r2,-40(fp)
10104060:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
10104064:	e0bff817 	ldw	r2,-32(fp)
10104068:	10c00e04 	addi	r3,r2,56
1010406c:	e0bffc17 	ldw	r2,-16(fp)
10104070:	1885883a 	add	r2,r3,r2
10104074:	e1bffe17 	ldw	r6,-8(fp)
10104078:	100b883a 	mov	r5,r2
1010407c:	e13fff17 	ldw	r4,-4(fp)
10104080:	010161c0 	call	1010161c <memcpy>
      ptr   += n;
10104084:	e0ffff17 	ldw	r3,-4(fp)
10104088:	e0bffe17 	ldw	r2,-8(fp)
1010408c:	1885883a 	add	r2,r3,r2
10104090:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
10104094:	e0fff617 	ldw	r3,-40(fp)
10104098:	e0bffe17 	ldw	r2,-8(fp)
1010409c:	1885c83a 	sub	r2,r3,r2
101040a0:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
101040a4:	e0fffc17 	ldw	r3,-16(fp)
101040a8:	e0bffe17 	ldw	r2,-8(fp)
101040ac:	1885883a 	add	r2,r3,r2
101040b0:	10c1ffcc 	andi	r3,r2,2047
101040b4:	e0bff817 	ldw	r2,-32(fp)
101040b8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
101040bc:	e0bff617 	ldw	r2,-40(fp)
101040c0:	00bfcf16 	blt	zero,r2,10104000 <altera_avalon_jtag_uart_read+0x2c>
101040c4:	00000106 	br	101040cc <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */
101040c8:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
101040cc:	e0ffff17 	ldw	r3,-4(fp)
101040d0:	e0bff717 	ldw	r2,-36(fp)
101040d4:	1880141e 	bne	r3,r2,10104128 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
101040d8:	e0bff517 	ldw	r2,-44(fp)
101040dc:	1090000c 	andi	r2,r2,16384
101040e0:	1000131e 	bne	r2,zero,10104130 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
101040e4:	0001883a 	nop
101040e8:	e0bff817 	ldw	r2,-32(fp)
101040ec:	10800a17 	ldw	r2,40(r2)
101040f0:	e0fffd17 	ldw	r3,-12(fp)
101040f4:	1880051e 	bne	r3,r2,1010410c <altera_avalon_jtag_uart_read+0x138>
101040f8:	e0bff817 	ldw	r2,-32(fp)
101040fc:	10c00917 	ldw	r3,36(r2)
10104100:	e0bff817 	ldw	r2,-32(fp)
10104104:	10800117 	ldw	r2,4(r2)
10104108:	18bff736 	bltu	r3,r2,101040e8 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
1010410c:	e0bff817 	ldw	r2,-32(fp)
10104110:	10800a17 	ldw	r2,40(r2)
10104114:	e0fffd17 	ldw	r3,-12(fp)
10104118:	18800726 	beq	r3,r2,10104138 <altera_avalon_jtag_uart_read+0x164>
  while (space > 0)
1010411c:	e0bff617 	ldw	r2,-40(fp)
10104120:	00bfb716 	blt	zero,r2,10104000 <altera_avalon_jtag_uart_read+0x2c>
10104124:	00000506 	br	1010413c <altera_avalon_jtag_uart_read+0x168>
      break;
10104128:	0001883a 	nop
1010412c:	00000306 	br	1010413c <altera_avalon_jtag_uart_read+0x168>
      break;
10104130:	0001883a 	nop
10104134:	00000106 	br	1010413c <altera_avalon_jtag_uart_read+0x168>
      break;
10104138:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
1010413c:	e0ffff17 	ldw	r3,-4(fp)
10104140:	e0bff717 	ldw	r2,-36(fp)
10104144:	18801926 	beq	r3,r2,101041ac <altera_avalon_jtag_uart_read+0x1d8>
  NIOS2_READ_STATUS (context);
10104148:	0005303a 	rdctl	r2,status
1010414c:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10104150:	e0fff917 	ldw	r3,-28(fp)
10104154:	00bfff84 	movi	r2,-2
10104158:	1884703a 	and	r2,r3,r2
1010415c:	1001703a 	wrctl	status,r2
  return context;
10104160:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
10104164:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10104168:	e0bff817 	ldw	r2,-32(fp)
1010416c:	10800817 	ldw	r2,32(r2)
10104170:	10c00054 	ori	r3,r2,1
10104174:	e0bff817 	ldw	r2,-32(fp)
10104178:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1010417c:	e0bff817 	ldw	r2,-32(fp)
10104180:	10800017 	ldw	r2,0(r2)
10104184:	10800104 	addi	r2,r2,4
10104188:	1007883a 	mov	r3,r2
1010418c:	e0bff817 	ldw	r2,-32(fp)
10104190:	10800817 	ldw	r2,32(r2)
10104194:	18800035 	stwio	r2,0(r3)
10104198:	e0bffb17 	ldw	r2,-20(fp)
1010419c:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
101041a0:	e0bffa17 	ldw	r2,-24(fp)
101041a4:	1001703a 	wrctl	status,r2
}
101041a8:	0001883a 	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
101041ac:	e0ffff17 	ldw	r3,-4(fp)
101041b0:	e0bff717 	ldw	r2,-36(fp)
101041b4:	18800426 	beq	r3,r2,101041c8 <altera_avalon_jtag_uart_read+0x1f4>
    return ptr - buffer;
101041b8:	e0ffff17 	ldw	r3,-4(fp)
101041bc:	e0bff717 	ldw	r2,-36(fp)
101041c0:	1885c83a 	sub	r2,r3,r2
101041c4:	00000606 	br	101041e0 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
101041c8:	e0bff517 	ldw	r2,-44(fp)
101041cc:	1090000c 	andi	r2,r2,16384
101041d0:	10000226 	beq	r2,zero,101041dc <altera_avalon_jtag_uart_read+0x208>
    return -EWOULDBLOCK;
101041d4:	00bffd44 	movi	r2,-11
101041d8:	00000106 	br	101041e0 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
101041dc:	00bffec4 	movi	r2,-5
}
101041e0:	e037883a 	mov	sp,fp
101041e4:	dfc00117 	ldw	ra,4(sp)
101041e8:	df000017 	ldw	fp,0(sp)
101041ec:	dec00204 	addi	sp,sp,8
101041f0:	f800283a 	ret

101041f4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
101041f4:	defff304 	addi	sp,sp,-52
101041f8:	dfc00c15 	stw	ra,48(sp)
101041fc:	df000b15 	stw	fp,44(sp)
10104200:	df000b04 	addi	fp,sp,44
10104204:	e13ff815 	stw	r4,-32(fp)
10104208:	e17ff715 	stw	r5,-36(fp)
1010420c:	e1bff615 	stw	r6,-40(fp)
10104210:	e1fff515 	stw	r7,-44(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
10104214:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
10104218:	e0bff717 	ldw	r2,-36(fp)
1010421c:	e0bffd15 	stw	r2,-12(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10104220:	00003706 	br	10104300 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
10104224:	e0bff817 	ldw	r2,-32(fp)
10104228:	10800c17 	ldw	r2,48(r2)
1010422c:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
10104230:	e0bff817 	ldw	r2,-32(fp)
10104234:	10800d17 	ldw	r2,52(r2)
10104238:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
1010423c:	e0fffc17 	ldw	r3,-16(fp)
10104240:	e0bfff17 	ldw	r2,-4(fp)
10104244:	1880062e 	bgeu	r3,r2,10104260 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
10104248:	e0ffff17 	ldw	r3,-4(fp)
1010424c:	e0bffc17 	ldw	r2,-16(fp)
10104250:	1885c83a 	sub	r2,r3,r2
10104254:	10bfffc4 	addi	r2,r2,-1
10104258:	e0bffe15 	stw	r2,-8(fp)
1010425c:	00000b06 	br	1010428c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
10104260:	e0bfff17 	ldw	r2,-4(fp)
10104264:	10000526 	beq	r2,zero,1010427c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
10104268:	00c20004 	movi	r3,2048
1010426c:	e0bffc17 	ldw	r2,-16(fp)
10104270:	1885c83a 	sub	r2,r3,r2
10104274:	e0bffe15 	stw	r2,-8(fp)
10104278:	00000406 	br	1010428c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
1010427c:	00c1ffc4 	movi	r3,2047
10104280:	e0bffc17 	ldw	r2,-16(fp)
10104284:	1885c83a 	sub	r2,r3,r2
10104288:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
1010428c:	e0bffe17 	ldw	r2,-8(fp)
10104290:	10001e26 	beq	r2,zero,1010430c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
10104294:	e0fff617 	ldw	r3,-40(fp)
10104298:	e0bffe17 	ldw	r2,-8(fp)
1010429c:	1880022e 	bgeu	r3,r2,101042a8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
101042a0:	e0bff617 	ldw	r2,-40(fp)
101042a4:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
101042a8:	e0bff817 	ldw	r2,-32(fp)
101042ac:	10c20e04 	addi	r3,r2,2104
101042b0:	e0bffc17 	ldw	r2,-16(fp)
101042b4:	1885883a 	add	r2,r3,r2
101042b8:	e1bffe17 	ldw	r6,-8(fp)
101042bc:	e17ff717 	ldw	r5,-36(fp)
101042c0:	1009883a 	mov	r4,r2
101042c4:	010161c0 	call	1010161c <memcpy>
      ptr   += n;
101042c8:	e0fff717 	ldw	r3,-36(fp)
101042cc:	e0bffe17 	ldw	r2,-8(fp)
101042d0:	1885883a 	add	r2,r3,r2
101042d4:	e0bff715 	stw	r2,-36(fp)
      count -= n;
101042d8:	e0fff617 	ldw	r3,-40(fp)
101042dc:	e0bffe17 	ldw	r2,-8(fp)
101042e0:	1885c83a 	sub	r2,r3,r2
101042e4:	e0bff615 	stw	r2,-40(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
101042e8:	e0fffc17 	ldw	r3,-16(fp)
101042ec:	e0bffe17 	ldw	r2,-8(fp)
101042f0:	1885883a 	add	r2,r3,r2
101042f4:	10c1ffcc 	andi	r3,r2,2047
101042f8:	e0bff817 	ldw	r2,-32(fp)
101042fc:	10c00c15 	stw	r3,48(r2)
    while (count > 0)
10104300:	e0bff617 	ldw	r2,-40(fp)
10104304:	00bfc716 	blt	zero,r2,10104224 <altera_avalon_jtag_uart_write+0x30>
10104308:	00000106 	br	10104310 <altera_avalon_jtag_uart_write+0x11c>
        break;
1010430c:	0001883a 	nop
  NIOS2_READ_STATUS (context);
10104310:	0005303a 	rdctl	r2,status
10104314:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10104318:	e0fff917 	ldw	r3,-28(fp)
1010431c:	00bfff84 	movi	r2,-2
10104320:	1884703a 	and	r2,r3,r2
10104324:	1001703a 	wrctl	status,r2
  return context;
10104328:	e0bff917 	ldw	r2,-28(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
1010432c:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10104330:	e0bff817 	ldw	r2,-32(fp)
10104334:	10800817 	ldw	r2,32(r2)
10104338:	10c00094 	ori	r3,r2,2
1010433c:	e0bff817 	ldw	r2,-32(fp)
10104340:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10104344:	e0bff817 	ldw	r2,-32(fp)
10104348:	10800017 	ldw	r2,0(r2)
1010434c:	10800104 	addi	r2,r2,4
10104350:	1007883a 	mov	r3,r2
10104354:	e0bff817 	ldw	r2,-32(fp)
10104358:	10800817 	ldw	r2,32(r2)
1010435c:	18800035 	stwio	r2,0(r3)
10104360:	e0bffb17 	ldw	r2,-20(fp)
10104364:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
10104368:	e0bffa17 	ldw	r2,-24(fp)
1010436c:	1001703a 	wrctl	status,r2
}
10104370:	0001883a 	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
10104374:	e0bff617 	ldw	r2,-40(fp)
10104378:	0080100e 	bge	zero,r2,101043bc <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
1010437c:	e0bff517 	ldw	r2,-44(fp)
10104380:	1090000c 	andi	r2,r2,16384
10104384:	1000101e 	bne	r2,zero,101043c8 <altera_avalon_jtag_uart_write+0x1d4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
10104388:	0001883a 	nop
1010438c:	e0bff817 	ldw	r2,-32(fp)
10104390:	10800d17 	ldw	r2,52(r2)
10104394:	e0ffff17 	ldw	r3,-4(fp)
10104398:	1880051e 	bne	r3,r2,101043b0 <altera_avalon_jtag_uart_write+0x1bc>
1010439c:	e0bff817 	ldw	r2,-32(fp)
101043a0:	10c00917 	ldw	r3,36(r2)
101043a4:	e0bff817 	ldw	r2,-32(fp)
101043a8:	10800117 	ldw	r2,4(r2)
101043ac:	18bff736 	bltu	r3,r2,1010438c <altera_avalon_jtag_uart_write+0x198>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
101043b0:	e0bff817 	ldw	r2,-32(fp)
101043b4:	10800917 	ldw	r2,36(r2)
101043b8:	1000051e 	bne	r2,zero,101043d0 <altera_avalon_jtag_uart_write+0x1dc>
         break;
    }
  }
  while (count > 0);
101043bc:	e0bff617 	ldw	r2,-40(fp)
101043c0:	00bfcf16 	blt	zero,r2,10104300 <altera_avalon_jtag_uart_write+0x10c>
101043c4:	00000306 	br	101043d4 <altera_avalon_jtag_uart_write+0x1e0>
        break;
101043c8:	0001883a 	nop
101043cc:	00000106 	br	101043d4 <altera_avalon_jtag_uart_write+0x1e0>
         break;
101043d0:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
101043d4:	e0fff717 	ldw	r3,-36(fp)
101043d8:	e0bffd17 	ldw	r2,-12(fp)
101043dc:	18800426 	beq	r3,r2,101043f0 <altera_avalon_jtag_uart_write+0x1fc>
    return ptr - start;
101043e0:	e0fff717 	ldw	r3,-36(fp)
101043e4:	e0bffd17 	ldw	r2,-12(fp)
101043e8:	1885c83a 	sub	r2,r3,r2
101043ec:	00000606 	br	10104408 <altera_avalon_jtag_uart_write+0x214>
  else if (flags & O_NONBLOCK)
101043f0:	e0bff517 	ldw	r2,-44(fp)
101043f4:	1090000c 	andi	r2,r2,16384
101043f8:	10000226 	beq	r2,zero,10104404 <altera_avalon_jtag_uart_write+0x210>
    return -EWOULDBLOCK;
101043fc:	00bffd44 	movi	r2,-11
10104400:	00000106 	br	10104408 <altera_avalon_jtag_uart_write+0x214>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
10104404:	00bffec4 	movi	r2,-5
}
10104408:	e037883a 	mov	sp,fp
1010440c:	dfc00117 	ldw	ra,4(sp)
10104410:	df000017 	ldw	fp,0(sp)
10104414:	dec00204 	addi	sp,sp,8
10104418:	f800283a 	ret

1010441c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
1010441c:	defff504 	addi	sp,sp,-44
10104420:	df000a15 	stw	fp,40(sp)
10104424:	df000a04 	addi	fp,sp,40
10104428:	e13ff915 	stw	r4,-28(fp)
1010442c:	e17ff815 	stw	r5,-32(fp)
10104430:	e1bff715 	stw	r6,-36(fp)
10104434:	e1fff615 	stw	r7,-40(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
10104438:	e03fff15 	stw	zero,-4(fp)
1010443c:	d0a6b117 	ldw	r2,-25916(gp)
  
  if (alt_ticks_per_second ())
10104440:	10003e26 	beq	r2,zero,1010453c <alt_alarm_start+0x120>
  {
    if (alarm)
10104444:	e0bff917 	ldw	r2,-28(fp)
10104448:	10003a26 	beq	r2,zero,10104534 <alt_alarm_start+0x118>
    {
      alarm->callback = callback;
1010444c:	e0bff917 	ldw	r2,-28(fp)
10104450:	e0fff717 	ldw	r3,-36(fp)
10104454:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
10104458:	e0bff917 	ldw	r2,-28(fp)
1010445c:	e0fff617 	ldw	r3,-40(fp)
10104460:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
10104464:	0005303a 	rdctl	r2,status
10104468:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1010446c:	e0fffd17 	ldw	r3,-12(fp)
10104470:	00bfff84 	movi	r2,-2
10104474:	1884703a 	and	r2,r3,r2
10104478:	1001703a 	wrctl	status,r2
  return context;
1010447c:	e0bffd17 	ldw	r2,-12(fp)
 
      irq_context = alt_irq_disable_all ();
10104480:	e0bffe15 	stw	r2,-8(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10104484:	d0a6b217 	ldw	r2,-25912(gp)
      
      current_nticks = alt_nticks();
10104488:	e0bfff15 	stw	r2,-4(fp)
      
      alarm->time = nticks + current_nticks + 1; 
1010448c:	e0fff817 	ldw	r3,-32(fp)
10104490:	e0bfff17 	ldw	r2,-4(fp)
10104494:	1885883a 	add	r2,r3,r2
10104498:	10c00044 	addi	r3,r2,1
1010449c:	e0bff917 	ldw	r2,-28(fp)
101044a0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
101044a4:	e0bff917 	ldw	r2,-28(fp)
101044a8:	10c00217 	ldw	r3,8(r2)
101044ac:	e0bfff17 	ldw	r2,-4(fp)
101044b0:	1880042e 	bgeu	r3,r2,101044c4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
101044b4:	e0bff917 	ldw	r2,-28(fp)
101044b8:	00c00044 	movi	r3,1
101044bc:	10c00405 	stb	r3,16(r2)
101044c0:	00000206 	br	101044cc <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
101044c4:	e0bff917 	ldw	r2,-28(fp)
101044c8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
101044cc:	e0bff917 	ldw	r2,-28(fp)
101044d0:	d0e00c04 	addi	r3,gp,-32720
101044d4:	e0fffb15 	stw	r3,-20(fp)
101044d8:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
101044dc:	e0bffa17 	ldw	r2,-24(fp)
101044e0:	e0fffb17 	ldw	r3,-20(fp)
101044e4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
101044e8:	e0bffb17 	ldw	r2,-20(fp)
101044ec:	10c00017 	ldw	r3,0(r2)
101044f0:	e0bffa17 	ldw	r2,-24(fp)
101044f4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
101044f8:	e0bffb17 	ldw	r2,-20(fp)
101044fc:	10800017 	ldw	r2,0(r2)
10104500:	e0fffa17 	ldw	r3,-24(fp)
10104504:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10104508:	e0bffb17 	ldw	r2,-20(fp)
1010450c:	e0fffa17 	ldw	r3,-24(fp)
10104510:	10c00015 	stw	r3,0(r2)
}
10104514:	0001883a 	nop
10104518:	e0bffe17 	ldw	r2,-8(fp)
1010451c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
10104520:	e0bffc17 	ldw	r2,-16(fp)
10104524:	1001703a 	wrctl	status,r2
}
10104528:	0001883a 	nop
      alt_irq_enable_all (irq_context);

      return 0;
1010452c:	0005883a 	mov	r2,zero
10104530:	00000306 	br	10104540 <alt_alarm_start+0x124>
    }
    else
    {
      return -EINVAL;
10104534:	00bffa84 	movi	r2,-22
10104538:	00000106 	br	10104540 <alt_alarm_start+0x124>
    }
  }
  else
  {
    return -ENOTSUP;
1010453c:	00bfde84 	movi	r2,-134
  }
}
10104540:	e037883a 	mov	sp,fp
10104544:	df000017 	ldw	fp,0(sp)
10104548:	dec00104 	addi	sp,sp,4
1010454c:	f800283a 	ret

10104550 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
10104550:	deffff04 	addi	sp,sp,-4
10104554:	df000015 	stw	fp,0(sp)
10104558:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
1010455c:	0001883a 	nop
10104560:	e037883a 	mov	sp,fp
10104564:	df000017 	ldw	fp,0(sp)
10104568:	dec00104 	addi	sp,sp,4
1010456c:	f800283a 	ret

10104570 <alt_get_errno>:
{
10104570:	defffe04 	addi	sp,sp,-8
10104574:	dfc00115 	stw	ra,4(sp)
10104578:	df000015 	stw	fp,0(sp)
1010457c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10104580:	d0a00917 	ldw	r2,-32732(gp)
10104584:	10000326 	beq	r2,zero,10104594 <alt_get_errno+0x24>
10104588:	d0a00917 	ldw	r2,-32732(gp)
1010458c:	103ee83a 	callr	r2
10104590:	00000106 	br	10104598 <alt_get_errno+0x28>
10104594:	d0a6ac04 	addi	r2,gp,-25936
}
10104598:	e037883a 	mov	sp,fp
1010459c:	dfc00117 	ldw	ra,4(sp)
101045a0:	df000017 	ldw	fp,0(sp)
101045a4:	dec00204 	addi	sp,sp,8
101045a8:	f800283a 	ret

101045ac <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
101045ac:	defffa04 	addi	sp,sp,-24
101045b0:	dfc00515 	stw	ra,20(sp)
101045b4:	df000415 	stw	fp,16(sp)
101045b8:	df000404 	addi	fp,sp,16
101045bc:	e13ffd15 	stw	r4,-12(fp)
101045c0:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
101045c4:	e0bffd17 	ldw	r2,-12(fp)
101045c8:	10000326 	beq	r2,zero,101045d8 <alt_dev_llist_insert+0x2c>
101045cc:	e0bffd17 	ldw	r2,-12(fp)
101045d0:	10800217 	ldw	r2,8(r2)
101045d4:	1000061e 	bne	r2,zero,101045f0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
101045d8:	01045700 	call	10104570 <alt_get_errno>
101045dc:	1007883a 	mov	r3,r2
101045e0:	00800584 	movi	r2,22
101045e4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
101045e8:	00bffa84 	movi	r2,-22
101045ec:	00001406 	br	10104640 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
101045f0:	e0bffd17 	ldw	r2,-12(fp)
101045f4:	e0fffc17 	ldw	r3,-16(fp)
101045f8:	e0ffff15 	stw	r3,-4(fp)
101045fc:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
10104600:	e0bffe17 	ldw	r2,-8(fp)
10104604:	e0ffff17 	ldw	r3,-4(fp)
10104608:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1010460c:	e0bfff17 	ldw	r2,-4(fp)
10104610:	10c00017 	ldw	r3,0(r2)
10104614:	e0bffe17 	ldw	r2,-8(fp)
10104618:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
1010461c:	e0bfff17 	ldw	r2,-4(fp)
10104620:	10800017 	ldw	r2,0(r2)
10104624:	e0fffe17 	ldw	r3,-8(fp)
10104628:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1010462c:	e0bfff17 	ldw	r2,-4(fp)
10104630:	e0fffe17 	ldw	r3,-8(fp)
10104634:	10c00015 	stw	r3,0(r2)
}
10104638:	0001883a 	nop

  return 0;  
1010463c:	0005883a 	mov	r2,zero
}
10104640:	e037883a 	mov	sp,fp
10104644:	dfc00117 	ldw	ra,4(sp)
10104648:	df000017 	ldw	fp,0(sp)
1010464c:	dec00204 	addi	sp,sp,8
10104650:	f800283a 	ret

10104654 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
10104654:	defffd04 	addi	sp,sp,-12
10104658:	dfc00215 	stw	ra,8(sp)
1010465c:	df000115 	stw	fp,4(sp)
10104660:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10104664:	00840434 	movhi	r2,4112
10104668:	10953e04 	addi	r2,r2,21752
1010466c:	e0bfff15 	stw	r2,-4(fp)
10104670:	00000606 	br	1010468c <_do_ctors+0x38>
        (*ctor) (); 
10104674:	e0bfff17 	ldw	r2,-4(fp)
10104678:	10800017 	ldw	r2,0(r2)
1010467c:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10104680:	e0bfff17 	ldw	r2,-4(fp)
10104684:	10bfff04 	addi	r2,r2,-4
10104688:	e0bfff15 	stw	r2,-4(fp)
1010468c:	e0ffff17 	ldw	r3,-4(fp)
10104690:	00840434 	movhi	r2,4112
10104694:	10953f04 	addi	r2,r2,21756
10104698:	18bff62e 	bgeu	r3,r2,10104674 <_do_ctors+0x20>
}
1010469c:	0001883a 	nop
101046a0:	0001883a 	nop
101046a4:	e037883a 	mov	sp,fp
101046a8:	dfc00117 	ldw	ra,4(sp)
101046ac:	df000017 	ldw	fp,0(sp)
101046b0:	dec00204 	addi	sp,sp,8
101046b4:	f800283a 	ret

101046b8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
101046b8:	defffd04 	addi	sp,sp,-12
101046bc:	dfc00215 	stw	ra,8(sp)
101046c0:	df000115 	stw	fp,4(sp)
101046c4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
101046c8:	00840434 	movhi	r2,4112
101046cc:	10953e04 	addi	r2,r2,21752
101046d0:	e0bfff15 	stw	r2,-4(fp)
101046d4:	00000606 	br	101046f0 <_do_dtors+0x38>
        (*dtor) (); 
101046d8:	e0bfff17 	ldw	r2,-4(fp)
101046dc:	10800017 	ldw	r2,0(r2)
101046e0:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
101046e4:	e0bfff17 	ldw	r2,-4(fp)
101046e8:	10bfff04 	addi	r2,r2,-4
101046ec:	e0bfff15 	stw	r2,-4(fp)
101046f0:	e0ffff17 	ldw	r3,-4(fp)
101046f4:	00840434 	movhi	r2,4112
101046f8:	10953f04 	addi	r2,r2,21756
101046fc:	18bff62e 	bgeu	r3,r2,101046d8 <_do_dtors+0x20>
}
10104700:	0001883a 	nop
10104704:	0001883a 	nop
10104708:	e037883a 	mov	sp,fp
1010470c:	dfc00117 	ldw	ra,4(sp)
10104710:	df000017 	ldw	fp,0(sp)
10104714:	dec00204 	addi	sp,sp,8
10104718:	f800283a 	ret

1010471c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
1010471c:	deffff04 	addi	sp,sp,-4
10104720:	df000015 	stw	fp,0(sp)
10104724:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
10104728:	0001883a 	nop
1010472c:	e037883a 	mov	sp,fp
10104730:	df000017 	ldw	fp,0(sp)
10104734:	dec00104 	addi	sp,sp,4
10104738:	f800283a 	ret

1010473c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1010473c:	defff904 	addi	sp,sp,-28
10104740:	dfc00615 	stw	ra,24(sp)
10104744:	df000515 	stw	fp,20(sp)
10104748:	df000504 	addi	fp,sp,20
1010474c:	e13fff15 	stw	r4,-4(fp)
10104750:	e17ffe15 	stw	r5,-8(fp)
10104754:	e1bffd15 	stw	r6,-12(fp)
10104758:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
1010475c:	e0800217 	ldw	r2,8(fp)
10104760:	d8800015 	stw	r2,0(sp)
10104764:	e1fffc17 	ldw	r7,-16(fp)
10104768:	e1bffd17 	ldw	r6,-12(fp)
1010476c:	e17ffe17 	ldw	r5,-8(fp)
10104770:	e13fff17 	ldw	r4,-4(fp)
10104774:	01048ec0 	call	101048ec <alt_iic_isr_register>
}  
10104778:	e037883a 	mov	sp,fp
1010477c:	dfc00117 	ldw	ra,4(sp)
10104780:	df000017 	ldw	fp,0(sp)
10104784:	dec00204 	addi	sp,sp,8
10104788:	f800283a 	ret

1010478c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
1010478c:	defff904 	addi	sp,sp,-28
10104790:	df000615 	stw	fp,24(sp)
10104794:	df000604 	addi	fp,sp,24
10104798:	e13ffb15 	stw	r4,-20(fp)
1010479c:	e17ffa15 	stw	r5,-24(fp)
101047a0:	e0bffa17 	ldw	r2,-24(fp)
101047a4:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
101047a8:	0005303a 	rdctl	r2,status
101047ac:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
101047b0:	e0fffe17 	ldw	r3,-8(fp)
101047b4:	00bfff84 	movi	r2,-2
101047b8:	1884703a 	and	r2,r3,r2
101047bc:	1001703a 	wrctl	status,r2
  return context;
101047c0:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
101047c4:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
101047c8:	00c00044 	movi	r3,1
101047cc:	e0bfff17 	ldw	r2,-4(fp)
101047d0:	1884983a 	sll	r2,r3,r2
101047d4:	1007883a 	mov	r3,r2
101047d8:	d0a6b017 	ldw	r2,-25920(gp)
101047dc:	1884b03a 	or	r2,r3,r2
101047e0:	d0a6b015 	stw	r2,-25920(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
101047e4:	d0a6b017 	ldw	r2,-25920(gp)
101047e8:	100170fa 	wrctl	ienable,r2
101047ec:	e0bffd17 	ldw	r2,-12(fp)
101047f0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
101047f4:	e0bffc17 	ldw	r2,-16(fp)
101047f8:	1001703a 	wrctl	status,r2
}
101047fc:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
10104800:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
10104804:	e037883a 	mov	sp,fp
10104808:	df000017 	ldw	fp,0(sp)
1010480c:	dec00104 	addi	sp,sp,4
10104810:	f800283a 	ret

10104814 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
10104814:	defff904 	addi	sp,sp,-28
10104818:	df000615 	stw	fp,24(sp)
1010481c:	df000604 	addi	fp,sp,24
10104820:	e13ffb15 	stw	r4,-20(fp)
10104824:	e17ffa15 	stw	r5,-24(fp)
10104828:	e0bffa17 	ldw	r2,-24(fp)
1010482c:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
10104830:	0005303a 	rdctl	r2,status
10104834:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10104838:	e0fffe17 	ldw	r3,-8(fp)
1010483c:	00bfff84 	movi	r2,-2
10104840:	1884703a 	and	r2,r3,r2
10104844:	1001703a 	wrctl	status,r2
  return context;
10104848:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
1010484c:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
10104850:	00c00044 	movi	r3,1
10104854:	e0bfff17 	ldw	r2,-4(fp)
10104858:	1884983a 	sll	r2,r3,r2
1010485c:	0084303a 	nor	r2,zero,r2
10104860:	1007883a 	mov	r3,r2
10104864:	d0a6b017 	ldw	r2,-25920(gp)
10104868:	1884703a 	and	r2,r3,r2
1010486c:	d0a6b015 	stw	r2,-25920(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10104870:	d0a6b017 	ldw	r2,-25920(gp)
10104874:	100170fa 	wrctl	ienable,r2
10104878:	e0bffd17 	ldw	r2,-12(fp)
1010487c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
10104880:	e0bffc17 	ldw	r2,-16(fp)
10104884:	1001703a 	wrctl	status,r2
}
10104888:	0001883a 	nop
  return 0;
1010488c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
10104890:	e037883a 	mov	sp,fp
10104894:	df000017 	ldw	fp,0(sp)
10104898:	dec00104 	addi	sp,sp,4
1010489c:	f800283a 	ret

101048a0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
101048a0:	defffc04 	addi	sp,sp,-16
101048a4:	df000315 	stw	fp,12(sp)
101048a8:	df000304 	addi	fp,sp,12
101048ac:	e13ffe15 	stw	r4,-8(fp)
101048b0:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
101048b4:	000530fa 	rdctl	r2,ienable
101048b8:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
101048bc:	00c00044 	movi	r3,1
101048c0:	e0bffd17 	ldw	r2,-12(fp)
101048c4:	1884983a 	sll	r2,r3,r2
101048c8:	1007883a 	mov	r3,r2
101048cc:	e0bfff17 	ldw	r2,-4(fp)
101048d0:	1884703a 	and	r2,r3,r2
101048d4:	1004c03a 	cmpne	r2,r2,zero
101048d8:	10803fcc 	andi	r2,r2,255
}
101048dc:	e037883a 	mov	sp,fp
101048e0:	df000017 	ldw	fp,0(sp)
101048e4:	dec00104 	addi	sp,sp,4
101048e8:	f800283a 	ret

101048ec <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
101048ec:	defff504 	addi	sp,sp,-44
101048f0:	dfc00a15 	stw	ra,40(sp)
101048f4:	df000915 	stw	fp,36(sp)
101048f8:	df000904 	addi	fp,sp,36
101048fc:	e13ffa15 	stw	r4,-24(fp)
10104900:	e17ff915 	stw	r5,-28(fp)
10104904:	e1bff815 	stw	r6,-32(fp)
10104908:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
1010490c:	00bffa84 	movi	r2,-22
10104910:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10104914:	e0bff917 	ldw	r2,-28(fp)
10104918:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
1010491c:	e0bffe17 	ldw	r2,-8(fp)
10104920:	10800808 	cmpgei	r2,r2,32
10104924:	1000251e 	bne	r2,zero,101049bc <alt_iic_isr_register+0xd0>
  NIOS2_READ_STATUS (context);
10104928:	0005303a 	rdctl	r2,status
1010492c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10104930:	e0fffc17 	ldw	r3,-16(fp)
10104934:	00bfff84 	movi	r2,-2
10104938:	1884703a 	and	r2,r3,r2
1010493c:	1001703a 	wrctl	status,r2
  return context;
10104940:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10104944:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
10104948:	e0bffe17 	ldw	r2,-8(fp)
1010494c:	100890fa 	slli	r4,r2,3
10104950:	e0fff817 	ldw	r3,-32(fp)
10104954:	00840474 	movhi	r2,4113
10104958:	2085883a 	add	r2,r4,r2
1010495c:	10e29d15 	stw	r3,-30092(r2)
    alt_irq[id].context = isr_context;
10104960:	e0bffe17 	ldw	r2,-8(fp)
10104964:	100890fa 	slli	r4,r2,3
10104968:	e0fff717 	ldw	r3,-36(fp)
1010496c:	00840474 	movhi	r2,4113
10104970:	2085883a 	add	r2,r4,r2
10104974:	10e29e15 	stw	r3,-30088(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
10104978:	e0bff817 	ldw	r2,-32(fp)
1010497c:	10000526 	beq	r2,zero,10104994 <alt_iic_isr_register+0xa8>
10104980:	e0bffe17 	ldw	r2,-8(fp)
10104984:	100b883a 	mov	r5,r2
10104988:	e13ffa17 	ldw	r4,-24(fp)
1010498c:	010478c0 	call	1010478c <alt_ic_irq_enable>
10104990:	00000406 	br	101049a4 <alt_iic_isr_register+0xb8>
10104994:	e0bffe17 	ldw	r2,-8(fp)
10104998:	100b883a 	mov	r5,r2
1010499c:	e13ffa17 	ldw	r4,-24(fp)
101049a0:	01048140 	call	10104814 <alt_ic_irq_disable>
101049a4:	e0bfff15 	stw	r2,-4(fp)
101049a8:	e0bffd17 	ldw	r2,-12(fp)
101049ac:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
101049b0:	e0bffb17 	ldw	r2,-20(fp)
101049b4:	1001703a 	wrctl	status,r2
}
101049b8:	0001883a 	nop

    alt_irq_enable_all(status);
  }

  return rc; 
101049bc:	e0bfff17 	ldw	r2,-4(fp)
}
101049c0:	e037883a 	mov	sp,fp
101049c4:	dfc00117 	ldw	ra,4(sp)
101049c8:	df000017 	ldw	fp,0(sp)
101049cc:	dec00204 	addi	sp,sp,8
101049d0:	f800283a 	ret

101049d4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
101049d4:	defff904 	addi	sp,sp,-28
101049d8:	dfc00615 	stw	ra,24(sp)
101049dc:	df000515 	stw	fp,20(sp)
101049e0:	df000504 	addi	fp,sp,20
101049e4:	e13ffe15 	stw	r4,-8(fp)
101049e8:	e17ffd15 	stw	r5,-12(fp)
101049ec:	e1bffc15 	stw	r6,-16(fp)
101049f0:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
101049f4:	e1bffb17 	ldw	r6,-20(fp)
101049f8:	e17ffc17 	ldw	r5,-16(fp)
101049fc:	e13ffd17 	ldw	r4,-12(fp)
10104a00:	0104c3c0 	call	10104c3c <open>
10104a04:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
10104a08:	e0bfff17 	ldw	r2,-4(fp)
10104a0c:	10002016 	blt	r2,zero,10104a90 <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
10104a10:	e0ffff17 	ldw	r3,-4(fp)
10104a14:	1805883a 	mov	r2,r3
10104a18:	1085883a 	add	r2,r2,r2
10104a1c:	10c5883a 	add	r2,r2,r3
10104a20:	100490ba 	slli	r2,r2,2
10104a24:	00c40434 	movhi	r3,4112
10104a28:	10c7883a 	add	r3,r2,r3
10104a2c:	18d76717 	ldw	r3,23964(r3)
10104a30:	e0bffe17 	ldw	r2,-8(fp)
10104a34:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
10104a38:	e0ffff17 	ldw	r3,-4(fp)
10104a3c:	1805883a 	mov	r2,r3
10104a40:	1085883a 	add	r2,r2,r2
10104a44:	10c5883a 	add	r2,r2,r3
10104a48:	100490ba 	slli	r2,r2,2
10104a4c:	00c40434 	movhi	r3,4112
10104a50:	10c7883a 	add	r3,r2,r3
10104a54:	18d76817 	ldw	r3,23968(r3)
10104a58:	e0bffe17 	ldw	r2,-8(fp)
10104a5c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10104a60:	e0ffff17 	ldw	r3,-4(fp)
10104a64:	1805883a 	mov	r2,r3
10104a68:	1085883a 	add	r2,r2,r2
10104a6c:	10c5883a 	add	r2,r2,r3
10104a70:	100490ba 	slli	r2,r2,2
10104a74:	00c40434 	movhi	r3,4112
10104a78:	10c7883a 	add	r3,r2,r3
10104a7c:	18d76917 	ldw	r3,23972(r3)
10104a80:	e0bffe17 	ldw	r2,-8(fp)
10104a84:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10104a88:	e13fff17 	ldw	r4,-4(fp)
10104a8c:	01036880 	call	10103688 <alt_release_fd>
  }
} 
10104a90:	0001883a 	nop
10104a94:	e037883a 	mov	sp,fp
10104a98:	dfc00117 	ldw	ra,4(sp)
10104a9c:	df000017 	ldw	fp,0(sp)
10104aa0:	dec00204 	addi	sp,sp,8
10104aa4:	f800283a 	ret

10104aa8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
10104aa8:	defffb04 	addi	sp,sp,-20
10104aac:	dfc00415 	stw	ra,16(sp)
10104ab0:	df000315 	stw	fp,12(sp)
10104ab4:	df000304 	addi	fp,sp,12
10104ab8:	e13fff15 	stw	r4,-4(fp)
10104abc:	e17ffe15 	stw	r5,-8(fp)
10104ac0:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10104ac4:	01c07fc4 	movi	r7,511
10104ac8:	01800044 	movi	r6,1
10104acc:	e17fff17 	ldw	r5,-4(fp)
10104ad0:	01040434 	movhi	r4,4112
10104ad4:	21176a04 	addi	r4,r4,23976
10104ad8:	01049d40 	call	101049d4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10104adc:	01c07fc4 	movi	r7,511
10104ae0:	000d883a 	mov	r6,zero
10104ae4:	e17ffe17 	ldw	r5,-8(fp)
10104ae8:	01040434 	movhi	r4,4112
10104aec:	21176704 	addi	r4,r4,23964
10104af0:	01049d40 	call	101049d4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10104af4:	01c07fc4 	movi	r7,511
10104af8:	01800044 	movi	r6,1
10104afc:	e17ffd17 	ldw	r5,-12(fp)
10104b00:	01040434 	movhi	r4,4112
10104b04:	21176d04 	addi	r4,r4,23988
10104b08:	01049d40 	call	101049d4 <alt_open_fd>
}  
10104b0c:	0001883a 	nop
10104b10:	e037883a 	mov	sp,fp
10104b14:	dfc00117 	ldw	ra,4(sp)
10104b18:	df000017 	ldw	fp,0(sp)
10104b1c:	dec00204 	addi	sp,sp,8
10104b20:	f800283a 	ret

10104b24 <alt_get_errno>:
{
10104b24:	defffe04 	addi	sp,sp,-8
10104b28:	dfc00115 	stw	ra,4(sp)
10104b2c:	df000015 	stw	fp,0(sp)
10104b30:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10104b34:	d0a00917 	ldw	r2,-32732(gp)
10104b38:	10000326 	beq	r2,zero,10104b48 <alt_get_errno+0x24>
10104b3c:	d0a00917 	ldw	r2,-32732(gp)
10104b40:	103ee83a 	callr	r2
10104b44:	00000106 	br	10104b4c <alt_get_errno+0x28>
10104b48:	d0a6ac04 	addi	r2,gp,-25936
}
10104b4c:	e037883a 	mov	sp,fp
10104b50:	dfc00117 	ldw	ra,4(sp)
10104b54:	df000017 	ldw	fp,0(sp)
10104b58:	dec00204 	addi	sp,sp,8
10104b5c:	f800283a 	ret

10104b60 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
10104b60:	defffd04 	addi	sp,sp,-12
10104b64:	df000215 	stw	fp,8(sp)
10104b68:	df000204 	addi	fp,sp,8
10104b6c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
10104b70:	e0bffe17 	ldw	r2,-8(fp)
10104b74:	10800217 	ldw	r2,8(r2)
10104b78:	10d00034 	orhi	r3,r2,16384
10104b7c:	e0bffe17 	ldw	r2,-8(fp)
10104b80:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10104b84:	e03fff15 	stw	zero,-4(fp)
10104b88:	00002306 	br	10104c18 <alt_file_locked+0xb8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10104b8c:	e0ffff17 	ldw	r3,-4(fp)
10104b90:	1805883a 	mov	r2,r3
10104b94:	1085883a 	add	r2,r2,r2
10104b98:	10c5883a 	add	r2,r2,r3
10104b9c:	100490ba 	slli	r2,r2,2
10104ba0:	00c40434 	movhi	r3,4112
10104ba4:	10c7883a 	add	r3,r2,r3
10104ba8:	18d76717 	ldw	r3,23964(r3)
10104bac:	e0bffe17 	ldw	r2,-8(fp)
10104bb0:	10800017 	ldw	r2,0(r2)
10104bb4:	1880151e 	bne	r3,r2,10104c0c <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10104bb8:	e0ffff17 	ldw	r3,-4(fp)
10104bbc:	1805883a 	mov	r2,r3
10104bc0:	1085883a 	add	r2,r2,r2
10104bc4:	10c5883a 	add	r2,r2,r3
10104bc8:	100490ba 	slli	r2,r2,2
10104bcc:	00c40434 	movhi	r3,4112
10104bd0:	10c7883a 	add	r3,r2,r3
10104bd4:	18976917 	ldw	r2,23972(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
10104bd8:	10000c0e 	bge	r2,zero,10104c0c <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
10104bdc:	e0ffff17 	ldw	r3,-4(fp)
10104be0:	1805883a 	mov	r2,r3
10104be4:	1085883a 	add	r2,r2,r2
10104be8:	10c5883a 	add	r2,r2,r3
10104bec:	100490ba 	slli	r2,r2,2
10104bf0:	00c40434 	movhi	r3,4112
10104bf4:	18d76704 	addi	r3,r3,23964
10104bf8:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10104bfc:	e0fffe17 	ldw	r3,-8(fp)
10104c00:	18800226 	beq	r3,r2,10104c0c <alt_file_locked+0xac>
    {
      return -EACCES;
10104c04:	00bffcc4 	movi	r2,-13
10104c08:	00000806 	br	10104c2c <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
10104c0c:	e0bfff17 	ldw	r2,-4(fp)
10104c10:	10800044 	addi	r2,r2,1
10104c14:	e0bfff15 	stw	r2,-4(fp)
10104c18:	d0a00817 	ldw	r2,-32736(gp)
10104c1c:	1007883a 	mov	r3,r2
10104c20:	e0bfff17 	ldw	r2,-4(fp)
10104c24:	18bfd92e 	bgeu	r3,r2,10104b8c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
10104c28:	0005883a 	mov	r2,zero
}
10104c2c:	e037883a 	mov	sp,fp
10104c30:	df000017 	ldw	fp,0(sp)
10104c34:	dec00104 	addi	sp,sp,4
10104c38:	f800283a 	ret

10104c3c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10104c3c:	defff604 	addi	sp,sp,-40
10104c40:	dfc00915 	stw	ra,36(sp)
10104c44:	df000815 	stw	fp,32(sp)
10104c48:	df000804 	addi	fp,sp,32
10104c4c:	e13ffa15 	stw	r4,-24(fp)
10104c50:	e17ff915 	stw	r5,-28(fp)
10104c54:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
10104c58:	00bfffc4 	movi	r2,-1
10104c5c:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
10104c60:	00bffb44 	movi	r2,-19
10104c64:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
10104c68:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10104c6c:	d1600604 	addi	r5,gp,-32744
10104c70:	e13ffa17 	ldw	r4,-24(fp)
10104c74:	0104f6c0 	call	10104f6c <alt_find_dev>
10104c78:	e0bfff15 	stw	r2,-4(fp)
10104c7c:	e0bfff17 	ldw	r2,-4(fp)
10104c80:	1000051e 	bne	r2,zero,10104c98 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
10104c84:	e13ffa17 	ldw	r4,-24(fp)
10104c88:	0104ffc0 	call	10104ffc <alt_find_file>
10104c8c:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
10104c90:	00800044 	movi	r2,1
10104c94:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
10104c98:	e0bfff17 	ldw	r2,-4(fp)
10104c9c:	10002c26 	beq	r2,zero,10104d50 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
10104ca0:	e13fff17 	ldw	r4,-4(fp)
10104ca4:	01051040 	call	10105104 <alt_get_fd>
10104ca8:	e0bffe15 	stw	r2,-8(fp)
10104cac:	e0bffe17 	ldw	r2,-8(fp)
10104cb0:	1000030e 	bge	r2,zero,10104cc0 <open+0x84>
    {
      status = index;
10104cb4:	e0bffe17 	ldw	r2,-8(fp)
10104cb8:	e0bffd15 	stw	r2,-12(fp)
10104cbc:	00002606 	br	10104d58 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
10104cc0:	e0fffe17 	ldw	r3,-8(fp)
10104cc4:	1805883a 	mov	r2,r3
10104cc8:	1085883a 	add	r2,r2,r2
10104ccc:	10c5883a 	add	r2,r2,r3
10104cd0:	100490ba 	slli	r2,r2,2
10104cd4:	00c40434 	movhi	r3,4112
10104cd8:	18d76704 	addi	r3,r3,23964
10104cdc:	10c5883a 	add	r2,r2,r3
10104ce0:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
10104ce4:	e0fff917 	ldw	r3,-28(fp)
10104ce8:	00900034 	movhi	r2,16384
10104cec:	10bfffc4 	addi	r2,r2,-1
10104cf0:	1886703a 	and	r3,r3,r2
10104cf4:	e0bffb17 	ldw	r2,-20(fp)
10104cf8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10104cfc:	e0bffc17 	ldw	r2,-16(fp)
10104d00:	1000051e 	bne	r2,zero,10104d18 <open+0xdc>
10104d04:	e13ffb17 	ldw	r4,-20(fp)
10104d08:	0104b600 	call	10104b60 <alt_file_locked>
10104d0c:	e0bffd15 	stw	r2,-12(fp)
10104d10:	e0bffd17 	ldw	r2,-12(fp)
10104d14:	10001016 	blt	r2,zero,10104d58 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
10104d18:	e0bfff17 	ldw	r2,-4(fp)
10104d1c:	10800317 	ldw	r2,12(r2)
10104d20:	10000826 	beq	r2,zero,10104d44 <open+0x108>
10104d24:	e0bfff17 	ldw	r2,-4(fp)
10104d28:	10800317 	ldw	r2,12(r2)
10104d2c:	e1fff817 	ldw	r7,-32(fp)
10104d30:	e1bff917 	ldw	r6,-28(fp)
10104d34:	e17ffa17 	ldw	r5,-24(fp)
10104d38:	e13ffb17 	ldw	r4,-20(fp)
10104d3c:	103ee83a 	callr	r2
10104d40:	00000106 	br	10104d48 <open+0x10c>
10104d44:	0005883a 	mov	r2,zero
10104d48:	e0bffd15 	stw	r2,-12(fp)
10104d4c:	00000206 	br	10104d58 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
10104d50:	00bffb44 	movi	r2,-19
10104d54:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
10104d58:	e0bffd17 	ldw	r2,-12(fp)
10104d5c:	1000090e 	bge	r2,zero,10104d84 <open+0x148>
  {
    alt_release_fd (index);  
10104d60:	e13ffe17 	ldw	r4,-8(fp)
10104d64:	01036880 	call	10103688 <alt_release_fd>
    ALT_ERRNO = -status;
10104d68:	0104b240 	call	10104b24 <alt_get_errno>
10104d6c:	1007883a 	mov	r3,r2
10104d70:	e0bffd17 	ldw	r2,-12(fp)
10104d74:	0085c83a 	sub	r2,zero,r2
10104d78:	18800015 	stw	r2,0(r3)
    return -1;
10104d7c:	00bfffc4 	movi	r2,-1
10104d80:	00000106 	br	10104d88 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
10104d84:	e0bffe17 	ldw	r2,-8(fp)
}
10104d88:	e037883a 	mov	sp,fp
10104d8c:	dfc00117 	ldw	ra,4(sp)
10104d90:	df000017 	ldw	fp,0(sp)
10104d94:	dec00204 	addi	sp,sp,8
10104d98:	f800283a 	ret

10104d9c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10104d9c:	defffa04 	addi	sp,sp,-24
10104da0:	df000515 	stw	fp,20(sp)
10104da4:	df000504 	addi	fp,sp,20
10104da8:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
10104dac:	0005303a 	rdctl	r2,status
10104db0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10104db4:	e0fffc17 	ldw	r3,-16(fp)
10104db8:	00bfff84 	movi	r2,-2
10104dbc:	1884703a 	and	r2,r3,r2
10104dc0:	1001703a 	wrctl	status,r2
  return context;
10104dc4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
10104dc8:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
10104dcc:	e0bffb17 	ldw	r2,-20(fp)
10104dd0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10104dd4:	e0bffd17 	ldw	r2,-12(fp)
10104dd8:	10800017 	ldw	r2,0(r2)
10104ddc:	e0fffd17 	ldw	r3,-12(fp)
10104de0:	18c00117 	ldw	r3,4(r3)
10104de4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
10104de8:	e0bffd17 	ldw	r2,-12(fp)
10104dec:	10800117 	ldw	r2,4(r2)
10104df0:	e0fffd17 	ldw	r3,-12(fp)
10104df4:	18c00017 	ldw	r3,0(r3)
10104df8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
10104dfc:	e0bffd17 	ldw	r2,-12(fp)
10104e00:	e0fffd17 	ldw	r3,-12(fp)
10104e04:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10104e08:	e0bffd17 	ldw	r2,-12(fp)
10104e0c:	e0fffd17 	ldw	r3,-12(fp)
10104e10:	10c00015 	stw	r3,0(r2)
} 
10104e14:	0001883a 	nop
10104e18:	e0bfff17 	ldw	r2,-4(fp)
10104e1c:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
10104e20:	e0bffe17 	ldw	r2,-8(fp)
10104e24:	1001703a 	wrctl	status,r2
}
10104e28:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
10104e2c:	0001883a 	nop
10104e30:	e037883a 	mov	sp,fp
10104e34:	df000017 	ldw	fp,0(sp)
10104e38:	dec00104 	addi	sp,sp,4
10104e3c:	f800283a 	ret

10104e40 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10104e40:	defffb04 	addi	sp,sp,-20
10104e44:	dfc00415 	stw	ra,16(sp)
10104e48:	df000315 	stw	fp,12(sp)
10104e4c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10104e50:	d0a00c17 	ldw	r2,-32720(gp)
10104e54:	e0bfff15 	stw	r2,-4(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10104e58:	d0a6b217 	ldw	r2,-25912(gp)
10104e5c:	10800044 	addi	r2,r2,1
10104e60:	d0a6b215 	stw	r2,-25912(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10104e64:	00002e06 	br	10104f20 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10104e68:	e0bfff17 	ldw	r2,-4(fp)
10104e6c:	10800017 	ldw	r2,0(r2)
10104e70:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10104e74:	e0bfff17 	ldw	r2,-4(fp)
10104e78:	10800403 	ldbu	r2,16(r2)
10104e7c:	10803fcc 	andi	r2,r2,255
10104e80:	10000426 	beq	r2,zero,10104e94 <alt_tick+0x54>
10104e84:	d0a6b217 	ldw	r2,-25912(gp)
10104e88:	1000021e 	bne	r2,zero,10104e94 <alt_tick+0x54>
    {
      alarm->rollover = 0;
10104e8c:	e0bfff17 	ldw	r2,-4(fp)
10104e90:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10104e94:	e0bfff17 	ldw	r2,-4(fp)
10104e98:	10800217 	ldw	r2,8(r2)
10104e9c:	d0e6b217 	ldw	r3,-25912(gp)
10104ea0:	18801d36 	bltu	r3,r2,10104f18 <alt_tick+0xd8>
10104ea4:	e0bfff17 	ldw	r2,-4(fp)
10104ea8:	10800403 	ldbu	r2,16(r2)
10104eac:	10803fcc 	andi	r2,r2,255
10104eb0:	1000191e 	bne	r2,zero,10104f18 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
10104eb4:	e0bfff17 	ldw	r2,-4(fp)
10104eb8:	10800317 	ldw	r2,12(r2)
10104ebc:	e0ffff17 	ldw	r3,-4(fp)
10104ec0:	18c00517 	ldw	r3,20(r3)
10104ec4:	1809883a 	mov	r4,r3
10104ec8:	103ee83a 	callr	r2
10104ecc:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10104ed0:	e0bffd17 	ldw	r2,-12(fp)
10104ed4:	1000031e 	bne	r2,zero,10104ee4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
10104ed8:	e13fff17 	ldw	r4,-4(fp)
10104edc:	0104d9c0 	call	10104d9c <alt_alarm_stop>
10104ee0:	00000d06 	br	10104f18 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
10104ee4:	e0bfff17 	ldw	r2,-4(fp)
10104ee8:	10c00217 	ldw	r3,8(r2)
10104eec:	e0bffd17 	ldw	r2,-12(fp)
10104ef0:	1887883a 	add	r3,r3,r2
10104ef4:	e0bfff17 	ldw	r2,-4(fp)
10104ef8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
10104efc:	e0bfff17 	ldw	r2,-4(fp)
10104f00:	10c00217 	ldw	r3,8(r2)
10104f04:	d0a6b217 	ldw	r2,-25912(gp)
10104f08:	1880032e 	bgeu	r3,r2,10104f18 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
10104f0c:	e0bfff17 	ldw	r2,-4(fp)
10104f10:	00c00044 	movi	r3,1
10104f14:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
10104f18:	e0bffe17 	ldw	r2,-8(fp)
10104f1c:	e0bfff15 	stw	r2,-4(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
10104f20:	e0ffff17 	ldw	r3,-4(fp)
10104f24:	d0a00c04 	addi	r2,gp,-32720
10104f28:	18bfcf1e 	bne	r3,r2,10104e68 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
10104f2c:	0001883a 	nop
}
10104f30:	0001883a 	nop
10104f34:	e037883a 	mov	sp,fp
10104f38:	dfc00117 	ldw	ra,4(sp)
10104f3c:	df000017 	ldw	fp,0(sp)
10104f40:	dec00204 	addi	sp,sp,8
10104f44:	f800283a 	ret

10104f48 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
10104f48:	deffff04 	addi	sp,sp,-4
10104f4c:	df000015 	stw	fp,0(sp)
10104f50:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10104f54:	000170fa 	wrctl	ienable,zero
}
10104f58:	0001883a 	nop
10104f5c:	e037883a 	mov	sp,fp
10104f60:	df000017 	ldw	fp,0(sp)
10104f64:	dec00104 	addi	sp,sp,4
10104f68:	f800283a 	ret

10104f6c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10104f6c:	defffa04 	addi	sp,sp,-24
10104f70:	dfc00515 	stw	ra,20(sp)
10104f74:	df000415 	stw	fp,16(sp)
10104f78:	df000404 	addi	fp,sp,16
10104f7c:	e13ffd15 	stw	r4,-12(fp)
10104f80:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
10104f84:	e0bffc17 	ldw	r2,-16(fp)
10104f88:	10800017 	ldw	r2,0(r2)
10104f8c:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10104f90:	e13ffd17 	ldw	r4,-12(fp)
10104f94:	01003700 	call	10100370 <strlen>
10104f98:	10800044 	addi	r2,r2,1
10104f9c:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10104fa0:	00000d06 	br	10104fd8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10104fa4:	e0bfff17 	ldw	r2,-4(fp)
10104fa8:	10800217 	ldw	r2,8(r2)
10104fac:	e0fffe17 	ldw	r3,-8(fp)
10104fb0:	180d883a 	mov	r6,r3
10104fb4:	e17ffd17 	ldw	r5,-12(fp)
10104fb8:	1009883a 	mov	r4,r2
10104fbc:	010529c0 	call	1010529c <memcmp>
10104fc0:	1000021e 	bne	r2,zero,10104fcc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
10104fc4:	e0bfff17 	ldw	r2,-4(fp)
10104fc8:	00000706 	br	10104fe8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10104fcc:	e0bfff17 	ldw	r2,-4(fp)
10104fd0:	10800017 	ldw	r2,0(r2)
10104fd4:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
10104fd8:	e0ffff17 	ldw	r3,-4(fp)
10104fdc:	e0bffc17 	ldw	r2,-16(fp)
10104fe0:	18bff01e 	bne	r3,r2,10104fa4 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
10104fe4:	0005883a 	mov	r2,zero
}
10104fe8:	e037883a 	mov	sp,fp
10104fec:	dfc00117 	ldw	ra,4(sp)
10104ff0:	df000017 	ldw	fp,0(sp)
10104ff4:	dec00204 	addi	sp,sp,8
10104ff8:	f800283a 	ret

10104ffc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10104ffc:	defffb04 	addi	sp,sp,-20
10105000:	dfc00415 	stw	ra,16(sp)
10105004:	df000315 	stw	fp,12(sp)
10105008:	df000304 	addi	fp,sp,12
1010500c:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10105010:	d0a00417 	ldw	r2,-32752(gp)
10105014:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10105018:	00003106 	br	101050e0 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
1010501c:	e0bfff17 	ldw	r2,-4(fp)
10105020:	10800217 	ldw	r2,8(r2)
10105024:	1009883a 	mov	r4,r2
10105028:	01003700 	call	10100370 <strlen>
1010502c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10105030:	e0bfff17 	ldw	r2,-4(fp)
10105034:	10c00217 	ldw	r3,8(r2)
10105038:	e0bffe17 	ldw	r2,-8(fp)
1010503c:	10bfffc4 	addi	r2,r2,-1
10105040:	1885883a 	add	r2,r3,r2
10105044:	10800003 	ldbu	r2,0(r2)
10105048:	10803fcc 	andi	r2,r2,255
1010504c:	1080201c 	xori	r2,r2,128
10105050:	10bfe004 	addi	r2,r2,-128
10105054:	10800bd8 	cmpnei	r2,r2,47
10105058:	1000031e 	bne	r2,zero,10105068 <alt_find_file+0x6c>
    {
      len -= 1;
1010505c:	e0bffe17 	ldw	r2,-8(fp)
10105060:	10bfffc4 	addi	r2,r2,-1
10105064:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10105068:	e0bffe17 	ldw	r2,-8(fp)
1010506c:	e0fffd17 	ldw	r3,-12(fp)
10105070:	1885883a 	add	r2,r3,r2
10105074:	10800003 	ldbu	r2,0(r2)
10105078:	10803fcc 	andi	r2,r2,255
1010507c:	1080201c 	xori	r2,r2,128
10105080:	10bfe004 	addi	r2,r2,-128
10105084:	10800be0 	cmpeqi	r2,r2,47
10105088:	1000081e 	bne	r2,zero,101050ac <alt_find_file+0xb0>
1010508c:	e0bffe17 	ldw	r2,-8(fp)
10105090:	e0fffd17 	ldw	r3,-12(fp)
10105094:	1885883a 	add	r2,r3,r2
10105098:	10800003 	ldbu	r2,0(r2)
1010509c:	10803fcc 	andi	r2,r2,255
101050a0:	1080201c 	xori	r2,r2,128
101050a4:	10bfe004 	addi	r2,r2,-128
101050a8:	10000a1e 	bne	r2,zero,101050d4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
101050ac:	e0bfff17 	ldw	r2,-4(fp)
101050b0:	10800217 	ldw	r2,8(r2)
101050b4:	e0fffe17 	ldw	r3,-8(fp)
101050b8:	180d883a 	mov	r6,r3
101050bc:	e17ffd17 	ldw	r5,-12(fp)
101050c0:	1009883a 	mov	r4,r2
101050c4:	010529c0 	call	1010529c <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
101050c8:	1000021e 	bne	r2,zero,101050d4 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
101050cc:	e0bfff17 	ldw	r2,-4(fp)
101050d0:	00000706 	br	101050f0 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
101050d4:	e0bfff17 	ldw	r2,-4(fp)
101050d8:	10800017 	ldw	r2,0(r2)
101050dc:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
101050e0:	e0ffff17 	ldw	r3,-4(fp)
101050e4:	d0a00404 	addi	r2,gp,-32752
101050e8:	18bfcc1e 	bne	r3,r2,1010501c <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
101050ec:	0005883a 	mov	r2,zero
}
101050f0:	e037883a 	mov	sp,fp
101050f4:	dfc00117 	ldw	ra,4(sp)
101050f8:	df000017 	ldw	fp,0(sp)
101050fc:	dec00204 	addi	sp,sp,8
10105100:	f800283a 	ret

10105104 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10105104:	defffc04 	addi	sp,sp,-16
10105108:	df000315 	stw	fp,12(sp)
1010510c:	df000304 	addi	fp,sp,12
10105110:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
10105114:	00bffa04 	movi	r2,-24
10105118:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1010511c:	e03fff15 	stw	zero,-4(fp)
10105120:	00001d06 	br	10105198 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
10105124:	e0ffff17 	ldw	r3,-4(fp)
10105128:	1805883a 	mov	r2,r3
1010512c:	1085883a 	add	r2,r2,r2
10105130:	10c5883a 	add	r2,r2,r3
10105134:	100490ba 	slli	r2,r2,2
10105138:	00c40434 	movhi	r3,4112
1010513c:	10c7883a 	add	r3,r2,r3
10105140:	18976717 	ldw	r2,23964(r3)
10105144:	1000111e 	bne	r2,zero,1010518c <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
10105148:	e0ffff17 	ldw	r3,-4(fp)
1010514c:	1805883a 	mov	r2,r3
10105150:	1085883a 	add	r2,r2,r2
10105154:	10c5883a 	add	r2,r2,r3
10105158:	100490ba 	slli	r2,r2,2
1010515c:	e13ffd17 	ldw	r4,-12(fp)
10105160:	00c40434 	movhi	r3,4112
10105164:	10c7883a 	add	r3,r2,r3
10105168:	19176715 	stw	r4,23964(r3)
      if (i > alt_max_fd)
1010516c:	d0e00817 	ldw	r3,-32736(gp)
10105170:	e0bfff17 	ldw	r2,-4(fp)
10105174:	1880020e 	bge	r3,r2,10105180 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
10105178:	e0bfff17 	ldw	r2,-4(fp)
1010517c:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
10105180:	e0bfff17 	ldw	r2,-4(fp)
10105184:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
10105188:	00000706 	br	101051a8 <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
1010518c:	e0bfff17 	ldw	r2,-4(fp)
10105190:	10800044 	addi	r2,r2,1
10105194:	e0bfff15 	stw	r2,-4(fp)
10105198:	e0bfff17 	ldw	r2,-4(fp)
1010519c:	10800810 	cmplti	r2,r2,32
101051a0:	103fe01e 	bne	r2,zero,10105124 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
101051a4:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
101051a8:	e0bffe17 	ldw	r2,-8(fp)
}
101051ac:	e037883a 	mov	sp,fp
101051b0:	df000017 	ldw	fp,0(sp)
101051b4:	dec00104 	addi	sp,sp,4
101051b8:	f800283a 	ret

101051bc <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
101051bc:	defffe04 	addi	sp,sp,-8
101051c0:	df000115 	stw	fp,4(sp)
101051c4:	df000104 	addi	fp,sp,4
101051c8:	e13fff15 	stw	r4,-4(fp)
101051cc:	e0bfff17 	ldw	r2,-4(fp)
101051d0:	10bffe84 	addi	r2,r2,-6
101051d4:	10c00428 	cmpgeui	r3,r2,16
101051d8:	1800191e 	bne	r3,zero,10105240 <alt_exception_cause_generated_bad_addr+0x84>
101051dc:	100690ba 	slli	r3,r2,2
101051e0:	00840434 	movhi	r2,4112
101051e4:	1885883a 	add	r2,r3,r2
101051e8:	10947c17 	ldw	r2,20976(r2)
101051ec:	1000683a 	jmp	r2
101051f0:	10105230 	cmpltui	zero,r2,16712
101051f4:	10105230 	cmpltui	zero,r2,16712
101051f8:	10105240 	call	11010524 <__alt_data_end+0xef0524>
101051fc:	10105240 	call	11010524 <__alt_data_end+0xef0524>
10105200:	10105240 	call	11010524 <__alt_data_end+0xef0524>
10105204:	10105230 	cmpltui	zero,r2,16712
10105208:	10105238 	rdprs	zero,r2,16712
1010520c:	10105240 	call	11010524 <__alt_data_end+0xef0524>
10105210:	10105230 	cmpltui	zero,r2,16712
10105214:	10105230 	cmpltui	zero,r2,16712
10105218:	10105240 	call	11010524 <__alt_data_end+0xef0524>
1010521c:	10105230 	cmpltui	zero,r2,16712
10105220:	10105238 	rdprs	zero,r2,16712
10105224:	10105240 	call	11010524 <__alt_data_end+0xef0524>
10105228:	10105240 	call	11010524 <__alt_data_end+0xef0524>
1010522c:	10105230 	cmpltui	zero,r2,16712
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
10105230:	00800044 	movi	r2,1
10105234:	00000306 	br	10105244 <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
10105238:	0005883a 	mov	r2,zero
1010523c:	00000106 	br	10105244 <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
10105240:	0005883a 	mov	r2,zero
  }
}
10105244:	e037883a 	mov	sp,fp
10105248:	df000017 	ldw	fp,0(sp)
1010524c:	dec00104 	addi	sp,sp,4
10105250:	f800283a 	ret

10105254 <atexit>:
10105254:	200b883a 	mov	r5,r4
10105258:	000f883a 	mov	r7,zero
1010525c:	000d883a 	mov	r6,zero
10105260:	0009883a 	mov	r4,zero
10105264:	01053141 	jmpi	10105314 <__register_exitproc>

10105268 <exit>:
10105268:	defffe04 	addi	sp,sp,-8
1010526c:	000b883a 	mov	r5,zero
10105270:	dc000015 	stw	r16,0(sp)
10105274:	dfc00115 	stw	ra,4(sp)
10105278:	2021883a 	mov	r16,r4
1010527c:	01053a40 	call	101053a4 <__call_exitprocs>
10105280:	00840434 	movhi	r2,4112
10105284:	111bdf17 	ldw	r4,28540(r2)
10105288:	20800f17 	ldw	r2,60(r4)
1010528c:	10000126 	beq	r2,zero,10105294 <exit+0x2c>
10105290:	103ee83a 	callr	r2
10105294:	8009883a 	mov	r4,r16
10105298:	01054c40 	call	101054c4 <_exit>

1010529c <memcmp>:
1010529c:	30800130 	cmpltui	r2,r6,4
101052a0:	10000b1e 	bne	r2,zero,101052d0 <memcmp+0x34>
101052a4:	2144b03a 	or	r2,r4,r5
101052a8:	108000cc 	andi	r2,r2,3
101052ac:	1000171e 	bne	r2,zero,1010530c <memcmp+0x70>
101052b0:	20c00017 	ldw	r3,0(r4)
101052b4:	28800017 	ldw	r2,0(r5)
101052b8:	1880141e 	bne	r3,r2,1010530c <memcmp+0x70>
101052bc:	31bfff04 	addi	r6,r6,-4
101052c0:	30800128 	cmpgeui	r2,r6,4
101052c4:	21000104 	addi	r4,r4,4
101052c8:	29400104 	addi	r5,r5,4
101052cc:	103ff81e 	bne	r2,zero,101052b0 <memcmp+0x14>
101052d0:	30bfffc4 	addi	r2,r6,-1
101052d4:	30000b26 	beq	r6,zero,10105304 <memcmp+0x68>
101052d8:	11800044 	addi	r6,r2,1
101052dc:	298d883a 	add	r6,r5,r6
101052e0:	00000106 	br	101052e8 <memcmp+0x4c>
101052e4:	29800726 	beq	r5,r6,10105304 <memcmp+0x68>
101052e8:	20800003 	ldbu	r2,0(r4)
101052ec:	28c00003 	ldbu	r3,0(r5)
101052f0:	21000044 	addi	r4,r4,1
101052f4:	29400044 	addi	r5,r5,1
101052f8:	10fffa26 	beq	r2,r3,101052e4 <memcmp+0x48>
101052fc:	10c5c83a 	sub	r2,r2,r3
10105300:	f800283a 	ret
10105304:	0005883a 	mov	r2,zero
10105308:	f800283a 	ret
1010530c:	30bfffc4 	addi	r2,r6,-1
10105310:	003ff106 	br	101052d8 <memcmp+0x3c>

10105314 <__register_exitproc>:
10105314:	00840434 	movhi	r2,4112
10105318:	10dbdf17 	ldw	r3,28540(r2)
1010531c:	18805217 	ldw	r2,328(r3)
10105320:	10001726 	beq	r2,zero,10105380 <__register_exitproc+0x6c>
10105324:	10c00117 	ldw	r3,4(r2)
10105328:	1a000808 	cmpgei	r8,r3,32
1010532c:	40001b1e 	bne	r8,zero,1010539c <__register_exitproc+0x88>
10105330:	20000b26 	beq	r4,zero,10105360 <__register_exitproc+0x4c>
10105334:	181090ba 	slli	r8,r3,2
10105338:	02400044 	movi	r9,1
1010533c:	48d2983a 	sll	r9,r9,r3
10105340:	1211883a 	add	r8,r2,r8
10105344:	41802215 	stw	r6,136(r8)
10105348:	11806217 	ldw	r6,392(r2)
1010534c:	21000098 	cmpnei	r4,r4,2
10105350:	324cb03a 	or	r6,r6,r9
10105354:	11806215 	stw	r6,392(r2)
10105358:	41c04215 	stw	r7,264(r8)
1010535c:	20000b26 	beq	r4,zero,1010538c <__register_exitproc+0x78>
10105360:	19000084 	addi	r4,r3,2
10105364:	200890ba 	slli	r4,r4,2
10105368:	18c00044 	addi	r3,r3,1
1010536c:	10c00115 	stw	r3,4(r2)
10105370:	1105883a 	add	r2,r2,r4
10105374:	11400015 	stw	r5,0(r2)
10105378:	0005883a 	mov	r2,zero
1010537c:	f800283a 	ret
10105380:	18805304 	addi	r2,r3,332
10105384:	18805215 	stw	r2,328(r3)
10105388:	003fe606 	br	10105324 <__register_exitproc+0x10>
1010538c:	11006317 	ldw	r4,396(r2)
10105390:	2252b03a 	or	r9,r4,r9
10105394:	12406315 	stw	r9,396(r2)
10105398:	003ff106 	br	10105360 <__register_exitproc+0x4c>
1010539c:	00bfffc4 	movi	r2,-1
101053a0:	f800283a 	ret

101053a4 <__call_exitprocs>:
101053a4:	defff704 	addi	sp,sp,-36
101053a8:	00840434 	movhi	r2,4112
101053ac:	dcc00315 	stw	r19,12(sp)
101053b0:	14dbdf17 	ldw	r19,28540(r2)
101053b4:	dc800215 	stw	r18,8(sp)
101053b8:	dfc00815 	stw	ra,32(sp)
101053bc:	9c805217 	ldw	r18,328(r19)
101053c0:	ddc00715 	stw	r23,28(sp)
101053c4:	dd800615 	stw	r22,24(sp)
101053c8:	dd400515 	stw	r21,20(sp)
101053cc:	dd000415 	stw	r20,16(sp)
101053d0:	dc400115 	stw	r17,4(sp)
101053d4:	dc000015 	stw	r16,0(sp)
101053d8:	90001026 	beq	r18,zero,1010541c <__call_exitprocs+0x78>
101053dc:	202b883a 	mov	r21,r4
101053e0:	282d883a 	mov	r22,r5
101053e4:	05000044 	movi	r20,1
101053e8:	94000117 	ldw	r16,4(r18)
101053ec:	847fffc4 	addi	r17,r16,-1
101053f0:	88000a16 	blt	r17,zero,1010541c <__call_exitprocs+0x78>
101053f4:	84000044 	addi	r16,r16,1
101053f8:	802090ba 	slli	r16,r16,2
101053fc:	9421883a 	add	r16,r18,r16
10105400:	b0001126 	beq	r22,zero,10105448 <__call_exitprocs+0xa4>
10105404:	80804017 	ldw	r2,256(r16)
10105408:	15800f26 	beq	r2,r22,10105448 <__call_exitprocs+0xa4>
1010540c:	8c7fffc4 	addi	r17,r17,-1
10105410:	88bfffd8 	cmpnei	r2,r17,-1
10105414:	843fff04 	addi	r16,r16,-4
10105418:	103ff91e 	bne	r2,zero,10105400 <__call_exitprocs+0x5c>
1010541c:	dfc00817 	ldw	ra,32(sp)
10105420:	ddc00717 	ldw	r23,28(sp)
10105424:	dd800617 	ldw	r22,24(sp)
10105428:	dd400517 	ldw	r21,20(sp)
1010542c:	dd000417 	ldw	r20,16(sp)
10105430:	dcc00317 	ldw	r19,12(sp)
10105434:	dc800217 	ldw	r18,8(sp)
10105438:	dc400117 	ldw	r17,4(sp)
1010543c:	dc000017 	ldw	r16,0(sp)
10105440:	dec00904 	addi	sp,sp,36
10105444:	f800283a 	ret
10105448:	90800117 	ldw	r2,4(r18)
1010544c:	81800017 	ldw	r6,0(r16)
10105450:	10bfffc4 	addi	r2,r2,-1
10105454:	14401726 	beq	r2,r17,101054b4 <__call_exitprocs+0x110>
10105458:	80000015 	stw	zero,0(r16)
1010545c:	303feb26 	beq	r6,zero,1010540c <__call_exitprocs+0x68>
10105460:	a446983a 	sll	r3,r20,r17
10105464:	90806217 	ldw	r2,392(r18)
10105468:	95c00117 	ldw	r23,4(r18)
1010546c:	1884703a 	and	r2,r3,r2
10105470:	1000081e 	bne	r2,zero,10105494 <__call_exitprocs+0xf0>
10105474:	303ee83a 	callr	r6
10105478:	90c00117 	ldw	r3,4(r18)
1010547c:	98805217 	ldw	r2,328(r19)
10105480:	1dc0011e 	bne	r3,r23,10105488 <__call_exitprocs+0xe4>
10105484:	90bfe126 	beq	r18,r2,1010540c <__call_exitprocs+0x68>
10105488:	103fe426 	beq	r2,zero,1010541c <__call_exitprocs+0x78>
1010548c:	1025883a 	mov	r18,r2
10105490:	003fd506 	br	101053e8 <__call_exitprocs+0x44>
10105494:	90806317 	ldw	r2,396(r18)
10105498:	81002017 	ldw	r4,128(r16)
1010549c:	1886703a 	and	r3,r3,r2
101054a0:	1800061e 	bne	r3,zero,101054bc <__call_exitprocs+0x118>
101054a4:	200b883a 	mov	r5,r4
101054a8:	a809883a 	mov	r4,r21
101054ac:	303ee83a 	callr	r6
101054b0:	003ff106 	br	10105478 <__call_exitprocs+0xd4>
101054b4:	94400115 	stw	r17,4(r18)
101054b8:	003fe806 	br	1010545c <__call_exitprocs+0xb8>
101054bc:	303ee83a 	callr	r6
101054c0:	003fed06 	br	10105478 <__call_exitprocs+0xd4>

101054c4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
101054c4:	defffd04 	addi	sp,sp,-12
101054c8:	df000215 	stw	fp,8(sp)
101054cc:	df000204 	addi	fp,sp,8
101054d0:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
101054d4:	0001883a 	nop
101054d8:	e0bffe17 	ldw	r2,-8(fp)
101054dc:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
101054e0:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
101054e4:	10000226 	beq	r2,zero,101054f0 <_exit+0x2c>
    ALT_SIM_FAIL();
101054e8:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
101054ec:	00000106 	br	101054f4 <_exit+0x30>
    ALT_SIM_PASS();
101054f0:	002af0b0 	cmpltui	zero,zero,43970
}
101054f4:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
101054f8:	003fff06 	br	101054f8 <_exit+0x34>
