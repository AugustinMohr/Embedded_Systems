
Labo4_LCD.elf:     file format elf32-littlenios2
Labo4_LCD.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10100244

Program Header:
    LOAD off    0x00001000 vaddr 0x10100000 paddr 0x10100000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10100020 paddr 0x10100020 align 2**12
         filesz 0x0000647c memsz 0x0000647c flags r-x
    LOAD off    0x0000749c vaddr 0x1010649c paddr 0x10107f78 align 2**12
         filesz 0x00001adc memsz 0x00001adc flags rw-
    LOAD off    0x00009a54 vaddr 0x10109a54 paddr 0x10109a54 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10100000  10100000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  10100020  10100020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00006208  10100244  10100244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000050  1010644c  1010644c  0000744c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001adc  1010649c  10107f78  0000749c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  10109a54  10109a54  00009a54  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  10109ba8  10109ba8  00008f78  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00008f78  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000a50  00000000  00000000  00008fa0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000171d6  00000000  00000000  000099f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000627c  00000000  00000000  00020bc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006c4c  00000000  00000000  00026e42  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000177c  00000000  00000000  0002da90  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000027fc  00000000  00000000  0002f20c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004a4c  00000000  00000000  00031a08  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00036454  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000680  00000000  00000000  00036488  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003926e  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00039271  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003927d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003927e  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0003927f  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0003928a  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00039295  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000a  00000000  00000000  000392a0  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000059  00000000  00000000  000392aa  2**0
                  CONTENTS, READONLY
 26 .jdi          0000596f  00000000  00000000  00039303  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     002810ab  00000000  00000000  0003ec72  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10100000 l    d  .entry	00000000 .entry
10100020 l    d  .exceptions	00000000 .exceptions
10100244 l    d  .text	00000000 .text
1010644c l    d  .rodata	00000000 .rodata
1010649c l    d  .rwdata	00000000 .rwdata
10109a54 l    d  .bss	00000000 .bss
10109ba8 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/nicca/DeskDoc/EmbeddedSystems/Embedded_Systems/lab_4_project_template/sw/nios/Labo4_LCD_bsp//obj/HAL/src/crt0.o
1010028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
10100c40 l     F .text	00000008 __fp_unlock
10100c54 l     F .text	0000019c __sinit.part.1
10100df0 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
1010649c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_close.c
1010389c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
101039a8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
101039d4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
10103ac0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
10103ba0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
10103c8c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
10103e60 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10107f20 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
101040ac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
101041e0 l     F .text	00000034 alt_dev_reg
10106e70 l     O .rwdata	00001060 jtag_uart_0
10107ed0 l     O .rwdata	00000028 altera_hostfs
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
101044c4 l     F .text	0000020c altera_avalon_jtag_uart_irq
101046d0 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_hostfs.c
10107f24 l     O .rwdata	00000009 hcinfo.2538
10107f30 l     O .rwdata	0000000a hcinfo.2551
10107f3c l     O .rwdata	00000009 hcinfo.2560
10107f48 l     O .rwdata	0000000a hcinfo.2573
10107f54 l     O .rwdata	0000000a hcinfo.2586
10107f60 l     O .rwdata	0000000a hcinfo.2612
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
10105300 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_fs_reg.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
101057f4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
10105934 l     F .text	0000003c alt_get_errno
10105970 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10109a7c g     O .bss	00000004 alt_instruction_exception_handler
10103694 g     F .text	00000054 _isatty_r
10103d9c g     F .text	0000007c alt_main
10100ad4 g     F .text	000000c0 _puts_r
10109aa8 g     O .bss	00000100 alt_irq
101033bc g     F .text	00000060 _lseek_r
10107f78 g       *ABS*	00000000 __flash_rwdata_start
10109ba8 g       *ABS*	00000000 __alt_heap_start
10102970 g     F .text	0000005c __sseek
10100f90 g     F .text	00000010 __sinit
10100df8 g     F .text	00000068 __sfmoreglue
10103e3c g     F .text	00000024 __malloc_unlock
10104d08 g     F .text	0000011c alt_hostfs_open
1010205c g     F .text	0000015c memmove
10100f78 g     F .text	00000018 _cleanup
10105d2c g     F .text	00000024 altera_nios2_gen2_irq_init
10100290 g     F .text	00000058 waitms
10100000 g     F .entry	0000001c __reset
10100020 g       *ABS*	00000000 __flash_exceptions_start
101006f4 g     F .text	00000070 LCD_Clear
10103638 g     F .text	0000005c _fstat_r
10109a60 g     O .bss	00000004 errno
101028ec g     F .text	00000008 __seofread
10100318 g     F .text	00000030 LCD_WR_REG
10109a68 g     O .bss	00000004 alt_argv
1010fef8 g       *ABS*	00000000 _gp
10106cf0 g     O .rwdata	00000180 alt_fd_list
10104f40 g     F .text	00000068 alt_hostfs_seek
10105d50 g     F .text	00000090 alt_find_dev
10101f14 g     F .text	00000148 memcpy
10100c48 g     F .text	0000000c _cleanup_r
101054a0 g     F .text	00000080 alt_fs_reg
101058b8 g     F .text	0000007c alt_io_redirect
1010644c g       *ABS*	00000000 __DTOR_END__
10100b94 g     F .text	00000014 puts
1010601c g     F .text	0000009c alt_exception_cause_generated_bad_addr
101048c8 g     F .text	0000021c altera_avalon_jtag_uart_read
10100000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
101037e0 g     F .text	00000064 .hidden __udivsi3
10103afc g     F .text	000000a4 isatty
10105f8c g     F .text	00000090 alt_icache_flush
10109a5c g     O .bss	00000004 __malloc_top_pad
10100fe0 g     F .text	000004bc __sfvwrite_r
10102844 g     F .text	00000054 _sbrk_r
10104e68 g     F .text	0000006c alt_hostfs_read
101035d8 g     F .text	00000060 _read_r
10107f18 g     O .rwdata	00000004 alt_max_fd
10102bdc g     F .text	000000f0 _fclose_r
10102f58 g     F .text	00000030 fflush
10109a58 g     O .bss	00000004 __malloc_max_sbrked_mem
10103cc8 g     F .text	000000d4 lseek
10107ef8 g     O .rwdata	00000004 _global_impure_ptr
101022e0 g     F .text	00000564 _realloc_r
10109ba8 g       *ABS*	00000000 __bss_end
10105704 g     F .text	000000f0 alt_iic_isr_register
10105c24 g     F .text	00000108 alt_tick
10100fb0 g     F .text	00000018 __fp_lock_all
101056b8 g     F .text	0000004c alt_ic_irq_enabled
10105b88 g     F .text	0000009c alt_alarm_stop
10109a70 g     O .bss	00000004 alt_irq_active
10104e24 g     F .text	00000044 alt_hostfs_close
101000fc g     F .exceptions	000000d4 alt_irq_handler
10106cc8 g     O .rwdata	00000028 alt_dev_null
101052b8 g     F .text	00000048 alt_dcache_flush_all
10107f78 g       *ABS*	00000000 __ram_rwdata_end
101002e8 g     F .text	00000030 LCD_WR_DATA
10107f10 g     O .rwdata	00000008 alt_dev_list
101040e8 g     F .text	000000f8 write
1010649c g       *ABS*	00000000 __ram_rodata_end
10103a10 g     F .text	000000b0 fstat
10103844 g     F .text	00000058 .hidden __umodsi3
10109ba8 g       *ABS*	00000000 end
10104404 g     F .text	000000c0 altera_avalon_jtag_uart_init
101001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
1010644c g       *ABS*	00000000 __CTOR_LIST__
10120000 g       *ABS*	00000000 __alt_stack_pointer
10104ae4 g     F .text	00000224 altera_avalon_jtag_uart_write
10100fa0 g     F .text	00000004 __sfp_lock_acquire
10101e30 g     F .text	000000e4 memchr
101030ac g     F .text	00000310 _free_r
10100a34 g     F .text	0000002c LCD_reset
10100764 g     F .text	00000088 LCD_SetCursor
10106298 g     F .text	00000180 __call_exitprocs
10107f00 g     O .rwdata	00000004 __malloc_sbrk_base
10100244 g     F .text	0000004c _start
10109a74 g     O .bss	00000004 _alt_tick_rate
10109a78 g     O .bss	00000004 _alt_nticks
10103e9c g     F .text	000000fc read
1010424c g     F .text	00000054 alt_sys_init
10106180 g     F .text	00000118 __register_exitproc
10104770 g     F .text	00000068 altera_avalon_jtag_uart_close
1010649c g       *ABS*	00000000 __ram_rwdata_start
1010644c g       *ABS*	00000000 __ram_rodata_start
10109a80 g     O .bss	00000028 __malloc_current_mallinfo
101042a0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10105ee8 g     F .text	000000a4 alt_get_fd
10102b88 g     F .text	00000054 _close_r
10106104 g     F .text	0000007c memcmp
10104360 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10109ba8 g       *ABS*	00000000 __alt_stack_base
101043b0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10102a34 g     F .text	00000154 __swsetup_r
10100e60 g     F .text	00000118 __sfp
101068c0 g     O .rwdata	00000408 __malloc_av_
10100fac g     F .text	00000004 __sinit_lock_release
10102898 g     F .text	00000054 __sread
10105de0 g     F .text	00000108 alt_find_file
1010533c g     F .text	000000a4 alt_dev_llist_insert
10103e18 g     F .text	00000024 __malloc_lock
10103ffc g     F .text	000000b0 sbrk
10102efc g     F .text	0000005c _fflush_r
10109a54 g       *ABS*	00000000 __bss_start
10100348 g     F .text	000003ac LCD_Init
101021b8 g     F .text	00000128 memset
10100a60 g     F .text	00000074 main
10109a6c g     O .bss	00000004 alt_envp
10109a54 g     O .bss	00000004 __malloc_max_total_mem
10104300 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
101029cc g     F .text	00000008 __sclose
10120000 g       *ABS*	00000000 __alt_heap_limit
10102ccc g     F .text	00000014 fclose
10101624 g     F .text	0000080c _malloc_r
10107f1c g     O .rwdata	00000004 alt_errno
1010149c g     F .text	000000c4 _fwalk
101036e8 g     F .text	00000084 .hidden __divsi3
10102f88 g     F .text	00000124 _malloc_trim_r
1010644c g       *ABS*	00000000 __CTOR_END__
1010644c g       *ABS*	00000000 __flash_rodata_start
1010644c g       *ABS*	00000000 __DTOR_LIST__
10104214 g     F .text	00000038 alt_irq_init
10103f98 g     F .text	00000064 alt_release_fd
101060b8 g     F .text	00000014 atexit
101029d4 g     F .text	00000060 _write_r
10107efc g     O .rwdata	00000004 _impure_ptr
10109a64 g     O .bss	00000004 alt_argc
10102ce0 g     F .text	0000021c __sflush_r
10105440 g     F .text	00000060 _do_dtors
10100020 g       .exceptions	00000000 alt_irq_entry
10100fc8 g     F .text	00000018 __fp_unlock_all
10107f08 g     O .rwdata	00000008 alt_fs_list
10104ed4 g     F .text	0000006c alt_hostfs_write
10100020 g       *ABS*	00000000 __ram_exceptions_start
10105554 g     F .text	00000050 alt_ic_isr_register
10107f78 g       *ABS*	00000000 _edata
10109ba8 g       *ABS*	00000000 _end
10100244 g       *ABS*	00000000 __ram_exceptions_end
101047d8 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
1010562c g     F .text	0000008c alt_ic_irq_disable
101028f4 g     F .text	0000007c __swrite
10107f04 g     O .rwdata	00000004 __malloc_trim_threshold
101060cc g     F .text	00000038 exit
10101560 g     F .text	000000c4 _fwalk_reent
1010376c g     F .text	00000074 .hidden __modsi3
10120000 g       *ABS*	00000000 __alt_data_end
10100020 g     F .exceptions	00000000 alt_exception
10100fa4 g     F .text	00000004 __sfp_lock_release
10106418 g     F .text	00000034 _exit
1010518c g     F .text	0000012c alt_alarm_start
1010341c g     F .text	000001bc __smakebuf_r
10100ba8 g     F .text	00000098 strlen
10105a34 g     F .text	00000154 open
10105520 g     F .text	00000034 alt_icache_flush_all
10107f6c g     O .rwdata	00000004 alt_priority_mask
101055a4 g     F .text	00000088 alt_ic_irq_enable
10107f70 g     O .rwdata	00000008 alt_alarm_list
101053e0 g     F .text	00000060 _do_ctors
101038d8 g     F .text	000000d0 close
10103c08 g     F .text	00000084 alt_load
101007ec g     F .text	00000248 LCD_Swiss
10100fa8 g     F .text	00000004 __sinit_lock_acquire
10104fa8 g     F .text	000001e4 alt_hostfs_fstat



Disassembly of section .entry:

10100000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
10100000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
10100004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
10100008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
1010000c:	00bffd16 	blt	zero,r2,10100004 <__alt_data_end+0xfffe0004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10100010:	00440434 	movhi	at,4112
    ori r1, r1, %lo(_start)
10100014:	08409114 	ori	at,at,580
    jmp r1
10100018:	0800683a 	jmp	at
1010001c:	00000000 	call	10000000 <__reset-0x100000>

Disassembly of section .exceptions:

10100020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10100020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10100024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10100028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1010002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10100030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10100034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10100038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1010003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10100040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10100044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10100048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1010004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10100050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10100054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10100058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1010005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10100060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10100064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10100068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1010006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10100070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10100074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10100078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1010007c:	10000326 	beq	r2,zero,1010008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10100080:	20000226 	beq	r4,zero,1010008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10100084:	01000fc0 	call	101000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10100088:	00000706 	br	101000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1010008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10100090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10100094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10100098:	01001d00 	call	101001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1010009c:	1000021e 	bne	r2,zero,101000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
101000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
101000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
101000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
101000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
101000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
101000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
101000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
101000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
101000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
101000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
101000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
101000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
101000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
101000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
101000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
101000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
101000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
101000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
101000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
101000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
101000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
101000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
101000f8:	ef80083a 	eret

101000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
101000fc:	defff904 	addi	sp,sp,-28
10100100:	dfc00615 	stw	ra,24(sp)
10100104:	df000515 	stw	fp,20(sp)
10100108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1010010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10100110:	0005313a 	rdctl	r2,ipending
10100114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10100118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1010011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10100120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10100124:	00800044 	movi	r2,1
10100128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1010012c:	e0fffb17 	ldw	r3,-20(fp)
10100130:	e0bffc17 	ldw	r2,-16(fp)
10100134:	1884703a 	and	r2,r3,r2
10100138:	10001426 	beq	r2,zero,1010018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1010013c:	00840474 	movhi	r2,4113
10100140:	10a6aa04 	addi	r2,r2,-25944
10100144:	e0fffd17 	ldw	r3,-12(fp)
10100148:	180690fa 	slli	r3,r3,3
1010014c:	10c5883a 	add	r2,r2,r3
10100150:	10c00017 	ldw	r3,0(r2)
10100154:	00840474 	movhi	r2,4113
10100158:	10a6aa04 	addi	r2,r2,-25944
1010015c:	e13ffd17 	ldw	r4,-12(fp)
10100160:	200890fa 	slli	r4,r4,3
10100164:	1105883a 	add	r2,r2,r4
10100168:	10800104 	addi	r2,r2,4
1010016c:	10800017 	ldw	r2,0(r2)
10100170:	1009883a 	mov	r4,r2
10100174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10100178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1010017c:	0005313a 	rdctl	r2,ipending
10100180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10100184:	e0bfff17 	ldw	r2,-4(fp)
10100188:	00000706 	br	101001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1010018c:	e0bffc17 	ldw	r2,-16(fp)
10100190:	1085883a 	add	r2,r2,r2
10100194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10100198:	e0bffd17 	ldw	r2,-12(fp)
1010019c:	10800044 	addi	r2,r2,1
101001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
101001a4:	003fe106 	br	1010012c <__alt_data_end+0xfffe012c>

    active = alt_irq_pending ();
101001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
101001ac:	e0bffb17 	ldw	r2,-20(fp)
101001b0:	103fdb1e 	bne	r2,zero,10100120 <__alt_data_end+0xfffe0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
101001b4:	0001883a 	nop
}
101001b8:	0001883a 	nop
101001bc:	e037883a 	mov	sp,fp
101001c0:	dfc00117 	ldw	ra,4(sp)
101001c4:	df000017 	ldw	fp,0(sp)
101001c8:	dec00204 	addi	sp,sp,8
101001cc:	f800283a 	ret

101001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
101001d0:	defffb04 	addi	sp,sp,-20
101001d4:	dfc00415 	stw	ra,16(sp)
101001d8:	df000315 	stw	fp,12(sp)
101001dc:	df000304 	addi	fp,sp,12
101001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
101001e4:	000531fa 	rdctl	r2,exception
101001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
101001ec:	e0bffd17 	ldw	r2,-12(fp)
101001f0:	10801f0c 	andi	r2,r2,124
101001f4:	1004d0ba 	srli	r2,r2,2
101001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
101001fc:	0005333a 	rdctl	r2,badaddr
10100200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
10100204:	d0a6e117 	ldw	r2,-25724(gp)
10100208:	10000726 	beq	r2,zero,10100228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
1010020c:	d0a6e117 	ldw	r2,-25724(gp)
10100210:	e0fffd17 	ldw	r3,-12(fp)
10100214:	e1bffe17 	ldw	r6,-8(fp)
10100218:	e17fff17 	ldw	r5,-4(fp)
1010021c:	1809883a 	mov	r4,r3
10100220:	103ee83a 	callr	r2
10100224:	00000206 	br	10100230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10100228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
1010022c:	0005883a 	mov	r2,zero
}
10100230:	e037883a 	mov	sp,fp
10100234:	dfc00117 	ldw	ra,4(sp)
10100238:	df000017 	ldw	fp,0(sp)
1010023c:	dec00204 	addi	sp,sp,8
10100240:	f800283a 	ret

Disassembly of section .text:

10100244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
10100244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
10100248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
1010024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
10100250:	00bffd16 	blt	zero,r2,10100248 <__alt_data_end+0xfffe0248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10100254:	06c404b4 	movhi	sp,4114
    ori sp, sp, %lo(__alt_stack_pointer)
10100258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
1010025c:	06840434 	movhi	gp,4112
    ori gp, gp, %lo(_gp)
10100260:	d6bfbe14 	ori	gp,gp,65272
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10100264:	00840434 	movhi	r2,4112
    ori r2, r2, %lo(__bss_start)
10100268:	10a69514 	ori	r2,r2,39508

    movhi r3, %hi(__bss_end)
1010026c:	00c40434 	movhi	r3,4112
    ori r3, r3, %lo(__bss_end)
10100270:	18e6ea14 	ori	r3,r3,39848

    beq r2, r3, 1f
10100274:	10c00326 	beq	r2,r3,10100284 <_start+0x40>

0:
    stw zero, (r2)
10100278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
1010027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
10100280:	10fffd36 	bltu	r2,r3,10100278 <__alt_data_end+0xfffe0278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10100284:	0103c080 	call	10103c08 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10100288:	0103d9c0 	call	10103d9c <alt_main>

1010028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
1010028c:	003fff06 	br	1010028c <__alt_data_end+0xfffe028c>

10100290 <waitms>:
#define GREEN 0x07e0
#define BLUE 0x001f
#define BLACK  0x0000
#define WHITE 0xffff

void waitms(int t) {
10100290:	defffd04 	addi	sp,sp,-12
10100294:	df000215 	stw	fp,8(sp)
10100298:	df000204 	addi	fp,sp,8
1010029c:	e13fff15 	stw	r4,-4(fp)
    while(t--) {
101002a0:	00000806 	br	101002c4 <waitms+0x34>
        for(int i = 0; i < 3125; i++) {
101002a4:	e03ffe15 	stw	zero,-8(fp)
101002a8:	00000306 	br	101002b8 <waitms+0x28>
101002ac:	e0bffe17 	ldw	r2,-8(fp)
101002b0:	10800044 	addi	r2,r2,1
101002b4:	e0bffe15 	stw	r2,-8(fp)
101002b8:	e0bffe17 	ldw	r2,-8(fp)
101002bc:	10830d50 	cmplti	r2,r2,3125
101002c0:	103ffa1e 	bne	r2,zero,101002ac <__alt_data_end+0xfffe02ac>
#define BLUE 0x001f
#define BLACK  0x0000
#define WHITE 0xffff

void waitms(int t) {
    while(t--) {
101002c4:	e0bfff17 	ldw	r2,-4(fp)
101002c8:	10ffffc4 	addi	r3,r2,-1
101002cc:	e0ffff15 	stw	r3,-4(fp)
101002d0:	103ff41e 	bne	r2,zero,101002a4 <__alt_data_end+0xfffe02a4>
        for(int i = 0; i < 3125; i++) {
            ;
        }
    }
}
101002d4:	0001883a 	nop
101002d8:	e037883a 	mov	sp,fp
101002dc:	df000017 	ldw	fp,0(sp)
101002e0:	dec00104 	addi	sp,sp,4
101002e4:	f800283a 	ret

101002e8 <LCD_WR_DATA>:

void LCD_WR_DATA(uint data) {
101002e8:	defffe04 	addi	sp,sp,-8
101002ec:	df000115 	stw	fp,4(sp)
101002f0:	df000104 	addi	fp,sp,4
101002f4:	e13fff15 	stw	r4,-4(fp)
    IOWR_32DIRECT(LCD_CONTROLLER_0_BASE, LCD_DATA_OFFSET, data);
101002f8:	e0ffff17 	ldw	r3,-4(fp)
101002fc:	00800304 	movi	r2,12
10100300:	10c00035 	stwio	r3,0(r2)
}
10100304:	0001883a 	nop
10100308:	e037883a 	mov	sp,fp
1010030c:	df000017 	ldw	fp,0(sp)
10100310:	dec00104 	addi	sp,sp,4
10100314:	f800283a 	ret

10100318 <LCD_WR_REG>:

void LCD_WR_REG(uint data) {
10100318:	defffe04 	addi	sp,sp,-8
1010031c:	df000115 	stw	fp,4(sp)
10100320:	df000104 	addi	fp,sp,4
10100324:	e13fff15 	stw	r4,-4(fp)
    IOWR_32DIRECT(LCD_CONTROLLER_0_BASE, LCD_COMMAND_OFFSET, data);
10100328:	e0ffff17 	ldw	r3,-4(fp)
1010032c:	00800204 	movi	r2,8
10100330:	10c00035 	stwio	r3,0(r2)
}
10100334:	0001883a 	nop
10100338:	e037883a 	mov	sp,fp
1010033c:	df000017 	ldw	fp,0(sp)
10100340:	dec00104 	addi	sp,sp,4
10100344:	f800283a 	ret

10100348 <LCD_Init>:

void LCD_Init(void) {
10100348:	defffe04 	addi	sp,sp,-8
1010034c:	dfc00115 	stw	ra,4(sp)
10100350:	df000015 	stw	fp,0(sp)
10100354:	d839883a 	mov	fp,sp

    // software reset
    LCD_reset();
10100358:	0100a340 	call	10100a34 <LCD_reset>
    waitms(120);
1010035c:	01001e04 	movi	r4,120
10100360:	01002900 	call	10100290 <waitms>

    LCD_WR_REG(0x0011); //Exit Sleep
10100364:	01000444 	movi	r4,17
10100368:	01003180 	call	10100318 <LCD_WR_REG>
        LCD_WR_REG(0x00CF);
1010036c:	010033c4 	movi	r4,207
10100370:	01003180 	call	10100318 <LCD_WR_REG>
            LCD_WR_DATA(0x0000);
10100374:	0009883a 	mov	r4,zero
10100378:	01002e80 	call	101002e8 <LCD_WR_DATA>
            LCD_WR_DATA(0x0081);
1010037c:	01002044 	movi	r4,129
10100380:	01002e80 	call	101002e8 <LCD_WR_DATA>
            LCD_WR_DATA(0X00c0);
10100384:	01003004 	movi	r4,192
10100388:	01002e80 	call	101002e8 <LCD_WR_DATA>

        LCD_WR_REG(0x00ED);
1010038c:	01003b44 	movi	r4,237
10100390:	01003180 	call	10100318 <LCD_WR_REG>
            LCD_WR_DATA(0x0064);
10100394:	01001904 	movi	r4,100
10100398:	01002e80 	call	101002e8 <LCD_WR_DATA>
            LCD_WR_DATA(0x0003);
1010039c:	010000c4 	movi	r4,3
101003a0:	01002e80 	call	101002e8 <LCD_WR_DATA>
            LCD_WR_DATA(0X0012);
101003a4:	01000484 	movi	r4,18
101003a8:	01002e80 	call	101002e8 <LCD_WR_DATA>
            LCD_WR_DATA(0X0081);
101003ac:	01002044 	movi	r4,129
101003b0:	01002e80 	call	101002e8 <LCD_WR_DATA>

        LCD_WR_REG(0x00E8);
101003b4:	01003a04 	movi	r4,232
101003b8:	01003180 	call	10100318 <LCD_WR_REG>
            LCD_WR_DATA(0x0085);
101003bc:	01002144 	movi	r4,133
101003c0:	01002e80 	call	101002e8 <LCD_WR_DATA>
            LCD_WR_DATA(0x0001);
101003c4:	01000044 	movi	r4,1
101003c8:	01002e80 	call	101002e8 <LCD_WR_DATA>
            LCD_WR_DATA(0x00798);
101003cc:	0101e604 	movi	r4,1944
101003d0:	01002e80 	call	101002e8 <LCD_WR_DATA>

        LCD_WR_REG(0x00CB);
101003d4:	010032c4 	movi	r4,203
101003d8:	01003180 	call	10100318 <LCD_WR_REG>
            LCD_WR_DATA(0x0039);
101003dc:	01000e44 	movi	r4,57
101003e0:	01002e80 	call	101002e8 <LCD_WR_DATA>
            LCD_WR_DATA(0x002C);
101003e4:	01000b04 	movi	r4,44
101003e8:	01002e80 	call	101002e8 <LCD_WR_DATA>
            LCD_WR_DATA(0x0000);
101003ec:	0009883a 	mov	r4,zero
101003f0:	01002e80 	call	101002e8 <LCD_WR_DATA>
            LCD_WR_DATA(0x0034);
101003f4:	01000d04 	movi	r4,52
101003f8:	01002e80 	call	101002e8 <LCD_WR_DATA>
            LCD_WR_DATA(0x0002);
101003fc:	01000084 	movi	r4,2
10100400:	01002e80 	call	101002e8 <LCD_WR_DATA>

        LCD_WR_REG(0x00F7);
10100404:	01003dc4 	movi	r4,247
10100408:	01003180 	call	10100318 <LCD_WR_REG>
            LCD_WR_DATA(0x0020);
1010040c:	01000804 	movi	r4,32
10100410:	01002e80 	call	101002e8 <LCD_WR_DATA>

        LCD_WR_REG(0x00EA);
10100414:	01003a84 	movi	r4,234
10100418:	01003180 	call	10100318 <LCD_WR_REG>
            LCD_WR_DATA(0x0000);
1010041c:	0009883a 	mov	r4,zero
10100420:	01002e80 	call	101002e8 <LCD_WR_DATA>
            LCD_WR_DATA(0x0000);
10100424:	0009883a 	mov	r4,zero
10100428:	01002e80 	call	101002e8 <LCD_WR_DATA>

        LCD_WR_REG(0x00B1);
1010042c:	01002c44 	movi	r4,177
10100430:	01003180 	call	10100318 <LCD_WR_REG>
            LCD_WR_DATA(0x0000);
10100434:	0009883a 	mov	r4,zero
10100438:	01002e80 	call	101002e8 <LCD_WR_DATA>
            LCD_WR_DATA(0x001b);
1010043c:	010006c4 	movi	r4,27
10100440:	01002e80 	call	101002e8 <LCD_WR_DATA>

        LCD_WR_REG(0x00B6);
10100444:	01002d84 	movi	r4,182
10100448:	01003180 	call	10100318 <LCD_WR_REG>
            LCD_WR_DATA(0x000A);
1010044c:	01000284 	movi	r4,10
10100450:	01002e80 	call	101002e8 <LCD_WR_DATA>
            LCD_WR_DATA(0x00A2);
10100454:	01002884 	movi	r4,162
10100458:	01002e80 	call	101002e8 <LCD_WR_DATA>

        LCD_WR_REG(0x00C0);    //Power control
1010045c:	01003004 	movi	r4,192
10100460:	01003180 	call	10100318 <LCD_WR_REG>
            LCD_WR_DATA(0x0005);   //VRH[5:0]
10100464:	01000144 	movi	r4,5
10100468:	01002e80 	call	101002e8 <LCD_WR_DATA>

        LCD_WR_REG(0x00C1);    //Power control
1010046c:	01003044 	movi	r4,193
10100470:	01003180 	call	10100318 <LCD_WR_REG>
            LCD_WR_DATA(0x0011);   //SAP[2:0];BT[3:0]
10100474:	01000444 	movi	r4,17
10100478:	01002e80 	call	101002e8 <LCD_WR_DATA>

        LCD_WR_REG(0x00C5);    //VCM control
1010047c:	01003144 	movi	r4,197
10100480:	01003180 	call	10100318 <LCD_WR_REG>
            LCD_WR_DATA(0x0045);       //3F
10100484:	01001144 	movi	r4,69
10100488:	01002e80 	call	101002e8 <LCD_WR_DATA>
            LCD_WR_DATA(0x0045);       //3C
1010048c:	01001144 	movi	r4,69
10100490:	01002e80 	call	101002e8 <LCD_WR_DATA>

         LCD_WR_REG(0x00C7);    //VCM control2
10100494:	010031c4 	movi	r4,199
10100498:	01003180 	call	10100318 <LCD_WR_REG>
             LCD_WR_DATA(0X00a2);
1010049c:	01002884 	movi	r4,162
101004a0:	01002e80 	call	101002e8 <LCD_WR_DATA>

        LCD_WR_REG(0x0036);    // Memory Access Control
101004a4:	01000d84 	movi	r4,54
101004a8:	01003180 	call	10100318 <LCD_WR_REG>
            LCD_WR_DATA(0x0008);//48
101004ac:	01000204 	movi	r4,8
101004b0:	01002e80 	call	101002e8 <LCD_WR_DATA>

        LCD_WR_REG(0x00F2);    // 3Gamma Function Disable
101004b4:	01003c84 	movi	r4,242
101004b8:	01003180 	call	10100318 <LCD_WR_REG>
            LCD_WR_DATA(0x0000);
101004bc:	0009883a 	mov	r4,zero
101004c0:	01002e80 	call	101002e8 <LCD_WR_DATA>

        LCD_WR_REG(0x0026);    //Gamma curve selected
101004c4:	01000984 	movi	r4,38
101004c8:	01003180 	call	10100318 <LCD_WR_REG>
            LCD_WR_DATA(0x0001);
101004cc:	01000044 	movi	r4,1
101004d0:	01002e80 	call	101002e8 <LCD_WR_DATA>

        LCD_WR_REG(0x00E0);    //Set Gamma
101004d4:	01003804 	movi	r4,224
101004d8:	01003180 	call	10100318 <LCD_WR_REG>
            LCD_WR_DATA(0x000F);
101004dc:	010003c4 	movi	r4,15
101004e0:	01002e80 	call	101002e8 <LCD_WR_DATA>
            LCD_WR_DATA(0x0026);
101004e4:	01000984 	movi	r4,38
101004e8:	01002e80 	call	101002e8 <LCD_WR_DATA>
            LCD_WR_DATA(0x0024);
101004ec:	01000904 	movi	r4,36
101004f0:	01002e80 	call	101002e8 <LCD_WR_DATA>
            LCD_WR_DATA(0x000b);
101004f4:	010002c4 	movi	r4,11
101004f8:	01002e80 	call	101002e8 <LCD_WR_DATA>
            LCD_WR_DATA(0x000E);
101004fc:	01000384 	movi	r4,14
10100500:	01002e80 	call	101002e8 <LCD_WR_DATA>
            LCD_WR_DATA(0x0008);
10100504:	01000204 	movi	r4,8
10100508:	01002e80 	call	101002e8 <LCD_WR_DATA>
            LCD_WR_DATA(0x004b);
1010050c:	010012c4 	movi	r4,75
10100510:	01002e80 	call	101002e8 <LCD_WR_DATA>
            LCD_WR_DATA(0X00a8);
10100514:	01002a04 	movi	r4,168
10100518:	01002e80 	call	101002e8 <LCD_WR_DATA>
            LCD_WR_DATA(0x003b);
1010051c:	01000ec4 	movi	r4,59
10100520:	01002e80 	call	101002e8 <LCD_WR_DATA>
            LCD_WR_DATA(0x000a);
10100524:	01000284 	movi	r4,10
10100528:	01002e80 	call	101002e8 <LCD_WR_DATA>
            LCD_WR_DATA(0x0014);
1010052c:	01000504 	movi	r4,20
10100530:	01002e80 	call	101002e8 <LCD_WR_DATA>
            LCD_WR_DATA(0x0006);
10100534:	01000184 	movi	r4,6
10100538:	01002e80 	call	101002e8 <LCD_WR_DATA>
            LCD_WR_DATA(0x0010);
1010053c:	01000404 	movi	r4,16
10100540:	01002e80 	call	101002e8 <LCD_WR_DATA>
            LCD_WR_DATA(0x0009);
10100544:	01000244 	movi	r4,9
10100548:	01002e80 	call	101002e8 <LCD_WR_DATA>
            LCD_WR_DATA(0x0000);
1010054c:	0009883a 	mov	r4,zero
10100550:	01002e80 	call	101002e8 <LCD_WR_DATA>

        LCD_WR_REG(0X00E1);    //Set Gamma
10100554:	01003844 	movi	r4,225
10100558:	01003180 	call	10100318 <LCD_WR_REG>
            LCD_WR_DATA(0x0000);
1010055c:	0009883a 	mov	r4,zero
10100560:	01002e80 	call	101002e8 <LCD_WR_DATA>
            LCD_WR_DATA(0x001c);
10100564:	01000704 	movi	r4,28
10100568:	01002e80 	call	101002e8 <LCD_WR_DATA>
            LCD_WR_DATA(0x0020);
1010056c:	01000804 	movi	r4,32
10100570:	01002e80 	call	101002e8 <LCD_WR_DATA>
            LCD_WR_DATA(0x0004);
10100574:	01000104 	movi	r4,4
10100578:	01002e80 	call	101002e8 <LCD_WR_DATA>
            LCD_WR_DATA(0x0010);
1010057c:	01000404 	movi	r4,16
10100580:	01002e80 	call	101002e8 <LCD_WR_DATA>
            LCD_WR_DATA(0x0008);
10100584:	01000204 	movi	r4,8
10100588:	01002e80 	call	101002e8 <LCD_WR_DATA>
            LCD_WR_DATA(0x0034);
1010058c:	01000d04 	movi	r4,52
10100590:	01002e80 	call	101002e8 <LCD_WR_DATA>
            LCD_WR_DATA(0x0047);
10100594:	010011c4 	movi	r4,71
10100598:	01002e80 	call	101002e8 <LCD_WR_DATA>
            LCD_WR_DATA(0x0044);
1010059c:	01001104 	movi	r4,68
101005a0:	01002e80 	call	101002e8 <LCD_WR_DATA>
            LCD_WR_DATA(0x0005);
101005a4:	01000144 	movi	r4,5
101005a8:	01002e80 	call	101002e8 <LCD_WR_DATA>
            LCD_WR_DATA(0x000b);
101005ac:	010002c4 	movi	r4,11
101005b0:	01002e80 	call	101002e8 <LCD_WR_DATA>
            LCD_WR_DATA(0x0009);
101005b4:	01000244 	movi	r4,9
101005b8:	01002e80 	call	101002e8 <LCD_WR_DATA>
            LCD_WR_DATA(0x002f);
101005bc:	01000bc4 	movi	r4,47
101005c0:	01002e80 	call	101002e8 <LCD_WR_DATA>
            LCD_WR_DATA(0x0036);
101005c4:	01000d84 	movi	r4,54
101005c8:	01002e80 	call	101002e8 <LCD_WR_DATA>
            LCD_WR_DATA(0x000f);
101005cc:	010003c4 	movi	r4,15
101005d0:	01002e80 	call	101002e8 <LCD_WR_DATA>

        LCD_WR_REG(0x002A);
101005d4:	01000a84 	movi	r4,42
101005d8:	01003180 	call	10100318 <LCD_WR_REG>
            LCD_WR_DATA(0x0000);
101005dc:	0009883a 	mov	r4,zero
101005e0:	01002e80 	call	101002e8 <LCD_WR_DATA>
            LCD_WR_DATA(0x0000);
101005e4:	0009883a 	mov	r4,zero
101005e8:	01002e80 	call	101002e8 <LCD_WR_DATA>
            LCD_WR_DATA(0x0000);
101005ec:	0009883a 	mov	r4,zero
101005f0:	01002e80 	call	101002e8 <LCD_WR_DATA>
            LCD_WR_DATA(0x00ef);
101005f4:	01003bc4 	movi	r4,239
101005f8:	01002e80 	call	101002e8 <LCD_WR_DATA>

         LCD_WR_REG(0x002B);
101005fc:	01000ac4 	movi	r4,43
10100600:	01003180 	call	10100318 <LCD_WR_REG>
            LCD_WR_DATA(0x0000);
10100604:	0009883a 	mov	r4,zero
10100608:	01002e80 	call	101002e8 <LCD_WR_DATA>
            LCD_WR_DATA(0x0000);
1010060c:	0009883a 	mov	r4,zero
10100610:	01002e80 	call	101002e8 <LCD_WR_DATA>
            LCD_WR_DATA(0x0001);
10100614:	01000044 	movi	r4,1
10100618:	01002e80 	call	101002e8 <LCD_WR_DATA>
            LCD_WR_DATA(0x003f);
1010061c:	01000fc4 	movi	r4,63
10100620:	01002e80 	call	101002e8 <LCD_WR_DATA>

        LCD_WR_REG(0x003A);
10100624:	01000e84 	movi	r4,58
10100628:	01003180 	call	10100318 <LCD_WR_REG>
            LCD_WR_DATA(0x0055);
1010062c:	01001544 	movi	r4,85
10100630:	01002e80 	call	101002e8 <LCD_WR_DATA>

        LCD_WR_REG(0x00f6);
10100634:	01003d84 	movi	r4,246
10100638:	01003180 	call	10100318 <LCD_WR_REG>
            LCD_WR_DATA(0x0001);
1010063c:	01000044 	movi	r4,1
10100640:	01002e80 	call	101002e8 <LCD_WR_DATA>
            LCD_WR_DATA(0x0030);
10100644:	01000c04 	movi	r4,48
10100648:	01002e80 	call	101002e8 <LCD_WR_DATA>
            LCD_WR_DATA(0x0000);
1010064c:	0009883a 	mov	r4,zero
10100650:	01002e80 	call	101002e8 <LCD_WR_DATA>

        LCD_WR_REG(0x0029); //display on
10100654:	01000a44 	movi	r4,41
10100658:	01003180 	call	10100318 <LCD_WR_REG>

    waitms(1);
1010065c:	01000044 	movi	r4,1
10100660:	01002900 	call	10100290 <waitms>
    LCD_WR_REG(0x0036); // Memory access control (MADCTL B5 = 1)
10100664:	01000d84 	movi	r4,54
10100668:	01003180 	call	10100318 <LCD_WR_REG>
    LCD_WR_DATA(0x0028); // MY MX MV ML_BGR MH 0 0 -> 0b0010 0000
1010066c:	01000a04 	movi	r4,40
10100670:	01002e80 	call	101002e8 <LCD_WR_DATA>

    waitms(1);
10100674:	01000044 	movi	r4,1
10100678:	01002900 	call	10100290 <waitms>
    LCD_WR_REG(0x002A); // Column Address Set
1010067c:	01000a84 	movi	r4,42
10100680:	01003180 	call	10100318 <LCD_WR_REG>
    LCD_WR_DATA(0x0000); // SC0-7
10100684:	0009883a 	mov	r4,zero
10100688:	01002e80 	call	101002e8 <LCD_WR_DATA>
    LCD_WR_DATA(0x0000); // SC8-15 -> 0x0000
1010068c:	0009883a 	mov	r4,zero
10100690:	01002e80 	call	101002e8 <LCD_WR_DATA>
    LCD_WR_DATA(0x0001); // EC0-7
10100694:	01000044 	movi	r4,1
10100698:	01002e80 	call	101002e8 <LCD_WR_DATA>
    LCD_WR_DATA(0x003F); // EC8-15 -> 0x013F
1010069c:	01000fc4 	movi	r4,63
101006a0:	01002e80 	call	101002e8 <LCD_WR_DATA>

    waitms(1);
101006a4:	01000044 	movi	r4,1
101006a8:	01002900 	call	10100290 <waitms>
    LCD_WR_REG(0x002B); // Page Address Set
101006ac:	01000ac4 	movi	r4,43
101006b0:	01003180 	call	10100318 <LCD_WR_REG>
    LCD_WR_DATA(0x0000); // SP0-7
101006b4:	0009883a 	mov	r4,zero
101006b8:	01002e80 	call	101002e8 <LCD_WR_DATA>
    LCD_WR_DATA(0x0000); // SP8-15 -> 0x0000
101006bc:	0009883a 	mov	r4,zero
101006c0:	01002e80 	call	101002e8 <LCD_WR_DATA>
    LCD_WR_DATA(0x0000); // EP0-7
101006c4:	0009883a 	mov	r4,zero
101006c8:	01002e80 	call	101002e8 <LCD_WR_DATA>
    LCD_WR_DATA(0x00EF); // EP8-15 -> 0x00EF
101006cc:	01003bc4 	movi	r4,239
101006d0:	01002e80 	call	101002e8 <LCD_WR_DATA>
    LCD_WR_REG(0x0029);
101006d4:	01000a44 	movi	r4,41
101006d8:	01003180 	call	10100318 <LCD_WR_REG>
}
101006dc:	0001883a 	nop
101006e0:	e037883a 	mov	sp,fp
101006e4:	dfc00117 	ldw	ra,4(sp)
101006e8:	df000017 	ldw	fp,0(sp)
101006ec:	dec00204 	addi	sp,sp,8
101006f0:	f800283a 	ret

101006f4 <LCD_Clear>:

void LCD_Clear(uint Color)
{
101006f4:	defffc04 	addi	sp,sp,-16
101006f8:	dfc00315 	stw	ra,12(sp)
101006fc:	df000215 	stw	fp,8(sp)
10100700:	df000204 	addi	fp,sp,8
10100704:	e13fff15 	stw	r4,-4(fp)
        uint index=0;
10100708:	e03ffe15 	stw	zero,-8(fp)
        LCD_SetCursor(0x00,0x0000);
1010070c:	000b883a 	mov	r5,zero
10100710:	0009883a 	mov	r4,zero
10100714:	01007640 	call	10100764 <LCD_SetCursor>
        LCD_WR_REG(0x002C);
10100718:	01000b04 	movi	r4,44
1010071c:	01003180 	call	10100318 <LCD_WR_REG>
        for(index=0;index<76800;index++)
10100720:	e03ffe15 	stw	zero,-8(fp)
10100724:	00000506 	br	1010073c <LCD_Clear+0x48>
        {
            LCD_WR_DATA(Color);
10100728:	e13fff17 	ldw	r4,-4(fp)
1010072c:	01002e80 	call	101002e8 <LCD_WR_DATA>
void LCD_Clear(uint Color)
{
        uint index=0;
        LCD_SetCursor(0x00,0x0000);
        LCD_WR_REG(0x002C);
        for(index=0;index<76800;index++)
10100730:	e0bffe17 	ldw	r2,-8(fp)
10100734:	10800044 	addi	r2,r2,1
10100738:	e0bffe15 	stw	r2,-8(fp)
1010073c:	e0fffe17 	ldw	r3,-8(fp)
10100740:	00800074 	movhi	r2,1
10100744:	108affc4 	addi	r2,r2,11263
10100748:	10fff72e 	bgeu	r2,r3,10100728 <__alt_data_end+0xfffe0728>
        {
            LCD_WR_DATA(Color);
        }
}
1010074c:	0001883a 	nop
10100750:	e037883a 	mov	sp,fp
10100754:	dfc00117 	ldw	ra,4(sp)
10100758:	df000017 	ldw	fp,0(sp)
1010075c:	dec00204 	addi	sp,sp,8
10100760:	f800283a 	ret

10100764 <LCD_SetCursor>:

void LCD_SetCursor(uint Xpos, uint Ypos)
{
10100764:	defffc04 	addi	sp,sp,-16
10100768:	dfc00315 	stw	ra,12(sp)
1010076c:	df000215 	stw	fp,8(sp)
10100770:	df000204 	addi	fp,sp,8
10100774:	e13ffe15 	stw	r4,-8(fp)
10100778:	e17fff15 	stw	r5,-4(fp)
     LCD_WR_REG(0x002A);
1010077c:	01000a84 	movi	r4,42
10100780:	01003180 	call	10100318 <LCD_WR_REG>
         LCD_WR_DATA(Xpos>>8);
10100784:	e0bffe17 	ldw	r2,-8(fp)
10100788:	1004d23a 	srli	r2,r2,8
1010078c:	1009883a 	mov	r4,r2
10100790:	01002e80 	call	101002e8 <LCD_WR_DATA>
         LCD_WR_DATA(Xpos&0XFF);
10100794:	e0bffe17 	ldw	r2,-8(fp)
10100798:	10803fcc 	andi	r2,r2,255
1010079c:	1009883a 	mov	r4,r2
101007a0:	01002e80 	call	101002e8 <LCD_WR_DATA>
     LCD_WR_REG(0x002B);
101007a4:	01000ac4 	movi	r4,43
101007a8:	01003180 	call	10100318 <LCD_WR_REG>
         LCD_WR_DATA(Ypos>>8);
101007ac:	e0bfff17 	ldw	r2,-4(fp)
101007b0:	1004d23a 	srli	r2,r2,8
101007b4:	1009883a 	mov	r4,r2
101007b8:	01002e80 	call	101002e8 <LCD_WR_DATA>
         LCD_WR_DATA(Ypos&0XFF);
101007bc:	e0bfff17 	ldw	r2,-4(fp)
101007c0:	10803fcc 	andi	r2,r2,255
101007c4:	1009883a 	mov	r4,r2
101007c8:	01002e80 	call	101002e8 <LCD_WR_DATA>
     LCD_WR_REG(0x002C);
101007cc:	01000b04 	movi	r4,44
101007d0:	01003180 	call	10100318 <LCD_WR_REG>
}
101007d4:	0001883a 	nop
101007d8:	e037883a 	mov	sp,fp
101007dc:	dfc00117 	ldw	ra,4(sp)
101007e0:	df000017 	ldw	fp,0(sp)
101007e4:	dec00204 	addi	sp,sp,8
101007e8:	f800283a 	ret

101007ec <LCD_Swiss>:

void LCD_Swiss(uint size) {
101007ec:	defff704 	addi	sp,sp,-36
101007f0:	dfc00815 	stw	ra,32(sp)
101007f4:	df000715 	stw	fp,28(sp)
101007f8:	df000704 	addi	fp,sp,28
101007fc:	e13fff15 	stw	r4,-4(fp)
    LCD_Clear(RED);
10100800:	013e0014 	movui	r4,63488
10100804:	01006f40 	call	101006f4 <LCD_Clear>
    // 140 - 180, 60 - 140
    LCD_SetCursor(160 - size * 1/2 , 120 - size * 3/2);
10100808:	e0bfff17 	ldw	r2,-4(fp)
1010080c:	1004d07a 	srli	r2,r2,1
10100810:	00c02804 	movi	r3,160
10100814:	1889c83a 	sub	r4,r3,r2
10100818:	e0ffff17 	ldw	r3,-4(fp)
1010081c:	1805883a 	mov	r2,r3
10100820:	1085883a 	add	r2,r2,r2
10100824:	10c5883a 	add	r2,r2,r3
10100828:	1004d07a 	srli	r2,r2,1
1010082c:	00c01e04 	movi	r3,120
10100830:	1885c83a 	sub	r2,r3,r2
10100834:	100b883a 	mov	r5,r2
10100838:	01007640 	call	10100764 <LCD_SetCursor>
    for(int i = 0; i < size; i++) {
1010083c:	e03ff915 	stw	zero,-28(fp)
10100840:	00001c06 	br	101008b4 <LCD_Swiss+0xc8>
        for(int j = 0; j < size; j++) {
10100844:	e03ffa15 	stw	zero,-24(fp)
10100848:	00000506 	br	10100860 <LCD_Swiss+0x74>
            LCD_WR_DATA(WHITE);
1010084c:	013fffd4 	movui	r4,65535
10100850:	01002e80 	call	101002e8 <LCD_WR_DATA>
void LCD_Swiss(uint size) {
    LCD_Clear(RED);
    // 140 - 180, 60 - 140
    LCD_SetCursor(160 - size * 1/2 , 120 - size * 3/2);
    for(int i = 0; i < size; i++) {
        for(int j = 0; j < size; j++) {
10100854:	e0bffa17 	ldw	r2,-24(fp)
10100858:	10800044 	addi	r2,r2,1
1010085c:	e0bffa15 	stw	r2,-24(fp)
10100860:	e0fffa17 	ldw	r3,-24(fp)
10100864:	e0bfff17 	ldw	r2,-4(fp)
10100868:	18bff836 	bltu	r3,r2,1010084c <__alt_data_end+0xfffe084c>
            LCD_WR_DATA(WHITE);
        }
        LCD_SetCursor(160 - size * 1/2, 120 - size * 3/2 + i);
1010086c:	e0bfff17 	ldw	r2,-4(fp)
10100870:	1004d07a 	srli	r2,r2,1
10100874:	00c02804 	movi	r3,160
10100878:	188dc83a 	sub	r6,r3,r2
1010087c:	e13ff917 	ldw	r4,-28(fp)
10100880:	e0ffff17 	ldw	r3,-4(fp)
10100884:	1805883a 	mov	r2,r3
10100888:	1085883a 	add	r2,r2,r2
1010088c:	10c5883a 	add	r2,r2,r3
10100890:	1004d07a 	srli	r2,r2,1
10100894:	2085c83a 	sub	r2,r4,r2
10100898:	10801e04 	addi	r2,r2,120
1010089c:	100b883a 	mov	r5,r2
101008a0:	3009883a 	mov	r4,r6
101008a4:	01007640 	call	10100764 <LCD_SetCursor>

void LCD_Swiss(uint size) {
    LCD_Clear(RED);
    // 140 - 180, 60 - 140
    LCD_SetCursor(160 - size * 1/2 , 120 - size * 3/2);
    for(int i = 0; i < size; i++) {
101008a8:	e0bff917 	ldw	r2,-28(fp)
101008ac:	10800044 	addi	r2,r2,1
101008b0:	e0bff915 	stw	r2,-28(fp)
101008b4:	e0fff917 	ldw	r3,-28(fp)
101008b8:	e0bfff17 	ldw	r2,-4(fp)
101008bc:	18bfe136 	bltu	r3,r2,10100844 <__alt_data_end+0xfffe0844>
            LCD_WR_DATA(WHITE);
        }
        LCD_SetCursor(160 - size * 1/2, 120 - size * 3/2 + i);
    }

    LCD_SetCursor(160 - size * 3/2 , 120 - size * 1/2);
101008c0:	e0ffff17 	ldw	r3,-4(fp)
101008c4:	1805883a 	mov	r2,r3
101008c8:	1085883a 	add	r2,r2,r2
101008cc:	10c5883a 	add	r2,r2,r3
101008d0:	1004d07a 	srli	r2,r2,1
101008d4:	00c02804 	movi	r3,160
101008d8:	1889c83a 	sub	r4,r3,r2
101008dc:	e0bfff17 	ldw	r2,-4(fp)
101008e0:	1004d07a 	srli	r2,r2,1
101008e4:	00c01e04 	movi	r3,120
101008e8:	1885c83a 	sub	r2,r3,r2
101008ec:	100b883a 	mov	r5,r2
101008f0:	01007640 	call	10100764 <LCD_SetCursor>
    for(int i = 0; i < size; i++) {
101008f4:	e03ffb15 	stw	zero,-20(fp)
101008f8:	00001e06 	br	10100974 <LCD_Swiss+0x188>
        for(int j = 0; j < 3*size; j++) {
101008fc:	e03ffc15 	stw	zero,-16(fp)
10100900:	00000506 	br	10100918 <LCD_Swiss+0x12c>
            LCD_WR_DATA(WHITE);
10100904:	013fffd4 	movui	r4,65535
10100908:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_SetCursor(160 - size * 1/2, 120 - size * 3/2 + i);
    }

    LCD_SetCursor(160 - size * 3/2 , 120 - size * 1/2);
    for(int i = 0; i < size; i++) {
        for(int j = 0; j < 3*size; j++) {
1010090c:	e0bffc17 	ldw	r2,-16(fp)
10100910:	10800044 	addi	r2,r2,1
10100914:	e0bffc15 	stw	r2,-16(fp)
10100918:	e0ffff17 	ldw	r3,-4(fp)
1010091c:	1805883a 	mov	r2,r3
10100920:	1085883a 	add	r2,r2,r2
10100924:	10c5883a 	add	r2,r2,r3
10100928:	e0fffc17 	ldw	r3,-16(fp)
1010092c:	18bff536 	bltu	r3,r2,10100904 <__alt_data_end+0xfffe0904>
            LCD_WR_DATA(WHITE);
        }
        LCD_SetCursor(160 - size * 3/2, 120 - size * 1/2 + i);
10100930:	e0ffff17 	ldw	r3,-4(fp)
10100934:	1805883a 	mov	r2,r3
10100938:	1085883a 	add	r2,r2,r2
1010093c:	10c5883a 	add	r2,r2,r3
10100940:	1004d07a 	srli	r2,r2,1
10100944:	00c02804 	movi	r3,160
10100948:	1889c83a 	sub	r4,r3,r2
1010094c:	e0fffb17 	ldw	r3,-20(fp)
10100950:	e0bfff17 	ldw	r2,-4(fp)
10100954:	1004d07a 	srli	r2,r2,1
10100958:	1885c83a 	sub	r2,r3,r2
1010095c:	10801e04 	addi	r2,r2,120
10100960:	100b883a 	mov	r5,r2
10100964:	01007640 	call	10100764 <LCD_SetCursor>
        }
        LCD_SetCursor(160 - size * 1/2, 120 - size * 3/2 + i);
    }

    LCD_SetCursor(160 - size * 3/2 , 120 - size * 1/2);
    for(int i = 0; i < size; i++) {
10100968:	e0bffb17 	ldw	r2,-20(fp)
1010096c:	10800044 	addi	r2,r2,1
10100970:	e0bffb15 	stw	r2,-20(fp)
10100974:	e0fffb17 	ldw	r3,-20(fp)
10100978:	e0bfff17 	ldw	r2,-4(fp)
1010097c:	18bfdf36 	bltu	r3,r2,101008fc <__alt_data_end+0xfffe08fc>
            LCD_WR_DATA(WHITE);
        }
        LCD_SetCursor(160 - size * 3/2, 120 - size * 1/2 + i);
    }

    LCD_SetCursor(160 - size * 1/2 , 120 + size * 1/2);
10100980:	e0bfff17 	ldw	r2,-4(fp)
10100984:	1004d07a 	srli	r2,r2,1
10100988:	00c02804 	movi	r3,160
1010098c:	1887c83a 	sub	r3,r3,r2
10100990:	e0bfff17 	ldw	r2,-4(fp)
10100994:	1004d07a 	srli	r2,r2,1
10100998:	10801e04 	addi	r2,r2,120
1010099c:	100b883a 	mov	r5,r2
101009a0:	1809883a 	mov	r4,r3
101009a4:	01007640 	call	10100764 <LCD_SetCursor>
   for(int i = 0; i < size; i++) {
101009a8:	e03ffd15 	stw	zero,-12(fp)
101009ac:	00001806 	br	10100a10 <LCD_Swiss+0x224>
       for(int j = 0; j < size; j++) {
101009b0:	e03ffe15 	stw	zero,-8(fp)
101009b4:	00000506 	br	101009cc <LCD_Swiss+0x1e0>
           LCD_WR_DATA(WHITE);
101009b8:	013fffd4 	movui	r4,65535
101009bc:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_SetCursor(160 - size * 3/2, 120 - size * 1/2 + i);
    }

    LCD_SetCursor(160 - size * 1/2 , 120 + size * 1/2);
   for(int i = 0; i < size; i++) {
       for(int j = 0; j < size; j++) {
101009c0:	e0bffe17 	ldw	r2,-8(fp)
101009c4:	10800044 	addi	r2,r2,1
101009c8:	e0bffe15 	stw	r2,-8(fp)
101009cc:	e0fffe17 	ldw	r3,-8(fp)
101009d0:	e0bfff17 	ldw	r2,-4(fp)
101009d4:	18bff836 	bltu	r3,r2,101009b8 <__alt_data_end+0xfffe09b8>
           LCD_WR_DATA(WHITE);
       }
       LCD_SetCursor(160 - size * 1/2, 120 + size * 1/2 + i);
101009d8:	e0bfff17 	ldw	r2,-4(fp)
101009dc:	1004d07a 	srli	r2,r2,1
101009e0:	00c02804 	movi	r3,160
101009e4:	1889c83a 	sub	r4,r3,r2
101009e8:	e0bfff17 	ldw	r2,-4(fp)
101009ec:	1006d07a 	srli	r3,r2,1
101009f0:	e0bffd17 	ldw	r2,-12(fp)
101009f4:	1885883a 	add	r2,r3,r2
101009f8:	10801e04 	addi	r2,r2,120
101009fc:	100b883a 	mov	r5,r2
10100a00:	01007640 	call	10100764 <LCD_SetCursor>
        }
        LCD_SetCursor(160 - size * 3/2, 120 - size * 1/2 + i);
    }

    LCD_SetCursor(160 - size * 1/2 , 120 + size * 1/2);
   for(int i = 0; i < size; i++) {
10100a04:	e0bffd17 	ldw	r2,-12(fp)
10100a08:	10800044 	addi	r2,r2,1
10100a0c:	e0bffd15 	stw	r2,-12(fp)
10100a10:	e0fffd17 	ldw	r3,-12(fp)
10100a14:	e0bfff17 	ldw	r2,-4(fp)
10100a18:	18bfe536 	bltu	r3,r2,101009b0 <__alt_data_end+0xfffe09b0>
           LCD_WR_DATA(WHITE);
       }
       LCD_SetCursor(160 - size * 1/2, 120 + size * 1/2 + i);
   }

}
10100a1c:	0001883a 	nop
10100a20:	e037883a 	mov	sp,fp
10100a24:	dfc00117 	ldw	ra,4(sp)
10100a28:	df000017 	ldw	fp,0(sp)
10100a2c:	dec00204 	addi	sp,sp,8
10100a30:	f800283a 	ret

10100a34 <LCD_reset>:

void LCD_reset(void) {
10100a34:	deffff04 	addi	sp,sp,-4
10100a38:	df000015 	stw	fp,0(sp)
10100a3c:	d839883a 	mov	fp,sp
    IOWR_32DIRECT(LCD_CONTROLLER_0_BASE, LCD_COMMAND_OFFSET, 0x0001);
10100a40:	00c00044 	movi	r3,1
10100a44:	00800204 	movi	r2,8
10100a48:	10c00035 	stwio	r3,0(r2)
}
10100a4c:	0001883a 	nop
10100a50:	e037883a 	mov	sp,fp
10100a54:	df000017 	ldw	fp,0(sp)
10100a58:	dec00104 	addi	sp,sp,4
10100a5c:	f800283a 	ret

10100a60 <main>:

int main(void)
{
10100a60:	defffe04 	addi	sp,sp,-8
10100a64:	dfc00115 	stw	ra,4(sp)
10100a68:	df000015 	stw	fp,0(sp)
10100a6c:	d839883a 	mov	fp,sp
    printf("start:\n");
10100a70:	01040434 	movhi	r4,4112
10100a74:	21191304 	addi	r4,r4,25676
10100a78:	0100b940 	call	10100b94 <puts>
    LCD_Init();
10100a7c:	01003480 	call	10100348 <LCD_Init>

    IOWR_8DIRECT(PIO_LEDS_BASE, 1, 0x0);
10100a80:	0007883a 	mov	r3,zero
10100a84:	00840034 	movhi	r2,4096
10100a88:	10820444 	addi	r2,r2,2065
10100a8c:	10c00025 	stbio	r3,0(r2)

    LCD_WR_REG(0x002c);
10100a90:	01000b04 	movi	r4,44
10100a94:	01003180 	call	10100318 <LCD_WR_REG>

    LCD_Swiss(40);
10100a98:	01000a04 	movi	r4,40
10100a9c:	01007ec0 	call	101007ec <LCD_Swiss>
    while(1) {
        //LCD_Init();
        IOWR_8DIRECT(PIO_LEDS_BASE, 1, 0xAA);
10100aa0:	00ffea84 	movi	r3,-86
10100aa4:	00840034 	movhi	r2,4096
10100aa8:	10820444 	addi	r2,r2,2065
10100aac:	10c00025 	stbio	r3,0(r2)
        waitms(1000);
10100ab0:	0100fa04 	movi	r4,1000
10100ab4:	01002900 	call	10100290 <waitms>
        IOWR_8DIRECT(PIO_LEDS_BASE, 1, 0x55);
10100ab8:	00c01544 	movi	r3,85
10100abc:	00840034 	movhi	r2,4096
10100ac0:	10820444 	addi	r2,r2,2065
10100ac4:	10c00025 	stbio	r3,0(r2)
        waitms(1000);
10100ac8:	0100fa04 	movi	r4,1000
10100acc:	01002900 	call	10100290 <waitms>
    }
10100ad0:	003ff306 	br	10100aa0 <__alt_data_end+0xfffe0aa0>

10100ad4 <_puts_r>:
10100ad4:	defff604 	addi	sp,sp,-40
10100ad8:	dc000715 	stw	r16,28(sp)
10100adc:	2021883a 	mov	r16,r4
10100ae0:	2809883a 	mov	r4,r5
10100ae4:	dc400815 	stw	r17,32(sp)
10100ae8:	dfc00915 	stw	ra,36(sp)
10100aec:	2823883a 	mov	r17,r5
10100af0:	0100ba80 	call	10100ba8 <strlen>
10100af4:	10c00044 	addi	r3,r2,1
10100af8:	d8800115 	stw	r2,4(sp)
10100afc:	00840434 	movhi	r2,4112
10100b00:	10991504 	addi	r2,r2,25684
10100b04:	d8800215 	stw	r2,8(sp)
10100b08:	00800044 	movi	r2,1
10100b0c:	d8800315 	stw	r2,12(sp)
10100b10:	00800084 	movi	r2,2
10100b14:	dc400015 	stw	r17,0(sp)
10100b18:	d8c00615 	stw	r3,24(sp)
10100b1c:	dec00415 	stw	sp,16(sp)
10100b20:	d8800515 	stw	r2,20(sp)
10100b24:	80000226 	beq	r16,zero,10100b30 <_puts_r+0x5c>
10100b28:	80800e17 	ldw	r2,56(r16)
10100b2c:	10001426 	beq	r2,zero,10100b80 <_puts_r+0xac>
10100b30:	81400217 	ldw	r5,8(r16)
10100b34:	2880030b 	ldhu	r2,12(r5)
10100b38:	10c8000c 	andi	r3,r2,8192
10100b3c:	1800061e 	bne	r3,zero,10100b58 <_puts_r+0x84>
10100b40:	29001917 	ldw	r4,100(r5)
10100b44:	00f7ffc4 	movi	r3,-8193
10100b48:	10880014 	ori	r2,r2,8192
10100b4c:	20c6703a 	and	r3,r4,r3
10100b50:	2880030d 	sth	r2,12(r5)
10100b54:	28c01915 	stw	r3,100(r5)
10100b58:	d9800404 	addi	r6,sp,16
10100b5c:	8009883a 	mov	r4,r16
10100b60:	0100fe00 	call	10100fe0 <__sfvwrite_r>
10100b64:	1000091e 	bne	r2,zero,10100b8c <_puts_r+0xb8>
10100b68:	00800284 	movi	r2,10
10100b6c:	dfc00917 	ldw	ra,36(sp)
10100b70:	dc400817 	ldw	r17,32(sp)
10100b74:	dc000717 	ldw	r16,28(sp)
10100b78:	dec00a04 	addi	sp,sp,40
10100b7c:	f800283a 	ret
10100b80:	8009883a 	mov	r4,r16
10100b84:	0100f900 	call	10100f90 <__sinit>
10100b88:	003fe906 	br	10100b30 <__alt_data_end+0xfffe0b30>
10100b8c:	00bfffc4 	movi	r2,-1
10100b90:	003ff606 	br	10100b6c <__alt_data_end+0xfffe0b6c>

10100b94 <puts>:
10100b94:	00840434 	movhi	r2,4112
10100b98:	109fbf04 	addi	r2,r2,32508
10100b9c:	200b883a 	mov	r5,r4
10100ba0:	11000017 	ldw	r4,0(r2)
10100ba4:	0100ad41 	jmpi	10100ad4 <_puts_r>

10100ba8 <strlen>:
10100ba8:	208000cc 	andi	r2,r4,3
10100bac:	10002026 	beq	r2,zero,10100c30 <strlen+0x88>
10100bb0:	20800007 	ldb	r2,0(r4)
10100bb4:	10002026 	beq	r2,zero,10100c38 <strlen+0x90>
10100bb8:	2005883a 	mov	r2,r4
10100bbc:	00000206 	br	10100bc8 <strlen+0x20>
10100bc0:	10c00007 	ldb	r3,0(r2)
10100bc4:	18001826 	beq	r3,zero,10100c28 <strlen+0x80>
10100bc8:	10800044 	addi	r2,r2,1
10100bcc:	10c000cc 	andi	r3,r2,3
10100bd0:	183ffb1e 	bne	r3,zero,10100bc0 <__alt_data_end+0xfffe0bc0>
10100bd4:	10c00017 	ldw	r3,0(r2)
10100bd8:	01ffbff4 	movhi	r7,65279
10100bdc:	39ffbfc4 	addi	r7,r7,-257
10100be0:	00ca303a 	nor	r5,zero,r3
10100be4:	01a02074 	movhi	r6,32897
10100be8:	19c7883a 	add	r3,r3,r7
10100bec:	31a02004 	addi	r6,r6,-32640
10100bf0:	1946703a 	and	r3,r3,r5
10100bf4:	1986703a 	and	r3,r3,r6
10100bf8:	1800091e 	bne	r3,zero,10100c20 <strlen+0x78>
10100bfc:	10800104 	addi	r2,r2,4
10100c00:	10c00017 	ldw	r3,0(r2)
10100c04:	19cb883a 	add	r5,r3,r7
10100c08:	00c6303a 	nor	r3,zero,r3
10100c0c:	28c6703a 	and	r3,r5,r3
10100c10:	1986703a 	and	r3,r3,r6
10100c14:	183ff926 	beq	r3,zero,10100bfc <__alt_data_end+0xfffe0bfc>
10100c18:	00000106 	br	10100c20 <strlen+0x78>
10100c1c:	10800044 	addi	r2,r2,1
10100c20:	10c00007 	ldb	r3,0(r2)
10100c24:	183ffd1e 	bne	r3,zero,10100c1c <__alt_data_end+0xfffe0c1c>
10100c28:	1105c83a 	sub	r2,r2,r4
10100c2c:	f800283a 	ret
10100c30:	2005883a 	mov	r2,r4
10100c34:	003fe706 	br	10100bd4 <__alt_data_end+0xfffe0bd4>
10100c38:	0005883a 	mov	r2,zero
10100c3c:	f800283a 	ret

10100c40 <__fp_unlock>:
10100c40:	0005883a 	mov	r2,zero
10100c44:	f800283a 	ret

10100c48 <_cleanup_r>:
10100c48:	01440434 	movhi	r5,4112
10100c4c:	294af704 	addi	r5,r5,11228
10100c50:	01015601 	jmpi	10101560 <_fwalk_reent>

10100c54 <__sinit.part.1>:
10100c54:	defff704 	addi	sp,sp,-36
10100c58:	00c40434 	movhi	r3,4112
10100c5c:	dfc00815 	stw	ra,32(sp)
10100c60:	ddc00715 	stw	r23,28(sp)
10100c64:	dd800615 	stw	r22,24(sp)
10100c68:	dd400515 	stw	r21,20(sp)
10100c6c:	dd000415 	stw	r20,16(sp)
10100c70:	dcc00315 	stw	r19,12(sp)
10100c74:	dc800215 	stw	r18,8(sp)
10100c78:	dc400115 	stw	r17,4(sp)
10100c7c:	dc000015 	stw	r16,0(sp)
10100c80:	18c31204 	addi	r3,r3,3144
10100c84:	24000117 	ldw	r16,4(r4)
10100c88:	20c00f15 	stw	r3,60(r4)
10100c8c:	2080bb04 	addi	r2,r4,748
10100c90:	00c000c4 	movi	r3,3
10100c94:	20c0b915 	stw	r3,740(r4)
10100c98:	2080ba15 	stw	r2,744(r4)
10100c9c:	2000b815 	stw	zero,736(r4)
10100ca0:	05c00204 	movi	r23,8
10100ca4:	00800104 	movi	r2,4
10100ca8:	2025883a 	mov	r18,r4
10100cac:	b80d883a 	mov	r6,r23
10100cb0:	81001704 	addi	r4,r16,92
10100cb4:	000b883a 	mov	r5,zero
10100cb8:	80000015 	stw	zero,0(r16)
10100cbc:	80000115 	stw	zero,4(r16)
10100cc0:	80000215 	stw	zero,8(r16)
10100cc4:	8080030d 	sth	r2,12(r16)
10100cc8:	80001915 	stw	zero,100(r16)
10100ccc:	8000038d 	sth	zero,14(r16)
10100cd0:	80000415 	stw	zero,16(r16)
10100cd4:	80000515 	stw	zero,20(r16)
10100cd8:	80000615 	stw	zero,24(r16)
10100cdc:	01021b80 	call	101021b8 <memset>
10100ce0:	05840434 	movhi	r22,4112
10100ce4:	94400217 	ldw	r17,8(r18)
10100ce8:	05440434 	movhi	r21,4112
10100cec:	05040434 	movhi	r20,4112
10100cf0:	04c40434 	movhi	r19,4112
10100cf4:	b58a2604 	addi	r22,r22,10392
10100cf8:	ad4a3d04 	addi	r21,r21,10484
10100cfc:	a50a5c04 	addi	r20,r20,10608
10100d00:	9cca7304 	addi	r19,r19,10700
10100d04:	85800815 	stw	r22,32(r16)
10100d08:	85400915 	stw	r21,36(r16)
10100d0c:	85000a15 	stw	r20,40(r16)
10100d10:	84c00b15 	stw	r19,44(r16)
10100d14:	84000715 	stw	r16,28(r16)
10100d18:	00800284 	movi	r2,10
10100d1c:	8880030d 	sth	r2,12(r17)
10100d20:	00800044 	movi	r2,1
10100d24:	b80d883a 	mov	r6,r23
10100d28:	89001704 	addi	r4,r17,92
10100d2c:	000b883a 	mov	r5,zero
10100d30:	88000015 	stw	zero,0(r17)
10100d34:	88000115 	stw	zero,4(r17)
10100d38:	88000215 	stw	zero,8(r17)
10100d3c:	88001915 	stw	zero,100(r17)
10100d40:	8880038d 	sth	r2,14(r17)
10100d44:	88000415 	stw	zero,16(r17)
10100d48:	88000515 	stw	zero,20(r17)
10100d4c:	88000615 	stw	zero,24(r17)
10100d50:	01021b80 	call	101021b8 <memset>
10100d54:	94000317 	ldw	r16,12(r18)
10100d58:	00800484 	movi	r2,18
10100d5c:	8c400715 	stw	r17,28(r17)
10100d60:	8d800815 	stw	r22,32(r17)
10100d64:	8d400915 	stw	r21,36(r17)
10100d68:	8d000a15 	stw	r20,40(r17)
10100d6c:	8cc00b15 	stw	r19,44(r17)
10100d70:	8080030d 	sth	r2,12(r16)
10100d74:	00800084 	movi	r2,2
10100d78:	80000015 	stw	zero,0(r16)
10100d7c:	80000115 	stw	zero,4(r16)
10100d80:	80000215 	stw	zero,8(r16)
10100d84:	80001915 	stw	zero,100(r16)
10100d88:	8080038d 	sth	r2,14(r16)
10100d8c:	80000415 	stw	zero,16(r16)
10100d90:	80000515 	stw	zero,20(r16)
10100d94:	80000615 	stw	zero,24(r16)
10100d98:	b80d883a 	mov	r6,r23
10100d9c:	000b883a 	mov	r5,zero
10100da0:	81001704 	addi	r4,r16,92
10100da4:	01021b80 	call	101021b8 <memset>
10100da8:	00800044 	movi	r2,1
10100dac:	84000715 	stw	r16,28(r16)
10100db0:	85800815 	stw	r22,32(r16)
10100db4:	85400915 	stw	r21,36(r16)
10100db8:	85000a15 	stw	r20,40(r16)
10100dbc:	84c00b15 	stw	r19,44(r16)
10100dc0:	90800e15 	stw	r2,56(r18)
10100dc4:	dfc00817 	ldw	ra,32(sp)
10100dc8:	ddc00717 	ldw	r23,28(sp)
10100dcc:	dd800617 	ldw	r22,24(sp)
10100dd0:	dd400517 	ldw	r21,20(sp)
10100dd4:	dd000417 	ldw	r20,16(sp)
10100dd8:	dcc00317 	ldw	r19,12(sp)
10100ddc:	dc800217 	ldw	r18,8(sp)
10100de0:	dc400117 	ldw	r17,4(sp)
10100de4:	dc000017 	ldw	r16,0(sp)
10100de8:	dec00904 	addi	sp,sp,36
10100dec:	f800283a 	ret

10100df0 <__fp_lock>:
10100df0:	0005883a 	mov	r2,zero
10100df4:	f800283a 	ret

10100df8 <__sfmoreglue>:
10100df8:	defffc04 	addi	sp,sp,-16
10100dfc:	dc400115 	stw	r17,4(sp)
10100e00:	2c7fffc4 	addi	r17,r5,-1
10100e04:	8c401a24 	muli	r17,r17,104
10100e08:	dc800215 	stw	r18,8(sp)
10100e0c:	2825883a 	mov	r18,r5
10100e10:	89401d04 	addi	r5,r17,116
10100e14:	dc000015 	stw	r16,0(sp)
10100e18:	dfc00315 	stw	ra,12(sp)
10100e1c:	01016240 	call	10101624 <_malloc_r>
10100e20:	1021883a 	mov	r16,r2
10100e24:	10000726 	beq	r2,zero,10100e44 <__sfmoreglue+0x4c>
10100e28:	11000304 	addi	r4,r2,12
10100e2c:	10000015 	stw	zero,0(r2)
10100e30:	14800115 	stw	r18,4(r2)
10100e34:	11000215 	stw	r4,8(r2)
10100e38:	89801a04 	addi	r6,r17,104
10100e3c:	000b883a 	mov	r5,zero
10100e40:	01021b80 	call	101021b8 <memset>
10100e44:	8005883a 	mov	r2,r16
10100e48:	dfc00317 	ldw	ra,12(sp)
10100e4c:	dc800217 	ldw	r18,8(sp)
10100e50:	dc400117 	ldw	r17,4(sp)
10100e54:	dc000017 	ldw	r16,0(sp)
10100e58:	dec00404 	addi	sp,sp,16
10100e5c:	f800283a 	ret

10100e60 <__sfp>:
10100e60:	defffb04 	addi	sp,sp,-20
10100e64:	dc000015 	stw	r16,0(sp)
10100e68:	04040434 	movhi	r16,4112
10100e6c:	841fbe04 	addi	r16,r16,32504
10100e70:	dcc00315 	stw	r19,12(sp)
10100e74:	2027883a 	mov	r19,r4
10100e78:	81000017 	ldw	r4,0(r16)
10100e7c:	dfc00415 	stw	ra,16(sp)
10100e80:	dc800215 	stw	r18,8(sp)
10100e84:	20800e17 	ldw	r2,56(r4)
10100e88:	dc400115 	stw	r17,4(sp)
10100e8c:	1000021e 	bne	r2,zero,10100e98 <__sfp+0x38>
10100e90:	0100c540 	call	10100c54 <__sinit.part.1>
10100e94:	81000017 	ldw	r4,0(r16)
10100e98:	2480b804 	addi	r18,r4,736
10100e9c:	047fffc4 	movi	r17,-1
10100ea0:	91000117 	ldw	r4,4(r18)
10100ea4:	94000217 	ldw	r16,8(r18)
10100ea8:	213fffc4 	addi	r4,r4,-1
10100eac:	20000a16 	blt	r4,zero,10100ed8 <__sfp+0x78>
10100eb0:	8080030f 	ldh	r2,12(r16)
10100eb4:	10000c26 	beq	r2,zero,10100ee8 <__sfp+0x88>
10100eb8:	80c01d04 	addi	r3,r16,116
10100ebc:	00000206 	br	10100ec8 <__sfp+0x68>
10100ec0:	18bfe60f 	ldh	r2,-104(r3)
10100ec4:	10000826 	beq	r2,zero,10100ee8 <__sfp+0x88>
10100ec8:	213fffc4 	addi	r4,r4,-1
10100ecc:	1c3ffd04 	addi	r16,r3,-12
10100ed0:	18c01a04 	addi	r3,r3,104
10100ed4:	247ffa1e 	bne	r4,r17,10100ec0 <__alt_data_end+0xfffe0ec0>
10100ed8:	90800017 	ldw	r2,0(r18)
10100edc:	10001d26 	beq	r2,zero,10100f54 <__sfp+0xf4>
10100ee0:	1025883a 	mov	r18,r2
10100ee4:	003fee06 	br	10100ea0 <__alt_data_end+0xfffe0ea0>
10100ee8:	00bfffc4 	movi	r2,-1
10100eec:	8080038d 	sth	r2,14(r16)
10100ef0:	00800044 	movi	r2,1
10100ef4:	8080030d 	sth	r2,12(r16)
10100ef8:	80001915 	stw	zero,100(r16)
10100efc:	80000015 	stw	zero,0(r16)
10100f00:	80000215 	stw	zero,8(r16)
10100f04:	80000115 	stw	zero,4(r16)
10100f08:	80000415 	stw	zero,16(r16)
10100f0c:	80000515 	stw	zero,20(r16)
10100f10:	80000615 	stw	zero,24(r16)
10100f14:	01800204 	movi	r6,8
10100f18:	000b883a 	mov	r5,zero
10100f1c:	81001704 	addi	r4,r16,92
10100f20:	01021b80 	call	101021b8 <memset>
10100f24:	8005883a 	mov	r2,r16
10100f28:	80000c15 	stw	zero,48(r16)
10100f2c:	80000d15 	stw	zero,52(r16)
10100f30:	80001115 	stw	zero,68(r16)
10100f34:	80001215 	stw	zero,72(r16)
10100f38:	dfc00417 	ldw	ra,16(sp)
10100f3c:	dcc00317 	ldw	r19,12(sp)
10100f40:	dc800217 	ldw	r18,8(sp)
10100f44:	dc400117 	ldw	r17,4(sp)
10100f48:	dc000017 	ldw	r16,0(sp)
10100f4c:	dec00504 	addi	sp,sp,20
10100f50:	f800283a 	ret
10100f54:	01400104 	movi	r5,4
10100f58:	9809883a 	mov	r4,r19
10100f5c:	0100df80 	call	10100df8 <__sfmoreglue>
10100f60:	90800015 	stw	r2,0(r18)
10100f64:	103fde1e 	bne	r2,zero,10100ee0 <__alt_data_end+0xfffe0ee0>
10100f68:	00800304 	movi	r2,12
10100f6c:	98800015 	stw	r2,0(r19)
10100f70:	0005883a 	mov	r2,zero
10100f74:	003ff006 	br	10100f38 <__alt_data_end+0xfffe0f38>

10100f78 <_cleanup>:
10100f78:	00840434 	movhi	r2,4112
10100f7c:	109fbe04 	addi	r2,r2,32504
10100f80:	11000017 	ldw	r4,0(r2)
10100f84:	01440434 	movhi	r5,4112
10100f88:	294af704 	addi	r5,r5,11228
10100f8c:	01015601 	jmpi	10101560 <_fwalk_reent>

10100f90 <__sinit>:
10100f90:	20800e17 	ldw	r2,56(r4)
10100f94:	10000126 	beq	r2,zero,10100f9c <__sinit+0xc>
10100f98:	f800283a 	ret
10100f9c:	0100c541 	jmpi	10100c54 <__sinit.part.1>

10100fa0 <__sfp_lock_acquire>:
10100fa0:	f800283a 	ret

10100fa4 <__sfp_lock_release>:
10100fa4:	f800283a 	ret

10100fa8 <__sinit_lock_acquire>:
10100fa8:	f800283a 	ret

10100fac <__sinit_lock_release>:
10100fac:	f800283a 	ret

10100fb0 <__fp_lock_all>:
10100fb0:	00840434 	movhi	r2,4112
10100fb4:	109fbf04 	addi	r2,r2,32508
10100fb8:	11000017 	ldw	r4,0(r2)
10100fbc:	01440434 	movhi	r5,4112
10100fc0:	29437c04 	addi	r5,r5,3568
10100fc4:	010149c1 	jmpi	1010149c <_fwalk>

10100fc8 <__fp_unlock_all>:
10100fc8:	00840434 	movhi	r2,4112
10100fcc:	109fbf04 	addi	r2,r2,32508
10100fd0:	11000017 	ldw	r4,0(r2)
10100fd4:	01440434 	movhi	r5,4112
10100fd8:	29431004 	addi	r5,r5,3136
10100fdc:	010149c1 	jmpi	1010149c <_fwalk>

10100fe0 <__sfvwrite_r>:
10100fe0:	30800217 	ldw	r2,8(r6)
10100fe4:	10006726 	beq	r2,zero,10101184 <__sfvwrite_r+0x1a4>
10100fe8:	28c0030b 	ldhu	r3,12(r5)
10100fec:	defff404 	addi	sp,sp,-48
10100ff0:	dd400715 	stw	r21,28(sp)
10100ff4:	dd000615 	stw	r20,24(sp)
10100ff8:	dc000215 	stw	r16,8(sp)
10100ffc:	dfc00b15 	stw	ra,44(sp)
10101000:	df000a15 	stw	fp,40(sp)
10101004:	ddc00915 	stw	r23,36(sp)
10101008:	dd800815 	stw	r22,32(sp)
1010100c:	dcc00515 	stw	r19,20(sp)
10101010:	dc800415 	stw	r18,16(sp)
10101014:	dc400315 	stw	r17,12(sp)
10101018:	1880020c 	andi	r2,r3,8
1010101c:	2821883a 	mov	r16,r5
10101020:	202b883a 	mov	r21,r4
10101024:	3029883a 	mov	r20,r6
10101028:	10002726 	beq	r2,zero,101010c8 <__sfvwrite_r+0xe8>
1010102c:	28800417 	ldw	r2,16(r5)
10101030:	10002526 	beq	r2,zero,101010c8 <__sfvwrite_r+0xe8>
10101034:	1880008c 	andi	r2,r3,2
10101038:	a4400017 	ldw	r17,0(r20)
1010103c:	10002a26 	beq	r2,zero,101010e8 <__sfvwrite_r+0x108>
10101040:	05a00034 	movhi	r22,32768
10101044:	0027883a 	mov	r19,zero
10101048:	0025883a 	mov	r18,zero
1010104c:	b5bf0004 	addi	r22,r22,-1024
10101050:	980d883a 	mov	r6,r19
10101054:	a809883a 	mov	r4,r21
10101058:	90004626 	beq	r18,zero,10101174 <__sfvwrite_r+0x194>
1010105c:	900f883a 	mov	r7,r18
10101060:	b480022e 	bgeu	r22,r18,1010106c <__sfvwrite_r+0x8c>
10101064:	01e00034 	movhi	r7,32768
10101068:	39ff0004 	addi	r7,r7,-1024
1010106c:	80800917 	ldw	r2,36(r16)
10101070:	81400717 	ldw	r5,28(r16)
10101074:	103ee83a 	callr	r2
10101078:	0080570e 	bge	zero,r2,101011d8 <__sfvwrite_r+0x1f8>
1010107c:	a0c00217 	ldw	r3,8(r20)
10101080:	98a7883a 	add	r19,r19,r2
10101084:	90a5c83a 	sub	r18,r18,r2
10101088:	1885c83a 	sub	r2,r3,r2
1010108c:	a0800215 	stw	r2,8(r20)
10101090:	103fef1e 	bne	r2,zero,10101050 <__alt_data_end+0xfffe1050>
10101094:	0005883a 	mov	r2,zero
10101098:	dfc00b17 	ldw	ra,44(sp)
1010109c:	df000a17 	ldw	fp,40(sp)
101010a0:	ddc00917 	ldw	r23,36(sp)
101010a4:	dd800817 	ldw	r22,32(sp)
101010a8:	dd400717 	ldw	r21,28(sp)
101010ac:	dd000617 	ldw	r20,24(sp)
101010b0:	dcc00517 	ldw	r19,20(sp)
101010b4:	dc800417 	ldw	r18,16(sp)
101010b8:	dc400317 	ldw	r17,12(sp)
101010bc:	dc000217 	ldw	r16,8(sp)
101010c0:	dec00c04 	addi	sp,sp,48
101010c4:	f800283a 	ret
101010c8:	800b883a 	mov	r5,r16
101010cc:	a809883a 	mov	r4,r21
101010d0:	0102a340 	call	10102a34 <__swsetup_r>
101010d4:	1000eb1e 	bne	r2,zero,10101484 <__sfvwrite_r+0x4a4>
101010d8:	80c0030b 	ldhu	r3,12(r16)
101010dc:	a4400017 	ldw	r17,0(r20)
101010e0:	1880008c 	andi	r2,r3,2
101010e4:	103fd61e 	bne	r2,zero,10101040 <__alt_data_end+0xfffe1040>
101010e8:	1880004c 	andi	r2,r3,1
101010ec:	10003f1e 	bne	r2,zero,101011ec <__sfvwrite_r+0x20c>
101010f0:	0039883a 	mov	fp,zero
101010f4:	0025883a 	mov	r18,zero
101010f8:	90001a26 	beq	r18,zero,10101164 <__sfvwrite_r+0x184>
101010fc:	1880800c 	andi	r2,r3,512
10101100:	84c00217 	ldw	r19,8(r16)
10101104:	10002126 	beq	r2,zero,1010118c <__sfvwrite_r+0x1ac>
10101108:	982f883a 	mov	r23,r19
1010110c:	94c09336 	bltu	r18,r19,1010135c <__sfvwrite_r+0x37c>
10101110:	1881200c 	andi	r2,r3,1152
10101114:	10009e1e 	bne	r2,zero,10101390 <__sfvwrite_r+0x3b0>
10101118:	81000017 	ldw	r4,0(r16)
1010111c:	b80d883a 	mov	r6,r23
10101120:	e00b883a 	mov	r5,fp
10101124:	010205c0 	call	1010205c <memmove>
10101128:	80c00217 	ldw	r3,8(r16)
1010112c:	81000017 	ldw	r4,0(r16)
10101130:	9005883a 	mov	r2,r18
10101134:	1ce7c83a 	sub	r19,r3,r19
10101138:	25cf883a 	add	r7,r4,r23
1010113c:	84c00215 	stw	r19,8(r16)
10101140:	81c00015 	stw	r7,0(r16)
10101144:	a0c00217 	ldw	r3,8(r20)
10101148:	e0b9883a 	add	fp,fp,r2
1010114c:	90a5c83a 	sub	r18,r18,r2
10101150:	18a7c83a 	sub	r19,r3,r2
10101154:	a4c00215 	stw	r19,8(r20)
10101158:	983fce26 	beq	r19,zero,10101094 <__alt_data_end+0xfffe1094>
1010115c:	80c0030b 	ldhu	r3,12(r16)
10101160:	903fe61e 	bne	r18,zero,101010fc <__alt_data_end+0xfffe10fc>
10101164:	8f000017 	ldw	fp,0(r17)
10101168:	8c800117 	ldw	r18,4(r17)
1010116c:	8c400204 	addi	r17,r17,8
10101170:	003fe106 	br	101010f8 <__alt_data_end+0xfffe10f8>
10101174:	8cc00017 	ldw	r19,0(r17)
10101178:	8c800117 	ldw	r18,4(r17)
1010117c:	8c400204 	addi	r17,r17,8
10101180:	003fb306 	br	10101050 <__alt_data_end+0xfffe1050>
10101184:	0005883a 	mov	r2,zero
10101188:	f800283a 	ret
1010118c:	81000017 	ldw	r4,0(r16)
10101190:	80800417 	ldw	r2,16(r16)
10101194:	11005736 	bltu	r2,r4,101012f4 <__sfvwrite_r+0x314>
10101198:	85c00517 	ldw	r23,20(r16)
1010119c:	95c05536 	bltu	r18,r23,101012f4 <__sfvwrite_r+0x314>
101011a0:	00a00034 	movhi	r2,32768
101011a4:	10bfffc4 	addi	r2,r2,-1
101011a8:	9009883a 	mov	r4,r18
101011ac:	1480012e 	bgeu	r2,r18,101011b4 <__sfvwrite_r+0x1d4>
101011b0:	1009883a 	mov	r4,r2
101011b4:	b80b883a 	mov	r5,r23
101011b8:	01036e80 	call	101036e8 <__divsi3>
101011bc:	15cf383a 	mul	r7,r2,r23
101011c0:	81400717 	ldw	r5,28(r16)
101011c4:	80800917 	ldw	r2,36(r16)
101011c8:	e00d883a 	mov	r6,fp
101011cc:	a809883a 	mov	r4,r21
101011d0:	103ee83a 	callr	r2
101011d4:	00bfdb16 	blt	zero,r2,10101144 <__alt_data_end+0xfffe1144>
101011d8:	8080030b 	ldhu	r2,12(r16)
101011dc:	10801014 	ori	r2,r2,64
101011e0:	8080030d 	sth	r2,12(r16)
101011e4:	00bfffc4 	movi	r2,-1
101011e8:	003fab06 	br	10101098 <__alt_data_end+0xfffe1098>
101011ec:	0027883a 	mov	r19,zero
101011f0:	0011883a 	mov	r8,zero
101011f4:	0039883a 	mov	fp,zero
101011f8:	0025883a 	mov	r18,zero
101011fc:	90001f26 	beq	r18,zero,1010127c <__sfvwrite_r+0x29c>
10101200:	40005a26 	beq	r8,zero,1010136c <__sfvwrite_r+0x38c>
10101204:	982d883a 	mov	r22,r19
10101208:	94c0012e 	bgeu	r18,r19,10101210 <__sfvwrite_r+0x230>
1010120c:	902d883a 	mov	r22,r18
10101210:	81000017 	ldw	r4,0(r16)
10101214:	80800417 	ldw	r2,16(r16)
10101218:	b02f883a 	mov	r23,r22
1010121c:	81c00517 	ldw	r7,20(r16)
10101220:	1100032e 	bgeu	r2,r4,10101230 <__sfvwrite_r+0x250>
10101224:	80c00217 	ldw	r3,8(r16)
10101228:	38c7883a 	add	r3,r7,r3
1010122c:	1d801816 	blt	r3,r22,10101290 <__sfvwrite_r+0x2b0>
10101230:	b1c03e16 	blt	r22,r7,1010132c <__sfvwrite_r+0x34c>
10101234:	80800917 	ldw	r2,36(r16)
10101238:	81400717 	ldw	r5,28(r16)
1010123c:	e00d883a 	mov	r6,fp
10101240:	da000115 	stw	r8,4(sp)
10101244:	a809883a 	mov	r4,r21
10101248:	103ee83a 	callr	r2
1010124c:	102f883a 	mov	r23,r2
10101250:	da000117 	ldw	r8,4(sp)
10101254:	00bfe00e 	bge	zero,r2,101011d8 <__alt_data_end+0xfffe11d8>
10101258:	9de7c83a 	sub	r19,r19,r23
1010125c:	98001f26 	beq	r19,zero,101012dc <__sfvwrite_r+0x2fc>
10101260:	a0800217 	ldw	r2,8(r20)
10101264:	e5f9883a 	add	fp,fp,r23
10101268:	95e5c83a 	sub	r18,r18,r23
1010126c:	15efc83a 	sub	r23,r2,r23
10101270:	a5c00215 	stw	r23,8(r20)
10101274:	b83f8726 	beq	r23,zero,10101094 <__alt_data_end+0xfffe1094>
10101278:	903fe11e 	bne	r18,zero,10101200 <__alt_data_end+0xfffe1200>
1010127c:	8f000017 	ldw	fp,0(r17)
10101280:	8c800117 	ldw	r18,4(r17)
10101284:	0011883a 	mov	r8,zero
10101288:	8c400204 	addi	r17,r17,8
1010128c:	003fdb06 	br	101011fc <__alt_data_end+0xfffe11fc>
10101290:	180d883a 	mov	r6,r3
10101294:	e00b883a 	mov	r5,fp
10101298:	da000115 	stw	r8,4(sp)
1010129c:	d8c00015 	stw	r3,0(sp)
101012a0:	010205c0 	call	1010205c <memmove>
101012a4:	d8c00017 	ldw	r3,0(sp)
101012a8:	80800017 	ldw	r2,0(r16)
101012ac:	800b883a 	mov	r5,r16
101012b0:	a809883a 	mov	r4,r21
101012b4:	10c5883a 	add	r2,r2,r3
101012b8:	80800015 	stw	r2,0(r16)
101012bc:	d8c00015 	stw	r3,0(sp)
101012c0:	0102efc0 	call	10102efc <_fflush_r>
101012c4:	d8c00017 	ldw	r3,0(sp)
101012c8:	da000117 	ldw	r8,4(sp)
101012cc:	103fc21e 	bne	r2,zero,101011d8 <__alt_data_end+0xfffe11d8>
101012d0:	182f883a 	mov	r23,r3
101012d4:	9de7c83a 	sub	r19,r19,r23
101012d8:	983fe11e 	bne	r19,zero,10101260 <__alt_data_end+0xfffe1260>
101012dc:	800b883a 	mov	r5,r16
101012e0:	a809883a 	mov	r4,r21
101012e4:	0102efc0 	call	10102efc <_fflush_r>
101012e8:	103fbb1e 	bne	r2,zero,101011d8 <__alt_data_end+0xfffe11d8>
101012ec:	0011883a 	mov	r8,zero
101012f0:	003fdb06 	br	10101260 <__alt_data_end+0xfffe1260>
101012f4:	94c0012e 	bgeu	r18,r19,101012fc <__sfvwrite_r+0x31c>
101012f8:	9027883a 	mov	r19,r18
101012fc:	980d883a 	mov	r6,r19
10101300:	e00b883a 	mov	r5,fp
10101304:	010205c0 	call	1010205c <memmove>
10101308:	80800217 	ldw	r2,8(r16)
1010130c:	80c00017 	ldw	r3,0(r16)
10101310:	14c5c83a 	sub	r2,r2,r19
10101314:	1cc7883a 	add	r3,r3,r19
10101318:	80800215 	stw	r2,8(r16)
1010131c:	80c00015 	stw	r3,0(r16)
10101320:	10004326 	beq	r2,zero,10101430 <__sfvwrite_r+0x450>
10101324:	9805883a 	mov	r2,r19
10101328:	003f8606 	br	10101144 <__alt_data_end+0xfffe1144>
1010132c:	b00d883a 	mov	r6,r22
10101330:	e00b883a 	mov	r5,fp
10101334:	da000115 	stw	r8,4(sp)
10101338:	010205c0 	call	1010205c <memmove>
1010133c:	80800217 	ldw	r2,8(r16)
10101340:	80c00017 	ldw	r3,0(r16)
10101344:	da000117 	ldw	r8,4(sp)
10101348:	1585c83a 	sub	r2,r2,r22
1010134c:	1dad883a 	add	r22,r3,r22
10101350:	80800215 	stw	r2,8(r16)
10101354:	85800015 	stw	r22,0(r16)
10101358:	003fbf06 	br	10101258 <__alt_data_end+0xfffe1258>
1010135c:	81000017 	ldw	r4,0(r16)
10101360:	9027883a 	mov	r19,r18
10101364:	902f883a 	mov	r23,r18
10101368:	003f6c06 	br	1010111c <__alt_data_end+0xfffe111c>
1010136c:	900d883a 	mov	r6,r18
10101370:	01400284 	movi	r5,10
10101374:	e009883a 	mov	r4,fp
10101378:	0101e300 	call	10101e30 <memchr>
1010137c:	10003e26 	beq	r2,zero,10101478 <__sfvwrite_r+0x498>
10101380:	10800044 	addi	r2,r2,1
10101384:	1727c83a 	sub	r19,r2,fp
10101388:	02000044 	movi	r8,1
1010138c:	003f9d06 	br	10101204 <__alt_data_end+0xfffe1204>
10101390:	80800517 	ldw	r2,20(r16)
10101394:	81400417 	ldw	r5,16(r16)
10101398:	81c00017 	ldw	r7,0(r16)
1010139c:	10a7883a 	add	r19,r2,r2
101013a0:	9885883a 	add	r2,r19,r2
101013a4:	1026d7fa 	srli	r19,r2,31
101013a8:	396dc83a 	sub	r22,r7,r5
101013ac:	b1000044 	addi	r4,r22,1
101013b0:	9885883a 	add	r2,r19,r2
101013b4:	1027d07a 	srai	r19,r2,1
101013b8:	2485883a 	add	r2,r4,r18
101013bc:	980d883a 	mov	r6,r19
101013c0:	9880022e 	bgeu	r19,r2,101013cc <__sfvwrite_r+0x3ec>
101013c4:	1027883a 	mov	r19,r2
101013c8:	100d883a 	mov	r6,r2
101013cc:	18c1000c 	andi	r3,r3,1024
101013d0:	18001c26 	beq	r3,zero,10101444 <__sfvwrite_r+0x464>
101013d4:	300b883a 	mov	r5,r6
101013d8:	a809883a 	mov	r4,r21
101013dc:	01016240 	call	10101624 <_malloc_r>
101013e0:	102f883a 	mov	r23,r2
101013e4:	10002926 	beq	r2,zero,1010148c <__sfvwrite_r+0x4ac>
101013e8:	81400417 	ldw	r5,16(r16)
101013ec:	b00d883a 	mov	r6,r22
101013f0:	1009883a 	mov	r4,r2
101013f4:	0101f140 	call	10101f14 <memcpy>
101013f8:	8080030b 	ldhu	r2,12(r16)
101013fc:	00fedfc4 	movi	r3,-1153
10101400:	10c4703a 	and	r2,r2,r3
10101404:	10802014 	ori	r2,r2,128
10101408:	8080030d 	sth	r2,12(r16)
1010140c:	bd89883a 	add	r4,r23,r22
10101410:	9d8fc83a 	sub	r7,r19,r22
10101414:	85c00415 	stw	r23,16(r16)
10101418:	84c00515 	stw	r19,20(r16)
1010141c:	81000015 	stw	r4,0(r16)
10101420:	9027883a 	mov	r19,r18
10101424:	81c00215 	stw	r7,8(r16)
10101428:	902f883a 	mov	r23,r18
1010142c:	003f3b06 	br	1010111c <__alt_data_end+0xfffe111c>
10101430:	800b883a 	mov	r5,r16
10101434:	a809883a 	mov	r4,r21
10101438:	0102efc0 	call	10102efc <_fflush_r>
1010143c:	103fb926 	beq	r2,zero,10101324 <__alt_data_end+0xfffe1324>
10101440:	003f6506 	br	101011d8 <__alt_data_end+0xfffe11d8>
10101444:	a809883a 	mov	r4,r21
10101448:	01022e00 	call	101022e0 <_realloc_r>
1010144c:	102f883a 	mov	r23,r2
10101450:	103fee1e 	bne	r2,zero,1010140c <__alt_data_end+0xfffe140c>
10101454:	81400417 	ldw	r5,16(r16)
10101458:	a809883a 	mov	r4,r21
1010145c:	01030ac0 	call	101030ac <_free_r>
10101460:	8080030b 	ldhu	r2,12(r16)
10101464:	00ffdfc4 	movi	r3,-129
10101468:	1884703a 	and	r2,r3,r2
1010146c:	00c00304 	movi	r3,12
10101470:	a8c00015 	stw	r3,0(r21)
10101474:	003f5906 	br	101011dc <__alt_data_end+0xfffe11dc>
10101478:	94c00044 	addi	r19,r18,1
1010147c:	02000044 	movi	r8,1
10101480:	003f6006 	br	10101204 <__alt_data_end+0xfffe1204>
10101484:	00bfffc4 	movi	r2,-1
10101488:	003f0306 	br	10101098 <__alt_data_end+0xfffe1098>
1010148c:	00800304 	movi	r2,12
10101490:	a8800015 	stw	r2,0(r21)
10101494:	8080030b 	ldhu	r2,12(r16)
10101498:	003f5006 	br	101011dc <__alt_data_end+0xfffe11dc>

1010149c <_fwalk>:
1010149c:	defff704 	addi	sp,sp,-36
101014a0:	dd000415 	stw	r20,16(sp)
101014a4:	dfc00815 	stw	ra,32(sp)
101014a8:	ddc00715 	stw	r23,28(sp)
101014ac:	dd800615 	stw	r22,24(sp)
101014b0:	dd400515 	stw	r21,20(sp)
101014b4:	dcc00315 	stw	r19,12(sp)
101014b8:	dc800215 	stw	r18,8(sp)
101014bc:	dc400115 	stw	r17,4(sp)
101014c0:	dc000015 	stw	r16,0(sp)
101014c4:	2500b804 	addi	r20,r4,736
101014c8:	a0002326 	beq	r20,zero,10101558 <_fwalk+0xbc>
101014cc:	282b883a 	mov	r21,r5
101014d0:	002f883a 	mov	r23,zero
101014d4:	05800044 	movi	r22,1
101014d8:	04ffffc4 	movi	r19,-1
101014dc:	a4400117 	ldw	r17,4(r20)
101014e0:	a4800217 	ldw	r18,8(r20)
101014e4:	8c7fffc4 	addi	r17,r17,-1
101014e8:	88000d16 	blt	r17,zero,10101520 <_fwalk+0x84>
101014ec:	94000304 	addi	r16,r18,12
101014f0:	94800384 	addi	r18,r18,14
101014f4:	8080000b 	ldhu	r2,0(r16)
101014f8:	8c7fffc4 	addi	r17,r17,-1
101014fc:	813ffd04 	addi	r4,r16,-12
10101500:	b080042e 	bgeu	r22,r2,10101514 <_fwalk+0x78>
10101504:	9080000f 	ldh	r2,0(r18)
10101508:	14c00226 	beq	r2,r19,10101514 <_fwalk+0x78>
1010150c:	a83ee83a 	callr	r21
10101510:	b8aeb03a 	or	r23,r23,r2
10101514:	84001a04 	addi	r16,r16,104
10101518:	94801a04 	addi	r18,r18,104
1010151c:	8cfff51e 	bne	r17,r19,101014f4 <__alt_data_end+0xfffe14f4>
10101520:	a5000017 	ldw	r20,0(r20)
10101524:	a03fed1e 	bne	r20,zero,101014dc <__alt_data_end+0xfffe14dc>
10101528:	b805883a 	mov	r2,r23
1010152c:	dfc00817 	ldw	ra,32(sp)
10101530:	ddc00717 	ldw	r23,28(sp)
10101534:	dd800617 	ldw	r22,24(sp)
10101538:	dd400517 	ldw	r21,20(sp)
1010153c:	dd000417 	ldw	r20,16(sp)
10101540:	dcc00317 	ldw	r19,12(sp)
10101544:	dc800217 	ldw	r18,8(sp)
10101548:	dc400117 	ldw	r17,4(sp)
1010154c:	dc000017 	ldw	r16,0(sp)
10101550:	dec00904 	addi	sp,sp,36
10101554:	f800283a 	ret
10101558:	002f883a 	mov	r23,zero
1010155c:	003ff206 	br	10101528 <__alt_data_end+0xfffe1528>

10101560 <_fwalk_reent>:
10101560:	defff704 	addi	sp,sp,-36
10101564:	dd000415 	stw	r20,16(sp)
10101568:	dfc00815 	stw	ra,32(sp)
1010156c:	ddc00715 	stw	r23,28(sp)
10101570:	dd800615 	stw	r22,24(sp)
10101574:	dd400515 	stw	r21,20(sp)
10101578:	dcc00315 	stw	r19,12(sp)
1010157c:	dc800215 	stw	r18,8(sp)
10101580:	dc400115 	stw	r17,4(sp)
10101584:	dc000015 	stw	r16,0(sp)
10101588:	2500b804 	addi	r20,r4,736
1010158c:	a0002326 	beq	r20,zero,1010161c <_fwalk_reent+0xbc>
10101590:	282b883a 	mov	r21,r5
10101594:	2027883a 	mov	r19,r4
10101598:	002f883a 	mov	r23,zero
1010159c:	05800044 	movi	r22,1
101015a0:	04bfffc4 	movi	r18,-1
101015a4:	a4400117 	ldw	r17,4(r20)
101015a8:	a4000217 	ldw	r16,8(r20)
101015ac:	8c7fffc4 	addi	r17,r17,-1
101015b0:	88000c16 	blt	r17,zero,101015e4 <_fwalk_reent+0x84>
101015b4:	84000304 	addi	r16,r16,12
101015b8:	8080000b 	ldhu	r2,0(r16)
101015bc:	8c7fffc4 	addi	r17,r17,-1
101015c0:	817ffd04 	addi	r5,r16,-12
101015c4:	b080052e 	bgeu	r22,r2,101015dc <_fwalk_reent+0x7c>
101015c8:	8080008f 	ldh	r2,2(r16)
101015cc:	9809883a 	mov	r4,r19
101015d0:	14800226 	beq	r2,r18,101015dc <_fwalk_reent+0x7c>
101015d4:	a83ee83a 	callr	r21
101015d8:	b8aeb03a 	or	r23,r23,r2
101015dc:	84001a04 	addi	r16,r16,104
101015e0:	8cbff51e 	bne	r17,r18,101015b8 <__alt_data_end+0xfffe15b8>
101015e4:	a5000017 	ldw	r20,0(r20)
101015e8:	a03fee1e 	bne	r20,zero,101015a4 <__alt_data_end+0xfffe15a4>
101015ec:	b805883a 	mov	r2,r23
101015f0:	dfc00817 	ldw	ra,32(sp)
101015f4:	ddc00717 	ldw	r23,28(sp)
101015f8:	dd800617 	ldw	r22,24(sp)
101015fc:	dd400517 	ldw	r21,20(sp)
10101600:	dd000417 	ldw	r20,16(sp)
10101604:	dcc00317 	ldw	r19,12(sp)
10101608:	dc800217 	ldw	r18,8(sp)
1010160c:	dc400117 	ldw	r17,4(sp)
10101610:	dc000017 	ldw	r16,0(sp)
10101614:	dec00904 	addi	sp,sp,36
10101618:	f800283a 	ret
1010161c:	002f883a 	mov	r23,zero
10101620:	003ff206 	br	101015ec <__alt_data_end+0xfffe15ec>

10101624 <_malloc_r>:
10101624:	defff504 	addi	sp,sp,-44
10101628:	dc800315 	stw	r18,12(sp)
1010162c:	dfc00a15 	stw	ra,40(sp)
10101630:	df000915 	stw	fp,36(sp)
10101634:	ddc00815 	stw	r23,32(sp)
10101638:	dd800715 	stw	r22,28(sp)
1010163c:	dd400615 	stw	r21,24(sp)
10101640:	dd000515 	stw	r20,20(sp)
10101644:	dcc00415 	stw	r19,16(sp)
10101648:	dc400215 	stw	r17,8(sp)
1010164c:	dc000115 	stw	r16,4(sp)
10101650:	288002c4 	addi	r2,r5,11
10101654:	00c00584 	movi	r3,22
10101658:	2025883a 	mov	r18,r4
1010165c:	18807f2e 	bgeu	r3,r2,1010185c <_malloc_r+0x238>
10101660:	047ffe04 	movi	r17,-8
10101664:	1462703a 	and	r17,r2,r17
10101668:	8800a316 	blt	r17,zero,101018f8 <_malloc_r+0x2d4>
1010166c:	8940a236 	bltu	r17,r5,101018f8 <_malloc_r+0x2d4>
10101670:	0103e180 	call	10103e18 <__malloc_lock>
10101674:	00807dc4 	movi	r2,503
10101678:	1441e92e 	bgeu	r2,r17,10101e20 <_malloc_r+0x7fc>
1010167c:	8804d27a 	srli	r2,r17,9
10101680:	1000a126 	beq	r2,zero,10101908 <_malloc_r+0x2e4>
10101684:	00c00104 	movi	r3,4
10101688:	18811e36 	bltu	r3,r2,10101b04 <_malloc_r+0x4e0>
1010168c:	8804d1ba 	srli	r2,r17,6
10101690:	12000e44 	addi	r8,r2,57
10101694:	11c00e04 	addi	r7,r2,56
10101698:	4209883a 	add	r4,r8,r8
1010169c:	04c40434 	movhi	r19,4112
101016a0:	2109883a 	add	r4,r4,r4
101016a4:	9cda3004 	addi	r19,r19,26816
101016a8:	2109883a 	add	r4,r4,r4
101016ac:	9909883a 	add	r4,r19,r4
101016b0:	24000117 	ldw	r16,4(r4)
101016b4:	213ffe04 	addi	r4,r4,-8
101016b8:	24009726 	beq	r4,r16,10101918 <_malloc_r+0x2f4>
101016bc:	80800117 	ldw	r2,4(r16)
101016c0:	01bfff04 	movi	r6,-4
101016c4:	014003c4 	movi	r5,15
101016c8:	1184703a 	and	r2,r2,r6
101016cc:	1447c83a 	sub	r3,r2,r17
101016d0:	28c00716 	blt	r5,r3,101016f0 <_malloc_r+0xcc>
101016d4:	1800920e 	bge	r3,zero,10101920 <_malloc_r+0x2fc>
101016d8:	84000317 	ldw	r16,12(r16)
101016dc:	24008e26 	beq	r4,r16,10101918 <_malloc_r+0x2f4>
101016e0:	80800117 	ldw	r2,4(r16)
101016e4:	1184703a 	and	r2,r2,r6
101016e8:	1447c83a 	sub	r3,r2,r17
101016ec:	28fff90e 	bge	r5,r3,101016d4 <__alt_data_end+0xfffe16d4>
101016f0:	3809883a 	mov	r4,r7
101016f4:	01840434 	movhi	r6,4112
101016f8:	9c000417 	ldw	r16,16(r19)
101016fc:	319a3004 	addi	r6,r6,26816
10101700:	32000204 	addi	r8,r6,8
10101704:	82013426 	beq	r16,r8,10101bd8 <_malloc_r+0x5b4>
10101708:	80c00117 	ldw	r3,4(r16)
1010170c:	00bfff04 	movi	r2,-4
10101710:	188e703a 	and	r7,r3,r2
10101714:	3c45c83a 	sub	r2,r7,r17
10101718:	00c003c4 	movi	r3,15
1010171c:	18811f16 	blt	r3,r2,10101b9c <_malloc_r+0x578>
10101720:	32000515 	stw	r8,20(r6)
10101724:	32000415 	stw	r8,16(r6)
10101728:	10007f0e 	bge	r2,zero,10101928 <_malloc_r+0x304>
1010172c:	00807fc4 	movi	r2,511
10101730:	11c0fd36 	bltu	r2,r7,10101b28 <_malloc_r+0x504>
10101734:	3806d0fa 	srli	r3,r7,3
10101738:	01c00044 	movi	r7,1
1010173c:	30800117 	ldw	r2,4(r6)
10101740:	19400044 	addi	r5,r3,1
10101744:	294b883a 	add	r5,r5,r5
10101748:	1807d0ba 	srai	r3,r3,2
1010174c:	294b883a 	add	r5,r5,r5
10101750:	294b883a 	add	r5,r5,r5
10101754:	298b883a 	add	r5,r5,r6
10101758:	38c6983a 	sll	r3,r7,r3
1010175c:	29c00017 	ldw	r7,0(r5)
10101760:	2a7ffe04 	addi	r9,r5,-8
10101764:	1886b03a 	or	r3,r3,r2
10101768:	82400315 	stw	r9,12(r16)
1010176c:	81c00215 	stw	r7,8(r16)
10101770:	30c00115 	stw	r3,4(r6)
10101774:	2c000015 	stw	r16,0(r5)
10101778:	3c000315 	stw	r16,12(r7)
1010177c:	2005d0ba 	srai	r2,r4,2
10101780:	01400044 	movi	r5,1
10101784:	288a983a 	sll	r5,r5,r2
10101788:	19406f36 	bltu	r3,r5,10101948 <_malloc_r+0x324>
1010178c:	28c4703a 	and	r2,r5,r3
10101790:	10000a1e 	bne	r2,zero,101017bc <_malloc_r+0x198>
10101794:	00bfff04 	movi	r2,-4
10101798:	294b883a 	add	r5,r5,r5
1010179c:	2088703a 	and	r4,r4,r2
101017a0:	28c4703a 	and	r2,r5,r3
101017a4:	21000104 	addi	r4,r4,4
101017a8:	1000041e 	bne	r2,zero,101017bc <_malloc_r+0x198>
101017ac:	294b883a 	add	r5,r5,r5
101017b0:	28c4703a 	and	r2,r5,r3
101017b4:	21000104 	addi	r4,r4,4
101017b8:	103ffc26 	beq	r2,zero,101017ac <__alt_data_end+0xfffe17ac>
101017bc:	02bfff04 	movi	r10,-4
101017c0:	024003c4 	movi	r9,15
101017c4:	21800044 	addi	r6,r4,1
101017c8:	318d883a 	add	r6,r6,r6
101017cc:	318d883a 	add	r6,r6,r6
101017d0:	318d883a 	add	r6,r6,r6
101017d4:	998d883a 	add	r6,r19,r6
101017d8:	333ffe04 	addi	r12,r6,-8
101017dc:	2017883a 	mov	r11,r4
101017e0:	31800104 	addi	r6,r6,4
101017e4:	34000017 	ldw	r16,0(r6)
101017e8:	31fffd04 	addi	r7,r6,-12
101017ec:	81c0041e 	bne	r16,r7,10101800 <_malloc_r+0x1dc>
101017f0:	0000fb06 	br	10101be0 <_malloc_r+0x5bc>
101017f4:	1801030e 	bge	r3,zero,10101c04 <_malloc_r+0x5e0>
101017f8:	84000317 	ldw	r16,12(r16)
101017fc:	81c0f826 	beq	r16,r7,10101be0 <_malloc_r+0x5bc>
10101800:	80800117 	ldw	r2,4(r16)
10101804:	1284703a 	and	r2,r2,r10
10101808:	1447c83a 	sub	r3,r2,r17
1010180c:	48fff90e 	bge	r9,r3,101017f4 <__alt_data_end+0xfffe17f4>
10101810:	80800317 	ldw	r2,12(r16)
10101814:	81000217 	ldw	r4,8(r16)
10101818:	89400054 	ori	r5,r17,1
1010181c:	81400115 	stw	r5,4(r16)
10101820:	20800315 	stw	r2,12(r4)
10101824:	11000215 	stw	r4,8(r2)
10101828:	8463883a 	add	r17,r16,r17
1010182c:	9c400515 	stw	r17,20(r19)
10101830:	9c400415 	stw	r17,16(r19)
10101834:	18800054 	ori	r2,r3,1
10101838:	88800115 	stw	r2,4(r17)
1010183c:	8a000315 	stw	r8,12(r17)
10101840:	8a000215 	stw	r8,8(r17)
10101844:	88e3883a 	add	r17,r17,r3
10101848:	88c00015 	stw	r3,0(r17)
1010184c:	9009883a 	mov	r4,r18
10101850:	0103e3c0 	call	10103e3c <__malloc_unlock>
10101854:	80800204 	addi	r2,r16,8
10101858:	00001b06 	br	101018c8 <_malloc_r+0x2a4>
1010185c:	04400404 	movi	r17,16
10101860:	89402536 	bltu	r17,r5,101018f8 <_malloc_r+0x2d4>
10101864:	0103e180 	call	10103e18 <__malloc_lock>
10101868:	00800184 	movi	r2,6
1010186c:	01000084 	movi	r4,2
10101870:	04c40434 	movhi	r19,4112
10101874:	1085883a 	add	r2,r2,r2
10101878:	9cda3004 	addi	r19,r19,26816
1010187c:	1085883a 	add	r2,r2,r2
10101880:	9885883a 	add	r2,r19,r2
10101884:	14000117 	ldw	r16,4(r2)
10101888:	10fffe04 	addi	r3,r2,-8
1010188c:	80c0d926 	beq	r16,r3,10101bf4 <_malloc_r+0x5d0>
10101890:	80c00117 	ldw	r3,4(r16)
10101894:	81000317 	ldw	r4,12(r16)
10101898:	00bfff04 	movi	r2,-4
1010189c:	1884703a 	and	r2,r3,r2
101018a0:	81400217 	ldw	r5,8(r16)
101018a4:	8085883a 	add	r2,r16,r2
101018a8:	10c00117 	ldw	r3,4(r2)
101018ac:	29000315 	stw	r4,12(r5)
101018b0:	21400215 	stw	r5,8(r4)
101018b4:	18c00054 	ori	r3,r3,1
101018b8:	10c00115 	stw	r3,4(r2)
101018bc:	9009883a 	mov	r4,r18
101018c0:	0103e3c0 	call	10103e3c <__malloc_unlock>
101018c4:	80800204 	addi	r2,r16,8
101018c8:	dfc00a17 	ldw	ra,40(sp)
101018cc:	df000917 	ldw	fp,36(sp)
101018d0:	ddc00817 	ldw	r23,32(sp)
101018d4:	dd800717 	ldw	r22,28(sp)
101018d8:	dd400617 	ldw	r21,24(sp)
101018dc:	dd000517 	ldw	r20,20(sp)
101018e0:	dcc00417 	ldw	r19,16(sp)
101018e4:	dc800317 	ldw	r18,12(sp)
101018e8:	dc400217 	ldw	r17,8(sp)
101018ec:	dc000117 	ldw	r16,4(sp)
101018f0:	dec00b04 	addi	sp,sp,44
101018f4:	f800283a 	ret
101018f8:	00800304 	movi	r2,12
101018fc:	90800015 	stw	r2,0(r18)
10101900:	0005883a 	mov	r2,zero
10101904:	003ff006 	br	101018c8 <__alt_data_end+0xfffe18c8>
10101908:	01002004 	movi	r4,128
1010190c:	02001004 	movi	r8,64
10101910:	01c00fc4 	movi	r7,63
10101914:	003f6106 	br	1010169c <__alt_data_end+0xfffe169c>
10101918:	4009883a 	mov	r4,r8
1010191c:	003f7506 	br	101016f4 <__alt_data_end+0xfffe16f4>
10101920:	81000317 	ldw	r4,12(r16)
10101924:	003fde06 	br	101018a0 <__alt_data_end+0xfffe18a0>
10101928:	81c5883a 	add	r2,r16,r7
1010192c:	11400117 	ldw	r5,4(r2)
10101930:	9009883a 	mov	r4,r18
10101934:	29400054 	ori	r5,r5,1
10101938:	11400115 	stw	r5,4(r2)
1010193c:	0103e3c0 	call	10103e3c <__malloc_unlock>
10101940:	80800204 	addi	r2,r16,8
10101944:	003fe006 	br	101018c8 <__alt_data_end+0xfffe18c8>
10101948:	9c000217 	ldw	r16,8(r19)
1010194c:	00bfff04 	movi	r2,-4
10101950:	85800117 	ldw	r22,4(r16)
10101954:	b0ac703a 	and	r22,r22,r2
10101958:	b4400336 	bltu	r22,r17,10101968 <_malloc_r+0x344>
1010195c:	b445c83a 	sub	r2,r22,r17
10101960:	00c003c4 	movi	r3,15
10101964:	18805d16 	blt	r3,r2,10101adc <_malloc_r+0x4b8>
10101968:	05c40434 	movhi	r23,4112
1010196c:	00840474 	movhi	r2,4113
10101970:	10a69704 	addi	r2,r2,-26020
10101974:	bddfc004 	addi	r23,r23,32512
10101978:	15400017 	ldw	r21,0(r2)
1010197c:	b8c00017 	ldw	r3,0(r23)
10101980:	00bfffc4 	movi	r2,-1
10101984:	858d883a 	add	r6,r16,r22
10101988:	8d6b883a 	add	r21,r17,r21
1010198c:	1880ea26 	beq	r3,r2,10101d38 <_malloc_r+0x714>
10101990:	ad4403c4 	addi	r21,r21,4111
10101994:	00bc0004 	movi	r2,-4096
10101998:	a8aa703a 	and	r21,r21,r2
1010199c:	a80b883a 	mov	r5,r21
101019a0:	9009883a 	mov	r4,r18
101019a4:	d9800015 	stw	r6,0(sp)
101019a8:	01028440 	call	10102844 <_sbrk_r>
101019ac:	1029883a 	mov	r20,r2
101019b0:	00bfffc4 	movi	r2,-1
101019b4:	d9800017 	ldw	r6,0(sp)
101019b8:	a080e826 	beq	r20,r2,10101d5c <_malloc_r+0x738>
101019bc:	a180a636 	bltu	r20,r6,10101c58 <_malloc_r+0x634>
101019c0:	07040474 	movhi	fp,4113
101019c4:	e726a004 	addi	fp,fp,-25984
101019c8:	e0800017 	ldw	r2,0(fp)
101019cc:	a887883a 	add	r3,r21,r2
101019d0:	e0c00015 	stw	r3,0(fp)
101019d4:	3500e626 	beq	r6,r20,10101d70 <_malloc_r+0x74c>
101019d8:	b9000017 	ldw	r4,0(r23)
101019dc:	00bfffc4 	movi	r2,-1
101019e0:	2080ee26 	beq	r4,r2,10101d9c <_malloc_r+0x778>
101019e4:	a185c83a 	sub	r2,r20,r6
101019e8:	10c5883a 	add	r2,r2,r3
101019ec:	e0800015 	stw	r2,0(fp)
101019f0:	a0c001cc 	andi	r3,r20,7
101019f4:	1800bc26 	beq	r3,zero,10101ce8 <_malloc_r+0x6c4>
101019f8:	a0e9c83a 	sub	r20,r20,r3
101019fc:	00840204 	movi	r2,4104
10101a00:	a5000204 	addi	r20,r20,8
10101a04:	10c7c83a 	sub	r3,r2,r3
10101a08:	a545883a 	add	r2,r20,r21
10101a0c:	1083ffcc 	andi	r2,r2,4095
10101a10:	18abc83a 	sub	r21,r3,r2
10101a14:	a80b883a 	mov	r5,r21
10101a18:	9009883a 	mov	r4,r18
10101a1c:	01028440 	call	10102844 <_sbrk_r>
10101a20:	00ffffc4 	movi	r3,-1
10101a24:	10c0e126 	beq	r2,r3,10101dac <_malloc_r+0x788>
10101a28:	1505c83a 	sub	r2,r2,r20
10101a2c:	1545883a 	add	r2,r2,r21
10101a30:	10800054 	ori	r2,r2,1
10101a34:	e0c00017 	ldw	r3,0(fp)
10101a38:	9d000215 	stw	r20,8(r19)
10101a3c:	a0800115 	stw	r2,4(r20)
10101a40:	a8c7883a 	add	r3,r21,r3
10101a44:	e0c00015 	stw	r3,0(fp)
10101a48:	84c00e26 	beq	r16,r19,10101a84 <_malloc_r+0x460>
10101a4c:	018003c4 	movi	r6,15
10101a50:	3580a72e 	bgeu	r6,r22,10101cf0 <_malloc_r+0x6cc>
10101a54:	81400117 	ldw	r5,4(r16)
10101a58:	013ffe04 	movi	r4,-8
10101a5c:	b0bffd04 	addi	r2,r22,-12
10101a60:	1104703a 	and	r2,r2,r4
10101a64:	2900004c 	andi	r4,r5,1
10101a68:	2088b03a 	or	r4,r4,r2
10101a6c:	81000115 	stw	r4,4(r16)
10101a70:	01400144 	movi	r5,5
10101a74:	8089883a 	add	r4,r16,r2
10101a78:	21400115 	stw	r5,4(r4)
10101a7c:	21400215 	stw	r5,8(r4)
10101a80:	3080cd36 	bltu	r6,r2,10101db8 <_malloc_r+0x794>
10101a84:	00840474 	movhi	r2,4113
10101a88:	10a69604 	addi	r2,r2,-26024
10101a8c:	11000017 	ldw	r4,0(r2)
10101a90:	20c0012e 	bgeu	r4,r3,10101a98 <_malloc_r+0x474>
10101a94:	10c00015 	stw	r3,0(r2)
10101a98:	00840474 	movhi	r2,4113
10101a9c:	10a69504 	addi	r2,r2,-26028
10101aa0:	11000017 	ldw	r4,0(r2)
10101aa4:	9c000217 	ldw	r16,8(r19)
10101aa8:	20c0012e 	bgeu	r4,r3,10101ab0 <_malloc_r+0x48c>
10101aac:	10c00015 	stw	r3,0(r2)
10101ab0:	80c00117 	ldw	r3,4(r16)
10101ab4:	00bfff04 	movi	r2,-4
10101ab8:	1886703a 	and	r3,r3,r2
10101abc:	1c45c83a 	sub	r2,r3,r17
10101ac0:	1c400236 	bltu	r3,r17,10101acc <_malloc_r+0x4a8>
10101ac4:	00c003c4 	movi	r3,15
10101ac8:	18800416 	blt	r3,r2,10101adc <_malloc_r+0x4b8>
10101acc:	9009883a 	mov	r4,r18
10101ad0:	0103e3c0 	call	10103e3c <__malloc_unlock>
10101ad4:	0005883a 	mov	r2,zero
10101ad8:	003f7b06 	br	101018c8 <__alt_data_end+0xfffe18c8>
10101adc:	88c00054 	ori	r3,r17,1
10101ae0:	80c00115 	stw	r3,4(r16)
10101ae4:	8463883a 	add	r17,r16,r17
10101ae8:	10800054 	ori	r2,r2,1
10101aec:	9c400215 	stw	r17,8(r19)
10101af0:	88800115 	stw	r2,4(r17)
10101af4:	9009883a 	mov	r4,r18
10101af8:	0103e3c0 	call	10103e3c <__malloc_unlock>
10101afc:	80800204 	addi	r2,r16,8
10101b00:	003f7106 	br	101018c8 <__alt_data_end+0xfffe18c8>
10101b04:	00c00504 	movi	r3,20
10101b08:	18804a2e 	bgeu	r3,r2,10101c34 <_malloc_r+0x610>
10101b0c:	00c01504 	movi	r3,84
10101b10:	18806e36 	bltu	r3,r2,10101ccc <_malloc_r+0x6a8>
10101b14:	8804d33a 	srli	r2,r17,12
10101b18:	12001bc4 	addi	r8,r2,111
10101b1c:	11c01b84 	addi	r7,r2,110
10101b20:	4209883a 	add	r4,r8,r8
10101b24:	003edd06 	br	1010169c <__alt_data_end+0xfffe169c>
10101b28:	3804d27a 	srli	r2,r7,9
10101b2c:	00c00104 	movi	r3,4
10101b30:	1880442e 	bgeu	r3,r2,10101c44 <_malloc_r+0x620>
10101b34:	00c00504 	movi	r3,20
10101b38:	18808136 	bltu	r3,r2,10101d40 <_malloc_r+0x71c>
10101b3c:	11401704 	addi	r5,r2,92
10101b40:	10c016c4 	addi	r3,r2,91
10101b44:	294b883a 	add	r5,r5,r5
10101b48:	294b883a 	add	r5,r5,r5
10101b4c:	294b883a 	add	r5,r5,r5
10101b50:	994b883a 	add	r5,r19,r5
10101b54:	28800017 	ldw	r2,0(r5)
10101b58:	01840434 	movhi	r6,4112
10101b5c:	297ffe04 	addi	r5,r5,-8
10101b60:	319a3004 	addi	r6,r6,26816
10101b64:	28806526 	beq	r5,r2,10101cfc <_malloc_r+0x6d8>
10101b68:	01bfff04 	movi	r6,-4
10101b6c:	10c00117 	ldw	r3,4(r2)
10101b70:	1986703a 	and	r3,r3,r6
10101b74:	38c0022e 	bgeu	r7,r3,10101b80 <_malloc_r+0x55c>
10101b78:	10800217 	ldw	r2,8(r2)
10101b7c:	28bffb1e 	bne	r5,r2,10101b6c <__alt_data_end+0xfffe1b6c>
10101b80:	11400317 	ldw	r5,12(r2)
10101b84:	98c00117 	ldw	r3,4(r19)
10101b88:	81400315 	stw	r5,12(r16)
10101b8c:	80800215 	stw	r2,8(r16)
10101b90:	2c000215 	stw	r16,8(r5)
10101b94:	14000315 	stw	r16,12(r2)
10101b98:	003ef806 	br	1010177c <__alt_data_end+0xfffe177c>
10101b9c:	88c00054 	ori	r3,r17,1
10101ba0:	80c00115 	stw	r3,4(r16)
10101ba4:	8463883a 	add	r17,r16,r17
10101ba8:	34400515 	stw	r17,20(r6)
10101bac:	34400415 	stw	r17,16(r6)
10101bb0:	10c00054 	ori	r3,r2,1
10101bb4:	8a000315 	stw	r8,12(r17)
10101bb8:	8a000215 	stw	r8,8(r17)
10101bbc:	88c00115 	stw	r3,4(r17)
10101bc0:	88a3883a 	add	r17,r17,r2
10101bc4:	88800015 	stw	r2,0(r17)
10101bc8:	9009883a 	mov	r4,r18
10101bcc:	0103e3c0 	call	10103e3c <__malloc_unlock>
10101bd0:	80800204 	addi	r2,r16,8
10101bd4:	003f3c06 	br	101018c8 <__alt_data_end+0xfffe18c8>
10101bd8:	30c00117 	ldw	r3,4(r6)
10101bdc:	003ee706 	br	1010177c <__alt_data_end+0xfffe177c>
10101be0:	5ac00044 	addi	r11,r11,1
10101be4:	588000cc 	andi	r2,r11,3
10101be8:	31800204 	addi	r6,r6,8
10101bec:	103efd1e 	bne	r2,zero,101017e4 <__alt_data_end+0xfffe17e4>
10101bf0:	00002406 	br	10101c84 <_malloc_r+0x660>
10101bf4:	14000317 	ldw	r16,12(r2)
10101bf8:	143f251e 	bne	r2,r16,10101890 <__alt_data_end+0xfffe1890>
10101bfc:	21000084 	addi	r4,r4,2
10101c00:	003ebc06 	br	101016f4 <__alt_data_end+0xfffe16f4>
10101c04:	8085883a 	add	r2,r16,r2
10101c08:	10c00117 	ldw	r3,4(r2)
10101c0c:	81000317 	ldw	r4,12(r16)
10101c10:	81400217 	ldw	r5,8(r16)
10101c14:	18c00054 	ori	r3,r3,1
10101c18:	10c00115 	stw	r3,4(r2)
10101c1c:	29000315 	stw	r4,12(r5)
10101c20:	21400215 	stw	r5,8(r4)
10101c24:	9009883a 	mov	r4,r18
10101c28:	0103e3c0 	call	10103e3c <__malloc_unlock>
10101c2c:	80800204 	addi	r2,r16,8
10101c30:	003f2506 	br	101018c8 <__alt_data_end+0xfffe18c8>
10101c34:	12001704 	addi	r8,r2,92
10101c38:	11c016c4 	addi	r7,r2,91
10101c3c:	4209883a 	add	r4,r8,r8
10101c40:	003e9606 	br	1010169c <__alt_data_end+0xfffe169c>
10101c44:	3804d1ba 	srli	r2,r7,6
10101c48:	11400e44 	addi	r5,r2,57
10101c4c:	10c00e04 	addi	r3,r2,56
10101c50:	294b883a 	add	r5,r5,r5
10101c54:	003fbc06 	br	10101b48 <__alt_data_end+0xfffe1b48>
10101c58:	84ff5926 	beq	r16,r19,101019c0 <__alt_data_end+0xfffe19c0>
10101c5c:	00840434 	movhi	r2,4112
10101c60:	109a3004 	addi	r2,r2,26816
10101c64:	14000217 	ldw	r16,8(r2)
10101c68:	00bfff04 	movi	r2,-4
10101c6c:	80c00117 	ldw	r3,4(r16)
10101c70:	1886703a 	and	r3,r3,r2
10101c74:	003f9106 	br	10101abc <__alt_data_end+0xfffe1abc>
10101c78:	60800217 	ldw	r2,8(r12)
10101c7c:	213fffc4 	addi	r4,r4,-1
10101c80:	1300651e 	bne	r2,r12,10101e18 <_malloc_r+0x7f4>
10101c84:	208000cc 	andi	r2,r4,3
10101c88:	633ffe04 	addi	r12,r12,-8
10101c8c:	103ffa1e 	bne	r2,zero,10101c78 <__alt_data_end+0xfffe1c78>
10101c90:	98800117 	ldw	r2,4(r19)
10101c94:	0146303a 	nor	r3,zero,r5
10101c98:	1884703a 	and	r2,r3,r2
10101c9c:	98800115 	stw	r2,4(r19)
10101ca0:	294b883a 	add	r5,r5,r5
10101ca4:	117f2836 	bltu	r2,r5,10101948 <__alt_data_end+0xfffe1948>
10101ca8:	283f2726 	beq	r5,zero,10101948 <__alt_data_end+0xfffe1948>
10101cac:	2886703a 	and	r3,r5,r2
10101cb0:	5809883a 	mov	r4,r11
10101cb4:	183ec31e 	bne	r3,zero,101017c4 <__alt_data_end+0xfffe17c4>
10101cb8:	294b883a 	add	r5,r5,r5
10101cbc:	2886703a 	and	r3,r5,r2
10101cc0:	21000104 	addi	r4,r4,4
10101cc4:	183ffc26 	beq	r3,zero,10101cb8 <__alt_data_end+0xfffe1cb8>
10101cc8:	003ebe06 	br	101017c4 <__alt_data_end+0xfffe17c4>
10101ccc:	00c05504 	movi	r3,340
10101cd0:	18801236 	bltu	r3,r2,10101d1c <_malloc_r+0x6f8>
10101cd4:	8804d3fa 	srli	r2,r17,15
10101cd8:	12001e04 	addi	r8,r2,120
10101cdc:	11c01dc4 	addi	r7,r2,119
10101ce0:	4209883a 	add	r4,r8,r8
10101ce4:	003e6d06 	br	1010169c <__alt_data_end+0xfffe169c>
10101ce8:	00c40004 	movi	r3,4096
10101cec:	003f4606 	br	10101a08 <__alt_data_end+0xfffe1a08>
10101cf0:	00800044 	movi	r2,1
10101cf4:	a0800115 	stw	r2,4(r20)
10101cf8:	003f7406 	br	10101acc <__alt_data_end+0xfffe1acc>
10101cfc:	1805d0ba 	srai	r2,r3,2
10101d00:	01c00044 	movi	r7,1
10101d04:	30c00117 	ldw	r3,4(r6)
10101d08:	388e983a 	sll	r7,r7,r2
10101d0c:	2805883a 	mov	r2,r5
10101d10:	38c6b03a 	or	r3,r7,r3
10101d14:	30c00115 	stw	r3,4(r6)
10101d18:	003f9b06 	br	10101b88 <__alt_data_end+0xfffe1b88>
10101d1c:	00c15504 	movi	r3,1364
10101d20:	18801a36 	bltu	r3,r2,10101d8c <_malloc_r+0x768>
10101d24:	8804d4ba 	srli	r2,r17,18
10101d28:	12001f44 	addi	r8,r2,125
10101d2c:	11c01f04 	addi	r7,r2,124
10101d30:	4209883a 	add	r4,r8,r8
10101d34:	003e5906 	br	1010169c <__alt_data_end+0xfffe169c>
10101d38:	ad400404 	addi	r21,r21,16
10101d3c:	003f1706 	br	1010199c <__alt_data_end+0xfffe199c>
10101d40:	00c01504 	movi	r3,84
10101d44:	18802336 	bltu	r3,r2,10101dd4 <_malloc_r+0x7b0>
10101d48:	3804d33a 	srli	r2,r7,12
10101d4c:	11401bc4 	addi	r5,r2,111
10101d50:	10c01b84 	addi	r3,r2,110
10101d54:	294b883a 	add	r5,r5,r5
10101d58:	003f7b06 	br	10101b48 <__alt_data_end+0xfffe1b48>
10101d5c:	9c000217 	ldw	r16,8(r19)
10101d60:	00bfff04 	movi	r2,-4
10101d64:	80c00117 	ldw	r3,4(r16)
10101d68:	1886703a 	and	r3,r3,r2
10101d6c:	003f5306 	br	10101abc <__alt_data_end+0xfffe1abc>
10101d70:	3083ffcc 	andi	r2,r6,4095
10101d74:	103f181e 	bne	r2,zero,101019d8 <__alt_data_end+0xfffe19d8>
10101d78:	99000217 	ldw	r4,8(r19)
10101d7c:	b545883a 	add	r2,r22,r21
10101d80:	10800054 	ori	r2,r2,1
10101d84:	20800115 	stw	r2,4(r4)
10101d88:	003f3e06 	br	10101a84 <__alt_data_end+0xfffe1a84>
10101d8c:	01003f84 	movi	r4,254
10101d90:	02001fc4 	movi	r8,127
10101d94:	01c01f84 	movi	r7,126
10101d98:	003e4006 	br	1010169c <__alt_data_end+0xfffe169c>
10101d9c:	00840434 	movhi	r2,4112
10101da0:	109fc004 	addi	r2,r2,32512
10101da4:	15000015 	stw	r20,0(r2)
10101da8:	003f1106 	br	101019f0 <__alt_data_end+0xfffe19f0>
10101dac:	00800044 	movi	r2,1
10101db0:	002b883a 	mov	r21,zero
10101db4:	003f1f06 	br	10101a34 <__alt_data_end+0xfffe1a34>
10101db8:	81400204 	addi	r5,r16,8
10101dbc:	9009883a 	mov	r4,r18
10101dc0:	01030ac0 	call	101030ac <_free_r>
10101dc4:	00840474 	movhi	r2,4113
10101dc8:	10a6a004 	addi	r2,r2,-25984
10101dcc:	10c00017 	ldw	r3,0(r2)
10101dd0:	003f2c06 	br	10101a84 <__alt_data_end+0xfffe1a84>
10101dd4:	00c05504 	movi	r3,340
10101dd8:	18800536 	bltu	r3,r2,10101df0 <_malloc_r+0x7cc>
10101ddc:	3804d3fa 	srli	r2,r7,15
10101de0:	11401e04 	addi	r5,r2,120
10101de4:	10c01dc4 	addi	r3,r2,119
10101de8:	294b883a 	add	r5,r5,r5
10101dec:	003f5606 	br	10101b48 <__alt_data_end+0xfffe1b48>
10101df0:	00c15504 	movi	r3,1364
10101df4:	18800536 	bltu	r3,r2,10101e0c <_malloc_r+0x7e8>
10101df8:	3804d4ba 	srli	r2,r7,18
10101dfc:	11401f44 	addi	r5,r2,125
10101e00:	10c01f04 	addi	r3,r2,124
10101e04:	294b883a 	add	r5,r5,r5
10101e08:	003f4f06 	br	10101b48 <__alt_data_end+0xfffe1b48>
10101e0c:	01403f84 	movi	r5,254
10101e10:	00c01f84 	movi	r3,126
10101e14:	003f4c06 	br	10101b48 <__alt_data_end+0xfffe1b48>
10101e18:	98800117 	ldw	r2,4(r19)
10101e1c:	003fa006 	br	10101ca0 <__alt_data_end+0xfffe1ca0>
10101e20:	8808d0fa 	srli	r4,r17,3
10101e24:	20800044 	addi	r2,r4,1
10101e28:	1085883a 	add	r2,r2,r2
10101e2c:	003e9006 	br	10101870 <__alt_data_end+0xfffe1870>

10101e30 <memchr>:
10101e30:	208000cc 	andi	r2,r4,3
10101e34:	280f883a 	mov	r7,r5
10101e38:	10003426 	beq	r2,zero,10101f0c <memchr+0xdc>
10101e3c:	30bfffc4 	addi	r2,r6,-1
10101e40:	30001a26 	beq	r6,zero,10101eac <memchr+0x7c>
10101e44:	20c00003 	ldbu	r3,0(r4)
10101e48:	29803fcc 	andi	r6,r5,255
10101e4c:	30c0051e 	bne	r6,r3,10101e64 <memchr+0x34>
10101e50:	00001806 	br	10101eb4 <memchr+0x84>
10101e54:	10001526 	beq	r2,zero,10101eac <memchr+0x7c>
10101e58:	20c00003 	ldbu	r3,0(r4)
10101e5c:	10bfffc4 	addi	r2,r2,-1
10101e60:	30c01426 	beq	r6,r3,10101eb4 <memchr+0x84>
10101e64:	21000044 	addi	r4,r4,1
10101e68:	20c000cc 	andi	r3,r4,3
10101e6c:	183ff91e 	bne	r3,zero,10101e54 <__alt_data_end+0xfffe1e54>
10101e70:	020000c4 	movi	r8,3
10101e74:	40801136 	bltu	r8,r2,10101ebc <memchr+0x8c>
10101e78:	10000c26 	beq	r2,zero,10101eac <memchr+0x7c>
10101e7c:	20c00003 	ldbu	r3,0(r4)
10101e80:	29403fcc 	andi	r5,r5,255
10101e84:	28c00b26 	beq	r5,r3,10101eb4 <memchr+0x84>
10101e88:	20c00044 	addi	r3,r4,1
10101e8c:	39803fcc 	andi	r6,r7,255
10101e90:	2089883a 	add	r4,r4,r2
10101e94:	00000306 	br	10101ea4 <memchr+0x74>
10101e98:	18c00044 	addi	r3,r3,1
10101e9c:	197fffc3 	ldbu	r5,-1(r3)
10101ea0:	31400526 	beq	r6,r5,10101eb8 <memchr+0x88>
10101ea4:	1805883a 	mov	r2,r3
10101ea8:	20fffb1e 	bne	r4,r3,10101e98 <__alt_data_end+0xfffe1e98>
10101eac:	0005883a 	mov	r2,zero
10101eb0:	f800283a 	ret
10101eb4:	2005883a 	mov	r2,r4
10101eb8:	f800283a 	ret
10101ebc:	28c03fcc 	andi	r3,r5,255
10101ec0:	1812923a 	slli	r9,r3,8
10101ec4:	02ffbff4 	movhi	r11,65279
10101ec8:	02a02074 	movhi	r10,32897
10101ecc:	48d2b03a 	or	r9,r9,r3
10101ed0:	4806943a 	slli	r3,r9,16
10101ed4:	5affbfc4 	addi	r11,r11,-257
10101ed8:	52a02004 	addi	r10,r10,-32640
10101edc:	48d2b03a 	or	r9,r9,r3
10101ee0:	20c00017 	ldw	r3,0(r4)
10101ee4:	48c6f03a 	xor	r3,r9,r3
10101ee8:	1acd883a 	add	r6,r3,r11
10101eec:	00c6303a 	nor	r3,zero,r3
10101ef0:	30c6703a 	and	r3,r6,r3
10101ef4:	1a86703a 	and	r3,r3,r10
10101ef8:	183fe01e 	bne	r3,zero,10101e7c <__alt_data_end+0xfffe1e7c>
10101efc:	10bfff04 	addi	r2,r2,-4
10101f00:	21000104 	addi	r4,r4,4
10101f04:	40bff636 	bltu	r8,r2,10101ee0 <__alt_data_end+0xfffe1ee0>
10101f08:	003fdb06 	br	10101e78 <__alt_data_end+0xfffe1e78>
10101f0c:	3005883a 	mov	r2,r6
10101f10:	003fd706 	br	10101e70 <__alt_data_end+0xfffe1e70>

10101f14 <memcpy>:
10101f14:	defffd04 	addi	sp,sp,-12
10101f18:	dfc00215 	stw	ra,8(sp)
10101f1c:	dc400115 	stw	r17,4(sp)
10101f20:	dc000015 	stw	r16,0(sp)
10101f24:	00c003c4 	movi	r3,15
10101f28:	2005883a 	mov	r2,r4
10101f2c:	1980452e 	bgeu	r3,r6,10102044 <memcpy+0x130>
10101f30:	2906b03a 	or	r3,r5,r4
10101f34:	18c000cc 	andi	r3,r3,3
10101f38:	1800441e 	bne	r3,zero,1010204c <memcpy+0x138>
10101f3c:	347ffc04 	addi	r17,r6,-16
10101f40:	8822d13a 	srli	r17,r17,4
10101f44:	28c00104 	addi	r3,r5,4
10101f48:	23400104 	addi	r13,r4,4
10101f4c:	8820913a 	slli	r16,r17,4
10101f50:	2b000204 	addi	r12,r5,8
10101f54:	22c00204 	addi	r11,r4,8
10101f58:	84000504 	addi	r16,r16,20
10101f5c:	2a800304 	addi	r10,r5,12
10101f60:	22400304 	addi	r9,r4,12
10101f64:	2c21883a 	add	r16,r5,r16
10101f68:	2811883a 	mov	r8,r5
10101f6c:	200f883a 	mov	r7,r4
10101f70:	41000017 	ldw	r4,0(r8)
10101f74:	1fc00017 	ldw	ra,0(r3)
10101f78:	63c00017 	ldw	r15,0(r12)
10101f7c:	39000015 	stw	r4,0(r7)
10101f80:	53800017 	ldw	r14,0(r10)
10101f84:	6fc00015 	stw	ra,0(r13)
10101f88:	5bc00015 	stw	r15,0(r11)
10101f8c:	4b800015 	stw	r14,0(r9)
10101f90:	18c00404 	addi	r3,r3,16
10101f94:	39c00404 	addi	r7,r7,16
10101f98:	42000404 	addi	r8,r8,16
10101f9c:	6b400404 	addi	r13,r13,16
10101fa0:	63000404 	addi	r12,r12,16
10101fa4:	5ac00404 	addi	r11,r11,16
10101fa8:	52800404 	addi	r10,r10,16
10101fac:	4a400404 	addi	r9,r9,16
10101fb0:	1c3fef1e 	bne	r3,r16,10101f70 <__alt_data_end+0xfffe1f70>
10101fb4:	89c00044 	addi	r7,r17,1
10101fb8:	380e913a 	slli	r7,r7,4
10101fbc:	310003cc 	andi	r4,r6,15
10101fc0:	02c000c4 	movi	r11,3
10101fc4:	11c7883a 	add	r3,r2,r7
10101fc8:	29cb883a 	add	r5,r5,r7
10101fcc:	5900212e 	bgeu	r11,r4,10102054 <memcpy+0x140>
10101fd0:	1813883a 	mov	r9,r3
10101fd4:	2811883a 	mov	r8,r5
10101fd8:	200f883a 	mov	r7,r4
10101fdc:	42800017 	ldw	r10,0(r8)
10101fe0:	4a400104 	addi	r9,r9,4
10101fe4:	39ffff04 	addi	r7,r7,-4
10101fe8:	4abfff15 	stw	r10,-4(r9)
10101fec:	42000104 	addi	r8,r8,4
10101ff0:	59fffa36 	bltu	r11,r7,10101fdc <__alt_data_end+0xfffe1fdc>
10101ff4:	213fff04 	addi	r4,r4,-4
10101ff8:	2008d0ba 	srli	r4,r4,2
10101ffc:	318000cc 	andi	r6,r6,3
10102000:	21000044 	addi	r4,r4,1
10102004:	2109883a 	add	r4,r4,r4
10102008:	2109883a 	add	r4,r4,r4
1010200c:	1907883a 	add	r3,r3,r4
10102010:	290b883a 	add	r5,r5,r4
10102014:	30000626 	beq	r6,zero,10102030 <memcpy+0x11c>
10102018:	198d883a 	add	r6,r3,r6
1010201c:	29c00003 	ldbu	r7,0(r5)
10102020:	18c00044 	addi	r3,r3,1
10102024:	29400044 	addi	r5,r5,1
10102028:	19ffffc5 	stb	r7,-1(r3)
1010202c:	19bffb1e 	bne	r3,r6,1010201c <__alt_data_end+0xfffe201c>
10102030:	dfc00217 	ldw	ra,8(sp)
10102034:	dc400117 	ldw	r17,4(sp)
10102038:	dc000017 	ldw	r16,0(sp)
1010203c:	dec00304 	addi	sp,sp,12
10102040:	f800283a 	ret
10102044:	2007883a 	mov	r3,r4
10102048:	003ff206 	br	10102014 <__alt_data_end+0xfffe2014>
1010204c:	2007883a 	mov	r3,r4
10102050:	003ff106 	br	10102018 <__alt_data_end+0xfffe2018>
10102054:	200d883a 	mov	r6,r4
10102058:	003fee06 	br	10102014 <__alt_data_end+0xfffe2014>

1010205c <memmove>:
1010205c:	2005883a 	mov	r2,r4
10102060:	29000b2e 	bgeu	r5,r4,10102090 <memmove+0x34>
10102064:	298f883a 	add	r7,r5,r6
10102068:	21c0092e 	bgeu	r4,r7,10102090 <memmove+0x34>
1010206c:	2187883a 	add	r3,r4,r6
10102070:	198bc83a 	sub	r5,r3,r6
10102074:	30004826 	beq	r6,zero,10102198 <memmove+0x13c>
10102078:	39ffffc4 	addi	r7,r7,-1
1010207c:	39000003 	ldbu	r4,0(r7)
10102080:	18ffffc4 	addi	r3,r3,-1
10102084:	19000005 	stb	r4,0(r3)
10102088:	28fffb1e 	bne	r5,r3,10102078 <__alt_data_end+0xfffe2078>
1010208c:	f800283a 	ret
10102090:	00c003c4 	movi	r3,15
10102094:	1980412e 	bgeu	r3,r6,1010219c <memmove+0x140>
10102098:	2886b03a 	or	r3,r5,r2
1010209c:	18c000cc 	andi	r3,r3,3
101020a0:	1800401e 	bne	r3,zero,101021a4 <memmove+0x148>
101020a4:	33fffc04 	addi	r15,r6,-16
101020a8:	781ed13a 	srli	r15,r15,4
101020ac:	28c00104 	addi	r3,r5,4
101020b0:	13400104 	addi	r13,r2,4
101020b4:	781c913a 	slli	r14,r15,4
101020b8:	2b000204 	addi	r12,r5,8
101020bc:	12c00204 	addi	r11,r2,8
101020c0:	73800504 	addi	r14,r14,20
101020c4:	2a800304 	addi	r10,r5,12
101020c8:	12400304 	addi	r9,r2,12
101020cc:	2b9d883a 	add	r14,r5,r14
101020d0:	2811883a 	mov	r8,r5
101020d4:	100f883a 	mov	r7,r2
101020d8:	41000017 	ldw	r4,0(r8)
101020dc:	39c00404 	addi	r7,r7,16
101020e0:	18c00404 	addi	r3,r3,16
101020e4:	393ffc15 	stw	r4,-16(r7)
101020e8:	193ffc17 	ldw	r4,-16(r3)
101020ec:	6b400404 	addi	r13,r13,16
101020f0:	5ac00404 	addi	r11,r11,16
101020f4:	693ffc15 	stw	r4,-16(r13)
101020f8:	61000017 	ldw	r4,0(r12)
101020fc:	4a400404 	addi	r9,r9,16
10102100:	42000404 	addi	r8,r8,16
10102104:	593ffc15 	stw	r4,-16(r11)
10102108:	51000017 	ldw	r4,0(r10)
1010210c:	63000404 	addi	r12,r12,16
10102110:	52800404 	addi	r10,r10,16
10102114:	493ffc15 	stw	r4,-16(r9)
10102118:	1bbfef1e 	bne	r3,r14,101020d8 <__alt_data_end+0xfffe20d8>
1010211c:	79000044 	addi	r4,r15,1
10102120:	2008913a 	slli	r4,r4,4
10102124:	328003cc 	andi	r10,r6,15
10102128:	02c000c4 	movi	r11,3
1010212c:	1107883a 	add	r3,r2,r4
10102130:	290b883a 	add	r5,r5,r4
10102134:	5a801e2e 	bgeu	r11,r10,101021b0 <memmove+0x154>
10102138:	1813883a 	mov	r9,r3
1010213c:	2811883a 	mov	r8,r5
10102140:	500f883a 	mov	r7,r10
10102144:	41000017 	ldw	r4,0(r8)
10102148:	4a400104 	addi	r9,r9,4
1010214c:	39ffff04 	addi	r7,r7,-4
10102150:	493fff15 	stw	r4,-4(r9)
10102154:	42000104 	addi	r8,r8,4
10102158:	59fffa36 	bltu	r11,r7,10102144 <__alt_data_end+0xfffe2144>
1010215c:	513fff04 	addi	r4,r10,-4
10102160:	2008d0ba 	srli	r4,r4,2
10102164:	318000cc 	andi	r6,r6,3
10102168:	21000044 	addi	r4,r4,1
1010216c:	2109883a 	add	r4,r4,r4
10102170:	2109883a 	add	r4,r4,r4
10102174:	1907883a 	add	r3,r3,r4
10102178:	290b883a 	add	r5,r5,r4
1010217c:	30000b26 	beq	r6,zero,101021ac <memmove+0x150>
10102180:	198d883a 	add	r6,r3,r6
10102184:	29c00003 	ldbu	r7,0(r5)
10102188:	18c00044 	addi	r3,r3,1
1010218c:	29400044 	addi	r5,r5,1
10102190:	19ffffc5 	stb	r7,-1(r3)
10102194:	19bffb1e 	bne	r3,r6,10102184 <__alt_data_end+0xfffe2184>
10102198:	f800283a 	ret
1010219c:	1007883a 	mov	r3,r2
101021a0:	003ff606 	br	1010217c <__alt_data_end+0xfffe217c>
101021a4:	1007883a 	mov	r3,r2
101021a8:	003ff506 	br	10102180 <__alt_data_end+0xfffe2180>
101021ac:	f800283a 	ret
101021b0:	500d883a 	mov	r6,r10
101021b4:	003ff106 	br	1010217c <__alt_data_end+0xfffe217c>

101021b8 <memset>:
101021b8:	20c000cc 	andi	r3,r4,3
101021bc:	2005883a 	mov	r2,r4
101021c0:	18004426 	beq	r3,zero,101022d4 <memset+0x11c>
101021c4:	31ffffc4 	addi	r7,r6,-1
101021c8:	30004026 	beq	r6,zero,101022cc <memset+0x114>
101021cc:	2813883a 	mov	r9,r5
101021d0:	200d883a 	mov	r6,r4
101021d4:	2007883a 	mov	r3,r4
101021d8:	00000406 	br	101021ec <memset+0x34>
101021dc:	3a3fffc4 	addi	r8,r7,-1
101021e0:	31800044 	addi	r6,r6,1
101021e4:	38003926 	beq	r7,zero,101022cc <memset+0x114>
101021e8:	400f883a 	mov	r7,r8
101021ec:	18c00044 	addi	r3,r3,1
101021f0:	32400005 	stb	r9,0(r6)
101021f4:	1a0000cc 	andi	r8,r3,3
101021f8:	403ff81e 	bne	r8,zero,101021dc <__alt_data_end+0xfffe21dc>
101021fc:	010000c4 	movi	r4,3
10102200:	21c02d2e 	bgeu	r4,r7,101022b8 <memset+0x100>
10102204:	29003fcc 	andi	r4,r5,255
10102208:	200c923a 	slli	r6,r4,8
1010220c:	3108b03a 	or	r4,r6,r4
10102210:	200c943a 	slli	r6,r4,16
10102214:	218cb03a 	or	r6,r4,r6
10102218:	010003c4 	movi	r4,15
1010221c:	21c0182e 	bgeu	r4,r7,10102280 <memset+0xc8>
10102220:	3b3ffc04 	addi	r12,r7,-16
10102224:	6018d13a 	srli	r12,r12,4
10102228:	1a000104 	addi	r8,r3,4
1010222c:	1ac00204 	addi	r11,r3,8
10102230:	6008913a 	slli	r4,r12,4
10102234:	1a800304 	addi	r10,r3,12
10102238:	1813883a 	mov	r9,r3
1010223c:	21000504 	addi	r4,r4,20
10102240:	1909883a 	add	r4,r3,r4
10102244:	49800015 	stw	r6,0(r9)
10102248:	41800015 	stw	r6,0(r8)
1010224c:	59800015 	stw	r6,0(r11)
10102250:	51800015 	stw	r6,0(r10)
10102254:	42000404 	addi	r8,r8,16
10102258:	4a400404 	addi	r9,r9,16
1010225c:	5ac00404 	addi	r11,r11,16
10102260:	52800404 	addi	r10,r10,16
10102264:	413ff71e 	bne	r8,r4,10102244 <__alt_data_end+0xfffe2244>
10102268:	63000044 	addi	r12,r12,1
1010226c:	6018913a 	slli	r12,r12,4
10102270:	39c003cc 	andi	r7,r7,15
10102274:	010000c4 	movi	r4,3
10102278:	1b07883a 	add	r3,r3,r12
1010227c:	21c00e2e 	bgeu	r4,r7,101022b8 <memset+0x100>
10102280:	1813883a 	mov	r9,r3
10102284:	3811883a 	mov	r8,r7
10102288:	010000c4 	movi	r4,3
1010228c:	49800015 	stw	r6,0(r9)
10102290:	423fff04 	addi	r8,r8,-4
10102294:	4a400104 	addi	r9,r9,4
10102298:	223ffc36 	bltu	r4,r8,1010228c <__alt_data_end+0xfffe228c>
1010229c:	393fff04 	addi	r4,r7,-4
101022a0:	2008d0ba 	srli	r4,r4,2
101022a4:	39c000cc 	andi	r7,r7,3
101022a8:	21000044 	addi	r4,r4,1
101022ac:	2109883a 	add	r4,r4,r4
101022b0:	2109883a 	add	r4,r4,r4
101022b4:	1907883a 	add	r3,r3,r4
101022b8:	38000526 	beq	r7,zero,101022d0 <memset+0x118>
101022bc:	19cf883a 	add	r7,r3,r7
101022c0:	19400005 	stb	r5,0(r3)
101022c4:	18c00044 	addi	r3,r3,1
101022c8:	38fffd1e 	bne	r7,r3,101022c0 <__alt_data_end+0xfffe22c0>
101022cc:	f800283a 	ret
101022d0:	f800283a 	ret
101022d4:	2007883a 	mov	r3,r4
101022d8:	300f883a 	mov	r7,r6
101022dc:	003fc706 	br	101021fc <__alt_data_end+0xfffe21fc>

101022e0 <_realloc_r>:
101022e0:	defff604 	addi	sp,sp,-40
101022e4:	dc800215 	stw	r18,8(sp)
101022e8:	dfc00915 	stw	ra,36(sp)
101022ec:	df000815 	stw	fp,32(sp)
101022f0:	ddc00715 	stw	r23,28(sp)
101022f4:	dd800615 	stw	r22,24(sp)
101022f8:	dd400515 	stw	r21,20(sp)
101022fc:	dd000415 	stw	r20,16(sp)
10102300:	dcc00315 	stw	r19,12(sp)
10102304:	dc400115 	stw	r17,4(sp)
10102308:	dc000015 	stw	r16,0(sp)
1010230c:	3025883a 	mov	r18,r6
10102310:	2800b726 	beq	r5,zero,101025f0 <_realloc_r+0x310>
10102314:	282b883a 	mov	r21,r5
10102318:	2029883a 	mov	r20,r4
1010231c:	0103e180 	call	10103e18 <__malloc_lock>
10102320:	a8bfff17 	ldw	r2,-4(r21)
10102324:	043fff04 	movi	r16,-4
10102328:	90c002c4 	addi	r3,r18,11
1010232c:	01000584 	movi	r4,22
10102330:	acfffe04 	addi	r19,r21,-8
10102334:	1420703a 	and	r16,r2,r16
10102338:	20c0332e 	bgeu	r4,r3,10102408 <_realloc_r+0x128>
1010233c:	047ffe04 	movi	r17,-8
10102340:	1c62703a 	and	r17,r3,r17
10102344:	8807883a 	mov	r3,r17
10102348:	88005816 	blt	r17,zero,101024ac <_realloc_r+0x1cc>
1010234c:	8c805736 	bltu	r17,r18,101024ac <_realloc_r+0x1cc>
10102350:	80c0300e 	bge	r16,r3,10102414 <_realloc_r+0x134>
10102354:	07040434 	movhi	fp,4112
10102358:	e71a3004 	addi	fp,fp,26816
1010235c:	e1c00217 	ldw	r7,8(fp)
10102360:	9c09883a 	add	r4,r19,r16
10102364:	22000117 	ldw	r8,4(r4)
10102368:	21c06326 	beq	r4,r7,101024f8 <_realloc_r+0x218>
1010236c:	017fff84 	movi	r5,-2
10102370:	414a703a 	and	r5,r8,r5
10102374:	214b883a 	add	r5,r4,r5
10102378:	29800117 	ldw	r6,4(r5)
1010237c:	3180004c 	andi	r6,r6,1
10102380:	30003f26 	beq	r6,zero,10102480 <_realloc_r+0x1a0>
10102384:	1080004c 	andi	r2,r2,1
10102388:	10008326 	beq	r2,zero,10102598 <_realloc_r+0x2b8>
1010238c:	900b883a 	mov	r5,r18
10102390:	a009883a 	mov	r4,r20
10102394:	01016240 	call	10101624 <_malloc_r>
10102398:	1025883a 	mov	r18,r2
1010239c:	10011e26 	beq	r2,zero,10102818 <_realloc_r+0x538>
101023a0:	a93fff17 	ldw	r4,-4(r21)
101023a4:	10fffe04 	addi	r3,r2,-8
101023a8:	00bfff84 	movi	r2,-2
101023ac:	2084703a 	and	r2,r4,r2
101023b0:	9885883a 	add	r2,r19,r2
101023b4:	1880ee26 	beq	r3,r2,10102770 <_realloc_r+0x490>
101023b8:	81bfff04 	addi	r6,r16,-4
101023bc:	00800904 	movi	r2,36
101023c0:	1180b836 	bltu	r2,r6,101026a4 <_realloc_r+0x3c4>
101023c4:	00c004c4 	movi	r3,19
101023c8:	19809636 	bltu	r3,r6,10102624 <_realloc_r+0x344>
101023cc:	9005883a 	mov	r2,r18
101023d0:	a807883a 	mov	r3,r21
101023d4:	19000017 	ldw	r4,0(r3)
101023d8:	11000015 	stw	r4,0(r2)
101023dc:	19000117 	ldw	r4,4(r3)
101023e0:	11000115 	stw	r4,4(r2)
101023e4:	18c00217 	ldw	r3,8(r3)
101023e8:	10c00215 	stw	r3,8(r2)
101023ec:	a80b883a 	mov	r5,r21
101023f0:	a009883a 	mov	r4,r20
101023f4:	01030ac0 	call	101030ac <_free_r>
101023f8:	a009883a 	mov	r4,r20
101023fc:	0103e3c0 	call	10103e3c <__malloc_unlock>
10102400:	9005883a 	mov	r2,r18
10102404:	00001206 	br	10102450 <_realloc_r+0x170>
10102408:	00c00404 	movi	r3,16
1010240c:	1823883a 	mov	r17,r3
10102410:	003fce06 	br	1010234c <__alt_data_end+0xfffe234c>
10102414:	a825883a 	mov	r18,r21
10102418:	8445c83a 	sub	r2,r16,r17
1010241c:	00c003c4 	movi	r3,15
10102420:	18802636 	bltu	r3,r2,101024bc <_realloc_r+0x1dc>
10102424:	99800117 	ldw	r6,4(r19)
10102428:	9c07883a 	add	r3,r19,r16
1010242c:	3180004c 	andi	r6,r6,1
10102430:	3420b03a 	or	r16,r6,r16
10102434:	9c000115 	stw	r16,4(r19)
10102438:	18800117 	ldw	r2,4(r3)
1010243c:	10800054 	ori	r2,r2,1
10102440:	18800115 	stw	r2,4(r3)
10102444:	a009883a 	mov	r4,r20
10102448:	0103e3c0 	call	10103e3c <__malloc_unlock>
1010244c:	9005883a 	mov	r2,r18
10102450:	dfc00917 	ldw	ra,36(sp)
10102454:	df000817 	ldw	fp,32(sp)
10102458:	ddc00717 	ldw	r23,28(sp)
1010245c:	dd800617 	ldw	r22,24(sp)
10102460:	dd400517 	ldw	r21,20(sp)
10102464:	dd000417 	ldw	r20,16(sp)
10102468:	dcc00317 	ldw	r19,12(sp)
1010246c:	dc800217 	ldw	r18,8(sp)
10102470:	dc400117 	ldw	r17,4(sp)
10102474:	dc000017 	ldw	r16,0(sp)
10102478:	dec00a04 	addi	sp,sp,40
1010247c:	f800283a 	ret
10102480:	017fff04 	movi	r5,-4
10102484:	414a703a 	and	r5,r8,r5
10102488:	814d883a 	add	r6,r16,r5
1010248c:	30c01f16 	blt	r6,r3,1010250c <_realloc_r+0x22c>
10102490:	20800317 	ldw	r2,12(r4)
10102494:	20c00217 	ldw	r3,8(r4)
10102498:	a825883a 	mov	r18,r21
1010249c:	3021883a 	mov	r16,r6
101024a0:	18800315 	stw	r2,12(r3)
101024a4:	10c00215 	stw	r3,8(r2)
101024a8:	003fdb06 	br	10102418 <__alt_data_end+0xfffe2418>
101024ac:	00800304 	movi	r2,12
101024b0:	a0800015 	stw	r2,0(r20)
101024b4:	0005883a 	mov	r2,zero
101024b8:	003fe506 	br	10102450 <__alt_data_end+0xfffe2450>
101024bc:	98c00117 	ldw	r3,4(r19)
101024c0:	9c4b883a 	add	r5,r19,r17
101024c4:	11000054 	ori	r4,r2,1
101024c8:	18c0004c 	andi	r3,r3,1
101024cc:	1c62b03a 	or	r17,r3,r17
101024d0:	9c400115 	stw	r17,4(r19)
101024d4:	29000115 	stw	r4,4(r5)
101024d8:	2885883a 	add	r2,r5,r2
101024dc:	10c00117 	ldw	r3,4(r2)
101024e0:	29400204 	addi	r5,r5,8
101024e4:	a009883a 	mov	r4,r20
101024e8:	18c00054 	ori	r3,r3,1
101024ec:	10c00115 	stw	r3,4(r2)
101024f0:	01030ac0 	call	101030ac <_free_r>
101024f4:	003fd306 	br	10102444 <__alt_data_end+0xfffe2444>
101024f8:	017fff04 	movi	r5,-4
101024fc:	414a703a 	and	r5,r8,r5
10102500:	89800404 	addi	r6,r17,16
10102504:	8151883a 	add	r8,r16,r5
10102508:	4180590e 	bge	r8,r6,10102670 <_realloc_r+0x390>
1010250c:	1080004c 	andi	r2,r2,1
10102510:	103f9e1e 	bne	r2,zero,1010238c <__alt_data_end+0xfffe238c>
10102514:	adbffe17 	ldw	r22,-8(r21)
10102518:	00bfff04 	movi	r2,-4
1010251c:	9dadc83a 	sub	r22,r19,r22
10102520:	b1800117 	ldw	r6,4(r22)
10102524:	3084703a 	and	r2,r6,r2
10102528:	20002026 	beq	r4,zero,101025ac <_realloc_r+0x2cc>
1010252c:	80af883a 	add	r23,r16,r2
10102530:	b96f883a 	add	r23,r23,r5
10102534:	21c05f26 	beq	r4,r7,101026b4 <_realloc_r+0x3d4>
10102538:	b8c01c16 	blt	r23,r3,101025ac <_realloc_r+0x2cc>
1010253c:	20800317 	ldw	r2,12(r4)
10102540:	20c00217 	ldw	r3,8(r4)
10102544:	81bfff04 	addi	r6,r16,-4
10102548:	01000904 	movi	r4,36
1010254c:	18800315 	stw	r2,12(r3)
10102550:	10c00215 	stw	r3,8(r2)
10102554:	b0c00217 	ldw	r3,8(r22)
10102558:	b0800317 	ldw	r2,12(r22)
1010255c:	b4800204 	addi	r18,r22,8
10102560:	18800315 	stw	r2,12(r3)
10102564:	10c00215 	stw	r3,8(r2)
10102568:	21801b36 	bltu	r4,r6,101025d8 <_realloc_r+0x2f8>
1010256c:	008004c4 	movi	r2,19
10102570:	1180352e 	bgeu	r2,r6,10102648 <_realloc_r+0x368>
10102574:	a8800017 	ldw	r2,0(r21)
10102578:	b0800215 	stw	r2,8(r22)
1010257c:	a8800117 	ldw	r2,4(r21)
10102580:	b0800315 	stw	r2,12(r22)
10102584:	008006c4 	movi	r2,27
10102588:	11807f36 	bltu	r2,r6,10102788 <_realloc_r+0x4a8>
1010258c:	b0800404 	addi	r2,r22,16
10102590:	ad400204 	addi	r21,r21,8
10102594:	00002d06 	br	1010264c <_realloc_r+0x36c>
10102598:	adbffe17 	ldw	r22,-8(r21)
1010259c:	00bfff04 	movi	r2,-4
101025a0:	9dadc83a 	sub	r22,r19,r22
101025a4:	b1000117 	ldw	r4,4(r22)
101025a8:	2084703a 	and	r2,r4,r2
101025ac:	b03f7726 	beq	r22,zero,1010238c <__alt_data_end+0xfffe238c>
101025b0:	80af883a 	add	r23,r16,r2
101025b4:	b8ff7516 	blt	r23,r3,1010238c <__alt_data_end+0xfffe238c>
101025b8:	b0800317 	ldw	r2,12(r22)
101025bc:	b0c00217 	ldw	r3,8(r22)
101025c0:	81bfff04 	addi	r6,r16,-4
101025c4:	01000904 	movi	r4,36
101025c8:	18800315 	stw	r2,12(r3)
101025cc:	10c00215 	stw	r3,8(r2)
101025d0:	b4800204 	addi	r18,r22,8
101025d4:	21bfe52e 	bgeu	r4,r6,1010256c <__alt_data_end+0xfffe256c>
101025d8:	a80b883a 	mov	r5,r21
101025dc:	9009883a 	mov	r4,r18
101025e0:	010205c0 	call	1010205c <memmove>
101025e4:	b821883a 	mov	r16,r23
101025e8:	b027883a 	mov	r19,r22
101025ec:	003f8a06 	br	10102418 <__alt_data_end+0xfffe2418>
101025f0:	300b883a 	mov	r5,r6
101025f4:	dfc00917 	ldw	ra,36(sp)
101025f8:	df000817 	ldw	fp,32(sp)
101025fc:	ddc00717 	ldw	r23,28(sp)
10102600:	dd800617 	ldw	r22,24(sp)
10102604:	dd400517 	ldw	r21,20(sp)
10102608:	dd000417 	ldw	r20,16(sp)
1010260c:	dcc00317 	ldw	r19,12(sp)
10102610:	dc800217 	ldw	r18,8(sp)
10102614:	dc400117 	ldw	r17,4(sp)
10102618:	dc000017 	ldw	r16,0(sp)
1010261c:	dec00a04 	addi	sp,sp,40
10102620:	01016241 	jmpi	10101624 <_malloc_r>
10102624:	a8c00017 	ldw	r3,0(r21)
10102628:	90c00015 	stw	r3,0(r18)
1010262c:	a8c00117 	ldw	r3,4(r21)
10102630:	90c00115 	stw	r3,4(r18)
10102634:	00c006c4 	movi	r3,27
10102638:	19804536 	bltu	r3,r6,10102750 <_realloc_r+0x470>
1010263c:	90800204 	addi	r2,r18,8
10102640:	a8c00204 	addi	r3,r21,8
10102644:	003f6306 	br	101023d4 <__alt_data_end+0xfffe23d4>
10102648:	9005883a 	mov	r2,r18
1010264c:	a8c00017 	ldw	r3,0(r21)
10102650:	b821883a 	mov	r16,r23
10102654:	b027883a 	mov	r19,r22
10102658:	10c00015 	stw	r3,0(r2)
1010265c:	a8c00117 	ldw	r3,4(r21)
10102660:	10c00115 	stw	r3,4(r2)
10102664:	a8c00217 	ldw	r3,8(r21)
10102668:	10c00215 	stw	r3,8(r2)
1010266c:	003f6a06 	br	10102418 <__alt_data_end+0xfffe2418>
10102670:	9c67883a 	add	r19,r19,r17
10102674:	4445c83a 	sub	r2,r8,r17
10102678:	e4c00215 	stw	r19,8(fp)
1010267c:	10800054 	ori	r2,r2,1
10102680:	98800115 	stw	r2,4(r19)
10102684:	a8bfff17 	ldw	r2,-4(r21)
10102688:	a009883a 	mov	r4,r20
1010268c:	1080004c 	andi	r2,r2,1
10102690:	1462b03a 	or	r17,r2,r17
10102694:	ac7fff15 	stw	r17,-4(r21)
10102698:	0103e3c0 	call	10103e3c <__malloc_unlock>
1010269c:	a805883a 	mov	r2,r21
101026a0:	003f6b06 	br	10102450 <__alt_data_end+0xfffe2450>
101026a4:	a80b883a 	mov	r5,r21
101026a8:	9009883a 	mov	r4,r18
101026ac:	010205c0 	call	1010205c <memmove>
101026b0:	003f4e06 	br	101023ec <__alt_data_end+0xfffe23ec>
101026b4:	89000404 	addi	r4,r17,16
101026b8:	b93fbc16 	blt	r23,r4,101025ac <__alt_data_end+0xfffe25ac>
101026bc:	b0800317 	ldw	r2,12(r22)
101026c0:	b0c00217 	ldw	r3,8(r22)
101026c4:	81bfff04 	addi	r6,r16,-4
101026c8:	01000904 	movi	r4,36
101026cc:	18800315 	stw	r2,12(r3)
101026d0:	10c00215 	stw	r3,8(r2)
101026d4:	b4800204 	addi	r18,r22,8
101026d8:	21804336 	bltu	r4,r6,101027e8 <_realloc_r+0x508>
101026dc:	008004c4 	movi	r2,19
101026e0:	11803f2e 	bgeu	r2,r6,101027e0 <_realloc_r+0x500>
101026e4:	a8800017 	ldw	r2,0(r21)
101026e8:	b0800215 	stw	r2,8(r22)
101026ec:	a8800117 	ldw	r2,4(r21)
101026f0:	b0800315 	stw	r2,12(r22)
101026f4:	008006c4 	movi	r2,27
101026f8:	11803f36 	bltu	r2,r6,101027f8 <_realloc_r+0x518>
101026fc:	b0800404 	addi	r2,r22,16
10102700:	ad400204 	addi	r21,r21,8
10102704:	a8c00017 	ldw	r3,0(r21)
10102708:	10c00015 	stw	r3,0(r2)
1010270c:	a8c00117 	ldw	r3,4(r21)
10102710:	10c00115 	stw	r3,4(r2)
10102714:	a8c00217 	ldw	r3,8(r21)
10102718:	10c00215 	stw	r3,8(r2)
1010271c:	b447883a 	add	r3,r22,r17
10102720:	bc45c83a 	sub	r2,r23,r17
10102724:	e0c00215 	stw	r3,8(fp)
10102728:	10800054 	ori	r2,r2,1
1010272c:	18800115 	stw	r2,4(r3)
10102730:	b0800117 	ldw	r2,4(r22)
10102734:	a009883a 	mov	r4,r20
10102738:	1080004c 	andi	r2,r2,1
1010273c:	1462b03a 	or	r17,r2,r17
10102740:	b4400115 	stw	r17,4(r22)
10102744:	0103e3c0 	call	10103e3c <__malloc_unlock>
10102748:	9005883a 	mov	r2,r18
1010274c:	003f4006 	br	10102450 <__alt_data_end+0xfffe2450>
10102750:	a8c00217 	ldw	r3,8(r21)
10102754:	90c00215 	stw	r3,8(r18)
10102758:	a8c00317 	ldw	r3,12(r21)
1010275c:	90c00315 	stw	r3,12(r18)
10102760:	30801126 	beq	r6,r2,101027a8 <_realloc_r+0x4c8>
10102764:	90800404 	addi	r2,r18,16
10102768:	a8c00404 	addi	r3,r21,16
1010276c:	003f1906 	br	101023d4 <__alt_data_end+0xfffe23d4>
10102770:	90ffff17 	ldw	r3,-4(r18)
10102774:	00bfff04 	movi	r2,-4
10102778:	a825883a 	mov	r18,r21
1010277c:	1884703a 	and	r2,r3,r2
10102780:	80a1883a 	add	r16,r16,r2
10102784:	003f2406 	br	10102418 <__alt_data_end+0xfffe2418>
10102788:	a8800217 	ldw	r2,8(r21)
1010278c:	b0800415 	stw	r2,16(r22)
10102790:	a8800317 	ldw	r2,12(r21)
10102794:	b0800515 	stw	r2,20(r22)
10102798:	31000a26 	beq	r6,r4,101027c4 <_realloc_r+0x4e4>
1010279c:	b0800604 	addi	r2,r22,24
101027a0:	ad400404 	addi	r21,r21,16
101027a4:	003fa906 	br	1010264c <__alt_data_end+0xfffe264c>
101027a8:	a9000417 	ldw	r4,16(r21)
101027ac:	90800604 	addi	r2,r18,24
101027b0:	a8c00604 	addi	r3,r21,24
101027b4:	91000415 	stw	r4,16(r18)
101027b8:	a9000517 	ldw	r4,20(r21)
101027bc:	91000515 	stw	r4,20(r18)
101027c0:	003f0406 	br	101023d4 <__alt_data_end+0xfffe23d4>
101027c4:	a8c00417 	ldw	r3,16(r21)
101027c8:	ad400604 	addi	r21,r21,24
101027cc:	b0800804 	addi	r2,r22,32
101027d0:	b0c00615 	stw	r3,24(r22)
101027d4:	a8ffff17 	ldw	r3,-4(r21)
101027d8:	b0c00715 	stw	r3,28(r22)
101027dc:	003f9b06 	br	1010264c <__alt_data_end+0xfffe264c>
101027e0:	9005883a 	mov	r2,r18
101027e4:	003fc706 	br	10102704 <__alt_data_end+0xfffe2704>
101027e8:	a80b883a 	mov	r5,r21
101027ec:	9009883a 	mov	r4,r18
101027f0:	010205c0 	call	1010205c <memmove>
101027f4:	003fc906 	br	1010271c <__alt_data_end+0xfffe271c>
101027f8:	a8800217 	ldw	r2,8(r21)
101027fc:	b0800415 	stw	r2,16(r22)
10102800:	a8800317 	ldw	r2,12(r21)
10102804:	b0800515 	stw	r2,20(r22)
10102808:	31000726 	beq	r6,r4,10102828 <_realloc_r+0x548>
1010280c:	b0800604 	addi	r2,r22,24
10102810:	ad400404 	addi	r21,r21,16
10102814:	003fbb06 	br	10102704 <__alt_data_end+0xfffe2704>
10102818:	a009883a 	mov	r4,r20
1010281c:	0103e3c0 	call	10103e3c <__malloc_unlock>
10102820:	0005883a 	mov	r2,zero
10102824:	003f0a06 	br	10102450 <__alt_data_end+0xfffe2450>
10102828:	a8c00417 	ldw	r3,16(r21)
1010282c:	ad400604 	addi	r21,r21,24
10102830:	b0800804 	addi	r2,r22,32
10102834:	b0c00615 	stw	r3,24(r22)
10102838:	a8ffff17 	ldw	r3,-4(r21)
1010283c:	b0c00715 	stw	r3,28(r22)
10102840:	003fb006 	br	10102704 <__alt_data_end+0xfffe2704>

10102844 <_sbrk_r>:
10102844:	defffd04 	addi	sp,sp,-12
10102848:	dc000015 	stw	r16,0(sp)
1010284c:	04040474 	movhi	r16,4113
10102850:	dc400115 	stw	r17,4(sp)
10102854:	84269804 	addi	r16,r16,-26016
10102858:	2023883a 	mov	r17,r4
1010285c:	2809883a 	mov	r4,r5
10102860:	dfc00215 	stw	ra,8(sp)
10102864:	80000015 	stw	zero,0(r16)
10102868:	0103ffc0 	call	10103ffc <sbrk>
1010286c:	00ffffc4 	movi	r3,-1
10102870:	10c00526 	beq	r2,r3,10102888 <_sbrk_r+0x44>
10102874:	dfc00217 	ldw	ra,8(sp)
10102878:	dc400117 	ldw	r17,4(sp)
1010287c:	dc000017 	ldw	r16,0(sp)
10102880:	dec00304 	addi	sp,sp,12
10102884:	f800283a 	ret
10102888:	80c00017 	ldw	r3,0(r16)
1010288c:	183ff926 	beq	r3,zero,10102874 <__alt_data_end+0xfffe2874>
10102890:	88c00015 	stw	r3,0(r17)
10102894:	003ff706 	br	10102874 <__alt_data_end+0xfffe2874>

10102898 <__sread>:
10102898:	defffe04 	addi	sp,sp,-8
1010289c:	dc000015 	stw	r16,0(sp)
101028a0:	2821883a 	mov	r16,r5
101028a4:	2940038f 	ldh	r5,14(r5)
101028a8:	dfc00115 	stw	ra,4(sp)
101028ac:	01035d80 	call	101035d8 <_read_r>
101028b0:	10000716 	blt	r2,zero,101028d0 <__sread+0x38>
101028b4:	80c01417 	ldw	r3,80(r16)
101028b8:	1887883a 	add	r3,r3,r2
101028bc:	80c01415 	stw	r3,80(r16)
101028c0:	dfc00117 	ldw	ra,4(sp)
101028c4:	dc000017 	ldw	r16,0(sp)
101028c8:	dec00204 	addi	sp,sp,8
101028cc:	f800283a 	ret
101028d0:	80c0030b 	ldhu	r3,12(r16)
101028d4:	18fbffcc 	andi	r3,r3,61439
101028d8:	80c0030d 	sth	r3,12(r16)
101028dc:	dfc00117 	ldw	ra,4(sp)
101028e0:	dc000017 	ldw	r16,0(sp)
101028e4:	dec00204 	addi	sp,sp,8
101028e8:	f800283a 	ret

101028ec <__seofread>:
101028ec:	0005883a 	mov	r2,zero
101028f0:	f800283a 	ret

101028f4 <__swrite>:
101028f4:	2880030b 	ldhu	r2,12(r5)
101028f8:	defffb04 	addi	sp,sp,-20
101028fc:	dcc00315 	stw	r19,12(sp)
10102900:	dc800215 	stw	r18,8(sp)
10102904:	dc400115 	stw	r17,4(sp)
10102908:	dc000015 	stw	r16,0(sp)
1010290c:	dfc00415 	stw	ra,16(sp)
10102910:	10c0400c 	andi	r3,r2,256
10102914:	2821883a 	mov	r16,r5
10102918:	2023883a 	mov	r17,r4
1010291c:	3025883a 	mov	r18,r6
10102920:	3827883a 	mov	r19,r7
10102924:	18000526 	beq	r3,zero,1010293c <__swrite+0x48>
10102928:	2940038f 	ldh	r5,14(r5)
1010292c:	01c00084 	movi	r7,2
10102930:	000d883a 	mov	r6,zero
10102934:	01033bc0 	call	101033bc <_lseek_r>
10102938:	8080030b 	ldhu	r2,12(r16)
1010293c:	8140038f 	ldh	r5,14(r16)
10102940:	10bbffcc 	andi	r2,r2,61439
10102944:	980f883a 	mov	r7,r19
10102948:	900d883a 	mov	r6,r18
1010294c:	8809883a 	mov	r4,r17
10102950:	8080030d 	sth	r2,12(r16)
10102954:	dfc00417 	ldw	ra,16(sp)
10102958:	dcc00317 	ldw	r19,12(sp)
1010295c:	dc800217 	ldw	r18,8(sp)
10102960:	dc400117 	ldw	r17,4(sp)
10102964:	dc000017 	ldw	r16,0(sp)
10102968:	dec00504 	addi	sp,sp,20
1010296c:	01029d41 	jmpi	101029d4 <_write_r>

10102970 <__sseek>:
10102970:	defffe04 	addi	sp,sp,-8
10102974:	dc000015 	stw	r16,0(sp)
10102978:	2821883a 	mov	r16,r5
1010297c:	2940038f 	ldh	r5,14(r5)
10102980:	dfc00115 	stw	ra,4(sp)
10102984:	01033bc0 	call	101033bc <_lseek_r>
10102988:	00ffffc4 	movi	r3,-1
1010298c:	10c00826 	beq	r2,r3,101029b0 <__sseek+0x40>
10102990:	80c0030b 	ldhu	r3,12(r16)
10102994:	80801415 	stw	r2,80(r16)
10102998:	18c40014 	ori	r3,r3,4096
1010299c:	80c0030d 	sth	r3,12(r16)
101029a0:	dfc00117 	ldw	ra,4(sp)
101029a4:	dc000017 	ldw	r16,0(sp)
101029a8:	dec00204 	addi	sp,sp,8
101029ac:	f800283a 	ret
101029b0:	80c0030b 	ldhu	r3,12(r16)
101029b4:	18fbffcc 	andi	r3,r3,61439
101029b8:	80c0030d 	sth	r3,12(r16)
101029bc:	dfc00117 	ldw	ra,4(sp)
101029c0:	dc000017 	ldw	r16,0(sp)
101029c4:	dec00204 	addi	sp,sp,8
101029c8:	f800283a 	ret

101029cc <__sclose>:
101029cc:	2940038f 	ldh	r5,14(r5)
101029d0:	0102b881 	jmpi	10102b88 <_close_r>

101029d4 <_write_r>:
101029d4:	defffd04 	addi	sp,sp,-12
101029d8:	2805883a 	mov	r2,r5
101029dc:	dc000015 	stw	r16,0(sp)
101029e0:	04040474 	movhi	r16,4113
101029e4:	dc400115 	stw	r17,4(sp)
101029e8:	300b883a 	mov	r5,r6
101029ec:	84269804 	addi	r16,r16,-26016
101029f0:	2023883a 	mov	r17,r4
101029f4:	380d883a 	mov	r6,r7
101029f8:	1009883a 	mov	r4,r2
101029fc:	dfc00215 	stw	ra,8(sp)
10102a00:	80000015 	stw	zero,0(r16)
10102a04:	01040e80 	call	101040e8 <write>
10102a08:	00ffffc4 	movi	r3,-1
10102a0c:	10c00526 	beq	r2,r3,10102a24 <_write_r+0x50>
10102a10:	dfc00217 	ldw	ra,8(sp)
10102a14:	dc400117 	ldw	r17,4(sp)
10102a18:	dc000017 	ldw	r16,0(sp)
10102a1c:	dec00304 	addi	sp,sp,12
10102a20:	f800283a 	ret
10102a24:	80c00017 	ldw	r3,0(r16)
10102a28:	183ff926 	beq	r3,zero,10102a10 <__alt_data_end+0xfffe2a10>
10102a2c:	88c00015 	stw	r3,0(r17)
10102a30:	003ff706 	br	10102a10 <__alt_data_end+0xfffe2a10>

10102a34 <__swsetup_r>:
10102a34:	00840434 	movhi	r2,4112
10102a38:	defffd04 	addi	sp,sp,-12
10102a3c:	109fbf04 	addi	r2,r2,32508
10102a40:	dc400115 	stw	r17,4(sp)
10102a44:	2023883a 	mov	r17,r4
10102a48:	11000017 	ldw	r4,0(r2)
10102a4c:	dc000015 	stw	r16,0(sp)
10102a50:	dfc00215 	stw	ra,8(sp)
10102a54:	2821883a 	mov	r16,r5
10102a58:	20000226 	beq	r4,zero,10102a64 <__swsetup_r+0x30>
10102a5c:	20800e17 	ldw	r2,56(r4)
10102a60:	10003126 	beq	r2,zero,10102b28 <__swsetup_r+0xf4>
10102a64:	8080030b 	ldhu	r2,12(r16)
10102a68:	10c0020c 	andi	r3,r2,8
10102a6c:	1009883a 	mov	r4,r2
10102a70:	18000f26 	beq	r3,zero,10102ab0 <__swsetup_r+0x7c>
10102a74:	80c00417 	ldw	r3,16(r16)
10102a78:	18001526 	beq	r3,zero,10102ad0 <__swsetup_r+0x9c>
10102a7c:	1100004c 	andi	r4,r2,1
10102a80:	20001c1e 	bne	r4,zero,10102af4 <__swsetup_r+0xc0>
10102a84:	1080008c 	andi	r2,r2,2
10102a88:	1000291e 	bne	r2,zero,10102b30 <__swsetup_r+0xfc>
10102a8c:	80800517 	ldw	r2,20(r16)
10102a90:	80800215 	stw	r2,8(r16)
10102a94:	18001c26 	beq	r3,zero,10102b08 <__swsetup_r+0xd4>
10102a98:	0005883a 	mov	r2,zero
10102a9c:	dfc00217 	ldw	ra,8(sp)
10102aa0:	dc400117 	ldw	r17,4(sp)
10102aa4:	dc000017 	ldw	r16,0(sp)
10102aa8:	dec00304 	addi	sp,sp,12
10102aac:	f800283a 	ret
10102ab0:	2080040c 	andi	r2,r4,16
10102ab4:	10002e26 	beq	r2,zero,10102b70 <__swsetup_r+0x13c>
10102ab8:	2080010c 	andi	r2,r4,4
10102abc:	10001e1e 	bne	r2,zero,10102b38 <__swsetup_r+0x104>
10102ac0:	80c00417 	ldw	r3,16(r16)
10102ac4:	20800214 	ori	r2,r4,8
10102ac8:	8080030d 	sth	r2,12(r16)
10102acc:	183feb1e 	bne	r3,zero,10102a7c <__alt_data_end+0xfffe2a7c>
10102ad0:	1100a00c 	andi	r4,r2,640
10102ad4:	01408004 	movi	r5,512
10102ad8:	217fe826 	beq	r4,r5,10102a7c <__alt_data_end+0xfffe2a7c>
10102adc:	800b883a 	mov	r5,r16
10102ae0:	8809883a 	mov	r4,r17
10102ae4:	010341c0 	call	1010341c <__smakebuf_r>
10102ae8:	8080030b 	ldhu	r2,12(r16)
10102aec:	80c00417 	ldw	r3,16(r16)
10102af0:	003fe206 	br	10102a7c <__alt_data_end+0xfffe2a7c>
10102af4:	80800517 	ldw	r2,20(r16)
10102af8:	80000215 	stw	zero,8(r16)
10102afc:	0085c83a 	sub	r2,zero,r2
10102b00:	80800615 	stw	r2,24(r16)
10102b04:	183fe41e 	bne	r3,zero,10102a98 <__alt_data_end+0xfffe2a98>
10102b08:	80c0030b 	ldhu	r3,12(r16)
10102b0c:	0005883a 	mov	r2,zero
10102b10:	1900200c 	andi	r4,r3,128
10102b14:	203fe126 	beq	r4,zero,10102a9c <__alt_data_end+0xfffe2a9c>
10102b18:	18c01014 	ori	r3,r3,64
10102b1c:	80c0030d 	sth	r3,12(r16)
10102b20:	00bfffc4 	movi	r2,-1
10102b24:	003fdd06 	br	10102a9c <__alt_data_end+0xfffe2a9c>
10102b28:	0100f900 	call	10100f90 <__sinit>
10102b2c:	003fcd06 	br	10102a64 <__alt_data_end+0xfffe2a64>
10102b30:	0005883a 	mov	r2,zero
10102b34:	003fd606 	br	10102a90 <__alt_data_end+0xfffe2a90>
10102b38:	81400c17 	ldw	r5,48(r16)
10102b3c:	28000626 	beq	r5,zero,10102b58 <__swsetup_r+0x124>
10102b40:	80801004 	addi	r2,r16,64
10102b44:	28800326 	beq	r5,r2,10102b54 <__swsetup_r+0x120>
10102b48:	8809883a 	mov	r4,r17
10102b4c:	01030ac0 	call	101030ac <_free_r>
10102b50:	8100030b 	ldhu	r4,12(r16)
10102b54:	80000c15 	stw	zero,48(r16)
10102b58:	80c00417 	ldw	r3,16(r16)
10102b5c:	00bff6c4 	movi	r2,-37
10102b60:	1108703a 	and	r4,r2,r4
10102b64:	80000115 	stw	zero,4(r16)
10102b68:	80c00015 	stw	r3,0(r16)
10102b6c:	003fd506 	br	10102ac4 <__alt_data_end+0xfffe2ac4>
10102b70:	00800244 	movi	r2,9
10102b74:	88800015 	stw	r2,0(r17)
10102b78:	20801014 	ori	r2,r4,64
10102b7c:	8080030d 	sth	r2,12(r16)
10102b80:	00bfffc4 	movi	r2,-1
10102b84:	003fc506 	br	10102a9c <__alt_data_end+0xfffe2a9c>

10102b88 <_close_r>:
10102b88:	defffd04 	addi	sp,sp,-12
10102b8c:	dc000015 	stw	r16,0(sp)
10102b90:	04040474 	movhi	r16,4113
10102b94:	dc400115 	stw	r17,4(sp)
10102b98:	84269804 	addi	r16,r16,-26016
10102b9c:	2023883a 	mov	r17,r4
10102ba0:	2809883a 	mov	r4,r5
10102ba4:	dfc00215 	stw	ra,8(sp)
10102ba8:	80000015 	stw	zero,0(r16)
10102bac:	01038d80 	call	101038d8 <close>
10102bb0:	00ffffc4 	movi	r3,-1
10102bb4:	10c00526 	beq	r2,r3,10102bcc <_close_r+0x44>
10102bb8:	dfc00217 	ldw	ra,8(sp)
10102bbc:	dc400117 	ldw	r17,4(sp)
10102bc0:	dc000017 	ldw	r16,0(sp)
10102bc4:	dec00304 	addi	sp,sp,12
10102bc8:	f800283a 	ret
10102bcc:	80c00017 	ldw	r3,0(r16)
10102bd0:	183ff926 	beq	r3,zero,10102bb8 <__alt_data_end+0xfffe2bb8>
10102bd4:	88c00015 	stw	r3,0(r17)
10102bd8:	003ff706 	br	10102bb8 <__alt_data_end+0xfffe2bb8>

10102bdc <_fclose_r>:
10102bdc:	28003926 	beq	r5,zero,10102cc4 <_fclose_r+0xe8>
10102be0:	defffc04 	addi	sp,sp,-16
10102be4:	dc400115 	stw	r17,4(sp)
10102be8:	dc000015 	stw	r16,0(sp)
10102bec:	dfc00315 	stw	ra,12(sp)
10102bf0:	dc800215 	stw	r18,8(sp)
10102bf4:	2023883a 	mov	r17,r4
10102bf8:	2821883a 	mov	r16,r5
10102bfc:	20000226 	beq	r4,zero,10102c08 <_fclose_r+0x2c>
10102c00:	20800e17 	ldw	r2,56(r4)
10102c04:	10002726 	beq	r2,zero,10102ca4 <_fclose_r+0xc8>
10102c08:	8080030f 	ldh	r2,12(r16)
10102c0c:	1000071e 	bne	r2,zero,10102c2c <_fclose_r+0x50>
10102c10:	0005883a 	mov	r2,zero
10102c14:	dfc00317 	ldw	ra,12(sp)
10102c18:	dc800217 	ldw	r18,8(sp)
10102c1c:	dc400117 	ldw	r17,4(sp)
10102c20:	dc000017 	ldw	r16,0(sp)
10102c24:	dec00404 	addi	sp,sp,16
10102c28:	f800283a 	ret
10102c2c:	800b883a 	mov	r5,r16
10102c30:	8809883a 	mov	r4,r17
10102c34:	0102ce00 	call	10102ce0 <__sflush_r>
10102c38:	1025883a 	mov	r18,r2
10102c3c:	80800b17 	ldw	r2,44(r16)
10102c40:	10000426 	beq	r2,zero,10102c54 <_fclose_r+0x78>
10102c44:	81400717 	ldw	r5,28(r16)
10102c48:	8809883a 	mov	r4,r17
10102c4c:	103ee83a 	callr	r2
10102c50:	10001616 	blt	r2,zero,10102cac <_fclose_r+0xd0>
10102c54:	8080030b 	ldhu	r2,12(r16)
10102c58:	1080200c 	andi	r2,r2,128
10102c5c:	1000151e 	bne	r2,zero,10102cb4 <_fclose_r+0xd8>
10102c60:	81400c17 	ldw	r5,48(r16)
10102c64:	28000526 	beq	r5,zero,10102c7c <_fclose_r+0xa0>
10102c68:	80801004 	addi	r2,r16,64
10102c6c:	28800226 	beq	r5,r2,10102c78 <_fclose_r+0x9c>
10102c70:	8809883a 	mov	r4,r17
10102c74:	01030ac0 	call	101030ac <_free_r>
10102c78:	80000c15 	stw	zero,48(r16)
10102c7c:	81401117 	ldw	r5,68(r16)
10102c80:	28000326 	beq	r5,zero,10102c90 <_fclose_r+0xb4>
10102c84:	8809883a 	mov	r4,r17
10102c88:	01030ac0 	call	101030ac <_free_r>
10102c8c:	80001115 	stw	zero,68(r16)
10102c90:	0100fa00 	call	10100fa0 <__sfp_lock_acquire>
10102c94:	8000030d 	sth	zero,12(r16)
10102c98:	0100fa40 	call	10100fa4 <__sfp_lock_release>
10102c9c:	9005883a 	mov	r2,r18
10102ca0:	003fdc06 	br	10102c14 <__alt_data_end+0xfffe2c14>
10102ca4:	0100f900 	call	10100f90 <__sinit>
10102ca8:	003fd706 	br	10102c08 <__alt_data_end+0xfffe2c08>
10102cac:	04bfffc4 	movi	r18,-1
10102cb0:	003fe806 	br	10102c54 <__alt_data_end+0xfffe2c54>
10102cb4:	81400417 	ldw	r5,16(r16)
10102cb8:	8809883a 	mov	r4,r17
10102cbc:	01030ac0 	call	101030ac <_free_r>
10102cc0:	003fe706 	br	10102c60 <__alt_data_end+0xfffe2c60>
10102cc4:	0005883a 	mov	r2,zero
10102cc8:	f800283a 	ret

10102ccc <fclose>:
10102ccc:	00840434 	movhi	r2,4112
10102cd0:	109fbf04 	addi	r2,r2,32508
10102cd4:	200b883a 	mov	r5,r4
10102cd8:	11000017 	ldw	r4,0(r2)
10102cdc:	0102bdc1 	jmpi	10102bdc <_fclose_r>

10102ce0 <__sflush_r>:
10102ce0:	2880030b 	ldhu	r2,12(r5)
10102ce4:	defffb04 	addi	sp,sp,-20
10102ce8:	dcc00315 	stw	r19,12(sp)
10102cec:	dc400115 	stw	r17,4(sp)
10102cf0:	dfc00415 	stw	ra,16(sp)
10102cf4:	dc800215 	stw	r18,8(sp)
10102cf8:	dc000015 	stw	r16,0(sp)
10102cfc:	10c0020c 	andi	r3,r2,8
10102d00:	2823883a 	mov	r17,r5
10102d04:	2027883a 	mov	r19,r4
10102d08:	1800311e 	bne	r3,zero,10102dd0 <__sflush_r+0xf0>
10102d0c:	28c00117 	ldw	r3,4(r5)
10102d10:	10820014 	ori	r2,r2,2048
10102d14:	2880030d 	sth	r2,12(r5)
10102d18:	00c04b0e 	bge	zero,r3,10102e48 <__sflush_r+0x168>
10102d1c:	8a000a17 	ldw	r8,40(r17)
10102d20:	40002326 	beq	r8,zero,10102db0 <__sflush_r+0xd0>
10102d24:	9c000017 	ldw	r16,0(r19)
10102d28:	10c4000c 	andi	r3,r2,4096
10102d2c:	98000015 	stw	zero,0(r19)
10102d30:	18004826 	beq	r3,zero,10102e54 <__sflush_r+0x174>
10102d34:	89801417 	ldw	r6,80(r17)
10102d38:	10c0010c 	andi	r3,r2,4
10102d3c:	18000626 	beq	r3,zero,10102d58 <__sflush_r+0x78>
10102d40:	88c00117 	ldw	r3,4(r17)
10102d44:	88800c17 	ldw	r2,48(r17)
10102d48:	30cdc83a 	sub	r6,r6,r3
10102d4c:	10000226 	beq	r2,zero,10102d58 <__sflush_r+0x78>
10102d50:	88800f17 	ldw	r2,60(r17)
10102d54:	308dc83a 	sub	r6,r6,r2
10102d58:	89400717 	ldw	r5,28(r17)
10102d5c:	000f883a 	mov	r7,zero
10102d60:	9809883a 	mov	r4,r19
10102d64:	403ee83a 	callr	r8
10102d68:	00ffffc4 	movi	r3,-1
10102d6c:	10c04426 	beq	r2,r3,10102e80 <__sflush_r+0x1a0>
10102d70:	88c0030b 	ldhu	r3,12(r17)
10102d74:	89000417 	ldw	r4,16(r17)
10102d78:	88000115 	stw	zero,4(r17)
10102d7c:	197dffcc 	andi	r5,r3,63487
10102d80:	8940030d 	sth	r5,12(r17)
10102d84:	89000015 	stw	r4,0(r17)
10102d88:	18c4000c 	andi	r3,r3,4096
10102d8c:	18002c1e 	bne	r3,zero,10102e40 <__sflush_r+0x160>
10102d90:	89400c17 	ldw	r5,48(r17)
10102d94:	9c000015 	stw	r16,0(r19)
10102d98:	28000526 	beq	r5,zero,10102db0 <__sflush_r+0xd0>
10102d9c:	88801004 	addi	r2,r17,64
10102da0:	28800226 	beq	r5,r2,10102dac <__sflush_r+0xcc>
10102da4:	9809883a 	mov	r4,r19
10102da8:	01030ac0 	call	101030ac <_free_r>
10102dac:	88000c15 	stw	zero,48(r17)
10102db0:	0005883a 	mov	r2,zero
10102db4:	dfc00417 	ldw	ra,16(sp)
10102db8:	dcc00317 	ldw	r19,12(sp)
10102dbc:	dc800217 	ldw	r18,8(sp)
10102dc0:	dc400117 	ldw	r17,4(sp)
10102dc4:	dc000017 	ldw	r16,0(sp)
10102dc8:	dec00504 	addi	sp,sp,20
10102dcc:	f800283a 	ret
10102dd0:	2c800417 	ldw	r18,16(r5)
10102dd4:	903ff626 	beq	r18,zero,10102db0 <__alt_data_end+0xfffe2db0>
10102dd8:	2c000017 	ldw	r16,0(r5)
10102ddc:	108000cc 	andi	r2,r2,3
10102de0:	2c800015 	stw	r18,0(r5)
10102de4:	84a1c83a 	sub	r16,r16,r18
10102de8:	1000131e 	bne	r2,zero,10102e38 <__sflush_r+0x158>
10102dec:	28800517 	ldw	r2,20(r5)
10102df0:	88800215 	stw	r2,8(r17)
10102df4:	04000316 	blt	zero,r16,10102e04 <__sflush_r+0x124>
10102df8:	003fed06 	br	10102db0 <__alt_data_end+0xfffe2db0>
10102dfc:	90a5883a 	add	r18,r18,r2
10102e00:	043feb0e 	bge	zero,r16,10102db0 <__alt_data_end+0xfffe2db0>
10102e04:	88800917 	ldw	r2,36(r17)
10102e08:	89400717 	ldw	r5,28(r17)
10102e0c:	800f883a 	mov	r7,r16
10102e10:	900d883a 	mov	r6,r18
10102e14:	9809883a 	mov	r4,r19
10102e18:	103ee83a 	callr	r2
10102e1c:	80a1c83a 	sub	r16,r16,r2
10102e20:	00bff616 	blt	zero,r2,10102dfc <__alt_data_end+0xfffe2dfc>
10102e24:	88c0030b 	ldhu	r3,12(r17)
10102e28:	00bfffc4 	movi	r2,-1
10102e2c:	18c01014 	ori	r3,r3,64
10102e30:	88c0030d 	sth	r3,12(r17)
10102e34:	003fdf06 	br	10102db4 <__alt_data_end+0xfffe2db4>
10102e38:	0005883a 	mov	r2,zero
10102e3c:	003fec06 	br	10102df0 <__alt_data_end+0xfffe2df0>
10102e40:	88801415 	stw	r2,80(r17)
10102e44:	003fd206 	br	10102d90 <__alt_data_end+0xfffe2d90>
10102e48:	28c00f17 	ldw	r3,60(r5)
10102e4c:	00ffb316 	blt	zero,r3,10102d1c <__alt_data_end+0xfffe2d1c>
10102e50:	003fd706 	br	10102db0 <__alt_data_end+0xfffe2db0>
10102e54:	89400717 	ldw	r5,28(r17)
10102e58:	000d883a 	mov	r6,zero
10102e5c:	01c00044 	movi	r7,1
10102e60:	9809883a 	mov	r4,r19
10102e64:	403ee83a 	callr	r8
10102e68:	100d883a 	mov	r6,r2
10102e6c:	00bfffc4 	movi	r2,-1
10102e70:	30801426 	beq	r6,r2,10102ec4 <__sflush_r+0x1e4>
10102e74:	8880030b 	ldhu	r2,12(r17)
10102e78:	8a000a17 	ldw	r8,40(r17)
10102e7c:	003fae06 	br	10102d38 <__alt_data_end+0xfffe2d38>
10102e80:	98c00017 	ldw	r3,0(r19)
10102e84:	183fba26 	beq	r3,zero,10102d70 <__alt_data_end+0xfffe2d70>
10102e88:	01000744 	movi	r4,29
10102e8c:	19000626 	beq	r3,r4,10102ea8 <__sflush_r+0x1c8>
10102e90:	01000584 	movi	r4,22
10102e94:	19000426 	beq	r3,r4,10102ea8 <__sflush_r+0x1c8>
10102e98:	88c0030b 	ldhu	r3,12(r17)
10102e9c:	18c01014 	ori	r3,r3,64
10102ea0:	88c0030d 	sth	r3,12(r17)
10102ea4:	003fc306 	br	10102db4 <__alt_data_end+0xfffe2db4>
10102ea8:	8880030b 	ldhu	r2,12(r17)
10102eac:	88c00417 	ldw	r3,16(r17)
10102eb0:	88000115 	stw	zero,4(r17)
10102eb4:	10bdffcc 	andi	r2,r2,63487
10102eb8:	8880030d 	sth	r2,12(r17)
10102ebc:	88c00015 	stw	r3,0(r17)
10102ec0:	003fb306 	br	10102d90 <__alt_data_end+0xfffe2d90>
10102ec4:	98800017 	ldw	r2,0(r19)
10102ec8:	103fea26 	beq	r2,zero,10102e74 <__alt_data_end+0xfffe2e74>
10102ecc:	00c00744 	movi	r3,29
10102ed0:	10c00226 	beq	r2,r3,10102edc <__sflush_r+0x1fc>
10102ed4:	00c00584 	movi	r3,22
10102ed8:	10c0031e 	bne	r2,r3,10102ee8 <__sflush_r+0x208>
10102edc:	9c000015 	stw	r16,0(r19)
10102ee0:	0005883a 	mov	r2,zero
10102ee4:	003fb306 	br	10102db4 <__alt_data_end+0xfffe2db4>
10102ee8:	88c0030b 	ldhu	r3,12(r17)
10102eec:	3005883a 	mov	r2,r6
10102ef0:	18c01014 	ori	r3,r3,64
10102ef4:	88c0030d 	sth	r3,12(r17)
10102ef8:	003fae06 	br	10102db4 <__alt_data_end+0xfffe2db4>

10102efc <_fflush_r>:
10102efc:	defffd04 	addi	sp,sp,-12
10102f00:	dc000115 	stw	r16,4(sp)
10102f04:	dfc00215 	stw	ra,8(sp)
10102f08:	2021883a 	mov	r16,r4
10102f0c:	20000226 	beq	r4,zero,10102f18 <_fflush_r+0x1c>
10102f10:	20800e17 	ldw	r2,56(r4)
10102f14:	10000c26 	beq	r2,zero,10102f48 <_fflush_r+0x4c>
10102f18:	2880030f 	ldh	r2,12(r5)
10102f1c:	1000051e 	bne	r2,zero,10102f34 <_fflush_r+0x38>
10102f20:	0005883a 	mov	r2,zero
10102f24:	dfc00217 	ldw	ra,8(sp)
10102f28:	dc000117 	ldw	r16,4(sp)
10102f2c:	dec00304 	addi	sp,sp,12
10102f30:	f800283a 	ret
10102f34:	8009883a 	mov	r4,r16
10102f38:	dfc00217 	ldw	ra,8(sp)
10102f3c:	dc000117 	ldw	r16,4(sp)
10102f40:	dec00304 	addi	sp,sp,12
10102f44:	0102ce01 	jmpi	10102ce0 <__sflush_r>
10102f48:	d9400015 	stw	r5,0(sp)
10102f4c:	0100f900 	call	10100f90 <__sinit>
10102f50:	d9400017 	ldw	r5,0(sp)
10102f54:	003ff006 	br	10102f18 <__alt_data_end+0xfffe2f18>

10102f58 <fflush>:
10102f58:	20000526 	beq	r4,zero,10102f70 <fflush+0x18>
10102f5c:	00840434 	movhi	r2,4112
10102f60:	109fbf04 	addi	r2,r2,32508
10102f64:	200b883a 	mov	r5,r4
10102f68:	11000017 	ldw	r4,0(r2)
10102f6c:	0102efc1 	jmpi	10102efc <_fflush_r>
10102f70:	00840434 	movhi	r2,4112
10102f74:	109fbe04 	addi	r2,r2,32504
10102f78:	11000017 	ldw	r4,0(r2)
10102f7c:	01440434 	movhi	r5,4112
10102f80:	294bbf04 	addi	r5,r5,12028
10102f84:	01015601 	jmpi	10101560 <_fwalk_reent>

10102f88 <_malloc_trim_r>:
10102f88:	defffb04 	addi	sp,sp,-20
10102f8c:	dcc00315 	stw	r19,12(sp)
10102f90:	04c40434 	movhi	r19,4112
10102f94:	dc800215 	stw	r18,8(sp)
10102f98:	dc400115 	stw	r17,4(sp)
10102f9c:	dc000015 	stw	r16,0(sp)
10102fa0:	dfc00415 	stw	ra,16(sp)
10102fa4:	2821883a 	mov	r16,r5
10102fa8:	9cda3004 	addi	r19,r19,26816
10102fac:	2025883a 	mov	r18,r4
10102fb0:	0103e180 	call	10103e18 <__malloc_lock>
10102fb4:	98800217 	ldw	r2,8(r19)
10102fb8:	14400117 	ldw	r17,4(r2)
10102fbc:	00bfff04 	movi	r2,-4
10102fc0:	88a2703a 	and	r17,r17,r2
10102fc4:	8c21c83a 	sub	r16,r17,r16
10102fc8:	8403fbc4 	addi	r16,r16,4079
10102fcc:	8020d33a 	srli	r16,r16,12
10102fd0:	0083ffc4 	movi	r2,4095
10102fd4:	843fffc4 	addi	r16,r16,-1
10102fd8:	8020933a 	slli	r16,r16,12
10102fdc:	1400060e 	bge	r2,r16,10102ff8 <_malloc_trim_r+0x70>
10102fe0:	000b883a 	mov	r5,zero
10102fe4:	9009883a 	mov	r4,r18
10102fe8:	01028440 	call	10102844 <_sbrk_r>
10102fec:	98c00217 	ldw	r3,8(r19)
10102ff0:	1c47883a 	add	r3,r3,r17
10102ff4:	10c00a26 	beq	r2,r3,10103020 <_malloc_trim_r+0x98>
10102ff8:	9009883a 	mov	r4,r18
10102ffc:	0103e3c0 	call	10103e3c <__malloc_unlock>
10103000:	0005883a 	mov	r2,zero
10103004:	dfc00417 	ldw	ra,16(sp)
10103008:	dcc00317 	ldw	r19,12(sp)
1010300c:	dc800217 	ldw	r18,8(sp)
10103010:	dc400117 	ldw	r17,4(sp)
10103014:	dc000017 	ldw	r16,0(sp)
10103018:	dec00504 	addi	sp,sp,20
1010301c:	f800283a 	ret
10103020:	040bc83a 	sub	r5,zero,r16
10103024:	9009883a 	mov	r4,r18
10103028:	01028440 	call	10102844 <_sbrk_r>
1010302c:	00ffffc4 	movi	r3,-1
10103030:	10c00d26 	beq	r2,r3,10103068 <_malloc_trim_r+0xe0>
10103034:	00c40474 	movhi	r3,4113
10103038:	18e6a004 	addi	r3,r3,-25984
1010303c:	18800017 	ldw	r2,0(r3)
10103040:	99000217 	ldw	r4,8(r19)
10103044:	8c23c83a 	sub	r17,r17,r16
10103048:	8c400054 	ori	r17,r17,1
1010304c:	1421c83a 	sub	r16,r2,r16
10103050:	24400115 	stw	r17,4(r4)
10103054:	9009883a 	mov	r4,r18
10103058:	1c000015 	stw	r16,0(r3)
1010305c:	0103e3c0 	call	10103e3c <__malloc_unlock>
10103060:	00800044 	movi	r2,1
10103064:	003fe706 	br	10103004 <__alt_data_end+0xfffe3004>
10103068:	000b883a 	mov	r5,zero
1010306c:	9009883a 	mov	r4,r18
10103070:	01028440 	call	10102844 <_sbrk_r>
10103074:	99000217 	ldw	r4,8(r19)
10103078:	014003c4 	movi	r5,15
1010307c:	1107c83a 	sub	r3,r2,r4
10103080:	28ffdd0e 	bge	r5,r3,10102ff8 <__alt_data_end+0xfffe2ff8>
10103084:	01440434 	movhi	r5,4112
10103088:	295fc004 	addi	r5,r5,32512
1010308c:	29400017 	ldw	r5,0(r5)
10103090:	18c00054 	ori	r3,r3,1
10103094:	20c00115 	stw	r3,4(r4)
10103098:	00c40474 	movhi	r3,4113
1010309c:	1145c83a 	sub	r2,r2,r5
101030a0:	18e6a004 	addi	r3,r3,-25984
101030a4:	18800015 	stw	r2,0(r3)
101030a8:	003fd306 	br	10102ff8 <__alt_data_end+0xfffe2ff8>

101030ac <_free_r>:
101030ac:	28004126 	beq	r5,zero,101031b4 <_free_r+0x108>
101030b0:	defffd04 	addi	sp,sp,-12
101030b4:	dc400115 	stw	r17,4(sp)
101030b8:	dc000015 	stw	r16,0(sp)
101030bc:	2023883a 	mov	r17,r4
101030c0:	2821883a 	mov	r16,r5
101030c4:	dfc00215 	stw	ra,8(sp)
101030c8:	0103e180 	call	10103e18 <__malloc_lock>
101030cc:	81ffff17 	ldw	r7,-4(r16)
101030d0:	00bfff84 	movi	r2,-2
101030d4:	01040434 	movhi	r4,4112
101030d8:	81bffe04 	addi	r6,r16,-8
101030dc:	3884703a 	and	r2,r7,r2
101030e0:	211a3004 	addi	r4,r4,26816
101030e4:	308b883a 	add	r5,r6,r2
101030e8:	2a400117 	ldw	r9,4(r5)
101030ec:	22000217 	ldw	r8,8(r4)
101030f0:	00ffff04 	movi	r3,-4
101030f4:	48c6703a 	and	r3,r9,r3
101030f8:	2a005726 	beq	r5,r8,10103258 <_free_r+0x1ac>
101030fc:	28c00115 	stw	r3,4(r5)
10103100:	39c0004c 	andi	r7,r7,1
10103104:	3800091e 	bne	r7,zero,1010312c <_free_r+0x80>
10103108:	823ffe17 	ldw	r8,-8(r16)
1010310c:	22400204 	addi	r9,r4,8
10103110:	320dc83a 	sub	r6,r6,r8
10103114:	31c00217 	ldw	r7,8(r6)
10103118:	1205883a 	add	r2,r2,r8
1010311c:	3a406526 	beq	r7,r9,101032b4 <_free_r+0x208>
10103120:	32000317 	ldw	r8,12(r6)
10103124:	3a000315 	stw	r8,12(r7)
10103128:	41c00215 	stw	r7,8(r8)
1010312c:	28cf883a 	add	r7,r5,r3
10103130:	39c00117 	ldw	r7,4(r7)
10103134:	39c0004c 	andi	r7,r7,1
10103138:	38003a26 	beq	r7,zero,10103224 <_free_r+0x178>
1010313c:	10c00054 	ori	r3,r2,1
10103140:	30c00115 	stw	r3,4(r6)
10103144:	3087883a 	add	r3,r6,r2
10103148:	18800015 	stw	r2,0(r3)
1010314c:	00c07fc4 	movi	r3,511
10103150:	18801936 	bltu	r3,r2,101031b8 <_free_r+0x10c>
10103154:	1004d0fa 	srli	r2,r2,3
10103158:	01c00044 	movi	r7,1
1010315c:	21400117 	ldw	r5,4(r4)
10103160:	10c00044 	addi	r3,r2,1
10103164:	18c7883a 	add	r3,r3,r3
10103168:	1005d0ba 	srai	r2,r2,2
1010316c:	18c7883a 	add	r3,r3,r3
10103170:	18c7883a 	add	r3,r3,r3
10103174:	1907883a 	add	r3,r3,r4
10103178:	3884983a 	sll	r2,r7,r2
1010317c:	19c00017 	ldw	r7,0(r3)
10103180:	1a3ffe04 	addi	r8,r3,-8
10103184:	1144b03a 	or	r2,r2,r5
10103188:	32000315 	stw	r8,12(r6)
1010318c:	31c00215 	stw	r7,8(r6)
10103190:	20800115 	stw	r2,4(r4)
10103194:	19800015 	stw	r6,0(r3)
10103198:	39800315 	stw	r6,12(r7)
1010319c:	8809883a 	mov	r4,r17
101031a0:	dfc00217 	ldw	ra,8(sp)
101031a4:	dc400117 	ldw	r17,4(sp)
101031a8:	dc000017 	ldw	r16,0(sp)
101031ac:	dec00304 	addi	sp,sp,12
101031b0:	0103e3c1 	jmpi	10103e3c <__malloc_unlock>
101031b4:	f800283a 	ret
101031b8:	100ad27a 	srli	r5,r2,9
101031bc:	00c00104 	movi	r3,4
101031c0:	19404a36 	bltu	r3,r5,101032ec <_free_r+0x240>
101031c4:	100ad1ba 	srli	r5,r2,6
101031c8:	28c00e44 	addi	r3,r5,57
101031cc:	18c7883a 	add	r3,r3,r3
101031d0:	29400e04 	addi	r5,r5,56
101031d4:	18c7883a 	add	r3,r3,r3
101031d8:	18c7883a 	add	r3,r3,r3
101031dc:	1909883a 	add	r4,r3,r4
101031e0:	20c00017 	ldw	r3,0(r4)
101031e4:	01c40434 	movhi	r7,4112
101031e8:	213ffe04 	addi	r4,r4,-8
101031ec:	39da3004 	addi	r7,r7,26816
101031f0:	20c04426 	beq	r4,r3,10103304 <_free_r+0x258>
101031f4:	01ffff04 	movi	r7,-4
101031f8:	19400117 	ldw	r5,4(r3)
101031fc:	29ca703a 	and	r5,r5,r7
10103200:	1140022e 	bgeu	r2,r5,1010320c <_free_r+0x160>
10103204:	18c00217 	ldw	r3,8(r3)
10103208:	20fffb1e 	bne	r4,r3,101031f8 <__alt_data_end+0xfffe31f8>
1010320c:	19000317 	ldw	r4,12(r3)
10103210:	31000315 	stw	r4,12(r6)
10103214:	30c00215 	stw	r3,8(r6)
10103218:	21800215 	stw	r6,8(r4)
1010321c:	19800315 	stw	r6,12(r3)
10103220:	003fde06 	br	1010319c <__alt_data_end+0xfffe319c>
10103224:	29c00217 	ldw	r7,8(r5)
10103228:	10c5883a 	add	r2,r2,r3
1010322c:	00c40434 	movhi	r3,4112
10103230:	18da3204 	addi	r3,r3,26824
10103234:	38c03b26 	beq	r7,r3,10103324 <_free_r+0x278>
10103238:	2a000317 	ldw	r8,12(r5)
1010323c:	11400054 	ori	r5,r2,1
10103240:	3087883a 	add	r3,r6,r2
10103244:	3a000315 	stw	r8,12(r7)
10103248:	41c00215 	stw	r7,8(r8)
1010324c:	31400115 	stw	r5,4(r6)
10103250:	18800015 	stw	r2,0(r3)
10103254:	003fbd06 	br	1010314c <__alt_data_end+0xfffe314c>
10103258:	39c0004c 	andi	r7,r7,1
1010325c:	10c5883a 	add	r2,r2,r3
10103260:	3800071e 	bne	r7,zero,10103280 <_free_r+0x1d4>
10103264:	81fffe17 	ldw	r7,-8(r16)
10103268:	31cdc83a 	sub	r6,r6,r7
1010326c:	30c00317 	ldw	r3,12(r6)
10103270:	31400217 	ldw	r5,8(r6)
10103274:	11c5883a 	add	r2,r2,r7
10103278:	28c00315 	stw	r3,12(r5)
1010327c:	19400215 	stw	r5,8(r3)
10103280:	10c00054 	ori	r3,r2,1
10103284:	30c00115 	stw	r3,4(r6)
10103288:	00c40434 	movhi	r3,4112
1010328c:	18dfc104 	addi	r3,r3,32516
10103290:	18c00017 	ldw	r3,0(r3)
10103294:	21800215 	stw	r6,8(r4)
10103298:	10ffc036 	bltu	r2,r3,1010319c <__alt_data_end+0xfffe319c>
1010329c:	00840474 	movhi	r2,4113
101032a0:	10a69704 	addi	r2,r2,-26020
101032a4:	11400017 	ldw	r5,0(r2)
101032a8:	8809883a 	mov	r4,r17
101032ac:	0102f880 	call	10102f88 <_malloc_trim_r>
101032b0:	003fba06 	br	1010319c <__alt_data_end+0xfffe319c>
101032b4:	28c9883a 	add	r4,r5,r3
101032b8:	21000117 	ldw	r4,4(r4)
101032bc:	2100004c 	andi	r4,r4,1
101032c0:	2000391e 	bne	r4,zero,101033a8 <_free_r+0x2fc>
101032c4:	29c00217 	ldw	r7,8(r5)
101032c8:	29000317 	ldw	r4,12(r5)
101032cc:	1885883a 	add	r2,r3,r2
101032d0:	10c00054 	ori	r3,r2,1
101032d4:	39000315 	stw	r4,12(r7)
101032d8:	21c00215 	stw	r7,8(r4)
101032dc:	30c00115 	stw	r3,4(r6)
101032e0:	308d883a 	add	r6,r6,r2
101032e4:	30800015 	stw	r2,0(r6)
101032e8:	003fac06 	br	1010319c <__alt_data_end+0xfffe319c>
101032ec:	00c00504 	movi	r3,20
101032f0:	19401536 	bltu	r3,r5,10103348 <_free_r+0x29c>
101032f4:	28c01704 	addi	r3,r5,92
101032f8:	18c7883a 	add	r3,r3,r3
101032fc:	294016c4 	addi	r5,r5,91
10103300:	003fb406 	br	101031d4 <__alt_data_end+0xfffe31d4>
10103304:	280bd0ba 	srai	r5,r5,2
10103308:	00c00044 	movi	r3,1
1010330c:	38800117 	ldw	r2,4(r7)
10103310:	194a983a 	sll	r5,r3,r5
10103314:	2007883a 	mov	r3,r4
10103318:	2884b03a 	or	r2,r5,r2
1010331c:	38800115 	stw	r2,4(r7)
10103320:	003fbb06 	br	10103210 <__alt_data_end+0xfffe3210>
10103324:	21800515 	stw	r6,20(r4)
10103328:	21800415 	stw	r6,16(r4)
1010332c:	10c00054 	ori	r3,r2,1
10103330:	31c00315 	stw	r7,12(r6)
10103334:	31c00215 	stw	r7,8(r6)
10103338:	30c00115 	stw	r3,4(r6)
1010333c:	308d883a 	add	r6,r6,r2
10103340:	30800015 	stw	r2,0(r6)
10103344:	003f9506 	br	1010319c <__alt_data_end+0xfffe319c>
10103348:	00c01504 	movi	r3,84
1010334c:	19400536 	bltu	r3,r5,10103364 <_free_r+0x2b8>
10103350:	100ad33a 	srli	r5,r2,12
10103354:	28c01bc4 	addi	r3,r5,111
10103358:	18c7883a 	add	r3,r3,r3
1010335c:	29401b84 	addi	r5,r5,110
10103360:	003f9c06 	br	101031d4 <__alt_data_end+0xfffe31d4>
10103364:	00c05504 	movi	r3,340
10103368:	19400536 	bltu	r3,r5,10103380 <_free_r+0x2d4>
1010336c:	100ad3fa 	srli	r5,r2,15
10103370:	28c01e04 	addi	r3,r5,120
10103374:	18c7883a 	add	r3,r3,r3
10103378:	29401dc4 	addi	r5,r5,119
1010337c:	003f9506 	br	101031d4 <__alt_data_end+0xfffe31d4>
10103380:	00c15504 	movi	r3,1364
10103384:	19400536 	bltu	r3,r5,1010339c <_free_r+0x2f0>
10103388:	100ad4ba 	srli	r5,r2,18
1010338c:	28c01f44 	addi	r3,r5,125
10103390:	18c7883a 	add	r3,r3,r3
10103394:	29401f04 	addi	r5,r5,124
10103398:	003f8e06 	br	101031d4 <__alt_data_end+0xfffe31d4>
1010339c:	00c03f84 	movi	r3,254
101033a0:	01401f84 	movi	r5,126
101033a4:	003f8b06 	br	101031d4 <__alt_data_end+0xfffe31d4>
101033a8:	10c00054 	ori	r3,r2,1
101033ac:	30c00115 	stw	r3,4(r6)
101033b0:	308d883a 	add	r6,r6,r2
101033b4:	30800015 	stw	r2,0(r6)
101033b8:	003f7806 	br	1010319c <__alt_data_end+0xfffe319c>

101033bc <_lseek_r>:
101033bc:	defffd04 	addi	sp,sp,-12
101033c0:	2805883a 	mov	r2,r5
101033c4:	dc000015 	stw	r16,0(sp)
101033c8:	04040474 	movhi	r16,4113
101033cc:	dc400115 	stw	r17,4(sp)
101033d0:	300b883a 	mov	r5,r6
101033d4:	84269804 	addi	r16,r16,-26016
101033d8:	2023883a 	mov	r17,r4
101033dc:	380d883a 	mov	r6,r7
101033e0:	1009883a 	mov	r4,r2
101033e4:	dfc00215 	stw	ra,8(sp)
101033e8:	80000015 	stw	zero,0(r16)
101033ec:	0103cc80 	call	10103cc8 <lseek>
101033f0:	00ffffc4 	movi	r3,-1
101033f4:	10c00526 	beq	r2,r3,1010340c <_lseek_r+0x50>
101033f8:	dfc00217 	ldw	ra,8(sp)
101033fc:	dc400117 	ldw	r17,4(sp)
10103400:	dc000017 	ldw	r16,0(sp)
10103404:	dec00304 	addi	sp,sp,12
10103408:	f800283a 	ret
1010340c:	80c00017 	ldw	r3,0(r16)
10103410:	183ff926 	beq	r3,zero,101033f8 <__alt_data_end+0xfffe33f8>
10103414:	88c00015 	stw	r3,0(r17)
10103418:	003ff706 	br	101033f8 <__alt_data_end+0xfffe33f8>

1010341c <__smakebuf_r>:
1010341c:	2880030b 	ldhu	r2,12(r5)
10103420:	10c0008c 	andi	r3,r2,2
10103424:	1800411e 	bne	r3,zero,1010352c <__smakebuf_r+0x110>
10103428:	deffec04 	addi	sp,sp,-80
1010342c:	dc000f15 	stw	r16,60(sp)
10103430:	2821883a 	mov	r16,r5
10103434:	2940038f 	ldh	r5,14(r5)
10103438:	dc401015 	stw	r17,64(sp)
1010343c:	dfc01315 	stw	ra,76(sp)
10103440:	dcc01215 	stw	r19,72(sp)
10103444:	dc801115 	stw	r18,68(sp)
10103448:	2023883a 	mov	r17,r4
1010344c:	28001c16 	blt	r5,zero,101034c0 <__smakebuf_r+0xa4>
10103450:	d80d883a 	mov	r6,sp
10103454:	01036380 	call	10103638 <_fstat_r>
10103458:	10001816 	blt	r2,zero,101034bc <__smakebuf_r+0xa0>
1010345c:	d8800117 	ldw	r2,4(sp)
10103460:	00e00014 	movui	r3,32768
10103464:	10bc000c 	andi	r2,r2,61440
10103468:	14c80020 	cmpeqi	r19,r2,8192
1010346c:	10c03726 	beq	r2,r3,1010354c <__smakebuf_r+0x130>
10103470:	80c0030b 	ldhu	r3,12(r16)
10103474:	18c20014 	ori	r3,r3,2048
10103478:	80c0030d 	sth	r3,12(r16)
1010347c:	00c80004 	movi	r3,8192
10103480:	10c0521e 	bne	r2,r3,101035cc <__smakebuf_r+0x1b0>
10103484:	8140038f 	ldh	r5,14(r16)
10103488:	8809883a 	mov	r4,r17
1010348c:	01036940 	call	10103694 <_isatty_r>
10103490:	10004c26 	beq	r2,zero,101035c4 <__smakebuf_r+0x1a8>
10103494:	8080030b 	ldhu	r2,12(r16)
10103498:	80c010c4 	addi	r3,r16,67
1010349c:	80c00015 	stw	r3,0(r16)
101034a0:	10800054 	ori	r2,r2,1
101034a4:	8080030d 	sth	r2,12(r16)
101034a8:	00800044 	movi	r2,1
101034ac:	80c00415 	stw	r3,16(r16)
101034b0:	80800515 	stw	r2,20(r16)
101034b4:	04810004 	movi	r18,1024
101034b8:	00000706 	br	101034d8 <__smakebuf_r+0xbc>
101034bc:	8080030b 	ldhu	r2,12(r16)
101034c0:	10c0200c 	andi	r3,r2,128
101034c4:	18001f1e 	bne	r3,zero,10103544 <__smakebuf_r+0x128>
101034c8:	04810004 	movi	r18,1024
101034cc:	10820014 	ori	r2,r2,2048
101034d0:	8080030d 	sth	r2,12(r16)
101034d4:	0027883a 	mov	r19,zero
101034d8:	900b883a 	mov	r5,r18
101034dc:	8809883a 	mov	r4,r17
101034e0:	01016240 	call	10101624 <_malloc_r>
101034e4:	10002c26 	beq	r2,zero,10103598 <__smakebuf_r+0x17c>
101034e8:	80c0030b 	ldhu	r3,12(r16)
101034ec:	01040434 	movhi	r4,4112
101034f0:	21031204 	addi	r4,r4,3144
101034f4:	89000f15 	stw	r4,60(r17)
101034f8:	18c02014 	ori	r3,r3,128
101034fc:	80c0030d 	sth	r3,12(r16)
10103500:	80800015 	stw	r2,0(r16)
10103504:	80800415 	stw	r2,16(r16)
10103508:	84800515 	stw	r18,20(r16)
1010350c:	98001a1e 	bne	r19,zero,10103578 <__smakebuf_r+0x15c>
10103510:	dfc01317 	ldw	ra,76(sp)
10103514:	dcc01217 	ldw	r19,72(sp)
10103518:	dc801117 	ldw	r18,68(sp)
1010351c:	dc401017 	ldw	r17,64(sp)
10103520:	dc000f17 	ldw	r16,60(sp)
10103524:	dec01404 	addi	sp,sp,80
10103528:	f800283a 	ret
1010352c:	288010c4 	addi	r2,r5,67
10103530:	28800015 	stw	r2,0(r5)
10103534:	28800415 	stw	r2,16(r5)
10103538:	00800044 	movi	r2,1
1010353c:	28800515 	stw	r2,20(r5)
10103540:	f800283a 	ret
10103544:	04801004 	movi	r18,64
10103548:	003fe006 	br	101034cc <__alt_data_end+0xfffe34cc>
1010354c:	81000a17 	ldw	r4,40(r16)
10103550:	00c40434 	movhi	r3,4112
10103554:	18ca5c04 	addi	r3,r3,10608
10103558:	20ffc51e 	bne	r4,r3,10103470 <__alt_data_end+0xfffe3470>
1010355c:	8080030b 	ldhu	r2,12(r16)
10103560:	04810004 	movi	r18,1024
10103564:	84801315 	stw	r18,76(r16)
10103568:	1484b03a 	or	r2,r2,r18
1010356c:	8080030d 	sth	r2,12(r16)
10103570:	0027883a 	mov	r19,zero
10103574:	003fd806 	br	101034d8 <__alt_data_end+0xfffe34d8>
10103578:	8140038f 	ldh	r5,14(r16)
1010357c:	8809883a 	mov	r4,r17
10103580:	01036940 	call	10103694 <_isatty_r>
10103584:	103fe226 	beq	r2,zero,10103510 <__alt_data_end+0xfffe3510>
10103588:	8080030b 	ldhu	r2,12(r16)
1010358c:	10800054 	ori	r2,r2,1
10103590:	8080030d 	sth	r2,12(r16)
10103594:	003fde06 	br	10103510 <__alt_data_end+0xfffe3510>
10103598:	8080030b 	ldhu	r2,12(r16)
1010359c:	10c0800c 	andi	r3,r2,512
101035a0:	183fdb1e 	bne	r3,zero,10103510 <__alt_data_end+0xfffe3510>
101035a4:	10800094 	ori	r2,r2,2
101035a8:	80c010c4 	addi	r3,r16,67
101035ac:	8080030d 	sth	r2,12(r16)
101035b0:	00800044 	movi	r2,1
101035b4:	80c00015 	stw	r3,0(r16)
101035b8:	80c00415 	stw	r3,16(r16)
101035bc:	80800515 	stw	r2,20(r16)
101035c0:	003fd306 	br	10103510 <__alt_data_end+0xfffe3510>
101035c4:	04810004 	movi	r18,1024
101035c8:	003fc306 	br	101034d8 <__alt_data_end+0xfffe34d8>
101035cc:	0027883a 	mov	r19,zero
101035d0:	04810004 	movi	r18,1024
101035d4:	003fc006 	br	101034d8 <__alt_data_end+0xfffe34d8>

101035d8 <_read_r>:
101035d8:	defffd04 	addi	sp,sp,-12
101035dc:	2805883a 	mov	r2,r5
101035e0:	dc000015 	stw	r16,0(sp)
101035e4:	04040474 	movhi	r16,4113
101035e8:	dc400115 	stw	r17,4(sp)
101035ec:	300b883a 	mov	r5,r6
101035f0:	84269804 	addi	r16,r16,-26016
101035f4:	2023883a 	mov	r17,r4
101035f8:	380d883a 	mov	r6,r7
101035fc:	1009883a 	mov	r4,r2
10103600:	dfc00215 	stw	ra,8(sp)
10103604:	80000015 	stw	zero,0(r16)
10103608:	0103e9c0 	call	10103e9c <read>
1010360c:	00ffffc4 	movi	r3,-1
10103610:	10c00526 	beq	r2,r3,10103628 <_read_r+0x50>
10103614:	dfc00217 	ldw	ra,8(sp)
10103618:	dc400117 	ldw	r17,4(sp)
1010361c:	dc000017 	ldw	r16,0(sp)
10103620:	dec00304 	addi	sp,sp,12
10103624:	f800283a 	ret
10103628:	80c00017 	ldw	r3,0(r16)
1010362c:	183ff926 	beq	r3,zero,10103614 <__alt_data_end+0xfffe3614>
10103630:	88c00015 	stw	r3,0(r17)
10103634:	003ff706 	br	10103614 <__alt_data_end+0xfffe3614>

10103638 <_fstat_r>:
10103638:	defffd04 	addi	sp,sp,-12
1010363c:	2805883a 	mov	r2,r5
10103640:	dc000015 	stw	r16,0(sp)
10103644:	04040474 	movhi	r16,4113
10103648:	dc400115 	stw	r17,4(sp)
1010364c:	84269804 	addi	r16,r16,-26016
10103650:	2023883a 	mov	r17,r4
10103654:	300b883a 	mov	r5,r6
10103658:	1009883a 	mov	r4,r2
1010365c:	dfc00215 	stw	ra,8(sp)
10103660:	80000015 	stw	zero,0(r16)
10103664:	0103a100 	call	10103a10 <fstat>
10103668:	00ffffc4 	movi	r3,-1
1010366c:	10c00526 	beq	r2,r3,10103684 <_fstat_r+0x4c>
10103670:	dfc00217 	ldw	ra,8(sp)
10103674:	dc400117 	ldw	r17,4(sp)
10103678:	dc000017 	ldw	r16,0(sp)
1010367c:	dec00304 	addi	sp,sp,12
10103680:	f800283a 	ret
10103684:	80c00017 	ldw	r3,0(r16)
10103688:	183ff926 	beq	r3,zero,10103670 <__alt_data_end+0xfffe3670>
1010368c:	88c00015 	stw	r3,0(r17)
10103690:	003ff706 	br	10103670 <__alt_data_end+0xfffe3670>

10103694 <_isatty_r>:
10103694:	defffd04 	addi	sp,sp,-12
10103698:	dc000015 	stw	r16,0(sp)
1010369c:	04040474 	movhi	r16,4113
101036a0:	dc400115 	stw	r17,4(sp)
101036a4:	84269804 	addi	r16,r16,-26016
101036a8:	2023883a 	mov	r17,r4
101036ac:	2809883a 	mov	r4,r5
101036b0:	dfc00215 	stw	ra,8(sp)
101036b4:	80000015 	stw	zero,0(r16)
101036b8:	0103afc0 	call	10103afc <isatty>
101036bc:	00ffffc4 	movi	r3,-1
101036c0:	10c00526 	beq	r2,r3,101036d8 <_isatty_r+0x44>
101036c4:	dfc00217 	ldw	ra,8(sp)
101036c8:	dc400117 	ldw	r17,4(sp)
101036cc:	dc000017 	ldw	r16,0(sp)
101036d0:	dec00304 	addi	sp,sp,12
101036d4:	f800283a 	ret
101036d8:	80c00017 	ldw	r3,0(r16)
101036dc:	183ff926 	beq	r3,zero,101036c4 <__alt_data_end+0xfffe36c4>
101036e0:	88c00015 	stw	r3,0(r17)
101036e4:	003ff706 	br	101036c4 <__alt_data_end+0xfffe36c4>

101036e8 <__divsi3>:
101036e8:	20001b16 	blt	r4,zero,10103758 <__divsi3+0x70>
101036ec:	000f883a 	mov	r7,zero
101036f0:	28001616 	blt	r5,zero,1010374c <__divsi3+0x64>
101036f4:	200d883a 	mov	r6,r4
101036f8:	29001a2e 	bgeu	r5,r4,10103764 <__divsi3+0x7c>
101036fc:	00800804 	movi	r2,32
10103700:	00c00044 	movi	r3,1
10103704:	00000106 	br	1010370c <__divsi3+0x24>
10103708:	10000d26 	beq	r2,zero,10103740 <__divsi3+0x58>
1010370c:	294b883a 	add	r5,r5,r5
10103710:	10bfffc4 	addi	r2,r2,-1
10103714:	18c7883a 	add	r3,r3,r3
10103718:	293ffb36 	bltu	r5,r4,10103708 <__alt_data_end+0xfffe3708>
1010371c:	0005883a 	mov	r2,zero
10103720:	18000726 	beq	r3,zero,10103740 <__divsi3+0x58>
10103724:	0005883a 	mov	r2,zero
10103728:	31400236 	bltu	r6,r5,10103734 <__divsi3+0x4c>
1010372c:	314dc83a 	sub	r6,r6,r5
10103730:	10c4b03a 	or	r2,r2,r3
10103734:	1806d07a 	srli	r3,r3,1
10103738:	280ad07a 	srli	r5,r5,1
1010373c:	183ffa1e 	bne	r3,zero,10103728 <__alt_data_end+0xfffe3728>
10103740:	38000126 	beq	r7,zero,10103748 <__divsi3+0x60>
10103744:	0085c83a 	sub	r2,zero,r2
10103748:	f800283a 	ret
1010374c:	014bc83a 	sub	r5,zero,r5
10103750:	39c0005c 	xori	r7,r7,1
10103754:	003fe706 	br	101036f4 <__alt_data_end+0xfffe36f4>
10103758:	0109c83a 	sub	r4,zero,r4
1010375c:	01c00044 	movi	r7,1
10103760:	003fe306 	br	101036f0 <__alt_data_end+0xfffe36f0>
10103764:	00c00044 	movi	r3,1
10103768:	003fee06 	br	10103724 <__alt_data_end+0xfffe3724>

1010376c <__modsi3>:
1010376c:	20001716 	blt	r4,zero,101037cc <__modsi3+0x60>
10103770:	000f883a 	mov	r7,zero
10103774:	2005883a 	mov	r2,r4
10103778:	28001216 	blt	r5,zero,101037c4 <__modsi3+0x58>
1010377c:	2900162e 	bgeu	r5,r4,101037d8 <__modsi3+0x6c>
10103780:	01800804 	movi	r6,32
10103784:	00c00044 	movi	r3,1
10103788:	00000106 	br	10103790 <__modsi3+0x24>
1010378c:	30000a26 	beq	r6,zero,101037b8 <__modsi3+0x4c>
10103790:	294b883a 	add	r5,r5,r5
10103794:	31bfffc4 	addi	r6,r6,-1
10103798:	18c7883a 	add	r3,r3,r3
1010379c:	293ffb36 	bltu	r5,r4,1010378c <__alt_data_end+0xfffe378c>
101037a0:	18000526 	beq	r3,zero,101037b8 <__modsi3+0x4c>
101037a4:	1806d07a 	srli	r3,r3,1
101037a8:	11400136 	bltu	r2,r5,101037b0 <__modsi3+0x44>
101037ac:	1145c83a 	sub	r2,r2,r5
101037b0:	280ad07a 	srli	r5,r5,1
101037b4:	183ffb1e 	bne	r3,zero,101037a4 <__alt_data_end+0xfffe37a4>
101037b8:	38000126 	beq	r7,zero,101037c0 <__modsi3+0x54>
101037bc:	0085c83a 	sub	r2,zero,r2
101037c0:	f800283a 	ret
101037c4:	014bc83a 	sub	r5,zero,r5
101037c8:	003fec06 	br	1010377c <__alt_data_end+0xfffe377c>
101037cc:	0109c83a 	sub	r4,zero,r4
101037d0:	01c00044 	movi	r7,1
101037d4:	003fe706 	br	10103774 <__alt_data_end+0xfffe3774>
101037d8:	00c00044 	movi	r3,1
101037dc:	003ff106 	br	101037a4 <__alt_data_end+0xfffe37a4>

101037e0 <__udivsi3>:
101037e0:	200d883a 	mov	r6,r4
101037e4:	2900152e 	bgeu	r5,r4,1010383c <__udivsi3+0x5c>
101037e8:	28001416 	blt	r5,zero,1010383c <__udivsi3+0x5c>
101037ec:	00800804 	movi	r2,32
101037f0:	00c00044 	movi	r3,1
101037f4:	00000206 	br	10103800 <__udivsi3+0x20>
101037f8:	10000e26 	beq	r2,zero,10103834 <__udivsi3+0x54>
101037fc:	28000516 	blt	r5,zero,10103814 <__udivsi3+0x34>
10103800:	294b883a 	add	r5,r5,r5
10103804:	10bfffc4 	addi	r2,r2,-1
10103808:	18c7883a 	add	r3,r3,r3
1010380c:	293ffa36 	bltu	r5,r4,101037f8 <__alt_data_end+0xfffe37f8>
10103810:	18000826 	beq	r3,zero,10103834 <__udivsi3+0x54>
10103814:	0005883a 	mov	r2,zero
10103818:	31400236 	bltu	r6,r5,10103824 <__udivsi3+0x44>
1010381c:	314dc83a 	sub	r6,r6,r5
10103820:	10c4b03a 	or	r2,r2,r3
10103824:	1806d07a 	srli	r3,r3,1
10103828:	280ad07a 	srli	r5,r5,1
1010382c:	183ffa1e 	bne	r3,zero,10103818 <__alt_data_end+0xfffe3818>
10103830:	f800283a 	ret
10103834:	0005883a 	mov	r2,zero
10103838:	f800283a 	ret
1010383c:	00c00044 	movi	r3,1
10103840:	003ff406 	br	10103814 <__alt_data_end+0xfffe3814>

10103844 <__umodsi3>:
10103844:	2005883a 	mov	r2,r4
10103848:	2900122e 	bgeu	r5,r4,10103894 <__umodsi3+0x50>
1010384c:	28001116 	blt	r5,zero,10103894 <__umodsi3+0x50>
10103850:	01800804 	movi	r6,32
10103854:	00c00044 	movi	r3,1
10103858:	00000206 	br	10103864 <__umodsi3+0x20>
1010385c:	30000c26 	beq	r6,zero,10103890 <__umodsi3+0x4c>
10103860:	28000516 	blt	r5,zero,10103878 <__umodsi3+0x34>
10103864:	294b883a 	add	r5,r5,r5
10103868:	31bfffc4 	addi	r6,r6,-1
1010386c:	18c7883a 	add	r3,r3,r3
10103870:	293ffa36 	bltu	r5,r4,1010385c <__alt_data_end+0xfffe385c>
10103874:	18000626 	beq	r3,zero,10103890 <__umodsi3+0x4c>
10103878:	1806d07a 	srli	r3,r3,1
1010387c:	11400136 	bltu	r2,r5,10103884 <__umodsi3+0x40>
10103880:	1145c83a 	sub	r2,r2,r5
10103884:	280ad07a 	srli	r5,r5,1
10103888:	183ffb1e 	bne	r3,zero,10103878 <__alt_data_end+0xfffe3878>
1010388c:	f800283a 	ret
10103890:	f800283a 	ret
10103894:	00c00044 	movi	r3,1
10103898:	003ff706 	br	10103878 <__alt_data_end+0xfffe3878>

1010389c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010389c:	defffe04 	addi	sp,sp,-8
101038a0:	dfc00115 	stw	ra,4(sp)
101038a4:	df000015 	stw	fp,0(sp)
101038a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
101038ac:	d0a00917 	ldw	r2,-32732(gp)
101038b0:	10000326 	beq	r2,zero,101038c0 <alt_get_errno+0x24>
101038b4:	d0a00917 	ldw	r2,-32732(gp)
101038b8:	103ee83a 	callr	r2
101038bc:	00000106 	br	101038c4 <alt_get_errno+0x28>
101038c0:	d0a6da04 	addi	r2,gp,-25752
}
101038c4:	e037883a 	mov	sp,fp
101038c8:	dfc00117 	ldw	ra,4(sp)
101038cc:	df000017 	ldw	fp,0(sp)
101038d0:	dec00204 	addi	sp,sp,8
101038d4:	f800283a 	ret

101038d8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
101038d8:	defffb04 	addi	sp,sp,-20
101038dc:	dfc00415 	stw	ra,16(sp)
101038e0:	df000315 	stw	fp,12(sp)
101038e4:	df000304 	addi	fp,sp,12
101038e8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
101038ec:	e0bfff17 	ldw	r2,-4(fp)
101038f0:	10000616 	blt	r2,zero,1010390c <close+0x34>
101038f4:	e0bfff17 	ldw	r2,-4(fp)
101038f8:	10c00324 	muli	r3,r2,12
101038fc:	00840434 	movhi	r2,4112
10103900:	109b3c04 	addi	r2,r2,27888
10103904:	1885883a 	add	r2,r3,r2
10103908:	00000106 	br	10103910 <close+0x38>
1010390c:	0005883a 	mov	r2,zero
10103910:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
10103914:	e0bffd17 	ldw	r2,-12(fp)
10103918:	10001926 	beq	r2,zero,10103980 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1010391c:	e0bffd17 	ldw	r2,-12(fp)
10103920:	10800017 	ldw	r2,0(r2)
10103924:	10800417 	ldw	r2,16(r2)
10103928:	10000626 	beq	r2,zero,10103944 <close+0x6c>
1010392c:	e0bffd17 	ldw	r2,-12(fp)
10103930:	10800017 	ldw	r2,0(r2)
10103934:	10800417 	ldw	r2,16(r2)
10103938:	e13ffd17 	ldw	r4,-12(fp)
1010393c:	103ee83a 	callr	r2
10103940:	00000106 	br	10103948 <close+0x70>
10103944:	0005883a 	mov	r2,zero
10103948:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1010394c:	e13fff17 	ldw	r4,-4(fp)
10103950:	0103f980 	call	10103f98 <alt_release_fd>
    if (rval < 0)
10103954:	e0bffe17 	ldw	r2,-8(fp)
10103958:	1000070e 	bge	r2,zero,10103978 <close+0xa0>
    {
      ALT_ERRNO = -rval;
1010395c:	010389c0 	call	1010389c <alt_get_errno>
10103960:	1007883a 	mov	r3,r2
10103964:	e0bffe17 	ldw	r2,-8(fp)
10103968:	0085c83a 	sub	r2,zero,r2
1010396c:	18800015 	stw	r2,0(r3)
      return -1;
10103970:	00bfffc4 	movi	r2,-1
10103974:	00000706 	br	10103994 <close+0xbc>
    }
    return 0;
10103978:	0005883a 	mov	r2,zero
1010397c:	00000506 	br	10103994 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
10103980:	010389c0 	call	1010389c <alt_get_errno>
10103984:	1007883a 	mov	r3,r2
10103988:	00801444 	movi	r2,81
1010398c:	18800015 	stw	r2,0(r3)
    return -1;
10103990:	00bfffc4 	movi	r2,-1
  }
}
10103994:	e037883a 	mov	sp,fp
10103998:	dfc00117 	ldw	ra,4(sp)
1010399c:	df000017 	ldw	fp,0(sp)
101039a0:	dec00204 	addi	sp,sp,8
101039a4:	f800283a 	ret

101039a8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
101039a8:	defffc04 	addi	sp,sp,-16
101039ac:	df000315 	stw	fp,12(sp)
101039b0:	df000304 	addi	fp,sp,12
101039b4:	e13ffd15 	stw	r4,-12(fp)
101039b8:	e17ffe15 	stw	r5,-8(fp)
101039bc:	e1bfff15 	stw	r6,-4(fp)
  return len;
101039c0:	e0bfff17 	ldw	r2,-4(fp)
}
101039c4:	e037883a 	mov	sp,fp
101039c8:	df000017 	ldw	fp,0(sp)
101039cc:	dec00104 	addi	sp,sp,4
101039d0:	f800283a 	ret

101039d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
101039d4:	defffe04 	addi	sp,sp,-8
101039d8:	dfc00115 	stw	ra,4(sp)
101039dc:	df000015 	stw	fp,0(sp)
101039e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
101039e4:	d0a00917 	ldw	r2,-32732(gp)
101039e8:	10000326 	beq	r2,zero,101039f8 <alt_get_errno+0x24>
101039ec:	d0a00917 	ldw	r2,-32732(gp)
101039f0:	103ee83a 	callr	r2
101039f4:	00000106 	br	101039fc <alt_get_errno+0x28>
101039f8:	d0a6da04 	addi	r2,gp,-25752
}
101039fc:	e037883a 	mov	sp,fp
10103a00:	dfc00117 	ldw	ra,4(sp)
10103a04:	df000017 	ldw	fp,0(sp)
10103a08:	dec00204 	addi	sp,sp,8
10103a0c:	f800283a 	ret

10103a10 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
10103a10:	defffb04 	addi	sp,sp,-20
10103a14:	dfc00415 	stw	ra,16(sp)
10103a18:	df000315 	stw	fp,12(sp)
10103a1c:	df000304 	addi	fp,sp,12
10103a20:	e13ffe15 	stw	r4,-8(fp)
10103a24:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10103a28:	e0bffe17 	ldw	r2,-8(fp)
10103a2c:	10000616 	blt	r2,zero,10103a48 <fstat+0x38>
10103a30:	e0bffe17 	ldw	r2,-8(fp)
10103a34:	10c00324 	muli	r3,r2,12
10103a38:	00840434 	movhi	r2,4112
10103a3c:	109b3c04 	addi	r2,r2,27888
10103a40:	1885883a 	add	r2,r3,r2
10103a44:	00000106 	br	10103a4c <fstat+0x3c>
10103a48:	0005883a 	mov	r2,zero
10103a4c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
10103a50:	e0bffd17 	ldw	r2,-12(fp)
10103a54:	10001026 	beq	r2,zero,10103a98 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
10103a58:	e0bffd17 	ldw	r2,-12(fp)
10103a5c:	10800017 	ldw	r2,0(r2)
10103a60:	10800817 	ldw	r2,32(r2)
10103a64:	10000726 	beq	r2,zero,10103a84 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
10103a68:	e0bffd17 	ldw	r2,-12(fp)
10103a6c:	10800017 	ldw	r2,0(r2)
10103a70:	10800817 	ldw	r2,32(r2)
10103a74:	e17fff17 	ldw	r5,-4(fp)
10103a78:	e13ffd17 	ldw	r4,-12(fp)
10103a7c:	103ee83a 	callr	r2
10103a80:	00000a06 	br	10103aac <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
10103a84:	e0bfff17 	ldw	r2,-4(fp)
10103a88:	00c80004 	movi	r3,8192
10103a8c:	10c00115 	stw	r3,4(r2)
      return 0;
10103a90:	0005883a 	mov	r2,zero
10103a94:	00000506 	br	10103aac <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
10103a98:	01039d40 	call	101039d4 <alt_get_errno>
10103a9c:	1007883a 	mov	r3,r2
10103aa0:	00801444 	movi	r2,81
10103aa4:	18800015 	stw	r2,0(r3)
    return -1;
10103aa8:	00bfffc4 	movi	r2,-1
  }
}
10103aac:	e037883a 	mov	sp,fp
10103ab0:	dfc00117 	ldw	ra,4(sp)
10103ab4:	df000017 	ldw	fp,0(sp)
10103ab8:	dec00204 	addi	sp,sp,8
10103abc:	f800283a 	ret

10103ac0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10103ac0:	defffe04 	addi	sp,sp,-8
10103ac4:	dfc00115 	stw	ra,4(sp)
10103ac8:	df000015 	stw	fp,0(sp)
10103acc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10103ad0:	d0a00917 	ldw	r2,-32732(gp)
10103ad4:	10000326 	beq	r2,zero,10103ae4 <alt_get_errno+0x24>
10103ad8:	d0a00917 	ldw	r2,-32732(gp)
10103adc:	103ee83a 	callr	r2
10103ae0:	00000106 	br	10103ae8 <alt_get_errno+0x28>
10103ae4:	d0a6da04 	addi	r2,gp,-25752
}
10103ae8:	e037883a 	mov	sp,fp
10103aec:	dfc00117 	ldw	ra,4(sp)
10103af0:	df000017 	ldw	fp,0(sp)
10103af4:	dec00204 	addi	sp,sp,8
10103af8:	f800283a 	ret

10103afc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
10103afc:	deffed04 	addi	sp,sp,-76
10103b00:	dfc01215 	stw	ra,72(sp)
10103b04:	df001115 	stw	fp,68(sp)
10103b08:	df001104 	addi	fp,sp,68
10103b0c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10103b10:	e0bfff17 	ldw	r2,-4(fp)
10103b14:	10000616 	blt	r2,zero,10103b30 <isatty+0x34>
10103b18:	e0bfff17 	ldw	r2,-4(fp)
10103b1c:	10c00324 	muli	r3,r2,12
10103b20:	00840434 	movhi	r2,4112
10103b24:	109b3c04 	addi	r2,r2,27888
10103b28:	1885883a 	add	r2,r3,r2
10103b2c:	00000106 	br	10103b34 <isatty+0x38>
10103b30:	0005883a 	mov	r2,zero
10103b34:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
10103b38:	e0bfef17 	ldw	r2,-68(fp)
10103b3c:	10000e26 	beq	r2,zero,10103b78 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
10103b40:	e0bfef17 	ldw	r2,-68(fp)
10103b44:	10800017 	ldw	r2,0(r2)
10103b48:	10800817 	ldw	r2,32(r2)
10103b4c:	1000021e 	bne	r2,zero,10103b58 <isatty+0x5c>
    {
      return 1;
10103b50:	00800044 	movi	r2,1
10103b54:	00000d06 	br	10103b8c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
10103b58:	e0bff004 	addi	r2,fp,-64
10103b5c:	100b883a 	mov	r5,r2
10103b60:	e13fff17 	ldw	r4,-4(fp)
10103b64:	0103a100 	call	10103a10 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
10103b68:	e0bff117 	ldw	r2,-60(fp)
10103b6c:	10880020 	cmpeqi	r2,r2,8192
10103b70:	10803fcc 	andi	r2,r2,255
10103b74:	00000506 	br	10103b8c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
10103b78:	0103ac00 	call	10103ac0 <alt_get_errno>
10103b7c:	1007883a 	mov	r3,r2
10103b80:	00801444 	movi	r2,81
10103b84:	18800015 	stw	r2,0(r3)
    return 0;
10103b88:	0005883a 	mov	r2,zero
  }
}
10103b8c:	e037883a 	mov	sp,fp
10103b90:	dfc00117 	ldw	ra,4(sp)
10103b94:	df000017 	ldw	fp,0(sp)
10103b98:	dec00204 	addi	sp,sp,8
10103b9c:	f800283a 	ret

10103ba0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
10103ba0:	defffc04 	addi	sp,sp,-16
10103ba4:	df000315 	stw	fp,12(sp)
10103ba8:	df000304 	addi	fp,sp,12
10103bac:	e13ffd15 	stw	r4,-12(fp)
10103bb0:	e17ffe15 	stw	r5,-8(fp)
10103bb4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
10103bb8:	e0fffe17 	ldw	r3,-8(fp)
10103bbc:	e0bffd17 	ldw	r2,-12(fp)
10103bc0:	18800c26 	beq	r3,r2,10103bf4 <alt_load_section+0x54>
  {
    while( to != end )
10103bc4:	00000806 	br	10103be8 <alt_load_section+0x48>
    {
      *to++ = *from++;
10103bc8:	e0bffe17 	ldw	r2,-8(fp)
10103bcc:	10c00104 	addi	r3,r2,4
10103bd0:	e0fffe15 	stw	r3,-8(fp)
10103bd4:	e0fffd17 	ldw	r3,-12(fp)
10103bd8:	19000104 	addi	r4,r3,4
10103bdc:	e13ffd15 	stw	r4,-12(fp)
10103be0:	18c00017 	ldw	r3,0(r3)
10103be4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
10103be8:	e0fffe17 	ldw	r3,-8(fp)
10103bec:	e0bfff17 	ldw	r2,-4(fp)
10103bf0:	18bff51e 	bne	r3,r2,10103bc8 <__alt_data_end+0xfffe3bc8>
    {
      *to++ = *from++;
    }
  }
}
10103bf4:	0001883a 	nop
10103bf8:	e037883a 	mov	sp,fp
10103bfc:	df000017 	ldw	fp,0(sp)
10103c00:	dec00104 	addi	sp,sp,4
10103c04:	f800283a 	ret

10103c08 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
10103c08:	defffe04 	addi	sp,sp,-8
10103c0c:	dfc00115 	stw	ra,4(sp)
10103c10:	df000015 	stw	fp,0(sp)
10103c14:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
10103c18:	01840434 	movhi	r6,4112
10103c1c:	319fde04 	addi	r6,r6,32632
10103c20:	01440434 	movhi	r5,4112
10103c24:	29592704 	addi	r5,r5,25756
10103c28:	01040434 	movhi	r4,4112
10103c2c:	211fde04 	addi	r4,r4,32632
10103c30:	0103ba00 	call	10103ba0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
10103c34:	01840434 	movhi	r6,4112
10103c38:	31809104 	addi	r6,r6,580
10103c3c:	01440434 	movhi	r5,4112
10103c40:	29400804 	addi	r5,r5,32
10103c44:	01040434 	movhi	r4,4112
10103c48:	21000804 	addi	r4,r4,32
10103c4c:	0103ba00 	call	10103ba0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
10103c50:	01840434 	movhi	r6,4112
10103c54:	31992704 	addi	r6,r6,25756
10103c58:	01440434 	movhi	r5,4112
10103c5c:	29591304 	addi	r5,r5,25676
10103c60:	01040434 	movhi	r4,4112
10103c64:	21191304 	addi	r4,r4,25676
10103c68:	0103ba00 	call	10103ba0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
10103c6c:	01052b80 	call	101052b8 <alt_dcache_flush_all>
  alt_icache_flush_all();
10103c70:	01055200 	call	10105520 <alt_icache_flush_all>
}
10103c74:	0001883a 	nop
10103c78:	e037883a 	mov	sp,fp
10103c7c:	dfc00117 	ldw	ra,4(sp)
10103c80:	df000017 	ldw	fp,0(sp)
10103c84:	dec00204 	addi	sp,sp,8
10103c88:	f800283a 	ret

10103c8c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10103c8c:	defffe04 	addi	sp,sp,-8
10103c90:	dfc00115 	stw	ra,4(sp)
10103c94:	df000015 	stw	fp,0(sp)
10103c98:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10103c9c:	d0a00917 	ldw	r2,-32732(gp)
10103ca0:	10000326 	beq	r2,zero,10103cb0 <alt_get_errno+0x24>
10103ca4:	d0a00917 	ldw	r2,-32732(gp)
10103ca8:	103ee83a 	callr	r2
10103cac:	00000106 	br	10103cb4 <alt_get_errno+0x28>
10103cb0:	d0a6da04 	addi	r2,gp,-25752
}
10103cb4:	e037883a 	mov	sp,fp
10103cb8:	dfc00117 	ldw	ra,4(sp)
10103cbc:	df000017 	ldw	fp,0(sp)
10103cc0:	dec00204 	addi	sp,sp,8
10103cc4:	f800283a 	ret

10103cc8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
10103cc8:	defff904 	addi	sp,sp,-28
10103ccc:	dfc00615 	stw	ra,24(sp)
10103cd0:	df000515 	stw	fp,20(sp)
10103cd4:	df000504 	addi	fp,sp,20
10103cd8:	e13ffd15 	stw	r4,-12(fp)
10103cdc:	e17ffe15 	stw	r5,-8(fp)
10103ce0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
10103ce4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10103ce8:	e0bffd17 	ldw	r2,-12(fp)
10103cec:	10000616 	blt	r2,zero,10103d08 <lseek+0x40>
10103cf0:	e0bffd17 	ldw	r2,-12(fp)
10103cf4:	10c00324 	muli	r3,r2,12
10103cf8:	00840434 	movhi	r2,4112
10103cfc:	109b3c04 	addi	r2,r2,27888
10103d00:	1885883a 	add	r2,r3,r2
10103d04:	00000106 	br	10103d0c <lseek+0x44>
10103d08:	0005883a 	mov	r2,zero
10103d0c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
10103d10:	e0bffc17 	ldw	r2,-16(fp)
10103d14:	10001026 	beq	r2,zero,10103d58 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
10103d18:	e0bffc17 	ldw	r2,-16(fp)
10103d1c:	10800017 	ldw	r2,0(r2)
10103d20:	10800717 	ldw	r2,28(r2)
10103d24:	10000926 	beq	r2,zero,10103d4c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
10103d28:	e0bffc17 	ldw	r2,-16(fp)
10103d2c:	10800017 	ldw	r2,0(r2)
10103d30:	10800717 	ldw	r2,28(r2)
10103d34:	e1bfff17 	ldw	r6,-4(fp)
10103d38:	e17ffe17 	ldw	r5,-8(fp)
10103d3c:	e13ffc17 	ldw	r4,-16(fp)
10103d40:	103ee83a 	callr	r2
10103d44:	e0bffb15 	stw	r2,-20(fp)
10103d48:	00000506 	br	10103d60 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
10103d4c:	00bfde84 	movi	r2,-134
10103d50:	e0bffb15 	stw	r2,-20(fp)
10103d54:	00000206 	br	10103d60 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
10103d58:	00bfebc4 	movi	r2,-81
10103d5c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
10103d60:	e0bffb17 	ldw	r2,-20(fp)
10103d64:	1000070e 	bge	r2,zero,10103d84 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
10103d68:	0103c8c0 	call	10103c8c <alt_get_errno>
10103d6c:	1007883a 	mov	r3,r2
10103d70:	e0bffb17 	ldw	r2,-20(fp)
10103d74:	0085c83a 	sub	r2,zero,r2
10103d78:	18800015 	stw	r2,0(r3)
    rc = -1;
10103d7c:	00bfffc4 	movi	r2,-1
10103d80:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
10103d84:	e0bffb17 	ldw	r2,-20(fp)
}
10103d88:	e037883a 	mov	sp,fp
10103d8c:	dfc00117 	ldw	ra,4(sp)
10103d90:	df000017 	ldw	fp,0(sp)
10103d94:	dec00204 	addi	sp,sp,8
10103d98:	f800283a 	ret

10103d9c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
10103d9c:	defffd04 	addi	sp,sp,-12
10103da0:	dfc00215 	stw	ra,8(sp)
10103da4:	df000115 	stw	fp,4(sp)
10103da8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
10103dac:	0009883a 	mov	r4,zero
10103db0:	01042140 	call	10104214 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
10103db4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
10103db8:	010424c0 	call	1010424c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
10103dbc:	01840434 	movhi	r6,4112
10103dc0:	31991a04 	addi	r6,r6,25704
10103dc4:	01440434 	movhi	r5,4112
10103dc8:	29591a04 	addi	r5,r5,25704
10103dcc:	01040434 	movhi	r4,4112
10103dd0:	21191a04 	addi	r4,r4,25704
10103dd4:	01058b80 	call	101058b8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
10103dd8:	01053e00 	call	101053e0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
10103ddc:	01040434 	movhi	r4,4112
10103de0:	21151004 	addi	r4,r4,21568
10103de4:	01060b80 	call	101060b8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
10103de8:	d0a6db17 	ldw	r2,-25748(gp)
10103dec:	d0e6dc17 	ldw	r3,-25744(gp)
10103df0:	d126dd17 	ldw	r4,-25740(gp)
10103df4:	200d883a 	mov	r6,r4
10103df8:	180b883a 	mov	r5,r3
10103dfc:	1009883a 	mov	r4,r2
10103e00:	0100a600 	call	10100a60 <main>
10103e04:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
10103e08:	01000044 	movi	r4,1
10103e0c:	01038d80 	call	101038d8 <close>
  exit (result);
10103e10:	e13fff17 	ldw	r4,-4(fp)
10103e14:	01060cc0 	call	101060cc <exit>

10103e18 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
10103e18:	defffe04 	addi	sp,sp,-8
10103e1c:	df000115 	stw	fp,4(sp)
10103e20:	df000104 	addi	fp,sp,4
10103e24:	e13fff15 	stw	r4,-4(fp)
}
10103e28:	0001883a 	nop
10103e2c:	e037883a 	mov	sp,fp
10103e30:	df000017 	ldw	fp,0(sp)
10103e34:	dec00104 	addi	sp,sp,4
10103e38:	f800283a 	ret

10103e3c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
10103e3c:	defffe04 	addi	sp,sp,-8
10103e40:	df000115 	stw	fp,4(sp)
10103e44:	df000104 	addi	fp,sp,4
10103e48:	e13fff15 	stw	r4,-4(fp)
}
10103e4c:	0001883a 	nop
10103e50:	e037883a 	mov	sp,fp
10103e54:	df000017 	ldw	fp,0(sp)
10103e58:	dec00104 	addi	sp,sp,4
10103e5c:	f800283a 	ret

10103e60 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10103e60:	defffe04 	addi	sp,sp,-8
10103e64:	dfc00115 	stw	ra,4(sp)
10103e68:	df000015 	stw	fp,0(sp)
10103e6c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10103e70:	d0a00917 	ldw	r2,-32732(gp)
10103e74:	10000326 	beq	r2,zero,10103e84 <alt_get_errno+0x24>
10103e78:	d0a00917 	ldw	r2,-32732(gp)
10103e7c:	103ee83a 	callr	r2
10103e80:	00000106 	br	10103e88 <alt_get_errno+0x28>
10103e84:	d0a6da04 	addi	r2,gp,-25752
}
10103e88:	e037883a 	mov	sp,fp
10103e8c:	dfc00117 	ldw	ra,4(sp)
10103e90:	df000017 	ldw	fp,0(sp)
10103e94:	dec00204 	addi	sp,sp,8
10103e98:	f800283a 	ret

10103e9c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
10103e9c:	defff904 	addi	sp,sp,-28
10103ea0:	dfc00615 	stw	ra,24(sp)
10103ea4:	df000515 	stw	fp,20(sp)
10103ea8:	df000504 	addi	fp,sp,20
10103eac:	e13ffd15 	stw	r4,-12(fp)
10103eb0:	e17ffe15 	stw	r5,-8(fp)
10103eb4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10103eb8:	e0bffd17 	ldw	r2,-12(fp)
10103ebc:	10000616 	blt	r2,zero,10103ed8 <read+0x3c>
10103ec0:	e0bffd17 	ldw	r2,-12(fp)
10103ec4:	10c00324 	muli	r3,r2,12
10103ec8:	00840434 	movhi	r2,4112
10103ecc:	109b3c04 	addi	r2,r2,27888
10103ed0:	1885883a 	add	r2,r3,r2
10103ed4:	00000106 	br	10103edc <read+0x40>
10103ed8:	0005883a 	mov	r2,zero
10103edc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10103ee0:	e0bffb17 	ldw	r2,-20(fp)
10103ee4:	10002226 	beq	r2,zero,10103f70 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10103ee8:	e0bffb17 	ldw	r2,-20(fp)
10103eec:	10800217 	ldw	r2,8(r2)
10103ef0:	108000cc 	andi	r2,r2,3
10103ef4:	10800060 	cmpeqi	r2,r2,1
10103ef8:	1000181e 	bne	r2,zero,10103f5c <read+0xc0>
        (fd->dev->read))
10103efc:	e0bffb17 	ldw	r2,-20(fp)
10103f00:	10800017 	ldw	r2,0(r2)
10103f04:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10103f08:	10001426 	beq	r2,zero,10103f5c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
10103f0c:	e0bffb17 	ldw	r2,-20(fp)
10103f10:	10800017 	ldw	r2,0(r2)
10103f14:	10800517 	ldw	r2,20(r2)
10103f18:	e0ffff17 	ldw	r3,-4(fp)
10103f1c:	180d883a 	mov	r6,r3
10103f20:	e17ffe17 	ldw	r5,-8(fp)
10103f24:	e13ffb17 	ldw	r4,-20(fp)
10103f28:	103ee83a 	callr	r2
10103f2c:	e0bffc15 	stw	r2,-16(fp)
10103f30:	e0bffc17 	ldw	r2,-16(fp)
10103f34:	1000070e 	bge	r2,zero,10103f54 <read+0xb8>
        {
          ALT_ERRNO = -rval;
10103f38:	0103e600 	call	10103e60 <alt_get_errno>
10103f3c:	1007883a 	mov	r3,r2
10103f40:	e0bffc17 	ldw	r2,-16(fp)
10103f44:	0085c83a 	sub	r2,zero,r2
10103f48:	18800015 	stw	r2,0(r3)
          return -1;
10103f4c:	00bfffc4 	movi	r2,-1
10103f50:	00000c06 	br	10103f84 <read+0xe8>
        }
        return rval;
10103f54:	e0bffc17 	ldw	r2,-16(fp)
10103f58:	00000a06 	br	10103f84 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
10103f5c:	0103e600 	call	10103e60 <alt_get_errno>
10103f60:	1007883a 	mov	r3,r2
10103f64:	00800344 	movi	r2,13
10103f68:	18800015 	stw	r2,0(r3)
10103f6c:	00000406 	br	10103f80 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
10103f70:	0103e600 	call	10103e60 <alt_get_errno>
10103f74:	1007883a 	mov	r3,r2
10103f78:	00801444 	movi	r2,81
10103f7c:	18800015 	stw	r2,0(r3)
  }
  return -1;
10103f80:	00bfffc4 	movi	r2,-1
}
10103f84:	e037883a 	mov	sp,fp
10103f88:	dfc00117 	ldw	ra,4(sp)
10103f8c:	df000017 	ldw	fp,0(sp)
10103f90:	dec00204 	addi	sp,sp,8
10103f94:	f800283a 	ret

10103f98 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
10103f98:	defffe04 	addi	sp,sp,-8
10103f9c:	df000115 	stw	fp,4(sp)
10103fa0:	df000104 	addi	fp,sp,4
10103fa4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
10103fa8:	e0bfff17 	ldw	r2,-4(fp)
10103fac:	108000d0 	cmplti	r2,r2,3
10103fb0:	10000d1e 	bne	r2,zero,10103fe8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
10103fb4:	00840434 	movhi	r2,4112
10103fb8:	109b3c04 	addi	r2,r2,27888
10103fbc:	e0ffff17 	ldw	r3,-4(fp)
10103fc0:	18c00324 	muli	r3,r3,12
10103fc4:	10c5883a 	add	r2,r2,r3
10103fc8:	10800204 	addi	r2,r2,8
10103fcc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
10103fd0:	00840434 	movhi	r2,4112
10103fd4:	109b3c04 	addi	r2,r2,27888
10103fd8:	e0ffff17 	ldw	r3,-4(fp)
10103fdc:	18c00324 	muli	r3,r3,12
10103fe0:	10c5883a 	add	r2,r2,r3
10103fe4:	10000015 	stw	zero,0(r2)
  }
}
10103fe8:	0001883a 	nop
10103fec:	e037883a 	mov	sp,fp
10103ff0:	df000017 	ldw	fp,0(sp)
10103ff4:	dec00104 	addi	sp,sp,4
10103ff8:	f800283a 	ret

10103ffc <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
10103ffc:	defff904 	addi	sp,sp,-28
10104000:	df000615 	stw	fp,24(sp)
10104004:	df000604 	addi	fp,sp,24
10104008:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1010400c:	0005303a 	rdctl	r2,status
10104010:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10104014:	e0fffe17 	ldw	r3,-8(fp)
10104018:	00bfff84 	movi	r2,-2
1010401c:	1884703a 	and	r2,r3,r2
10104020:	1001703a 	wrctl	status,r2
  
  return context;
10104024:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
10104028:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
1010402c:	d0a00a17 	ldw	r2,-32728(gp)
10104030:	10c000c4 	addi	r3,r2,3
10104034:	00bfff04 	movi	r2,-4
10104038:	1884703a 	and	r2,r3,r2
1010403c:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
10104040:	d0e00a17 	ldw	r3,-32728(gp)
10104044:	e0bfff17 	ldw	r2,-4(fp)
10104048:	1887883a 	add	r3,r3,r2
1010404c:	008404b4 	movhi	r2,4114
10104050:	10800004 	addi	r2,r2,0
10104054:	10c0062e 	bgeu	r2,r3,10104070 <sbrk+0x74>
10104058:	e0bffb17 	ldw	r2,-20(fp)
1010405c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10104060:	e0bffa17 	ldw	r2,-24(fp)
10104064:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
10104068:	00bfffc4 	movi	r2,-1
1010406c:	00000b06 	br	1010409c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
10104070:	d0a00a17 	ldw	r2,-32728(gp)
10104074:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
10104078:	d0e00a17 	ldw	r3,-32728(gp)
1010407c:	e0bfff17 	ldw	r2,-4(fp)
10104080:	1885883a 	add	r2,r3,r2
10104084:	d0a00a15 	stw	r2,-32728(gp)
10104088:	e0bffb17 	ldw	r2,-20(fp)
1010408c:	e0bffc15 	stw	r2,-16(fp)
10104090:	e0bffc17 	ldw	r2,-16(fp)
10104094:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
10104098:	e0bffd17 	ldw	r2,-12(fp)
} 
1010409c:	e037883a 	mov	sp,fp
101040a0:	df000017 	ldw	fp,0(sp)
101040a4:	dec00104 	addi	sp,sp,4
101040a8:	f800283a 	ret

101040ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
101040ac:	defffe04 	addi	sp,sp,-8
101040b0:	dfc00115 	stw	ra,4(sp)
101040b4:	df000015 	stw	fp,0(sp)
101040b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
101040bc:	d0a00917 	ldw	r2,-32732(gp)
101040c0:	10000326 	beq	r2,zero,101040d0 <alt_get_errno+0x24>
101040c4:	d0a00917 	ldw	r2,-32732(gp)
101040c8:	103ee83a 	callr	r2
101040cc:	00000106 	br	101040d4 <alt_get_errno+0x28>
101040d0:	d0a6da04 	addi	r2,gp,-25752
}
101040d4:	e037883a 	mov	sp,fp
101040d8:	dfc00117 	ldw	ra,4(sp)
101040dc:	df000017 	ldw	fp,0(sp)
101040e0:	dec00204 	addi	sp,sp,8
101040e4:	f800283a 	ret

101040e8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
101040e8:	defff904 	addi	sp,sp,-28
101040ec:	dfc00615 	stw	ra,24(sp)
101040f0:	df000515 	stw	fp,20(sp)
101040f4:	df000504 	addi	fp,sp,20
101040f8:	e13ffd15 	stw	r4,-12(fp)
101040fc:	e17ffe15 	stw	r5,-8(fp)
10104100:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10104104:	e0bffd17 	ldw	r2,-12(fp)
10104108:	10000616 	blt	r2,zero,10104124 <write+0x3c>
1010410c:	e0bffd17 	ldw	r2,-12(fp)
10104110:	10c00324 	muli	r3,r2,12
10104114:	00840434 	movhi	r2,4112
10104118:	109b3c04 	addi	r2,r2,27888
1010411c:	1885883a 	add	r2,r3,r2
10104120:	00000106 	br	10104128 <write+0x40>
10104124:	0005883a 	mov	r2,zero
10104128:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1010412c:	e0bffb17 	ldw	r2,-20(fp)
10104130:	10002126 	beq	r2,zero,101041b8 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
10104134:	e0bffb17 	ldw	r2,-20(fp)
10104138:	10800217 	ldw	r2,8(r2)
1010413c:	108000cc 	andi	r2,r2,3
10104140:	10001826 	beq	r2,zero,101041a4 <write+0xbc>
10104144:	e0bffb17 	ldw	r2,-20(fp)
10104148:	10800017 	ldw	r2,0(r2)
1010414c:	10800617 	ldw	r2,24(r2)
10104150:	10001426 	beq	r2,zero,101041a4 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
10104154:	e0bffb17 	ldw	r2,-20(fp)
10104158:	10800017 	ldw	r2,0(r2)
1010415c:	10800617 	ldw	r2,24(r2)
10104160:	e0ffff17 	ldw	r3,-4(fp)
10104164:	180d883a 	mov	r6,r3
10104168:	e17ffe17 	ldw	r5,-8(fp)
1010416c:	e13ffb17 	ldw	r4,-20(fp)
10104170:	103ee83a 	callr	r2
10104174:	e0bffc15 	stw	r2,-16(fp)
10104178:	e0bffc17 	ldw	r2,-16(fp)
1010417c:	1000070e 	bge	r2,zero,1010419c <write+0xb4>
      {
        ALT_ERRNO = -rval;
10104180:	01040ac0 	call	101040ac <alt_get_errno>
10104184:	1007883a 	mov	r3,r2
10104188:	e0bffc17 	ldw	r2,-16(fp)
1010418c:	0085c83a 	sub	r2,zero,r2
10104190:	18800015 	stw	r2,0(r3)
        return -1;
10104194:	00bfffc4 	movi	r2,-1
10104198:	00000c06 	br	101041cc <write+0xe4>
      }
      return rval;
1010419c:	e0bffc17 	ldw	r2,-16(fp)
101041a0:	00000a06 	br	101041cc <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
101041a4:	01040ac0 	call	101040ac <alt_get_errno>
101041a8:	1007883a 	mov	r3,r2
101041ac:	00800344 	movi	r2,13
101041b0:	18800015 	stw	r2,0(r3)
101041b4:	00000406 	br	101041c8 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
101041b8:	01040ac0 	call	101040ac <alt_get_errno>
101041bc:	1007883a 	mov	r3,r2
101041c0:	00801444 	movi	r2,81
101041c4:	18800015 	stw	r2,0(r3)
  }
  return -1;
101041c8:	00bfffc4 	movi	r2,-1
}
101041cc:	e037883a 	mov	sp,fp
101041d0:	dfc00117 	ldw	ra,4(sp)
101041d4:	df000017 	ldw	fp,0(sp)
101041d8:	dec00204 	addi	sp,sp,8
101041dc:	f800283a 	ret

101041e0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
101041e0:	defffd04 	addi	sp,sp,-12
101041e4:	dfc00215 	stw	ra,8(sp)
101041e8:	df000115 	stw	fp,4(sp)
101041ec:	df000104 	addi	fp,sp,4
101041f0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
101041f4:	d1600604 	addi	r5,gp,-32744
101041f8:	e13fff17 	ldw	r4,-4(fp)
101041fc:	010533c0 	call	1010533c <alt_dev_llist_insert>
}
10104200:	e037883a 	mov	sp,fp
10104204:	dfc00117 	ldw	ra,4(sp)
10104208:	df000017 	ldw	fp,0(sp)
1010420c:	dec00204 	addi	sp,sp,8
10104210:	f800283a 	ret

10104214 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
10104214:	defffd04 	addi	sp,sp,-12
10104218:	dfc00215 	stw	ra,8(sp)
1010421c:	df000115 	stw	fp,4(sp)
10104220:	df000104 	addi	fp,sp,4
10104224:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
10104228:	0105d2c0 	call	10105d2c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
1010422c:	00800044 	movi	r2,1
10104230:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
10104234:	0001883a 	nop
10104238:	e037883a 	mov	sp,fp
1010423c:	dfc00117 	ldw	ra,4(sp)
10104240:	df000017 	ldw	fp,0(sp)
10104244:	dec00204 	addi	sp,sp,8
10104248:	f800283a 	ret

1010424c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
1010424c:	defffe04 	addi	sp,sp,-8
10104250:	dfc00115 	stw	ra,4(sp)
10104254:	df000015 	stw	fp,0(sp)
10104258:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
1010425c:	000d883a 	mov	r6,zero
10104260:	000b883a 	mov	r5,zero
10104264:	01040434 	movhi	r4,4112
10104268:	211ba604 	addi	r4,r4,28312
1010426c:	01044040 	call	10104404 <altera_avalon_jtag_uart_init>
10104270:	01040434 	movhi	r4,4112
10104274:	211b9c04 	addi	r4,r4,28272
10104278:	01041e00 	call	101041e0 <alt_dev_reg>
    ALTERA_HOSTFS_INIT ( ALTERA_HOSTFS, altera_hostfs);
1010427c:	01040434 	movhi	r4,4112
10104280:	211fb404 	addi	r4,r4,32464
10104284:	01054a00 	call	101054a0 <alt_fs_reg>
}
10104288:	0001883a 	nop
1010428c:	e037883a 	mov	sp,fp
10104290:	dfc00117 	ldw	ra,4(sp)
10104294:	df000017 	ldw	fp,0(sp)
10104298:	dec00204 	addi	sp,sp,8
1010429c:	f800283a 	ret

101042a0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
101042a0:	defffa04 	addi	sp,sp,-24
101042a4:	dfc00515 	stw	ra,20(sp)
101042a8:	df000415 	stw	fp,16(sp)
101042ac:	df000404 	addi	fp,sp,16
101042b0:	e13ffd15 	stw	r4,-12(fp)
101042b4:	e17ffe15 	stw	r5,-8(fp)
101042b8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
101042bc:	e0bffd17 	ldw	r2,-12(fp)
101042c0:	10800017 	ldw	r2,0(r2)
101042c4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
101042c8:	e0bffc17 	ldw	r2,-16(fp)
101042cc:	10c00a04 	addi	r3,r2,40
101042d0:	e0bffd17 	ldw	r2,-12(fp)
101042d4:	10800217 	ldw	r2,8(r2)
101042d8:	100f883a 	mov	r7,r2
101042dc:	e1bfff17 	ldw	r6,-4(fp)
101042e0:	e17ffe17 	ldw	r5,-8(fp)
101042e4:	1809883a 	mov	r4,r3
101042e8:	01048c80 	call	101048c8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
101042ec:	e037883a 	mov	sp,fp
101042f0:	dfc00117 	ldw	ra,4(sp)
101042f4:	df000017 	ldw	fp,0(sp)
101042f8:	dec00204 	addi	sp,sp,8
101042fc:	f800283a 	ret

10104300 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
10104300:	defffa04 	addi	sp,sp,-24
10104304:	dfc00515 	stw	ra,20(sp)
10104308:	df000415 	stw	fp,16(sp)
1010430c:	df000404 	addi	fp,sp,16
10104310:	e13ffd15 	stw	r4,-12(fp)
10104314:	e17ffe15 	stw	r5,-8(fp)
10104318:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1010431c:	e0bffd17 	ldw	r2,-12(fp)
10104320:	10800017 	ldw	r2,0(r2)
10104324:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
10104328:	e0bffc17 	ldw	r2,-16(fp)
1010432c:	10c00a04 	addi	r3,r2,40
10104330:	e0bffd17 	ldw	r2,-12(fp)
10104334:	10800217 	ldw	r2,8(r2)
10104338:	100f883a 	mov	r7,r2
1010433c:	e1bfff17 	ldw	r6,-4(fp)
10104340:	e17ffe17 	ldw	r5,-8(fp)
10104344:	1809883a 	mov	r4,r3
10104348:	0104ae40 	call	10104ae4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
1010434c:	e037883a 	mov	sp,fp
10104350:	dfc00117 	ldw	ra,4(sp)
10104354:	df000017 	ldw	fp,0(sp)
10104358:	dec00204 	addi	sp,sp,8
1010435c:	f800283a 	ret

10104360 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
10104360:	defffc04 	addi	sp,sp,-16
10104364:	dfc00315 	stw	ra,12(sp)
10104368:	df000215 	stw	fp,8(sp)
1010436c:	df000204 	addi	fp,sp,8
10104370:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10104374:	e0bfff17 	ldw	r2,-4(fp)
10104378:	10800017 	ldw	r2,0(r2)
1010437c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
10104380:	e0bffe17 	ldw	r2,-8(fp)
10104384:	10c00a04 	addi	r3,r2,40
10104388:	e0bfff17 	ldw	r2,-4(fp)
1010438c:	10800217 	ldw	r2,8(r2)
10104390:	100b883a 	mov	r5,r2
10104394:	1809883a 	mov	r4,r3
10104398:	01047700 	call	10104770 <altera_avalon_jtag_uart_close>
}
1010439c:	e037883a 	mov	sp,fp
101043a0:	dfc00117 	ldw	ra,4(sp)
101043a4:	df000017 	ldw	fp,0(sp)
101043a8:	dec00204 	addi	sp,sp,8
101043ac:	f800283a 	ret

101043b0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
101043b0:	defffa04 	addi	sp,sp,-24
101043b4:	dfc00515 	stw	ra,20(sp)
101043b8:	df000415 	stw	fp,16(sp)
101043bc:	df000404 	addi	fp,sp,16
101043c0:	e13ffd15 	stw	r4,-12(fp)
101043c4:	e17ffe15 	stw	r5,-8(fp)
101043c8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
101043cc:	e0bffd17 	ldw	r2,-12(fp)
101043d0:	10800017 	ldw	r2,0(r2)
101043d4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
101043d8:	e0bffc17 	ldw	r2,-16(fp)
101043dc:	10800a04 	addi	r2,r2,40
101043e0:	e1bfff17 	ldw	r6,-4(fp)
101043e4:	e17ffe17 	ldw	r5,-8(fp)
101043e8:	1009883a 	mov	r4,r2
101043ec:	01047d80 	call	101047d8 <altera_avalon_jtag_uart_ioctl>
}
101043f0:	e037883a 	mov	sp,fp
101043f4:	dfc00117 	ldw	ra,4(sp)
101043f8:	df000017 	ldw	fp,0(sp)
101043fc:	dec00204 	addi	sp,sp,8
10104400:	f800283a 	ret

10104404 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
10104404:	defffa04 	addi	sp,sp,-24
10104408:	dfc00515 	stw	ra,20(sp)
1010440c:	df000415 	stw	fp,16(sp)
10104410:	df000404 	addi	fp,sp,16
10104414:	e13ffd15 	stw	r4,-12(fp)
10104418:	e17ffe15 	stw	r5,-8(fp)
1010441c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10104420:	e0bffd17 	ldw	r2,-12(fp)
10104424:	00c00044 	movi	r3,1
10104428:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
1010442c:	e0bffd17 	ldw	r2,-12(fp)
10104430:	10800017 	ldw	r2,0(r2)
10104434:	10800104 	addi	r2,r2,4
10104438:	1007883a 	mov	r3,r2
1010443c:	e0bffd17 	ldw	r2,-12(fp)
10104440:	10800817 	ldw	r2,32(r2)
10104444:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
10104448:	e0bffe17 	ldw	r2,-8(fp)
1010444c:	e0ffff17 	ldw	r3,-4(fp)
10104450:	d8000015 	stw	zero,0(sp)
10104454:	e1fffd17 	ldw	r7,-12(fp)
10104458:	01840434 	movhi	r6,4112
1010445c:	31913104 	addi	r6,r6,17604
10104460:	180b883a 	mov	r5,r3
10104464:	1009883a 	mov	r4,r2
10104468:	01055540 	call	10105554 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
1010446c:	e0bffd17 	ldw	r2,-12(fp)
10104470:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
10104474:	e0bffd17 	ldw	r2,-12(fp)
10104478:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
1010447c:	d0e6df17 	ldw	r3,-25732(gp)
10104480:	e1fffd17 	ldw	r7,-12(fp)
10104484:	01840434 	movhi	r6,4112
10104488:	3191b404 	addi	r6,r6,18128
1010448c:	180b883a 	mov	r5,r3
10104490:	1009883a 	mov	r4,r2
10104494:	010518c0 	call	1010518c <alt_alarm_start>
10104498:	1000040e 	bge	r2,zero,101044ac <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
1010449c:	e0fffd17 	ldw	r3,-12(fp)
101044a0:	00a00034 	movhi	r2,32768
101044a4:	10bfffc4 	addi	r2,r2,-1
101044a8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
101044ac:	0001883a 	nop
101044b0:	e037883a 	mov	sp,fp
101044b4:	dfc00117 	ldw	ra,4(sp)
101044b8:	df000017 	ldw	fp,0(sp)
101044bc:	dec00204 	addi	sp,sp,8
101044c0:	f800283a 	ret

101044c4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
101044c4:	defff804 	addi	sp,sp,-32
101044c8:	df000715 	stw	fp,28(sp)
101044cc:	df000704 	addi	fp,sp,28
101044d0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
101044d4:	e0bfff17 	ldw	r2,-4(fp)
101044d8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
101044dc:	e0bffb17 	ldw	r2,-20(fp)
101044e0:	10800017 	ldw	r2,0(r2)
101044e4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
101044e8:	e0bffc17 	ldw	r2,-16(fp)
101044ec:	10800104 	addi	r2,r2,4
101044f0:	10800037 	ldwio	r2,0(r2)
101044f4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
101044f8:	e0bffd17 	ldw	r2,-12(fp)
101044fc:	1080c00c 	andi	r2,r2,768
10104500:	10006d26 	beq	r2,zero,101046b8 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
10104504:	e0bffd17 	ldw	r2,-12(fp)
10104508:	1080400c 	andi	r2,r2,256
1010450c:	10003526 	beq	r2,zero,101045e4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
10104510:	00800074 	movhi	r2,1
10104514:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10104518:	e0bffb17 	ldw	r2,-20(fp)
1010451c:	10800a17 	ldw	r2,40(r2)
10104520:	10800044 	addi	r2,r2,1
10104524:	1081ffcc 	andi	r2,r2,2047
10104528:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
1010452c:	e0bffb17 	ldw	r2,-20(fp)
10104530:	10c00b17 	ldw	r3,44(r2)
10104534:	e0bffe17 	ldw	r2,-8(fp)
10104538:	18801526 	beq	r3,r2,10104590 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
1010453c:	e0bffc17 	ldw	r2,-16(fp)
10104540:	10800037 	ldwio	r2,0(r2)
10104544:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
10104548:	e0bff917 	ldw	r2,-28(fp)
1010454c:	10a0000c 	andi	r2,r2,32768
10104550:	10001126 	beq	r2,zero,10104598 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
10104554:	e0bffb17 	ldw	r2,-20(fp)
10104558:	10800a17 	ldw	r2,40(r2)
1010455c:	e0fff917 	ldw	r3,-28(fp)
10104560:	1809883a 	mov	r4,r3
10104564:	e0fffb17 	ldw	r3,-20(fp)
10104568:	1885883a 	add	r2,r3,r2
1010456c:	10800e04 	addi	r2,r2,56
10104570:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10104574:	e0bffb17 	ldw	r2,-20(fp)
10104578:	10800a17 	ldw	r2,40(r2)
1010457c:	10800044 	addi	r2,r2,1
10104580:	10c1ffcc 	andi	r3,r2,2047
10104584:	e0bffb17 	ldw	r2,-20(fp)
10104588:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
1010458c:	003fe206 	br	10104518 <__alt_data_end+0xfffe4518>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
10104590:	0001883a 	nop
10104594:	00000106 	br	1010459c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
10104598:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
1010459c:	e0bff917 	ldw	r2,-28(fp)
101045a0:	10bfffec 	andhi	r2,r2,65535
101045a4:	10000f26 	beq	r2,zero,101045e4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
101045a8:	e0bffb17 	ldw	r2,-20(fp)
101045ac:	10c00817 	ldw	r3,32(r2)
101045b0:	00bfff84 	movi	r2,-2
101045b4:	1886703a 	and	r3,r3,r2
101045b8:	e0bffb17 	ldw	r2,-20(fp)
101045bc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
101045c0:	e0bffc17 	ldw	r2,-16(fp)
101045c4:	10800104 	addi	r2,r2,4
101045c8:	1007883a 	mov	r3,r2
101045cc:	e0bffb17 	ldw	r2,-20(fp)
101045d0:	10800817 	ldw	r2,32(r2)
101045d4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
101045d8:	e0bffc17 	ldw	r2,-16(fp)
101045dc:	10800104 	addi	r2,r2,4
101045e0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
101045e4:	e0bffd17 	ldw	r2,-12(fp)
101045e8:	1080800c 	andi	r2,r2,512
101045ec:	103fbe26 	beq	r2,zero,101044e8 <__alt_data_end+0xfffe44e8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
101045f0:	e0bffd17 	ldw	r2,-12(fp)
101045f4:	1004d43a 	srli	r2,r2,16
101045f8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
101045fc:	00001406 	br	10104650 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
10104600:	e0bffc17 	ldw	r2,-16(fp)
10104604:	e0fffb17 	ldw	r3,-20(fp)
10104608:	18c00d17 	ldw	r3,52(r3)
1010460c:	e13ffb17 	ldw	r4,-20(fp)
10104610:	20c7883a 	add	r3,r4,r3
10104614:	18c20e04 	addi	r3,r3,2104
10104618:	18c00003 	ldbu	r3,0(r3)
1010461c:	18c03fcc 	andi	r3,r3,255
10104620:	18c0201c 	xori	r3,r3,128
10104624:	18ffe004 	addi	r3,r3,-128
10104628:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1010462c:	e0bffb17 	ldw	r2,-20(fp)
10104630:	10800d17 	ldw	r2,52(r2)
10104634:	10800044 	addi	r2,r2,1
10104638:	10c1ffcc 	andi	r3,r2,2047
1010463c:	e0bffb17 	ldw	r2,-20(fp)
10104640:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
10104644:	e0bffa17 	ldw	r2,-24(fp)
10104648:	10bfffc4 	addi	r2,r2,-1
1010464c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
10104650:	e0bffa17 	ldw	r2,-24(fp)
10104654:	10000526 	beq	r2,zero,1010466c <altera_avalon_jtag_uart_irq+0x1a8>
10104658:	e0bffb17 	ldw	r2,-20(fp)
1010465c:	10c00d17 	ldw	r3,52(r2)
10104660:	e0bffb17 	ldw	r2,-20(fp)
10104664:	10800c17 	ldw	r2,48(r2)
10104668:	18bfe51e 	bne	r3,r2,10104600 <__alt_data_end+0xfffe4600>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
1010466c:	e0bffa17 	ldw	r2,-24(fp)
10104670:	103f9d26 	beq	r2,zero,101044e8 <__alt_data_end+0xfffe44e8>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10104674:	e0bffb17 	ldw	r2,-20(fp)
10104678:	10c00817 	ldw	r3,32(r2)
1010467c:	00bfff44 	movi	r2,-3
10104680:	1886703a 	and	r3,r3,r2
10104684:	e0bffb17 	ldw	r2,-20(fp)
10104688:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1010468c:	e0bffb17 	ldw	r2,-20(fp)
10104690:	10800017 	ldw	r2,0(r2)
10104694:	10800104 	addi	r2,r2,4
10104698:	1007883a 	mov	r3,r2
1010469c:	e0bffb17 	ldw	r2,-20(fp)
101046a0:	10800817 	ldw	r2,32(r2)
101046a4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
101046a8:	e0bffc17 	ldw	r2,-16(fp)
101046ac:	10800104 	addi	r2,r2,4
101046b0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
101046b4:	003f8c06 	br	101044e8 <__alt_data_end+0xfffe44e8>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
101046b8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
101046bc:	0001883a 	nop
101046c0:	e037883a 	mov	sp,fp
101046c4:	df000017 	ldw	fp,0(sp)
101046c8:	dec00104 	addi	sp,sp,4
101046cc:	f800283a 	ret

101046d0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
101046d0:	defff804 	addi	sp,sp,-32
101046d4:	df000715 	stw	fp,28(sp)
101046d8:	df000704 	addi	fp,sp,28
101046dc:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
101046e0:	e0bffb17 	ldw	r2,-20(fp)
101046e4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
101046e8:	e0bff917 	ldw	r2,-28(fp)
101046ec:	10800017 	ldw	r2,0(r2)
101046f0:	10800104 	addi	r2,r2,4
101046f4:	10800037 	ldwio	r2,0(r2)
101046f8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
101046fc:	e0bffa17 	ldw	r2,-24(fp)
10104700:	1081000c 	andi	r2,r2,1024
10104704:	10000b26 	beq	r2,zero,10104734 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
10104708:	e0bff917 	ldw	r2,-28(fp)
1010470c:	10800017 	ldw	r2,0(r2)
10104710:	10800104 	addi	r2,r2,4
10104714:	1007883a 	mov	r3,r2
10104718:	e0bff917 	ldw	r2,-28(fp)
1010471c:	10800817 	ldw	r2,32(r2)
10104720:	10810014 	ori	r2,r2,1024
10104724:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
10104728:	e0bff917 	ldw	r2,-28(fp)
1010472c:	10000915 	stw	zero,36(r2)
10104730:	00000a06 	br	1010475c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
10104734:	e0bff917 	ldw	r2,-28(fp)
10104738:	10c00917 	ldw	r3,36(r2)
1010473c:	00a00034 	movhi	r2,32768
10104740:	10bfff04 	addi	r2,r2,-4
10104744:	10c00536 	bltu	r2,r3,1010475c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
10104748:	e0bff917 	ldw	r2,-28(fp)
1010474c:	10800917 	ldw	r2,36(r2)
10104750:	10c00044 	addi	r3,r2,1
10104754:	e0bff917 	ldw	r2,-28(fp)
10104758:	10c00915 	stw	r3,36(r2)
1010475c:	d0a6df17 	ldw	r2,-25732(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
10104760:	e037883a 	mov	sp,fp
10104764:	df000017 	ldw	fp,0(sp)
10104768:	dec00104 	addi	sp,sp,4
1010476c:	f800283a 	ret

10104770 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
10104770:	defffd04 	addi	sp,sp,-12
10104774:	df000215 	stw	fp,8(sp)
10104778:	df000204 	addi	fp,sp,8
1010477c:	e13ffe15 	stw	r4,-8(fp)
10104780:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10104784:	00000506 	br	1010479c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
10104788:	e0bfff17 	ldw	r2,-4(fp)
1010478c:	1090000c 	andi	r2,r2,16384
10104790:	10000226 	beq	r2,zero,1010479c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
10104794:	00bffd44 	movi	r2,-11
10104798:	00000b06 	br	101047c8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1010479c:	e0bffe17 	ldw	r2,-8(fp)
101047a0:	10c00d17 	ldw	r3,52(r2)
101047a4:	e0bffe17 	ldw	r2,-8(fp)
101047a8:	10800c17 	ldw	r2,48(r2)
101047ac:	18800526 	beq	r3,r2,101047c4 <altera_avalon_jtag_uart_close+0x54>
101047b0:	e0bffe17 	ldw	r2,-8(fp)
101047b4:	10c00917 	ldw	r3,36(r2)
101047b8:	e0bffe17 	ldw	r2,-8(fp)
101047bc:	10800117 	ldw	r2,4(r2)
101047c0:	18bff136 	bltu	r3,r2,10104788 <__alt_data_end+0xfffe4788>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
101047c4:	0005883a 	mov	r2,zero
}
101047c8:	e037883a 	mov	sp,fp
101047cc:	df000017 	ldw	fp,0(sp)
101047d0:	dec00104 	addi	sp,sp,4
101047d4:	f800283a 	ret

101047d8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
101047d8:	defffa04 	addi	sp,sp,-24
101047dc:	df000515 	stw	fp,20(sp)
101047e0:	df000504 	addi	fp,sp,20
101047e4:	e13ffd15 	stw	r4,-12(fp)
101047e8:	e17ffe15 	stw	r5,-8(fp)
101047ec:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
101047f0:	00bff9c4 	movi	r2,-25
101047f4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
101047f8:	e0bffe17 	ldw	r2,-8(fp)
101047fc:	10da8060 	cmpeqi	r3,r2,27137
10104800:	1800031e 	bne	r3,zero,10104810 <altera_avalon_jtag_uart_ioctl+0x38>
10104804:	109a80a0 	cmpeqi	r2,r2,27138
10104808:	1000181e 	bne	r2,zero,1010486c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
1010480c:	00002906 	br	101048b4 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
10104810:	e0bffd17 	ldw	r2,-12(fp)
10104814:	10c00117 	ldw	r3,4(r2)
10104818:	00a00034 	movhi	r2,32768
1010481c:	10bfffc4 	addi	r2,r2,-1
10104820:	18802126 	beq	r3,r2,101048a8 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
10104824:	e0bfff17 	ldw	r2,-4(fp)
10104828:	10800017 	ldw	r2,0(r2)
1010482c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
10104830:	e0bffc17 	ldw	r2,-16(fp)
10104834:	10800090 	cmplti	r2,r2,2
10104838:	1000061e 	bne	r2,zero,10104854 <altera_avalon_jtag_uart_ioctl+0x7c>
1010483c:	e0fffc17 	ldw	r3,-16(fp)
10104840:	00a00034 	movhi	r2,32768
10104844:	10bfffc4 	addi	r2,r2,-1
10104848:	18800226 	beq	r3,r2,10104854 <altera_avalon_jtag_uart_ioctl+0x7c>
1010484c:	e0bffc17 	ldw	r2,-16(fp)
10104850:	00000206 	br	1010485c <altera_avalon_jtag_uart_ioctl+0x84>
10104854:	00a00034 	movhi	r2,32768
10104858:	10bfff84 	addi	r2,r2,-2
1010485c:	e0fffd17 	ldw	r3,-12(fp)
10104860:	18800115 	stw	r2,4(r3)
      rc = 0;
10104864:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10104868:	00000f06 	br	101048a8 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
1010486c:	e0bffd17 	ldw	r2,-12(fp)
10104870:	10c00117 	ldw	r3,4(r2)
10104874:	00a00034 	movhi	r2,32768
10104878:	10bfffc4 	addi	r2,r2,-1
1010487c:	18800c26 	beq	r3,r2,101048b0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
10104880:	e0bffd17 	ldw	r2,-12(fp)
10104884:	10c00917 	ldw	r3,36(r2)
10104888:	e0bffd17 	ldw	r2,-12(fp)
1010488c:	10800117 	ldw	r2,4(r2)
10104890:	1885803a 	cmpltu	r2,r3,r2
10104894:	10c03fcc 	andi	r3,r2,255
10104898:	e0bfff17 	ldw	r2,-4(fp)
1010489c:	10c00015 	stw	r3,0(r2)
      rc = 0;
101048a0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
101048a4:	00000206 	br	101048b0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
101048a8:	0001883a 	nop
101048ac:	00000106 	br	101048b4 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
101048b0:	0001883a 	nop

  default:
    break;
  }

  return rc;
101048b4:	e0bffb17 	ldw	r2,-20(fp)
}
101048b8:	e037883a 	mov	sp,fp
101048bc:	df000017 	ldw	fp,0(sp)
101048c0:	dec00104 	addi	sp,sp,4
101048c4:	f800283a 	ret

101048c8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
101048c8:	defff304 	addi	sp,sp,-52
101048cc:	dfc00c15 	stw	ra,48(sp)
101048d0:	df000b15 	stw	fp,44(sp)
101048d4:	df000b04 	addi	fp,sp,44
101048d8:	e13ffc15 	stw	r4,-16(fp)
101048dc:	e17ffd15 	stw	r5,-12(fp)
101048e0:	e1bffe15 	stw	r6,-8(fp)
101048e4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
101048e8:	e0bffd17 	ldw	r2,-12(fp)
101048ec:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
101048f0:	00004706 	br	10104a10 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
101048f4:	e0bffc17 	ldw	r2,-16(fp)
101048f8:	10800a17 	ldw	r2,40(r2)
101048fc:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
10104900:	e0bffc17 	ldw	r2,-16(fp)
10104904:	10800b17 	ldw	r2,44(r2)
10104908:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
1010490c:	e0fff717 	ldw	r3,-36(fp)
10104910:	e0bff817 	ldw	r2,-32(fp)
10104914:	18800536 	bltu	r3,r2,1010492c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
10104918:	e0fff717 	ldw	r3,-36(fp)
1010491c:	e0bff817 	ldw	r2,-32(fp)
10104920:	1885c83a 	sub	r2,r3,r2
10104924:	e0bff615 	stw	r2,-40(fp)
10104928:	00000406 	br	1010493c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
1010492c:	00c20004 	movi	r3,2048
10104930:	e0bff817 	ldw	r2,-32(fp)
10104934:	1885c83a 	sub	r2,r3,r2
10104938:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1010493c:	e0bff617 	ldw	r2,-40(fp)
10104940:	10001e26 	beq	r2,zero,101049bc <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
10104944:	e0fffe17 	ldw	r3,-8(fp)
10104948:	e0bff617 	ldw	r2,-40(fp)
1010494c:	1880022e 	bgeu	r3,r2,10104958 <altera_avalon_jtag_uart_read+0x90>
        n = space;
10104950:	e0bffe17 	ldw	r2,-8(fp)
10104954:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
10104958:	e0bffc17 	ldw	r2,-16(fp)
1010495c:	10c00e04 	addi	r3,r2,56
10104960:	e0bff817 	ldw	r2,-32(fp)
10104964:	1885883a 	add	r2,r3,r2
10104968:	e1bff617 	ldw	r6,-40(fp)
1010496c:	100b883a 	mov	r5,r2
10104970:	e13ff517 	ldw	r4,-44(fp)
10104974:	0101f140 	call	10101f14 <memcpy>
      ptr   += n;
10104978:	e0fff517 	ldw	r3,-44(fp)
1010497c:	e0bff617 	ldw	r2,-40(fp)
10104980:	1885883a 	add	r2,r3,r2
10104984:	e0bff515 	stw	r2,-44(fp)
      space -= n;
10104988:	e0fffe17 	ldw	r3,-8(fp)
1010498c:	e0bff617 	ldw	r2,-40(fp)
10104990:	1885c83a 	sub	r2,r3,r2
10104994:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10104998:	e0fff817 	ldw	r3,-32(fp)
1010499c:	e0bff617 	ldw	r2,-40(fp)
101049a0:	1885883a 	add	r2,r3,r2
101049a4:	10c1ffcc 	andi	r3,r2,2047
101049a8:	e0bffc17 	ldw	r2,-16(fp)
101049ac:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
101049b0:	e0bffe17 	ldw	r2,-8(fp)
101049b4:	00bfcf16 	blt	zero,r2,101048f4 <__alt_data_end+0xfffe48f4>
101049b8:	00000106 	br	101049c0 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
101049bc:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
101049c0:	e0fff517 	ldw	r3,-44(fp)
101049c4:	e0bffd17 	ldw	r2,-12(fp)
101049c8:	1880141e 	bne	r3,r2,10104a1c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
101049cc:	e0bfff17 	ldw	r2,-4(fp)
101049d0:	1090000c 	andi	r2,r2,16384
101049d4:	1000131e 	bne	r2,zero,10104a24 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
101049d8:	0001883a 	nop
101049dc:	e0bffc17 	ldw	r2,-16(fp)
101049e0:	10c00a17 	ldw	r3,40(r2)
101049e4:	e0bff717 	ldw	r2,-36(fp)
101049e8:	1880051e 	bne	r3,r2,10104a00 <altera_avalon_jtag_uart_read+0x138>
101049ec:	e0bffc17 	ldw	r2,-16(fp)
101049f0:	10c00917 	ldw	r3,36(r2)
101049f4:	e0bffc17 	ldw	r2,-16(fp)
101049f8:	10800117 	ldw	r2,4(r2)
101049fc:	18bff736 	bltu	r3,r2,101049dc <__alt_data_end+0xfffe49dc>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
10104a00:	e0bffc17 	ldw	r2,-16(fp)
10104a04:	10c00a17 	ldw	r3,40(r2)
10104a08:	e0bff717 	ldw	r2,-36(fp)
10104a0c:	18800726 	beq	r3,r2,10104a2c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10104a10:	e0bffe17 	ldw	r2,-8(fp)
10104a14:	00bfb716 	blt	zero,r2,101048f4 <__alt_data_end+0xfffe48f4>
10104a18:	00000506 	br	10104a30 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
10104a1c:	0001883a 	nop
10104a20:	00000306 	br	10104a30 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
10104a24:	0001883a 	nop
10104a28:	00000106 	br	10104a30 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
10104a2c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
10104a30:	e0fff517 	ldw	r3,-44(fp)
10104a34:	e0bffd17 	ldw	r2,-12(fp)
10104a38:	18801826 	beq	r3,r2,10104a9c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10104a3c:	0005303a 	rdctl	r2,status
10104a40:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10104a44:	e0fffb17 	ldw	r3,-20(fp)
10104a48:	00bfff84 	movi	r2,-2
10104a4c:	1884703a 	and	r2,r3,r2
10104a50:	1001703a 	wrctl	status,r2
  
  return context;
10104a54:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
10104a58:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10104a5c:	e0bffc17 	ldw	r2,-16(fp)
10104a60:	10800817 	ldw	r2,32(r2)
10104a64:	10c00054 	ori	r3,r2,1
10104a68:	e0bffc17 	ldw	r2,-16(fp)
10104a6c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10104a70:	e0bffc17 	ldw	r2,-16(fp)
10104a74:	10800017 	ldw	r2,0(r2)
10104a78:	10800104 	addi	r2,r2,4
10104a7c:	1007883a 	mov	r3,r2
10104a80:	e0bffc17 	ldw	r2,-16(fp)
10104a84:	10800817 	ldw	r2,32(r2)
10104a88:	18800035 	stwio	r2,0(r3)
10104a8c:	e0bffa17 	ldw	r2,-24(fp)
10104a90:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10104a94:	e0bff917 	ldw	r2,-28(fp)
10104a98:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
10104a9c:	e0fff517 	ldw	r3,-44(fp)
10104aa0:	e0bffd17 	ldw	r2,-12(fp)
10104aa4:	18800426 	beq	r3,r2,10104ab8 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
10104aa8:	e0fff517 	ldw	r3,-44(fp)
10104aac:	e0bffd17 	ldw	r2,-12(fp)
10104ab0:	1885c83a 	sub	r2,r3,r2
10104ab4:	00000606 	br	10104ad0 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
10104ab8:	e0bfff17 	ldw	r2,-4(fp)
10104abc:	1090000c 	andi	r2,r2,16384
10104ac0:	10000226 	beq	r2,zero,10104acc <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
10104ac4:	00bffd44 	movi	r2,-11
10104ac8:	00000106 	br	10104ad0 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
10104acc:	00bffec4 	movi	r2,-5
}
10104ad0:	e037883a 	mov	sp,fp
10104ad4:	dfc00117 	ldw	ra,4(sp)
10104ad8:	df000017 	ldw	fp,0(sp)
10104adc:	dec00204 	addi	sp,sp,8
10104ae0:	f800283a 	ret

10104ae4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
10104ae4:	defff304 	addi	sp,sp,-52
10104ae8:	dfc00c15 	stw	ra,48(sp)
10104aec:	df000b15 	stw	fp,44(sp)
10104af0:	df000b04 	addi	fp,sp,44
10104af4:	e13ffc15 	stw	r4,-16(fp)
10104af8:	e17ffd15 	stw	r5,-12(fp)
10104afc:	e1bffe15 	stw	r6,-8(fp)
10104b00:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
10104b04:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
10104b08:	e0bffd17 	ldw	r2,-12(fp)
10104b0c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10104b10:	00003706 	br	10104bf0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
10104b14:	e0bffc17 	ldw	r2,-16(fp)
10104b18:	10800c17 	ldw	r2,48(r2)
10104b1c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
10104b20:	e0bffc17 	ldw	r2,-16(fp)
10104b24:	10800d17 	ldw	r2,52(r2)
10104b28:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
10104b2c:	e0fff917 	ldw	r3,-28(fp)
10104b30:	e0bff517 	ldw	r2,-44(fp)
10104b34:	1880062e 	bgeu	r3,r2,10104b50 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
10104b38:	e0fff517 	ldw	r3,-44(fp)
10104b3c:	e0bff917 	ldw	r2,-28(fp)
10104b40:	1885c83a 	sub	r2,r3,r2
10104b44:	10bfffc4 	addi	r2,r2,-1
10104b48:	e0bff615 	stw	r2,-40(fp)
10104b4c:	00000b06 	br	10104b7c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
10104b50:	e0bff517 	ldw	r2,-44(fp)
10104b54:	10000526 	beq	r2,zero,10104b6c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
10104b58:	00c20004 	movi	r3,2048
10104b5c:	e0bff917 	ldw	r2,-28(fp)
10104b60:	1885c83a 	sub	r2,r3,r2
10104b64:	e0bff615 	stw	r2,-40(fp)
10104b68:	00000406 	br	10104b7c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
10104b6c:	00c1ffc4 	movi	r3,2047
10104b70:	e0bff917 	ldw	r2,-28(fp)
10104b74:	1885c83a 	sub	r2,r3,r2
10104b78:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10104b7c:	e0bff617 	ldw	r2,-40(fp)
10104b80:	10001e26 	beq	r2,zero,10104bfc <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
10104b84:	e0fffe17 	ldw	r3,-8(fp)
10104b88:	e0bff617 	ldw	r2,-40(fp)
10104b8c:	1880022e 	bgeu	r3,r2,10104b98 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
10104b90:	e0bffe17 	ldw	r2,-8(fp)
10104b94:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
10104b98:	e0bffc17 	ldw	r2,-16(fp)
10104b9c:	10c20e04 	addi	r3,r2,2104
10104ba0:	e0bff917 	ldw	r2,-28(fp)
10104ba4:	1885883a 	add	r2,r3,r2
10104ba8:	e1bff617 	ldw	r6,-40(fp)
10104bac:	e17ffd17 	ldw	r5,-12(fp)
10104bb0:	1009883a 	mov	r4,r2
10104bb4:	0101f140 	call	10101f14 <memcpy>
      ptr   += n;
10104bb8:	e0fffd17 	ldw	r3,-12(fp)
10104bbc:	e0bff617 	ldw	r2,-40(fp)
10104bc0:	1885883a 	add	r2,r3,r2
10104bc4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
10104bc8:	e0fffe17 	ldw	r3,-8(fp)
10104bcc:	e0bff617 	ldw	r2,-40(fp)
10104bd0:	1885c83a 	sub	r2,r3,r2
10104bd4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10104bd8:	e0fff917 	ldw	r3,-28(fp)
10104bdc:	e0bff617 	ldw	r2,-40(fp)
10104be0:	1885883a 	add	r2,r3,r2
10104be4:	10c1ffcc 	andi	r3,r2,2047
10104be8:	e0bffc17 	ldw	r2,-16(fp)
10104bec:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10104bf0:	e0bffe17 	ldw	r2,-8(fp)
10104bf4:	00bfc716 	blt	zero,r2,10104b14 <__alt_data_end+0xfffe4b14>
10104bf8:	00000106 	br	10104c00 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
10104bfc:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10104c00:	0005303a 	rdctl	r2,status
10104c04:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10104c08:	e0fffb17 	ldw	r3,-20(fp)
10104c0c:	00bfff84 	movi	r2,-2
10104c10:	1884703a 	and	r2,r3,r2
10104c14:	1001703a 	wrctl	status,r2
  
  return context;
10104c18:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
10104c1c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10104c20:	e0bffc17 	ldw	r2,-16(fp)
10104c24:	10800817 	ldw	r2,32(r2)
10104c28:	10c00094 	ori	r3,r2,2
10104c2c:	e0bffc17 	ldw	r2,-16(fp)
10104c30:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10104c34:	e0bffc17 	ldw	r2,-16(fp)
10104c38:	10800017 	ldw	r2,0(r2)
10104c3c:	10800104 	addi	r2,r2,4
10104c40:	1007883a 	mov	r3,r2
10104c44:	e0bffc17 	ldw	r2,-16(fp)
10104c48:	10800817 	ldw	r2,32(r2)
10104c4c:	18800035 	stwio	r2,0(r3)
10104c50:	e0bffa17 	ldw	r2,-24(fp)
10104c54:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10104c58:	e0bff817 	ldw	r2,-32(fp)
10104c5c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
10104c60:	e0bffe17 	ldw	r2,-8(fp)
10104c64:	0080100e 	bge	zero,r2,10104ca8 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
10104c68:	e0bfff17 	ldw	r2,-4(fp)
10104c6c:	1090000c 	andi	r2,r2,16384
10104c70:	1000101e 	bne	r2,zero,10104cb4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
10104c74:	0001883a 	nop
10104c78:	e0bffc17 	ldw	r2,-16(fp)
10104c7c:	10c00d17 	ldw	r3,52(r2)
10104c80:	e0bff517 	ldw	r2,-44(fp)
10104c84:	1880051e 	bne	r3,r2,10104c9c <altera_avalon_jtag_uart_write+0x1b8>
10104c88:	e0bffc17 	ldw	r2,-16(fp)
10104c8c:	10c00917 	ldw	r3,36(r2)
10104c90:	e0bffc17 	ldw	r2,-16(fp)
10104c94:	10800117 	ldw	r2,4(r2)
10104c98:	18bff736 	bltu	r3,r2,10104c78 <__alt_data_end+0xfffe4c78>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
10104c9c:	e0bffc17 	ldw	r2,-16(fp)
10104ca0:	10800917 	ldw	r2,36(r2)
10104ca4:	1000051e 	bne	r2,zero,10104cbc <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
10104ca8:	e0bffe17 	ldw	r2,-8(fp)
10104cac:	00bfd016 	blt	zero,r2,10104bf0 <__alt_data_end+0xfffe4bf0>
10104cb0:	00000306 	br	10104cc0 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
10104cb4:	0001883a 	nop
10104cb8:	00000106 	br	10104cc0 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
10104cbc:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
10104cc0:	e0fffd17 	ldw	r3,-12(fp)
10104cc4:	e0bff717 	ldw	r2,-36(fp)
10104cc8:	18800426 	beq	r3,r2,10104cdc <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
10104ccc:	e0fffd17 	ldw	r3,-12(fp)
10104cd0:	e0bff717 	ldw	r2,-36(fp)
10104cd4:	1885c83a 	sub	r2,r3,r2
10104cd8:	00000606 	br	10104cf4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
10104cdc:	e0bfff17 	ldw	r2,-4(fp)
10104ce0:	1090000c 	andi	r2,r2,16384
10104ce4:	10000226 	beq	r2,zero,10104cf0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
10104ce8:	00bffd44 	movi	r2,-11
10104cec:	00000106 	br	10104cf4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
10104cf0:	00bffec4 	movi	r2,-5
}
10104cf4:	e037883a 	mov	sp,fp
10104cf8:	dfc00117 	ldw	ra,4(sp)
10104cfc:	df000017 	ldw	fp,0(sp)
10104d00:	dec00204 	addi	sp,sp,8
10104d04:	f800283a 	ret

10104d08 <alt_hostfs_open>:
* alt_hostfs_open
*
* If we can't find anything return -1
*/
int alt_hostfs_open(alt_fd* fd, const char * name, int flags, int mode)
{
10104d08:	defff404 	addi	sp,sp,-48
10104d0c:	df000b15 	stw	fp,44(sp)
10104d10:	df000b04 	addi	fp,sp,44
10104d14:	e13ffc15 	stw	r4,-16(fp)
10104d18:	e17ffd15 	stw	r5,-12(fp)
10104d1c:	e1bffe15 	stw	r6,-8(fp)
10104d20:	e1ffff15 	stw	r7,-4(fp)
  static const struct HOSTCALL_INFO hcinfo = { 0x0103, "open" };

  alt_hostfs_dev* dev= (alt_hostfs_dev*)fd->dev;
10104d24:	e0bffc17 	ldw	r2,-16(fp)
10104d28:	10800017 	ldw	r2,0(r2)
10104d2c:	e0bff515 	stw	r2,-44(fp)
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
10104d30:	e0bff517 	ldw	r2,-44(fp)
10104d34:	10800217 	ldw	r2,8(r2)
10104d38:	e0bff615 	stw	r2,-40(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
10104d3c:	e0bff617 	ldw	r2,-40(fp)
10104d40:	10bfffc4 	addi	r2,r2,-1
10104d44:	e0bffb15 	stw	r2,-20(fp)

  while (*++ptr != 0)
10104d48:	e0bffb17 	ldw	r2,-20(fp)
10104d4c:	10800044 	addi	r2,r2,1
10104d50:	e0bffb15 	stw	r2,-20(fp)
10104d54:	e0bffb17 	ldw	r2,-20(fp)
10104d58:	10800003 	ldbu	r2,0(r2)
10104d5c:	10803fcc 	andi	r2,r2,255
10104d60:	1080201c 	xori	r2,r2,128
10104d64:	10bfe004 	addi	r2,r2,-128
10104d68:	103ff71e 	bne	r2,zero,10104d48 <__alt_data_end+0xfffe4d48>
    ;

  return ptr - string;
10104d6c:	e0fffb17 	ldw	r3,-20(fp)
10104d70:	e0bff617 	ldw	r2,-40(fp)
10104d74:	1885c83a 	sub	r2,r3,r2
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
10104d78:	10800044 	addi	r2,r2,1
10104d7c:	1007883a 	mov	r3,r2
10104d80:	e0bffd17 	ldw	r2,-12(fp)
10104d84:	10c5883a 	add	r2,r2,r3
10104d88:	e0bffd15 	stw	r2,-12(fp)

  r3 = (int)&hcinfo;
10104d8c:	d0a00b04 	addi	r2,gp,-32724
10104d90:	1007883a 	mov	r3,r2
  r4 = (int)name;
10104d94:	e0bffd17 	ldw	r2,-12(fp)
10104d98:	1009883a 	mov	r4,r2
  r5 = flags;
10104d9c:	e17ffe17 	ldw	r5,-8(fp)
  r6 = mode;
10104da0:	e1bfff17 	ldw	r6,-4(fp)
10104da4:	e0bffd17 	ldw	r2,-12(fp)
10104da8:	e0bff915 	stw	r2,-28(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
10104dac:	e0bff917 	ldw	r2,-28(fp)
10104db0:	10bfffc4 	addi	r2,r2,-1
10104db4:	e0bffa15 	stw	r2,-24(fp)

  while (*++ptr != 0)
10104db8:	e0bffa17 	ldw	r2,-24(fp)
10104dbc:	10800044 	addi	r2,r2,1
10104dc0:	e0bffa15 	stw	r2,-24(fp)
10104dc4:	e0bffa17 	ldw	r2,-24(fp)
10104dc8:	10800003 	ldbu	r2,0(r2)
10104dcc:	10803fcc 	andi	r2,r2,255
10104dd0:	1080201c 	xori	r2,r2,128
10104dd4:	10bfe004 	addi	r2,r2,-128
10104dd8:	103ff71e 	bne	r2,zero,10104db8 <__alt_data_end+0xfffe4db8>
    ;

  return ptr - string;
10104ddc:	e1fffa17 	ldw	r7,-24(fp)
10104de0:	e0bff917 	ldw	r2,-28(fp)
10104de4:	3885c83a 	sub	r2,r7,r2

  r3 = (int)&hcinfo;
  r4 = (int)name;
  r5 = flags;
  r6 = mode;
  r7 = inline_strlen(name);
10104de8:	100f883a 	mov	r7,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6), "r" (r7) : "memory" );
10104dec:	003da07a 	break	1

  handle = (void *)r2;
10104df0:	e0bff715 	stw	r2,-36(fp)
  error = r3;
10104df4:	e0fff815 	stw	r3,-32(fp)

  if (error == 0)
10104df8:	e0bff817 	ldw	r2,-32(fp)
10104dfc:	1000031e 	bne	r2,zero,10104e0c <alt_hostfs_open+0x104>
    fd->priv = handle;
10104e00:	e0bffc17 	ldw	r2,-16(fp)
10104e04:	e0fff717 	ldw	r3,-36(fp)
10104e08:	10c00115 	stw	r3,4(r2)

  return -error;
10104e0c:	e0bff817 	ldw	r2,-32(fp)
10104e10:	0085c83a 	sub	r2,zero,r2
}
10104e14:	e037883a 	mov	sp,fp
10104e18:	df000017 	ldw	fp,0(sp)
10104e1c:	dec00104 	addi	sp,sp,4
10104e20:	f800283a 	ret

10104e24 <alt_hostfs_close>:
* alt_hostfs_close
*
* Read the file
*/
int alt_hostfs_close(alt_fd* fd)
{
10104e24:	defffd04 	addi	sp,sp,-12
10104e28:	df000215 	stw	fp,8(sp)
10104e2c:	df000204 	addi	fp,sp,8
10104e30:	e13fff15 	stw	r4,-4(fp)

  /* Input and output parameters for the hostcall */
  register int r3 asm ("r3");
  register int r4 asm ("r4");

  r3 = (int)&hcinfo;
10104e34:	d0a00e04 	addi	r2,gp,-32712
10104e38:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
10104e3c:	e0bfff17 	ldw	r2,-4(fp)
10104e40:	10800117 	ldw	r2,4(r2)
10104e44:	1009883a 	mov	r4,r2

  __asm__ volatile("break 1" : "+r" (r3) : "r" (r4) );
10104e48:	003da07a 	break	1

  error = r3;
10104e4c:	e0fffe15 	stw	r3,-8(fp)

  return -error;
10104e50:	e0bffe17 	ldw	r2,-8(fp)
10104e54:	0085c83a 	sub	r2,zero,r2
}
10104e58:	e037883a 	mov	sp,fp
10104e5c:	df000017 	ldw	fp,0(sp)
10104e60:	dec00104 	addi	sp,sp,4
10104e64:	f800283a 	ret

10104e68 <alt_hostfs_read>:
* alt_hostfs_read
*
* Read the file
*/
int alt_hostfs_read(alt_fd* fd, char * ptr, int len)
{
10104e68:	defffa04 	addi	sp,sp,-24
10104e6c:	df000515 	stw	fp,20(sp)
10104e70:	df000504 	addi	fp,sp,20
10104e74:	e13ffd15 	stw	r4,-12(fp)
10104e78:	e17ffe15 	stw	r5,-8(fp)
10104e7c:	e1bfff15 	stw	r6,-4(fp)
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");


  r3 = (int)&hcinfo;
10104e80:	d0a01104 	addi	r2,gp,-32700
10104e84:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
10104e88:	e0bffd17 	ldw	r2,-12(fp)
10104e8c:	10800117 	ldw	r2,4(r2)
10104e90:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
10104e94:	e0bffe17 	ldw	r2,-8(fp)
10104e98:	100b883a 	mov	r5,r2
  r6 = len;
10104e9c:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
10104ea0:	003da07a 	break	1

  rc = r2;
10104ea4:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
10104ea8:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
10104eac:	e0bffc17 	ldw	r2,-16(fp)
10104eb0:	10000326 	beq	r2,zero,10104ec0 <alt_hostfs_read+0x58>
10104eb4:	e0bffc17 	ldw	r2,-16(fp)
10104eb8:	0085c83a 	sub	r2,zero,r2
10104ebc:	00000106 	br	10104ec4 <alt_hostfs_read+0x5c>
10104ec0:	e0bffb17 	ldw	r2,-20(fp)
}
10104ec4:	e037883a 	mov	sp,fp
10104ec8:	df000017 	ldw	fp,0(sp)
10104ecc:	dec00104 	addi	sp,sp,4
10104ed0:	f800283a 	ret

10104ed4 <alt_hostfs_write>:
* alt_hostfs_write
*
* Read the file
*/
int alt_hostfs_write(alt_fd* fd, const char * ptr, int len)
{
10104ed4:	defffa04 	addi	sp,sp,-24
10104ed8:	df000515 	stw	fp,20(sp)
10104edc:	df000504 	addi	fp,sp,20
10104ee0:	e13ffd15 	stw	r4,-12(fp)
10104ee4:	e17ffe15 	stw	r5,-8(fp)
10104ee8:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
10104eec:	d0a01404 	addi	r2,gp,-32688
10104ef0:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
10104ef4:	e0bffd17 	ldw	r2,-12(fp)
10104ef8:	10800117 	ldw	r2,4(r2)
10104efc:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
10104f00:	e0bffe17 	ldw	r2,-8(fp)
10104f04:	100b883a 	mov	r5,r2
  r6 = len;
10104f08:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
10104f0c:	003da07a 	break	1

  rc = r2;
10104f10:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
10104f14:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
10104f18:	e0bffc17 	ldw	r2,-16(fp)
10104f1c:	10000326 	beq	r2,zero,10104f2c <alt_hostfs_write+0x58>
10104f20:	e0bffc17 	ldw	r2,-16(fp)
10104f24:	0085c83a 	sub	r2,zero,r2
10104f28:	00000106 	br	10104f30 <alt_hostfs_write+0x5c>
10104f2c:	e0bffb17 	ldw	r2,-20(fp)
}
10104f30:	e037883a 	mov	sp,fp
10104f34:	df000017 	ldw	fp,0(sp)
10104f38:	dec00104 	addi	sp,sp,4
10104f3c:	f800283a 	ret

10104f40 <alt_hostfs_seek>:
* Move around within a file
*
* returns -errno for an error or the offset within the file
*/
int alt_hostfs_seek(alt_fd* fd, int ptr, int dir)
{
10104f40:	defffa04 	addi	sp,sp,-24
10104f44:	df000515 	stw	fp,20(sp)
10104f48:	df000504 	addi	fp,sp,20
10104f4c:	e13ffd15 	stw	r4,-12(fp)
10104f50:	e17ffe15 	stw	r5,-8(fp)
10104f54:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
10104f58:	d0a01704 	addi	r2,gp,-32676
10104f5c:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
10104f60:	e0bffd17 	ldw	r2,-12(fp)
10104f64:	10800117 	ldw	r2,4(r2)
10104f68:	1009883a 	mov	r4,r2
  r5 = ptr;
10104f6c:	e17ffe17 	ldw	r5,-8(fp)
  r6 = dir;
10104f70:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
10104f74:	003da07a 	break	1

  rc = r2;
10104f78:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
10104f7c:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
10104f80:	e0bffc17 	ldw	r2,-16(fp)
10104f84:	10000326 	beq	r2,zero,10104f94 <alt_hostfs_seek+0x54>
10104f88:	e0bffc17 	ldw	r2,-16(fp)
10104f8c:	0085c83a 	sub	r2,zero,r2
10104f90:	00000106 	br	10104f98 <alt_hostfs_seek+0x58>
10104f94:	e0bffb17 	ldw	r2,-20(fp)
}
10104f98:	e037883a 	mov	sp,fp
10104f9c:	df000017 	ldw	fp,0(sp)
10104fa0:	dec00104 	addi	sp,sp,4
10104fa4:	f800283a 	ret

10104fa8 <alt_hostfs_fstat>:
* at the lower address.
* We need to copy the structure and byte swap it to make it match our local
* layout of struct stat.
*/
int alt_hostfs_fstat(alt_fd* fd, struct stat* st)
{
10104fa8:	deffe904 	addi	sp,sp,-92
10104fac:	df001615 	stw	fp,88(sp)
10104fb0:	df001604 	addi	fp,sp,88
10104fb4:	e13ffe15 	stw	r4,-8(fp)
10104fb8:	e17fff15 	stw	r5,-4(fp)
  register int r2 asm ("r2");
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");

  r3 = (int)&hcinfo;
10104fbc:	d0a01a04 	addi	r2,gp,-32664
10104fc0:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
10104fc4:	e0bffe17 	ldw	r2,-8(fp)
10104fc8:	10800117 	ldw	r2,4(r2)
10104fcc:	1009883a 	mov	r4,r2
  r5 = (int)&hoststat;
10104fd0:	e0bfee04 	addi	r2,fp,-72
10104fd4:	100b883a 	mov	r5,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5) : "memory" );
10104fd8:	003da07a 	break	1

  rc = r2;
10104fdc:	e0bfeb15 	stw	r2,-84(fp)
  error = r3;
10104fe0:	e0ffec15 	stw	r3,-80(fp)

  if (error == 0)
10104fe4:	e0bfec17 	ldw	r2,-80(fp)
10104fe8:	1000621e 	bne	r2,zero,10105174 <alt_hostfs_fstat+0x1cc>
     * no change is required.  On a little-endian processor we need to swap
     * the bytes in each word.
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
10104fec:	e0bfee04 	addi	r2,fp,-72
10104ff0:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
10104ff4:	e0bfea17 	ldw	r2,-88(fp)
10104ff8:	10801004 	addi	r2,r2,64
10104ffc:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
10105000:	00001606 	br	1010505c <alt_hostfs_fstat+0xb4>
      *ptr = ((*ptr & 0xFF000000) >> 24) |
10105004:	e0bfea17 	ldw	r2,-88(fp)
10105008:	10800017 	ldw	r2,0(r2)
1010500c:	1006d63a 	srli	r3,r2,24
             ((*ptr & 0x00FF0000) >> 8)  |
10105010:	e0bfea17 	ldw	r2,-88(fp)
10105014:	10800017 	ldw	r2,0(r2)
10105018:	10803fec 	andhi	r2,r2,255
1010501c:	1004d23a 	srli	r2,r2,8

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
10105020:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
10105024:	e0bfea17 	ldw	r2,-88(fp)
10105028:	10800017 	ldw	r2,0(r2)
1010502c:	10bfc00c 	andi	r2,r2,65280
10105030:	1004923a 	slli	r2,r2,8
#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
10105034:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
10105038:	e0bfea17 	ldw	r2,-88(fp)
1010503c:	10800017 	ldw	r2,0(r2)
10105040:	1004963a 	slli	r2,r2,24
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
10105044:	1886b03a 	or	r3,r3,r2

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
10105048:	e0bfea17 	ldw	r2,-88(fp)
1010504c:	10c00015 	stw	r3,0(r2)
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
10105050:	e0bfea17 	ldw	r2,-88(fp)
10105054:	10800104 	addi	r2,r2,4
10105058:	e0bfea15 	stw	r2,-88(fp)
1010505c:	e0ffea17 	ldw	r3,-88(fp)
10105060:	e0bfed17 	ldw	r2,-76(fp)
10105064:	18bfe736 	bltu	r3,r2,10105004 <__alt_data_end+0xfffe5004>
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
10105068:	e0bfff17 	ldw	r2,-4(fp)
1010506c:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
10105070:	e0bfea17 	ldw	r2,-88(fp)
10105074:	10800f04 	addi	r2,r2,60
10105078:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
1010507c:	00000506 	br	10105094 <alt_hostfs_fstat+0xec>
      *ptr = 0;
10105080:	e0bfea17 	ldw	r2,-88(fp)
10105084:	10000015 	stw	zero,0(r2)
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
    for ( ; ptr < end ; ptr++)
10105088:	e0bfea17 	ldw	r2,-88(fp)
1010508c:	10800104 	addi	r2,r2,4
10105090:	e0bfea15 	stw	r2,-88(fp)
10105094:	e0ffea17 	ldw	r3,-88(fp)
10105098:	e0bfed17 	ldw	r2,-76(fp)
1010509c:	18bff836 	bltu	r3,r2,10105080 <__alt_data_end+0xfffe5080>

    /* Copy the data provided by the host into our local copy, for data which
     * is provided as 64bit values by the host we just use the least
     * significant word.
     */
    st->st_dev     = hoststat.fst_dev;
101050a0:	e0bfee17 	ldw	r2,-72(fp)
101050a4:	1007883a 	mov	r3,r2
101050a8:	e0bfff17 	ldw	r2,-4(fp)
101050ac:	10c0000d 	sth	r3,0(r2)
    st->st_ino     = hoststat.fst_ino;
101050b0:	e0bfef17 	ldw	r2,-68(fp)
101050b4:	1007883a 	mov	r3,r2
101050b8:	e0bfff17 	ldw	r2,-4(fp)
101050bc:	10c0008d 	sth	r3,2(r2)
    st->st_mode    = hoststat.fst_mode;
101050c0:	e0fff017 	ldw	r3,-64(fp)
101050c4:	e0bfff17 	ldw	r2,-4(fp)
101050c8:	10c00115 	stw	r3,4(r2)
    st->st_nlink   = hoststat.fst_nlink;
101050cc:	e0bff117 	ldw	r2,-60(fp)
101050d0:	1007883a 	mov	r3,r2
101050d4:	e0bfff17 	ldw	r2,-4(fp)
101050d8:	10c0020d 	sth	r3,8(r2)
    st->st_uid     = hoststat.fst_uid;
101050dc:	e0bff217 	ldw	r2,-56(fp)
101050e0:	1007883a 	mov	r3,r2
101050e4:	e0bfff17 	ldw	r2,-4(fp)
101050e8:	10c0028d 	sth	r3,10(r2)
    st->st_gid     = hoststat.fst_gid;
101050ec:	e0bff317 	ldw	r2,-52(fp)
101050f0:	1007883a 	mov	r3,r2
101050f4:	e0bfff17 	ldw	r2,-4(fp)
101050f8:	10c0030d 	sth	r3,12(r2)
    st->st_rdev    = hoststat.fst_rdev;
101050fc:	e0bff417 	ldw	r2,-48(fp)
10105100:	1007883a 	mov	r3,r2
10105104:	e0bfff17 	ldw	r2,-4(fp)
10105108:	10c0038d 	sth	r3,14(r2)
    st->st_size    = hoststat.fst_size[1];
1010510c:	e0bff617 	ldw	r2,-40(fp)
10105110:	1007883a 	mov	r3,r2
10105114:	e0bfff17 	ldw	r2,-4(fp)
10105118:	10c00415 	stw	r3,16(r2)

    st->st_atime   = hoststat.fst_atime;
1010511c:	e0bffb17 	ldw	r2,-20(fp)
10105120:	1007883a 	mov	r3,r2
10105124:	e0bfff17 	ldw	r2,-4(fp)
10105128:	10c00515 	stw	r3,20(r2)
    st->st_mtime   = hoststat.fst_mtime;
1010512c:	e0bffc17 	ldw	r2,-16(fp)
10105130:	1007883a 	mov	r3,r2
10105134:	e0bfff17 	ldw	r2,-4(fp)
10105138:	10c00715 	stw	r3,28(r2)
    st->st_ctime   = hoststat.fst_ctime;
1010513c:	e0bffd17 	ldw	r2,-12(fp)
10105140:	1007883a 	mov	r3,r2
10105144:	e0bfff17 	ldw	r2,-4(fp)
10105148:	10c00915 	stw	r3,36(r2)

    st->st_blksize = hoststat.fst_blksize[1];
1010514c:	e0bff817 	ldw	r2,-32(fp)
10105150:	1007883a 	mov	r3,r2
10105154:	e0bfff17 	ldw	r2,-4(fp)
10105158:	10c00b15 	stw	r3,44(r2)
    st->st_blocks  = hoststat.fst_blocks[1];
1010515c:	e0bffa17 	ldw	r2,-24(fp)
10105160:	1007883a 	mov	r3,r2
10105164:	e0bfff17 	ldw	r2,-4(fp)
10105168:	10c00c15 	stw	r3,48(r2)

    return rc;
1010516c:	e0bfeb17 	ldw	r2,-84(fp)
10105170:	00000206 	br	1010517c <alt_hostfs_fstat+0x1d4>
  }
  else
    return -error;
10105174:	e0bfec17 	ldw	r2,-80(fp)
10105178:	0085c83a 	sub	r2,zero,r2
}
1010517c:	e037883a 	mov	sp,fp
10105180:	df000017 	ldw	fp,0(sp)
10105184:	dec00104 	addi	sp,sp,4
10105188:	f800283a 	ret

1010518c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
1010518c:	defff504 	addi	sp,sp,-44
10105190:	df000a15 	stw	fp,40(sp)
10105194:	df000a04 	addi	fp,sp,40
10105198:	e13ffc15 	stw	r4,-16(fp)
1010519c:	e17ffd15 	stw	r5,-12(fp)
101051a0:	e1bffe15 	stw	r6,-8(fp)
101051a4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
101051a8:	e03ff615 	stw	zero,-40(fp)
101051ac:	d0a6df17 	ldw	r2,-25732(gp)
  
  if (alt_ticks_per_second ())
101051b0:	10003c26 	beq	r2,zero,101052a4 <alt_alarm_start+0x118>
  {
    if (alarm)
101051b4:	e0bffc17 	ldw	r2,-16(fp)
101051b8:	10003826 	beq	r2,zero,1010529c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
101051bc:	e0bffc17 	ldw	r2,-16(fp)
101051c0:	e0fffe17 	ldw	r3,-8(fp)
101051c4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
101051c8:	e0bffc17 	ldw	r2,-16(fp)
101051cc:	e0ffff17 	ldw	r3,-4(fp)
101051d0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
101051d4:	0005303a 	rdctl	r2,status
101051d8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
101051dc:	e0fff917 	ldw	r3,-28(fp)
101051e0:	00bfff84 	movi	r2,-2
101051e4:	1884703a 	and	r2,r3,r2
101051e8:	1001703a 	wrctl	status,r2
  
  return context;
101051ec:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
101051f0:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
101051f4:	d0a6e017 	ldw	r2,-25728(gp)
      
      current_nticks = alt_nticks();
101051f8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
101051fc:	e0fffd17 	ldw	r3,-12(fp)
10105200:	e0bff617 	ldw	r2,-40(fp)
10105204:	1885883a 	add	r2,r3,r2
10105208:	10c00044 	addi	r3,r2,1
1010520c:	e0bffc17 	ldw	r2,-16(fp)
10105210:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
10105214:	e0bffc17 	ldw	r2,-16(fp)
10105218:	10c00217 	ldw	r3,8(r2)
1010521c:	e0bff617 	ldw	r2,-40(fp)
10105220:	1880042e 	bgeu	r3,r2,10105234 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
10105224:	e0bffc17 	ldw	r2,-16(fp)
10105228:	00c00044 	movi	r3,1
1010522c:	10c00405 	stb	r3,16(r2)
10105230:	00000206 	br	1010523c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
10105234:	e0bffc17 	ldw	r2,-16(fp)
10105238:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
1010523c:	e0bffc17 	ldw	r2,-16(fp)
10105240:	d0e01e04 	addi	r3,gp,-32648
10105244:	e0fffa15 	stw	r3,-24(fp)
10105248:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1010524c:	e0bffb17 	ldw	r2,-20(fp)
10105250:	e0fffa17 	ldw	r3,-24(fp)
10105254:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10105258:	e0bffa17 	ldw	r2,-24(fp)
1010525c:	10c00017 	ldw	r3,0(r2)
10105260:	e0bffb17 	ldw	r2,-20(fp)
10105264:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10105268:	e0bffa17 	ldw	r2,-24(fp)
1010526c:	10800017 	ldw	r2,0(r2)
10105270:	e0fffb17 	ldw	r3,-20(fp)
10105274:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10105278:	e0bffa17 	ldw	r2,-24(fp)
1010527c:	e0fffb17 	ldw	r3,-20(fp)
10105280:	10c00015 	stw	r3,0(r2)
10105284:	e0bff817 	ldw	r2,-32(fp)
10105288:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1010528c:	e0bff717 	ldw	r2,-36(fp)
10105290:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
10105294:	0005883a 	mov	r2,zero
10105298:	00000306 	br	101052a8 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
1010529c:	00bffa84 	movi	r2,-22
101052a0:	00000106 	br	101052a8 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
101052a4:	00bfde84 	movi	r2,-134
  }
}
101052a8:	e037883a 	mov	sp,fp
101052ac:	df000017 	ldw	fp,0(sp)
101052b0:	dec00104 	addi	sp,sp,4
101052b4:	f800283a 	ret

101052b8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
101052b8:	defffe04 	addi	sp,sp,-8
101052bc:	df000115 	stw	fp,4(sp)
101052c0:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
101052c4:	e03fff15 	stw	zero,-4(fp)
101052c8:	00000506 	br	101052e0 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
101052cc:	e0bfff17 	ldw	r2,-4(fp)
101052d0:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
101052d4:	e0bfff17 	ldw	r2,-4(fp)
101052d8:	10800804 	addi	r2,r2,32
101052dc:	e0bfff15 	stw	r2,-4(fp)
101052e0:	e0bfff17 	ldw	r2,-4(fp)
101052e4:	10820030 	cmpltui	r2,r2,2048
101052e8:	103ff81e 	bne	r2,zero,101052cc <__alt_data_end+0xfffe52cc>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
101052ec:	0001883a 	nop
101052f0:	e037883a 	mov	sp,fp
101052f4:	df000017 	ldw	fp,0(sp)
101052f8:	dec00104 	addi	sp,sp,4
101052fc:	f800283a 	ret

10105300 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10105300:	defffe04 	addi	sp,sp,-8
10105304:	dfc00115 	stw	ra,4(sp)
10105308:	df000015 	stw	fp,0(sp)
1010530c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10105310:	d0a00917 	ldw	r2,-32732(gp)
10105314:	10000326 	beq	r2,zero,10105324 <alt_get_errno+0x24>
10105318:	d0a00917 	ldw	r2,-32732(gp)
1010531c:	103ee83a 	callr	r2
10105320:	00000106 	br	10105328 <alt_get_errno+0x28>
10105324:	d0a6da04 	addi	r2,gp,-25752
}
10105328:	e037883a 	mov	sp,fp
1010532c:	dfc00117 	ldw	ra,4(sp)
10105330:	df000017 	ldw	fp,0(sp)
10105334:	dec00204 	addi	sp,sp,8
10105338:	f800283a 	ret

1010533c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
1010533c:	defffa04 	addi	sp,sp,-24
10105340:	dfc00515 	stw	ra,20(sp)
10105344:	df000415 	stw	fp,16(sp)
10105348:	df000404 	addi	fp,sp,16
1010534c:	e13ffe15 	stw	r4,-8(fp)
10105350:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
10105354:	e0bffe17 	ldw	r2,-8(fp)
10105358:	10000326 	beq	r2,zero,10105368 <alt_dev_llist_insert+0x2c>
1010535c:	e0bffe17 	ldw	r2,-8(fp)
10105360:	10800217 	ldw	r2,8(r2)
10105364:	1000061e 	bne	r2,zero,10105380 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
10105368:	01053000 	call	10105300 <alt_get_errno>
1010536c:	1007883a 	mov	r3,r2
10105370:	00800584 	movi	r2,22
10105374:	18800015 	stw	r2,0(r3)
    return -EINVAL;
10105378:	00bffa84 	movi	r2,-22
1010537c:	00001306 	br	101053cc <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
10105380:	e0bffe17 	ldw	r2,-8(fp)
10105384:	e0ffff17 	ldw	r3,-4(fp)
10105388:	e0fffc15 	stw	r3,-16(fp)
1010538c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10105390:	e0bffd17 	ldw	r2,-12(fp)
10105394:	e0fffc17 	ldw	r3,-16(fp)
10105398:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1010539c:	e0bffc17 	ldw	r2,-16(fp)
101053a0:	10c00017 	ldw	r3,0(r2)
101053a4:	e0bffd17 	ldw	r2,-12(fp)
101053a8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
101053ac:	e0bffc17 	ldw	r2,-16(fp)
101053b0:	10800017 	ldw	r2,0(r2)
101053b4:	e0fffd17 	ldw	r3,-12(fp)
101053b8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
101053bc:	e0bffc17 	ldw	r2,-16(fp)
101053c0:	e0fffd17 	ldw	r3,-12(fp)
101053c4:	10c00015 	stw	r3,0(r2)

  return 0;  
101053c8:	0005883a 	mov	r2,zero
}
101053cc:	e037883a 	mov	sp,fp
101053d0:	dfc00117 	ldw	ra,4(sp)
101053d4:	df000017 	ldw	fp,0(sp)
101053d8:	dec00204 	addi	sp,sp,8
101053dc:	f800283a 	ret

101053e0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
101053e0:	defffd04 	addi	sp,sp,-12
101053e4:	dfc00215 	stw	ra,8(sp)
101053e8:	df000115 	stw	fp,4(sp)
101053ec:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
101053f0:	00840434 	movhi	r2,4112
101053f4:	10991204 	addi	r2,r2,25672
101053f8:	e0bfff15 	stw	r2,-4(fp)
101053fc:	00000606 	br	10105418 <_do_ctors+0x38>
        (*ctor) (); 
10105400:	e0bfff17 	ldw	r2,-4(fp)
10105404:	10800017 	ldw	r2,0(r2)
10105408:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1010540c:	e0bfff17 	ldw	r2,-4(fp)
10105410:	10bfff04 	addi	r2,r2,-4
10105414:	e0bfff15 	stw	r2,-4(fp)
10105418:	e0ffff17 	ldw	r3,-4(fp)
1010541c:	00840434 	movhi	r2,4112
10105420:	10991304 	addi	r2,r2,25676
10105424:	18bff62e 	bgeu	r3,r2,10105400 <__alt_data_end+0xfffe5400>
        (*ctor) (); 
}
10105428:	0001883a 	nop
1010542c:	e037883a 	mov	sp,fp
10105430:	dfc00117 	ldw	ra,4(sp)
10105434:	df000017 	ldw	fp,0(sp)
10105438:	dec00204 	addi	sp,sp,8
1010543c:	f800283a 	ret

10105440 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
10105440:	defffd04 	addi	sp,sp,-12
10105444:	dfc00215 	stw	ra,8(sp)
10105448:	df000115 	stw	fp,4(sp)
1010544c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10105450:	00840434 	movhi	r2,4112
10105454:	10991204 	addi	r2,r2,25672
10105458:	e0bfff15 	stw	r2,-4(fp)
1010545c:	00000606 	br	10105478 <_do_dtors+0x38>
        (*dtor) (); 
10105460:	e0bfff17 	ldw	r2,-4(fp)
10105464:	10800017 	ldw	r2,0(r2)
10105468:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1010546c:	e0bfff17 	ldw	r2,-4(fp)
10105470:	10bfff04 	addi	r2,r2,-4
10105474:	e0bfff15 	stw	r2,-4(fp)
10105478:	e0ffff17 	ldw	r3,-4(fp)
1010547c:	00840434 	movhi	r2,4112
10105480:	10991304 	addi	r2,r2,25676
10105484:	18bff62e 	bgeu	r3,r2,10105460 <__alt_data_end+0xfffe5460>
        (*dtor) (); 
}
10105488:	0001883a 	nop
1010548c:	e037883a 	mov	sp,fp
10105490:	dfc00117 	ldw	ra,4(sp)
10105494:	df000017 	ldw	fp,0(sp)
10105498:	dec00204 	addi	sp,sp,8
1010549c:	f800283a 	ret

101054a0 <alt_fs_reg>:
 * A return value of zero indicates success. A negative return value indicates
 * failure. 
 */
 
int alt_fs_reg (alt_dev* dev)
{
101054a0:	defffc04 	addi	sp,sp,-16
101054a4:	df000315 	stw	fp,12(sp)
101054a8:	df000304 	addi	fp,sp,12
101054ac:	e13fff15 	stw	r4,-4(fp)
  /*
   * check that the device has a name.
   */

  if (!dev->name)
101054b0:	e0bfff17 	ldw	r2,-4(fp)
101054b4:	10800217 	ldw	r2,8(r2)
101054b8:	1000021e 	bne	r2,zero,101054c4 <alt_fs_reg+0x24>
  {
    return -ENODEV;
101054bc:	00bffb44 	movi	r2,-19
101054c0:	00001306 	br	10105510 <alt_fs_reg+0x70>
  
  /*
   * register the file system.
   */

  alt_llist_insert(&alt_fs_list, &dev->llist);
101054c4:	e0bfff17 	ldw	r2,-4(fp)
101054c8:	d0e00404 	addi	r3,gp,-32752
101054cc:	e0fffd15 	stw	r3,-12(fp)
101054d0:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
101054d4:	e0bffe17 	ldw	r2,-8(fp)
101054d8:	e0fffd17 	ldw	r3,-12(fp)
101054dc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
101054e0:	e0bffd17 	ldw	r2,-12(fp)
101054e4:	10c00017 	ldw	r3,0(r2)
101054e8:	e0bffe17 	ldw	r2,-8(fp)
101054ec:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
101054f0:	e0bffd17 	ldw	r2,-12(fp)
101054f4:	10800017 	ldw	r2,0(r2)
101054f8:	e0fffe17 	ldw	r3,-8(fp)
101054fc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10105500:	e0bffd17 	ldw	r2,-12(fp)
10105504:	e0fffe17 	ldw	r3,-8(fp)
10105508:	10c00015 	stw	r3,0(r2)

  return 0;
1010550c:	0005883a 	mov	r2,zero
} 
10105510:	e037883a 	mov	sp,fp
10105514:	df000017 	ldw	fp,0(sp)
10105518:	dec00104 	addi	sp,sp,4
1010551c:	f800283a 	ret

10105520 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10105520:	defffe04 	addi	sp,sp,-8
10105524:	dfc00115 	stw	ra,4(sp)
10105528:	df000015 	stw	fp,0(sp)
1010552c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
10105530:	01440004 	movi	r5,4096
10105534:	0009883a 	mov	r4,zero
10105538:	0105f8c0 	call	10105f8c <alt_icache_flush>
#endif
}
1010553c:	0001883a 	nop
10105540:	e037883a 	mov	sp,fp
10105544:	dfc00117 	ldw	ra,4(sp)
10105548:	df000017 	ldw	fp,0(sp)
1010554c:	dec00204 	addi	sp,sp,8
10105550:	f800283a 	ret

10105554 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10105554:	defff904 	addi	sp,sp,-28
10105558:	dfc00615 	stw	ra,24(sp)
1010555c:	df000515 	stw	fp,20(sp)
10105560:	df000504 	addi	fp,sp,20
10105564:	e13ffc15 	stw	r4,-16(fp)
10105568:	e17ffd15 	stw	r5,-12(fp)
1010556c:	e1bffe15 	stw	r6,-8(fp)
10105570:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
10105574:	e0800217 	ldw	r2,8(fp)
10105578:	d8800015 	stw	r2,0(sp)
1010557c:	e1ffff17 	ldw	r7,-4(fp)
10105580:	e1bffe17 	ldw	r6,-8(fp)
10105584:	e17ffd17 	ldw	r5,-12(fp)
10105588:	e13ffc17 	ldw	r4,-16(fp)
1010558c:	01057040 	call	10105704 <alt_iic_isr_register>
}  
10105590:	e037883a 	mov	sp,fp
10105594:	dfc00117 	ldw	ra,4(sp)
10105598:	df000017 	ldw	fp,0(sp)
1010559c:	dec00204 	addi	sp,sp,8
101055a0:	f800283a 	ret

101055a4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
101055a4:	defff904 	addi	sp,sp,-28
101055a8:	df000615 	stw	fp,24(sp)
101055ac:	df000604 	addi	fp,sp,24
101055b0:	e13ffe15 	stw	r4,-8(fp)
101055b4:	e17fff15 	stw	r5,-4(fp)
101055b8:	e0bfff17 	ldw	r2,-4(fp)
101055bc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
101055c0:	0005303a 	rdctl	r2,status
101055c4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
101055c8:	e0fffb17 	ldw	r3,-20(fp)
101055cc:	00bfff84 	movi	r2,-2
101055d0:	1884703a 	and	r2,r3,r2
101055d4:	1001703a 	wrctl	status,r2
  
  return context;
101055d8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
101055dc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
101055e0:	00c00044 	movi	r3,1
101055e4:	e0bffa17 	ldw	r2,-24(fp)
101055e8:	1884983a 	sll	r2,r3,r2
101055ec:	1007883a 	mov	r3,r2
101055f0:	d0a6de17 	ldw	r2,-25736(gp)
101055f4:	1884b03a 	or	r2,r3,r2
101055f8:	d0a6de15 	stw	r2,-25736(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
101055fc:	d0a6de17 	ldw	r2,-25736(gp)
10105600:	100170fa 	wrctl	ienable,r2
10105604:	e0bffc17 	ldw	r2,-16(fp)
10105608:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1010560c:	e0bffd17 	ldw	r2,-12(fp)
10105610:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10105614:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
10105618:	0001883a 	nop
}
1010561c:	e037883a 	mov	sp,fp
10105620:	df000017 	ldw	fp,0(sp)
10105624:	dec00104 	addi	sp,sp,4
10105628:	f800283a 	ret

1010562c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
1010562c:	defff904 	addi	sp,sp,-28
10105630:	df000615 	stw	fp,24(sp)
10105634:	df000604 	addi	fp,sp,24
10105638:	e13ffe15 	stw	r4,-8(fp)
1010563c:	e17fff15 	stw	r5,-4(fp)
10105640:	e0bfff17 	ldw	r2,-4(fp)
10105644:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10105648:	0005303a 	rdctl	r2,status
1010564c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10105650:	e0fffb17 	ldw	r3,-20(fp)
10105654:	00bfff84 	movi	r2,-2
10105658:	1884703a 	and	r2,r3,r2
1010565c:	1001703a 	wrctl	status,r2
  
  return context;
10105660:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10105664:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
10105668:	00c00044 	movi	r3,1
1010566c:	e0bffa17 	ldw	r2,-24(fp)
10105670:	1884983a 	sll	r2,r3,r2
10105674:	0084303a 	nor	r2,zero,r2
10105678:	1007883a 	mov	r3,r2
1010567c:	d0a6de17 	ldw	r2,-25736(gp)
10105680:	1884703a 	and	r2,r3,r2
10105684:	d0a6de15 	stw	r2,-25736(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10105688:	d0a6de17 	ldw	r2,-25736(gp)
1010568c:	100170fa 	wrctl	ienable,r2
10105690:	e0bffc17 	ldw	r2,-16(fp)
10105694:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10105698:	e0bffd17 	ldw	r2,-12(fp)
1010569c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
101056a0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
101056a4:	0001883a 	nop
}
101056a8:	e037883a 	mov	sp,fp
101056ac:	df000017 	ldw	fp,0(sp)
101056b0:	dec00104 	addi	sp,sp,4
101056b4:	f800283a 	ret

101056b8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
101056b8:	defffc04 	addi	sp,sp,-16
101056bc:	df000315 	stw	fp,12(sp)
101056c0:	df000304 	addi	fp,sp,12
101056c4:	e13ffe15 	stw	r4,-8(fp)
101056c8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
101056cc:	000530fa 	rdctl	r2,ienable
101056d0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
101056d4:	00c00044 	movi	r3,1
101056d8:	e0bfff17 	ldw	r2,-4(fp)
101056dc:	1884983a 	sll	r2,r3,r2
101056e0:	1007883a 	mov	r3,r2
101056e4:	e0bffd17 	ldw	r2,-12(fp)
101056e8:	1884703a 	and	r2,r3,r2
101056ec:	1004c03a 	cmpne	r2,r2,zero
101056f0:	10803fcc 	andi	r2,r2,255
}
101056f4:	e037883a 	mov	sp,fp
101056f8:	df000017 	ldw	fp,0(sp)
101056fc:	dec00104 	addi	sp,sp,4
10105700:	f800283a 	ret

10105704 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10105704:	defff504 	addi	sp,sp,-44
10105708:	dfc00a15 	stw	ra,40(sp)
1010570c:	df000915 	stw	fp,36(sp)
10105710:	df000904 	addi	fp,sp,36
10105714:	e13ffc15 	stw	r4,-16(fp)
10105718:	e17ffd15 	stw	r5,-12(fp)
1010571c:	e1bffe15 	stw	r6,-8(fp)
10105720:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
10105724:	00bffa84 	movi	r2,-22
10105728:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
1010572c:	e0bffd17 	ldw	r2,-12(fp)
10105730:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
10105734:	e0bff817 	ldw	r2,-32(fp)
10105738:	10800808 	cmpgei	r2,r2,32
1010573c:	1000271e 	bne	r2,zero,101057dc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10105740:	0005303a 	rdctl	r2,status
10105744:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10105748:	e0fffb17 	ldw	r3,-20(fp)
1010574c:	00bfff84 	movi	r2,-2
10105750:	1884703a 	and	r2,r3,r2
10105754:	1001703a 	wrctl	status,r2
  
  return context;
10105758:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
1010575c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
10105760:	00840474 	movhi	r2,4113
10105764:	10a6aa04 	addi	r2,r2,-25944
10105768:	e0fff817 	ldw	r3,-32(fp)
1010576c:	180690fa 	slli	r3,r3,3
10105770:	10c5883a 	add	r2,r2,r3
10105774:	e0fffe17 	ldw	r3,-8(fp)
10105778:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
1010577c:	00840474 	movhi	r2,4113
10105780:	10a6aa04 	addi	r2,r2,-25944
10105784:	e0fff817 	ldw	r3,-32(fp)
10105788:	180690fa 	slli	r3,r3,3
1010578c:	10c5883a 	add	r2,r2,r3
10105790:	10800104 	addi	r2,r2,4
10105794:	e0ffff17 	ldw	r3,-4(fp)
10105798:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
1010579c:	e0bffe17 	ldw	r2,-8(fp)
101057a0:	10000526 	beq	r2,zero,101057b8 <alt_iic_isr_register+0xb4>
101057a4:	e0bff817 	ldw	r2,-32(fp)
101057a8:	100b883a 	mov	r5,r2
101057ac:	e13ffc17 	ldw	r4,-16(fp)
101057b0:	01055a40 	call	101055a4 <alt_ic_irq_enable>
101057b4:	00000406 	br	101057c8 <alt_iic_isr_register+0xc4>
101057b8:	e0bff817 	ldw	r2,-32(fp)
101057bc:	100b883a 	mov	r5,r2
101057c0:	e13ffc17 	ldw	r4,-16(fp)
101057c4:	010562c0 	call	1010562c <alt_ic_irq_disable>
101057c8:	e0bff715 	stw	r2,-36(fp)
101057cc:	e0bffa17 	ldw	r2,-24(fp)
101057d0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
101057d4:	e0bff917 	ldw	r2,-28(fp)
101057d8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
101057dc:	e0bff717 	ldw	r2,-36(fp)
}
101057e0:	e037883a 	mov	sp,fp
101057e4:	dfc00117 	ldw	ra,4(sp)
101057e8:	df000017 	ldw	fp,0(sp)
101057ec:	dec00204 	addi	sp,sp,8
101057f0:	f800283a 	ret

101057f4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
101057f4:	defff904 	addi	sp,sp,-28
101057f8:	dfc00615 	stw	ra,24(sp)
101057fc:	df000515 	stw	fp,20(sp)
10105800:	df000504 	addi	fp,sp,20
10105804:	e13ffc15 	stw	r4,-16(fp)
10105808:	e17ffd15 	stw	r5,-12(fp)
1010580c:	e1bffe15 	stw	r6,-8(fp)
10105810:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
10105814:	e1bfff17 	ldw	r6,-4(fp)
10105818:	e17ffe17 	ldw	r5,-8(fp)
1010581c:	e13ffd17 	ldw	r4,-12(fp)
10105820:	0105a340 	call	10105a34 <open>
10105824:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
10105828:	e0bffb17 	ldw	r2,-20(fp)
1010582c:	10001c16 	blt	r2,zero,101058a0 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
10105830:	00840434 	movhi	r2,4112
10105834:	109b3c04 	addi	r2,r2,27888
10105838:	e0fffb17 	ldw	r3,-20(fp)
1010583c:	18c00324 	muli	r3,r3,12
10105840:	10c5883a 	add	r2,r2,r3
10105844:	10c00017 	ldw	r3,0(r2)
10105848:	e0bffc17 	ldw	r2,-16(fp)
1010584c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
10105850:	00840434 	movhi	r2,4112
10105854:	109b3c04 	addi	r2,r2,27888
10105858:	e0fffb17 	ldw	r3,-20(fp)
1010585c:	18c00324 	muli	r3,r3,12
10105860:	10c5883a 	add	r2,r2,r3
10105864:	10800104 	addi	r2,r2,4
10105868:	10c00017 	ldw	r3,0(r2)
1010586c:	e0bffc17 	ldw	r2,-16(fp)
10105870:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10105874:	00840434 	movhi	r2,4112
10105878:	109b3c04 	addi	r2,r2,27888
1010587c:	e0fffb17 	ldw	r3,-20(fp)
10105880:	18c00324 	muli	r3,r3,12
10105884:	10c5883a 	add	r2,r2,r3
10105888:	10800204 	addi	r2,r2,8
1010588c:	10c00017 	ldw	r3,0(r2)
10105890:	e0bffc17 	ldw	r2,-16(fp)
10105894:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10105898:	e13ffb17 	ldw	r4,-20(fp)
1010589c:	0103f980 	call	10103f98 <alt_release_fd>
  }
} 
101058a0:	0001883a 	nop
101058a4:	e037883a 	mov	sp,fp
101058a8:	dfc00117 	ldw	ra,4(sp)
101058ac:	df000017 	ldw	fp,0(sp)
101058b0:	dec00204 	addi	sp,sp,8
101058b4:	f800283a 	ret

101058b8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
101058b8:	defffb04 	addi	sp,sp,-20
101058bc:	dfc00415 	stw	ra,16(sp)
101058c0:	df000315 	stw	fp,12(sp)
101058c4:	df000304 	addi	fp,sp,12
101058c8:	e13ffd15 	stw	r4,-12(fp)
101058cc:	e17ffe15 	stw	r5,-8(fp)
101058d0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
101058d4:	01c07fc4 	movi	r7,511
101058d8:	01800044 	movi	r6,1
101058dc:	e17ffd17 	ldw	r5,-12(fp)
101058e0:	01040434 	movhi	r4,4112
101058e4:	211b3f04 	addi	r4,r4,27900
101058e8:	01057f40 	call	101057f4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
101058ec:	01c07fc4 	movi	r7,511
101058f0:	000d883a 	mov	r6,zero
101058f4:	e17ffe17 	ldw	r5,-8(fp)
101058f8:	01040434 	movhi	r4,4112
101058fc:	211b3c04 	addi	r4,r4,27888
10105900:	01057f40 	call	101057f4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10105904:	01c07fc4 	movi	r7,511
10105908:	01800044 	movi	r6,1
1010590c:	e17fff17 	ldw	r5,-4(fp)
10105910:	01040434 	movhi	r4,4112
10105914:	211b4204 	addi	r4,r4,27912
10105918:	01057f40 	call	101057f4 <alt_open_fd>
}  
1010591c:	0001883a 	nop
10105920:	e037883a 	mov	sp,fp
10105924:	dfc00117 	ldw	ra,4(sp)
10105928:	df000017 	ldw	fp,0(sp)
1010592c:	dec00204 	addi	sp,sp,8
10105930:	f800283a 	ret

10105934 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10105934:	defffe04 	addi	sp,sp,-8
10105938:	dfc00115 	stw	ra,4(sp)
1010593c:	df000015 	stw	fp,0(sp)
10105940:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10105944:	d0a00917 	ldw	r2,-32732(gp)
10105948:	10000326 	beq	r2,zero,10105958 <alt_get_errno+0x24>
1010594c:	d0a00917 	ldw	r2,-32732(gp)
10105950:	103ee83a 	callr	r2
10105954:	00000106 	br	1010595c <alt_get_errno+0x28>
10105958:	d0a6da04 	addi	r2,gp,-25752
}
1010595c:	e037883a 	mov	sp,fp
10105960:	dfc00117 	ldw	ra,4(sp)
10105964:	df000017 	ldw	fp,0(sp)
10105968:	dec00204 	addi	sp,sp,8
1010596c:	f800283a 	ret

10105970 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
10105970:	defffd04 	addi	sp,sp,-12
10105974:	df000215 	stw	fp,8(sp)
10105978:	df000204 	addi	fp,sp,8
1010597c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
10105980:	e0bfff17 	ldw	r2,-4(fp)
10105984:	10800217 	ldw	r2,8(r2)
10105988:	10d00034 	orhi	r3,r2,16384
1010598c:	e0bfff17 	ldw	r2,-4(fp)
10105990:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10105994:	e03ffe15 	stw	zero,-8(fp)
10105998:	00001d06 	br	10105a10 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1010599c:	00840434 	movhi	r2,4112
101059a0:	109b3c04 	addi	r2,r2,27888
101059a4:	e0fffe17 	ldw	r3,-8(fp)
101059a8:	18c00324 	muli	r3,r3,12
101059ac:	10c5883a 	add	r2,r2,r3
101059b0:	10c00017 	ldw	r3,0(r2)
101059b4:	e0bfff17 	ldw	r2,-4(fp)
101059b8:	10800017 	ldw	r2,0(r2)
101059bc:	1880111e 	bne	r3,r2,10105a04 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
101059c0:	00840434 	movhi	r2,4112
101059c4:	109b3c04 	addi	r2,r2,27888
101059c8:	e0fffe17 	ldw	r3,-8(fp)
101059cc:	18c00324 	muli	r3,r3,12
101059d0:	10c5883a 	add	r2,r2,r3
101059d4:	10800204 	addi	r2,r2,8
101059d8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
101059dc:	1000090e 	bge	r2,zero,10105a04 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
101059e0:	e0bffe17 	ldw	r2,-8(fp)
101059e4:	10c00324 	muli	r3,r2,12
101059e8:	00840434 	movhi	r2,4112
101059ec:	109b3c04 	addi	r2,r2,27888
101059f0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
101059f4:	e0bfff17 	ldw	r2,-4(fp)
101059f8:	18800226 	beq	r3,r2,10105a04 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
101059fc:	00bffcc4 	movi	r2,-13
10105a00:	00000806 	br	10105a24 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10105a04:	e0bffe17 	ldw	r2,-8(fp)
10105a08:	10800044 	addi	r2,r2,1
10105a0c:	e0bffe15 	stw	r2,-8(fp)
10105a10:	d0a00817 	ldw	r2,-32736(gp)
10105a14:	1007883a 	mov	r3,r2
10105a18:	e0bffe17 	ldw	r2,-8(fp)
10105a1c:	18bfdf2e 	bgeu	r3,r2,1010599c <__alt_data_end+0xfffe599c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
10105a20:	0005883a 	mov	r2,zero
}
10105a24:	e037883a 	mov	sp,fp
10105a28:	df000017 	ldw	fp,0(sp)
10105a2c:	dec00104 	addi	sp,sp,4
10105a30:	f800283a 	ret

10105a34 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10105a34:	defff604 	addi	sp,sp,-40
10105a38:	dfc00915 	stw	ra,36(sp)
10105a3c:	df000815 	stw	fp,32(sp)
10105a40:	df000804 	addi	fp,sp,32
10105a44:	e13ffd15 	stw	r4,-12(fp)
10105a48:	e17ffe15 	stw	r5,-8(fp)
10105a4c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
10105a50:	00bfffc4 	movi	r2,-1
10105a54:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
10105a58:	00bffb44 	movi	r2,-19
10105a5c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
10105a60:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10105a64:	d1600604 	addi	r5,gp,-32744
10105a68:	e13ffd17 	ldw	r4,-12(fp)
10105a6c:	0105d500 	call	10105d50 <alt_find_dev>
10105a70:	e0bff815 	stw	r2,-32(fp)
10105a74:	e0bff817 	ldw	r2,-32(fp)
10105a78:	1000051e 	bne	r2,zero,10105a90 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
10105a7c:	e13ffd17 	ldw	r4,-12(fp)
10105a80:	0105de00 	call	10105de0 <alt_find_file>
10105a84:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
10105a88:	00800044 	movi	r2,1
10105a8c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
10105a90:	e0bff817 	ldw	r2,-32(fp)
10105a94:	10002926 	beq	r2,zero,10105b3c <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
10105a98:	e13ff817 	ldw	r4,-32(fp)
10105a9c:	0105ee80 	call	10105ee8 <alt_get_fd>
10105aa0:	e0bff915 	stw	r2,-28(fp)
10105aa4:	e0bff917 	ldw	r2,-28(fp)
10105aa8:	1000030e 	bge	r2,zero,10105ab8 <open+0x84>
    {
      status = index;
10105aac:	e0bff917 	ldw	r2,-28(fp)
10105ab0:	e0bffa15 	stw	r2,-24(fp)
10105ab4:	00002306 	br	10105b44 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
10105ab8:	e0bff917 	ldw	r2,-28(fp)
10105abc:	10c00324 	muli	r3,r2,12
10105ac0:	00840434 	movhi	r2,4112
10105ac4:	109b3c04 	addi	r2,r2,27888
10105ac8:	1885883a 	add	r2,r3,r2
10105acc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
10105ad0:	e0fffe17 	ldw	r3,-8(fp)
10105ad4:	00900034 	movhi	r2,16384
10105ad8:	10bfffc4 	addi	r2,r2,-1
10105adc:	1886703a 	and	r3,r3,r2
10105ae0:	e0bffc17 	ldw	r2,-16(fp)
10105ae4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10105ae8:	e0bffb17 	ldw	r2,-20(fp)
10105aec:	1000051e 	bne	r2,zero,10105b04 <open+0xd0>
10105af0:	e13ffc17 	ldw	r4,-16(fp)
10105af4:	01059700 	call	10105970 <alt_file_locked>
10105af8:	e0bffa15 	stw	r2,-24(fp)
10105afc:	e0bffa17 	ldw	r2,-24(fp)
10105b00:	10001016 	blt	r2,zero,10105b44 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
10105b04:	e0bff817 	ldw	r2,-32(fp)
10105b08:	10800317 	ldw	r2,12(r2)
10105b0c:	10000826 	beq	r2,zero,10105b30 <open+0xfc>
10105b10:	e0bff817 	ldw	r2,-32(fp)
10105b14:	10800317 	ldw	r2,12(r2)
10105b18:	e1ffff17 	ldw	r7,-4(fp)
10105b1c:	e1bffe17 	ldw	r6,-8(fp)
10105b20:	e17ffd17 	ldw	r5,-12(fp)
10105b24:	e13ffc17 	ldw	r4,-16(fp)
10105b28:	103ee83a 	callr	r2
10105b2c:	00000106 	br	10105b34 <open+0x100>
10105b30:	0005883a 	mov	r2,zero
10105b34:	e0bffa15 	stw	r2,-24(fp)
10105b38:	00000206 	br	10105b44 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
10105b3c:	00bffb44 	movi	r2,-19
10105b40:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
10105b44:	e0bffa17 	ldw	r2,-24(fp)
10105b48:	1000090e 	bge	r2,zero,10105b70 <open+0x13c>
  {
    alt_release_fd (index);  
10105b4c:	e13ff917 	ldw	r4,-28(fp)
10105b50:	0103f980 	call	10103f98 <alt_release_fd>
    ALT_ERRNO = -status;
10105b54:	01059340 	call	10105934 <alt_get_errno>
10105b58:	1007883a 	mov	r3,r2
10105b5c:	e0bffa17 	ldw	r2,-24(fp)
10105b60:	0085c83a 	sub	r2,zero,r2
10105b64:	18800015 	stw	r2,0(r3)
    return -1;
10105b68:	00bfffc4 	movi	r2,-1
10105b6c:	00000106 	br	10105b74 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
10105b70:	e0bff917 	ldw	r2,-28(fp)
}
10105b74:	e037883a 	mov	sp,fp
10105b78:	dfc00117 	ldw	ra,4(sp)
10105b7c:	df000017 	ldw	fp,0(sp)
10105b80:	dec00204 	addi	sp,sp,8
10105b84:	f800283a 	ret

10105b88 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10105b88:	defffa04 	addi	sp,sp,-24
10105b8c:	df000515 	stw	fp,20(sp)
10105b90:	df000504 	addi	fp,sp,20
10105b94:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10105b98:	0005303a 	rdctl	r2,status
10105b9c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10105ba0:	e0fffc17 	ldw	r3,-16(fp)
10105ba4:	00bfff84 	movi	r2,-2
10105ba8:	1884703a 	and	r2,r3,r2
10105bac:	1001703a 	wrctl	status,r2
  
  return context;
10105bb0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
10105bb4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
10105bb8:	e0bfff17 	ldw	r2,-4(fp)
10105bbc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10105bc0:	e0bffd17 	ldw	r2,-12(fp)
10105bc4:	10800017 	ldw	r2,0(r2)
10105bc8:	e0fffd17 	ldw	r3,-12(fp)
10105bcc:	18c00117 	ldw	r3,4(r3)
10105bd0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
10105bd4:	e0bffd17 	ldw	r2,-12(fp)
10105bd8:	10800117 	ldw	r2,4(r2)
10105bdc:	e0fffd17 	ldw	r3,-12(fp)
10105be0:	18c00017 	ldw	r3,0(r3)
10105be4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
10105be8:	e0bffd17 	ldw	r2,-12(fp)
10105bec:	e0fffd17 	ldw	r3,-12(fp)
10105bf0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10105bf4:	e0bffd17 	ldw	r2,-12(fp)
10105bf8:	e0fffd17 	ldw	r3,-12(fp)
10105bfc:	10c00015 	stw	r3,0(r2)
10105c00:	e0bffb17 	ldw	r2,-20(fp)
10105c04:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10105c08:	e0bffe17 	ldw	r2,-8(fp)
10105c0c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
10105c10:	0001883a 	nop
10105c14:	e037883a 	mov	sp,fp
10105c18:	df000017 	ldw	fp,0(sp)
10105c1c:	dec00104 	addi	sp,sp,4
10105c20:	f800283a 	ret

10105c24 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10105c24:	defffb04 	addi	sp,sp,-20
10105c28:	dfc00415 	stw	ra,16(sp)
10105c2c:	df000315 	stw	fp,12(sp)
10105c30:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10105c34:	d0a01e17 	ldw	r2,-32648(gp)
10105c38:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10105c3c:	d0a6e017 	ldw	r2,-25728(gp)
10105c40:	10800044 	addi	r2,r2,1
10105c44:	d0a6e015 	stw	r2,-25728(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10105c48:	00002e06 	br	10105d04 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10105c4c:	e0bffd17 	ldw	r2,-12(fp)
10105c50:	10800017 	ldw	r2,0(r2)
10105c54:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10105c58:	e0bffd17 	ldw	r2,-12(fp)
10105c5c:	10800403 	ldbu	r2,16(r2)
10105c60:	10803fcc 	andi	r2,r2,255
10105c64:	10000426 	beq	r2,zero,10105c78 <alt_tick+0x54>
10105c68:	d0a6e017 	ldw	r2,-25728(gp)
10105c6c:	1000021e 	bne	r2,zero,10105c78 <alt_tick+0x54>
    {
      alarm->rollover = 0;
10105c70:	e0bffd17 	ldw	r2,-12(fp)
10105c74:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10105c78:	e0bffd17 	ldw	r2,-12(fp)
10105c7c:	10800217 	ldw	r2,8(r2)
10105c80:	d0e6e017 	ldw	r3,-25728(gp)
10105c84:	18801d36 	bltu	r3,r2,10105cfc <alt_tick+0xd8>
10105c88:	e0bffd17 	ldw	r2,-12(fp)
10105c8c:	10800403 	ldbu	r2,16(r2)
10105c90:	10803fcc 	andi	r2,r2,255
10105c94:	1000191e 	bne	r2,zero,10105cfc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
10105c98:	e0bffd17 	ldw	r2,-12(fp)
10105c9c:	10800317 	ldw	r2,12(r2)
10105ca0:	e0fffd17 	ldw	r3,-12(fp)
10105ca4:	18c00517 	ldw	r3,20(r3)
10105ca8:	1809883a 	mov	r4,r3
10105cac:	103ee83a 	callr	r2
10105cb0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10105cb4:	e0bfff17 	ldw	r2,-4(fp)
10105cb8:	1000031e 	bne	r2,zero,10105cc8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
10105cbc:	e13ffd17 	ldw	r4,-12(fp)
10105cc0:	0105b880 	call	10105b88 <alt_alarm_stop>
10105cc4:	00000d06 	br	10105cfc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
10105cc8:	e0bffd17 	ldw	r2,-12(fp)
10105ccc:	10c00217 	ldw	r3,8(r2)
10105cd0:	e0bfff17 	ldw	r2,-4(fp)
10105cd4:	1887883a 	add	r3,r3,r2
10105cd8:	e0bffd17 	ldw	r2,-12(fp)
10105cdc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
10105ce0:	e0bffd17 	ldw	r2,-12(fp)
10105ce4:	10c00217 	ldw	r3,8(r2)
10105ce8:	d0a6e017 	ldw	r2,-25728(gp)
10105cec:	1880032e 	bgeu	r3,r2,10105cfc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
10105cf0:	e0bffd17 	ldw	r2,-12(fp)
10105cf4:	00c00044 	movi	r3,1
10105cf8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
10105cfc:	e0bffe17 	ldw	r2,-8(fp)
10105d00:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10105d04:	e0fffd17 	ldw	r3,-12(fp)
10105d08:	d0a01e04 	addi	r2,gp,-32648
10105d0c:	18bfcf1e 	bne	r3,r2,10105c4c <__alt_data_end+0xfffe5c4c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
10105d10:	0001883a 	nop
}
10105d14:	0001883a 	nop
10105d18:	e037883a 	mov	sp,fp
10105d1c:	dfc00117 	ldw	ra,4(sp)
10105d20:	df000017 	ldw	fp,0(sp)
10105d24:	dec00204 	addi	sp,sp,8
10105d28:	f800283a 	ret

10105d2c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
10105d2c:	deffff04 	addi	sp,sp,-4
10105d30:	df000015 	stw	fp,0(sp)
10105d34:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10105d38:	000170fa 	wrctl	ienable,zero
}
10105d3c:	0001883a 	nop
10105d40:	e037883a 	mov	sp,fp
10105d44:	df000017 	ldw	fp,0(sp)
10105d48:	dec00104 	addi	sp,sp,4
10105d4c:	f800283a 	ret

10105d50 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10105d50:	defffa04 	addi	sp,sp,-24
10105d54:	dfc00515 	stw	ra,20(sp)
10105d58:	df000415 	stw	fp,16(sp)
10105d5c:	df000404 	addi	fp,sp,16
10105d60:	e13ffe15 	stw	r4,-8(fp)
10105d64:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
10105d68:	e0bfff17 	ldw	r2,-4(fp)
10105d6c:	10800017 	ldw	r2,0(r2)
10105d70:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10105d74:	e13ffe17 	ldw	r4,-8(fp)
10105d78:	0100ba80 	call	10100ba8 <strlen>
10105d7c:	10800044 	addi	r2,r2,1
10105d80:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10105d84:	00000d06 	br	10105dbc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10105d88:	e0bffc17 	ldw	r2,-16(fp)
10105d8c:	10800217 	ldw	r2,8(r2)
10105d90:	e0fffd17 	ldw	r3,-12(fp)
10105d94:	180d883a 	mov	r6,r3
10105d98:	e17ffe17 	ldw	r5,-8(fp)
10105d9c:	1009883a 	mov	r4,r2
10105da0:	01061040 	call	10106104 <memcmp>
10105da4:	1000021e 	bne	r2,zero,10105db0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
10105da8:	e0bffc17 	ldw	r2,-16(fp)
10105dac:	00000706 	br	10105dcc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10105db0:	e0bffc17 	ldw	r2,-16(fp)
10105db4:	10800017 	ldw	r2,0(r2)
10105db8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10105dbc:	e0fffc17 	ldw	r3,-16(fp)
10105dc0:	e0bfff17 	ldw	r2,-4(fp)
10105dc4:	18bff01e 	bne	r3,r2,10105d88 <__alt_data_end+0xfffe5d88>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
10105dc8:	0005883a 	mov	r2,zero
}
10105dcc:	e037883a 	mov	sp,fp
10105dd0:	dfc00117 	ldw	ra,4(sp)
10105dd4:	df000017 	ldw	fp,0(sp)
10105dd8:	dec00204 	addi	sp,sp,8
10105ddc:	f800283a 	ret

10105de0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10105de0:	defffb04 	addi	sp,sp,-20
10105de4:	dfc00415 	stw	ra,16(sp)
10105de8:	df000315 	stw	fp,12(sp)
10105dec:	df000304 	addi	fp,sp,12
10105df0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10105df4:	d0a00417 	ldw	r2,-32752(gp)
10105df8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10105dfc:	00003106 	br	10105ec4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
10105e00:	e0bffd17 	ldw	r2,-12(fp)
10105e04:	10800217 	ldw	r2,8(r2)
10105e08:	1009883a 	mov	r4,r2
10105e0c:	0100ba80 	call	10100ba8 <strlen>
10105e10:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10105e14:	e0bffd17 	ldw	r2,-12(fp)
10105e18:	10c00217 	ldw	r3,8(r2)
10105e1c:	e0bffe17 	ldw	r2,-8(fp)
10105e20:	10bfffc4 	addi	r2,r2,-1
10105e24:	1885883a 	add	r2,r3,r2
10105e28:	10800003 	ldbu	r2,0(r2)
10105e2c:	10803fcc 	andi	r2,r2,255
10105e30:	1080201c 	xori	r2,r2,128
10105e34:	10bfe004 	addi	r2,r2,-128
10105e38:	10800bd8 	cmpnei	r2,r2,47
10105e3c:	1000031e 	bne	r2,zero,10105e4c <alt_find_file+0x6c>
    {
      len -= 1;
10105e40:	e0bffe17 	ldw	r2,-8(fp)
10105e44:	10bfffc4 	addi	r2,r2,-1
10105e48:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10105e4c:	e0bffe17 	ldw	r2,-8(fp)
10105e50:	e0ffff17 	ldw	r3,-4(fp)
10105e54:	1885883a 	add	r2,r3,r2
10105e58:	10800003 	ldbu	r2,0(r2)
10105e5c:	10803fcc 	andi	r2,r2,255
10105e60:	1080201c 	xori	r2,r2,128
10105e64:	10bfe004 	addi	r2,r2,-128
10105e68:	10800be0 	cmpeqi	r2,r2,47
10105e6c:	1000081e 	bne	r2,zero,10105e90 <alt_find_file+0xb0>
10105e70:	e0bffe17 	ldw	r2,-8(fp)
10105e74:	e0ffff17 	ldw	r3,-4(fp)
10105e78:	1885883a 	add	r2,r3,r2
10105e7c:	10800003 	ldbu	r2,0(r2)
10105e80:	10803fcc 	andi	r2,r2,255
10105e84:	1080201c 	xori	r2,r2,128
10105e88:	10bfe004 	addi	r2,r2,-128
10105e8c:	10000a1e 	bne	r2,zero,10105eb8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
10105e90:	e0bffd17 	ldw	r2,-12(fp)
10105e94:	10800217 	ldw	r2,8(r2)
10105e98:	e0fffe17 	ldw	r3,-8(fp)
10105e9c:	180d883a 	mov	r6,r3
10105ea0:	e17fff17 	ldw	r5,-4(fp)
10105ea4:	1009883a 	mov	r4,r2
10105ea8:	01061040 	call	10106104 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10105eac:	1000021e 	bne	r2,zero,10105eb8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
10105eb0:	e0bffd17 	ldw	r2,-12(fp)
10105eb4:	00000706 	br	10105ed4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
10105eb8:	e0bffd17 	ldw	r2,-12(fp)
10105ebc:	10800017 	ldw	r2,0(r2)
10105ec0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10105ec4:	e0fffd17 	ldw	r3,-12(fp)
10105ec8:	d0a00404 	addi	r2,gp,-32752
10105ecc:	18bfcc1e 	bne	r3,r2,10105e00 <__alt_data_end+0xfffe5e00>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
10105ed0:	0005883a 	mov	r2,zero
}
10105ed4:	e037883a 	mov	sp,fp
10105ed8:	dfc00117 	ldw	ra,4(sp)
10105edc:	df000017 	ldw	fp,0(sp)
10105ee0:	dec00204 	addi	sp,sp,8
10105ee4:	f800283a 	ret

10105ee8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10105ee8:	defffc04 	addi	sp,sp,-16
10105eec:	df000315 	stw	fp,12(sp)
10105ef0:	df000304 	addi	fp,sp,12
10105ef4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
10105ef8:	00bffa04 	movi	r2,-24
10105efc:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10105f00:	e03ffd15 	stw	zero,-12(fp)
10105f04:	00001906 	br	10105f6c <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
10105f08:	00840434 	movhi	r2,4112
10105f0c:	109b3c04 	addi	r2,r2,27888
10105f10:	e0fffd17 	ldw	r3,-12(fp)
10105f14:	18c00324 	muli	r3,r3,12
10105f18:	10c5883a 	add	r2,r2,r3
10105f1c:	10800017 	ldw	r2,0(r2)
10105f20:	10000f1e 	bne	r2,zero,10105f60 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
10105f24:	00840434 	movhi	r2,4112
10105f28:	109b3c04 	addi	r2,r2,27888
10105f2c:	e0fffd17 	ldw	r3,-12(fp)
10105f30:	18c00324 	muli	r3,r3,12
10105f34:	10c5883a 	add	r2,r2,r3
10105f38:	e0ffff17 	ldw	r3,-4(fp)
10105f3c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10105f40:	d0e00817 	ldw	r3,-32736(gp)
10105f44:	e0bffd17 	ldw	r2,-12(fp)
10105f48:	1880020e 	bge	r3,r2,10105f54 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
10105f4c:	e0bffd17 	ldw	r2,-12(fp)
10105f50:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
10105f54:	e0bffd17 	ldw	r2,-12(fp)
10105f58:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
10105f5c:	00000606 	br	10105f78 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10105f60:	e0bffd17 	ldw	r2,-12(fp)
10105f64:	10800044 	addi	r2,r2,1
10105f68:	e0bffd15 	stw	r2,-12(fp)
10105f6c:	e0bffd17 	ldw	r2,-12(fp)
10105f70:	10800810 	cmplti	r2,r2,32
10105f74:	103fe41e 	bne	r2,zero,10105f08 <__alt_data_end+0xfffe5f08>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10105f78:	e0bffe17 	ldw	r2,-8(fp)
}
10105f7c:	e037883a 	mov	sp,fp
10105f80:	df000017 	ldw	fp,0(sp)
10105f84:	dec00104 	addi	sp,sp,4
10105f88:	f800283a 	ret

10105f8c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
10105f8c:	defffb04 	addi	sp,sp,-20
10105f90:	df000415 	stw	fp,16(sp)
10105f94:	df000404 	addi	fp,sp,16
10105f98:	e13ffe15 	stw	r4,-8(fp)
10105f9c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
10105fa0:	e0bfff17 	ldw	r2,-4(fp)
10105fa4:	10840070 	cmpltui	r2,r2,4097
10105fa8:	1000021e 	bne	r2,zero,10105fb4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
10105fac:	00840004 	movi	r2,4096
10105fb0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
10105fb4:	e0fffe17 	ldw	r3,-8(fp)
10105fb8:	e0bfff17 	ldw	r2,-4(fp)
10105fbc:	1885883a 	add	r2,r3,r2
10105fc0:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
10105fc4:	e0bffe17 	ldw	r2,-8(fp)
10105fc8:	e0bffc15 	stw	r2,-16(fp)
10105fcc:	00000506 	br	10105fe4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
10105fd0:	e0bffc17 	ldw	r2,-16(fp)
10105fd4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
10105fd8:	e0bffc17 	ldw	r2,-16(fp)
10105fdc:	10800804 	addi	r2,r2,32
10105fe0:	e0bffc15 	stw	r2,-16(fp)
10105fe4:	e0fffc17 	ldw	r3,-16(fp)
10105fe8:	e0bffd17 	ldw	r2,-12(fp)
10105fec:	18bff836 	bltu	r3,r2,10105fd0 <__alt_data_end+0xfffe5fd0>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
10105ff0:	e0bffe17 	ldw	r2,-8(fp)
10105ff4:	108007cc 	andi	r2,r2,31
10105ff8:	10000226 	beq	r2,zero,10106004 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
10105ffc:	e0bffc17 	ldw	r2,-16(fp)
10106000:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
10106004:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
10106008:	0001883a 	nop
1010600c:	e037883a 	mov	sp,fp
10106010:	df000017 	ldw	fp,0(sp)
10106014:	dec00104 	addi	sp,sp,4
10106018:	f800283a 	ret

1010601c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
1010601c:	defffe04 	addi	sp,sp,-8
10106020:	df000115 	stw	fp,4(sp)
10106024:	df000104 	addi	fp,sp,4
10106028:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
1010602c:	e0bfff17 	ldw	r2,-4(fp)
10106030:	10bffe84 	addi	r2,r2,-6
10106034:	10c00428 	cmpgeui	r3,r2,16
10106038:	18001a1e 	bne	r3,zero,101060a4 <alt_exception_cause_generated_bad_addr+0x88>
1010603c:	100690ba 	slli	r3,r2,2
10106040:	00840434 	movhi	r2,4112
10106044:	10981504 	addi	r2,r2,24660
10106048:	1885883a 	add	r2,r3,r2
1010604c:	10800017 	ldw	r2,0(r2)
10106050:	1000683a 	jmp	r2
10106054:	10106094 	ori	zero,r2,16770
10106058:	10106094 	ori	zero,r2,16770
1010605c:	101060a4 	muli	zero,r2,16770
10106060:	101060a4 	muli	zero,r2,16770
10106064:	101060a4 	muli	zero,r2,16770
10106068:	10106094 	ori	zero,r2,16770
1010606c:	1010609c 	xori	zero,r2,16770
10106070:	101060a4 	muli	zero,r2,16770
10106074:	10106094 	ori	zero,r2,16770
10106078:	10106094 	ori	zero,r2,16770
1010607c:	101060a4 	muli	zero,r2,16770
10106080:	10106094 	ori	zero,r2,16770
10106084:	1010609c 	xori	zero,r2,16770
10106088:	101060a4 	muli	zero,r2,16770
1010608c:	101060a4 	muli	zero,r2,16770
10106090:	10106094 	ori	zero,r2,16770
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
10106094:	00800044 	movi	r2,1
10106098:	00000306 	br	101060a8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
1010609c:	0005883a 	mov	r2,zero
101060a0:	00000106 	br	101060a8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
101060a4:	0005883a 	mov	r2,zero
  }
}
101060a8:	e037883a 	mov	sp,fp
101060ac:	df000017 	ldw	fp,0(sp)
101060b0:	dec00104 	addi	sp,sp,4
101060b4:	f800283a 	ret

101060b8 <atexit>:
101060b8:	200b883a 	mov	r5,r4
101060bc:	000f883a 	mov	r7,zero
101060c0:	000d883a 	mov	r6,zero
101060c4:	0009883a 	mov	r4,zero
101060c8:	01061801 	jmpi	10106180 <__register_exitproc>

101060cc <exit>:
101060cc:	defffe04 	addi	sp,sp,-8
101060d0:	000b883a 	mov	r5,zero
101060d4:	dc000015 	stw	r16,0(sp)
101060d8:	dfc00115 	stw	ra,4(sp)
101060dc:	2021883a 	mov	r16,r4
101060e0:	01062980 	call	10106298 <__call_exitprocs>
101060e4:	00840434 	movhi	r2,4112
101060e8:	109fbe04 	addi	r2,r2,32504
101060ec:	11000017 	ldw	r4,0(r2)
101060f0:	20800f17 	ldw	r2,60(r4)
101060f4:	10000126 	beq	r2,zero,101060fc <exit+0x30>
101060f8:	103ee83a 	callr	r2
101060fc:	8009883a 	mov	r4,r16
10106100:	01064180 	call	10106418 <_exit>

10106104 <memcmp>:
10106104:	01c000c4 	movi	r7,3
10106108:	3980192e 	bgeu	r7,r6,10106170 <memcmp+0x6c>
1010610c:	2144b03a 	or	r2,r4,r5
10106110:	11c4703a 	and	r2,r2,r7
10106114:	10000f26 	beq	r2,zero,10106154 <memcmp+0x50>
10106118:	20800003 	ldbu	r2,0(r4)
1010611c:	28c00003 	ldbu	r3,0(r5)
10106120:	10c0151e 	bne	r2,r3,10106178 <memcmp+0x74>
10106124:	31bfff84 	addi	r6,r6,-2
10106128:	01ffffc4 	movi	r7,-1
1010612c:	00000406 	br	10106140 <memcmp+0x3c>
10106130:	20800003 	ldbu	r2,0(r4)
10106134:	28c00003 	ldbu	r3,0(r5)
10106138:	31bfffc4 	addi	r6,r6,-1
1010613c:	10c00e1e 	bne	r2,r3,10106178 <memcmp+0x74>
10106140:	21000044 	addi	r4,r4,1
10106144:	29400044 	addi	r5,r5,1
10106148:	31fff91e 	bne	r6,r7,10106130 <__alt_data_end+0xfffe6130>
1010614c:	0005883a 	mov	r2,zero
10106150:	f800283a 	ret
10106154:	20c00017 	ldw	r3,0(r4)
10106158:	28800017 	ldw	r2,0(r5)
1010615c:	18bfee1e 	bne	r3,r2,10106118 <__alt_data_end+0xfffe6118>
10106160:	31bfff04 	addi	r6,r6,-4
10106164:	21000104 	addi	r4,r4,4
10106168:	29400104 	addi	r5,r5,4
1010616c:	39bff936 	bltu	r7,r6,10106154 <__alt_data_end+0xfffe6154>
10106170:	303fe91e 	bne	r6,zero,10106118 <__alt_data_end+0xfffe6118>
10106174:	003ff506 	br	1010614c <__alt_data_end+0xfffe614c>
10106178:	10c5c83a 	sub	r2,r2,r3
1010617c:	f800283a 	ret

10106180 <__register_exitproc>:
10106180:	defffa04 	addi	sp,sp,-24
10106184:	dc000315 	stw	r16,12(sp)
10106188:	04040434 	movhi	r16,4112
1010618c:	841fbe04 	addi	r16,r16,32504
10106190:	80c00017 	ldw	r3,0(r16)
10106194:	dc400415 	stw	r17,16(sp)
10106198:	dfc00515 	stw	ra,20(sp)
1010619c:	18805217 	ldw	r2,328(r3)
101061a0:	2023883a 	mov	r17,r4
101061a4:	10003726 	beq	r2,zero,10106284 <__register_exitproc+0x104>
101061a8:	10c00117 	ldw	r3,4(r2)
101061ac:	010007c4 	movi	r4,31
101061b0:	20c00e16 	blt	r4,r3,101061ec <__register_exitproc+0x6c>
101061b4:	1a000044 	addi	r8,r3,1
101061b8:	8800221e 	bne	r17,zero,10106244 <__register_exitproc+0xc4>
101061bc:	18c00084 	addi	r3,r3,2
101061c0:	18c7883a 	add	r3,r3,r3
101061c4:	18c7883a 	add	r3,r3,r3
101061c8:	12000115 	stw	r8,4(r2)
101061cc:	10c7883a 	add	r3,r2,r3
101061d0:	19400015 	stw	r5,0(r3)
101061d4:	0005883a 	mov	r2,zero
101061d8:	dfc00517 	ldw	ra,20(sp)
101061dc:	dc400417 	ldw	r17,16(sp)
101061e0:	dc000317 	ldw	r16,12(sp)
101061e4:	dec00604 	addi	sp,sp,24
101061e8:	f800283a 	ret
101061ec:	00800034 	movhi	r2,0
101061f0:	10800004 	addi	r2,r2,0
101061f4:	10002626 	beq	r2,zero,10106290 <__register_exitproc+0x110>
101061f8:	01006404 	movi	r4,400
101061fc:	d9400015 	stw	r5,0(sp)
10106200:	d9800115 	stw	r6,4(sp)
10106204:	d9c00215 	stw	r7,8(sp)
10106208:	00000000 	call	10000000 <__reset-0x100000>
1010620c:	d9400017 	ldw	r5,0(sp)
10106210:	d9800117 	ldw	r6,4(sp)
10106214:	d9c00217 	ldw	r7,8(sp)
10106218:	10001d26 	beq	r2,zero,10106290 <__register_exitproc+0x110>
1010621c:	81000017 	ldw	r4,0(r16)
10106220:	10000115 	stw	zero,4(r2)
10106224:	02000044 	movi	r8,1
10106228:	22405217 	ldw	r9,328(r4)
1010622c:	0007883a 	mov	r3,zero
10106230:	12400015 	stw	r9,0(r2)
10106234:	20805215 	stw	r2,328(r4)
10106238:	10006215 	stw	zero,392(r2)
1010623c:	10006315 	stw	zero,396(r2)
10106240:	883fde26 	beq	r17,zero,101061bc <__alt_data_end+0xfffe61bc>
10106244:	18c9883a 	add	r4,r3,r3
10106248:	2109883a 	add	r4,r4,r4
1010624c:	1109883a 	add	r4,r2,r4
10106250:	21802215 	stw	r6,136(r4)
10106254:	01800044 	movi	r6,1
10106258:	12406217 	ldw	r9,392(r2)
1010625c:	30cc983a 	sll	r6,r6,r3
10106260:	4992b03a 	or	r9,r9,r6
10106264:	12406215 	stw	r9,392(r2)
10106268:	21c04215 	stw	r7,264(r4)
1010626c:	01000084 	movi	r4,2
10106270:	893fd21e 	bne	r17,r4,101061bc <__alt_data_end+0xfffe61bc>
10106274:	11006317 	ldw	r4,396(r2)
10106278:	218cb03a 	or	r6,r4,r6
1010627c:	11806315 	stw	r6,396(r2)
10106280:	003fce06 	br	101061bc <__alt_data_end+0xfffe61bc>
10106284:	18805304 	addi	r2,r3,332
10106288:	18805215 	stw	r2,328(r3)
1010628c:	003fc606 	br	101061a8 <__alt_data_end+0xfffe61a8>
10106290:	00bfffc4 	movi	r2,-1
10106294:	003fd006 	br	101061d8 <__alt_data_end+0xfffe61d8>

10106298 <__call_exitprocs>:
10106298:	defff504 	addi	sp,sp,-44
1010629c:	df000915 	stw	fp,36(sp)
101062a0:	dd400615 	stw	r21,24(sp)
101062a4:	dc800315 	stw	r18,12(sp)
101062a8:	dfc00a15 	stw	ra,40(sp)
101062ac:	ddc00815 	stw	r23,32(sp)
101062b0:	dd800715 	stw	r22,28(sp)
101062b4:	dd000515 	stw	r20,20(sp)
101062b8:	dcc00415 	stw	r19,16(sp)
101062bc:	dc400215 	stw	r17,8(sp)
101062c0:	dc000115 	stw	r16,4(sp)
101062c4:	d9000015 	stw	r4,0(sp)
101062c8:	2839883a 	mov	fp,r5
101062cc:	04800044 	movi	r18,1
101062d0:	057fffc4 	movi	r21,-1
101062d4:	00840434 	movhi	r2,4112
101062d8:	109fbe04 	addi	r2,r2,32504
101062dc:	12000017 	ldw	r8,0(r2)
101062e0:	45005217 	ldw	r20,328(r8)
101062e4:	44c05204 	addi	r19,r8,328
101062e8:	a0001c26 	beq	r20,zero,1010635c <__call_exitprocs+0xc4>
101062ec:	a0800117 	ldw	r2,4(r20)
101062f0:	15ffffc4 	addi	r23,r2,-1
101062f4:	b8000d16 	blt	r23,zero,1010632c <__call_exitprocs+0x94>
101062f8:	14000044 	addi	r16,r2,1
101062fc:	8421883a 	add	r16,r16,r16
10106300:	8421883a 	add	r16,r16,r16
10106304:	84402004 	addi	r17,r16,128
10106308:	a463883a 	add	r17,r20,r17
1010630c:	a421883a 	add	r16,r20,r16
10106310:	e0001e26 	beq	fp,zero,1010638c <__call_exitprocs+0xf4>
10106314:	80804017 	ldw	r2,256(r16)
10106318:	e0801c26 	beq	fp,r2,1010638c <__call_exitprocs+0xf4>
1010631c:	bdffffc4 	addi	r23,r23,-1
10106320:	843fff04 	addi	r16,r16,-4
10106324:	8c7fff04 	addi	r17,r17,-4
10106328:	bd7ff91e 	bne	r23,r21,10106310 <__alt_data_end+0xfffe6310>
1010632c:	00800034 	movhi	r2,0
10106330:	10800004 	addi	r2,r2,0
10106334:	10000926 	beq	r2,zero,1010635c <__call_exitprocs+0xc4>
10106338:	a0800117 	ldw	r2,4(r20)
1010633c:	1000301e 	bne	r2,zero,10106400 <__call_exitprocs+0x168>
10106340:	a0800017 	ldw	r2,0(r20)
10106344:	10003226 	beq	r2,zero,10106410 <__call_exitprocs+0x178>
10106348:	a009883a 	mov	r4,r20
1010634c:	98800015 	stw	r2,0(r19)
10106350:	00000000 	call	10000000 <__reset-0x100000>
10106354:	9d000017 	ldw	r20,0(r19)
10106358:	a03fe41e 	bne	r20,zero,101062ec <__alt_data_end+0xfffe62ec>
1010635c:	dfc00a17 	ldw	ra,40(sp)
10106360:	df000917 	ldw	fp,36(sp)
10106364:	ddc00817 	ldw	r23,32(sp)
10106368:	dd800717 	ldw	r22,28(sp)
1010636c:	dd400617 	ldw	r21,24(sp)
10106370:	dd000517 	ldw	r20,20(sp)
10106374:	dcc00417 	ldw	r19,16(sp)
10106378:	dc800317 	ldw	r18,12(sp)
1010637c:	dc400217 	ldw	r17,8(sp)
10106380:	dc000117 	ldw	r16,4(sp)
10106384:	dec00b04 	addi	sp,sp,44
10106388:	f800283a 	ret
1010638c:	a0800117 	ldw	r2,4(r20)
10106390:	80c00017 	ldw	r3,0(r16)
10106394:	10bfffc4 	addi	r2,r2,-1
10106398:	15c01426 	beq	r2,r23,101063ec <__call_exitprocs+0x154>
1010639c:	80000015 	stw	zero,0(r16)
101063a0:	183fde26 	beq	r3,zero,1010631c <__alt_data_end+0xfffe631c>
101063a4:	95c8983a 	sll	r4,r18,r23
101063a8:	a0806217 	ldw	r2,392(r20)
101063ac:	a5800117 	ldw	r22,4(r20)
101063b0:	2084703a 	and	r2,r4,r2
101063b4:	10000b26 	beq	r2,zero,101063e4 <__call_exitprocs+0x14c>
101063b8:	a0806317 	ldw	r2,396(r20)
101063bc:	2088703a 	and	r4,r4,r2
101063c0:	20000c1e 	bne	r4,zero,101063f4 <__call_exitprocs+0x15c>
101063c4:	89400017 	ldw	r5,0(r17)
101063c8:	d9000017 	ldw	r4,0(sp)
101063cc:	183ee83a 	callr	r3
101063d0:	a0800117 	ldw	r2,4(r20)
101063d4:	15bfbf1e 	bne	r2,r22,101062d4 <__alt_data_end+0xfffe62d4>
101063d8:	98800017 	ldw	r2,0(r19)
101063dc:	153fcf26 	beq	r2,r20,1010631c <__alt_data_end+0xfffe631c>
101063e0:	003fbc06 	br	101062d4 <__alt_data_end+0xfffe62d4>
101063e4:	183ee83a 	callr	r3
101063e8:	003ff906 	br	101063d0 <__alt_data_end+0xfffe63d0>
101063ec:	a5c00115 	stw	r23,4(r20)
101063f0:	003feb06 	br	101063a0 <__alt_data_end+0xfffe63a0>
101063f4:	89000017 	ldw	r4,0(r17)
101063f8:	183ee83a 	callr	r3
101063fc:	003ff406 	br	101063d0 <__alt_data_end+0xfffe63d0>
10106400:	a0800017 	ldw	r2,0(r20)
10106404:	a027883a 	mov	r19,r20
10106408:	1029883a 	mov	r20,r2
1010640c:	003fb606 	br	101062e8 <__alt_data_end+0xfffe62e8>
10106410:	0005883a 	mov	r2,zero
10106414:	003ffb06 	br	10106404 <__alt_data_end+0xfffe6404>

10106418 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
10106418:	defffd04 	addi	sp,sp,-12
1010641c:	df000215 	stw	fp,8(sp)
10106420:	df000204 	addi	fp,sp,8
10106424:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
10106428:	0001883a 	nop
1010642c:	e0bfff17 	ldw	r2,-4(fp)
10106430:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10106434:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10106438:	10000226 	beq	r2,zero,10106444 <_exit+0x2c>
    ALT_SIM_FAIL();
1010643c:	002af070 	cmpltui	zero,zero,43969
10106440:	00000106 	br	10106448 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10106444:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10106448:	003fff06 	br	10106448 <__alt_data_end+0xfffe6448>
