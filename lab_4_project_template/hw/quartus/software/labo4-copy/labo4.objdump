
labo4.elf:     file format elf32-littlenios2
labo4.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10100244

Program Header:
    LOAD off    0x00001000 vaddr 0x10100000 paddr 0x10100000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10100020 paddr 0x10100020 align 2**12
         filesz 0x0000576c memsz 0x0000576c flags r-x
    LOAD off    0x0000678c vaddr 0x1010578c paddr 0x101071f8 align 2**12
         filesz 0x00001a6c memsz 0x00001a6c flags rw-
    LOAD off    0x00008c64 vaddr 0x10108c64 paddr 0x10108c64 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10100000  10100000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  10100020  10100020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005504  10100244  10100244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000044  10105748  10105748  00006748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a6c  1010578c  101071f8  0000678c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  10108c64  10108c64  00008c64  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  10108db8  10108db8  000081f8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000081f8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000a10  00000000  00000000  00008220  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00016330  00000000  00000000  00008c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005ef9  00000000  00000000  0001ef60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006767  00000000  00000000  00024e59  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000153c  00000000  00000000  0002b5c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000026b1  00000000  00000000  0002cafc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004a4c  00000000  00000000  0002f1ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00033bfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000680  00000000  00000000  00033c30  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00036716  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00036719  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00036725  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00036726  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00036727  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00036732  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0003673d  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000a  00000000  00000000  00036748  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000059  00000000  00000000  00036752  2**0
                  CONTENTS, READONLY
 26 .jdi          0000596f  00000000  00000000  000367ab  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0027f349  00000000  00000000  0003c11a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10100000 l    d  .entry	00000000 .entry
10100020 l    d  .exceptions	00000000 .exceptions
10100244 l    d  .text	00000000 .text
10105748 l    d  .rodata	00000000 .rodata
1010578c l    d  .rwdata	00000000 .rwdata
10108c64 l    d  .bss	00000000 .bss
10108db8 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../labo4_bsp//obj/HAL/src/crt0.o
1010028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
1010044c l     F .text	00000008 __fp_unlock
10100460 l     F .text	0000019c __sinit.part.1
101005fc l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
1010578c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_close.c
101030a8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
101031b4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
101031e0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
101032cc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
101033ac l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
10103498 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
1010366c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
101071e8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
101038b8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
101039ec l     F .text	00000034 alt_dev_reg
10106160 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
10103cc4 l     F .text	0000020c altera_avalon_jtag_uart_irq
10103ed0 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
1010467c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10104af0 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
10104c30 l     F .text	0000003c alt_get_errno
10104c6c l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10108c8c g     O .bss	00000004 alt_instruction_exception_handler
10102ea0 g     F .text	00000054 _isatty_r
101035a8 g     F .text	0000007c alt_main
101002e0 g     F .text	000000c0 _puts_r
10108cb8 g     O .bss	00000100 alt_irq
10102bc8 g     F .text	00000060 _lseek_r
101071f8 g       *ABS*	00000000 __flash_rwdata_start
10108db8 g       *ABS*	00000000 __alt_heap_start
1010217c g     F .text	0000005c __sseek
1010079c g     F .text	00000010 __sinit
10100604 g     F .text	00000068 __sfmoreglue
10103648 g     F .text	00000024 __malloc_unlock
10101868 g     F .text	0000015c memmove
10100784 g     F .text	00000018 _cleanup
10105028 g     F .text	00000024 altera_nios2_gen2_irq_init
10100000 g     F .entry	0000001c __reset
10100020 g       *ABS*	00000000 __flash_exceptions_start
10102e44 g     F .text	0000005c _fstat_r
10108c70 g     O .bss	00000004 errno
101020f8 g     F .text	00000008 __seofread
10108c78 g     O .bss	00000004 alt_argv
1010f1c0 g       *ABS*	00000000 _gp
10105fe0 g     O .rwdata	00000180 alt_fd_list
1010504c g     F .text	00000090 alt_find_dev
10101720 g     F .text	00000148 memcpy
10100454 g     F .text	0000000c _cleanup_r
10104bb4 g     F .text	0000007c alt_io_redirect
10105748 g       *ABS*	00000000 __DTOR_END__
101003a0 g     F .text	00000014 puts
10105318 g     F .text	0000009c alt_exception_cause_generated_bad_addr
101040c8 g     F .text	0000021c altera_avalon_jtag_uart_read
10100000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
10102fec g     F .text	00000064 .hidden __udivsi3
10103308 g     F .text	000000a4 isatty
10105288 g     F .text	00000090 alt_icache_flush
10108c6c g     O .bss	00000004 __malloc_top_pad
101007ec g     F .text	000004bc __sfvwrite_r
10102050 g     F .text	00000054 _sbrk_r
10102de4 g     F .text	00000060 _read_r
101071e0 g     O .rwdata	00000004 alt_max_fd
101023e8 g     F .text	000000f0 _fclose_r
10102764 g     F .text	00000030 fflush
10108c68 g     O .bss	00000004 __malloc_max_sbrked_mem
101034d4 g     F .text	000000d4 lseek
101071c0 g     O .rwdata	00000004 _global_impure_ptr
10101aec g     F .text	00000564 _realloc_r
10108db8 g       *ABS*	00000000 __bss_end
10104a00 g     F .text	000000f0 alt_iic_isr_register
10104f20 g     F .text	00000108 alt_tick
101007bc g     F .text	00000018 __fp_lock_all
101049b4 g     F .text	0000004c alt_ic_irq_enabled
10104e84 g     F .text	0000009c alt_alarm_stop
10108c80 g     O .bss	00000004 alt_irq_active
101000fc g     F .exceptions	000000d4 alt_irq_handler
10105fb8 g     O .rwdata	00000028 alt_dev_null
10104634 g     F .text	00000048 alt_dcache_flush_all
101071f8 g       *ABS*	00000000 __ram_rwdata_end
101071d8 g     O .rwdata	00000008 alt_dev_list
101038f4 g     F .text	000000f8 write
1010578c g       *ABS*	00000000 __ram_rodata_end
1010321c g     F .text	000000b0 fstat
10103050 g     F .text	00000058 .hidden __umodsi3
10108db8 g       *ABS*	00000000 end
10103c04 g     F .text	000000c0 altera_avalon_jtag_uart_init
101001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
10105748 g       *ABS*	00000000 __CTOR_LIST__
10120000 g       *ABS*	00000000 __alt_stack_pointer
101042e4 g     F .text	00000224 altera_avalon_jtag_uart_write
101007ac g     F .text	00000004 __sfp_lock_acquire
1010163c g     F .text	000000e4 memchr
101028b8 g     F .text	00000310 _free_r
10105594 g     F .text	00000180 __call_exitprocs
101071c8 g     O .rwdata	00000004 __malloc_sbrk_base
10100244 g     F .text	0000004c _start
10108c84 g     O .bss	00000004 _alt_tick_rate
10108c88 g     O .bss	00000004 _alt_nticks
101036a8 g     F .text	000000fc read
10103a58 g     F .text	00000048 alt_sys_init
1010547c g     F .text	00000118 __register_exitproc
10103f70 g     F .text	00000068 altera_avalon_jtag_uart_close
1010578c g       *ABS*	00000000 __ram_rwdata_start
10105748 g       *ABS*	00000000 __ram_rodata_start
10108c90 g     O .bss	00000028 __malloc_current_mallinfo
10103aa0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
101051e4 g     F .text	000000a4 alt_get_fd
10102394 g     F .text	00000054 _close_r
10105400 g     F .text	0000007c memcmp
10103b60 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10108db8 g       *ABS*	00000000 __alt_stack_base
10103bb0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10102240 g     F .text	00000154 __swsetup_r
1010066c g     F .text	00000118 __sfp
10105bb0 g     O .rwdata	00000408 __malloc_av_
101007b8 g     F .text	00000004 __sinit_lock_release
101020a4 g     F .text	00000054 __sread
101050dc g     F .text	00000108 alt_find_file
101046b8 g     F .text	000000a4 alt_dev_llist_insert
10103624 g     F .text	00000024 __malloc_lock
10103808 g     F .text	000000b0 sbrk
10102708 g     F .text	0000005c _fflush_r
10108c64 g       *ABS*	00000000 __bss_start
101019c4 g     F .text	00000128 memset
10100290 g     F .text	00000050 main
10108c7c g     O .bss	00000004 alt_envp
10108c64 g     O .bss	00000004 __malloc_max_total_mem
10103b00 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
101021d8 g     F .text	00000008 __sclose
10120000 g       *ABS*	00000000 __alt_heap_limit
101024d8 g     F .text	00000014 fclose
10100e30 g     F .text	0000080c _malloc_r
101071e4 g     O .rwdata	00000004 alt_errno
10100ca8 g     F .text	000000c4 _fwalk
10102ef4 g     F .text	00000084 .hidden __divsi3
10102794 g     F .text	00000124 _malloc_trim_r
10105748 g       *ABS*	00000000 __CTOR_END__
10105748 g       *ABS*	00000000 __flash_rodata_start
10105748 g       *ABS*	00000000 __DTOR_LIST__
10103a20 g     F .text	00000038 alt_irq_init
101037a4 g     F .text	00000064 alt_release_fd
101053b4 g     F .text	00000014 atexit
101021e0 g     F .text	00000060 _write_r
101071c4 g     O .rwdata	00000004 _impure_ptr
10108c74 g     O .bss	00000004 alt_argc
101024ec g     F .text	0000021c __sflush_r
101047bc g     F .text	00000060 _do_dtors
10100020 g       .exceptions	00000000 alt_irq_entry
101007d4 g     F .text	00000018 __fp_unlock_all
101071d0 g     O .rwdata	00000008 alt_fs_list
10100020 g       *ABS*	00000000 __ram_exceptions_start
10104850 g     F .text	00000050 alt_ic_isr_register
101071f8 g       *ABS*	00000000 _edata
10108db8 g       *ABS*	00000000 _end
10100244 g       *ABS*	00000000 __ram_exceptions_end
10103fd8 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
10104928 g     F .text	0000008c alt_ic_irq_disable
10102100 g     F .text	0000007c __swrite
101071cc g     O .rwdata	00000004 __malloc_trim_threshold
101053c8 g     F .text	00000038 exit
10100d6c g     F .text	000000c4 _fwalk_reent
10102f78 g     F .text	00000074 .hidden __modsi3
10120000 g       *ABS*	00000000 __alt_data_end
10100020 g     F .exceptions	00000000 alt_exception
101007b0 g     F .text	00000004 __sfp_lock_release
10105714 g     F .text	00000034 _exit
10104508 g     F .text	0000012c alt_alarm_start
10102c28 g     F .text	000001bc __smakebuf_r
101003b4 g     F .text	00000098 strlen
10104d30 g     F .text	00000154 open
1010481c g     F .text	00000034 alt_icache_flush_all
101071ec g     O .rwdata	00000004 alt_priority_mask
101048a0 g     F .text	00000088 alt_ic_irq_enable
101071f0 g     O .rwdata	00000008 alt_alarm_list
1010475c g     F .text	00000060 _do_ctors
101030e4 g     F .text	000000d0 close
10103414 g     F .text	00000084 alt_load
101007b4 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

10100000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
10100000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
10100004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
10100008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
1010000c:	00bffd16 	blt	zero,r2,10100004 <__alt_data_end+0xfffe0004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10100010:	00440434 	movhi	at,4112
    ori r1, r1, %lo(_start)
10100014:	08409114 	ori	at,at,580
    jmp r1
10100018:	0800683a 	jmp	at
1010001c:	00000000 	call	10000000 <__alt_mem_onchip_memory2_0-0x100000>

Disassembly of section .exceptions:

10100020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10100020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10100024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10100028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1010002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10100030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10100034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10100038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1010003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10100040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10100044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10100048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1010004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10100050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10100054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10100058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1010005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10100060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10100064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10100068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1010006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10100070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10100074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10100078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1010007c:	10000326 	beq	r2,zero,1010008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10100080:	20000226 	beq	r4,zero,1010008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10100084:	01000fc0 	call	101000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10100088:	00000706 	br	101000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1010008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10100090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10100094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10100098:	01001d00 	call	101001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1010009c:	1000021e 	bne	r2,zero,101000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
101000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
101000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
101000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
101000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
101000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
101000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
101000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
101000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
101000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
101000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
101000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
101000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
101000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
101000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
101000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
101000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
101000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
101000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
101000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
101000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
101000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
101000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
101000f8:	ef80083a 	eret

101000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
101000fc:	defff904 	addi	sp,sp,-28
10100100:	dfc00615 	stw	ra,24(sp)
10100104:	df000515 	stw	fp,20(sp)
10100108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1010010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10100110:	0005313a 	rdctl	r2,ipending
10100114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10100118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1010011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10100120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10100124:	00800044 	movi	r2,1
10100128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1010012c:	e0fffb17 	ldw	r3,-20(fp)
10100130:	e0bffc17 	ldw	r2,-16(fp)
10100134:	1884703a 	and	r2,r3,r2
10100138:	10001426 	beq	r2,zero,1010018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1010013c:	00840474 	movhi	r2,4113
10100140:	10a32e04 	addi	r2,r2,-29512
10100144:	e0fffd17 	ldw	r3,-12(fp)
10100148:	180690fa 	slli	r3,r3,3
1010014c:	10c5883a 	add	r2,r2,r3
10100150:	10c00017 	ldw	r3,0(r2)
10100154:	00840474 	movhi	r2,4113
10100158:	10a32e04 	addi	r2,r2,-29512
1010015c:	e13ffd17 	ldw	r4,-12(fp)
10100160:	200890fa 	slli	r4,r4,3
10100164:	1105883a 	add	r2,r2,r4
10100168:	10800104 	addi	r2,r2,4
1010016c:	10800017 	ldw	r2,0(r2)
10100170:	1009883a 	mov	r4,r2
10100174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10100178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1010017c:	0005313a 	rdctl	r2,ipending
10100180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10100184:	e0bfff17 	ldw	r2,-4(fp)
10100188:	00000706 	br	101001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1010018c:	e0bffc17 	ldw	r2,-16(fp)
10100190:	1085883a 	add	r2,r2,r2
10100194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10100198:	e0bffd17 	ldw	r2,-12(fp)
1010019c:	10800044 	addi	r2,r2,1
101001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
101001a4:	003fe106 	br	1010012c <__alt_data_end+0xfffe012c>

    active = alt_irq_pending ();
101001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
101001ac:	e0bffb17 	ldw	r2,-20(fp)
101001b0:	103fdb1e 	bne	r2,zero,10100120 <__alt_data_end+0xfffe0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
101001b4:	0001883a 	nop
}
101001b8:	0001883a 	nop
101001bc:	e037883a 	mov	sp,fp
101001c0:	dfc00117 	ldw	ra,4(sp)
101001c4:	df000017 	ldw	fp,0(sp)
101001c8:	dec00204 	addi	sp,sp,8
101001cc:	f800283a 	ret

101001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
101001d0:	defffb04 	addi	sp,sp,-20
101001d4:	dfc00415 	stw	ra,16(sp)
101001d8:	df000315 	stw	fp,12(sp)
101001dc:	df000304 	addi	fp,sp,12
101001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
101001e4:	000531fa 	rdctl	r2,exception
101001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
101001ec:	e0bffd17 	ldw	r2,-12(fp)
101001f0:	10801f0c 	andi	r2,r2,124
101001f4:	1004d0ba 	srli	r2,r2,2
101001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
101001fc:	0005333a 	rdctl	r2,badaddr
10100200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
10100204:	d0a6b317 	ldw	r2,-25908(gp)
10100208:	10000726 	beq	r2,zero,10100228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
1010020c:	d0a6b317 	ldw	r2,-25908(gp)
10100210:	e0fffd17 	ldw	r3,-12(fp)
10100214:	e1bffe17 	ldw	r6,-8(fp)
10100218:	e17fff17 	ldw	r5,-4(fp)
1010021c:	1809883a 	mov	r4,r3
10100220:	103ee83a 	callr	r2
10100224:	00000206 	br	10100230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10100228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
1010022c:	0005883a 	mov	r2,zero
}
10100230:	e037883a 	mov	sp,fp
10100234:	dfc00117 	ldw	ra,4(sp)
10100238:	df000017 	ldw	fp,0(sp)
1010023c:	dec00204 	addi	sp,sp,8
10100240:	f800283a 	ret

Disassembly of section .text:

10100244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
10100244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
10100248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
1010024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
10100250:	00bffd16 	blt	zero,r2,10100248 <__alt_data_end+0xfffe0248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10100254:	06c404b4 	movhi	sp,4114
    ori sp, sp, %lo(__alt_stack_pointer)
10100258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
1010025c:	06840434 	movhi	gp,4112
    ori gp, gp, %lo(_gp)
10100260:	d6bc7014 	ori	gp,gp,61888
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10100264:	00840434 	movhi	r2,4112
    ori r2, r2, %lo(__bss_start)
10100268:	10a31914 	ori	r2,r2,35940

    movhi r3, %hi(__bss_end)
1010026c:	00c40434 	movhi	r3,4112
    ori r3, r3, %lo(__bss_end)
10100270:	18e36e14 	ori	r3,r3,36280

    beq r2, r3, 1f
10100274:	10c00326 	beq	r2,r3,10100284 <_start+0x40>

0:
    stw zero, (r2)
10100278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
1010027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
10100280:	10fffd36 	bltu	r2,r3,10100278 <__alt_data_end+0xfffe0278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10100284:	01034140 	call	10103414 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10100288:	01035a80 	call	101035a8 <alt_main>

1010028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
1010028c:	003fff06 	br	1010028c <__alt_data_end+0xfffe028c>

10100290 <main>:
#define LCD_DATA_OFFSET         (4 * 0b0011)

#define PIO_LEDS_BASE 0x10000810

int main(void)
{
10100290:	defffe04 	addi	sp,sp,-8
10100294:	dfc00115 	stw	ra,4(sp)
10100298:	df000015 	stw	fp,0(sp)
1010029c:	d839883a 	mov	fp,sp
    printf("start:\n");
101002a0:	01040434 	movhi	r4,4112
101002a4:	2115d204 	addi	r4,r4,22344
101002a8:	01003a00 	call	101003a0 <puts>

    IOWR_32DIRECT(LCD_CONTROLLER_0_BASE, LCD_COMMAND_OFFSET, 0x0001);
101002ac:	00c00044 	movi	r3,1
101002b0:	00800204 	movi	r2,8
101002b4:	10c00035 	stwio	r3,0(r2)
    IOWR_8DIRECT(PIO_LEDS_BASE, 1, 0x00);
101002b8:	0007883a 	mov	r3,zero
101002bc:	00840034 	movhi	r2,4096
101002c0:	10820444 	addi	r2,r2,2065
101002c4:	10c00025 	stbio	r3,0(r2)

    return 0;
101002c8:	0005883a 	mov	r2,zero
}
101002cc:	e037883a 	mov	sp,fp
101002d0:	dfc00117 	ldw	ra,4(sp)
101002d4:	df000017 	ldw	fp,0(sp)
101002d8:	dec00204 	addi	sp,sp,8
101002dc:	f800283a 	ret

101002e0 <_puts_r>:
101002e0:	defff604 	addi	sp,sp,-40
101002e4:	dc000715 	stw	r16,28(sp)
101002e8:	2021883a 	mov	r16,r4
101002ec:	2809883a 	mov	r4,r5
101002f0:	dc400815 	stw	r17,32(sp)
101002f4:	dfc00915 	stw	ra,36(sp)
101002f8:	2823883a 	mov	r17,r5
101002fc:	01003b40 	call	101003b4 <strlen>
10100300:	10c00044 	addi	r3,r2,1
10100304:	d8800115 	stw	r2,4(sp)
10100308:	00840434 	movhi	r2,4112
1010030c:	1095d404 	addi	r2,r2,22352
10100310:	d8800215 	stw	r2,8(sp)
10100314:	00800044 	movi	r2,1
10100318:	d8800315 	stw	r2,12(sp)
1010031c:	00800084 	movi	r2,2
10100320:	dc400015 	stw	r17,0(sp)
10100324:	d8c00615 	stw	r3,24(sp)
10100328:	dec00415 	stw	sp,16(sp)
1010032c:	d8800515 	stw	r2,20(sp)
10100330:	80000226 	beq	r16,zero,1010033c <_puts_r+0x5c>
10100334:	80800e17 	ldw	r2,56(r16)
10100338:	10001426 	beq	r2,zero,1010038c <_puts_r+0xac>
1010033c:	81400217 	ldw	r5,8(r16)
10100340:	2880030b 	ldhu	r2,12(r5)
10100344:	10c8000c 	andi	r3,r2,8192
10100348:	1800061e 	bne	r3,zero,10100364 <_puts_r+0x84>
1010034c:	29001917 	ldw	r4,100(r5)
10100350:	00f7ffc4 	movi	r3,-8193
10100354:	10880014 	ori	r2,r2,8192
10100358:	20c6703a 	and	r3,r4,r3
1010035c:	2880030d 	sth	r2,12(r5)
10100360:	28c01915 	stw	r3,100(r5)
10100364:	d9800404 	addi	r6,sp,16
10100368:	8009883a 	mov	r4,r16
1010036c:	01007ec0 	call	101007ec <__sfvwrite_r>
10100370:	1000091e 	bne	r2,zero,10100398 <_puts_r+0xb8>
10100374:	00800284 	movi	r2,10
10100378:	dfc00917 	ldw	ra,36(sp)
1010037c:	dc400817 	ldw	r17,32(sp)
10100380:	dc000717 	ldw	r16,28(sp)
10100384:	dec00a04 	addi	sp,sp,40
10100388:	f800283a 	ret
1010038c:	8009883a 	mov	r4,r16
10100390:	010079c0 	call	1010079c <__sinit>
10100394:	003fe906 	br	1010033c <__alt_data_end+0xfffe033c>
10100398:	00bfffc4 	movi	r2,-1
1010039c:	003ff606 	br	10100378 <__alt_data_end+0xfffe0378>

101003a0 <puts>:
101003a0:	00840434 	movhi	r2,4112
101003a4:	109c7104 	addi	r2,r2,29124
101003a8:	200b883a 	mov	r5,r4
101003ac:	11000017 	ldw	r4,0(r2)
101003b0:	01002e01 	jmpi	101002e0 <_puts_r>

101003b4 <strlen>:
101003b4:	208000cc 	andi	r2,r4,3
101003b8:	10002026 	beq	r2,zero,1010043c <strlen+0x88>
101003bc:	20800007 	ldb	r2,0(r4)
101003c0:	10002026 	beq	r2,zero,10100444 <strlen+0x90>
101003c4:	2005883a 	mov	r2,r4
101003c8:	00000206 	br	101003d4 <strlen+0x20>
101003cc:	10c00007 	ldb	r3,0(r2)
101003d0:	18001826 	beq	r3,zero,10100434 <strlen+0x80>
101003d4:	10800044 	addi	r2,r2,1
101003d8:	10c000cc 	andi	r3,r2,3
101003dc:	183ffb1e 	bne	r3,zero,101003cc <__alt_data_end+0xfffe03cc>
101003e0:	10c00017 	ldw	r3,0(r2)
101003e4:	01ffbff4 	movhi	r7,65279
101003e8:	39ffbfc4 	addi	r7,r7,-257
101003ec:	00ca303a 	nor	r5,zero,r3
101003f0:	01a02074 	movhi	r6,32897
101003f4:	19c7883a 	add	r3,r3,r7
101003f8:	31a02004 	addi	r6,r6,-32640
101003fc:	1946703a 	and	r3,r3,r5
10100400:	1986703a 	and	r3,r3,r6
10100404:	1800091e 	bne	r3,zero,1010042c <strlen+0x78>
10100408:	10800104 	addi	r2,r2,4
1010040c:	10c00017 	ldw	r3,0(r2)
10100410:	19cb883a 	add	r5,r3,r7
10100414:	00c6303a 	nor	r3,zero,r3
10100418:	28c6703a 	and	r3,r5,r3
1010041c:	1986703a 	and	r3,r3,r6
10100420:	183ff926 	beq	r3,zero,10100408 <__alt_data_end+0xfffe0408>
10100424:	00000106 	br	1010042c <strlen+0x78>
10100428:	10800044 	addi	r2,r2,1
1010042c:	10c00007 	ldb	r3,0(r2)
10100430:	183ffd1e 	bne	r3,zero,10100428 <__alt_data_end+0xfffe0428>
10100434:	1105c83a 	sub	r2,r2,r4
10100438:	f800283a 	ret
1010043c:	2005883a 	mov	r2,r4
10100440:	003fe706 	br	101003e0 <__alt_data_end+0xfffe03e0>
10100444:	0005883a 	mov	r2,zero
10100448:	f800283a 	ret

1010044c <__fp_unlock>:
1010044c:	0005883a 	mov	r2,zero
10100450:	f800283a 	ret

10100454 <_cleanup_r>:
10100454:	01440434 	movhi	r5,4112
10100458:	2948fa04 	addi	r5,r5,9192
1010045c:	0100d6c1 	jmpi	10100d6c <_fwalk_reent>

10100460 <__sinit.part.1>:
10100460:	defff704 	addi	sp,sp,-36
10100464:	00c40434 	movhi	r3,4112
10100468:	dfc00815 	stw	ra,32(sp)
1010046c:	ddc00715 	stw	r23,28(sp)
10100470:	dd800615 	stw	r22,24(sp)
10100474:	dd400515 	stw	r21,20(sp)
10100478:	dd000415 	stw	r20,16(sp)
1010047c:	dcc00315 	stw	r19,12(sp)
10100480:	dc800215 	stw	r18,8(sp)
10100484:	dc400115 	stw	r17,4(sp)
10100488:	dc000015 	stw	r16,0(sp)
1010048c:	18c11504 	addi	r3,r3,1108
10100490:	24000117 	ldw	r16,4(r4)
10100494:	20c00f15 	stw	r3,60(r4)
10100498:	2080bb04 	addi	r2,r4,748
1010049c:	00c000c4 	movi	r3,3
101004a0:	20c0b915 	stw	r3,740(r4)
101004a4:	2080ba15 	stw	r2,744(r4)
101004a8:	2000b815 	stw	zero,736(r4)
101004ac:	05c00204 	movi	r23,8
101004b0:	00800104 	movi	r2,4
101004b4:	2025883a 	mov	r18,r4
101004b8:	b80d883a 	mov	r6,r23
101004bc:	81001704 	addi	r4,r16,92
101004c0:	000b883a 	mov	r5,zero
101004c4:	80000015 	stw	zero,0(r16)
101004c8:	80000115 	stw	zero,4(r16)
101004cc:	80000215 	stw	zero,8(r16)
101004d0:	8080030d 	sth	r2,12(r16)
101004d4:	80001915 	stw	zero,100(r16)
101004d8:	8000038d 	sth	zero,14(r16)
101004dc:	80000415 	stw	zero,16(r16)
101004e0:	80000515 	stw	zero,20(r16)
101004e4:	80000615 	stw	zero,24(r16)
101004e8:	01019c40 	call	101019c4 <memset>
101004ec:	05840434 	movhi	r22,4112
101004f0:	94400217 	ldw	r17,8(r18)
101004f4:	05440434 	movhi	r21,4112
101004f8:	05040434 	movhi	r20,4112
101004fc:	04c40434 	movhi	r19,4112
10100500:	b5882904 	addi	r22,r22,8356
10100504:	ad484004 	addi	r21,r21,8448
10100508:	a5085f04 	addi	r20,r20,8572
1010050c:	9cc87604 	addi	r19,r19,8664
10100510:	85800815 	stw	r22,32(r16)
10100514:	85400915 	stw	r21,36(r16)
10100518:	85000a15 	stw	r20,40(r16)
1010051c:	84c00b15 	stw	r19,44(r16)
10100520:	84000715 	stw	r16,28(r16)
10100524:	00800284 	movi	r2,10
10100528:	8880030d 	sth	r2,12(r17)
1010052c:	00800044 	movi	r2,1
10100530:	b80d883a 	mov	r6,r23
10100534:	89001704 	addi	r4,r17,92
10100538:	000b883a 	mov	r5,zero
1010053c:	88000015 	stw	zero,0(r17)
10100540:	88000115 	stw	zero,4(r17)
10100544:	88000215 	stw	zero,8(r17)
10100548:	88001915 	stw	zero,100(r17)
1010054c:	8880038d 	sth	r2,14(r17)
10100550:	88000415 	stw	zero,16(r17)
10100554:	88000515 	stw	zero,20(r17)
10100558:	88000615 	stw	zero,24(r17)
1010055c:	01019c40 	call	101019c4 <memset>
10100560:	94000317 	ldw	r16,12(r18)
10100564:	00800484 	movi	r2,18
10100568:	8c400715 	stw	r17,28(r17)
1010056c:	8d800815 	stw	r22,32(r17)
10100570:	8d400915 	stw	r21,36(r17)
10100574:	8d000a15 	stw	r20,40(r17)
10100578:	8cc00b15 	stw	r19,44(r17)
1010057c:	8080030d 	sth	r2,12(r16)
10100580:	00800084 	movi	r2,2
10100584:	80000015 	stw	zero,0(r16)
10100588:	80000115 	stw	zero,4(r16)
1010058c:	80000215 	stw	zero,8(r16)
10100590:	80001915 	stw	zero,100(r16)
10100594:	8080038d 	sth	r2,14(r16)
10100598:	80000415 	stw	zero,16(r16)
1010059c:	80000515 	stw	zero,20(r16)
101005a0:	80000615 	stw	zero,24(r16)
101005a4:	b80d883a 	mov	r6,r23
101005a8:	000b883a 	mov	r5,zero
101005ac:	81001704 	addi	r4,r16,92
101005b0:	01019c40 	call	101019c4 <memset>
101005b4:	00800044 	movi	r2,1
101005b8:	84000715 	stw	r16,28(r16)
101005bc:	85800815 	stw	r22,32(r16)
101005c0:	85400915 	stw	r21,36(r16)
101005c4:	85000a15 	stw	r20,40(r16)
101005c8:	84c00b15 	stw	r19,44(r16)
101005cc:	90800e15 	stw	r2,56(r18)
101005d0:	dfc00817 	ldw	ra,32(sp)
101005d4:	ddc00717 	ldw	r23,28(sp)
101005d8:	dd800617 	ldw	r22,24(sp)
101005dc:	dd400517 	ldw	r21,20(sp)
101005e0:	dd000417 	ldw	r20,16(sp)
101005e4:	dcc00317 	ldw	r19,12(sp)
101005e8:	dc800217 	ldw	r18,8(sp)
101005ec:	dc400117 	ldw	r17,4(sp)
101005f0:	dc000017 	ldw	r16,0(sp)
101005f4:	dec00904 	addi	sp,sp,36
101005f8:	f800283a 	ret

101005fc <__fp_lock>:
101005fc:	0005883a 	mov	r2,zero
10100600:	f800283a 	ret

10100604 <__sfmoreglue>:
10100604:	defffc04 	addi	sp,sp,-16
10100608:	dc400115 	stw	r17,4(sp)
1010060c:	2c7fffc4 	addi	r17,r5,-1
10100610:	8c401a24 	muli	r17,r17,104
10100614:	dc800215 	stw	r18,8(sp)
10100618:	2825883a 	mov	r18,r5
1010061c:	89401d04 	addi	r5,r17,116
10100620:	dc000015 	stw	r16,0(sp)
10100624:	dfc00315 	stw	ra,12(sp)
10100628:	0100e300 	call	10100e30 <_malloc_r>
1010062c:	1021883a 	mov	r16,r2
10100630:	10000726 	beq	r2,zero,10100650 <__sfmoreglue+0x4c>
10100634:	11000304 	addi	r4,r2,12
10100638:	10000015 	stw	zero,0(r2)
1010063c:	14800115 	stw	r18,4(r2)
10100640:	11000215 	stw	r4,8(r2)
10100644:	89801a04 	addi	r6,r17,104
10100648:	000b883a 	mov	r5,zero
1010064c:	01019c40 	call	101019c4 <memset>
10100650:	8005883a 	mov	r2,r16
10100654:	dfc00317 	ldw	ra,12(sp)
10100658:	dc800217 	ldw	r18,8(sp)
1010065c:	dc400117 	ldw	r17,4(sp)
10100660:	dc000017 	ldw	r16,0(sp)
10100664:	dec00404 	addi	sp,sp,16
10100668:	f800283a 	ret

1010066c <__sfp>:
1010066c:	defffb04 	addi	sp,sp,-20
10100670:	dc000015 	stw	r16,0(sp)
10100674:	04040434 	movhi	r16,4112
10100678:	841c7004 	addi	r16,r16,29120
1010067c:	dcc00315 	stw	r19,12(sp)
10100680:	2027883a 	mov	r19,r4
10100684:	81000017 	ldw	r4,0(r16)
10100688:	dfc00415 	stw	ra,16(sp)
1010068c:	dc800215 	stw	r18,8(sp)
10100690:	20800e17 	ldw	r2,56(r4)
10100694:	dc400115 	stw	r17,4(sp)
10100698:	1000021e 	bne	r2,zero,101006a4 <__sfp+0x38>
1010069c:	01004600 	call	10100460 <__sinit.part.1>
101006a0:	81000017 	ldw	r4,0(r16)
101006a4:	2480b804 	addi	r18,r4,736
101006a8:	047fffc4 	movi	r17,-1
101006ac:	91000117 	ldw	r4,4(r18)
101006b0:	94000217 	ldw	r16,8(r18)
101006b4:	213fffc4 	addi	r4,r4,-1
101006b8:	20000a16 	blt	r4,zero,101006e4 <__sfp+0x78>
101006bc:	8080030f 	ldh	r2,12(r16)
101006c0:	10000c26 	beq	r2,zero,101006f4 <__sfp+0x88>
101006c4:	80c01d04 	addi	r3,r16,116
101006c8:	00000206 	br	101006d4 <__sfp+0x68>
101006cc:	18bfe60f 	ldh	r2,-104(r3)
101006d0:	10000826 	beq	r2,zero,101006f4 <__sfp+0x88>
101006d4:	213fffc4 	addi	r4,r4,-1
101006d8:	1c3ffd04 	addi	r16,r3,-12
101006dc:	18c01a04 	addi	r3,r3,104
101006e0:	247ffa1e 	bne	r4,r17,101006cc <__alt_data_end+0xfffe06cc>
101006e4:	90800017 	ldw	r2,0(r18)
101006e8:	10001d26 	beq	r2,zero,10100760 <__sfp+0xf4>
101006ec:	1025883a 	mov	r18,r2
101006f0:	003fee06 	br	101006ac <__alt_data_end+0xfffe06ac>
101006f4:	00bfffc4 	movi	r2,-1
101006f8:	8080038d 	sth	r2,14(r16)
101006fc:	00800044 	movi	r2,1
10100700:	8080030d 	sth	r2,12(r16)
10100704:	80001915 	stw	zero,100(r16)
10100708:	80000015 	stw	zero,0(r16)
1010070c:	80000215 	stw	zero,8(r16)
10100710:	80000115 	stw	zero,4(r16)
10100714:	80000415 	stw	zero,16(r16)
10100718:	80000515 	stw	zero,20(r16)
1010071c:	80000615 	stw	zero,24(r16)
10100720:	01800204 	movi	r6,8
10100724:	000b883a 	mov	r5,zero
10100728:	81001704 	addi	r4,r16,92
1010072c:	01019c40 	call	101019c4 <memset>
10100730:	8005883a 	mov	r2,r16
10100734:	80000c15 	stw	zero,48(r16)
10100738:	80000d15 	stw	zero,52(r16)
1010073c:	80001115 	stw	zero,68(r16)
10100740:	80001215 	stw	zero,72(r16)
10100744:	dfc00417 	ldw	ra,16(sp)
10100748:	dcc00317 	ldw	r19,12(sp)
1010074c:	dc800217 	ldw	r18,8(sp)
10100750:	dc400117 	ldw	r17,4(sp)
10100754:	dc000017 	ldw	r16,0(sp)
10100758:	dec00504 	addi	sp,sp,20
1010075c:	f800283a 	ret
10100760:	01400104 	movi	r5,4
10100764:	9809883a 	mov	r4,r19
10100768:	01006040 	call	10100604 <__sfmoreglue>
1010076c:	90800015 	stw	r2,0(r18)
10100770:	103fde1e 	bne	r2,zero,101006ec <__alt_data_end+0xfffe06ec>
10100774:	00800304 	movi	r2,12
10100778:	98800015 	stw	r2,0(r19)
1010077c:	0005883a 	mov	r2,zero
10100780:	003ff006 	br	10100744 <__alt_data_end+0xfffe0744>

10100784 <_cleanup>:
10100784:	00840434 	movhi	r2,4112
10100788:	109c7004 	addi	r2,r2,29120
1010078c:	11000017 	ldw	r4,0(r2)
10100790:	01440434 	movhi	r5,4112
10100794:	2948fa04 	addi	r5,r5,9192
10100798:	0100d6c1 	jmpi	10100d6c <_fwalk_reent>

1010079c <__sinit>:
1010079c:	20800e17 	ldw	r2,56(r4)
101007a0:	10000126 	beq	r2,zero,101007a8 <__sinit+0xc>
101007a4:	f800283a 	ret
101007a8:	01004601 	jmpi	10100460 <__sinit.part.1>

101007ac <__sfp_lock_acquire>:
101007ac:	f800283a 	ret

101007b0 <__sfp_lock_release>:
101007b0:	f800283a 	ret

101007b4 <__sinit_lock_acquire>:
101007b4:	f800283a 	ret

101007b8 <__sinit_lock_release>:
101007b8:	f800283a 	ret

101007bc <__fp_lock_all>:
101007bc:	00840434 	movhi	r2,4112
101007c0:	109c7104 	addi	r2,r2,29124
101007c4:	11000017 	ldw	r4,0(r2)
101007c8:	01440434 	movhi	r5,4112
101007cc:	29417f04 	addi	r5,r5,1532
101007d0:	0100ca81 	jmpi	10100ca8 <_fwalk>

101007d4 <__fp_unlock_all>:
101007d4:	00840434 	movhi	r2,4112
101007d8:	109c7104 	addi	r2,r2,29124
101007dc:	11000017 	ldw	r4,0(r2)
101007e0:	01440434 	movhi	r5,4112
101007e4:	29411304 	addi	r5,r5,1100
101007e8:	0100ca81 	jmpi	10100ca8 <_fwalk>

101007ec <__sfvwrite_r>:
101007ec:	30800217 	ldw	r2,8(r6)
101007f0:	10006726 	beq	r2,zero,10100990 <__sfvwrite_r+0x1a4>
101007f4:	28c0030b 	ldhu	r3,12(r5)
101007f8:	defff404 	addi	sp,sp,-48
101007fc:	dd400715 	stw	r21,28(sp)
10100800:	dd000615 	stw	r20,24(sp)
10100804:	dc000215 	stw	r16,8(sp)
10100808:	dfc00b15 	stw	ra,44(sp)
1010080c:	df000a15 	stw	fp,40(sp)
10100810:	ddc00915 	stw	r23,36(sp)
10100814:	dd800815 	stw	r22,32(sp)
10100818:	dcc00515 	stw	r19,20(sp)
1010081c:	dc800415 	stw	r18,16(sp)
10100820:	dc400315 	stw	r17,12(sp)
10100824:	1880020c 	andi	r2,r3,8
10100828:	2821883a 	mov	r16,r5
1010082c:	202b883a 	mov	r21,r4
10100830:	3029883a 	mov	r20,r6
10100834:	10002726 	beq	r2,zero,101008d4 <__sfvwrite_r+0xe8>
10100838:	28800417 	ldw	r2,16(r5)
1010083c:	10002526 	beq	r2,zero,101008d4 <__sfvwrite_r+0xe8>
10100840:	1880008c 	andi	r2,r3,2
10100844:	a4400017 	ldw	r17,0(r20)
10100848:	10002a26 	beq	r2,zero,101008f4 <__sfvwrite_r+0x108>
1010084c:	05a00034 	movhi	r22,32768
10100850:	0027883a 	mov	r19,zero
10100854:	0025883a 	mov	r18,zero
10100858:	b5bf0004 	addi	r22,r22,-1024
1010085c:	980d883a 	mov	r6,r19
10100860:	a809883a 	mov	r4,r21
10100864:	90004626 	beq	r18,zero,10100980 <__sfvwrite_r+0x194>
10100868:	900f883a 	mov	r7,r18
1010086c:	b480022e 	bgeu	r22,r18,10100878 <__sfvwrite_r+0x8c>
10100870:	01e00034 	movhi	r7,32768
10100874:	39ff0004 	addi	r7,r7,-1024
10100878:	80800917 	ldw	r2,36(r16)
1010087c:	81400717 	ldw	r5,28(r16)
10100880:	103ee83a 	callr	r2
10100884:	0080570e 	bge	zero,r2,101009e4 <__sfvwrite_r+0x1f8>
10100888:	a0c00217 	ldw	r3,8(r20)
1010088c:	98a7883a 	add	r19,r19,r2
10100890:	90a5c83a 	sub	r18,r18,r2
10100894:	1885c83a 	sub	r2,r3,r2
10100898:	a0800215 	stw	r2,8(r20)
1010089c:	103fef1e 	bne	r2,zero,1010085c <__alt_data_end+0xfffe085c>
101008a0:	0005883a 	mov	r2,zero
101008a4:	dfc00b17 	ldw	ra,44(sp)
101008a8:	df000a17 	ldw	fp,40(sp)
101008ac:	ddc00917 	ldw	r23,36(sp)
101008b0:	dd800817 	ldw	r22,32(sp)
101008b4:	dd400717 	ldw	r21,28(sp)
101008b8:	dd000617 	ldw	r20,24(sp)
101008bc:	dcc00517 	ldw	r19,20(sp)
101008c0:	dc800417 	ldw	r18,16(sp)
101008c4:	dc400317 	ldw	r17,12(sp)
101008c8:	dc000217 	ldw	r16,8(sp)
101008cc:	dec00c04 	addi	sp,sp,48
101008d0:	f800283a 	ret
101008d4:	800b883a 	mov	r5,r16
101008d8:	a809883a 	mov	r4,r21
101008dc:	01022400 	call	10102240 <__swsetup_r>
101008e0:	1000eb1e 	bne	r2,zero,10100c90 <__sfvwrite_r+0x4a4>
101008e4:	80c0030b 	ldhu	r3,12(r16)
101008e8:	a4400017 	ldw	r17,0(r20)
101008ec:	1880008c 	andi	r2,r3,2
101008f0:	103fd61e 	bne	r2,zero,1010084c <__alt_data_end+0xfffe084c>
101008f4:	1880004c 	andi	r2,r3,1
101008f8:	10003f1e 	bne	r2,zero,101009f8 <__sfvwrite_r+0x20c>
101008fc:	0039883a 	mov	fp,zero
10100900:	0025883a 	mov	r18,zero
10100904:	90001a26 	beq	r18,zero,10100970 <__sfvwrite_r+0x184>
10100908:	1880800c 	andi	r2,r3,512
1010090c:	84c00217 	ldw	r19,8(r16)
10100910:	10002126 	beq	r2,zero,10100998 <__sfvwrite_r+0x1ac>
10100914:	982f883a 	mov	r23,r19
10100918:	94c09336 	bltu	r18,r19,10100b68 <__sfvwrite_r+0x37c>
1010091c:	1881200c 	andi	r2,r3,1152
10100920:	10009e1e 	bne	r2,zero,10100b9c <__sfvwrite_r+0x3b0>
10100924:	81000017 	ldw	r4,0(r16)
10100928:	b80d883a 	mov	r6,r23
1010092c:	e00b883a 	mov	r5,fp
10100930:	01018680 	call	10101868 <memmove>
10100934:	80c00217 	ldw	r3,8(r16)
10100938:	81000017 	ldw	r4,0(r16)
1010093c:	9005883a 	mov	r2,r18
10100940:	1ce7c83a 	sub	r19,r3,r19
10100944:	25cf883a 	add	r7,r4,r23
10100948:	84c00215 	stw	r19,8(r16)
1010094c:	81c00015 	stw	r7,0(r16)
10100950:	a0c00217 	ldw	r3,8(r20)
10100954:	e0b9883a 	add	fp,fp,r2
10100958:	90a5c83a 	sub	r18,r18,r2
1010095c:	18a7c83a 	sub	r19,r3,r2
10100960:	a4c00215 	stw	r19,8(r20)
10100964:	983fce26 	beq	r19,zero,101008a0 <__alt_data_end+0xfffe08a0>
10100968:	80c0030b 	ldhu	r3,12(r16)
1010096c:	903fe61e 	bne	r18,zero,10100908 <__alt_data_end+0xfffe0908>
10100970:	8f000017 	ldw	fp,0(r17)
10100974:	8c800117 	ldw	r18,4(r17)
10100978:	8c400204 	addi	r17,r17,8
1010097c:	003fe106 	br	10100904 <__alt_data_end+0xfffe0904>
10100980:	8cc00017 	ldw	r19,0(r17)
10100984:	8c800117 	ldw	r18,4(r17)
10100988:	8c400204 	addi	r17,r17,8
1010098c:	003fb306 	br	1010085c <__alt_data_end+0xfffe085c>
10100990:	0005883a 	mov	r2,zero
10100994:	f800283a 	ret
10100998:	81000017 	ldw	r4,0(r16)
1010099c:	80800417 	ldw	r2,16(r16)
101009a0:	11005736 	bltu	r2,r4,10100b00 <__sfvwrite_r+0x314>
101009a4:	85c00517 	ldw	r23,20(r16)
101009a8:	95c05536 	bltu	r18,r23,10100b00 <__sfvwrite_r+0x314>
101009ac:	00a00034 	movhi	r2,32768
101009b0:	10bfffc4 	addi	r2,r2,-1
101009b4:	9009883a 	mov	r4,r18
101009b8:	1480012e 	bgeu	r2,r18,101009c0 <__sfvwrite_r+0x1d4>
101009bc:	1009883a 	mov	r4,r2
101009c0:	b80b883a 	mov	r5,r23
101009c4:	0102ef40 	call	10102ef4 <__divsi3>
101009c8:	15cf383a 	mul	r7,r2,r23
101009cc:	81400717 	ldw	r5,28(r16)
101009d0:	80800917 	ldw	r2,36(r16)
101009d4:	e00d883a 	mov	r6,fp
101009d8:	a809883a 	mov	r4,r21
101009dc:	103ee83a 	callr	r2
101009e0:	00bfdb16 	blt	zero,r2,10100950 <__alt_data_end+0xfffe0950>
101009e4:	8080030b 	ldhu	r2,12(r16)
101009e8:	10801014 	ori	r2,r2,64
101009ec:	8080030d 	sth	r2,12(r16)
101009f0:	00bfffc4 	movi	r2,-1
101009f4:	003fab06 	br	101008a4 <__alt_data_end+0xfffe08a4>
101009f8:	0027883a 	mov	r19,zero
101009fc:	0011883a 	mov	r8,zero
10100a00:	0039883a 	mov	fp,zero
10100a04:	0025883a 	mov	r18,zero
10100a08:	90001f26 	beq	r18,zero,10100a88 <__sfvwrite_r+0x29c>
10100a0c:	40005a26 	beq	r8,zero,10100b78 <__sfvwrite_r+0x38c>
10100a10:	982d883a 	mov	r22,r19
10100a14:	94c0012e 	bgeu	r18,r19,10100a1c <__sfvwrite_r+0x230>
10100a18:	902d883a 	mov	r22,r18
10100a1c:	81000017 	ldw	r4,0(r16)
10100a20:	80800417 	ldw	r2,16(r16)
10100a24:	b02f883a 	mov	r23,r22
10100a28:	81c00517 	ldw	r7,20(r16)
10100a2c:	1100032e 	bgeu	r2,r4,10100a3c <__sfvwrite_r+0x250>
10100a30:	80c00217 	ldw	r3,8(r16)
10100a34:	38c7883a 	add	r3,r7,r3
10100a38:	1d801816 	blt	r3,r22,10100a9c <__sfvwrite_r+0x2b0>
10100a3c:	b1c03e16 	blt	r22,r7,10100b38 <__sfvwrite_r+0x34c>
10100a40:	80800917 	ldw	r2,36(r16)
10100a44:	81400717 	ldw	r5,28(r16)
10100a48:	e00d883a 	mov	r6,fp
10100a4c:	da000115 	stw	r8,4(sp)
10100a50:	a809883a 	mov	r4,r21
10100a54:	103ee83a 	callr	r2
10100a58:	102f883a 	mov	r23,r2
10100a5c:	da000117 	ldw	r8,4(sp)
10100a60:	00bfe00e 	bge	zero,r2,101009e4 <__alt_data_end+0xfffe09e4>
10100a64:	9de7c83a 	sub	r19,r19,r23
10100a68:	98001f26 	beq	r19,zero,10100ae8 <__sfvwrite_r+0x2fc>
10100a6c:	a0800217 	ldw	r2,8(r20)
10100a70:	e5f9883a 	add	fp,fp,r23
10100a74:	95e5c83a 	sub	r18,r18,r23
10100a78:	15efc83a 	sub	r23,r2,r23
10100a7c:	a5c00215 	stw	r23,8(r20)
10100a80:	b83f8726 	beq	r23,zero,101008a0 <__alt_data_end+0xfffe08a0>
10100a84:	903fe11e 	bne	r18,zero,10100a0c <__alt_data_end+0xfffe0a0c>
10100a88:	8f000017 	ldw	fp,0(r17)
10100a8c:	8c800117 	ldw	r18,4(r17)
10100a90:	0011883a 	mov	r8,zero
10100a94:	8c400204 	addi	r17,r17,8
10100a98:	003fdb06 	br	10100a08 <__alt_data_end+0xfffe0a08>
10100a9c:	180d883a 	mov	r6,r3
10100aa0:	e00b883a 	mov	r5,fp
10100aa4:	da000115 	stw	r8,4(sp)
10100aa8:	d8c00015 	stw	r3,0(sp)
10100aac:	01018680 	call	10101868 <memmove>
10100ab0:	d8c00017 	ldw	r3,0(sp)
10100ab4:	80800017 	ldw	r2,0(r16)
10100ab8:	800b883a 	mov	r5,r16
10100abc:	a809883a 	mov	r4,r21
10100ac0:	10c5883a 	add	r2,r2,r3
10100ac4:	80800015 	stw	r2,0(r16)
10100ac8:	d8c00015 	stw	r3,0(sp)
10100acc:	01027080 	call	10102708 <_fflush_r>
10100ad0:	d8c00017 	ldw	r3,0(sp)
10100ad4:	da000117 	ldw	r8,4(sp)
10100ad8:	103fc21e 	bne	r2,zero,101009e4 <__alt_data_end+0xfffe09e4>
10100adc:	182f883a 	mov	r23,r3
10100ae0:	9de7c83a 	sub	r19,r19,r23
10100ae4:	983fe11e 	bne	r19,zero,10100a6c <__alt_data_end+0xfffe0a6c>
10100ae8:	800b883a 	mov	r5,r16
10100aec:	a809883a 	mov	r4,r21
10100af0:	01027080 	call	10102708 <_fflush_r>
10100af4:	103fbb1e 	bne	r2,zero,101009e4 <__alt_data_end+0xfffe09e4>
10100af8:	0011883a 	mov	r8,zero
10100afc:	003fdb06 	br	10100a6c <__alt_data_end+0xfffe0a6c>
10100b00:	94c0012e 	bgeu	r18,r19,10100b08 <__sfvwrite_r+0x31c>
10100b04:	9027883a 	mov	r19,r18
10100b08:	980d883a 	mov	r6,r19
10100b0c:	e00b883a 	mov	r5,fp
10100b10:	01018680 	call	10101868 <memmove>
10100b14:	80800217 	ldw	r2,8(r16)
10100b18:	80c00017 	ldw	r3,0(r16)
10100b1c:	14c5c83a 	sub	r2,r2,r19
10100b20:	1cc7883a 	add	r3,r3,r19
10100b24:	80800215 	stw	r2,8(r16)
10100b28:	80c00015 	stw	r3,0(r16)
10100b2c:	10004326 	beq	r2,zero,10100c3c <__sfvwrite_r+0x450>
10100b30:	9805883a 	mov	r2,r19
10100b34:	003f8606 	br	10100950 <__alt_data_end+0xfffe0950>
10100b38:	b00d883a 	mov	r6,r22
10100b3c:	e00b883a 	mov	r5,fp
10100b40:	da000115 	stw	r8,4(sp)
10100b44:	01018680 	call	10101868 <memmove>
10100b48:	80800217 	ldw	r2,8(r16)
10100b4c:	80c00017 	ldw	r3,0(r16)
10100b50:	da000117 	ldw	r8,4(sp)
10100b54:	1585c83a 	sub	r2,r2,r22
10100b58:	1dad883a 	add	r22,r3,r22
10100b5c:	80800215 	stw	r2,8(r16)
10100b60:	85800015 	stw	r22,0(r16)
10100b64:	003fbf06 	br	10100a64 <__alt_data_end+0xfffe0a64>
10100b68:	81000017 	ldw	r4,0(r16)
10100b6c:	9027883a 	mov	r19,r18
10100b70:	902f883a 	mov	r23,r18
10100b74:	003f6c06 	br	10100928 <__alt_data_end+0xfffe0928>
10100b78:	900d883a 	mov	r6,r18
10100b7c:	01400284 	movi	r5,10
10100b80:	e009883a 	mov	r4,fp
10100b84:	010163c0 	call	1010163c <memchr>
10100b88:	10003e26 	beq	r2,zero,10100c84 <__sfvwrite_r+0x498>
10100b8c:	10800044 	addi	r2,r2,1
10100b90:	1727c83a 	sub	r19,r2,fp
10100b94:	02000044 	movi	r8,1
10100b98:	003f9d06 	br	10100a10 <__alt_data_end+0xfffe0a10>
10100b9c:	80800517 	ldw	r2,20(r16)
10100ba0:	81400417 	ldw	r5,16(r16)
10100ba4:	81c00017 	ldw	r7,0(r16)
10100ba8:	10a7883a 	add	r19,r2,r2
10100bac:	9885883a 	add	r2,r19,r2
10100bb0:	1026d7fa 	srli	r19,r2,31
10100bb4:	396dc83a 	sub	r22,r7,r5
10100bb8:	b1000044 	addi	r4,r22,1
10100bbc:	9885883a 	add	r2,r19,r2
10100bc0:	1027d07a 	srai	r19,r2,1
10100bc4:	2485883a 	add	r2,r4,r18
10100bc8:	980d883a 	mov	r6,r19
10100bcc:	9880022e 	bgeu	r19,r2,10100bd8 <__sfvwrite_r+0x3ec>
10100bd0:	1027883a 	mov	r19,r2
10100bd4:	100d883a 	mov	r6,r2
10100bd8:	18c1000c 	andi	r3,r3,1024
10100bdc:	18001c26 	beq	r3,zero,10100c50 <__sfvwrite_r+0x464>
10100be0:	300b883a 	mov	r5,r6
10100be4:	a809883a 	mov	r4,r21
10100be8:	0100e300 	call	10100e30 <_malloc_r>
10100bec:	102f883a 	mov	r23,r2
10100bf0:	10002926 	beq	r2,zero,10100c98 <__sfvwrite_r+0x4ac>
10100bf4:	81400417 	ldw	r5,16(r16)
10100bf8:	b00d883a 	mov	r6,r22
10100bfc:	1009883a 	mov	r4,r2
10100c00:	01017200 	call	10101720 <memcpy>
10100c04:	8080030b 	ldhu	r2,12(r16)
10100c08:	00fedfc4 	movi	r3,-1153
10100c0c:	10c4703a 	and	r2,r2,r3
10100c10:	10802014 	ori	r2,r2,128
10100c14:	8080030d 	sth	r2,12(r16)
10100c18:	bd89883a 	add	r4,r23,r22
10100c1c:	9d8fc83a 	sub	r7,r19,r22
10100c20:	85c00415 	stw	r23,16(r16)
10100c24:	84c00515 	stw	r19,20(r16)
10100c28:	81000015 	stw	r4,0(r16)
10100c2c:	9027883a 	mov	r19,r18
10100c30:	81c00215 	stw	r7,8(r16)
10100c34:	902f883a 	mov	r23,r18
10100c38:	003f3b06 	br	10100928 <__alt_data_end+0xfffe0928>
10100c3c:	800b883a 	mov	r5,r16
10100c40:	a809883a 	mov	r4,r21
10100c44:	01027080 	call	10102708 <_fflush_r>
10100c48:	103fb926 	beq	r2,zero,10100b30 <__alt_data_end+0xfffe0b30>
10100c4c:	003f6506 	br	101009e4 <__alt_data_end+0xfffe09e4>
10100c50:	a809883a 	mov	r4,r21
10100c54:	0101aec0 	call	10101aec <_realloc_r>
10100c58:	102f883a 	mov	r23,r2
10100c5c:	103fee1e 	bne	r2,zero,10100c18 <__alt_data_end+0xfffe0c18>
10100c60:	81400417 	ldw	r5,16(r16)
10100c64:	a809883a 	mov	r4,r21
10100c68:	01028b80 	call	101028b8 <_free_r>
10100c6c:	8080030b 	ldhu	r2,12(r16)
10100c70:	00ffdfc4 	movi	r3,-129
10100c74:	1884703a 	and	r2,r3,r2
10100c78:	00c00304 	movi	r3,12
10100c7c:	a8c00015 	stw	r3,0(r21)
10100c80:	003f5906 	br	101009e8 <__alt_data_end+0xfffe09e8>
10100c84:	94c00044 	addi	r19,r18,1
10100c88:	02000044 	movi	r8,1
10100c8c:	003f6006 	br	10100a10 <__alt_data_end+0xfffe0a10>
10100c90:	00bfffc4 	movi	r2,-1
10100c94:	003f0306 	br	101008a4 <__alt_data_end+0xfffe08a4>
10100c98:	00800304 	movi	r2,12
10100c9c:	a8800015 	stw	r2,0(r21)
10100ca0:	8080030b 	ldhu	r2,12(r16)
10100ca4:	003f5006 	br	101009e8 <__alt_data_end+0xfffe09e8>

10100ca8 <_fwalk>:
10100ca8:	defff704 	addi	sp,sp,-36
10100cac:	dd000415 	stw	r20,16(sp)
10100cb0:	dfc00815 	stw	ra,32(sp)
10100cb4:	ddc00715 	stw	r23,28(sp)
10100cb8:	dd800615 	stw	r22,24(sp)
10100cbc:	dd400515 	stw	r21,20(sp)
10100cc0:	dcc00315 	stw	r19,12(sp)
10100cc4:	dc800215 	stw	r18,8(sp)
10100cc8:	dc400115 	stw	r17,4(sp)
10100ccc:	dc000015 	stw	r16,0(sp)
10100cd0:	2500b804 	addi	r20,r4,736
10100cd4:	a0002326 	beq	r20,zero,10100d64 <_fwalk+0xbc>
10100cd8:	282b883a 	mov	r21,r5
10100cdc:	002f883a 	mov	r23,zero
10100ce0:	05800044 	movi	r22,1
10100ce4:	04ffffc4 	movi	r19,-1
10100ce8:	a4400117 	ldw	r17,4(r20)
10100cec:	a4800217 	ldw	r18,8(r20)
10100cf0:	8c7fffc4 	addi	r17,r17,-1
10100cf4:	88000d16 	blt	r17,zero,10100d2c <_fwalk+0x84>
10100cf8:	94000304 	addi	r16,r18,12
10100cfc:	94800384 	addi	r18,r18,14
10100d00:	8080000b 	ldhu	r2,0(r16)
10100d04:	8c7fffc4 	addi	r17,r17,-1
10100d08:	813ffd04 	addi	r4,r16,-12
10100d0c:	b080042e 	bgeu	r22,r2,10100d20 <_fwalk+0x78>
10100d10:	9080000f 	ldh	r2,0(r18)
10100d14:	14c00226 	beq	r2,r19,10100d20 <_fwalk+0x78>
10100d18:	a83ee83a 	callr	r21
10100d1c:	b8aeb03a 	or	r23,r23,r2
10100d20:	84001a04 	addi	r16,r16,104
10100d24:	94801a04 	addi	r18,r18,104
10100d28:	8cfff51e 	bne	r17,r19,10100d00 <__alt_data_end+0xfffe0d00>
10100d2c:	a5000017 	ldw	r20,0(r20)
10100d30:	a03fed1e 	bne	r20,zero,10100ce8 <__alt_data_end+0xfffe0ce8>
10100d34:	b805883a 	mov	r2,r23
10100d38:	dfc00817 	ldw	ra,32(sp)
10100d3c:	ddc00717 	ldw	r23,28(sp)
10100d40:	dd800617 	ldw	r22,24(sp)
10100d44:	dd400517 	ldw	r21,20(sp)
10100d48:	dd000417 	ldw	r20,16(sp)
10100d4c:	dcc00317 	ldw	r19,12(sp)
10100d50:	dc800217 	ldw	r18,8(sp)
10100d54:	dc400117 	ldw	r17,4(sp)
10100d58:	dc000017 	ldw	r16,0(sp)
10100d5c:	dec00904 	addi	sp,sp,36
10100d60:	f800283a 	ret
10100d64:	002f883a 	mov	r23,zero
10100d68:	003ff206 	br	10100d34 <__alt_data_end+0xfffe0d34>

10100d6c <_fwalk_reent>:
10100d6c:	defff704 	addi	sp,sp,-36
10100d70:	dd000415 	stw	r20,16(sp)
10100d74:	dfc00815 	stw	ra,32(sp)
10100d78:	ddc00715 	stw	r23,28(sp)
10100d7c:	dd800615 	stw	r22,24(sp)
10100d80:	dd400515 	stw	r21,20(sp)
10100d84:	dcc00315 	stw	r19,12(sp)
10100d88:	dc800215 	stw	r18,8(sp)
10100d8c:	dc400115 	stw	r17,4(sp)
10100d90:	dc000015 	stw	r16,0(sp)
10100d94:	2500b804 	addi	r20,r4,736
10100d98:	a0002326 	beq	r20,zero,10100e28 <_fwalk_reent+0xbc>
10100d9c:	282b883a 	mov	r21,r5
10100da0:	2027883a 	mov	r19,r4
10100da4:	002f883a 	mov	r23,zero
10100da8:	05800044 	movi	r22,1
10100dac:	04bfffc4 	movi	r18,-1
10100db0:	a4400117 	ldw	r17,4(r20)
10100db4:	a4000217 	ldw	r16,8(r20)
10100db8:	8c7fffc4 	addi	r17,r17,-1
10100dbc:	88000c16 	blt	r17,zero,10100df0 <_fwalk_reent+0x84>
10100dc0:	84000304 	addi	r16,r16,12
10100dc4:	8080000b 	ldhu	r2,0(r16)
10100dc8:	8c7fffc4 	addi	r17,r17,-1
10100dcc:	817ffd04 	addi	r5,r16,-12
10100dd0:	b080052e 	bgeu	r22,r2,10100de8 <_fwalk_reent+0x7c>
10100dd4:	8080008f 	ldh	r2,2(r16)
10100dd8:	9809883a 	mov	r4,r19
10100ddc:	14800226 	beq	r2,r18,10100de8 <_fwalk_reent+0x7c>
10100de0:	a83ee83a 	callr	r21
10100de4:	b8aeb03a 	or	r23,r23,r2
10100de8:	84001a04 	addi	r16,r16,104
10100dec:	8cbff51e 	bne	r17,r18,10100dc4 <__alt_data_end+0xfffe0dc4>
10100df0:	a5000017 	ldw	r20,0(r20)
10100df4:	a03fee1e 	bne	r20,zero,10100db0 <__alt_data_end+0xfffe0db0>
10100df8:	b805883a 	mov	r2,r23
10100dfc:	dfc00817 	ldw	ra,32(sp)
10100e00:	ddc00717 	ldw	r23,28(sp)
10100e04:	dd800617 	ldw	r22,24(sp)
10100e08:	dd400517 	ldw	r21,20(sp)
10100e0c:	dd000417 	ldw	r20,16(sp)
10100e10:	dcc00317 	ldw	r19,12(sp)
10100e14:	dc800217 	ldw	r18,8(sp)
10100e18:	dc400117 	ldw	r17,4(sp)
10100e1c:	dc000017 	ldw	r16,0(sp)
10100e20:	dec00904 	addi	sp,sp,36
10100e24:	f800283a 	ret
10100e28:	002f883a 	mov	r23,zero
10100e2c:	003ff206 	br	10100df8 <__alt_data_end+0xfffe0df8>

10100e30 <_malloc_r>:
10100e30:	defff504 	addi	sp,sp,-44
10100e34:	dc800315 	stw	r18,12(sp)
10100e38:	dfc00a15 	stw	ra,40(sp)
10100e3c:	df000915 	stw	fp,36(sp)
10100e40:	ddc00815 	stw	r23,32(sp)
10100e44:	dd800715 	stw	r22,28(sp)
10100e48:	dd400615 	stw	r21,24(sp)
10100e4c:	dd000515 	stw	r20,20(sp)
10100e50:	dcc00415 	stw	r19,16(sp)
10100e54:	dc400215 	stw	r17,8(sp)
10100e58:	dc000115 	stw	r16,4(sp)
10100e5c:	288002c4 	addi	r2,r5,11
10100e60:	00c00584 	movi	r3,22
10100e64:	2025883a 	mov	r18,r4
10100e68:	18807f2e 	bgeu	r3,r2,10101068 <_malloc_r+0x238>
10100e6c:	047ffe04 	movi	r17,-8
10100e70:	1462703a 	and	r17,r2,r17
10100e74:	8800a316 	blt	r17,zero,10101104 <_malloc_r+0x2d4>
10100e78:	8940a236 	bltu	r17,r5,10101104 <_malloc_r+0x2d4>
10100e7c:	01036240 	call	10103624 <__malloc_lock>
10100e80:	00807dc4 	movi	r2,503
10100e84:	1441e92e 	bgeu	r2,r17,1010162c <_malloc_r+0x7fc>
10100e88:	8804d27a 	srli	r2,r17,9
10100e8c:	1000a126 	beq	r2,zero,10101114 <_malloc_r+0x2e4>
10100e90:	00c00104 	movi	r3,4
10100e94:	18811e36 	bltu	r3,r2,10101310 <_malloc_r+0x4e0>
10100e98:	8804d1ba 	srli	r2,r17,6
10100e9c:	12000e44 	addi	r8,r2,57
10100ea0:	11c00e04 	addi	r7,r2,56
10100ea4:	4209883a 	add	r4,r8,r8
10100ea8:	04c40434 	movhi	r19,4112
10100eac:	2109883a 	add	r4,r4,r4
10100eb0:	9cd6ec04 	addi	r19,r19,23472
10100eb4:	2109883a 	add	r4,r4,r4
10100eb8:	9909883a 	add	r4,r19,r4
10100ebc:	24000117 	ldw	r16,4(r4)
10100ec0:	213ffe04 	addi	r4,r4,-8
10100ec4:	24009726 	beq	r4,r16,10101124 <_malloc_r+0x2f4>
10100ec8:	80800117 	ldw	r2,4(r16)
10100ecc:	01bfff04 	movi	r6,-4
10100ed0:	014003c4 	movi	r5,15
10100ed4:	1184703a 	and	r2,r2,r6
10100ed8:	1447c83a 	sub	r3,r2,r17
10100edc:	28c00716 	blt	r5,r3,10100efc <_malloc_r+0xcc>
10100ee0:	1800920e 	bge	r3,zero,1010112c <_malloc_r+0x2fc>
10100ee4:	84000317 	ldw	r16,12(r16)
10100ee8:	24008e26 	beq	r4,r16,10101124 <_malloc_r+0x2f4>
10100eec:	80800117 	ldw	r2,4(r16)
10100ef0:	1184703a 	and	r2,r2,r6
10100ef4:	1447c83a 	sub	r3,r2,r17
10100ef8:	28fff90e 	bge	r5,r3,10100ee0 <__alt_data_end+0xfffe0ee0>
10100efc:	3809883a 	mov	r4,r7
10100f00:	01840434 	movhi	r6,4112
10100f04:	9c000417 	ldw	r16,16(r19)
10100f08:	3196ec04 	addi	r6,r6,23472
10100f0c:	32000204 	addi	r8,r6,8
10100f10:	82013426 	beq	r16,r8,101013e4 <_malloc_r+0x5b4>
10100f14:	80c00117 	ldw	r3,4(r16)
10100f18:	00bfff04 	movi	r2,-4
10100f1c:	188e703a 	and	r7,r3,r2
10100f20:	3c45c83a 	sub	r2,r7,r17
10100f24:	00c003c4 	movi	r3,15
10100f28:	18811f16 	blt	r3,r2,101013a8 <_malloc_r+0x578>
10100f2c:	32000515 	stw	r8,20(r6)
10100f30:	32000415 	stw	r8,16(r6)
10100f34:	10007f0e 	bge	r2,zero,10101134 <_malloc_r+0x304>
10100f38:	00807fc4 	movi	r2,511
10100f3c:	11c0fd36 	bltu	r2,r7,10101334 <_malloc_r+0x504>
10100f40:	3806d0fa 	srli	r3,r7,3
10100f44:	01c00044 	movi	r7,1
10100f48:	30800117 	ldw	r2,4(r6)
10100f4c:	19400044 	addi	r5,r3,1
10100f50:	294b883a 	add	r5,r5,r5
10100f54:	1807d0ba 	srai	r3,r3,2
10100f58:	294b883a 	add	r5,r5,r5
10100f5c:	294b883a 	add	r5,r5,r5
10100f60:	298b883a 	add	r5,r5,r6
10100f64:	38c6983a 	sll	r3,r7,r3
10100f68:	29c00017 	ldw	r7,0(r5)
10100f6c:	2a7ffe04 	addi	r9,r5,-8
10100f70:	1886b03a 	or	r3,r3,r2
10100f74:	82400315 	stw	r9,12(r16)
10100f78:	81c00215 	stw	r7,8(r16)
10100f7c:	30c00115 	stw	r3,4(r6)
10100f80:	2c000015 	stw	r16,0(r5)
10100f84:	3c000315 	stw	r16,12(r7)
10100f88:	2005d0ba 	srai	r2,r4,2
10100f8c:	01400044 	movi	r5,1
10100f90:	288a983a 	sll	r5,r5,r2
10100f94:	19406f36 	bltu	r3,r5,10101154 <_malloc_r+0x324>
10100f98:	28c4703a 	and	r2,r5,r3
10100f9c:	10000a1e 	bne	r2,zero,10100fc8 <_malloc_r+0x198>
10100fa0:	00bfff04 	movi	r2,-4
10100fa4:	294b883a 	add	r5,r5,r5
10100fa8:	2088703a 	and	r4,r4,r2
10100fac:	28c4703a 	and	r2,r5,r3
10100fb0:	21000104 	addi	r4,r4,4
10100fb4:	1000041e 	bne	r2,zero,10100fc8 <_malloc_r+0x198>
10100fb8:	294b883a 	add	r5,r5,r5
10100fbc:	28c4703a 	and	r2,r5,r3
10100fc0:	21000104 	addi	r4,r4,4
10100fc4:	103ffc26 	beq	r2,zero,10100fb8 <__alt_data_end+0xfffe0fb8>
10100fc8:	02bfff04 	movi	r10,-4
10100fcc:	024003c4 	movi	r9,15
10100fd0:	21800044 	addi	r6,r4,1
10100fd4:	318d883a 	add	r6,r6,r6
10100fd8:	318d883a 	add	r6,r6,r6
10100fdc:	318d883a 	add	r6,r6,r6
10100fe0:	998d883a 	add	r6,r19,r6
10100fe4:	333ffe04 	addi	r12,r6,-8
10100fe8:	2017883a 	mov	r11,r4
10100fec:	31800104 	addi	r6,r6,4
10100ff0:	34000017 	ldw	r16,0(r6)
10100ff4:	31fffd04 	addi	r7,r6,-12
10100ff8:	81c0041e 	bne	r16,r7,1010100c <_malloc_r+0x1dc>
10100ffc:	0000fb06 	br	101013ec <_malloc_r+0x5bc>
10101000:	1801030e 	bge	r3,zero,10101410 <_malloc_r+0x5e0>
10101004:	84000317 	ldw	r16,12(r16)
10101008:	81c0f826 	beq	r16,r7,101013ec <_malloc_r+0x5bc>
1010100c:	80800117 	ldw	r2,4(r16)
10101010:	1284703a 	and	r2,r2,r10
10101014:	1447c83a 	sub	r3,r2,r17
10101018:	48fff90e 	bge	r9,r3,10101000 <__alt_data_end+0xfffe1000>
1010101c:	80800317 	ldw	r2,12(r16)
10101020:	81000217 	ldw	r4,8(r16)
10101024:	89400054 	ori	r5,r17,1
10101028:	81400115 	stw	r5,4(r16)
1010102c:	20800315 	stw	r2,12(r4)
10101030:	11000215 	stw	r4,8(r2)
10101034:	8463883a 	add	r17,r16,r17
10101038:	9c400515 	stw	r17,20(r19)
1010103c:	9c400415 	stw	r17,16(r19)
10101040:	18800054 	ori	r2,r3,1
10101044:	88800115 	stw	r2,4(r17)
10101048:	8a000315 	stw	r8,12(r17)
1010104c:	8a000215 	stw	r8,8(r17)
10101050:	88e3883a 	add	r17,r17,r3
10101054:	88c00015 	stw	r3,0(r17)
10101058:	9009883a 	mov	r4,r18
1010105c:	01036480 	call	10103648 <__malloc_unlock>
10101060:	80800204 	addi	r2,r16,8
10101064:	00001b06 	br	101010d4 <_malloc_r+0x2a4>
10101068:	04400404 	movi	r17,16
1010106c:	89402536 	bltu	r17,r5,10101104 <_malloc_r+0x2d4>
10101070:	01036240 	call	10103624 <__malloc_lock>
10101074:	00800184 	movi	r2,6
10101078:	01000084 	movi	r4,2
1010107c:	04c40434 	movhi	r19,4112
10101080:	1085883a 	add	r2,r2,r2
10101084:	9cd6ec04 	addi	r19,r19,23472
10101088:	1085883a 	add	r2,r2,r2
1010108c:	9885883a 	add	r2,r19,r2
10101090:	14000117 	ldw	r16,4(r2)
10101094:	10fffe04 	addi	r3,r2,-8
10101098:	80c0d926 	beq	r16,r3,10101400 <_malloc_r+0x5d0>
1010109c:	80c00117 	ldw	r3,4(r16)
101010a0:	81000317 	ldw	r4,12(r16)
101010a4:	00bfff04 	movi	r2,-4
101010a8:	1884703a 	and	r2,r3,r2
101010ac:	81400217 	ldw	r5,8(r16)
101010b0:	8085883a 	add	r2,r16,r2
101010b4:	10c00117 	ldw	r3,4(r2)
101010b8:	29000315 	stw	r4,12(r5)
101010bc:	21400215 	stw	r5,8(r4)
101010c0:	18c00054 	ori	r3,r3,1
101010c4:	10c00115 	stw	r3,4(r2)
101010c8:	9009883a 	mov	r4,r18
101010cc:	01036480 	call	10103648 <__malloc_unlock>
101010d0:	80800204 	addi	r2,r16,8
101010d4:	dfc00a17 	ldw	ra,40(sp)
101010d8:	df000917 	ldw	fp,36(sp)
101010dc:	ddc00817 	ldw	r23,32(sp)
101010e0:	dd800717 	ldw	r22,28(sp)
101010e4:	dd400617 	ldw	r21,24(sp)
101010e8:	dd000517 	ldw	r20,20(sp)
101010ec:	dcc00417 	ldw	r19,16(sp)
101010f0:	dc800317 	ldw	r18,12(sp)
101010f4:	dc400217 	ldw	r17,8(sp)
101010f8:	dc000117 	ldw	r16,4(sp)
101010fc:	dec00b04 	addi	sp,sp,44
10101100:	f800283a 	ret
10101104:	00800304 	movi	r2,12
10101108:	90800015 	stw	r2,0(r18)
1010110c:	0005883a 	mov	r2,zero
10101110:	003ff006 	br	101010d4 <__alt_data_end+0xfffe10d4>
10101114:	01002004 	movi	r4,128
10101118:	02001004 	movi	r8,64
1010111c:	01c00fc4 	movi	r7,63
10101120:	003f6106 	br	10100ea8 <__alt_data_end+0xfffe0ea8>
10101124:	4009883a 	mov	r4,r8
10101128:	003f7506 	br	10100f00 <__alt_data_end+0xfffe0f00>
1010112c:	81000317 	ldw	r4,12(r16)
10101130:	003fde06 	br	101010ac <__alt_data_end+0xfffe10ac>
10101134:	81c5883a 	add	r2,r16,r7
10101138:	11400117 	ldw	r5,4(r2)
1010113c:	9009883a 	mov	r4,r18
10101140:	29400054 	ori	r5,r5,1
10101144:	11400115 	stw	r5,4(r2)
10101148:	01036480 	call	10103648 <__malloc_unlock>
1010114c:	80800204 	addi	r2,r16,8
10101150:	003fe006 	br	101010d4 <__alt_data_end+0xfffe10d4>
10101154:	9c000217 	ldw	r16,8(r19)
10101158:	00bfff04 	movi	r2,-4
1010115c:	85800117 	ldw	r22,4(r16)
10101160:	b0ac703a 	and	r22,r22,r2
10101164:	b4400336 	bltu	r22,r17,10101174 <_malloc_r+0x344>
10101168:	b445c83a 	sub	r2,r22,r17
1010116c:	00c003c4 	movi	r3,15
10101170:	18805d16 	blt	r3,r2,101012e8 <_malloc_r+0x4b8>
10101174:	05c40434 	movhi	r23,4112
10101178:	00840474 	movhi	r2,4113
1010117c:	10a31b04 	addi	r2,r2,-29588
10101180:	bddc7204 	addi	r23,r23,29128
10101184:	15400017 	ldw	r21,0(r2)
10101188:	b8c00017 	ldw	r3,0(r23)
1010118c:	00bfffc4 	movi	r2,-1
10101190:	858d883a 	add	r6,r16,r22
10101194:	8d6b883a 	add	r21,r17,r21
10101198:	1880ea26 	beq	r3,r2,10101544 <_malloc_r+0x714>
1010119c:	ad4403c4 	addi	r21,r21,4111
101011a0:	00bc0004 	movi	r2,-4096
101011a4:	a8aa703a 	and	r21,r21,r2
101011a8:	a80b883a 	mov	r5,r21
101011ac:	9009883a 	mov	r4,r18
101011b0:	d9800015 	stw	r6,0(sp)
101011b4:	01020500 	call	10102050 <_sbrk_r>
101011b8:	1029883a 	mov	r20,r2
101011bc:	00bfffc4 	movi	r2,-1
101011c0:	d9800017 	ldw	r6,0(sp)
101011c4:	a080e826 	beq	r20,r2,10101568 <_malloc_r+0x738>
101011c8:	a180a636 	bltu	r20,r6,10101464 <_malloc_r+0x634>
101011cc:	07040474 	movhi	fp,4113
101011d0:	e7232404 	addi	fp,fp,-29552
101011d4:	e0800017 	ldw	r2,0(fp)
101011d8:	a887883a 	add	r3,r21,r2
101011dc:	e0c00015 	stw	r3,0(fp)
101011e0:	3500e626 	beq	r6,r20,1010157c <_malloc_r+0x74c>
101011e4:	b9000017 	ldw	r4,0(r23)
101011e8:	00bfffc4 	movi	r2,-1
101011ec:	2080ee26 	beq	r4,r2,101015a8 <_malloc_r+0x778>
101011f0:	a185c83a 	sub	r2,r20,r6
101011f4:	10c5883a 	add	r2,r2,r3
101011f8:	e0800015 	stw	r2,0(fp)
101011fc:	a0c001cc 	andi	r3,r20,7
10101200:	1800bc26 	beq	r3,zero,101014f4 <_malloc_r+0x6c4>
10101204:	a0e9c83a 	sub	r20,r20,r3
10101208:	00840204 	movi	r2,4104
1010120c:	a5000204 	addi	r20,r20,8
10101210:	10c7c83a 	sub	r3,r2,r3
10101214:	a545883a 	add	r2,r20,r21
10101218:	1083ffcc 	andi	r2,r2,4095
1010121c:	18abc83a 	sub	r21,r3,r2
10101220:	a80b883a 	mov	r5,r21
10101224:	9009883a 	mov	r4,r18
10101228:	01020500 	call	10102050 <_sbrk_r>
1010122c:	00ffffc4 	movi	r3,-1
10101230:	10c0e126 	beq	r2,r3,101015b8 <_malloc_r+0x788>
10101234:	1505c83a 	sub	r2,r2,r20
10101238:	1545883a 	add	r2,r2,r21
1010123c:	10800054 	ori	r2,r2,1
10101240:	e0c00017 	ldw	r3,0(fp)
10101244:	9d000215 	stw	r20,8(r19)
10101248:	a0800115 	stw	r2,4(r20)
1010124c:	a8c7883a 	add	r3,r21,r3
10101250:	e0c00015 	stw	r3,0(fp)
10101254:	84c00e26 	beq	r16,r19,10101290 <_malloc_r+0x460>
10101258:	018003c4 	movi	r6,15
1010125c:	3580a72e 	bgeu	r6,r22,101014fc <_malloc_r+0x6cc>
10101260:	81400117 	ldw	r5,4(r16)
10101264:	013ffe04 	movi	r4,-8
10101268:	b0bffd04 	addi	r2,r22,-12
1010126c:	1104703a 	and	r2,r2,r4
10101270:	2900004c 	andi	r4,r5,1
10101274:	2088b03a 	or	r4,r4,r2
10101278:	81000115 	stw	r4,4(r16)
1010127c:	01400144 	movi	r5,5
10101280:	8089883a 	add	r4,r16,r2
10101284:	21400115 	stw	r5,4(r4)
10101288:	21400215 	stw	r5,8(r4)
1010128c:	3080cd36 	bltu	r6,r2,101015c4 <_malloc_r+0x794>
10101290:	00840474 	movhi	r2,4113
10101294:	10a31a04 	addi	r2,r2,-29592
10101298:	11000017 	ldw	r4,0(r2)
1010129c:	20c0012e 	bgeu	r4,r3,101012a4 <_malloc_r+0x474>
101012a0:	10c00015 	stw	r3,0(r2)
101012a4:	00840474 	movhi	r2,4113
101012a8:	10a31904 	addi	r2,r2,-29596
101012ac:	11000017 	ldw	r4,0(r2)
101012b0:	9c000217 	ldw	r16,8(r19)
101012b4:	20c0012e 	bgeu	r4,r3,101012bc <_malloc_r+0x48c>
101012b8:	10c00015 	stw	r3,0(r2)
101012bc:	80c00117 	ldw	r3,4(r16)
101012c0:	00bfff04 	movi	r2,-4
101012c4:	1886703a 	and	r3,r3,r2
101012c8:	1c45c83a 	sub	r2,r3,r17
101012cc:	1c400236 	bltu	r3,r17,101012d8 <_malloc_r+0x4a8>
101012d0:	00c003c4 	movi	r3,15
101012d4:	18800416 	blt	r3,r2,101012e8 <_malloc_r+0x4b8>
101012d8:	9009883a 	mov	r4,r18
101012dc:	01036480 	call	10103648 <__malloc_unlock>
101012e0:	0005883a 	mov	r2,zero
101012e4:	003f7b06 	br	101010d4 <__alt_data_end+0xfffe10d4>
101012e8:	88c00054 	ori	r3,r17,1
101012ec:	80c00115 	stw	r3,4(r16)
101012f0:	8463883a 	add	r17,r16,r17
101012f4:	10800054 	ori	r2,r2,1
101012f8:	9c400215 	stw	r17,8(r19)
101012fc:	88800115 	stw	r2,4(r17)
10101300:	9009883a 	mov	r4,r18
10101304:	01036480 	call	10103648 <__malloc_unlock>
10101308:	80800204 	addi	r2,r16,8
1010130c:	003f7106 	br	101010d4 <__alt_data_end+0xfffe10d4>
10101310:	00c00504 	movi	r3,20
10101314:	18804a2e 	bgeu	r3,r2,10101440 <_malloc_r+0x610>
10101318:	00c01504 	movi	r3,84
1010131c:	18806e36 	bltu	r3,r2,101014d8 <_malloc_r+0x6a8>
10101320:	8804d33a 	srli	r2,r17,12
10101324:	12001bc4 	addi	r8,r2,111
10101328:	11c01b84 	addi	r7,r2,110
1010132c:	4209883a 	add	r4,r8,r8
10101330:	003edd06 	br	10100ea8 <__alt_data_end+0xfffe0ea8>
10101334:	3804d27a 	srli	r2,r7,9
10101338:	00c00104 	movi	r3,4
1010133c:	1880442e 	bgeu	r3,r2,10101450 <_malloc_r+0x620>
10101340:	00c00504 	movi	r3,20
10101344:	18808136 	bltu	r3,r2,1010154c <_malloc_r+0x71c>
10101348:	11401704 	addi	r5,r2,92
1010134c:	10c016c4 	addi	r3,r2,91
10101350:	294b883a 	add	r5,r5,r5
10101354:	294b883a 	add	r5,r5,r5
10101358:	294b883a 	add	r5,r5,r5
1010135c:	994b883a 	add	r5,r19,r5
10101360:	28800017 	ldw	r2,0(r5)
10101364:	01840434 	movhi	r6,4112
10101368:	297ffe04 	addi	r5,r5,-8
1010136c:	3196ec04 	addi	r6,r6,23472
10101370:	28806526 	beq	r5,r2,10101508 <_malloc_r+0x6d8>
10101374:	01bfff04 	movi	r6,-4
10101378:	10c00117 	ldw	r3,4(r2)
1010137c:	1986703a 	and	r3,r3,r6
10101380:	38c0022e 	bgeu	r7,r3,1010138c <_malloc_r+0x55c>
10101384:	10800217 	ldw	r2,8(r2)
10101388:	28bffb1e 	bne	r5,r2,10101378 <__alt_data_end+0xfffe1378>
1010138c:	11400317 	ldw	r5,12(r2)
10101390:	98c00117 	ldw	r3,4(r19)
10101394:	81400315 	stw	r5,12(r16)
10101398:	80800215 	stw	r2,8(r16)
1010139c:	2c000215 	stw	r16,8(r5)
101013a0:	14000315 	stw	r16,12(r2)
101013a4:	003ef806 	br	10100f88 <__alt_data_end+0xfffe0f88>
101013a8:	88c00054 	ori	r3,r17,1
101013ac:	80c00115 	stw	r3,4(r16)
101013b0:	8463883a 	add	r17,r16,r17
101013b4:	34400515 	stw	r17,20(r6)
101013b8:	34400415 	stw	r17,16(r6)
101013bc:	10c00054 	ori	r3,r2,1
101013c0:	8a000315 	stw	r8,12(r17)
101013c4:	8a000215 	stw	r8,8(r17)
101013c8:	88c00115 	stw	r3,4(r17)
101013cc:	88a3883a 	add	r17,r17,r2
101013d0:	88800015 	stw	r2,0(r17)
101013d4:	9009883a 	mov	r4,r18
101013d8:	01036480 	call	10103648 <__malloc_unlock>
101013dc:	80800204 	addi	r2,r16,8
101013e0:	003f3c06 	br	101010d4 <__alt_data_end+0xfffe10d4>
101013e4:	30c00117 	ldw	r3,4(r6)
101013e8:	003ee706 	br	10100f88 <__alt_data_end+0xfffe0f88>
101013ec:	5ac00044 	addi	r11,r11,1
101013f0:	588000cc 	andi	r2,r11,3
101013f4:	31800204 	addi	r6,r6,8
101013f8:	103efd1e 	bne	r2,zero,10100ff0 <__alt_data_end+0xfffe0ff0>
101013fc:	00002406 	br	10101490 <_malloc_r+0x660>
10101400:	14000317 	ldw	r16,12(r2)
10101404:	143f251e 	bne	r2,r16,1010109c <__alt_data_end+0xfffe109c>
10101408:	21000084 	addi	r4,r4,2
1010140c:	003ebc06 	br	10100f00 <__alt_data_end+0xfffe0f00>
10101410:	8085883a 	add	r2,r16,r2
10101414:	10c00117 	ldw	r3,4(r2)
10101418:	81000317 	ldw	r4,12(r16)
1010141c:	81400217 	ldw	r5,8(r16)
10101420:	18c00054 	ori	r3,r3,1
10101424:	10c00115 	stw	r3,4(r2)
10101428:	29000315 	stw	r4,12(r5)
1010142c:	21400215 	stw	r5,8(r4)
10101430:	9009883a 	mov	r4,r18
10101434:	01036480 	call	10103648 <__malloc_unlock>
10101438:	80800204 	addi	r2,r16,8
1010143c:	003f2506 	br	101010d4 <__alt_data_end+0xfffe10d4>
10101440:	12001704 	addi	r8,r2,92
10101444:	11c016c4 	addi	r7,r2,91
10101448:	4209883a 	add	r4,r8,r8
1010144c:	003e9606 	br	10100ea8 <__alt_data_end+0xfffe0ea8>
10101450:	3804d1ba 	srli	r2,r7,6
10101454:	11400e44 	addi	r5,r2,57
10101458:	10c00e04 	addi	r3,r2,56
1010145c:	294b883a 	add	r5,r5,r5
10101460:	003fbc06 	br	10101354 <__alt_data_end+0xfffe1354>
10101464:	84ff5926 	beq	r16,r19,101011cc <__alt_data_end+0xfffe11cc>
10101468:	00840434 	movhi	r2,4112
1010146c:	1096ec04 	addi	r2,r2,23472
10101470:	14000217 	ldw	r16,8(r2)
10101474:	00bfff04 	movi	r2,-4
10101478:	80c00117 	ldw	r3,4(r16)
1010147c:	1886703a 	and	r3,r3,r2
10101480:	003f9106 	br	101012c8 <__alt_data_end+0xfffe12c8>
10101484:	60800217 	ldw	r2,8(r12)
10101488:	213fffc4 	addi	r4,r4,-1
1010148c:	1300651e 	bne	r2,r12,10101624 <_malloc_r+0x7f4>
10101490:	208000cc 	andi	r2,r4,3
10101494:	633ffe04 	addi	r12,r12,-8
10101498:	103ffa1e 	bne	r2,zero,10101484 <__alt_data_end+0xfffe1484>
1010149c:	98800117 	ldw	r2,4(r19)
101014a0:	0146303a 	nor	r3,zero,r5
101014a4:	1884703a 	and	r2,r3,r2
101014a8:	98800115 	stw	r2,4(r19)
101014ac:	294b883a 	add	r5,r5,r5
101014b0:	117f2836 	bltu	r2,r5,10101154 <__alt_data_end+0xfffe1154>
101014b4:	283f2726 	beq	r5,zero,10101154 <__alt_data_end+0xfffe1154>
101014b8:	2886703a 	and	r3,r5,r2
101014bc:	5809883a 	mov	r4,r11
101014c0:	183ec31e 	bne	r3,zero,10100fd0 <__alt_data_end+0xfffe0fd0>
101014c4:	294b883a 	add	r5,r5,r5
101014c8:	2886703a 	and	r3,r5,r2
101014cc:	21000104 	addi	r4,r4,4
101014d0:	183ffc26 	beq	r3,zero,101014c4 <__alt_data_end+0xfffe14c4>
101014d4:	003ebe06 	br	10100fd0 <__alt_data_end+0xfffe0fd0>
101014d8:	00c05504 	movi	r3,340
101014dc:	18801236 	bltu	r3,r2,10101528 <_malloc_r+0x6f8>
101014e0:	8804d3fa 	srli	r2,r17,15
101014e4:	12001e04 	addi	r8,r2,120
101014e8:	11c01dc4 	addi	r7,r2,119
101014ec:	4209883a 	add	r4,r8,r8
101014f0:	003e6d06 	br	10100ea8 <__alt_data_end+0xfffe0ea8>
101014f4:	00c40004 	movi	r3,4096
101014f8:	003f4606 	br	10101214 <__alt_data_end+0xfffe1214>
101014fc:	00800044 	movi	r2,1
10101500:	a0800115 	stw	r2,4(r20)
10101504:	003f7406 	br	101012d8 <__alt_data_end+0xfffe12d8>
10101508:	1805d0ba 	srai	r2,r3,2
1010150c:	01c00044 	movi	r7,1
10101510:	30c00117 	ldw	r3,4(r6)
10101514:	388e983a 	sll	r7,r7,r2
10101518:	2805883a 	mov	r2,r5
1010151c:	38c6b03a 	or	r3,r7,r3
10101520:	30c00115 	stw	r3,4(r6)
10101524:	003f9b06 	br	10101394 <__alt_data_end+0xfffe1394>
10101528:	00c15504 	movi	r3,1364
1010152c:	18801a36 	bltu	r3,r2,10101598 <_malloc_r+0x768>
10101530:	8804d4ba 	srli	r2,r17,18
10101534:	12001f44 	addi	r8,r2,125
10101538:	11c01f04 	addi	r7,r2,124
1010153c:	4209883a 	add	r4,r8,r8
10101540:	003e5906 	br	10100ea8 <__alt_data_end+0xfffe0ea8>
10101544:	ad400404 	addi	r21,r21,16
10101548:	003f1706 	br	101011a8 <__alt_data_end+0xfffe11a8>
1010154c:	00c01504 	movi	r3,84
10101550:	18802336 	bltu	r3,r2,101015e0 <_malloc_r+0x7b0>
10101554:	3804d33a 	srli	r2,r7,12
10101558:	11401bc4 	addi	r5,r2,111
1010155c:	10c01b84 	addi	r3,r2,110
10101560:	294b883a 	add	r5,r5,r5
10101564:	003f7b06 	br	10101354 <__alt_data_end+0xfffe1354>
10101568:	9c000217 	ldw	r16,8(r19)
1010156c:	00bfff04 	movi	r2,-4
10101570:	80c00117 	ldw	r3,4(r16)
10101574:	1886703a 	and	r3,r3,r2
10101578:	003f5306 	br	101012c8 <__alt_data_end+0xfffe12c8>
1010157c:	3083ffcc 	andi	r2,r6,4095
10101580:	103f181e 	bne	r2,zero,101011e4 <__alt_data_end+0xfffe11e4>
10101584:	99000217 	ldw	r4,8(r19)
10101588:	b545883a 	add	r2,r22,r21
1010158c:	10800054 	ori	r2,r2,1
10101590:	20800115 	stw	r2,4(r4)
10101594:	003f3e06 	br	10101290 <__alt_data_end+0xfffe1290>
10101598:	01003f84 	movi	r4,254
1010159c:	02001fc4 	movi	r8,127
101015a0:	01c01f84 	movi	r7,126
101015a4:	003e4006 	br	10100ea8 <__alt_data_end+0xfffe0ea8>
101015a8:	00840434 	movhi	r2,4112
101015ac:	109c7204 	addi	r2,r2,29128
101015b0:	15000015 	stw	r20,0(r2)
101015b4:	003f1106 	br	101011fc <__alt_data_end+0xfffe11fc>
101015b8:	00800044 	movi	r2,1
101015bc:	002b883a 	mov	r21,zero
101015c0:	003f1f06 	br	10101240 <__alt_data_end+0xfffe1240>
101015c4:	81400204 	addi	r5,r16,8
101015c8:	9009883a 	mov	r4,r18
101015cc:	01028b80 	call	101028b8 <_free_r>
101015d0:	00840474 	movhi	r2,4113
101015d4:	10a32404 	addi	r2,r2,-29552
101015d8:	10c00017 	ldw	r3,0(r2)
101015dc:	003f2c06 	br	10101290 <__alt_data_end+0xfffe1290>
101015e0:	00c05504 	movi	r3,340
101015e4:	18800536 	bltu	r3,r2,101015fc <_malloc_r+0x7cc>
101015e8:	3804d3fa 	srli	r2,r7,15
101015ec:	11401e04 	addi	r5,r2,120
101015f0:	10c01dc4 	addi	r3,r2,119
101015f4:	294b883a 	add	r5,r5,r5
101015f8:	003f5606 	br	10101354 <__alt_data_end+0xfffe1354>
101015fc:	00c15504 	movi	r3,1364
10101600:	18800536 	bltu	r3,r2,10101618 <_malloc_r+0x7e8>
10101604:	3804d4ba 	srli	r2,r7,18
10101608:	11401f44 	addi	r5,r2,125
1010160c:	10c01f04 	addi	r3,r2,124
10101610:	294b883a 	add	r5,r5,r5
10101614:	003f4f06 	br	10101354 <__alt_data_end+0xfffe1354>
10101618:	01403f84 	movi	r5,254
1010161c:	00c01f84 	movi	r3,126
10101620:	003f4c06 	br	10101354 <__alt_data_end+0xfffe1354>
10101624:	98800117 	ldw	r2,4(r19)
10101628:	003fa006 	br	101014ac <__alt_data_end+0xfffe14ac>
1010162c:	8808d0fa 	srli	r4,r17,3
10101630:	20800044 	addi	r2,r4,1
10101634:	1085883a 	add	r2,r2,r2
10101638:	003e9006 	br	1010107c <__alt_data_end+0xfffe107c>

1010163c <memchr>:
1010163c:	208000cc 	andi	r2,r4,3
10101640:	280f883a 	mov	r7,r5
10101644:	10003426 	beq	r2,zero,10101718 <memchr+0xdc>
10101648:	30bfffc4 	addi	r2,r6,-1
1010164c:	30001a26 	beq	r6,zero,101016b8 <memchr+0x7c>
10101650:	20c00003 	ldbu	r3,0(r4)
10101654:	29803fcc 	andi	r6,r5,255
10101658:	30c0051e 	bne	r6,r3,10101670 <memchr+0x34>
1010165c:	00001806 	br	101016c0 <memchr+0x84>
10101660:	10001526 	beq	r2,zero,101016b8 <memchr+0x7c>
10101664:	20c00003 	ldbu	r3,0(r4)
10101668:	10bfffc4 	addi	r2,r2,-1
1010166c:	30c01426 	beq	r6,r3,101016c0 <memchr+0x84>
10101670:	21000044 	addi	r4,r4,1
10101674:	20c000cc 	andi	r3,r4,3
10101678:	183ff91e 	bne	r3,zero,10101660 <__alt_data_end+0xfffe1660>
1010167c:	020000c4 	movi	r8,3
10101680:	40801136 	bltu	r8,r2,101016c8 <memchr+0x8c>
10101684:	10000c26 	beq	r2,zero,101016b8 <memchr+0x7c>
10101688:	20c00003 	ldbu	r3,0(r4)
1010168c:	29403fcc 	andi	r5,r5,255
10101690:	28c00b26 	beq	r5,r3,101016c0 <memchr+0x84>
10101694:	20c00044 	addi	r3,r4,1
10101698:	39803fcc 	andi	r6,r7,255
1010169c:	2089883a 	add	r4,r4,r2
101016a0:	00000306 	br	101016b0 <memchr+0x74>
101016a4:	18c00044 	addi	r3,r3,1
101016a8:	197fffc3 	ldbu	r5,-1(r3)
101016ac:	31400526 	beq	r6,r5,101016c4 <memchr+0x88>
101016b0:	1805883a 	mov	r2,r3
101016b4:	20fffb1e 	bne	r4,r3,101016a4 <__alt_data_end+0xfffe16a4>
101016b8:	0005883a 	mov	r2,zero
101016bc:	f800283a 	ret
101016c0:	2005883a 	mov	r2,r4
101016c4:	f800283a 	ret
101016c8:	28c03fcc 	andi	r3,r5,255
101016cc:	1812923a 	slli	r9,r3,8
101016d0:	02ffbff4 	movhi	r11,65279
101016d4:	02a02074 	movhi	r10,32897
101016d8:	48d2b03a 	or	r9,r9,r3
101016dc:	4806943a 	slli	r3,r9,16
101016e0:	5affbfc4 	addi	r11,r11,-257
101016e4:	52a02004 	addi	r10,r10,-32640
101016e8:	48d2b03a 	or	r9,r9,r3
101016ec:	20c00017 	ldw	r3,0(r4)
101016f0:	48c6f03a 	xor	r3,r9,r3
101016f4:	1acd883a 	add	r6,r3,r11
101016f8:	00c6303a 	nor	r3,zero,r3
101016fc:	30c6703a 	and	r3,r6,r3
10101700:	1a86703a 	and	r3,r3,r10
10101704:	183fe01e 	bne	r3,zero,10101688 <__alt_data_end+0xfffe1688>
10101708:	10bfff04 	addi	r2,r2,-4
1010170c:	21000104 	addi	r4,r4,4
10101710:	40bff636 	bltu	r8,r2,101016ec <__alt_data_end+0xfffe16ec>
10101714:	003fdb06 	br	10101684 <__alt_data_end+0xfffe1684>
10101718:	3005883a 	mov	r2,r6
1010171c:	003fd706 	br	1010167c <__alt_data_end+0xfffe167c>

10101720 <memcpy>:
10101720:	defffd04 	addi	sp,sp,-12
10101724:	dfc00215 	stw	ra,8(sp)
10101728:	dc400115 	stw	r17,4(sp)
1010172c:	dc000015 	stw	r16,0(sp)
10101730:	00c003c4 	movi	r3,15
10101734:	2005883a 	mov	r2,r4
10101738:	1980452e 	bgeu	r3,r6,10101850 <memcpy+0x130>
1010173c:	2906b03a 	or	r3,r5,r4
10101740:	18c000cc 	andi	r3,r3,3
10101744:	1800441e 	bne	r3,zero,10101858 <memcpy+0x138>
10101748:	347ffc04 	addi	r17,r6,-16
1010174c:	8822d13a 	srli	r17,r17,4
10101750:	28c00104 	addi	r3,r5,4
10101754:	23400104 	addi	r13,r4,4
10101758:	8820913a 	slli	r16,r17,4
1010175c:	2b000204 	addi	r12,r5,8
10101760:	22c00204 	addi	r11,r4,8
10101764:	84000504 	addi	r16,r16,20
10101768:	2a800304 	addi	r10,r5,12
1010176c:	22400304 	addi	r9,r4,12
10101770:	2c21883a 	add	r16,r5,r16
10101774:	2811883a 	mov	r8,r5
10101778:	200f883a 	mov	r7,r4
1010177c:	41000017 	ldw	r4,0(r8)
10101780:	1fc00017 	ldw	ra,0(r3)
10101784:	63c00017 	ldw	r15,0(r12)
10101788:	39000015 	stw	r4,0(r7)
1010178c:	53800017 	ldw	r14,0(r10)
10101790:	6fc00015 	stw	ra,0(r13)
10101794:	5bc00015 	stw	r15,0(r11)
10101798:	4b800015 	stw	r14,0(r9)
1010179c:	18c00404 	addi	r3,r3,16
101017a0:	39c00404 	addi	r7,r7,16
101017a4:	42000404 	addi	r8,r8,16
101017a8:	6b400404 	addi	r13,r13,16
101017ac:	63000404 	addi	r12,r12,16
101017b0:	5ac00404 	addi	r11,r11,16
101017b4:	52800404 	addi	r10,r10,16
101017b8:	4a400404 	addi	r9,r9,16
101017bc:	1c3fef1e 	bne	r3,r16,1010177c <__alt_data_end+0xfffe177c>
101017c0:	89c00044 	addi	r7,r17,1
101017c4:	380e913a 	slli	r7,r7,4
101017c8:	310003cc 	andi	r4,r6,15
101017cc:	02c000c4 	movi	r11,3
101017d0:	11c7883a 	add	r3,r2,r7
101017d4:	29cb883a 	add	r5,r5,r7
101017d8:	5900212e 	bgeu	r11,r4,10101860 <memcpy+0x140>
101017dc:	1813883a 	mov	r9,r3
101017e0:	2811883a 	mov	r8,r5
101017e4:	200f883a 	mov	r7,r4
101017e8:	42800017 	ldw	r10,0(r8)
101017ec:	4a400104 	addi	r9,r9,4
101017f0:	39ffff04 	addi	r7,r7,-4
101017f4:	4abfff15 	stw	r10,-4(r9)
101017f8:	42000104 	addi	r8,r8,4
101017fc:	59fffa36 	bltu	r11,r7,101017e8 <__alt_data_end+0xfffe17e8>
10101800:	213fff04 	addi	r4,r4,-4
10101804:	2008d0ba 	srli	r4,r4,2
10101808:	318000cc 	andi	r6,r6,3
1010180c:	21000044 	addi	r4,r4,1
10101810:	2109883a 	add	r4,r4,r4
10101814:	2109883a 	add	r4,r4,r4
10101818:	1907883a 	add	r3,r3,r4
1010181c:	290b883a 	add	r5,r5,r4
10101820:	30000626 	beq	r6,zero,1010183c <memcpy+0x11c>
10101824:	198d883a 	add	r6,r3,r6
10101828:	29c00003 	ldbu	r7,0(r5)
1010182c:	18c00044 	addi	r3,r3,1
10101830:	29400044 	addi	r5,r5,1
10101834:	19ffffc5 	stb	r7,-1(r3)
10101838:	19bffb1e 	bne	r3,r6,10101828 <__alt_data_end+0xfffe1828>
1010183c:	dfc00217 	ldw	ra,8(sp)
10101840:	dc400117 	ldw	r17,4(sp)
10101844:	dc000017 	ldw	r16,0(sp)
10101848:	dec00304 	addi	sp,sp,12
1010184c:	f800283a 	ret
10101850:	2007883a 	mov	r3,r4
10101854:	003ff206 	br	10101820 <__alt_data_end+0xfffe1820>
10101858:	2007883a 	mov	r3,r4
1010185c:	003ff106 	br	10101824 <__alt_data_end+0xfffe1824>
10101860:	200d883a 	mov	r6,r4
10101864:	003fee06 	br	10101820 <__alt_data_end+0xfffe1820>

10101868 <memmove>:
10101868:	2005883a 	mov	r2,r4
1010186c:	29000b2e 	bgeu	r5,r4,1010189c <memmove+0x34>
10101870:	298f883a 	add	r7,r5,r6
10101874:	21c0092e 	bgeu	r4,r7,1010189c <memmove+0x34>
10101878:	2187883a 	add	r3,r4,r6
1010187c:	198bc83a 	sub	r5,r3,r6
10101880:	30004826 	beq	r6,zero,101019a4 <memmove+0x13c>
10101884:	39ffffc4 	addi	r7,r7,-1
10101888:	39000003 	ldbu	r4,0(r7)
1010188c:	18ffffc4 	addi	r3,r3,-1
10101890:	19000005 	stb	r4,0(r3)
10101894:	28fffb1e 	bne	r5,r3,10101884 <__alt_data_end+0xfffe1884>
10101898:	f800283a 	ret
1010189c:	00c003c4 	movi	r3,15
101018a0:	1980412e 	bgeu	r3,r6,101019a8 <memmove+0x140>
101018a4:	2886b03a 	or	r3,r5,r2
101018a8:	18c000cc 	andi	r3,r3,3
101018ac:	1800401e 	bne	r3,zero,101019b0 <memmove+0x148>
101018b0:	33fffc04 	addi	r15,r6,-16
101018b4:	781ed13a 	srli	r15,r15,4
101018b8:	28c00104 	addi	r3,r5,4
101018bc:	13400104 	addi	r13,r2,4
101018c0:	781c913a 	slli	r14,r15,4
101018c4:	2b000204 	addi	r12,r5,8
101018c8:	12c00204 	addi	r11,r2,8
101018cc:	73800504 	addi	r14,r14,20
101018d0:	2a800304 	addi	r10,r5,12
101018d4:	12400304 	addi	r9,r2,12
101018d8:	2b9d883a 	add	r14,r5,r14
101018dc:	2811883a 	mov	r8,r5
101018e0:	100f883a 	mov	r7,r2
101018e4:	41000017 	ldw	r4,0(r8)
101018e8:	39c00404 	addi	r7,r7,16
101018ec:	18c00404 	addi	r3,r3,16
101018f0:	393ffc15 	stw	r4,-16(r7)
101018f4:	193ffc17 	ldw	r4,-16(r3)
101018f8:	6b400404 	addi	r13,r13,16
101018fc:	5ac00404 	addi	r11,r11,16
10101900:	693ffc15 	stw	r4,-16(r13)
10101904:	61000017 	ldw	r4,0(r12)
10101908:	4a400404 	addi	r9,r9,16
1010190c:	42000404 	addi	r8,r8,16
10101910:	593ffc15 	stw	r4,-16(r11)
10101914:	51000017 	ldw	r4,0(r10)
10101918:	63000404 	addi	r12,r12,16
1010191c:	52800404 	addi	r10,r10,16
10101920:	493ffc15 	stw	r4,-16(r9)
10101924:	1bbfef1e 	bne	r3,r14,101018e4 <__alt_data_end+0xfffe18e4>
10101928:	79000044 	addi	r4,r15,1
1010192c:	2008913a 	slli	r4,r4,4
10101930:	328003cc 	andi	r10,r6,15
10101934:	02c000c4 	movi	r11,3
10101938:	1107883a 	add	r3,r2,r4
1010193c:	290b883a 	add	r5,r5,r4
10101940:	5a801e2e 	bgeu	r11,r10,101019bc <memmove+0x154>
10101944:	1813883a 	mov	r9,r3
10101948:	2811883a 	mov	r8,r5
1010194c:	500f883a 	mov	r7,r10
10101950:	41000017 	ldw	r4,0(r8)
10101954:	4a400104 	addi	r9,r9,4
10101958:	39ffff04 	addi	r7,r7,-4
1010195c:	493fff15 	stw	r4,-4(r9)
10101960:	42000104 	addi	r8,r8,4
10101964:	59fffa36 	bltu	r11,r7,10101950 <__alt_data_end+0xfffe1950>
10101968:	513fff04 	addi	r4,r10,-4
1010196c:	2008d0ba 	srli	r4,r4,2
10101970:	318000cc 	andi	r6,r6,3
10101974:	21000044 	addi	r4,r4,1
10101978:	2109883a 	add	r4,r4,r4
1010197c:	2109883a 	add	r4,r4,r4
10101980:	1907883a 	add	r3,r3,r4
10101984:	290b883a 	add	r5,r5,r4
10101988:	30000b26 	beq	r6,zero,101019b8 <memmove+0x150>
1010198c:	198d883a 	add	r6,r3,r6
10101990:	29c00003 	ldbu	r7,0(r5)
10101994:	18c00044 	addi	r3,r3,1
10101998:	29400044 	addi	r5,r5,1
1010199c:	19ffffc5 	stb	r7,-1(r3)
101019a0:	19bffb1e 	bne	r3,r6,10101990 <__alt_data_end+0xfffe1990>
101019a4:	f800283a 	ret
101019a8:	1007883a 	mov	r3,r2
101019ac:	003ff606 	br	10101988 <__alt_data_end+0xfffe1988>
101019b0:	1007883a 	mov	r3,r2
101019b4:	003ff506 	br	1010198c <__alt_data_end+0xfffe198c>
101019b8:	f800283a 	ret
101019bc:	500d883a 	mov	r6,r10
101019c0:	003ff106 	br	10101988 <__alt_data_end+0xfffe1988>

101019c4 <memset>:
101019c4:	20c000cc 	andi	r3,r4,3
101019c8:	2005883a 	mov	r2,r4
101019cc:	18004426 	beq	r3,zero,10101ae0 <memset+0x11c>
101019d0:	31ffffc4 	addi	r7,r6,-1
101019d4:	30004026 	beq	r6,zero,10101ad8 <memset+0x114>
101019d8:	2813883a 	mov	r9,r5
101019dc:	200d883a 	mov	r6,r4
101019e0:	2007883a 	mov	r3,r4
101019e4:	00000406 	br	101019f8 <memset+0x34>
101019e8:	3a3fffc4 	addi	r8,r7,-1
101019ec:	31800044 	addi	r6,r6,1
101019f0:	38003926 	beq	r7,zero,10101ad8 <memset+0x114>
101019f4:	400f883a 	mov	r7,r8
101019f8:	18c00044 	addi	r3,r3,1
101019fc:	32400005 	stb	r9,0(r6)
10101a00:	1a0000cc 	andi	r8,r3,3
10101a04:	403ff81e 	bne	r8,zero,101019e8 <__alt_data_end+0xfffe19e8>
10101a08:	010000c4 	movi	r4,3
10101a0c:	21c02d2e 	bgeu	r4,r7,10101ac4 <memset+0x100>
10101a10:	29003fcc 	andi	r4,r5,255
10101a14:	200c923a 	slli	r6,r4,8
10101a18:	3108b03a 	or	r4,r6,r4
10101a1c:	200c943a 	slli	r6,r4,16
10101a20:	218cb03a 	or	r6,r4,r6
10101a24:	010003c4 	movi	r4,15
10101a28:	21c0182e 	bgeu	r4,r7,10101a8c <memset+0xc8>
10101a2c:	3b3ffc04 	addi	r12,r7,-16
10101a30:	6018d13a 	srli	r12,r12,4
10101a34:	1a000104 	addi	r8,r3,4
10101a38:	1ac00204 	addi	r11,r3,8
10101a3c:	6008913a 	slli	r4,r12,4
10101a40:	1a800304 	addi	r10,r3,12
10101a44:	1813883a 	mov	r9,r3
10101a48:	21000504 	addi	r4,r4,20
10101a4c:	1909883a 	add	r4,r3,r4
10101a50:	49800015 	stw	r6,0(r9)
10101a54:	41800015 	stw	r6,0(r8)
10101a58:	59800015 	stw	r6,0(r11)
10101a5c:	51800015 	stw	r6,0(r10)
10101a60:	42000404 	addi	r8,r8,16
10101a64:	4a400404 	addi	r9,r9,16
10101a68:	5ac00404 	addi	r11,r11,16
10101a6c:	52800404 	addi	r10,r10,16
10101a70:	413ff71e 	bne	r8,r4,10101a50 <__alt_data_end+0xfffe1a50>
10101a74:	63000044 	addi	r12,r12,1
10101a78:	6018913a 	slli	r12,r12,4
10101a7c:	39c003cc 	andi	r7,r7,15
10101a80:	010000c4 	movi	r4,3
10101a84:	1b07883a 	add	r3,r3,r12
10101a88:	21c00e2e 	bgeu	r4,r7,10101ac4 <memset+0x100>
10101a8c:	1813883a 	mov	r9,r3
10101a90:	3811883a 	mov	r8,r7
10101a94:	010000c4 	movi	r4,3
10101a98:	49800015 	stw	r6,0(r9)
10101a9c:	423fff04 	addi	r8,r8,-4
10101aa0:	4a400104 	addi	r9,r9,4
10101aa4:	223ffc36 	bltu	r4,r8,10101a98 <__alt_data_end+0xfffe1a98>
10101aa8:	393fff04 	addi	r4,r7,-4
10101aac:	2008d0ba 	srli	r4,r4,2
10101ab0:	39c000cc 	andi	r7,r7,3
10101ab4:	21000044 	addi	r4,r4,1
10101ab8:	2109883a 	add	r4,r4,r4
10101abc:	2109883a 	add	r4,r4,r4
10101ac0:	1907883a 	add	r3,r3,r4
10101ac4:	38000526 	beq	r7,zero,10101adc <memset+0x118>
10101ac8:	19cf883a 	add	r7,r3,r7
10101acc:	19400005 	stb	r5,0(r3)
10101ad0:	18c00044 	addi	r3,r3,1
10101ad4:	38fffd1e 	bne	r7,r3,10101acc <__alt_data_end+0xfffe1acc>
10101ad8:	f800283a 	ret
10101adc:	f800283a 	ret
10101ae0:	2007883a 	mov	r3,r4
10101ae4:	300f883a 	mov	r7,r6
10101ae8:	003fc706 	br	10101a08 <__alt_data_end+0xfffe1a08>

10101aec <_realloc_r>:
10101aec:	defff604 	addi	sp,sp,-40
10101af0:	dc800215 	stw	r18,8(sp)
10101af4:	dfc00915 	stw	ra,36(sp)
10101af8:	df000815 	stw	fp,32(sp)
10101afc:	ddc00715 	stw	r23,28(sp)
10101b00:	dd800615 	stw	r22,24(sp)
10101b04:	dd400515 	stw	r21,20(sp)
10101b08:	dd000415 	stw	r20,16(sp)
10101b0c:	dcc00315 	stw	r19,12(sp)
10101b10:	dc400115 	stw	r17,4(sp)
10101b14:	dc000015 	stw	r16,0(sp)
10101b18:	3025883a 	mov	r18,r6
10101b1c:	2800b726 	beq	r5,zero,10101dfc <_realloc_r+0x310>
10101b20:	282b883a 	mov	r21,r5
10101b24:	2029883a 	mov	r20,r4
10101b28:	01036240 	call	10103624 <__malloc_lock>
10101b2c:	a8bfff17 	ldw	r2,-4(r21)
10101b30:	043fff04 	movi	r16,-4
10101b34:	90c002c4 	addi	r3,r18,11
10101b38:	01000584 	movi	r4,22
10101b3c:	acfffe04 	addi	r19,r21,-8
10101b40:	1420703a 	and	r16,r2,r16
10101b44:	20c0332e 	bgeu	r4,r3,10101c14 <_realloc_r+0x128>
10101b48:	047ffe04 	movi	r17,-8
10101b4c:	1c62703a 	and	r17,r3,r17
10101b50:	8807883a 	mov	r3,r17
10101b54:	88005816 	blt	r17,zero,10101cb8 <_realloc_r+0x1cc>
10101b58:	8c805736 	bltu	r17,r18,10101cb8 <_realloc_r+0x1cc>
10101b5c:	80c0300e 	bge	r16,r3,10101c20 <_realloc_r+0x134>
10101b60:	07040434 	movhi	fp,4112
10101b64:	e716ec04 	addi	fp,fp,23472
10101b68:	e1c00217 	ldw	r7,8(fp)
10101b6c:	9c09883a 	add	r4,r19,r16
10101b70:	22000117 	ldw	r8,4(r4)
10101b74:	21c06326 	beq	r4,r7,10101d04 <_realloc_r+0x218>
10101b78:	017fff84 	movi	r5,-2
10101b7c:	414a703a 	and	r5,r8,r5
10101b80:	214b883a 	add	r5,r4,r5
10101b84:	29800117 	ldw	r6,4(r5)
10101b88:	3180004c 	andi	r6,r6,1
10101b8c:	30003f26 	beq	r6,zero,10101c8c <_realloc_r+0x1a0>
10101b90:	1080004c 	andi	r2,r2,1
10101b94:	10008326 	beq	r2,zero,10101da4 <_realloc_r+0x2b8>
10101b98:	900b883a 	mov	r5,r18
10101b9c:	a009883a 	mov	r4,r20
10101ba0:	0100e300 	call	10100e30 <_malloc_r>
10101ba4:	1025883a 	mov	r18,r2
10101ba8:	10011e26 	beq	r2,zero,10102024 <_realloc_r+0x538>
10101bac:	a93fff17 	ldw	r4,-4(r21)
10101bb0:	10fffe04 	addi	r3,r2,-8
10101bb4:	00bfff84 	movi	r2,-2
10101bb8:	2084703a 	and	r2,r4,r2
10101bbc:	9885883a 	add	r2,r19,r2
10101bc0:	1880ee26 	beq	r3,r2,10101f7c <_realloc_r+0x490>
10101bc4:	81bfff04 	addi	r6,r16,-4
10101bc8:	00800904 	movi	r2,36
10101bcc:	1180b836 	bltu	r2,r6,10101eb0 <_realloc_r+0x3c4>
10101bd0:	00c004c4 	movi	r3,19
10101bd4:	19809636 	bltu	r3,r6,10101e30 <_realloc_r+0x344>
10101bd8:	9005883a 	mov	r2,r18
10101bdc:	a807883a 	mov	r3,r21
10101be0:	19000017 	ldw	r4,0(r3)
10101be4:	11000015 	stw	r4,0(r2)
10101be8:	19000117 	ldw	r4,4(r3)
10101bec:	11000115 	stw	r4,4(r2)
10101bf0:	18c00217 	ldw	r3,8(r3)
10101bf4:	10c00215 	stw	r3,8(r2)
10101bf8:	a80b883a 	mov	r5,r21
10101bfc:	a009883a 	mov	r4,r20
10101c00:	01028b80 	call	101028b8 <_free_r>
10101c04:	a009883a 	mov	r4,r20
10101c08:	01036480 	call	10103648 <__malloc_unlock>
10101c0c:	9005883a 	mov	r2,r18
10101c10:	00001206 	br	10101c5c <_realloc_r+0x170>
10101c14:	00c00404 	movi	r3,16
10101c18:	1823883a 	mov	r17,r3
10101c1c:	003fce06 	br	10101b58 <__alt_data_end+0xfffe1b58>
10101c20:	a825883a 	mov	r18,r21
10101c24:	8445c83a 	sub	r2,r16,r17
10101c28:	00c003c4 	movi	r3,15
10101c2c:	18802636 	bltu	r3,r2,10101cc8 <_realloc_r+0x1dc>
10101c30:	99800117 	ldw	r6,4(r19)
10101c34:	9c07883a 	add	r3,r19,r16
10101c38:	3180004c 	andi	r6,r6,1
10101c3c:	3420b03a 	or	r16,r6,r16
10101c40:	9c000115 	stw	r16,4(r19)
10101c44:	18800117 	ldw	r2,4(r3)
10101c48:	10800054 	ori	r2,r2,1
10101c4c:	18800115 	stw	r2,4(r3)
10101c50:	a009883a 	mov	r4,r20
10101c54:	01036480 	call	10103648 <__malloc_unlock>
10101c58:	9005883a 	mov	r2,r18
10101c5c:	dfc00917 	ldw	ra,36(sp)
10101c60:	df000817 	ldw	fp,32(sp)
10101c64:	ddc00717 	ldw	r23,28(sp)
10101c68:	dd800617 	ldw	r22,24(sp)
10101c6c:	dd400517 	ldw	r21,20(sp)
10101c70:	dd000417 	ldw	r20,16(sp)
10101c74:	dcc00317 	ldw	r19,12(sp)
10101c78:	dc800217 	ldw	r18,8(sp)
10101c7c:	dc400117 	ldw	r17,4(sp)
10101c80:	dc000017 	ldw	r16,0(sp)
10101c84:	dec00a04 	addi	sp,sp,40
10101c88:	f800283a 	ret
10101c8c:	017fff04 	movi	r5,-4
10101c90:	414a703a 	and	r5,r8,r5
10101c94:	814d883a 	add	r6,r16,r5
10101c98:	30c01f16 	blt	r6,r3,10101d18 <_realloc_r+0x22c>
10101c9c:	20800317 	ldw	r2,12(r4)
10101ca0:	20c00217 	ldw	r3,8(r4)
10101ca4:	a825883a 	mov	r18,r21
10101ca8:	3021883a 	mov	r16,r6
10101cac:	18800315 	stw	r2,12(r3)
10101cb0:	10c00215 	stw	r3,8(r2)
10101cb4:	003fdb06 	br	10101c24 <__alt_data_end+0xfffe1c24>
10101cb8:	00800304 	movi	r2,12
10101cbc:	a0800015 	stw	r2,0(r20)
10101cc0:	0005883a 	mov	r2,zero
10101cc4:	003fe506 	br	10101c5c <__alt_data_end+0xfffe1c5c>
10101cc8:	98c00117 	ldw	r3,4(r19)
10101ccc:	9c4b883a 	add	r5,r19,r17
10101cd0:	11000054 	ori	r4,r2,1
10101cd4:	18c0004c 	andi	r3,r3,1
10101cd8:	1c62b03a 	or	r17,r3,r17
10101cdc:	9c400115 	stw	r17,4(r19)
10101ce0:	29000115 	stw	r4,4(r5)
10101ce4:	2885883a 	add	r2,r5,r2
10101ce8:	10c00117 	ldw	r3,4(r2)
10101cec:	29400204 	addi	r5,r5,8
10101cf0:	a009883a 	mov	r4,r20
10101cf4:	18c00054 	ori	r3,r3,1
10101cf8:	10c00115 	stw	r3,4(r2)
10101cfc:	01028b80 	call	101028b8 <_free_r>
10101d00:	003fd306 	br	10101c50 <__alt_data_end+0xfffe1c50>
10101d04:	017fff04 	movi	r5,-4
10101d08:	414a703a 	and	r5,r8,r5
10101d0c:	89800404 	addi	r6,r17,16
10101d10:	8151883a 	add	r8,r16,r5
10101d14:	4180590e 	bge	r8,r6,10101e7c <_realloc_r+0x390>
10101d18:	1080004c 	andi	r2,r2,1
10101d1c:	103f9e1e 	bne	r2,zero,10101b98 <__alt_data_end+0xfffe1b98>
10101d20:	adbffe17 	ldw	r22,-8(r21)
10101d24:	00bfff04 	movi	r2,-4
10101d28:	9dadc83a 	sub	r22,r19,r22
10101d2c:	b1800117 	ldw	r6,4(r22)
10101d30:	3084703a 	and	r2,r6,r2
10101d34:	20002026 	beq	r4,zero,10101db8 <_realloc_r+0x2cc>
10101d38:	80af883a 	add	r23,r16,r2
10101d3c:	b96f883a 	add	r23,r23,r5
10101d40:	21c05f26 	beq	r4,r7,10101ec0 <_realloc_r+0x3d4>
10101d44:	b8c01c16 	blt	r23,r3,10101db8 <_realloc_r+0x2cc>
10101d48:	20800317 	ldw	r2,12(r4)
10101d4c:	20c00217 	ldw	r3,8(r4)
10101d50:	81bfff04 	addi	r6,r16,-4
10101d54:	01000904 	movi	r4,36
10101d58:	18800315 	stw	r2,12(r3)
10101d5c:	10c00215 	stw	r3,8(r2)
10101d60:	b0c00217 	ldw	r3,8(r22)
10101d64:	b0800317 	ldw	r2,12(r22)
10101d68:	b4800204 	addi	r18,r22,8
10101d6c:	18800315 	stw	r2,12(r3)
10101d70:	10c00215 	stw	r3,8(r2)
10101d74:	21801b36 	bltu	r4,r6,10101de4 <_realloc_r+0x2f8>
10101d78:	008004c4 	movi	r2,19
10101d7c:	1180352e 	bgeu	r2,r6,10101e54 <_realloc_r+0x368>
10101d80:	a8800017 	ldw	r2,0(r21)
10101d84:	b0800215 	stw	r2,8(r22)
10101d88:	a8800117 	ldw	r2,4(r21)
10101d8c:	b0800315 	stw	r2,12(r22)
10101d90:	008006c4 	movi	r2,27
10101d94:	11807f36 	bltu	r2,r6,10101f94 <_realloc_r+0x4a8>
10101d98:	b0800404 	addi	r2,r22,16
10101d9c:	ad400204 	addi	r21,r21,8
10101da0:	00002d06 	br	10101e58 <_realloc_r+0x36c>
10101da4:	adbffe17 	ldw	r22,-8(r21)
10101da8:	00bfff04 	movi	r2,-4
10101dac:	9dadc83a 	sub	r22,r19,r22
10101db0:	b1000117 	ldw	r4,4(r22)
10101db4:	2084703a 	and	r2,r4,r2
10101db8:	b03f7726 	beq	r22,zero,10101b98 <__alt_data_end+0xfffe1b98>
10101dbc:	80af883a 	add	r23,r16,r2
10101dc0:	b8ff7516 	blt	r23,r3,10101b98 <__alt_data_end+0xfffe1b98>
10101dc4:	b0800317 	ldw	r2,12(r22)
10101dc8:	b0c00217 	ldw	r3,8(r22)
10101dcc:	81bfff04 	addi	r6,r16,-4
10101dd0:	01000904 	movi	r4,36
10101dd4:	18800315 	stw	r2,12(r3)
10101dd8:	10c00215 	stw	r3,8(r2)
10101ddc:	b4800204 	addi	r18,r22,8
10101de0:	21bfe52e 	bgeu	r4,r6,10101d78 <__alt_data_end+0xfffe1d78>
10101de4:	a80b883a 	mov	r5,r21
10101de8:	9009883a 	mov	r4,r18
10101dec:	01018680 	call	10101868 <memmove>
10101df0:	b821883a 	mov	r16,r23
10101df4:	b027883a 	mov	r19,r22
10101df8:	003f8a06 	br	10101c24 <__alt_data_end+0xfffe1c24>
10101dfc:	300b883a 	mov	r5,r6
10101e00:	dfc00917 	ldw	ra,36(sp)
10101e04:	df000817 	ldw	fp,32(sp)
10101e08:	ddc00717 	ldw	r23,28(sp)
10101e0c:	dd800617 	ldw	r22,24(sp)
10101e10:	dd400517 	ldw	r21,20(sp)
10101e14:	dd000417 	ldw	r20,16(sp)
10101e18:	dcc00317 	ldw	r19,12(sp)
10101e1c:	dc800217 	ldw	r18,8(sp)
10101e20:	dc400117 	ldw	r17,4(sp)
10101e24:	dc000017 	ldw	r16,0(sp)
10101e28:	dec00a04 	addi	sp,sp,40
10101e2c:	0100e301 	jmpi	10100e30 <_malloc_r>
10101e30:	a8c00017 	ldw	r3,0(r21)
10101e34:	90c00015 	stw	r3,0(r18)
10101e38:	a8c00117 	ldw	r3,4(r21)
10101e3c:	90c00115 	stw	r3,4(r18)
10101e40:	00c006c4 	movi	r3,27
10101e44:	19804536 	bltu	r3,r6,10101f5c <_realloc_r+0x470>
10101e48:	90800204 	addi	r2,r18,8
10101e4c:	a8c00204 	addi	r3,r21,8
10101e50:	003f6306 	br	10101be0 <__alt_data_end+0xfffe1be0>
10101e54:	9005883a 	mov	r2,r18
10101e58:	a8c00017 	ldw	r3,0(r21)
10101e5c:	b821883a 	mov	r16,r23
10101e60:	b027883a 	mov	r19,r22
10101e64:	10c00015 	stw	r3,0(r2)
10101e68:	a8c00117 	ldw	r3,4(r21)
10101e6c:	10c00115 	stw	r3,4(r2)
10101e70:	a8c00217 	ldw	r3,8(r21)
10101e74:	10c00215 	stw	r3,8(r2)
10101e78:	003f6a06 	br	10101c24 <__alt_data_end+0xfffe1c24>
10101e7c:	9c67883a 	add	r19,r19,r17
10101e80:	4445c83a 	sub	r2,r8,r17
10101e84:	e4c00215 	stw	r19,8(fp)
10101e88:	10800054 	ori	r2,r2,1
10101e8c:	98800115 	stw	r2,4(r19)
10101e90:	a8bfff17 	ldw	r2,-4(r21)
10101e94:	a009883a 	mov	r4,r20
10101e98:	1080004c 	andi	r2,r2,1
10101e9c:	1462b03a 	or	r17,r2,r17
10101ea0:	ac7fff15 	stw	r17,-4(r21)
10101ea4:	01036480 	call	10103648 <__malloc_unlock>
10101ea8:	a805883a 	mov	r2,r21
10101eac:	003f6b06 	br	10101c5c <__alt_data_end+0xfffe1c5c>
10101eb0:	a80b883a 	mov	r5,r21
10101eb4:	9009883a 	mov	r4,r18
10101eb8:	01018680 	call	10101868 <memmove>
10101ebc:	003f4e06 	br	10101bf8 <__alt_data_end+0xfffe1bf8>
10101ec0:	89000404 	addi	r4,r17,16
10101ec4:	b93fbc16 	blt	r23,r4,10101db8 <__alt_data_end+0xfffe1db8>
10101ec8:	b0800317 	ldw	r2,12(r22)
10101ecc:	b0c00217 	ldw	r3,8(r22)
10101ed0:	81bfff04 	addi	r6,r16,-4
10101ed4:	01000904 	movi	r4,36
10101ed8:	18800315 	stw	r2,12(r3)
10101edc:	10c00215 	stw	r3,8(r2)
10101ee0:	b4800204 	addi	r18,r22,8
10101ee4:	21804336 	bltu	r4,r6,10101ff4 <_realloc_r+0x508>
10101ee8:	008004c4 	movi	r2,19
10101eec:	11803f2e 	bgeu	r2,r6,10101fec <_realloc_r+0x500>
10101ef0:	a8800017 	ldw	r2,0(r21)
10101ef4:	b0800215 	stw	r2,8(r22)
10101ef8:	a8800117 	ldw	r2,4(r21)
10101efc:	b0800315 	stw	r2,12(r22)
10101f00:	008006c4 	movi	r2,27
10101f04:	11803f36 	bltu	r2,r6,10102004 <_realloc_r+0x518>
10101f08:	b0800404 	addi	r2,r22,16
10101f0c:	ad400204 	addi	r21,r21,8
10101f10:	a8c00017 	ldw	r3,0(r21)
10101f14:	10c00015 	stw	r3,0(r2)
10101f18:	a8c00117 	ldw	r3,4(r21)
10101f1c:	10c00115 	stw	r3,4(r2)
10101f20:	a8c00217 	ldw	r3,8(r21)
10101f24:	10c00215 	stw	r3,8(r2)
10101f28:	b447883a 	add	r3,r22,r17
10101f2c:	bc45c83a 	sub	r2,r23,r17
10101f30:	e0c00215 	stw	r3,8(fp)
10101f34:	10800054 	ori	r2,r2,1
10101f38:	18800115 	stw	r2,4(r3)
10101f3c:	b0800117 	ldw	r2,4(r22)
10101f40:	a009883a 	mov	r4,r20
10101f44:	1080004c 	andi	r2,r2,1
10101f48:	1462b03a 	or	r17,r2,r17
10101f4c:	b4400115 	stw	r17,4(r22)
10101f50:	01036480 	call	10103648 <__malloc_unlock>
10101f54:	9005883a 	mov	r2,r18
10101f58:	003f4006 	br	10101c5c <__alt_data_end+0xfffe1c5c>
10101f5c:	a8c00217 	ldw	r3,8(r21)
10101f60:	90c00215 	stw	r3,8(r18)
10101f64:	a8c00317 	ldw	r3,12(r21)
10101f68:	90c00315 	stw	r3,12(r18)
10101f6c:	30801126 	beq	r6,r2,10101fb4 <_realloc_r+0x4c8>
10101f70:	90800404 	addi	r2,r18,16
10101f74:	a8c00404 	addi	r3,r21,16
10101f78:	003f1906 	br	10101be0 <__alt_data_end+0xfffe1be0>
10101f7c:	90ffff17 	ldw	r3,-4(r18)
10101f80:	00bfff04 	movi	r2,-4
10101f84:	a825883a 	mov	r18,r21
10101f88:	1884703a 	and	r2,r3,r2
10101f8c:	80a1883a 	add	r16,r16,r2
10101f90:	003f2406 	br	10101c24 <__alt_data_end+0xfffe1c24>
10101f94:	a8800217 	ldw	r2,8(r21)
10101f98:	b0800415 	stw	r2,16(r22)
10101f9c:	a8800317 	ldw	r2,12(r21)
10101fa0:	b0800515 	stw	r2,20(r22)
10101fa4:	31000a26 	beq	r6,r4,10101fd0 <_realloc_r+0x4e4>
10101fa8:	b0800604 	addi	r2,r22,24
10101fac:	ad400404 	addi	r21,r21,16
10101fb0:	003fa906 	br	10101e58 <__alt_data_end+0xfffe1e58>
10101fb4:	a9000417 	ldw	r4,16(r21)
10101fb8:	90800604 	addi	r2,r18,24
10101fbc:	a8c00604 	addi	r3,r21,24
10101fc0:	91000415 	stw	r4,16(r18)
10101fc4:	a9000517 	ldw	r4,20(r21)
10101fc8:	91000515 	stw	r4,20(r18)
10101fcc:	003f0406 	br	10101be0 <__alt_data_end+0xfffe1be0>
10101fd0:	a8c00417 	ldw	r3,16(r21)
10101fd4:	ad400604 	addi	r21,r21,24
10101fd8:	b0800804 	addi	r2,r22,32
10101fdc:	b0c00615 	stw	r3,24(r22)
10101fe0:	a8ffff17 	ldw	r3,-4(r21)
10101fe4:	b0c00715 	stw	r3,28(r22)
10101fe8:	003f9b06 	br	10101e58 <__alt_data_end+0xfffe1e58>
10101fec:	9005883a 	mov	r2,r18
10101ff0:	003fc706 	br	10101f10 <__alt_data_end+0xfffe1f10>
10101ff4:	a80b883a 	mov	r5,r21
10101ff8:	9009883a 	mov	r4,r18
10101ffc:	01018680 	call	10101868 <memmove>
10102000:	003fc906 	br	10101f28 <__alt_data_end+0xfffe1f28>
10102004:	a8800217 	ldw	r2,8(r21)
10102008:	b0800415 	stw	r2,16(r22)
1010200c:	a8800317 	ldw	r2,12(r21)
10102010:	b0800515 	stw	r2,20(r22)
10102014:	31000726 	beq	r6,r4,10102034 <_realloc_r+0x548>
10102018:	b0800604 	addi	r2,r22,24
1010201c:	ad400404 	addi	r21,r21,16
10102020:	003fbb06 	br	10101f10 <__alt_data_end+0xfffe1f10>
10102024:	a009883a 	mov	r4,r20
10102028:	01036480 	call	10103648 <__malloc_unlock>
1010202c:	0005883a 	mov	r2,zero
10102030:	003f0a06 	br	10101c5c <__alt_data_end+0xfffe1c5c>
10102034:	a8c00417 	ldw	r3,16(r21)
10102038:	ad400604 	addi	r21,r21,24
1010203c:	b0800804 	addi	r2,r22,32
10102040:	b0c00615 	stw	r3,24(r22)
10102044:	a8ffff17 	ldw	r3,-4(r21)
10102048:	b0c00715 	stw	r3,28(r22)
1010204c:	003fb006 	br	10101f10 <__alt_data_end+0xfffe1f10>

10102050 <_sbrk_r>:
10102050:	defffd04 	addi	sp,sp,-12
10102054:	dc000015 	stw	r16,0(sp)
10102058:	04040474 	movhi	r16,4113
1010205c:	dc400115 	stw	r17,4(sp)
10102060:	84231c04 	addi	r16,r16,-29584
10102064:	2023883a 	mov	r17,r4
10102068:	2809883a 	mov	r4,r5
1010206c:	dfc00215 	stw	ra,8(sp)
10102070:	80000015 	stw	zero,0(r16)
10102074:	01038080 	call	10103808 <sbrk>
10102078:	00ffffc4 	movi	r3,-1
1010207c:	10c00526 	beq	r2,r3,10102094 <_sbrk_r+0x44>
10102080:	dfc00217 	ldw	ra,8(sp)
10102084:	dc400117 	ldw	r17,4(sp)
10102088:	dc000017 	ldw	r16,0(sp)
1010208c:	dec00304 	addi	sp,sp,12
10102090:	f800283a 	ret
10102094:	80c00017 	ldw	r3,0(r16)
10102098:	183ff926 	beq	r3,zero,10102080 <__alt_data_end+0xfffe2080>
1010209c:	88c00015 	stw	r3,0(r17)
101020a0:	003ff706 	br	10102080 <__alt_data_end+0xfffe2080>

101020a4 <__sread>:
101020a4:	defffe04 	addi	sp,sp,-8
101020a8:	dc000015 	stw	r16,0(sp)
101020ac:	2821883a 	mov	r16,r5
101020b0:	2940038f 	ldh	r5,14(r5)
101020b4:	dfc00115 	stw	ra,4(sp)
101020b8:	0102de40 	call	10102de4 <_read_r>
101020bc:	10000716 	blt	r2,zero,101020dc <__sread+0x38>
101020c0:	80c01417 	ldw	r3,80(r16)
101020c4:	1887883a 	add	r3,r3,r2
101020c8:	80c01415 	stw	r3,80(r16)
101020cc:	dfc00117 	ldw	ra,4(sp)
101020d0:	dc000017 	ldw	r16,0(sp)
101020d4:	dec00204 	addi	sp,sp,8
101020d8:	f800283a 	ret
101020dc:	80c0030b 	ldhu	r3,12(r16)
101020e0:	18fbffcc 	andi	r3,r3,61439
101020e4:	80c0030d 	sth	r3,12(r16)
101020e8:	dfc00117 	ldw	ra,4(sp)
101020ec:	dc000017 	ldw	r16,0(sp)
101020f0:	dec00204 	addi	sp,sp,8
101020f4:	f800283a 	ret

101020f8 <__seofread>:
101020f8:	0005883a 	mov	r2,zero
101020fc:	f800283a 	ret

10102100 <__swrite>:
10102100:	2880030b 	ldhu	r2,12(r5)
10102104:	defffb04 	addi	sp,sp,-20
10102108:	dcc00315 	stw	r19,12(sp)
1010210c:	dc800215 	stw	r18,8(sp)
10102110:	dc400115 	stw	r17,4(sp)
10102114:	dc000015 	stw	r16,0(sp)
10102118:	dfc00415 	stw	ra,16(sp)
1010211c:	10c0400c 	andi	r3,r2,256
10102120:	2821883a 	mov	r16,r5
10102124:	2023883a 	mov	r17,r4
10102128:	3025883a 	mov	r18,r6
1010212c:	3827883a 	mov	r19,r7
10102130:	18000526 	beq	r3,zero,10102148 <__swrite+0x48>
10102134:	2940038f 	ldh	r5,14(r5)
10102138:	01c00084 	movi	r7,2
1010213c:	000d883a 	mov	r6,zero
10102140:	0102bc80 	call	10102bc8 <_lseek_r>
10102144:	8080030b 	ldhu	r2,12(r16)
10102148:	8140038f 	ldh	r5,14(r16)
1010214c:	10bbffcc 	andi	r2,r2,61439
10102150:	980f883a 	mov	r7,r19
10102154:	900d883a 	mov	r6,r18
10102158:	8809883a 	mov	r4,r17
1010215c:	8080030d 	sth	r2,12(r16)
10102160:	dfc00417 	ldw	ra,16(sp)
10102164:	dcc00317 	ldw	r19,12(sp)
10102168:	dc800217 	ldw	r18,8(sp)
1010216c:	dc400117 	ldw	r17,4(sp)
10102170:	dc000017 	ldw	r16,0(sp)
10102174:	dec00504 	addi	sp,sp,20
10102178:	01021e01 	jmpi	101021e0 <_write_r>

1010217c <__sseek>:
1010217c:	defffe04 	addi	sp,sp,-8
10102180:	dc000015 	stw	r16,0(sp)
10102184:	2821883a 	mov	r16,r5
10102188:	2940038f 	ldh	r5,14(r5)
1010218c:	dfc00115 	stw	ra,4(sp)
10102190:	0102bc80 	call	10102bc8 <_lseek_r>
10102194:	00ffffc4 	movi	r3,-1
10102198:	10c00826 	beq	r2,r3,101021bc <__sseek+0x40>
1010219c:	80c0030b 	ldhu	r3,12(r16)
101021a0:	80801415 	stw	r2,80(r16)
101021a4:	18c40014 	ori	r3,r3,4096
101021a8:	80c0030d 	sth	r3,12(r16)
101021ac:	dfc00117 	ldw	ra,4(sp)
101021b0:	dc000017 	ldw	r16,0(sp)
101021b4:	dec00204 	addi	sp,sp,8
101021b8:	f800283a 	ret
101021bc:	80c0030b 	ldhu	r3,12(r16)
101021c0:	18fbffcc 	andi	r3,r3,61439
101021c4:	80c0030d 	sth	r3,12(r16)
101021c8:	dfc00117 	ldw	ra,4(sp)
101021cc:	dc000017 	ldw	r16,0(sp)
101021d0:	dec00204 	addi	sp,sp,8
101021d4:	f800283a 	ret

101021d8 <__sclose>:
101021d8:	2940038f 	ldh	r5,14(r5)
101021dc:	01023941 	jmpi	10102394 <_close_r>

101021e0 <_write_r>:
101021e0:	defffd04 	addi	sp,sp,-12
101021e4:	2805883a 	mov	r2,r5
101021e8:	dc000015 	stw	r16,0(sp)
101021ec:	04040474 	movhi	r16,4113
101021f0:	dc400115 	stw	r17,4(sp)
101021f4:	300b883a 	mov	r5,r6
101021f8:	84231c04 	addi	r16,r16,-29584
101021fc:	2023883a 	mov	r17,r4
10102200:	380d883a 	mov	r6,r7
10102204:	1009883a 	mov	r4,r2
10102208:	dfc00215 	stw	ra,8(sp)
1010220c:	80000015 	stw	zero,0(r16)
10102210:	01038f40 	call	101038f4 <write>
10102214:	00ffffc4 	movi	r3,-1
10102218:	10c00526 	beq	r2,r3,10102230 <_write_r+0x50>
1010221c:	dfc00217 	ldw	ra,8(sp)
10102220:	dc400117 	ldw	r17,4(sp)
10102224:	dc000017 	ldw	r16,0(sp)
10102228:	dec00304 	addi	sp,sp,12
1010222c:	f800283a 	ret
10102230:	80c00017 	ldw	r3,0(r16)
10102234:	183ff926 	beq	r3,zero,1010221c <__alt_data_end+0xfffe221c>
10102238:	88c00015 	stw	r3,0(r17)
1010223c:	003ff706 	br	1010221c <__alt_data_end+0xfffe221c>

10102240 <__swsetup_r>:
10102240:	00840434 	movhi	r2,4112
10102244:	defffd04 	addi	sp,sp,-12
10102248:	109c7104 	addi	r2,r2,29124
1010224c:	dc400115 	stw	r17,4(sp)
10102250:	2023883a 	mov	r17,r4
10102254:	11000017 	ldw	r4,0(r2)
10102258:	dc000015 	stw	r16,0(sp)
1010225c:	dfc00215 	stw	ra,8(sp)
10102260:	2821883a 	mov	r16,r5
10102264:	20000226 	beq	r4,zero,10102270 <__swsetup_r+0x30>
10102268:	20800e17 	ldw	r2,56(r4)
1010226c:	10003126 	beq	r2,zero,10102334 <__swsetup_r+0xf4>
10102270:	8080030b 	ldhu	r2,12(r16)
10102274:	10c0020c 	andi	r3,r2,8
10102278:	1009883a 	mov	r4,r2
1010227c:	18000f26 	beq	r3,zero,101022bc <__swsetup_r+0x7c>
10102280:	80c00417 	ldw	r3,16(r16)
10102284:	18001526 	beq	r3,zero,101022dc <__swsetup_r+0x9c>
10102288:	1100004c 	andi	r4,r2,1
1010228c:	20001c1e 	bne	r4,zero,10102300 <__swsetup_r+0xc0>
10102290:	1080008c 	andi	r2,r2,2
10102294:	1000291e 	bne	r2,zero,1010233c <__swsetup_r+0xfc>
10102298:	80800517 	ldw	r2,20(r16)
1010229c:	80800215 	stw	r2,8(r16)
101022a0:	18001c26 	beq	r3,zero,10102314 <__swsetup_r+0xd4>
101022a4:	0005883a 	mov	r2,zero
101022a8:	dfc00217 	ldw	ra,8(sp)
101022ac:	dc400117 	ldw	r17,4(sp)
101022b0:	dc000017 	ldw	r16,0(sp)
101022b4:	dec00304 	addi	sp,sp,12
101022b8:	f800283a 	ret
101022bc:	2080040c 	andi	r2,r4,16
101022c0:	10002e26 	beq	r2,zero,1010237c <__swsetup_r+0x13c>
101022c4:	2080010c 	andi	r2,r4,4
101022c8:	10001e1e 	bne	r2,zero,10102344 <__swsetup_r+0x104>
101022cc:	80c00417 	ldw	r3,16(r16)
101022d0:	20800214 	ori	r2,r4,8
101022d4:	8080030d 	sth	r2,12(r16)
101022d8:	183feb1e 	bne	r3,zero,10102288 <__alt_data_end+0xfffe2288>
101022dc:	1100a00c 	andi	r4,r2,640
101022e0:	01408004 	movi	r5,512
101022e4:	217fe826 	beq	r4,r5,10102288 <__alt_data_end+0xfffe2288>
101022e8:	800b883a 	mov	r5,r16
101022ec:	8809883a 	mov	r4,r17
101022f0:	0102c280 	call	10102c28 <__smakebuf_r>
101022f4:	8080030b 	ldhu	r2,12(r16)
101022f8:	80c00417 	ldw	r3,16(r16)
101022fc:	003fe206 	br	10102288 <__alt_data_end+0xfffe2288>
10102300:	80800517 	ldw	r2,20(r16)
10102304:	80000215 	stw	zero,8(r16)
10102308:	0085c83a 	sub	r2,zero,r2
1010230c:	80800615 	stw	r2,24(r16)
10102310:	183fe41e 	bne	r3,zero,101022a4 <__alt_data_end+0xfffe22a4>
10102314:	80c0030b 	ldhu	r3,12(r16)
10102318:	0005883a 	mov	r2,zero
1010231c:	1900200c 	andi	r4,r3,128
10102320:	203fe126 	beq	r4,zero,101022a8 <__alt_data_end+0xfffe22a8>
10102324:	18c01014 	ori	r3,r3,64
10102328:	80c0030d 	sth	r3,12(r16)
1010232c:	00bfffc4 	movi	r2,-1
10102330:	003fdd06 	br	101022a8 <__alt_data_end+0xfffe22a8>
10102334:	010079c0 	call	1010079c <__sinit>
10102338:	003fcd06 	br	10102270 <__alt_data_end+0xfffe2270>
1010233c:	0005883a 	mov	r2,zero
10102340:	003fd606 	br	1010229c <__alt_data_end+0xfffe229c>
10102344:	81400c17 	ldw	r5,48(r16)
10102348:	28000626 	beq	r5,zero,10102364 <__swsetup_r+0x124>
1010234c:	80801004 	addi	r2,r16,64
10102350:	28800326 	beq	r5,r2,10102360 <__swsetup_r+0x120>
10102354:	8809883a 	mov	r4,r17
10102358:	01028b80 	call	101028b8 <_free_r>
1010235c:	8100030b 	ldhu	r4,12(r16)
10102360:	80000c15 	stw	zero,48(r16)
10102364:	80c00417 	ldw	r3,16(r16)
10102368:	00bff6c4 	movi	r2,-37
1010236c:	1108703a 	and	r4,r2,r4
10102370:	80000115 	stw	zero,4(r16)
10102374:	80c00015 	stw	r3,0(r16)
10102378:	003fd506 	br	101022d0 <__alt_data_end+0xfffe22d0>
1010237c:	00800244 	movi	r2,9
10102380:	88800015 	stw	r2,0(r17)
10102384:	20801014 	ori	r2,r4,64
10102388:	8080030d 	sth	r2,12(r16)
1010238c:	00bfffc4 	movi	r2,-1
10102390:	003fc506 	br	101022a8 <__alt_data_end+0xfffe22a8>

10102394 <_close_r>:
10102394:	defffd04 	addi	sp,sp,-12
10102398:	dc000015 	stw	r16,0(sp)
1010239c:	04040474 	movhi	r16,4113
101023a0:	dc400115 	stw	r17,4(sp)
101023a4:	84231c04 	addi	r16,r16,-29584
101023a8:	2023883a 	mov	r17,r4
101023ac:	2809883a 	mov	r4,r5
101023b0:	dfc00215 	stw	ra,8(sp)
101023b4:	80000015 	stw	zero,0(r16)
101023b8:	01030e40 	call	101030e4 <close>
101023bc:	00ffffc4 	movi	r3,-1
101023c0:	10c00526 	beq	r2,r3,101023d8 <_close_r+0x44>
101023c4:	dfc00217 	ldw	ra,8(sp)
101023c8:	dc400117 	ldw	r17,4(sp)
101023cc:	dc000017 	ldw	r16,0(sp)
101023d0:	dec00304 	addi	sp,sp,12
101023d4:	f800283a 	ret
101023d8:	80c00017 	ldw	r3,0(r16)
101023dc:	183ff926 	beq	r3,zero,101023c4 <__alt_data_end+0xfffe23c4>
101023e0:	88c00015 	stw	r3,0(r17)
101023e4:	003ff706 	br	101023c4 <__alt_data_end+0xfffe23c4>

101023e8 <_fclose_r>:
101023e8:	28003926 	beq	r5,zero,101024d0 <_fclose_r+0xe8>
101023ec:	defffc04 	addi	sp,sp,-16
101023f0:	dc400115 	stw	r17,4(sp)
101023f4:	dc000015 	stw	r16,0(sp)
101023f8:	dfc00315 	stw	ra,12(sp)
101023fc:	dc800215 	stw	r18,8(sp)
10102400:	2023883a 	mov	r17,r4
10102404:	2821883a 	mov	r16,r5
10102408:	20000226 	beq	r4,zero,10102414 <_fclose_r+0x2c>
1010240c:	20800e17 	ldw	r2,56(r4)
10102410:	10002726 	beq	r2,zero,101024b0 <_fclose_r+0xc8>
10102414:	8080030f 	ldh	r2,12(r16)
10102418:	1000071e 	bne	r2,zero,10102438 <_fclose_r+0x50>
1010241c:	0005883a 	mov	r2,zero
10102420:	dfc00317 	ldw	ra,12(sp)
10102424:	dc800217 	ldw	r18,8(sp)
10102428:	dc400117 	ldw	r17,4(sp)
1010242c:	dc000017 	ldw	r16,0(sp)
10102430:	dec00404 	addi	sp,sp,16
10102434:	f800283a 	ret
10102438:	800b883a 	mov	r5,r16
1010243c:	8809883a 	mov	r4,r17
10102440:	01024ec0 	call	101024ec <__sflush_r>
10102444:	1025883a 	mov	r18,r2
10102448:	80800b17 	ldw	r2,44(r16)
1010244c:	10000426 	beq	r2,zero,10102460 <_fclose_r+0x78>
10102450:	81400717 	ldw	r5,28(r16)
10102454:	8809883a 	mov	r4,r17
10102458:	103ee83a 	callr	r2
1010245c:	10001616 	blt	r2,zero,101024b8 <_fclose_r+0xd0>
10102460:	8080030b 	ldhu	r2,12(r16)
10102464:	1080200c 	andi	r2,r2,128
10102468:	1000151e 	bne	r2,zero,101024c0 <_fclose_r+0xd8>
1010246c:	81400c17 	ldw	r5,48(r16)
10102470:	28000526 	beq	r5,zero,10102488 <_fclose_r+0xa0>
10102474:	80801004 	addi	r2,r16,64
10102478:	28800226 	beq	r5,r2,10102484 <_fclose_r+0x9c>
1010247c:	8809883a 	mov	r4,r17
10102480:	01028b80 	call	101028b8 <_free_r>
10102484:	80000c15 	stw	zero,48(r16)
10102488:	81401117 	ldw	r5,68(r16)
1010248c:	28000326 	beq	r5,zero,1010249c <_fclose_r+0xb4>
10102490:	8809883a 	mov	r4,r17
10102494:	01028b80 	call	101028b8 <_free_r>
10102498:	80001115 	stw	zero,68(r16)
1010249c:	01007ac0 	call	101007ac <__sfp_lock_acquire>
101024a0:	8000030d 	sth	zero,12(r16)
101024a4:	01007b00 	call	101007b0 <__sfp_lock_release>
101024a8:	9005883a 	mov	r2,r18
101024ac:	003fdc06 	br	10102420 <__alt_data_end+0xfffe2420>
101024b0:	010079c0 	call	1010079c <__sinit>
101024b4:	003fd706 	br	10102414 <__alt_data_end+0xfffe2414>
101024b8:	04bfffc4 	movi	r18,-1
101024bc:	003fe806 	br	10102460 <__alt_data_end+0xfffe2460>
101024c0:	81400417 	ldw	r5,16(r16)
101024c4:	8809883a 	mov	r4,r17
101024c8:	01028b80 	call	101028b8 <_free_r>
101024cc:	003fe706 	br	1010246c <__alt_data_end+0xfffe246c>
101024d0:	0005883a 	mov	r2,zero
101024d4:	f800283a 	ret

101024d8 <fclose>:
101024d8:	00840434 	movhi	r2,4112
101024dc:	109c7104 	addi	r2,r2,29124
101024e0:	200b883a 	mov	r5,r4
101024e4:	11000017 	ldw	r4,0(r2)
101024e8:	01023e81 	jmpi	101023e8 <_fclose_r>

101024ec <__sflush_r>:
101024ec:	2880030b 	ldhu	r2,12(r5)
101024f0:	defffb04 	addi	sp,sp,-20
101024f4:	dcc00315 	stw	r19,12(sp)
101024f8:	dc400115 	stw	r17,4(sp)
101024fc:	dfc00415 	stw	ra,16(sp)
10102500:	dc800215 	stw	r18,8(sp)
10102504:	dc000015 	stw	r16,0(sp)
10102508:	10c0020c 	andi	r3,r2,8
1010250c:	2823883a 	mov	r17,r5
10102510:	2027883a 	mov	r19,r4
10102514:	1800311e 	bne	r3,zero,101025dc <__sflush_r+0xf0>
10102518:	28c00117 	ldw	r3,4(r5)
1010251c:	10820014 	ori	r2,r2,2048
10102520:	2880030d 	sth	r2,12(r5)
10102524:	00c04b0e 	bge	zero,r3,10102654 <__sflush_r+0x168>
10102528:	8a000a17 	ldw	r8,40(r17)
1010252c:	40002326 	beq	r8,zero,101025bc <__sflush_r+0xd0>
10102530:	9c000017 	ldw	r16,0(r19)
10102534:	10c4000c 	andi	r3,r2,4096
10102538:	98000015 	stw	zero,0(r19)
1010253c:	18004826 	beq	r3,zero,10102660 <__sflush_r+0x174>
10102540:	89801417 	ldw	r6,80(r17)
10102544:	10c0010c 	andi	r3,r2,4
10102548:	18000626 	beq	r3,zero,10102564 <__sflush_r+0x78>
1010254c:	88c00117 	ldw	r3,4(r17)
10102550:	88800c17 	ldw	r2,48(r17)
10102554:	30cdc83a 	sub	r6,r6,r3
10102558:	10000226 	beq	r2,zero,10102564 <__sflush_r+0x78>
1010255c:	88800f17 	ldw	r2,60(r17)
10102560:	308dc83a 	sub	r6,r6,r2
10102564:	89400717 	ldw	r5,28(r17)
10102568:	000f883a 	mov	r7,zero
1010256c:	9809883a 	mov	r4,r19
10102570:	403ee83a 	callr	r8
10102574:	00ffffc4 	movi	r3,-1
10102578:	10c04426 	beq	r2,r3,1010268c <__sflush_r+0x1a0>
1010257c:	88c0030b 	ldhu	r3,12(r17)
10102580:	89000417 	ldw	r4,16(r17)
10102584:	88000115 	stw	zero,4(r17)
10102588:	197dffcc 	andi	r5,r3,63487
1010258c:	8940030d 	sth	r5,12(r17)
10102590:	89000015 	stw	r4,0(r17)
10102594:	18c4000c 	andi	r3,r3,4096
10102598:	18002c1e 	bne	r3,zero,1010264c <__sflush_r+0x160>
1010259c:	89400c17 	ldw	r5,48(r17)
101025a0:	9c000015 	stw	r16,0(r19)
101025a4:	28000526 	beq	r5,zero,101025bc <__sflush_r+0xd0>
101025a8:	88801004 	addi	r2,r17,64
101025ac:	28800226 	beq	r5,r2,101025b8 <__sflush_r+0xcc>
101025b0:	9809883a 	mov	r4,r19
101025b4:	01028b80 	call	101028b8 <_free_r>
101025b8:	88000c15 	stw	zero,48(r17)
101025bc:	0005883a 	mov	r2,zero
101025c0:	dfc00417 	ldw	ra,16(sp)
101025c4:	dcc00317 	ldw	r19,12(sp)
101025c8:	dc800217 	ldw	r18,8(sp)
101025cc:	dc400117 	ldw	r17,4(sp)
101025d0:	dc000017 	ldw	r16,0(sp)
101025d4:	dec00504 	addi	sp,sp,20
101025d8:	f800283a 	ret
101025dc:	2c800417 	ldw	r18,16(r5)
101025e0:	903ff626 	beq	r18,zero,101025bc <__alt_data_end+0xfffe25bc>
101025e4:	2c000017 	ldw	r16,0(r5)
101025e8:	108000cc 	andi	r2,r2,3
101025ec:	2c800015 	stw	r18,0(r5)
101025f0:	84a1c83a 	sub	r16,r16,r18
101025f4:	1000131e 	bne	r2,zero,10102644 <__sflush_r+0x158>
101025f8:	28800517 	ldw	r2,20(r5)
101025fc:	88800215 	stw	r2,8(r17)
10102600:	04000316 	blt	zero,r16,10102610 <__sflush_r+0x124>
10102604:	003fed06 	br	101025bc <__alt_data_end+0xfffe25bc>
10102608:	90a5883a 	add	r18,r18,r2
1010260c:	043feb0e 	bge	zero,r16,101025bc <__alt_data_end+0xfffe25bc>
10102610:	88800917 	ldw	r2,36(r17)
10102614:	89400717 	ldw	r5,28(r17)
10102618:	800f883a 	mov	r7,r16
1010261c:	900d883a 	mov	r6,r18
10102620:	9809883a 	mov	r4,r19
10102624:	103ee83a 	callr	r2
10102628:	80a1c83a 	sub	r16,r16,r2
1010262c:	00bff616 	blt	zero,r2,10102608 <__alt_data_end+0xfffe2608>
10102630:	88c0030b 	ldhu	r3,12(r17)
10102634:	00bfffc4 	movi	r2,-1
10102638:	18c01014 	ori	r3,r3,64
1010263c:	88c0030d 	sth	r3,12(r17)
10102640:	003fdf06 	br	101025c0 <__alt_data_end+0xfffe25c0>
10102644:	0005883a 	mov	r2,zero
10102648:	003fec06 	br	101025fc <__alt_data_end+0xfffe25fc>
1010264c:	88801415 	stw	r2,80(r17)
10102650:	003fd206 	br	1010259c <__alt_data_end+0xfffe259c>
10102654:	28c00f17 	ldw	r3,60(r5)
10102658:	00ffb316 	blt	zero,r3,10102528 <__alt_data_end+0xfffe2528>
1010265c:	003fd706 	br	101025bc <__alt_data_end+0xfffe25bc>
10102660:	89400717 	ldw	r5,28(r17)
10102664:	000d883a 	mov	r6,zero
10102668:	01c00044 	movi	r7,1
1010266c:	9809883a 	mov	r4,r19
10102670:	403ee83a 	callr	r8
10102674:	100d883a 	mov	r6,r2
10102678:	00bfffc4 	movi	r2,-1
1010267c:	30801426 	beq	r6,r2,101026d0 <__sflush_r+0x1e4>
10102680:	8880030b 	ldhu	r2,12(r17)
10102684:	8a000a17 	ldw	r8,40(r17)
10102688:	003fae06 	br	10102544 <__alt_data_end+0xfffe2544>
1010268c:	98c00017 	ldw	r3,0(r19)
10102690:	183fba26 	beq	r3,zero,1010257c <__alt_data_end+0xfffe257c>
10102694:	01000744 	movi	r4,29
10102698:	19000626 	beq	r3,r4,101026b4 <__sflush_r+0x1c8>
1010269c:	01000584 	movi	r4,22
101026a0:	19000426 	beq	r3,r4,101026b4 <__sflush_r+0x1c8>
101026a4:	88c0030b 	ldhu	r3,12(r17)
101026a8:	18c01014 	ori	r3,r3,64
101026ac:	88c0030d 	sth	r3,12(r17)
101026b0:	003fc306 	br	101025c0 <__alt_data_end+0xfffe25c0>
101026b4:	8880030b 	ldhu	r2,12(r17)
101026b8:	88c00417 	ldw	r3,16(r17)
101026bc:	88000115 	stw	zero,4(r17)
101026c0:	10bdffcc 	andi	r2,r2,63487
101026c4:	8880030d 	sth	r2,12(r17)
101026c8:	88c00015 	stw	r3,0(r17)
101026cc:	003fb306 	br	1010259c <__alt_data_end+0xfffe259c>
101026d0:	98800017 	ldw	r2,0(r19)
101026d4:	103fea26 	beq	r2,zero,10102680 <__alt_data_end+0xfffe2680>
101026d8:	00c00744 	movi	r3,29
101026dc:	10c00226 	beq	r2,r3,101026e8 <__sflush_r+0x1fc>
101026e0:	00c00584 	movi	r3,22
101026e4:	10c0031e 	bne	r2,r3,101026f4 <__sflush_r+0x208>
101026e8:	9c000015 	stw	r16,0(r19)
101026ec:	0005883a 	mov	r2,zero
101026f0:	003fb306 	br	101025c0 <__alt_data_end+0xfffe25c0>
101026f4:	88c0030b 	ldhu	r3,12(r17)
101026f8:	3005883a 	mov	r2,r6
101026fc:	18c01014 	ori	r3,r3,64
10102700:	88c0030d 	sth	r3,12(r17)
10102704:	003fae06 	br	101025c0 <__alt_data_end+0xfffe25c0>

10102708 <_fflush_r>:
10102708:	defffd04 	addi	sp,sp,-12
1010270c:	dc000115 	stw	r16,4(sp)
10102710:	dfc00215 	stw	ra,8(sp)
10102714:	2021883a 	mov	r16,r4
10102718:	20000226 	beq	r4,zero,10102724 <_fflush_r+0x1c>
1010271c:	20800e17 	ldw	r2,56(r4)
10102720:	10000c26 	beq	r2,zero,10102754 <_fflush_r+0x4c>
10102724:	2880030f 	ldh	r2,12(r5)
10102728:	1000051e 	bne	r2,zero,10102740 <_fflush_r+0x38>
1010272c:	0005883a 	mov	r2,zero
10102730:	dfc00217 	ldw	ra,8(sp)
10102734:	dc000117 	ldw	r16,4(sp)
10102738:	dec00304 	addi	sp,sp,12
1010273c:	f800283a 	ret
10102740:	8009883a 	mov	r4,r16
10102744:	dfc00217 	ldw	ra,8(sp)
10102748:	dc000117 	ldw	r16,4(sp)
1010274c:	dec00304 	addi	sp,sp,12
10102750:	01024ec1 	jmpi	101024ec <__sflush_r>
10102754:	d9400015 	stw	r5,0(sp)
10102758:	010079c0 	call	1010079c <__sinit>
1010275c:	d9400017 	ldw	r5,0(sp)
10102760:	003ff006 	br	10102724 <__alt_data_end+0xfffe2724>

10102764 <fflush>:
10102764:	20000526 	beq	r4,zero,1010277c <fflush+0x18>
10102768:	00840434 	movhi	r2,4112
1010276c:	109c7104 	addi	r2,r2,29124
10102770:	200b883a 	mov	r5,r4
10102774:	11000017 	ldw	r4,0(r2)
10102778:	01027081 	jmpi	10102708 <_fflush_r>
1010277c:	00840434 	movhi	r2,4112
10102780:	109c7004 	addi	r2,r2,29120
10102784:	11000017 	ldw	r4,0(r2)
10102788:	01440434 	movhi	r5,4112
1010278c:	2949c204 	addi	r5,r5,9992
10102790:	0100d6c1 	jmpi	10100d6c <_fwalk_reent>

10102794 <_malloc_trim_r>:
10102794:	defffb04 	addi	sp,sp,-20
10102798:	dcc00315 	stw	r19,12(sp)
1010279c:	04c40434 	movhi	r19,4112
101027a0:	dc800215 	stw	r18,8(sp)
101027a4:	dc400115 	stw	r17,4(sp)
101027a8:	dc000015 	stw	r16,0(sp)
101027ac:	dfc00415 	stw	ra,16(sp)
101027b0:	2821883a 	mov	r16,r5
101027b4:	9cd6ec04 	addi	r19,r19,23472
101027b8:	2025883a 	mov	r18,r4
101027bc:	01036240 	call	10103624 <__malloc_lock>
101027c0:	98800217 	ldw	r2,8(r19)
101027c4:	14400117 	ldw	r17,4(r2)
101027c8:	00bfff04 	movi	r2,-4
101027cc:	88a2703a 	and	r17,r17,r2
101027d0:	8c21c83a 	sub	r16,r17,r16
101027d4:	8403fbc4 	addi	r16,r16,4079
101027d8:	8020d33a 	srli	r16,r16,12
101027dc:	0083ffc4 	movi	r2,4095
101027e0:	843fffc4 	addi	r16,r16,-1
101027e4:	8020933a 	slli	r16,r16,12
101027e8:	1400060e 	bge	r2,r16,10102804 <_malloc_trim_r+0x70>
101027ec:	000b883a 	mov	r5,zero
101027f0:	9009883a 	mov	r4,r18
101027f4:	01020500 	call	10102050 <_sbrk_r>
101027f8:	98c00217 	ldw	r3,8(r19)
101027fc:	1c47883a 	add	r3,r3,r17
10102800:	10c00a26 	beq	r2,r3,1010282c <_malloc_trim_r+0x98>
10102804:	9009883a 	mov	r4,r18
10102808:	01036480 	call	10103648 <__malloc_unlock>
1010280c:	0005883a 	mov	r2,zero
10102810:	dfc00417 	ldw	ra,16(sp)
10102814:	dcc00317 	ldw	r19,12(sp)
10102818:	dc800217 	ldw	r18,8(sp)
1010281c:	dc400117 	ldw	r17,4(sp)
10102820:	dc000017 	ldw	r16,0(sp)
10102824:	dec00504 	addi	sp,sp,20
10102828:	f800283a 	ret
1010282c:	040bc83a 	sub	r5,zero,r16
10102830:	9009883a 	mov	r4,r18
10102834:	01020500 	call	10102050 <_sbrk_r>
10102838:	00ffffc4 	movi	r3,-1
1010283c:	10c00d26 	beq	r2,r3,10102874 <_malloc_trim_r+0xe0>
10102840:	00c40474 	movhi	r3,4113
10102844:	18e32404 	addi	r3,r3,-29552
10102848:	18800017 	ldw	r2,0(r3)
1010284c:	99000217 	ldw	r4,8(r19)
10102850:	8c23c83a 	sub	r17,r17,r16
10102854:	8c400054 	ori	r17,r17,1
10102858:	1421c83a 	sub	r16,r2,r16
1010285c:	24400115 	stw	r17,4(r4)
10102860:	9009883a 	mov	r4,r18
10102864:	1c000015 	stw	r16,0(r3)
10102868:	01036480 	call	10103648 <__malloc_unlock>
1010286c:	00800044 	movi	r2,1
10102870:	003fe706 	br	10102810 <__alt_data_end+0xfffe2810>
10102874:	000b883a 	mov	r5,zero
10102878:	9009883a 	mov	r4,r18
1010287c:	01020500 	call	10102050 <_sbrk_r>
10102880:	99000217 	ldw	r4,8(r19)
10102884:	014003c4 	movi	r5,15
10102888:	1107c83a 	sub	r3,r2,r4
1010288c:	28ffdd0e 	bge	r5,r3,10102804 <__alt_data_end+0xfffe2804>
10102890:	01440434 	movhi	r5,4112
10102894:	295c7204 	addi	r5,r5,29128
10102898:	29400017 	ldw	r5,0(r5)
1010289c:	18c00054 	ori	r3,r3,1
101028a0:	20c00115 	stw	r3,4(r4)
101028a4:	00c40474 	movhi	r3,4113
101028a8:	1145c83a 	sub	r2,r2,r5
101028ac:	18e32404 	addi	r3,r3,-29552
101028b0:	18800015 	stw	r2,0(r3)
101028b4:	003fd306 	br	10102804 <__alt_data_end+0xfffe2804>

101028b8 <_free_r>:
101028b8:	28004126 	beq	r5,zero,101029c0 <_free_r+0x108>
101028bc:	defffd04 	addi	sp,sp,-12
101028c0:	dc400115 	stw	r17,4(sp)
101028c4:	dc000015 	stw	r16,0(sp)
101028c8:	2023883a 	mov	r17,r4
101028cc:	2821883a 	mov	r16,r5
101028d0:	dfc00215 	stw	ra,8(sp)
101028d4:	01036240 	call	10103624 <__malloc_lock>
101028d8:	81ffff17 	ldw	r7,-4(r16)
101028dc:	00bfff84 	movi	r2,-2
101028e0:	01040434 	movhi	r4,4112
101028e4:	81bffe04 	addi	r6,r16,-8
101028e8:	3884703a 	and	r2,r7,r2
101028ec:	2116ec04 	addi	r4,r4,23472
101028f0:	308b883a 	add	r5,r6,r2
101028f4:	2a400117 	ldw	r9,4(r5)
101028f8:	22000217 	ldw	r8,8(r4)
101028fc:	00ffff04 	movi	r3,-4
10102900:	48c6703a 	and	r3,r9,r3
10102904:	2a005726 	beq	r5,r8,10102a64 <_free_r+0x1ac>
10102908:	28c00115 	stw	r3,4(r5)
1010290c:	39c0004c 	andi	r7,r7,1
10102910:	3800091e 	bne	r7,zero,10102938 <_free_r+0x80>
10102914:	823ffe17 	ldw	r8,-8(r16)
10102918:	22400204 	addi	r9,r4,8
1010291c:	320dc83a 	sub	r6,r6,r8
10102920:	31c00217 	ldw	r7,8(r6)
10102924:	1205883a 	add	r2,r2,r8
10102928:	3a406526 	beq	r7,r9,10102ac0 <_free_r+0x208>
1010292c:	32000317 	ldw	r8,12(r6)
10102930:	3a000315 	stw	r8,12(r7)
10102934:	41c00215 	stw	r7,8(r8)
10102938:	28cf883a 	add	r7,r5,r3
1010293c:	39c00117 	ldw	r7,4(r7)
10102940:	39c0004c 	andi	r7,r7,1
10102944:	38003a26 	beq	r7,zero,10102a30 <_free_r+0x178>
10102948:	10c00054 	ori	r3,r2,1
1010294c:	30c00115 	stw	r3,4(r6)
10102950:	3087883a 	add	r3,r6,r2
10102954:	18800015 	stw	r2,0(r3)
10102958:	00c07fc4 	movi	r3,511
1010295c:	18801936 	bltu	r3,r2,101029c4 <_free_r+0x10c>
10102960:	1004d0fa 	srli	r2,r2,3
10102964:	01c00044 	movi	r7,1
10102968:	21400117 	ldw	r5,4(r4)
1010296c:	10c00044 	addi	r3,r2,1
10102970:	18c7883a 	add	r3,r3,r3
10102974:	1005d0ba 	srai	r2,r2,2
10102978:	18c7883a 	add	r3,r3,r3
1010297c:	18c7883a 	add	r3,r3,r3
10102980:	1907883a 	add	r3,r3,r4
10102984:	3884983a 	sll	r2,r7,r2
10102988:	19c00017 	ldw	r7,0(r3)
1010298c:	1a3ffe04 	addi	r8,r3,-8
10102990:	1144b03a 	or	r2,r2,r5
10102994:	32000315 	stw	r8,12(r6)
10102998:	31c00215 	stw	r7,8(r6)
1010299c:	20800115 	stw	r2,4(r4)
101029a0:	19800015 	stw	r6,0(r3)
101029a4:	39800315 	stw	r6,12(r7)
101029a8:	8809883a 	mov	r4,r17
101029ac:	dfc00217 	ldw	ra,8(sp)
101029b0:	dc400117 	ldw	r17,4(sp)
101029b4:	dc000017 	ldw	r16,0(sp)
101029b8:	dec00304 	addi	sp,sp,12
101029bc:	01036481 	jmpi	10103648 <__malloc_unlock>
101029c0:	f800283a 	ret
101029c4:	100ad27a 	srli	r5,r2,9
101029c8:	00c00104 	movi	r3,4
101029cc:	19404a36 	bltu	r3,r5,10102af8 <_free_r+0x240>
101029d0:	100ad1ba 	srli	r5,r2,6
101029d4:	28c00e44 	addi	r3,r5,57
101029d8:	18c7883a 	add	r3,r3,r3
101029dc:	29400e04 	addi	r5,r5,56
101029e0:	18c7883a 	add	r3,r3,r3
101029e4:	18c7883a 	add	r3,r3,r3
101029e8:	1909883a 	add	r4,r3,r4
101029ec:	20c00017 	ldw	r3,0(r4)
101029f0:	01c40434 	movhi	r7,4112
101029f4:	213ffe04 	addi	r4,r4,-8
101029f8:	39d6ec04 	addi	r7,r7,23472
101029fc:	20c04426 	beq	r4,r3,10102b10 <_free_r+0x258>
10102a00:	01ffff04 	movi	r7,-4
10102a04:	19400117 	ldw	r5,4(r3)
10102a08:	29ca703a 	and	r5,r5,r7
10102a0c:	1140022e 	bgeu	r2,r5,10102a18 <_free_r+0x160>
10102a10:	18c00217 	ldw	r3,8(r3)
10102a14:	20fffb1e 	bne	r4,r3,10102a04 <__alt_data_end+0xfffe2a04>
10102a18:	19000317 	ldw	r4,12(r3)
10102a1c:	31000315 	stw	r4,12(r6)
10102a20:	30c00215 	stw	r3,8(r6)
10102a24:	21800215 	stw	r6,8(r4)
10102a28:	19800315 	stw	r6,12(r3)
10102a2c:	003fde06 	br	101029a8 <__alt_data_end+0xfffe29a8>
10102a30:	29c00217 	ldw	r7,8(r5)
10102a34:	10c5883a 	add	r2,r2,r3
10102a38:	00c40434 	movhi	r3,4112
10102a3c:	18d6ee04 	addi	r3,r3,23480
10102a40:	38c03b26 	beq	r7,r3,10102b30 <_free_r+0x278>
10102a44:	2a000317 	ldw	r8,12(r5)
10102a48:	11400054 	ori	r5,r2,1
10102a4c:	3087883a 	add	r3,r6,r2
10102a50:	3a000315 	stw	r8,12(r7)
10102a54:	41c00215 	stw	r7,8(r8)
10102a58:	31400115 	stw	r5,4(r6)
10102a5c:	18800015 	stw	r2,0(r3)
10102a60:	003fbd06 	br	10102958 <__alt_data_end+0xfffe2958>
10102a64:	39c0004c 	andi	r7,r7,1
10102a68:	10c5883a 	add	r2,r2,r3
10102a6c:	3800071e 	bne	r7,zero,10102a8c <_free_r+0x1d4>
10102a70:	81fffe17 	ldw	r7,-8(r16)
10102a74:	31cdc83a 	sub	r6,r6,r7
10102a78:	30c00317 	ldw	r3,12(r6)
10102a7c:	31400217 	ldw	r5,8(r6)
10102a80:	11c5883a 	add	r2,r2,r7
10102a84:	28c00315 	stw	r3,12(r5)
10102a88:	19400215 	stw	r5,8(r3)
10102a8c:	10c00054 	ori	r3,r2,1
10102a90:	30c00115 	stw	r3,4(r6)
10102a94:	00c40434 	movhi	r3,4112
10102a98:	18dc7304 	addi	r3,r3,29132
10102a9c:	18c00017 	ldw	r3,0(r3)
10102aa0:	21800215 	stw	r6,8(r4)
10102aa4:	10ffc036 	bltu	r2,r3,101029a8 <__alt_data_end+0xfffe29a8>
10102aa8:	00840474 	movhi	r2,4113
10102aac:	10a31b04 	addi	r2,r2,-29588
10102ab0:	11400017 	ldw	r5,0(r2)
10102ab4:	8809883a 	mov	r4,r17
10102ab8:	01027940 	call	10102794 <_malloc_trim_r>
10102abc:	003fba06 	br	101029a8 <__alt_data_end+0xfffe29a8>
10102ac0:	28c9883a 	add	r4,r5,r3
10102ac4:	21000117 	ldw	r4,4(r4)
10102ac8:	2100004c 	andi	r4,r4,1
10102acc:	2000391e 	bne	r4,zero,10102bb4 <_free_r+0x2fc>
10102ad0:	29c00217 	ldw	r7,8(r5)
10102ad4:	29000317 	ldw	r4,12(r5)
10102ad8:	1885883a 	add	r2,r3,r2
10102adc:	10c00054 	ori	r3,r2,1
10102ae0:	39000315 	stw	r4,12(r7)
10102ae4:	21c00215 	stw	r7,8(r4)
10102ae8:	30c00115 	stw	r3,4(r6)
10102aec:	308d883a 	add	r6,r6,r2
10102af0:	30800015 	stw	r2,0(r6)
10102af4:	003fac06 	br	101029a8 <__alt_data_end+0xfffe29a8>
10102af8:	00c00504 	movi	r3,20
10102afc:	19401536 	bltu	r3,r5,10102b54 <_free_r+0x29c>
10102b00:	28c01704 	addi	r3,r5,92
10102b04:	18c7883a 	add	r3,r3,r3
10102b08:	294016c4 	addi	r5,r5,91
10102b0c:	003fb406 	br	101029e0 <__alt_data_end+0xfffe29e0>
10102b10:	280bd0ba 	srai	r5,r5,2
10102b14:	00c00044 	movi	r3,1
10102b18:	38800117 	ldw	r2,4(r7)
10102b1c:	194a983a 	sll	r5,r3,r5
10102b20:	2007883a 	mov	r3,r4
10102b24:	2884b03a 	or	r2,r5,r2
10102b28:	38800115 	stw	r2,4(r7)
10102b2c:	003fbb06 	br	10102a1c <__alt_data_end+0xfffe2a1c>
10102b30:	21800515 	stw	r6,20(r4)
10102b34:	21800415 	stw	r6,16(r4)
10102b38:	10c00054 	ori	r3,r2,1
10102b3c:	31c00315 	stw	r7,12(r6)
10102b40:	31c00215 	stw	r7,8(r6)
10102b44:	30c00115 	stw	r3,4(r6)
10102b48:	308d883a 	add	r6,r6,r2
10102b4c:	30800015 	stw	r2,0(r6)
10102b50:	003f9506 	br	101029a8 <__alt_data_end+0xfffe29a8>
10102b54:	00c01504 	movi	r3,84
10102b58:	19400536 	bltu	r3,r5,10102b70 <_free_r+0x2b8>
10102b5c:	100ad33a 	srli	r5,r2,12
10102b60:	28c01bc4 	addi	r3,r5,111
10102b64:	18c7883a 	add	r3,r3,r3
10102b68:	29401b84 	addi	r5,r5,110
10102b6c:	003f9c06 	br	101029e0 <__alt_data_end+0xfffe29e0>
10102b70:	00c05504 	movi	r3,340
10102b74:	19400536 	bltu	r3,r5,10102b8c <_free_r+0x2d4>
10102b78:	100ad3fa 	srli	r5,r2,15
10102b7c:	28c01e04 	addi	r3,r5,120
10102b80:	18c7883a 	add	r3,r3,r3
10102b84:	29401dc4 	addi	r5,r5,119
10102b88:	003f9506 	br	101029e0 <__alt_data_end+0xfffe29e0>
10102b8c:	00c15504 	movi	r3,1364
10102b90:	19400536 	bltu	r3,r5,10102ba8 <_free_r+0x2f0>
10102b94:	100ad4ba 	srli	r5,r2,18
10102b98:	28c01f44 	addi	r3,r5,125
10102b9c:	18c7883a 	add	r3,r3,r3
10102ba0:	29401f04 	addi	r5,r5,124
10102ba4:	003f8e06 	br	101029e0 <__alt_data_end+0xfffe29e0>
10102ba8:	00c03f84 	movi	r3,254
10102bac:	01401f84 	movi	r5,126
10102bb0:	003f8b06 	br	101029e0 <__alt_data_end+0xfffe29e0>
10102bb4:	10c00054 	ori	r3,r2,1
10102bb8:	30c00115 	stw	r3,4(r6)
10102bbc:	308d883a 	add	r6,r6,r2
10102bc0:	30800015 	stw	r2,0(r6)
10102bc4:	003f7806 	br	101029a8 <__alt_data_end+0xfffe29a8>

10102bc8 <_lseek_r>:
10102bc8:	defffd04 	addi	sp,sp,-12
10102bcc:	2805883a 	mov	r2,r5
10102bd0:	dc000015 	stw	r16,0(sp)
10102bd4:	04040474 	movhi	r16,4113
10102bd8:	dc400115 	stw	r17,4(sp)
10102bdc:	300b883a 	mov	r5,r6
10102be0:	84231c04 	addi	r16,r16,-29584
10102be4:	2023883a 	mov	r17,r4
10102be8:	380d883a 	mov	r6,r7
10102bec:	1009883a 	mov	r4,r2
10102bf0:	dfc00215 	stw	ra,8(sp)
10102bf4:	80000015 	stw	zero,0(r16)
10102bf8:	01034d40 	call	101034d4 <lseek>
10102bfc:	00ffffc4 	movi	r3,-1
10102c00:	10c00526 	beq	r2,r3,10102c18 <_lseek_r+0x50>
10102c04:	dfc00217 	ldw	ra,8(sp)
10102c08:	dc400117 	ldw	r17,4(sp)
10102c0c:	dc000017 	ldw	r16,0(sp)
10102c10:	dec00304 	addi	sp,sp,12
10102c14:	f800283a 	ret
10102c18:	80c00017 	ldw	r3,0(r16)
10102c1c:	183ff926 	beq	r3,zero,10102c04 <__alt_data_end+0xfffe2c04>
10102c20:	88c00015 	stw	r3,0(r17)
10102c24:	003ff706 	br	10102c04 <__alt_data_end+0xfffe2c04>

10102c28 <__smakebuf_r>:
10102c28:	2880030b 	ldhu	r2,12(r5)
10102c2c:	10c0008c 	andi	r3,r2,2
10102c30:	1800411e 	bne	r3,zero,10102d38 <__smakebuf_r+0x110>
10102c34:	deffec04 	addi	sp,sp,-80
10102c38:	dc000f15 	stw	r16,60(sp)
10102c3c:	2821883a 	mov	r16,r5
10102c40:	2940038f 	ldh	r5,14(r5)
10102c44:	dc401015 	stw	r17,64(sp)
10102c48:	dfc01315 	stw	ra,76(sp)
10102c4c:	dcc01215 	stw	r19,72(sp)
10102c50:	dc801115 	stw	r18,68(sp)
10102c54:	2023883a 	mov	r17,r4
10102c58:	28001c16 	blt	r5,zero,10102ccc <__smakebuf_r+0xa4>
10102c5c:	d80d883a 	mov	r6,sp
10102c60:	0102e440 	call	10102e44 <_fstat_r>
10102c64:	10001816 	blt	r2,zero,10102cc8 <__smakebuf_r+0xa0>
10102c68:	d8800117 	ldw	r2,4(sp)
10102c6c:	00e00014 	movui	r3,32768
10102c70:	10bc000c 	andi	r2,r2,61440
10102c74:	14c80020 	cmpeqi	r19,r2,8192
10102c78:	10c03726 	beq	r2,r3,10102d58 <__smakebuf_r+0x130>
10102c7c:	80c0030b 	ldhu	r3,12(r16)
10102c80:	18c20014 	ori	r3,r3,2048
10102c84:	80c0030d 	sth	r3,12(r16)
10102c88:	00c80004 	movi	r3,8192
10102c8c:	10c0521e 	bne	r2,r3,10102dd8 <__smakebuf_r+0x1b0>
10102c90:	8140038f 	ldh	r5,14(r16)
10102c94:	8809883a 	mov	r4,r17
10102c98:	0102ea00 	call	10102ea0 <_isatty_r>
10102c9c:	10004c26 	beq	r2,zero,10102dd0 <__smakebuf_r+0x1a8>
10102ca0:	8080030b 	ldhu	r2,12(r16)
10102ca4:	80c010c4 	addi	r3,r16,67
10102ca8:	80c00015 	stw	r3,0(r16)
10102cac:	10800054 	ori	r2,r2,1
10102cb0:	8080030d 	sth	r2,12(r16)
10102cb4:	00800044 	movi	r2,1
10102cb8:	80c00415 	stw	r3,16(r16)
10102cbc:	80800515 	stw	r2,20(r16)
10102cc0:	04810004 	movi	r18,1024
10102cc4:	00000706 	br	10102ce4 <__smakebuf_r+0xbc>
10102cc8:	8080030b 	ldhu	r2,12(r16)
10102ccc:	10c0200c 	andi	r3,r2,128
10102cd0:	18001f1e 	bne	r3,zero,10102d50 <__smakebuf_r+0x128>
10102cd4:	04810004 	movi	r18,1024
10102cd8:	10820014 	ori	r2,r2,2048
10102cdc:	8080030d 	sth	r2,12(r16)
10102ce0:	0027883a 	mov	r19,zero
10102ce4:	900b883a 	mov	r5,r18
10102ce8:	8809883a 	mov	r4,r17
10102cec:	0100e300 	call	10100e30 <_malloc_r>
10102cf0:	10002c26 	beq	r2,zero,10102da4 <__smakebuf_r+0x17c>
10102cf4:	80c0030b 	ldhu	r3,12(r16)
10102cf8:	01040434 	movhi	r4,4112
10102cfc:	21011504 	addi	r4,r4,1108
10102d00:	89000f15 	stw	r4,60(r17)
10102d04:	18c02014 	ori	r3,r3,128
10102d08:	80c0030d 	sth	r3,12(r16)
10102d0c:	80800015 	stw	r2,0(r16)
10102d10:	80800415 	stw	r2,16(r16)
10102d14:	84800515 	stw	r18,20(r16)
10102d18:	98001a1e 	bne	r19,zero,10102d84 <__smakebuf_r+0x15c>
10102d1c:	dfc01317 	ldw	ra,76(sp)
10102d20:	dcc01217 	ldw	r19,72(sp)
10102d24:	dc801117 	ldw	r18,68(sp)
10102d28:	dc401017 	ldw	r17,64(sp)
10102d2c:	dc000f17 	ldw	r16,60(sp)
10102d30:	dec01404 	addi	sp,sp,80
10102d34:	f800283a 	ret
10102d38:	288010c4 	addi	r2,r5,67
10102d3c:	28800015 	stw	r2,0(r5)
10102d40:	28800415 	stw	r2,16(r5)
10102d44:	00800044 	movi	r2,1
10102d48:	28800515 	stw	r2,20(r5)
10102d4c:	f800283a 	ret
10102d50:	04801004 	movi	r18,64
10102d54:	003fe006 	br	10102cd8 <__alt_data_end+0xfffe2cd8>
10102d58:	81000a17 	ldw	r4,40(r16)
10102d5c:	00c40434 	movhi	r3,4112
10102d60:	18c85f04 	addi	r3,r3,8572
10102d64:	20ffc51e 	bne	r4,r3,10102c7c <__alt_data_end+0xfffe2c7c>
10102d68:	8080030b 	ldhu	r2,12(r16)
10102d6c:	04810004 	movi	r18,1024
10102d70:	84801315 	stw	r18,76(r16)
10102d74:	1484b03a 	or	r2,r2,r18
10102d78:	8080030d 	sth	r2,12(r16)
10102d7c:	0027883a 	mov	r19,zero
10102d80:	003fd806 	br	10102ce4 <__alt_data_end+0xfffe2ce4>
10102d84:	8140038f 	ldh	r5,14(r16)
10102d88:	8809883a 	mov	r4,r17
10102d8c:	0102ea00 	call	10102ea0 <_isatty_r>
10102d90:	103fe226 	beq	r2,zero,10102d1c <__alt_data_end+0xfffe2d1c>
10102d94:	8080030b 	ldhu	r2,12(r16)
10102d98:	10800054 	ori	r2,r2,1
10102d9c:	8080030d 	sth	r2,12(r16)
10102da0:	003fde06 	br	10102d1c <__alt_data_end+0xfffe2d1c>
10102da4:	8080030b 	ldhu	r2,12(r16)
10102da8:	10c0800c 	andi	r3,r2,512
10102dac:	183fdb1e 	bne	r3,zero,10102d1c <__alt_data_end+0xfffe2d1c>
10102db0:	10800094 	ori	r2,r2,2
10102db4:	80c010c4 	addi	r3,r16,67
10102db8:	8080030d 	sth	r2,12(r16)
10102dbc:	00800044 	movi	r2,1
10102dc0:	80c00015 	stw	r3,0(r16)
10102dc4:	80c00415 	stw	r3,16(r16)
10102dc8:	80800515 	stw	r2,20(r16)
10102dcc:	003fd306 	br	10102d1c <__alt_data_end+0xfffe2d1c>
10102dd0:	04810004 	movi	r18,1024
10102dd4:	003fc306 	br	10102ce4 <__alt_data_end+0xfffe2ce4>
10102dd8:	0027883a 	mov	r19,zero
10102ddc:	04810004 	movi	r18,1024
10102de0:	003fc006 	br	10102ce4 <__alt_data_end+0xfffe2ce4>

10102de4 <_read_r>:
10102de4:	defffd04 	addi	sp,sp,-12
10102de8:	2805883a 	mov	r2,r5
10102dec:	dc000015 	stw	r16,0(sp)
10102df0:	04040474 	movhi	r16,4113
10102df4:	dc400115 	stw	r17,4(sp)
10102df8:	300b883a 	mov	r5,r6
10102dfc:	84231c04 	addi	r16,r16,-29584
10102e00:	2023883a 	mov	r17,r4
10102e04:	380d883a 	mov	r6,r7
10102e08:	1009883a 	mov	r4,r2
10102e0c:	dfc00215 	stw	ra,8(sp)
10102e10:	80000015 	stw	zero,0(r16)
10102e14:	01036a80 	call	101036a8 <read>
10102e18:	00ffffc4 	movi	r3,-1
10102e1c:	10c00526 	beq	r2,r3,10102e34 <_read_r+0x50>
10102e20:	dfc00217 	ldw	ra,8(sp)
10102e24:	dc400117 	ldw	r17,4(sp)
10102e28:	dc000017 	ldw	r16,0(sp)
10102e2c:	dec00304 	addi	sp,sp,12
10102e30:	f800283a 	ret
10102e34:	80c00017 	ldw	r3,0(r16)
10102e38:	183ff926 	beq	r3,zero,10102e20 <__alt_data_end+0xfffe2e20>
10102e3c:	88c00015 	stw	r3,0(r17)
10102e40:	003ff706 	br	10102e20 <__alt_data_end+0xfffe2e20>

10102e44 <_fstat_r>:
10102e44:	defffd04 	addi	sp,sp,-12
10102e48:	2805883a 	mov	r2,r5
10102e4c:	dc000015 	stw	r16,0(sp)
10102e50:	04040474 	movhi	r16,4113
10102e54:	dc400115 	stw	r17,4(sp)
10102e58:	84231c04 	addi	r16,r16,-29584
10102e5c:	2023883a 	mov	r17,r4
10102e60:	300b883a 	mov	r5,r6
10102e64:	1009883a 	mov	r4,r2
10102e68:	dfc00215 	stw	ra,8(sp)
10102e6c:	80000015 	stw	zero,0(r16)
10102e70:	010321c0 	call	1010321c <fstat>
10102e74:	00ffffc4 	movi	r3,-1
10102e78:	10c00526 	beq	r2,r3,10102e90 <_fstat_r+0x4c>
10102e7c:	dfc00217 	ldw	ra,8(sp)
10102e80:	dc400117 	ldw	r17,4(sp)
10102e84:	dc000017 	ldw	r16,0(sp)
10102e88:	dec00304 	addi	sp,sp,12
10102e8c:	f800283a 	ret
10102e90:	80c00017 	ldw	r3,0(r16)
10102e94:	183ff926 	beq	r3,zero,10102e7c <__alt_data_end+0xfffe2e7c>
10102e98:	88c00015 	stw	r3,0(r17)
10102e9c:	003ff706 	br	10102e7c <__alt_data_end+0xfffe2e7c>

10102ea0 <_isatty_r>:
10102ea0:	defffd04 	addi	sp,sp,-12
10102ea4:	dc000015 	stw	r16,0(sp)
10102ea8:	04040474 	movhi	r16,4113
10102eac:	dc400115 	stw	r17,4(sp)
10102eb0:	84231c04 	addi	r16,r16,-29584
10102eb4:	2023883a 	mov	r17,r4
10102eb8:	2809883a 	mov	r4,r5
10102ebc:	dfc00215 	stw	ra,8(sp)
10102ec0:	80000015 	stw	zero,0(r16)
10102ec4:	01033080 	call	10103308 <isatty>
10102ec8:	00ffffc4 	movi	r3,-1
10102ecc:	10c00526 	beq	r2,r3,10102ee4 <_isatty_r+0x44>
10102ed0:	dfc00217 	ldw	ra,8(sp)
10102ed4:	dc400117 	ldw	r17,4(sp)
10102ed8:	dc000017 	ldw	r16,0(sp)
10102edc:	dec00304 	addi	sp,sp,12
10102ee0:	f800283a 	ret
10102ee4:	80c00017 	ldw	r3,0(r16)
10102ee8:	183ff926 	beq	r3,zero,10102ed0 <__alt_data_end+0xfffe2ed0>
10102eec:	88c00015 	stw	r3,0(r17)
10102ef0:	003ff706 	br	10102ed0 <__alt_data_end+0xfffe2ed0>

10102ef4 <__divsi3>:
10102ef4:	20001b16 	blt	r4,zero,10102f64 <__divsi3+0x70>
10102ef8:	000f883a 	mov	r7,zero
10102efc:	28001616 	blt	r5,zero,10102f58 <__divsi3+0x64>
10102f00:	200d883a 	mov	r6,r4
10102f04:	29001a2e 	bgeu	r5,r4,10102f70 <__divsi3+0x7c>
10102f08:	00800804 	movi	r2,32
10102f0c:	00c00044 	movi	r3,1
10102f10:	00000106 	br	10102f18 <__divsi3+0x24>
10102f14:	10000d26 	beq	r2,zero,10102f4c <__divsi3+0x58>
10102f18:	294b883a 	add	r5,r5,r5
10102f1c:	10bfffc4 	addi	r2,r2,-1
10102f20:	18c7883a 	add	r3,r3,r3
10102f24:	293ffb36 	bltu	r5,r4,10102f14 <__alt_data_end+0xfffe2f14>
10102f28:	0005883a 	mov	r2,zero
10102f2c:	18000726 	beq	r3,zero,10102f4c <__divsi3+0x58>
10102f30:	0005883a 	mov	r2,zero
10102f34:	31400236 	bltu	r6,r5,10102f40 <__divsi3+0x4c>
10102f38:	314dc83a 	sub	r6,r6,r5
10102f3c:	10c4b03a 	or	r2,r2,r3
10102f40:	1806d07a 	srli	r3,r3,1
10102f44:	280ad07a 	srli	r5,r5,1
10102f48:	183ffa1e 	bne	r3,zero,10102f34 <__alt_data_end+0xfffe2f34>
10102f4c:	38000126 	beq	r7,zero,10102f54 <__divsi3+0x60>
10102f50:	0085c83a 	sub	r2,zero,r2
10102f54:	f800283a 	ret
10102f58:	014bc83a 	sub	r5,zero,r5
10102f5c:	39c0005c 	xori	r7,r7,1
10102f60:	003fe706 	br	10102f00 <__alt_data_end+0xfffe2f00>
10102f64:	0109c83a 	sub	r4,zero,r4
10102f68:	01c00044 	movi	r7,1
10102f6c:	003fe306 	br	10102efc <__alt_data_end+0xfffe2efc>
10102f70:	00c00044 	movi	r3,1
10102f74:	003fee06 	br	10102f30 <__alt_data_end+0xfffe2f30>

10102f78 <__modsi3>:
10102f78:	20001716 	blt	r4,zero,10102fd8 <__modsi3+0x60>
10102f7c:	000f883a 	mov	r7,zero
10102f80:	2005883a 	mov	r2,r4
10102f84:	28001216 	blt	r5,zero,10102fd0 <__modsi3+0x58>
10102f88:	2900162e 	bgeu	r5,r4,10102fe4 <__modsi3+0x6c>
10102f8c:	01800804 	movi	r6,32
10102f90:	00c00044 	movi	r3,1
10102f94:	00000106 	br	10102f9c <__modsi3+0x24>
10102f98:	30000a26 	beq	r6,zero,10102fc4 <__modsi3+0x4c>
10102f9c:	294b883a 	add	r5,r5,r5
10102fa0:	31bfffc4 	addi	r6,r6,-1
10102fa4:	18c7883a 	add	r3,r3,r3
10102fa8:	293ffb36 	bltu	r5,r4,10102f98 <__alt_data_end+0xfffe2f98>
10102fac:	18000526 	beq	r3,zero,10102fc4 <__modsi3+0x4c>
10102fb0:	1806d07a 	srli	r3,r3,1
10102fb4:	11400136 	bltu	r2,r5,10102fbc <__modsi3+0x44>
10102fb8:	1145c83a 	sub	r2,r2,r5
10102fbc:	280ad07a 	srli	r5,r5,1
10102fc0:	183ffb1e 	bne	r3,zero,10102fb0 <__alt_data_end+0xfffe2fb0>
10102fc4:	38000126 	beq	r7,zero,10102fcc <__modsi3+0x54>
10102fc8:	0085c83a 	sub	r2,zero,r2
10102fcc:	f800283a 	ret
10102fd0:	014bc83a 	sub	r5,zero,r5
10102fd4:	003fec06 	br	10102f88 <__alt_data_end+0xfffe2f88>
10102fd8:	0109c83a 	sub	r4,zero,r4
10102fdc:	01c00044 	movi	r7,1
10102fe0:	003fe706 	br	10102f80 <__alt_data_end+0xfffe2f80>
10102fe4:	00c00044 	movi	r3,1
10102fe8:	003ff106 	br	10102fb0 <__alt_data_end+0xfffe2fb0>

10102fec <__udivsi3>:
10102fec:	200d883a 	mov	r6,r4
10102ff0:	2900152e 	bgeu	r5,r4,10103048 <__udivsi3+0x5c>
10102ff4:	28001416 	blt	r5,zero,10103048 <__udivsi3+0x5c>
10102ff8:	00800804 	movi	r2,32
10102ffc:	00c00044 	movi	r3,1
10103000:	00000206 	br	1010300c <__udivsi3+0x20>
10103004:	10000e26 	beq	r2,zero,10103040 <__udivsi3+0x54>
10103008:	28000516 	blt	r5,zero,10103020 <__udivsi3+0x34>
1010300c:	294b883a 	add	r5,r5,r5
10103010:	10bfffc4 	addi	r2,r2,-1
10103014:	18c7883a 	add	r3,r3,r3
10103018:	293ffa36 	bltu	r5,r4,10103004 <__alt_data_end+0xfffe3004>
1010301c:	18000826 	beq	r3,zero,10103040 <__udivsi3+0x54>
10103020:	0005883a 	mov	r2,zero
10103024:	31400236 	bltu	r6,r5,10103030 <__udivsi3+0x44>
10103028:	314dc83a 	sub	r6,r6,r5
1010302c:	10c4b03a 	or	r2,r2,r3
10103030:	1806d07a 	srli	r3,r3,1
10103034:	280ad07a 	srli	r5,r5,1
10103038:	183ffa1e 	bne	r3,zero,10103024 <__alt_data_end+0xfffe3024>
1010303c:	f800283a 	ret
10103040:	0005883a 	mov	r2,zero
10103044:	f800283a 	ret
10103048:	00c00044 	movi	r3,1
1010304c:	003ff406 	br	10103020 <__alt_data_end+0xfffe3020>

10103050 <__umodsi3>:
10103050:	2005883a 	mov	r2,r4
10103054:	2900122e 	bgeu	r5,r4,101030a0 <__umodsi3+0x50>
10103058:	28001116 	blt	r5,zero,101030a0 <__umodsi3+0x50>
1010305c:	01800804 	movi	r6,32
10103060:	00c00044 	movi	r3,1
10103064:	00000206 	br	10103070 <__umodsi3+0x20>
10103068:	30000c26 	beq	r6,zero,1010309c <__umodsi3+0x4c>
1010306c:	28000516 	blt	r5,zero,10103084 <__umodsi3+0x34>
10103070:	294b883a 	add	r5,r5,r5
10103074:	31bfffc4 	addi	r6,r6,-1
10103078:	18c7883a 	add	r3,r3,r3
1010307c:	293ffa36 	bltu	r5,r4,10103068 <__alt_data_end+0xfffe3068>
10103080:	18000626 	beq	r3,zero,1010309c <__umodsi3+0x4c>
10103084:	1806d07a 	srli	r3,r3,1
10103088:	11400136 	bltu	r2,r5,10103090 <__umodsi3+0x40>
1010308c:	1145c83a 	sub	r2,r2,r5
10103090:	280ad07a 	srli	r5,r5,1
10103094:	183ffb1e 	bne	r3,zero,10103084 <__alt_data_end+0xfffe3084>
10103098:	f800283a 	ret
1010309c:	f800283a 	ret
101030a0:	00c00044 	movi	r3,1
101030a4:	003ff706 	br	10103084 <__alt_data_end+0xfffe3084>

101030a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
101030a8:	defffe04 	addi	sp,sp,-8
101030ac:	dfc00115 	stw	ra,4(sp)
101030b0:	df000015 	stw	fp,0(sp)
101030b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
101030b8:	d0a00917 	ldw	r2,-32732(gp)
101030bc:	10000326 	beq	r2,zero,101030cc <alt_get_errno+0x24>
101030c0:	d0a00917 	ldw	r2,-32732(gp)
101030c4:	103ee83a 	callr	r2
101030c8:	00000106 	br	101030d0 <alt_get_errno+0x28>
101030cc:	d0a6ac04 	addi	r2,gp,-25936
}
101030d0:	e037883a 	mov	sp,fp
101030d4:	dfc00117 	ldw	ra,4(sp)
101030d8:	df000017 	ldw	fp,0(sp)
101030dc:	dec00204 	addi	sp,sp,8
101030e0:	f800283a 	ret

101030e4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
101030e4:	defffb04 	addi	sp,sp,-20
101030e8:	dfc00415 	stw	ra,16(sp)
101030ec:	df000315 	stw	fp,12(sp)
101030f0:	df000304 	addi	fp,sp,12
101030f4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
101030f8:	e0bfff17 	ldw	r2,-4(fp)
101030fc:	10000616 	blt	r2,zero,10103118 <close+0x34>
10103100:	e0bfff17 	ldw	r2,-4(fp)
10103104:	10c00324 	muli	r3,r2,12
10103108:	00840434 	movhi	r2,4112
1010310c:	1097f804 	addi	r2,r2,24544
10103110:	1885883a 	add	r2,r3,r2
10103114:	00000106 	br	1010311c <close+0x38>
10103118:	0005883a 	mov	r2,zero
1010311c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
10103120:	e0bffd17 	ldw	r2,-12(fp)
10103124:	10001926 	beq	r2,zero,1010318c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
10103128:	e0bffd17 	ldw	r2,-12(fp)
1010312c:	10800017 	ldw	r2,0(r2)
10103130:	10800417 	ldw	r2,16(r2)
10103134:	10000626 	beq	r2,zero,10103150 <close+0x6c>
10103138:	e0bffd17 	ldw	r2,-12(fp)
1010313c:	10800017 	ldw	r2,0(r2)
10103140:	10800417 	ldw	r2,16(r2)
10103144:	e13ffd17 	ldw	r4,-12(fp)
10103148:	103ee83a 	callr	r2
1010314c:	00000106 	br	10103154 <close+0x70>
10103150:	0005883a 	mov	r2,zero
10103154:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
10103158:	e13fff17 	ldw	r4,-4(fp)
1010315c:	01037a40 	call	101037a4 <alt_release_fd>
    if (rval < 0)
10103160:	e0bffe17 	ldw	r2,-8(fp)
10103164:	1000070e 	bge	r2,zero,10103184 <close+0xa0>
    {
      ALT_ERRNO = -rval;
10103168:	01030a80 	call	101030a8 <alt_get_errno>
1010316c:	1007883a 	mov	r3,r2
10103170:	e0bffe17 	ldw	r2,-8(fp)
10103174:	0085c83a 	sub	r2,zero,r2
10103178:	18800015 	stw	r2,0(r3)
      return -1;
1010317c:	00bfffc4 	movi	r2,-1
10103180:	00000706 	br	101031a0 <close+0xbc>
    }
    return 0;
10103184:	0005883a 	mov	r2,zero
10103188:	00000506 	br	101031a0 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1010318c:	01030a80 	call	101030a8 <alt_get_errno>
10103190:	1007883a 	mov	r3,r2
10103194:	00801444 	movi	r2,81
10103198:	18800015 	stw	r2,0(r3)
    return -1;
1010319c:	00bfffc4 	movi	r2,-1
  }
}
101031a0:	e037883a 	mov	sp,fp
101031a4:	dfc00117 	ldw	ra,4(sp)
101031a8:	df000017 	ldw	fp,0(sp)
101031ac:	dec00204 	addi	sp,sp,8
101031b0:	f800283a 	ret

101031b4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
101031b4:	defffc04 	addi	sp,sp,-16
101031b8:	df000315 	stw	fp,12(sp)
101031bc:	df000304 	addi	fp,sp,12
101031c0:	e13ffd15 	stw	r4,-12(fp)
101031c4:	e17ffe15 	stw	r5,-8(fp)
101031c8:	e1bfff15 	stw	r6,-4(fp)
  return len;
101031cc:	e0bfff17 	ldw	r2,-4(fp)
}
101031d0:	e037883a 	mov	sp,fp
101031d4:	df000017 	ldw	fp,0(sp)
101031d8:	dec00104 	addi	sp,sp,4
101031dc:	f800283a 	ret

101031e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
101031e0:	defffe04 	addi	sp,sp,-8
101031e4:	dfc00115 	stw	ra,4(sp)
101031e8:	df000015 	stw	fp,0(sp)
101031ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
101031f0:	d0a00917 	ldw	r2,-32732(gp)
101031f4:	10000326 	beq	r2,zero,10103204 <alt_get_errno+0x24>
101031f8:	d0a00917 	ldw	r2,-32732(gp)
101031fc:	103ee83a 	callr	r2
10103200:	00000106 	br	10103208 <alt_get_errno+0x28>
10103204:	d0a6ac04 	addi	r2,gp,-25936
}
10103208:	e037883a 	mov	sp,fp
1010320c:	dfc00117 	ldw	ra,4(sp)
10103210:	df000017 	ldw	fp,0(sp)
10103214:	dec00204 	addi	sp,sp,8
10103218:	f800283a 	ret

1010321c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1010321c:	defffb04 	addi	sp,sp,-20
10103220:	dfc00415 	stw	ra,16(sp)
10103224:	df000315 	stw	fp,12(sp)
10103228:	df000304 	addi	fp,sp,12
1010322c:	e13ffe15 	stw	r4,-8(fp)
10103230:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10103234:	e0bffe17 	ldw	r2,-8(fp)
10103238:	10000616 	blt	r2,zero,10103254 <fstat+0x38>
1010323c:	e0bffe17 	ldw	r2,-8(fp)
10103240:	10c00324 	muli	r3,r2,12
10103244:	00840434 	movhi	r2,4112
10103248:	1097f804 	addi	r2,r2,24544
1010324c:	1885883a 	add	r2,r3,r2
10103250:	00000106 	br	10103258 <fstat+0x3c>
10103254:	0005883a 	mov	r2,zero
10103258:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1010325c:	e0bffd17 	ldw	r2,-12(fp)
10103260:	10001026 	beq	r2,zero,101032a4 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
10103264:	e0bffd17 	ldw	r2,-12(fp)
10103268:	10800017 	ldw	r2,0(r2)
1010326c:	10800817 	ldw	r2,32(r2)
10103270:	10000726 	beq	r2,zero,10103290 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
10103274:	e0bffd17 	ldw	r2,-12(fp)
10103278:	10800017 	ldw	r2,0(r2)
1010327c:	10800817 	ldw	r2,32(r2)
10103280:	e17fff17 	ldw	r5,-4(fp)
10103284:	e13ffd17 	ldw	r4,-12(fp)
10103288:	103ee83a 	callr	r2
1010328c:	00000a06 	br	101032b8 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
10103290:	e0bfff17 	ldw	r2,-4(fp)
10103294:	00c80004 	movi	r3,8192
10103298:	10c00115 	stw	r3,4(r2)
      return 0;
1010329c:	0005883a 	mov	r2,zero
101032a0:	00000506 	br	101032b8 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
101032a4:	01031e00 	call	101031e0 <alt_get_errno>
101032a8:	1007883a 	mov	r3,r2
101032ac:	00801444 	movi	r2,81
101032b0:	18800015 	stw	r2,0(r3)
    return -1;
101032b4:	00bfffc4 	movi	r2,-1
  }
}
101032b8:	e037883a 	mov	sp,fp
101032bc:	dfc00117 	ldw	ra,4(sp)
101032c0:	df000017 	ldw	fp,0(sp)
101032c4:	dec00204 	addi	sp,sp,8
101032c8:	f800283a 	ret

101032cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
101032cc:	defffe04 	addi	sp,sp,-8
101032d0:	dfc00115 	stw	ra,4(sp)
101032d4:	df000015 	stw	fp,0(sp)
101032d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
101032dc:	d0a00917 	ldw	r2,-32732(gp)
101032e0:	10000326 	beq	r2,zero,101032f0 <alt_get_errno+0x24>
101032e4:	d0a00917 	ldw	r2,-32732(gp)
101032e8:	103ee83a 	callr	r2
101032ec:	00000106 	br	101032f4 <alt_get_errno+0x28>
101032f0:	d0a6ac04 	addi	r2,gp,-25936
}
101032f4:	e037883a 	mov	sp,fp
101032f8:	dfc00117 	ldw	ra,4(sp)
101032fc:	df000017 	ldw	fp,0(sp)
10103300:	dec00204 	addi	sp,sp,8
10103304:	f800283a 	ret

10103308 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
10103308:	deffed04 	addi	sp,sp,-76
1010330c:	dfc01215 	stw	ra,72(sp)
10103310:	df001115 	stw	fp,68(sp)
10103314:	df001104 	addi	fp,sp,68
10103318:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1010331c:	e0bfff17 	ldw	r2,-4(fp)
10103320:	10000616 	blt	r2,zero,1010333c <isatty+0x34>
10103324:	e0bfff17 	ldw	r2,-4(fp)
10103328:	10c00324 	muli	r3,r2,12
1010332c:	00840434 	movhi	r2,4112
10103330:	1097f804 	addi	r2,r2,24544
10103334:	1885883a 	add	r2,r3,r2
10103338:	00000106 	br	10103340 <isatty+0x38>
1010333c:	0005883a 	mov	r2,zero
10103340:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
10103344:	e0bfef17 	ldw	r2,-68(fp)
10103348:	10000e26 	beq	r2,zero,10103384 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1010334c:	e0bfef17 	ldw	r2,-68(fp)
10103350:	10800017 	ldw	r2,0(r2)
10103354:	10800817 	ldw	r2,32(r2)
10103358:	1000021e 	bne	r2,zero,10103364 <isatty+0x5c>
    {
      return 1;
1010335c:	00800044 	movi	r2,1
10103360:	00000d06 	br	10103398 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
10103364:	e0bff004 	addi	r2,fp,-64
10103368:	100b883a 	mov	r5,r2
1010336c:	e13fff17 	ldw	r4,-4(fp)
10103370:	010321c0 	call	1010321c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
10103374:	e0bff117 	ldw	r2,-60(fp)
10103378:	10880020 	cmpeqi	r2,r2,8192
1010337c:	10803fcc 	andi	r2,r2,255
10103380:	00000506 	br	10103398 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
10103384:	01032cc0 	call	101032cc <alt_get_errno>
10103388:	1007883a 	mov	r3,r2
1010338c:	00801444 	movi	r2,81
10103390:	18800015 	stw	r2,0(r3)
    return 0;
10103394:	0005883a 	mov	r2,zero
  }
}
10103398:	e037883a 	mov	sp,fp
1010339c:	dfc00117 	ldw	ra,4(sp)
101033a0:	df000017 	ldw	fp,0(sp)
101033a4:	dec00204 	addi	sp,sp,8
101033a8:	f800283a 	ret

101033ac <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
101033ac:	defffc04 	addi	sp,sp,-16
101033b0:	df000315 	stw	fp,12(sp)
101033b4:	df000304 	addi	fp,sp,12
101033b8:	e13ffd15 	stw	r4,-12(fp)
101033bc:	e17ffe15 	stw	r5,-8(fp)
101033c0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
101033c4:	e0fffe17 	ldw	r3,-8(fp)
101033c8:	e0bffd17 	ldw	r2,-12(fp)
101033cc:	18800c26 	beq	r3,r2,10103400 <alt_load_section+0x54>
  {
    while( to != end )
101033d0:	00000806 	br	101033f4 <alt_load_section+0x48>
    {
      *to++ = *from++;
101033d4:	e0bffe17 	ldw	r2,-8(fp)
101033d8:	10c00104 	addi	r3,r2,4
101033dc:	e0fffe15 	stw	r3,-8(fp)
101033e0:	e0fffd17 	ldw	r3,-12(fp)
101033e4:	19000104 	addi	r4,r3,4
101033e8:	e13ffd15 	stw	r4,-12(fp)
101033ec:	18c00017 	ldw	r3,0(r3)
101033f0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
101033f4:	e0fffe17 	ldw	r3,-8(fp)
101033f8:	e0bfff17 	ldw	r2,-4(fp)
101033fc:	18bff51e 	bne	r3,r2,101033d4 <__alt_data_end+0xfffe33d4>
    {
      *to++ = *from++;
    }
  }
}
10103400:	0001883a 	nop
10103404:	e037883a 	mov	sp,fp
10103408:	df000017 	ldw	fp,0(sp)
1010340c:	dec00104 	addi	sp,sp,4
10103410:	f800283a 	ret

10103414 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
10103414:	defffe04 	addi	sp,sp,-8
10103418:	dfc00115 	stw	ra,4(sp)
1010341c:	df000015 	stw	fp,0(sp)
10103420:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
10103424:	01840434 	movhi	r6,4112
10103428:	319c7e04 	addi	r6,r6,29176
1010342c:	01440434 	movhi	r5,4112
10103430:	2955e304 	addi	r5,r5,22412
10103434:	01040434 	movhi	r4,4112
10103438:	211c7e04 	addi	r4,r4,29176
1010343c:	01033ac0 	call	101033ac <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
10103440:	01840434 	movhi	r6,4112
10103444:	31809104 	addi	r6,r6,580
10103448:	01440434 	movhi	r5,4112
1010344c:	29400804 	addi	r5,r5,32
10103450:	01040434 	movhi	r4,4112
10103454:	21000804 	addi	r4,r4,32
10103458:	01033ac0 	call	101033ac <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
1010345c:	01840434 	movhi	r6,4112
10103460:	3195e304 	addi	r6,r6,22412
10103464:	01440434 	movhi	r5,4112
10103468:	2955d204 	addi	r5,r5,22344
1010346c:	01040434 	movhi	r4,4112
10103470:	2115d204 	addi	r4,r4,22344
10103474:	01033ac0 	call	101033ac <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
10103478:	01046340 	call	10104634 <alt_dcache_flush_all>
  alt_icache_flush_all();
1010347c:	010481c0 	call	1010481c <alt_icache_flush_all>
}
10103480:	0001883a 	nop
10103484:	e037883a 	mov	sp,fp
10103488:	dfc00117 	ldw	ra,4(sp)
1010348c:	df000017 	ldw	fp,0(sp)
10103490:	dec00204 	addi	sp,sp,8
10103494:	f800283a 	ret

10103498 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10103498:	defffe04 	addi	sp,sp,-8
1010349c:	dfc00115 	stw	ra,4(sp)
101034a0:	df000015 	stw	fp,0(sp)
101034a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
101034a8:	d0a00917 	ldw	r2,-32732(gp)
101034ac:	10000326 	beq	r2,zero,101034bc <alt_get_errno+0x24>
101034b0:	d0a00917 	ldw	r2,-32732(gp)
101034b4:	103ee83a 	callr	r2
101034b8:	00000106 	br	101034c0 <alt_get_errno+0x28>
101034bc:	d0a6ac04 	addi	r2,gp,-25936
}
101034c0:	e037883a 	mov	sp,fp
101034c4:	dfc00117 	ldw	ra,4(sp)
101034c8:	df000017 	ldw	fp,0(sp)
101034cc:	dec00204 	addi	sp,sp,8
101034d0:	f800283a 	ret

101034d4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
101034d4:	defff904 	addi	sp,sp,-28
101034d8:	dfc00615 	stw	ra,24(sp)
101034dc:	df000515 	stw	fp,20(sp)
101034e0:	df000504 	addi	fp,sp,20
101034e4:	e13ffd15 	stw	r4,-12(fp)
101034e8:	e17ffe15 	stw	r5,-8(fp)
101034ec:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
101034f0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
101034f4:	e0bffd17 	ldw	r2,-12(fp)
101034f8:	10000616 	blt	r2,zero,10103514 <lseek+0x40>
101034fc:	e0bffd17 	ldw	r2,-12(fp)
10103500:	10c00324 	muli	r3,r2,12
10103504:	00840434 	movhi	r2,4112
10103508:	1097f804 	addi	r2,r2,24544
1010350c:	1885883a 	add	r2,r3,r2
10103510:	00000106 	br	10103518 <lseek+0x44>
10103514:	0005883a 	mov	r2,zero
10103518:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
1010351c:	e0bffc17 	ldw	r2,-16(fp)
10103520:	10001026 	beq	r2,zero,10103564 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
10103524:	e0bffc17 	ldw	r2,-16(fp)
10103528:	10800017 	ldw	r2,0(r2)
1010352c:	10800717 	ldw	r2,28(r2)
10103530:	10000926 	beq	r2,zero,10103558 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
10103534:	e0bffc17 	ldw	r2,-16(fp)
10103538:	10800017 	ldw	r2,0(r2)
1010353c:	10800717 	ldw	r2,28(r2)
10103540:	e1bfff17 	ldw	r6,-4(fp)
10103544:	e17ffe17 	ldw	r5,-8(fp)
10103548:	e13ffc17 	ldw	r4,-16(fp)
1010354c:	103ee83a 	callr	r2
10103550:	e0bffb15 	stw	r2,-20(fp)
10103554:	00000506 	br	1010356c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
10103558:	00bfde84 	movi	r2,-134
1010355c:	e0bffb15 	stw	r2,-20(fp)
10103560:	00000206 	br	1010356c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
10103564:	00bfebc4 	movi	r2,-81
10103568:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
1010356c:	e0bffb17 	ldw	r2,-20(fp)
10103570:	1000070e 	bge	r2,zero,10103590 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
10103574:	01034980 	call	10103498 <alt_get_errno>
10103578:	1007883a 	mov	r3,r2
1010357c:	e0bffb17 	ldw	r2,-20(fp)
10103580:	0085c83a 	sub	r2,zero,r2
10103584:	18800015 	stw	r2,0(r3)
    rc = -1;
10103588:	00bfffc4 	movi	r2,-1
1010358c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
10103590:	e0bffb17 	ldw	r2,-20(fp)
}
10103594:	e037883a 	mov	sp,fp
10103598:	dfc00117 	ldw	ra,4(sp)
1010359c:	df000017 	ldw	fp,0(sp)
101035a0:	dec00204 	addi	sp,sp,8
101035a4:	f800283a 	ret

101035a8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
101035a8:	defffd04 	addi	sp,sp,-12
101035ac:	dfc00215 	stw	ra,8(sp)
101035b0:	df000115 	stw	fp,4(sp)
101035b4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
101035b8:	0009883a 	mov	r4,zero
101035bc:	0103a200 	call	10103a20 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
101035c0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
101035c4:	0103a580 	call	10103a58 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
101035c8:	01840434 	movhi	r6,4112
101035cc:	3195d904 	addi	r6,r6,22372
101035d0:	01440434 	movhi	r5,4112
101035d4:	2955d904 	addi	r5,r5,22372
101035d8:	01040434 	movhi	r4,4112
101035dc:	2115d904 	addi	r4,r4,22372
101035e0:	0104bb40 	call	10104bb4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
101035e4:	010475c0 	call	1010475c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
101035e8:	01040434 	movhi	r4,4112
101035ec:	2111ef04 	addi	r4,r4,18364
101035f0:	01053b40 	call	101053b4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
101035f4:	d0a6ad17 	ldw	r2,-25932(gp)
101035f8:	d0e6ae17 	ldw	r3,-25928(gp)
101035fc:	d126af17 	ldw	r4,-25924(gp)
10103600:	200d883a 	mov	r6,r4
10103604:	180b883a 	mov	r5,r3
10103608:	1009883a 	mov	r4,r2
1010360c:	01002900 	call	10100290 <main>
10103610:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
10103614:	01000044 	movi	r4,1
10103618:	01030e40 	call	101030e4 <close>
  exit (result);
1010361c:	e13fff17 	ldw	r4,-4(fp)
10103620:	01053c80 	call	101053c8 <exit>

10103624 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
10103624:	defffe04 	addi	sp,sp,-8
10103628:	df000115 	stw	fp,4(sp)
1010362c:	df000104 	addi	fp,sp,4
10103630:	e13fff15 	stw	r4,-4(fp)
}
10103634:	0001883a 	nop
10103638:	e037883a 	mov	sp,fp
1010363c:	df000017 	ldw	fp,0(sp)
10103640:	dec00104 	addi	sp,sp,4
10103644:	f800283a 	ret

10103648 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
10103648:	defffe04 	addi	sp,sp,-8
1010364c:	df000115 	stw	fp,4(sp)
10103650:	df000104 	addi	fp,sp,4
10103654:	e13fff15 	stw	r4,-4(fp)
}
10103658:	0001883a 	nop
1010365c:	e037883a 	mov	sp,fp
10103660:	df000017 	ldw	fp,0(sp)
10103664:	dec00104 	addi	sp,sp,4
10103668:	f800283a 	ret

1010366c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010366c:	defffe04 	addi	sp,sp,-8
10103670:	dfc00115 	stw	ra,4(sp)
10103674:	df000015 	stw	fp,0(sp)
10103678:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010367c:	d0a00917 	ldw	r2,-32732(gp)
10103680:	10000326 	beq	r2,zero,10103690 <alt_get_errno+0x24>
10103684:	d0a00917 	ldw	r2,-32732(gp)
10103688:	103ee83a 	callr	r2
1010368c:	00000106 	br	10103694 <alt_get_errno+0x28>
10103690:	d0a6ac04 	addi	r2,gp,-25936
}
10103694:	e037883a 	mov	sp,fp
10103698:	dfc00117 	ldw	ra,4(sp)
1010369c:	df000017 	ldw	fp,0(sp)
101036a0:	dec00204 	addi	sp,sp,8
101036a4:	f800283a 	ret

101036a8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
101036a8:	defff904 	addi	sp,sp,-28
101036ac:	dfc00615 	stw	ra,24(sp)
101036b0:	df000515 	stw	fp,20(sp)
101036b4:	df000504 	addi	fp,sp,20
101036b8:	e13ffd15 	stw	r4,-12(fp)
101036bc:	e17ffe15 	stw	r5,-8(fp)
101036c0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
101036c4:	e0bffd17 	ldw	r2,-12(fp)
101036c8:	10000616 	blt	r2,zero,101036e4 <read+0x3c>
101036cc:	e0bffd17 	ldw	r2,-12(fp)
101036d0:	10c00324 	muli	r3,r2,12
101036d4:	00840434 	movhi	r2,4112
101036d8:	1097f804 	addi	r2,r2,24544
101036dc:	1885883a 	add	r2,r3,r2
101036e0:	00000106 	br	101036e8 <read+0x40>
101036e4:	0005883a 	mov	r2,zero
101036e8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
101036ec:	e0bffb17 	ldw	r2,-20(fp)
101036f0:	10002226 	beq	r2,zero,1010377c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
101036f4:	e0bffb17 	ldw	r2,-20(fp)
101036f8:	10800217 	ldw	r2,8(r2)
101036fc:	108000cc 	andi	r2,r2,3
10103700:	10800060 	cmpeqi	r2,r2,1
10103704:	1000181e 	bne	r2,zero,10103768 <read+0xc0>
        (fd->dev->read))
10103708:	e0bffb17 	ldw	r2,-20(fp)
1010370c:	10800017 	ldw	r2,0(r2)
10103710:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10103714:	10001426 	beq	r2,zero,10103768 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
10103718:	e0bffb17 	ldw	r2,-20(fp)
1010371c:	10800017 	ldw	r2,0(r2)
10103720:	10800517 	ldw	r2,20(r2)
10103724:	e0ffff17 	ldw	r3,-4(fp)
10103728:	180d883a 	mov	r6,r3
1010372c:	e17ffe17 	ldw	r5,-8(fp)
10103730:	e13ffb17 	ldw	r4,-20(fp)
10103734:	103ee83a 	callr	r2
10103738:	e0bffc15 	stw	r2,-16(fp)
1010373c:	e0bffc17 	ldw	r2,-16(fp)
10103740:	1000070e 	bge	r2,zero,10103760 <read+0xb8>
        {
          ALT_ERRNO = -rval;
10103744:	010366c0 	call	1010366c <alt_get_errno>
10103748:	1007883a 	mov	r3,r2
1010374c:	e0bffc17 	ldw	r2,-16(fp)
10103750:	0085c83a 	sub	r2,zero,r2
10103754:	18800015 	stw	r2,0(r3)
          return -1;
10103758:	00bfffc4 	movi	r2,-1
1010375c:	00000c06 	br	10103790 <read+0xe8>
        }
        return rval;
10103760:	e0bffc17 	ldw	r2,-16(fp)
10103764:	00000a06 	br	10103790 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
10103768:	010366c0 	call	1010366c <alt_get_errno>
1010376c:	1007883a 	mov	r3,r2
10103770:	00800344 	movi	r2,13
10103774:	18800015 	stw	r2,0(r3)
10103778:	00000406 	br	1010378c <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
1010377c:	010366c0 	call	1010366c <alt_get_errno>
10103780:	1007883a 	mov	r3,r2
10103784:	00801444 	movi	r2,81
10103788:	18800015 	stw	r2,0(r3)
  }
  return -1;
1010378c:	00bfffc4 	movi	r2,-1
}
10103790:	e037883a 	mov	sp,fp
10103794:	dfc00117 	ldw	ra,4(sp)
10103798:	df000017 	ldw	fp,0(sp)
1010379c:	dec00204 	addi	sp,sp,8
101037a0:	f800283a 	ret

101037a4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
101037a4:	defffe04 	addi	sp,sp,-8
101037a8:	df000115 	stw	fp,4(sp)
101037ac:	df000104 	addi	fp,sp,4
101037b0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
101037b4:	e0bfff17 	ldw	r2,-4(fp)
101037b8:	108000d0 	cmplti	r2,r2,3
101037bc:	10000d1e 	bne	r2,zero,101037f4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
101037c0:	00840434 	movhi	r2,4112
101037c4:	1097f804 	addi	r2,r2,24544
101037c8:	e0ffff17 	ldw	r3,-4(fp)
101037cc:	18c00324 	muli	r3,r3,12
101037d0:	10c5883a 	add	r2,r2,r3
101037d4:	10800204 	addi	r2,r2,8
101037d8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
101037dc:	00840434 	movhi	r2,4112
101037e0:	1097f804 	addi	r2,r2,24544
101037e4:	e0ffff17 	ldw	r3,-4(fp)
101037e8:	18c00324 	muli	r3,r3,12
101037ec:	10c5883a 	add	r2,r2,r3
101037f0:	10000015 	stw	zero,0(r2)
  }
}
101037f4:	0001883a 	nop
101037f8:	e037883a 	mov	sp,fp
101037fc:	df000017 	ldw	fp,0(sp)
10103800:	dec00104 	addi	sp,sp,4
10103804:	f800283a 	ret

10103808 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
10103808:	defff904 	addi	sp,sp,-28
1010380c:	df000615 	stw	fp,24(sp)
10103810:	df000604 	addi	fp,sp,24
10103814:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10103818:	0005303a 	rdctl	r2,status
1010381c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10103820:	e0fffe17 	ldw	r3,-8(fp)
10103824:	00bfff84 	movi	r2,-2
10103828:	1884703a 	and	r2,r3,r2
1010382c:	1001703a 	wrctl	status,r2
  
  return context;
10103830:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
10103834:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
10103838:	d0a00a17 	ldw	r2,-32728(gp)
1010383c:	10c000c4 	addi	r3,r2,3
10103840:	00bfff04 	movi	r2,-4
10103844:	1884703a 	and	r2,r3,r2
10103848:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1010384c:	d0e00a17 	ldw	r3,-32728(gp)
10103850:	e0bfff17 	ldw	r2,-4(fp)
10103854:	1887883a 	add	r3,r3,r2
10103858:	008404b4 	movhi	r2,4114
1010385c:	10800004 	addi	r2,r2,0
10103860:	10c0062e 	bgeu	r2,r3,1010387c <sbrk+0x74>
10103864:	e0bffb17 	ldw	r2,-20(fp)
10103868:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1010386c:	e0bffa17 	ldw	r2,-24(fp)
10103870:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
10103874:	00bfffc4 	movi	r2,-1
10103878:	00000b06 	br	101038a8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
1010387c:	d0a00a17 	ldw	r2,-32728(gp)
10103880:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
10103884:	d0e00a17 	ldw	r3,-32728(gp)
10103888:	e0bfff17 	ldw	r2,-4(fp)
1010388c:	1885883a 	add	r2,r3,r2
10103890:	d0a00a15 	stw	r2,-32728(gp)
10103894:	e0bffb17 	ldw	r2,-20(fp)
10103898:	e0bffc15 	stw	r2,-16(fp)
1010389c:	e0bffc17 	ldw	r2,-16(fp)
101038a0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
101038a4:	e0bffd17 	ldw	r2,-12(fp)
} 
101038a8:	e037883a 	mov	sp,fp
101038ac:	df000017 	ldw	fp,0(sp)
101038b0:	dec00104 	addi	sp,sp,4
101038b4:	f800283a 	ret

101038b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
101038b8:	defffe04 	addi	sp,sp,-8
101038bc:	dfc00115 	stw	ra,4(sp)
101038c0:	df000015 	stw	fp,0(sp)
101038c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
101038c8:	d0a00917 	ldw	r2,-32732(gp)
101038cc:	10000326 	beq	r2,zero,101038dc <alt_get_errno+0x24>
101038d0:	d0a00917 	ldw	r2,-32732(gp)
101038d4:	103ee83a 	callr	r2
101038d8:	00000106 	br	101038e0 <alt_get_errno+0x28>
101038dc:	d0a6ac04 	addi	r2,gp,-25936
}
101038e0:	e037883a 	mov	sp,fp
101038e4:	dfc00117 	ldw	ra,4(sp)
101038e8:	df000017 	ldw	fp,0(sp)
101038ec:	dec00204 	addi	sp,sp,8
101038f0:	f800283a 	ret

101038f4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
101038f4:	defff904 	addi	sp,sp,-28
101038f8:	dfc00615 	stw	ra,24(sp)
101038fc:	df000515 	stw	fp,20(sp)
10103900:	df000504 	addi	fp,sp,20
10103904:	e13ffd15 	stw	r4,-12(fp)
10103908:	e17ffe15 	stw	r5,-8(fp)
1010390c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10103910:	e0bffd17 	ldw	r2,-12(fp)
10103914:	10000616 	blt	r2,zero,10103930 <write+0x3c>
10103918:	e0bffd17 	ldw	r2,-12(fp)
1010391c:	10c00324 	muli	r3,r2,12
10103920:	00840434 	movhi	r2,4112
10103924:	1097f804 	addi	r2,r2,24544
10103928:	1885883a 	add	r2,r3,r2
1010392c:	00000106 	br	10103934 <write+0x40>
10103930:	0005883a 	mov	r2,zero
10103934:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10103938:	e0bffb17 	ldw	r2,-20(fp)
1010393c:	10002126 	beq	r2,zero,101039c4 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
10103940:	e0bffb17 	ldw	r2,-20(fp)
10103944:	10800217 	ldw	r2,8(r2)
10103948:	108000cc 	andi	r2,r2,3
1010394c:	10001826 	beq	r2,zero,101039b0 <write+0xbc>
10103950:	e0bffb17 	ldw	r2,-20(fp)
10103954:	10800017 	ldw	r2,0(r2)
10103958:	10800617 	ldw	r2,24(r2)
1010395c:	10001426 	beq	r2,zero,101039b0 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
10103960:	e0bffb17 	ldw	r2,-20(fp)
10103964:	10800017 	ldw	r2,0(r2)
10103968:	10800617 	ldw	r2,24(r2)
1010396c:	e0ffff17 	ldw	r3,-4(fp)
10103970:	180d883a 	mov	r6,r3
10103974:	e17ffe17 	ldw	r5,-8(fp)
10103978:	e13ffb17 	ldw	r4,-20(fp)
1010397c:	103ee83a 	callr	r2
10103980:	e0bffc15 	stw	r2,-16(fp)
10103984:	e0bffc17 	ldw	r2,-16(fp)
10103988:	1000070e 	bge	r2,zero,101039a8 <write+0xb4>
      {
        ALT_ERRNO = -rval;
1010398c:	01038b80 	call	101038b8 <alt_get_errno>
10103990:	1007883a 	mov	r3,r2
10103994:	e0bffc17 	ldw	r2,-16(fp)
10103998:	0085c83a 	sub	r2,zero,r2
1010399c:	18800015 	stw	r2,0(r3)
        return -1;
101039a0:	00bfffc4 	movi	r2,-1
101039a4:	00000c06 	br	101039d8 <write+0xe4>
      }
      return rval;
101039a8:	e0bffc17 	ldw	r2,-16(fp)
101039ac:	00000a06 	br	101039d8 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
101039b0:	01038b80 	call	101038b8 <alt_get_errno>
101039b4:	1007883a 	mov	r3,r2
101039b8:	00800344 	movi	r2,13
101039bc:	18800015 	stw	r2,0(r3)
101039c0:	00000406 	br	101039d4 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
101039c4:	01038b80 	call	101038b8 <alt_get_errno>
101039c8:	1007883a 	mov	r3,r2
101039cc:	00801444 	movi	r2,81
101039d0:	18800015 	stw	r2,0(r3)
  }
  return -1;
101039d4:	00bfffc4 	movi	r2,-1
}
101039d8:	e037883a 	mov	sp,fp
101039dc:	dfc00117 	ldw	ra,4(sp)
101039e0:	df000017 	ldw	fp,0(sp)
101039e4:	dec00204 	addi	sp,sp,8
101039e8:	f800283a 	ret

101039ec <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
101039ec:	defffd04 	addi	sp,sp,-12
101039f0:	dfc00215 	stw	ra,8(sp)
101039f4:	df000115 	stw	fp,4(sp)
101039f8:	df000104 	addi	fp,sp,4
101039fc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
10103a00:	d1600604 	addi	r5,gp,-32744
10103a04:	e13fff17 	ldw	r4,-4(fp)
10103a08:	01046b80 	call	101046b8 <alt_dev_llist_insert>
}
10103a0c:	e037883a 	mov	sp,fp
10103a10:	dfc00117 	ldw	ra,4(sp)
10103a14:	df000017 	ldw	fp,0(sp)
10103a18:	dec00204 	addi	sp,sp,8
10103a1c:	f800283a 	ret

10103a20 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
10103a20:	defffd04 	addi	sp,sp,-12
10103a24:	dfc00215 	stw	ra,8(sp)
10103a28:	df000115 	stw	fp,4(sp)
10103a2c:	df000104 	addi	fp,sp,4
10103a30:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
10103a34:	01050280 	call	10105028 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
10103a38:	00800044 	movi	r2,1
10103a3c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
10103a40:	0001883a 	nop
10103a44:	e037883a 	mov	sp,fp
10103a48:	dfc00117 	ldw	ra,4(sp)
10103a4c:	df000017 	ldw	fp,0(sp)
10103a50:	dec00204 	addi	sp,sp,8
10103a54:	f800283a 	ret

10103a58 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
10103a58:	defffe04 	addi	sp,sp,-8
10103a5c:	dfc00115 	stw	ra,4(sp)
10103a60:	df000015 	stw	fp,0(sp)
10103a64:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
10103a68:	000d883a 	mov	r6,zero
10103a6c:	000b883a 	mov	r5,zero
10103a70:	01040434 	movhi	r4,4112
10103a74:	21186204 	addi	r4,r4,24968
10103a78:	0103c040 	call	10103c04 <altera_avalon_jtag_uart_init>
10103a7c:	01040434 	movhi	r4,4112
10103a80:	21185804 	addi	r4,r4,24928
10103a84:	01039ec0 	call	101039ec <alt_dev_reg>
}
10103a88:	0001883a 	nop
10103a8c:	e037883a 	mov	sp,fp
10103a90:	dfc00117 	ldw	ra,4(sp)
10103a94:	df000017 	ldw	fp,0(sp)
10103a98:	dec00204 	addi	sp,sp,8
10103a9c:	f800283a 	ret

10103aa0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
10103aa0:	defffa04 	addi	sp,sp,-24
10103aa4:	dfc00515 	stw	ra,20(sp)
10103aa8:	df000415 	stw	fp,16(sp)
10103aac:	df000404 	addi	fp,sp,16
10103ab0:	e13ffd15 	stw	r4,-12(fp)
10103ab4:	e17ffe15 	stw	r5,-8(fp)
10103ab8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10103abc:	e0bffd17 	ldw	r2,-12(fp)
10103ac0:	10800017 	ldw	r2,0(r2)
10103ac4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
10103ac8:	e0bffc17 	ldw	r2,-16(fp)
10103acc:	10c00a04 	addi	r3,r2,40
10103ad0:	e0bffd17 	ldw	r2,-12(fp)
10103ad4:	10800217 	ldw	r2,8(r2)
10103ad8:	100f883a 	mov	r7,r2
10103adc:	e1bfff17 	ldw	r6,-4(fp)
10103ae0:	e17ffe17 	ldw	r5,-8(fp)
10103ae4:	1809883a 	mov	r4,r3
10103ae8:	01040c80 	call	101040c8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
10103aec:	e037883a 	mov	sp,fp
10103af0:	dfc00117 	ldw	ra,4(sp)
10103af4:	df000017 	ldw	fp,0(sp)
10103af8:	dec00204 	addi	sp,sp,8
10103afc:	f800283a 	ret

10103b00 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
10103b00:	defffa04 	addi	sp,sp,-24
10103b04:	dfc00515 	stw	ra,20(sp)
10103b08:	df000415 	stw	fp,16(sp)
10103b0c:	df000404 	addi	fp,sp,16
10103b10:	e13ffd15 	stw	r4,-12(fp)
10103b14:	e17ffe15 	stw	r5,-8(fp)
10103b18:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10103b1c:	e0bffd17 	ldw	r2,-12(fp)
10103b20:	10800017 	ldw	r2,0(r2)
10103b24:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
10103b28:	e0bffc17 	ldw	r2,-16(fp)
10103b2c:	10c00a04 	addi	r3,r2,40
10103b30:	e0bffd17 	ldw	r2,-12(fp)
10103b34:	10800217 	ldw	r2,8(r2)
10103b38:	100f883a 	mov	r7,r2
10103b3c:	e1bfff17 	ldw	r6,-4(fp)
10103b40:	e17ffe17 	ldw	r5,-8(fp)
10103b44:	1809883a 	mov	r4,r3
10103b48:	01042e40 	call	101042e4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
10103b4c:	e037883a 	mov	sp,fp
10103b50:	dfc00117 	ldw	ra,4(sp)
10103b54:	df000017 	ldw	fp,0(sp)
10103b58:	dec00204 	addi	sp,sp,8
10103b5c:	f800283a 	ret

10103b60 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
10103b60:	defffc04 	addi	sp,sp,-16
10103b64:	dfc00315 	stw	ra,12(sp)
10103b68:	df000215 	stw	fp,8(sp)
10103b6c:	df000204 	addi	fp,sp,8
10103b70:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10103b74:	e0bfff17 	ldw	r2,-4(fp)
10103b78:	10800017 	ldw	r2,0(r2)
10103b7c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
10103b80:	e0bffe17 	ldw	r2,-8(fp)
10103b84:	10c00a04 	addi	r3,r2,40
10103b88:	e0bfff17 	ldw	r2,-4(fp)
10103b8c:	10800217 	ldw	r2,8(r2)
10103b90:	100b883a 	mov	r5,r2
10103b94:	1809883a 	mov	r4,r3
10103b98:	0103f700 	call	10103f70 <altera_avalon_jtag_uart_close>
}
10103b9c:	e037883a 	mov	sp,fp
10103ba0:	dfc00117 	ldw	ra,4(sp)
10103ba4:	df000017 	ldw	fp,0(sp)
10103ba8:	dec00204 	addi	sp,sp,8
10103bac:	f800283a 	ret

10103bb0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
10103bb0:	defffa04 	addi	sp,sp,-24
10103bb4:	dfc00515 	stw	ra,20(sp)
10103bb8:	df000415 	stw	fp,16(sp)
10103bbc:	df000404 	addi	fp,sp,16
10103bc0:	e13ffd15 	stw	r4,-12(fp)
10103bc4:	e17ffe15 	stw	r5,-8(fp)
10103bc8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
10103bcc:	e0bffd17 	ldw	r2,-12(fp)
10103bd0:	10800017 	ldw	r2,0(r2)
10103bd4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
10103bd8:	e0bffc17 	ldw	r2,-16(fp)
10103bdc:	10800a04 	addi	r2,r2,40
10103be0:	e1bfff17 	ldw	r6,-4(fp)
10103be4:	e17ffe17 	ldw	r5,-8(fp)
10103be8:	1009883a 	mov	r4,r2
10103bec:	0103fd80 	call	10103fd8 <altera_avalon_jtag_uart_ioctl>
}
10103bf0:	e037883a 	mov	sp,fp
10103bf4:	dfc00117 	ldw	ra,4(sp)
10103bf8:	df000017 	ldw	fp,0(sp)
10103bfc:	dec00204 	addi	sp,sp,8
10103c00:	f800283a 	ret

10103c04 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
10103c04:	defffa04 	addi	sp,sp,-24
10103c08:	dfc00515 	stw	ra,20(sp)
10103c0c:	df000415 	stw	fp,16(sp)
10103c10:	df000404 	addi	fp,sp,16
10103c14:	e13ffd15 	stw	r4,-12(fp)
10103c18:	e17ffe15 	stw	r5,-8(fp)
10103c1c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10103c20:	e0bffd17 	ldw	r2,-12(fp)
10103c24:	00c00044 	movi	r3,1
10103c28:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
10103c2c:	e0bffd17 	ldw	r2,-12(fp)
10103c30:	10800017 	ldw	r2,0(r2)
10103c34:	10800104 	addi	r2,r2,4
10103c38:	1007883a 	mov	r3,r2
10103c3c:	e0bffd17 	ldw	r2,-12(fp)
10103c40:	10800817 	ldw	r2,32(r2)
10103c44:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
10103c48:	e0bffe17 	ldw	r2,-8(fp)
10103c4c:	e0ffff17 	ldw	r3,-4(fp)
10103c50:	d8000015 	stw	zero,0(sp)
10103c54:	e1fffd17 	ldw	r7,-12(fp)
10103c58:	01840434 	movhi	r6,4112
10103c5c:	318f3104 	addi	r6,r6,15556
10103c60:	180b883a 	mov	r5,r3
10103c64:	1009883a 	mov	r4,r2
10103c68:	01048500 	call	10104850 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
10103c6c:	e0bffd17 	ldw	r2,-12(fp)
10103c70:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
10103c74:	e0bffd17 	ldw	r2,-12(fp)
10103c78:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
10103c7c:	d0e6b117 	ldw	r3,-25916(gp)
10103c80:	e1fffd17 	ldw	r7,-12(fp)
10103c84:	01840434 	movhi	r6,4112
10103c88:	318fb404 	addi	r6,r6,16080
10103c8c:	180b883a 	mov	r5,r3
10103c90:	1009883a 	mov	r4,r2
10103c94:	01045080 	call	10104508 <alt_alarm_start>
10103c98:	1000040e 	bge	r2,zero,10103cac <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
10103c9c:	e0fffd17 	ldw	r3,-12(fp)
10103ca0:	00a00034 	movhi	r2,32768
10103ca4:	10bfffc4 	addi	r2,r2,-1
10103ca8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
10103cac:	0001883a 	nop
10103cb0:	e037883a 	mov	sp,fp
10103cb4:	dfc00117 	ldw	ra,4(sp)
10103cb8:	df000017 	ldw	fp,0(sp)
10103cbc:	dec00204 	addi	sp,sp,8
10103cc0:	f800283a 	ret

10103cc4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
10103cc4:	defff804 	addi	sp,sp,-32
10103cc8:	df000715 	stw	fp,28(sp)
10103ccc:	df000704 	addi	fp,sp,28
10103cd0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
10103cd4:	e0bfff17 	ldw	r2,-4(fp)
10103cd8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
10103cdc:	e0bffb17 	ldw	r2,-20(fp)
10103ce0:	10800017 	ldw	r2,0(r2)
10103ce4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10103ce8:	e0bffc17 	ldw	r2,-16(fp)
10103cec:	10800104 	addi	r2,r2,4
10103cf0:	10800037 	ldwio	r2,0(r2)
10103cf4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
10103cf8:	e0bffd17 	ldw	r2,-12(fp)
10103cfc:	1080c00c 	andi	r2,r2,768
10103d00:	10006d26 	beq	r2,zero,10103eb8 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
10103d04:	e0bffd17 	ldw	r2,-12(fp)
10103d08:	1080400c 	andi	r2,r2,256
10103d0c:	10003526 	beq	r2,zero,10103de4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
10103d10:	00800074 	movhi	r2,1
10103d14:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10103d18:	e0bffb17 	ldw	r2,-20(fp)
10103d1c:	10800a17 	ldw	r2,40(r2)
10103d20:	10800044 	addi	r2,r2,1
10103d24:	1081ffcc 	andi	r2,r2,2047
10103d28:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
10103d2c:	e0bffb17 	ldw	r2,-20(fp)
10103d30:	10c00b17 	ldw	r3,44(r2)
10103d34:	e0bffe17 	ldw	r2,-8(fp)
10103d38:	18801526 	beq	r3,r2,10103d90 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
10103d3c:	e0bffc17 	ldw	r2,-16(fp)
10103d40:	10800037 	ldwio	r2,0(r2)
10103d44:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
10103d48:	e0bff917 	ldw	r2,-28(fp)
10103d4c:	10a0000c 	andi	r2,r2,32768
10103d50:	10001126 	beq	r2,zero,10103d98 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
10103d54:	e0bffb17 	ldw	r2,-20(fp)
10103d58:	10800a17 	ldw	r2,40(r2)
10103d5c:	e0fff917 	ldw	r3,-28(fp)
10103d60:	1809883a 	mov	r4,r3
10103d64:	e0fffb17 	ldw	r3,-20(fp)
10103d68:	1885883a 	add	r2,r3,r2
10103d6c:	10800e04 	addi	r2,r2,56
10103d70:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10103d74:	e0bffb17 	ldw	r2,-20(fp)
10103d78:	10800a17 	ldw	r2,40(r2)
10103d7c:	10800044 	addi	r2,r2,1
10103d80:	10c1ffcc 	andi	r3,r2,2047
10103d84:	e0bffb17 	ldw	r2,-20(fp)
10103d88:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
10103d8c:	003fe206 	br	10103d18 <__alt_data_end+0xfffe3d18>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
10103d90:	0001883a 	nop
10103d94:	00000106 	br	10103d9c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
10103d98:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
10103d9c:	e0bff917 	ldw	r2,-28(fp)
10103da0:	10bfffec 	andhi	r2,r2,65535
10103da4:	10000f26 	beq	r2,zero,10103de4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10103da8:	e0bffb17 	ldw	r2,-20(fp)
10103dac:	10c00817 	ldw	r3,32(r2)
10103db0:	00bfff84 	movi	r2,-2
10103db4:	1886703a 	and	r3,r3,r2
10103db8:	e0bffb17 	ldw	r2,-20(fp)
10103dbc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
10103dc0:	e0bffc17 	ldw	r2,-16(fp)
10103dc4:	10800104 	addi	r2,r2,4
10103dc8:	1007883a 	mov	r3,r2
10103dcc:	e0bffb17 	ldw	r2,-20(fp)
10103dd0:	10800817 	ldw	r2,32(r2)
10103dd4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10103dd8:	e0bffc17 	ldw	r2,-16(fp)
10103ddc:	10800104 	addi	r2,r2,4
10103de0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
10103de4:	e0bffd17 	ldw	r2,-12(fp)
10103de8:	1080800c 	andi	r2,r2,512
10103dec:	103fbe26 	beq	r2,zero,10103ce8 <__alt_data_end+0xfffe3ce8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
10103df0:	e0bffd17 	ldw	r2,-12(fp)
10103df4:	1004d43a 	srli	r2,r2,16
10103df8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
10103dfc:	00001406 	br	10103e50 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
10103e00:	e0bffc17 	ldw	r2,-16(fp)
10103e04:	e0fffb17 	ldw	r3,-20(fp)
10103e08:	18c00d17 	ldw	r3,52(r3)
10103e0c:	e13ffb17 	ldw	r4,-20(fp)
10103e10:	20c7883a 	add	r3,r4,r3
10103e14:	18c20e04 	addi	r3,r3,2104
10103e18:	18c00003 	ldbu	r3,0(r3)
10103e1c:	18c03fcc 	andi	r3,r3,255
10103e20:	18c0201c 	xori	r3,r3,128
10103e24:	18ffe004 	addi	r3,r3,-128
10103e28:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10103e2c:	e0bffb17 	ldw	r2,-20(fp)
10103e30:	10800d17 	ldw	r2,52(r2)
10103e34:	10800044 	addi	r2,r2,1
10103e38:	10c1ffcc 	andi	r3,r2,2047
10103e3c:	e0bffb17 	ldw	r2,-20(fp)
10103e40:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
10103e44:	e0bffa17 	ldw	r2,-24(fp)
10103e48:	10bfffc4 	addi	r2,r2,-1
10103e4c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
10103e50:	e0bffa17 	ldw	r2,-24(fp)
10103e54:	10000526 	beq	r2,zero,10103e6c <altera_avalon_jtag_uart_irq+0x1a8>
10103e58:	e0bffb17 	ldw	r2,-20(fp)
10103e5c:	10c00d17 	ldw	r3,52(r2)
10103e60:	e0bffb17 	ldw	r2,-20(fp)
10103e64:	10800c17 	ldw	r2,48(r2)
10103e68:	18bfe51e 	bne	r3,r2,10103e00 <__alt_data_end+0xfffe3e00>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
10103e6c:	e0bffa17 	ldw	r2,-24(fp)
10103e70:	103f9d26 	beq	r2,zero,10103ce8 <__alt_data_end+0xfffe3ce8>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10103e74:	e0bffb17 	ldw	r2,-20(fp)
10103e78:	10c00817 	ldw	r3,32(r2)
10103e7c:	00bfff44 	movi	r2,-3
10103e80:	1886703a 	and	r3,r3,r2
10103e84:	e0bffb17 	ldw	r2,-20(fp)
10103e88:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10103e8c:	e0bffb17 	ldw	r2,-20(fp)
10103e90:	10800017 	ldw	r2,0(r2)
10103e94:	10800104 	addi	r2,r2,4
10103e98:	1007883a 	mov	r3,r2
10103e9c:	e0bffb17 	ldw	r2,-20(fp)
10103ea0:	10800817 	ldw	r2,32(r2)
10103ea4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10103ea8:	e0bffc17 	ldw	r2,-16(fp)
10103eac:	10800104 	addi	r2,r2,4
10103eb0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
10103eb4:	003f8c06 	br	10103ce8 <__alt_data_end+0xfffe3ce8>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
10103eb8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
10103ebc:	0001883a 	nop
10103ec0:	e037883a 	mov	sp,fp
10103ec4:	df000017 	ldw	fp,0(sp)
10103ec8:	dec00104 	addi	sp,sp,4
10103ecc:	f800283a 	ret

10103ed0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
10103ed0:	defff804 	addi	sp,sp,-32
10103ed4:	df000715 	stw	fp,28(sp)
10103ed8:	df000704 	addi	fp,sp,28
10103edc:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
10103ee0:	e0bffb17 	ldw	r2,-20(fp)
10103ee4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
10103ee8:	e0bff917 	ldw	r2,-28(fp)
10103eec:	10800017 	ldw	r2,0(r2)
10103ef0:	10800104 	addi	r2,r2,4
10103ef4:	10800037 	ldwio	r2,0(r2)
10103ef8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
10103efc:	e0bffa17 	ldw	r2,-24(fp)
10103f00:	1081000c 	andi	r2,r2,1024
10103f04:	10000b26 	beq	r2,zero,10103f34 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
10103f08:	e0bff917 	ldw	r2,-28(fp)
10103f0c:	10800017 	ldw	r2,0(r2)
10103f10:	10800104 	addi	r2,r2,4
10103f14:	1007883a 	mov	r3,r2
10103f18:	e0bff917 	ldw	r2,-28(fp)
10103f1c:	10800817 	ldw	r2,32(r2)
10103f20:	10810014 	ori	r2,r2,1024
10103f24:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
10103f28:	e0bff917 	ldw	r2,-28(fp)
10103f2c:	10000915 	stw	zero,36(r2)
10103f30:	00000a06 	br	10103f5c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
10103f34:	e0bff917 	ldw	r2,-28(fp)
10103f38:	10c00917 	ldw	r3,36(r2)
10103f3c:	00a00034 	movhi	r2,32768
10103f40:	10bfff04 	addi	r2,r2,-4
10103f44:	10c00536 	bltu	r2,r3,10103f5c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
10103f48:	e0bff917 	ldw	r2,-28(fp)
10103f4c:	10800917 	ldw	r2,36(r2)
10103f50:	10c00044 	addi	r3,r2,1
10103f54:	e0bff917 	ldw	r2,-28(fp)
10103f58:	10c00915 	stw	r3,36(r2)
10103f5c:	d0a6b117 	ldw	r2,-25916(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
10103f60:	e037883a 	mov	sp,fp
10103f64:	df000017 	ldw	fp,0(sp)
10103f68:	dec00104 	addi	sp,sp,4
10103f6c:	f800283a 	ret

10103f70 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
10103f70:	defffd04 	addi	sp,sp,-12
10103f74:	df000215 	stw	fp,8(sp)
10103f78:	df000204 	addi	fp,sp,8
10103f7c:	e13ffe15 	stw	r4,-8(fp)
10103f80:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10103f84:	00000506 	br	10103f9c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
10103f88:	e0bfff17 	ldw	r2,-4(fp)
10103f8c:	1090000c 	andi	r2,r2,16384
10103f90:	10000226 	beq	r2,zero,10103f9c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
10103f94:	00bffd44 	movi	r2,-11
10103f98:	00000b06 	br	10103fc8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10103f9c:	e0bffe17 	ldw	r2,-8(fp)
10103fa0:	10c00d17 	ldw	r3,52(r2)
10103fa4:	e0bffe17 	ldw	r2,-8(fp)
10103fa8:	10800c17 	ldw	r2,48(r2)
10103fac:	18800526 	beq	r3,r2,10103fc4 <altera_avalon_jtag_uart_close+0x54>
10103fb0:	e0bffe17 	ldw	r2,-8(fp)
10103fb4:	10c00917 	ldw	r3,36(r2)
10103fb8:	e0bffe17 	ldw	r2,-8(fp)
10103fbc:	10800117 	ldw	r2,4(r2)
10103fc0:	18bff136 	bltu	r3,r2,10103f88 <__alt_data_end+0xfffe3f88>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
10103fc4:	0005883a 	mov	r2,zero
}
10103fc8:	e037883a 	mov	sp,fp
10103fcc:	df000017 	ldw	fp,0(sp)
10103fd0:	dec00104 	addi	sp,sp,4
10103fd4:	f800283a 	ret

10103fd8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
10103fd8:	defffa04 	addi	sp,sp,-24
10103fdc:	df000515 	stw	fp,20(sp)
10103fe0:	df000504 	addi	fp,sp,20
10103fe4:	e13ffd15 	stw	r4,-12(fp)
10103fe8:	e17ffe15 	stw	r5,-8(fp)
10103fec:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
10103ff0:	00bff9c4 	movi	r2,-25
10103ff4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
10103ff8:	e0bffe17 	ldw	r2,-8(fp)
10103ffc:	10da8060 	cmpeqi	r3,r2,27137
10104000:	1800031e 	bne	r3,zero,10104010 <altera_avalon_jtag_uart_ioctl+0x38>
10104004:	109a80a0 	cmpeqi	r2,r2,27138
10104008:	1000181e 	bne	r2,zero,1010406c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
1010400c:	00002906 	br	101040b4 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
10104010:	e0bffd17 	ldw	r2,-12(fp)
10104014:	10c00117 	ldw	r3,4(r2)
10104018:	00a00034 	movhi	r2,32768
1010401c:	10bfffc4 	addi	r2,r2,-1
10104020:	18802126 	beq	r3,r2,101040a8 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
10104024:	e0bfff17 	ldw	r2,-4(fp)
10104028:	10800017 	ldw	r2,0(r2)
1010402c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
10104030:	e0bffc17 	ldw	r2,-16(fp)
10104034:	10800090 	cmplti	r2,r2,2
10104038:	1000061e 	bne	r2,zero,10104054 <altera_avalon_jtag_uart_ioctl+0x7c>
1010403c:	e0fffc17 	ldw	r3,-16(fp)
10104040:	00a00034 	movhi	r2,32768
10104044:	10bfffc4 	addi	r2,r2,-1
10104048:	18800226 	beq	r3,r2,10104054 <altera_avalon_jtag_uart_ioctl+0x7c>
1010404c:	e0bffc17 	ldw	r2,-16(fp)
10104050:	00000206 	br	1010405c <altera_avalon_jtag_uart_ioctl+0x84>
10104054:	00a00034 	movhi	r2,32768
10104058:	10bfff84 	addi	r2,r2,-2
1010405c:	e0fffd17 	ldw	r3,-12(fp)
10104060:	18800115 	stw	r2,4(r3)
      rc = 0;
10104064:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10104068:	00000f06 	br	101040a8 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
1010406c:	e0bffd17 	ldw	r2,-12(fp)
10104070:	10c00117 	ldw	r3,4(r2)
10104074:	00a00034 	movhi	r2,32768
10104078:	10bfffc4 	addi	r2,r2,-1
1010407c:	18800c26 	beq	r3,r2,101040b0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
10104080:	e0bffd17 	ldw	r2,-12(fp)
10104084:	10c00917 	ldw	r3,36(r2)
10104088:	e0bffd17 	ldw	r2,-12(fp)
1010408c:	10800117 	ldw	r2,4(r2)
10104090:	1885803a 	cmpltu	r2,r3,r2
10104094:	10c03fcc 	andi	r3,r2,255
10104098:	e0bfff17 	ldw	r2,-4(fp)
1010409c:	10c00015 	stw	r3,0(r2)
      rc = 0;
101040a0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
101040a4:	00000206 	br	101040b0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
101040a8:	0001883a 	nop
101040ac:	00000106 	br	101040b4 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
101040b0:	0001883a 	nop

  default:
    break;
  }

  return rc;
101040b4:	e0bffb17 	ldw	r2,-20(fp)
}
101040b8:	e037883a 	mov	sp,fp
101040bc:	df000017 	ldw	fp,0(sp)
101040c0:	dec00104 	addi	sp,sp,4
101040c4:	f800283a 	ret

101040c8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
101040c8:	defff304 	addi	sp,sp,-52
101040cc:	dfc00c15 	stw	ra,48(sp)
101040d0:	df000b15 	stw	fp,44(sp)
101040d4:	df000b04 	addi	fp,sp,44
101040d8:	e13ffc15 	stw	r4,-16(fp)
101040dc:	e17ffd15 	stw	r5,-12(fp)
101040e0:	e1bffe15 	stw	r6,-8(fp)
101040e4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
101040e8:	e0bffd17 	ldw	r2,-12(fp)
101040ec:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
101040f0:	00004706 	br	10104210 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
101040f4:	e0bffc17 	ldw	r2,-16(fp)
101040f8:	10800a17 	ldw	r2,40(r2)
101040fc:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
10104100:	e0bffc17 	ldw	r2,-16(fp)
10104104:	10800b17 	ldw	r2,44(r2)
10104108:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
1010410c:	e0fff717 	ldw	r3,-36(fp)
10104110:	e0bff817 	ldw	r2,-32(fp)
10104114:	18800536 	bltu	r3,r2,1010412c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
10104118:	e0fff717 	ldw	r3,-36(fp)
1010411c:	e0bff817 	ldw	r2,-32(fp)
10104120:	1885c83a 	sub	r2,r3,r2
10104124:	e0bff615 	stw	r2,-40(fp)
10104128:	00000406 	br	1010413c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
1010412c:	00c20004 	movi	r3,2048
10104130:	e0bff817 	ldw	r2,-32(fp)
10104134:	1885c83a 	sub	r2,r3,r2
10104138:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1010413c:	e0bff617 	ldw	r2,-40(fp)
10104140:	10001e26 	beq	r2,zero,101041bc <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
10104144:	e0fffe17 	ldw	r3,-8(fp)
10104148:	e0bff617 	ldw	r2,-40(fp)
1010414c:	1880022e 	bgeu	r3,r2,10104158 <altera_avalon_jtag_uart_read+0x90>
        n = space;
10104150:	e0bffe17 	ldw	r2,-8(fp)
10104154:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
10104158:	e0bffc17 	ldw	r2,-16(fp)
1010415c:	10c00e04 	addi	r3,r2,56
10104160:	e0bff817 	ldw	r2,-32(fp)
10104164:	1885883a 	add	r2,r3,r2
10104168:	e1bff617 	ldw	r6,-40(fp)
1010416c:	100b883a 	mov	r5,r2
10104170:	e13ff517 	ldw	r4,-44(fp)
10104174:	01017200 	call	10101720 <memcpy>
      ptr   += n;
10104178:	e0fff517 	ldw	r3,-44(fp)
1010417c:	e0bff617 	ldw	r2,-40(fp)
10104180:	1885883a 	add	r2,r3,r2
10104184:	e0bff515 	stw	r2,-44(fp)
      space -= n;
10104188:	e0fffe17 	ldw	r3,-8(fp)
1010418c:	e0bff617 	ldw	r2,-40(fp)
10104190:	1885c83a 	sub	r2,r3,r2
10104194:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10104198:	e0fff817 	ldw	r3,-32(fp)
1010419c:	e0bff617 	ldw	r2,-40(fp)
101041a0:	1885883a 	add	r2,r3,r2
101041a4:	10c1ffcc 	andi	r3,r2,2047
101041a8:	e0bffc17 	ldw	r2,-16(fp)
101041ac:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
101041b0:	e0bffe17 	ldw	r2,-8(fp)
101041b4:	00bfcf16 	blt	zero,r2,101040f4 <__alt_data_end+0xfffe40f4>
101041b8:	00000106 	br	101041c0 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
101041bc:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
101041c0:	e0fff517 	ldw	r3,-44(fp)
101041c4:	e0bffd17 	ldw	r2,-12(fp)
101041c8:	1880141e 	bne	r3,r2,1010421c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
101041cc:	e0bfff17 	ldw	r2,-4(fp)
101041d0:	1090000c 	andi	r2,r2,16384
101041d4:	1000131e 	bne	r2,zero,10104224 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
101041d8:	0001883a 	nop
101041dc:	e0bffc17 	ldw	r2,-16(fp)
101041e0:	10c00a17 	ldw	r3,40(r2)
101041e4:	e0bff717 	ldw	r2,-36(fp)
101041e8:	1880051e 	bne	r3,r2,10104200 <altera_avalon_jtag_uart_read+0x138>
101041ec:	e0bffc17 	ldw	r2,-16(fp)
101041f0:	10c00917 	ldw	r3,36(r2)
101041f4:	e0bffc17 	ldw	r2,-16(fp)
101041f8:	10800117 	ldw	r2,4(r2)
101041fc:	18bff736 	bltu	r3,r2,101041dc <__alt_data_end+0xfffe41dc>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
10104200:	e0bffc17 	ldw	r2,-16(fp)
10104204:	10c00a17 	ldw	r3,40(r2)
10104208:	e0bff717 	ldw	r2,-36(fp)
1010420c:	18800726 	beq	r3,r2,1010422c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10104210:	e0bffe17 	ldw	r2,-8(fp)
10104214:	00bfb716 	blt	zero,r2,101040f4 <__alt_data_end+0xfffe40f4>
10104218:	00000506 	br	10104230 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
1010421c:	0001883a 	nop
10104220:	00000306 	br	10104230 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
10104224:	0001883a 	nop
10104228:	00000106 	br	10104230 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
1010422c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
10104230:	e0fff517 	ldw	r3,-44(fp)
10104234:	e0bffd17 	ldw	r2,-12(fp)
10104238:	18801826 	beq	r3,r2,1010429c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1010423c:	0005303a 	rdctl	r2,status
10104240:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10104244:	e0fffb17 	ldw	r3,-20(fp)
10104248:	00bfff84 	movi	r2,-2
1010424c:	1884703a 	and	r2,r3,r2
10104250:	1001703a 	wrctl	status,r2
  
  return context;
10104254:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
10104258:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1010425c:	e0bffc17 	ldw	r2,-16(fp)
10104260:	10800817 	ldw	r2,32(r2)
10104264:	10c00054 	ori	r3,r2,1
10104268:	e0bffc17 	ldw	r2,-16(fp)
1010426c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10104270:	e0bffc17 	ldw	r2,-16(fp)
10104274:	10800017 	ldw	r2,0(r2)
10104278:	10800104 	addi	r2,r2,4
1010427c:	1007883a 	mov	r3,r2
10104280:	e0bffc17 	ldw	r2,-16(fp)
10104284:	10800817 	ldw	r2,32(r2)
10104288:	18800035 	stwio	r2,0(r3)
1010428c:	e0bffa17 	ldw	r2,-24(fp)
10104290:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10104294:	e0bff917 	ldw	r2,-28(fp)
10104298:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
1010429c:	e0fff517 	ldw	r3,-44(fp)
101042a0:	e0bffd17 	ldw	r2,-12(fp)
101042a4:	18800426 	beq	r3,r2,101042b8 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
101042a8:	e0fff517 	ldw	r3,-44(fp)
101042ac:	e0bffd17 	ldw	r2,-12(fp)
101042b0:	1885c83a 	sub	r2,r3,r2
101042b4:	00000606 	br	101042d0 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
101042b8:	e0bfff17 	ldw	r2,-4(fp)
101042bc:	1090000c 	andi	r2,r2,16384
101042c0:	10000226 	beq	r2,zero,101042cc <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
101042c4:	00bffd44 	movi	r2,-11
101042c8:	00000106 	br	101042d0 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
101042cc:	00bffec4 	movi	r2,-5
}
101042d0:	e037883a 	mov	sp,fp
101042d4:	dfc00117 	ldw	ra,4(sp)
101042d8:	df000017 	ldw	fp,0(sp)
101042dc:	dec00204 	addi	sp,sp,8
101042e0:	f800283a 	ret

101042e4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
101042e4:	defff304 	addi	sp,sp,-52
101042e8:	dfc00c15 	stw	ra,48(sp)
101042ec:	df000b15 	stw	fp,44(sp)
101042f0:	df000b04 	addi	fp,sp,44
101042f4:	e13ffc15 	stw	r4,-16(fp)
101042f8:	e17ffd15 	stw	r5,-12(fp)
101042fc:	e1bffe15 	stw	r6,-8(fp)
10104300:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
10104304:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
10104308:	e0bffd17 	ldw	r2,-12(fp)
1010430c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10104310:	00003706 	br	101043f0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
10104314:	e0bffc17 	ldw	r2,-16(fp)
10104318:	10800c17 	ldw	r2,48(r2)
1010431c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
10104320:	e0bffc17 	ldw	r2,-16(fp)
10104324:	10800d17 	ldw	r2,52(r2)
10104328:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
1010432c:	e0fff917 	ldw	r3,-28(fp)
10104330:	e0bff517 	ldw	r2,-44(fp)
10104334:	1880062e 	bgeu	r3,r2,10104350 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
10104338:	e0fff517 	ldw	r3,-44(fp)
1010433c:	e0bff917 	ldw	r2,-28(fp)
10104340:	1885c83a 	sub	r2,r3,r2
10104344:	10bfffc4 	addi	r2,r2,-1
10104348:	e0bff615 	stw	r2,-40(fp)
1010434c:	00000b06 	br	1010437c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
10104350:	e0bff517 	ldw	r2,-44(fp)
10104354:	10000526 	beq	r2,zero,1010436c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
10104358:	00c20004 	movi	r3,2048
1010435c:	e0bff917 	ldw	r2,-28(fp)
10104360:	1885c83a 	sub	r2,r3,r2
10104364:	e0bff615 	stw	r2,-40(fp)
10104368:	00000406 	br	1010437c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
1010436c:	00c1ffc4 	movi	r3,2047
10104370:	e0bff917 	ldw	r2,-28(fp)
10104374:	1885c83a 	sub	r2,r3,r2
10104378:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1010437c:	e0bff617 	ldw	r2,-40(fp)
10104380:	10001e26 	beq	r2,zero,101043fc <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
10104384:	e0fffe17 	ldw	r3,-8(fp)
10104388:	e0bff617 	ldw	r2,-40(fp)
1010438c:	1880022e 	bgeu	r3,r2,10104398 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
10104390:	e0bffe17 	ldw	r2,-8(fp)
10104394:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
10104398:	e0bffc17 	ldw	r2,-16(fp)
1010439c:	10c20e04 	addi	r3,r2,2104
101043a0:	e0bff917 	ldw	r2,-28(fp)
101043a4:	1885883a 	add	r2,r3,r2
101043a8:	e1bff617 	ldw	r6,-40(fp)
101043ac:	e17ffd17 	ldw	r5,-12(fp)
101043b0:	1009883a 	mov	r4,r2
101043b4:	01017200 	call	10101720 <memcpy>
      ptr   += n;
101043b8:	e0fffd17 	ldw	r3,-12(fp)
101043bc:	e0bff617 	ldw	r2,-40(fp)
101043c0:	1885883a 	add	r2,r3,r2
101043c4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
101043c8:	e0fffe17 	ldw	r3,-8(fp)
101043cc:	e0bff617 	ldw	r2,-40(fp)
101043d0:	1885c83a 	sub	r2,r3,r2
101043d4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
101043d8:	e0fff917 	ldw	r3,-28(fp)
101043dc:	e0bff617 	ldw	r2,-40(fp)
101043e0:	1885883a 	add	r2,r3,r2
101043e4:	10c1ffcc 	andi	r3,r2,2047
101043e8:	e0bffc17 	ldw	r2,-16(fp)
101043ec:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
101043f0:	e0bffe17 	ldw	r2,-8(fp)
101043f4:	00bfc716 	blt	zero,r2,10104314 <__alt_data_end+0xfffe4314>
101043f8:	00000106 	br	10104400 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
101043fc:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10104400:	0005303a 	rdctl	r2,status
10104404:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10104408:	e0fffb17 	ldw	r3,-20(fp)
1010440c:	00bfff84 	movi	r2,-2
10104410:	1884703a 	and	r2,r3,r2
10104414:	1001703a 	wrctl	status,r2
  
  return context;
10104418:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
1010441c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10104420:	e0bffc17 	ldw	r2,-16(fp)
10104424:	10800817 	ldw	r2,32(r2)
10104428:	10c00094 	ori	r3,r2,2
1010442c:	e0bffc17 	ldw	r2,-16(fp)
10104430:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10104434:	e0bffc17 	ldw	r2,-16(fp)
10104438:	10800017 	ldw	r2,0(r2)
1010443c:	10800104 	addi	r2,r2,4
10104440:	1007883a 	mov	r3,r2
10104444:	e0bffc17 	ldw	r2,-16(fp)
10104448:	10800817 	ldw	r2,32(r2)
1010444c:	18800035 	stwio	r2,0(r3)
10104450:	e0bffa17 	ldw	r2,-24(fp)
10104454:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10104458:	e0bff817 	ldw	r2,-32(fp)
1010445c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
10104460:	e0bffe17 	ldw	r2,-8(fp)
10104464:	0080100e 	bge	zero,r2,101044a8 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
10104468:	e0bfff17 	ldw	r2,-4(fp)
1010446c:	1090000c 	andi	r2,r2,16384
10104470:	1000101e 	bne	r2,zero,101044b4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
10104474:	0001883a 	nop
10104478:	e0bffc17 	ldw	r2,-16(fp)
1010447c:	10c00d17 	ldw	r3,52(r2)
10104480:	e0bff517 	ldw	r2,-44(fp)
10104484:	1880051e 	bne	r3,r2,1010449c <altera_avalon_jtag_uart_write+0x1b8>
10104488:	e0bffc17 	ldw	r2,-16(fp)
1010448c:	10c00917 	ldw	r3,36(r2)
10104490:	e0bffc17 	ldw	r2,-16(fp)
10104494:	10800117 	ldw	r2,4(r2)
10104498:	18bff736 	bltu	r3,r2,10104478 <__alt_data_end+0xfffe4478>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
1010449c:	e0bffc17 	ldw	r2,-16(fp)
101044a0:	10800917 	ldw	r2,36(r2)
101044a4:	1000051e 	bne	r2,zero,101044bc <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
101044a8:	e0bffe17 	ldw	r2,-8(fp)
101044ac:	00bfd016 	blt	zero,r2,101043f0 <__alt_data_end+0xfffe43f0>
101044b0:	00000306 	br	101044c0 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
101044b4:	0001883a 	nop
101044b8:	00000106 	br	101044c0 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
101044bc:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
101044c0:	e0fffd17 	ldw	r3,-12(fp)
101044c4:	e0bff717 	ldw	r2,-36(fp)
101044c8:	18800426 	beq	r3,r2,101044dc <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
101044cc:	e0fffd17 	ldw	r3,-12(fp)
101044d0:	e0bff717 	ldw	r2,-36(fp)
101044d4:	1885c83a 	sub	r2,r3,r2
101044d8:	00000606 	br	101044f4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
101044dc:	e0bfff17 	ldw	r2,-4(fp)
101044e0:	1090000c 	andi	r2,r2,16384
101044e4:	10000226 	beq	r2,zero,101044f0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
101044e8:	00bffd44 	movi	r2,-11
101044ec:	00000106 	br	101044f4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
101044f0:	00bffec4 	movi	r2,-5
}
101044f4:	e037883a 	mov	sp,fp
101044f8:	dfc00117 	ldw	ra,4(sp)
101044fc:	df000017 	ldw	fp,0(sp)
10104500:	dec00204 	addi	sp,sp,8
10104504:	f800283a 	ret

10104508 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
10104508:	defff504 	addi	sp,sp,-44
1010450c:	df000a15 	stw	fp,40(sp)
10104510:	df000a04 	addi	fp,sp,40
10104514:	e13ffc15 	stw	r4,-16(fp)
10104518:	e17ffd15 	stw	r5,-12(fp)
1010451c:	e1bffe15 	stw	r6,-8(fp)
10104520:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
10104524:	e03ff615 	stw	zero,-40(fp)
10104528:	d0a6b117 	ldw	r2,-25916(gp)
  
  if (alt_ticks_per_second ())
1010452c:	10003c26 	beq	r2,zero,10104620 <alt_alarm_start+0x118>
  {
    if (alarm)
10104530:	e0bffc17 	ldw	r2,-16(fp)
10104534:	10003826 	beq	r2,zero,10104618 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
10104538:	e0bffc17 	ldw	r2,-16(fp)
1010453c:	e0fffe17 	ldw	r3,-8(fp)
10104540:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
10104544:	e0bffc17 	ldw	r2,-16(fp)
10104548:	e0ffff17 	ldw	r3,-4(fp)
1010454c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10104550:	0005303a 	rdctl	r2,status
10104554:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10104558:	e0fff917 	ldw	r3,-28(fp)
1010455c:	00bfff84 	movi	r2,-2
10104560:	1884703a 	and	r2,r3,r2
10104564:	1001703a 	wrctl	status,r2
  
  return context;
10104568:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
1010456c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10104570:	d0a6b217 	ldw	r2,-25912(gp)
      
      current_nticks = alt_nticks();
10104574:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
10104578:	e0fffd17 	ldw	r3,-12(fp)
1010457c:	e0bff617 	ldw	r2,-40(fp)
10104580:	1885883a 	add	r2,r3,r2
10104584:	10c00044 	addi	r3,r2,1
10104588:	e0bffc17 	ldw	r2,-16(fp)
1010458c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
10104590:	e0bffc17 	ldw	r2,-16(fp)
10104594:	10c00217 	ldw	r3,8(r2)
10104598:	e0bff617 	ldw	r2,-40(fp)
1010459c:	1880042e 	bgeu	r3,r2,101045b0 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
101045a0:	e0bffc17 	ldw	r2,-16(fp)
101045a4:	00c00044 	movi	r3,1
101045a8:	10c00405 	stb	r3,16(r2)
101045ac:	00000206 	br	101045b8 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
101045b0:	e0bffc17 	ldw	r2,-16(fp)
101045b4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
101045b8:	e0bffc17 	ldw	r2,-16(fp)
101045bc:	d0e00c04 	addi	r3,gp,-32720
101045c0:	e0fffa15 	stw	r3,-24(fp)
101045c4:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
101045c8:	e0bffb17 	ldw	r2,-20(fp)
101045cc:	e0fffa17 	ldw	r3,-24(fp)
101045d0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
101045d4:	e0bffa17 	ldw	r2,-24(fp)
101045d8:	10c00017 	ldw	r3,0(r2)
101045dc:	e0bffb17 	ldw	r2,-20(fp)
101045e0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
101045e4:	e0bffa17 	ldw	r2,-24(fp)
101045e8:	10800017 	ldw	r2,0(r2)
101045ec:	e0fffb17 	ldw	r3,-20(fp)
101045f0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
101045f4:	e0bffa17 	ldw	r2,-24(fp)
101045f8:	e0fffb17 	ldw	r3,-20(fp)
101045fc:	10c00015 	stw	r3,0(r2)
10104600:	e0bff817 	ldw	r2,-32(fp)
10104604:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10104608:	e0bff717 	ldw	r2,-36(fp)
1010460c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
10104610:	0005883a 	mov	r2,zero
10104614:	00000306 	br	10104624 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
10104618:	00bffa84 	movi	r2,-22
1010461c:	00000106 	br	10104624 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
10104620:	00bfde84 	movi	r2,-134
  }
}
10104624:	e037883a 	mov	sp,fp
10104628:	df000017 	ldw	fp,0(sp)
1010462c:	dec00104 	addi	sp,sp,4
10104630:	f800283a 	ret

10104634 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
10104634:	defffe04 	addi	sp,sp,-8
10104638:	df000115 	stw	fp,4(sp)
1010463c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
10104640:	e03fff15 	stw	zero,-4(fp)
10104644:	00000506 	br	1010465c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
10104648:	e0bfff17 	ldw	r2,-4(fp)
1010464c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
10104650:	e0bfff17 	ldw	r2,-4(fp)
10104654:	10800804 	addi	r2,r2,32
10104658:	e0bfff15 	stw	r2,-4(fp)
1010465c:	e0bfff17 	ldw	r2,-4(fp)
10104660:	10820030 	cmpltui	r2,r2,2048
10104664:	103ff81e 	bne	r2,zero,10104648 <__alt_data_end+0xfffe4648>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
10104668:	0001883a 	nop
1010466c:	e037883a 	mov	sp,fp
10104670:	df000017 	ldw	fp,0(sp)
10104674:	dec00104 	addi	sp,sp,4
10104678:	f800283a 	ret

1010467c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010467c:	defffe04 	addi	sp,sp,-8
10104680:	dfc00115 	stw	ra,4(sp)
10104684:	df000015 	stw	fp,0(sp)
10104688:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010468c:	d0a00917 	ldw	r2,-32732(gp)
10104690:	10000326 	beq	r2,zero,101046a0 <alt_get_errno+0x24>
10104694:	d0a00917 	ldw	r2,-32732(gp)
10104698:	103ee83a 	callr	r2
1010469c:	00000106 	br	101046a4 <alt_get_errno+0x28>
101046a0:	d0a6ac04 	addi	r2,gp,-25936
}
101046a4:	e037883a 	mov	sp,fp
101046a8:	dfc00117 	ldw	ra,4(sp)
101046ac:	df000017 	ldw	fp,0(sp)
101046b0:	dec00204 	addi	sp,sp,8
101046b4:	f800283a 	ret

101046b8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
101046b8:	defffa04 	addi	sp,sp,-24
101046bc:	dfc00515 	stw	ra,20(sp)
101046c0:	df000415 	stw	fp,16(sp)
101046c4:	df000404 	addi	fp,sp,16
101046c8:	e13ffe15 	stw	r4,-8(fp)
101046cc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
101046d0:	e0bffe17 	ldw	r2,-8(fp)
101046d4:	10000326 	beq	r2,zero,101046e4 <alt_dev_llist_insert+0x2c>
101046d8:	e0bffe17 	ldw	r2,-8(fp)
101046dc:	10800217 	ldw	r2,8(r2)
101046e0:	1000061e 	bne	r2,zero,101046fc <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
101046e4:	010467c0 	call	1010467c <alt_get_errno>
101046e8:	1007883a 	mov	r3,r2
101046ec:	00800584 	movi	r2,22
101046f0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
101046f4:	00bffa84 	movi	r2,-22
101046f8:	00001306 	br	10104748 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
101046fc:	e0bffe17 	ldw	r2,-8(fp)
10104700:	e0ffff17 	ldw	r3,-4(fp)
10104704:	e0fffc15 	stw	r3,-16(fp)
10104708:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1010470c:	e0bffd17 	ldw	r2,-12(fp)
10104710:	e0fffc17 	ldw	r3,-16(fp)
10104714:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10104718:	e0bffc17 	ldw	r2,-16(fp)
1010471c:	10c00017 	ldw	r3,0(r2)
10104720:	e0bffd17 	ldw	r2,-12(fp)
10104724:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10104728:	e0bffc17 	ldw	r2,-16(fp)
1010472c:	10800017 	ldw	r2,0(r2)
10104730:	e0fffd17 	ldw	r3,-12(fp)
10104734:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10104738:	e0bffc17 	ldw	r2,-16(fp)
1010473c:	e0fffd17 	ldw	r3,-12(fp)
10104740:	10c00015 	stw	r3,0(r2)

  return 0;  
10104744:	0005883a 	mov	r2,zero
}
10104748:	e037883a 	mov	sp,fp
1010474c:	dfc00117 	ldw	ra,4(sp)
10104750:	df000017 	ldw	fp,0(sp)
10104754:	dec00204 	addi	sp,sp,8
10104758:	f800283a 	ret

1010475c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
1010475c:	defffd04 	addi	sp,sp,-12
10104760:	dfc00215 	stw	ra,8(sp)
10104764:	df000115 	stw	fp,4(sp)
10104768:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1010476c:	00840434 	movhi	r2,4112
10104770:	1095d104 	addi	r2,r2,22340
10104774:	e0bfff15 	stw	r2,-4(fp)
10104778:	00000606 	br	10104794 <_do_ctors+0x38>
        (*ctor) (); 
1010477c:	e0bfff17 	ldw	r2,-4(fp)
10104780:	10800017 	ldw	r2,0(r2)
10104784:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10104788:	e0bfff17 	ldw	r2,-4(fp)
1010478c:	10bfff04 	addi	r2,r2,-4
10104790:	e0bfff15 	stw	r2,-4(fp)
10104794:	e0ffff17 	ldw	r3,-4(fp)
10104798:	00840434 	movhi	r2,4112
1010479c:	1095d204 	addi	r2,r2,22344
101047a0:	18bff62e 	bgeu	r3,r2,1010477c <__alt_data_end+0xfffe477c>
        (*ctor) (); 
}
101047a4:	0001883a 	nop
101047a8:	e037883a 	mov	sp,fp
101047ac:	dfc00117 	ldw	ra,4(sp)
101047b0:	df000017 	ldw	fp,0(sp)
101047b4:	dec00204 	addi	sp,sp,8
101047b8:	f800283a 	ret

101047bc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
101047bc:	defffd04 	addi	sp,sp,-12
101047c0:	dfc00215 	stw	ra,8(sp)
101047c4:	df000115 	stw	fp,4(sp)
101047c8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
101047cc:	00840434 	movhi	r2,4112
101047d0:	1095d104 	addi	r2,r2,22340
101047d4:	e0bfff15 	stw	r2,-4(fp)
101047d8:	00000606 	br	101047f4 <_do_dtors+0x38>
        (*dtor) (); 
101047dc:	e0bfff17 	ldw	r2,-4(fp)
101047e0:	10800017 	ldw	r2,0(r2)
101047e4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
101047e8:	e0bfff17 	ldw	r2,-4(fp)
101047ec:	10bfff04 	addi	r2,r2,-4
101047f0:	e0bfff15 	stw	r2,-4(fp)
101047f4:	e0ffff17 	ldw	r3,-4(fp)
101047f8:	00840434 	movhi	r2,4112
101047fc:	1095d204 	addi	r2,r2,22344
10104800:	18bff62e 	bgeu	r3,r2,101047dc <__alt_data_end+0xfffe47dc>
        (*dtor) (); 
}
10104804:	0001883a 	nop
10104808:	e037883a 	mov	sp,fp
1010480c:	dfc00117 	ldw	ra,4(sp)
10104810:	df000017 	ldw	fp,0(sp)
10104814:	dec00204 	addi	sp,sp,8
10104818:	f800283a 	ret

1010481c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
1010481c:	defffe04 	addi	sp,sp,-8
10104820:	dfc00115 	stw	ra,4(sp)
10104824:	df000015 	stw	fp,0(sp)
10104828:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
1010482c:	01440004 	movi	r5,4096
10104830:	0009883a 	mov	r4,zero
10104834:	01052880 	call	10105288 <alt_icache_flush>
#endif
}
10104838:	0001883a 	nop
1010483c:	e037883a 	mov	sp,fp
10104840:	dfc00117 	ldw	ra,4(sp)
10104844:	df000017 	ldw	fp,0(sp)
10104848:	dec00204 	addi	sp,sp,8
1010484c:	f800283a 	ret

10104850 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10104850:	defff904 	addi	sp,sp,-28
10104854:	dfc00615 	stw	ra,24(sp)
10104858:	df000515 	stw	fp,20(sp)
1010485c:	df000504 	addi	fp,sp,20
10104860:	e13ffc15 	stw	r4,-16(fp)
10104864:	e17ffd15 	stw	r5,-12(fp)
10104868:	e1bffe15 	stw	r6,-8(fp)
1010486c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
10104870:	e0800217 	ldw	r2,8(fp)
10104874:	d8800015 	stw	r2,0(sp)
10104878:	e1ffff17 	ldw	r7,-4(fp)
1010487c:	e1bffe17 	ldw	r6,-8(fp)
10104880:	e17ffd17 	ldw	r5,-12(fp)
10104884:	e13ffc17 	ldw	r4,-16(fp)
10104888:	0104a000 	call	10104a00 <alt_iic_isr_register>
}  
1010488c:	e037883a 	mov	sp,fp
10104890:	dfc00117 	ldw	ra,4(sp)
10104894:	df000017 	ldw	fp,0(sp)
10104898:	dec00204 	addi	sp,sp,8
1010489c:	f800283a 	ret

101048a0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
101048a0:	defff904 	addi	sp,sp,-28
101048a4:	df000615 	stw	fp,24(sp)
101048a8:	df000604 	addi	fp,sp,24
101048ac:	e13ffe15 	stw	r4,-8(fp)
101048b0:	e17fff15 	stw	r5,-4(fp)
101048b4:	e0bfff17 	ldw	r2,-4(fp)
101048b8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
101048bc:	0005303a 	rdctl	r2,status
101048c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
101048c4:	e0fffb17 	ldw	r3,-20(fp)
101048c8:	00bfff84 	movi	r2,-2
101048cc:	1884703a 	and	r2,r3,r2
101048d0:	1001703a 	wrctl	status,r2
  
  return context;
101048d4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
101048d8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
101048dc:	00c00044 	movi	r3,1
101048e0:	e0bffa17 	ldw	r2,-24(fp)
101048e4:	1884983a 	sll	r2,r3,r2
101048e8:	1007883a 	mov	r3,r2
101048ec:	d0a6b017 	ldw	r2,-25920(gp)
101048f0:	1884b03a 	or	r2,r3,r2
101048f4:	d0a6b015 	stw	r2,-25920(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
101048f8:	d0a6b017 	ldw	r2,-25920(gp)
101048fc:	100170fa 	wrctl	ienable,r2
10104900:	e0bffc17 	ldw	r2,-16(fp)
10104904:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10104908:	e0bffd17 	ldw	r2,-12(fp)
1010490c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10104910:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
10104914:	0001883a 	nop
}
10104918:	e037883a 	mov	sp,fp
1010491c:	df000017 	ldw	fp,0(sp)
10104920:	dec00104 	addi	sp,sp,4
10104924:	f800283a 	ret

10104928 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
10104928:	defff904 	addi	sp,sp,-28
1010492c:	df000615 	stw	fp,24(sp)
10104930:	df000604 	addi	fp,sp,24
10104934:	e13ffe15 	stw	r4,-8(fp)
10104938:	e17fff15 	stw	r5,-4(fp)
1010493c:	e0bfff17 	ldw	r2,-4(fp)
10104940:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10104944:	0005303a 	rdctl	r2,status
10104948:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1010494c:	e0fffb17 	ldw	r3,-20(fp)
10104950:	00bfff84 	movi	r2,-2
10104954:	1884703a 	and	r2,r3,r2
10104958:	1001703a 	wrctl	status,r2
  
  return context;
1010495c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10104960:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
10104964:	00c00044 	movi	r3,1
10104968:	e0bffa17 	ldw	r2,-24(fp)
1010496c:	1884983a 	sll	r2,r3,r2
10104970:	0084303a 	nor	r2,zero,r2
10104974:	1007883a 	mov	r3,r2
10104978:	d0a6b017 	ldw	r2,-25920(gp)
1010497c:	1884703a 	and	r2,r3,r2
10104980:	d0a6b015 	stw	r2,-25920(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10104984:	d0a6b017 	ldw	r2,-25920(gp)
10104988:	100170fa 	wrctl	ienable,r2
1010498c:	e0bffc17 	ldw	r2,-16(fp)
10104990:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10104994:	e0bffd17 	ldw	r2,-12(fp)
10104998:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1010499c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
101049a0:	0001883a 	nop
}
101049a4:	e037883a 	mov	sp,fp
101049a8:	df000017 	ldw	fp,0(sp)
101049ac:	dec00104 	addi	sp,sp,4
101049b0:	f800283a 	ret

101049b4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
101049b4:	defffc04 	addi	sp,sp,-16
101049b8:	df000315 	stw	fp,12(sp)
101049bc:	df000304 	addi	fp,sp,12
101049c0:	e13ffe15 	stw	r4,-8(fp)
101049c4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
101049c8:	000530fa 	rdctl	r2,ienable
101049cc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
101049d0:	00c00044 	movi	r3,1
101049d4:	e0bfff17 	ldw	r2,-4(fp)
101049d8:	1884983a 	sll	r2,r3,r2
101049dc:	1007883a 	mov	r3,r2
101049e0:	e0bffd17 	ldw	r2,-12(fp)
101049e4:	1884703a 	and	r2,r3,r2
101049e8:	1004c03a 	cmpne	r2,r2,zero
101049ec:	10803fcc 	andi	r2,r2,255
}
101049f0:	e037883a 	mov	sp,fp
101049f4:	df000017 	ldw	fp,0(sp)
101049f8:	dec00104 	addi	sp,sp,4
101049fc:	f800283a 	ret

10104a00 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10104a00:	defff504 	addi	sp,sp,-44
10104a04:	dfc00a15 	stw	ra,40(sp)
10104a08:	df000915 	stw	fp,36(sp)
10104a0c:	df000904 	addi	fp,sp,36
10104a10:	e13ffc15 	stw	r4,-16(fp)
10104a14:	e17ffd15 	stw	r5,-12(fp)
10104a18:	e1bffe15 	stw	r6,-8(fp)
10104a1c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
10104a20:	00bffa84 	movi	r2,-22
10104a24:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10104a28:	e0bffd17 	ldw	r2,-12(fp)
10104a2c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
10104a30:	e0bff817 	ldw	r2,-32(fp)
10104a34:	10800808 	cmpgei	r2,r2,32
10104a38:	1000271e 	bne	r2,zero,10104ad8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10104a3c:	0005303a 	rdctl	r2,status
10104a40:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10104a44:	e0fffb17 	ldw	r3,-20(fp)
10104a48:	00bfff84 	movi	r2,-2
10104a4c:	1884703a 	and	r2,r3,r2
10104a50:	1001703a 	wrctl	status,r2
  
  return context;
10104a54:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10104a58:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
10104a5c:	00840474 	movhi	r2,4113
10104a60:	10a32e04 	addi	r2,r2,-29512
10104a64:	e0fff817 	ldw	r3,-32(fp)
10104a68:	180690fa 	slli	r3,r3,3
10104a6c:	10c5883a 	add	r2,r2,r3
10104a70:	e0fffe17 	ldw	r3,-8(fp)
10104a74:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
10104a78:	00840474 	movhi	r2,4113
10104a7c:	10a32e04 	addi	r2,r2,-29512
10104a80:	e0fff817 	ldw	r3,-32(fp)
10104a84:	180690fa 	slli	r3,r3,3
10104a88:	10c5883a 	add	r2,r2,r3
10104a8c:	10800104 	addi	r2,r2,4
10104a90:	e0ffff17 	ldw	r3,-4(fp)
10104a94:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
10104a98:	e0bffe17 	ldw	r2,-8(fp)
10104a9c:	10000526 	beq	r2,zero,10104ab4 <alt_iic_isr_register+0xb4>
10104aa0:	e0bff817 	ldw	r2,-32(fp)
10104aa4:	100b883a 	mov	r5,r2
10104aa8:	e13ffc17 	ldw	r4,-16(fp)
10104aac:	01048a00 	call	101048a0 <alt_ic_irq_enable>
10104ab0:	00000406 	br	10104ac4 <alt_iic_isr_register+0xc4>
10104ab4:	e0bff817 	ldw	r2,-32(fp)
10104ab8:	100b883a 	mov	r5,r2
10104abc:	e13ffc17 	ldw	r4,-16(fp)
10104ac0:	01049280 	call	10104928 <alt_ic_irq_disable>
10104ac4:	e0bff715 	stw	r2,-36(fp)
10104ac8:	e0bffa17 	ldw	r2,-24(fp)
10104acc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10104ad0:	e0bff917 	ldw	r2,-28(fp)
10104ad4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10104ad8:	e0bff717 	ldw	r2,-36(fp)
}
10104adc:	e037883a 	mov	sp,fp
10104ae0:	dfc00117 	ldw	ra,4(sp)
10104ae4:	df000017 	ldw	fp,0(sp)
10104ae8:	dec00204 	addi	sp,sp,8
10104aec:	f800283a 	ret

10104af0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10104af0:	defff904 	addi	sp,sp,-28
10104af4:	dfc00615 	stw	ra,24(sp)
10104af8:	df000515 	stw	fp,20(sp)
10104afc:	df000504 	addi	fp,sp,20
10104b00:	e13ffc15 	stw	r4,-16(fp)
10104b04:	e17ffd15 	stw	r5,-12(fp)
10104b08:	e1bffe15 	stw	r6,-8(fp)
10104b0c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
10104b10:	e1bfff17 	ldw	r6,-4(fp)
10104b14:	e17ffe17 	ldw	r5,-8(fp)
10104b18:	e13ffd17 	ldw	r4,-12(fp)
10104b1c:	0104d300 	call	10104d30 <open>
10104b20:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
10104b24:	e0bffb17 	ldw	r2,-20(fp)
10104b28:	10001c16 	blt	r2,zero,10104b9c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
10104b2c:	00840434 	movhi	r2,4112
10104b30:	1097f804 	addi	r2,r2,24544
10104b34:	e0fffb17 	ldw	r3,-20(fp)
10104b38:	18c00324 	muli	r3,r3,12
10104b3c:	10c5883a 	add	r2,r2,r3
10104b40:	10c00017 	ldw	r3,0(r2)
10104b44:	e0bffc17 	ldw	r2,-16(fp)
10104b48:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
10104b4c:	00840434 	movhi	r2,4112
10104b50:	1097f804 	addi	r2,r2,24544
10104b54:	e0fffb17 	ldw	r3,-20(fp)
10104b58:	18c00324 	muli	r3,r3,12
10104b5c:	10c5883a 	add	r2,r2,r3
10104b60:	10800104 	addi	r2,r2,4
10104b64:	10c00017 	ldw	r3,0(r2)
10104b68:	e0bffc17 	ldw	r2,-16(fp)
10104b6c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10104b70:	00840434 	movhi	r2,4112
10104b74:	1097f804 	addi	r2,r2,24544
10104b78:	e0fffb17 	ldw	r3,-20(fp)
10104b7c:	18c00324 	muli	r3,r3,12
10104b80:	10c5883a 	add	r2,r2,r3
10104b84:	10800204 	addi	r2,r2,8
10104b88:	10c00017 	ldw	r3,0(r2)
10104b8c:	e0bffc17 	ldw	r2,-16(fp)
10104b90:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10104b94:	e13ffb17 	ldw	r4,-20(fp)
10104b98:	01037a40 	call	101037a4 <alt_release_fd>
  }
} 
10104b9c:	0001883a 	nop
10104ba0:	e037883a 	mov	sp,fp
10104ba4:	dfc00117 	ldw	ra,4(sp)
10104ba8:	df000017 	ldw	fp,0(sp)
10104bac:	dec00204 	addi	sp,sp,8
10104bb0:	f800283a 	ret

10104bb4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
10104bb4:	defffb04 	addi	sp,sp,-20
10104bb8:	dfc00415 	stw	ra,16(sp)
10104bbc:	df000315 	stw	fp,12(sp)
10104bc0:	df000304 	addi	fp,sp,12
10104bc4:	e13ffd15 	stw	r4,-12(fp)
10104bc8:	e17ffe15 	stw	r5,-8(fp)
10104bcc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10104bd0:	01c07fc4 	movi	r7,511
10104bd4:	01800044 	movi	r6,1
10104bd8:	e17ffd17 	ldw	r5,-12(fp)
10104bdc:	01040434 	movhi	r4,4112
10104be0:	2117fb04 	addi	r4,r4,24556
10104be4:	0104af00 	call	10104af0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10104be8:	01c07fc4 	movi	r7,511
10104bec:	000d883a 	mov	r6,zero
10104bf0:	e17ffe17 	ldw	r5,-8(fp)
10104bf4:	01040434 	movhi	r4,4112
10104bf8:	2117f804 	addi	r4,r4,24544
10104bfc:	0104af00 	call	10104af0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10104c00:	01c07fc4 	movi	r7,511
10104c04:	01800044 	movi	r6,1
10104c08:	e17fff17 	ldw	r5,-4(fp)
10104c0c:	01040434 	movhi	r4,4112
10104c10:	2117fe04 	addi	r4,r4,24568
10104c14:	0104af00 	call	10104af0 <alt_open_fd>
}  
10104c18:	0001883a 	nop
10104c1c:	e037883a 	mov	sp,fp
10104c20:	dfc00117 	ldw	ra,4(sp)
10104c24:	df000017 	ldw	fp,0(sp)
10104c28:	dec00204 	addi	sp,sp,8
10104c2c:	f800283a 	ret

10104c30 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10104c30:	defffe04 	addi	sp,sp,-8
10104c34:	dfc00115 	stw	ra,4(sp)
10104c38:	df000015 	stw	fp,0(sp)
10104c3c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10104c40:	d0a00917 	ldw	r2,-32732(gp)
10104c44:	10000326 	beq	r2,zero,10104c54 <alt_get_errno+0x24>
10104c48:	d0a00917 	ldw	r2,-32732(gp)
10104c4c:	103ee83a 	callr	r2
10104c50:	00000106 	br	10104c58 <alt_get_errno+0x28>
10104c54:	d0a6ac04 	addi	r2,gp,-25936
}
10104c58:	e037883a 	mov	sp,fp
10104c5c:	dfc00117 	ldw	ra,4(sp)
10104c60:	df000017 	ldw	fp,0(sp)
10104c64:	dec00204 	addi	sp,sp,8
10104c68:	f800283a 	ret

10104c6c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
10104c6c:	defffd04 	addi	sp,sp,-12
10104c70:	df000215 	stw	fp,8(sp)
10104c74:	df000204 	addi	fp,sp,8
10104c78:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
10104c7c:	e0bfff17 	ldw	r2,-4(fp)
10104c80:	10800217 	ldw	r2,8(r2)
10104c84:	10d00034 	orhi	r3,r2,16384
10104c88:	e0bfff17 	ldw	r2,-4(fp)
10104c8c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10104c90:	e03ffe15 	stw	zero,-8(fp)
10104c94:	00001d06 	br	10104d0c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10104c98:	00840434 	movhi	r2,4112
10104c9c:	1097f804 	addi	r2,r2,24544
10104ca0:	e0fffe17 	ldw	r3,-8(fp)
10104ca4:	18c00324 	muli	r3,r3,12
10104ca8:	10c5883a 	add	r2,r2,r3
10104cac:	10c00017 	ldw	r3,0(r2)
10104cb0:	e0bfff17 	ldw	r2,-4(fp)
10104cb4:	10800017 	ldw	r2,0(r2)
10104cb8:	1880111e 	bne	r3,r2,10104d00 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10104cbc:	00840434 	movhi	r2,4112
10104cc0:	1097f804 	addi	r2,r2,24544
10104cc4:	e0fffe17 	ldw	r3,-8(fp)
10104cc8:	18c00324 	muli	r3,r3,12
10104ccc:	10c5883a 	add	r2,r2,r3
10104cd0:	10800204 	addi	r2,r2,8
10104cd4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10104cd8:	1000090e 	bge	r2,zero,10104d00 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
10104cdc:	e0bffe17 	ldw	r2,-8(fp)
10104ce0:	10c00324 	muli	r3,r2,12
10104ce4:	00840434 	movhi	r2,4112
10104ce8:	1097f804 	addi	r2,r2,24544
10104cec:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10104cf0:	e0bfff17 	ldw	r2,-4(fp)
10104cf4:	18800226 	beq	r3,r2,10104d00 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
10104cf8:	00bffcc4 	movi	r2,-13
10104cfc:	00000806 	br	10104d20 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10104d00:	e0bffe17 	ldw	r2,-8(fp)
10104d04:	10800044 	addi	r2,r2,1
10104d08:	e0bffe15 	stw	r2,-8(fp)
10104d0c:	d0a00817 	ldw	r2,-32736(gp)
10104d10:	1007883a 	mov	r3,r2
10104d14:	e0bffe17 	ldw	r2,-8(fp)
10104d18:	18bfdf2e 	bgeu	r3,r2,10104c98 <__alt_data_end+0xfffe4c98>
    }
  }
  
  /* The device is not locked */
 
  return 0;
10104d1c:	0005883a 	mov	r2,zero
}
10104d20:	e037883a 	mov	sp,fp
10104d24:	df000017 	ldw	fp,0(sp)
10104d28:	dec00104 	addi	sp,sp,4
10104d2c:	f800283a 	ret

10104d30 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10104d30:	defff604 	addi	sp,sp,-40
10104d34:	dfc00915 	stw	ra,36(sp)
10104d38:	df000815 	stw	fp,32(sp)
10104d3c:	df000804 	addi	fp,sp,32
10104d40:	e13ffd15 	stw	r4,-12(fp)
10104d44:	e17ffe15 	stw	r5,-8(fp)
10104d48:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
10104d4c:	00bfffc4 	movi	r2,-1
10104d50:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
10104d54:	00bffb44 	movi	r2,-19
10104d58:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
10104d5c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10104d60:	d1600604 	addi	r5,gp,-32744
10104d64:	e13ffd17 	ldw	r4,-12(fp)
10104d68:	010504c0 	call	1010504c <alt_find_dev>
10104d6c:	e0bff815 	stw	r2,-32(fp)
10104d70:	e0bff817 	ldw	r2,-32(fp)
10104d74:	1000051e 	bne	r2,zero,10104d8c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
10104d78:	e13ffd17 	ldw	r4,-12(fp)
10104d7c:	01050dc0 	call	101050dc <alt_find_file>
10104d80:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
10104d84:	00800044 	movi	r2,1
10104d88:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
10104d8c:	e0bff817 	ldw	r2,-32(fp)
10104d90:	10002926 	beq	r2,zero,10104e38 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
10104d94:	e13ff817 	ldw	r4,-32(fp)
10104d98:	01051e40 	call	101051e4 <alt_get_fd>
10104d9c:	e0bff915 	stw	r2,-28(fp)
10104da0:	e0bff917 	ldw	r2,-28(fp)
10104da4:	1000030e 	bge	r2,zero,10104db4 <open+0x84>
    {
      status = index;
10104da8:	e0bff917 	ldw	r2,-28(fp)
10104dac:	e0bffa15 	stw	r2,-24(fp)
10104db0:	00002306 	br	10104e40 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
10104db4:	e0bff917 	ldw	r2,-28(fp)
10104db8:	10c00324 	muli	r3,r2,12
10104dbc:	00840434 	movhi	r2,4112
10104dc0:	1097f804 	addi	r2,r2,24544
10104dc4:	1885883a 	add	r2,r3,r2
10104dc8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
10104dcc:	e0fffe17 	ldw	r3,-8(fp)
10104dd0:	00900034 	movhi	r2,16384
10104dd4:	10bfffc4 	addi	r2,r2,-1
10104dd8:	1886703a 	and	r3,r3,r2
10104ddc:	e0bffc17 	ldw	r2,-16(fp)
10104de0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10104de4:	e0bffb17 	ldw	r2,-20(fp)
10104de8:	1000051e 	bne	r2,zero,10104e00 <open+0xd0>
10104dec:	e13ffc17 	ldw	r4,-16(fp)
10104df0:	0104c6c0 	call	10104c6c <alt_file_locked>
10104df4:	e0bffa15 	stw	r2,-24(fp)
10104df8:	e0bffa17 	ldw	r2,-24(fp)
10104dfc:	10001016 	blt	r2,zero,10104e40 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
10104e00:	e0bff817 	ldw	r2,-32(fp)
10104e04:	10800317 	ldw	r2,12(r2)
10104e08:	10000826 	beq	r2,zero,10104e2c <open+0xfc>
10104e0c:	e0bff817 	ldw	r2,-32(fp)
10104e10:	10800317 	ldw	r2,12(r2)
10104e14:	e1ffff17 	ldw	r7,-4(fp)
10104e18:	e1bffe17 	ldw	r6,-8(fp)
10104e1c:	e17ffd17 	ldw	r5,-12(fp)
10104e20:	e13ffc17 	ldw	r4,-16(fp)
10104e24:	103ee83a 	callr	r2
10104e28:	00000106 	br	10104e30 <open+0x100>
10104e2c:	0005883a 	mov	r2,zero
10104e30:	e0bffa15 	stw	r2,-24(fp)
10104e34:	00000206 	br	10104e40 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
10104e38:	00bffb44 	movi	r2,-19
10104e3c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
10104e40:	e0bffa17 	ldw	r2,-24(fp)
10104e44:	1000090e 	bge	r2,zero,10104e6c <open+0x13c>
  {
    alt_release_fd (index);  
10104e48:	e13ff917 	ldw	r4,-28(fp)
10104e4c:	01037a40 	call	101037a4 <alt_release_fd>
    ALT_ERRNO = -status;
10104e50:	0104c300 	call	10104c30 <alt_get_errno>
10104e54:	1007883a 	mov	r3,r2
10104e58:	e0bffa17 	ldw	r2,-24(fp)
10104e5c:	0085c83a 	sub	r2,zero,r2
10104e60:	18800015 	stw	r2,0(r3)
    return -1;
10104e64:	00bfffc4 	movi	r2,-1
10104e68:	00000106 	br	10104e70 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
10104e6c:	e0bff917 	ldw	r2,-28(fp)
}
10104e70:	e037883a 	mov	sp,fp
10104e74:	dfc00117 	ldw	ra,4(sp)
10104e78:	df000017 	ldw	fp,0(sp)
10104e7c:	dec00204 	addi	sp,sp,8
10104e80:	f800283a 	ret

10104e84 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10104e84:	defffa04 	addi	sp,sp,-24
10104e88:	df000515 	stw	fp,20(sp)
10104e8c:	df000504 	addi	fp,sp,20
10104e90:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10104e94:	0005303a 	rdctl	r2,status
10104e98:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10104e9c:	e0fffc17 	ldw	r3,-16(fp)
10104ea0:	00bfff84 	movi	r2,-2
10104ea4:	1884703a 	and	r2,r3,r2
10104ea8:	1001703a 	wrctl	status,r2
  
  return context;
10104eac:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
10104eb0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
10104eb4:	e0bfff17 	ldw	r2,-4(fp)
10104eb8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10104ebc:	e0bffd17 	ldw	r2,-12(fp)
10104ec0:	10800017 	ldw	r2,0(r2)
10104ec4:	e0fffd17 	ldw	r3,-12(fp)
10104ec8:	18c00117 	ldw	r3,4(r3)
10104ecc:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
10104ed0:	e0bffd17 	ldw	r2,-12(fp)
10104ed4:	10800117 	ldw	r2,4(r2)
10104ed8:	e0fffd17 	ldw	r3,-12(fp)
10104edc:	18c00017 	ldw	r3,0(r3)
10104ee0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
10104ee4:	e0bffd17 	ldw	r2,-12(fp)
10104ee8:	e0fffd17 	ldw	r3,-12(fp)
10104eec:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10104ef0:	e0bffd17 	ldw	r2,-12(fp)
10104ef4:	e0fffd17 	ldw	r3,-12(fp)
10104ef8:	10c00015 	stw	r3,0(r2)
10104efc:	e0bffb17 	ldw	r2,-20(fp)
10104f00:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10104f04:	e0bffe17 	ldw	r2,-8(fp)
10104f08:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
10104f0c:	0001883a 	nop
10104f10:	e037883a 	mov	sp,fp
10104f14:	df000017 	ldw	fp,0(sp)
10104f18:	dec00104 	addi	sp,sp,4
10104f1c:	f800283a 	ret

10104f20 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10104f20:	defffb04 	addi	sp,sp,-20
10104f24:	dfc00415 	stw	ra,16(sp)
10104f28:	df000315 	stw	fp,12(sp)
10104f2c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10104f30:	d0a00c17 	ldw	r2,-32720(gp)
10104f34:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10104f38:	d0a6b217 	ldw	r2,-25912(gp)
10104f3c:	10800044 	addi	r2,r2,1
10104f40:	d0a6b215 	stw	r2,-25912(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10104f44:	00002e06 	br	10105000 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10104f48:	e0bffd17 	ldw	r2,-12(fp)
10104f4c:	10800017 	ldw	r2,0(r2)
10104f50:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10104f54:	e0bffd17 	ldw	r2,-12(fp)
10104f58:	10800403 	ldbu	r2,16(r2)
10104f5c:	10803fcc 	andi	r2,r2,255
10104f60:	10000426 	beq	r2,zero,10104f74 <alt_tick+0x54>
10104f64:	d0a6b217 	ldw	r2,-25912(gp)
10104f68:	1000021e 	bne	r2,zero,10104f74 <alt_tick+0x54>
    {
      alarm->rollover = 0;
10104f6c:	e0bffd17 	ldw	r2,-12(fp)
10104f70:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10104f74:	e0bffd17 	ldw	r2,-12(fp)
10104f78:	10800217 	ldw	r2,8(r2)
10104f7c:	d0e6b217 	ldw	r3,-25912(gp)
10104f80:	18801d36 	bltu	r3,r2,10104ff8 <alt_tick+0xd8>
10104f84:	e0bffd17 	ldw	r2,-12(fp)
10104f88:	10800403 	ldbu	r2,16(r2)
10104f8c:	10803fcc 	andi	r2,r2,255
10104f90:	1000191e 	bne	r2,zero,10104ff8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
10104f94:	e0bffd17 	ldw	r2,-12(fp)
10104f98:	10800317 	ldw	r2,12(r2)
10104f9c:	e0fffd17 	ldw	r3,-12(fp)
10104fa0:	18c00517 	ldw	r3,20(r3)
10104fa4:	1809883a 	mov	r4,r3
10104fa8:	103ee83a 	callr	r2
10104fac:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10104fb0:	e0bfff17 	ldw	r2,-4(fp)
10104fb4:	1000031e 	bne	r2,zero,10104fc4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
10104fb8:	e13ffd17 	ldw	r4,-12(fp)
10104fbc:	0104e840 	call	10104e84 <alt_alarm_stop>
10104fc0:	00000d06 	br	10104ff8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
10104fc4:	e0bffd17 	ldw	r2,-12(fp)
10104fc8:	10c00217 	ldw	r3,8(r2)
10104fcc:	e0bfff17 	ldw	r2,-4(fp)
10104fd0:	1887883a 	add	r3,r3,r2
10104fd4:	e0bffd17 	ldw	r2,-12(fp)
10104fd8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
10104fdc:	e0bffd17 	ldw	r2,-12(fp)
10104fe0:	10c00217 	ldw	r3,8(r2)
10104fe4:	d0a6b217 	ldw	r2,-25912(gp)
10104fe8:	1880032e 	bgeu	r3,r2,10104ff8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
10104fec:	e0bffd17 	ldw	r2,-12(fp)
10104ff0:	00c00044 	movi	r3,1
10104ff4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
10104ff8:	e0bffe17 	ldw	r2,-8(fp)
10104ffc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10105000:	e0fffd17 	ldw	r3,-12(fp)
10105004:	d0a00c04 	addi	r2,gp,-32720
10105008:	18bfcf1e 	bne	r3,r2,10104f48 <__alt_data_end+0xfffe4f48>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
1010500c:	0001883a 	nop
}
10105010:	0001883a 	nop
10105014:	e037883a 	mov	sp,fp
10105018:	dfc00117 	ldw	ra,4(sp)
1010501c:	df000017 	ldw	fp,0(sp)
10105020:	dec00204 	addi	sp,sp,8
10105024:	f800283a 	ret

10105028 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
10105028:	deffff04 	addi	sp,sp,-4
1010502c:	df000015 	stw	fp,0(sp)
10105030:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10105034:	000170fa 	wrctl	ienable,zero
}
10105038:	0001883a 	nop
1010503c:	e037883a 	mov	sp,fp
10105040:	df000017 	ldw	fp,0(sp)
10105044:	dec00104 	addi	sp,sp,4
10105048:	f800283a 	ret

1010504c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
1010504c:	defffa04 	addi	sp,sp,-24
10105050:	dfc00515 	stw	ra,20(sp)
10105054:	df000415 	stw	fp,16(sp)
10105058:	df000404 	addi	fp,sp,16
1010505c:	e13ffe15 	stw	r4,-8(fp)
10105060:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
10105064:	e0bfff17 	ldw	r2,-4(fp)
10105068:	10800017 	ldw	r2,0(r2)
1010506c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10105070:	e13ffe17 	ldw	r4,-8(fp)
10105074:	01003b40 	call	101003b4 <strlen>
10105078:	10800044 	addi	r2,r2,1
1010507c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10105080:	00000d06 	br	101050b8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10105084:	e0bffc17 	ldw	r2,-16(fp)
10105088:	10800217 	ldw	r2,8(r2)
1010508c:	e0fffd17 	ldw	r3,-12(fp)
10105090:	180d883a 	mov	r6,r3
10105094:	e17ffe17 	ldw	r5,-8(fp)
10105098:	1009883a 	mov	r4,r2
1010509c:	01054000 	call	10105400 <memcmp>
101050a0:	1000021e 	bne	r2,zero,101050ac <alt_find_dev+0x60>
    {
      /* match found */

      return next;
101050a4:	e0bffc17 	ldw	r2,-16(fp)
101050a8:	00000706 	br	101050c8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
101050ac:	e0bffc17 	ldw	r2,-16(fp)
101050b0:	10800017 	ldw	r2,0(r2)
101050b4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
101050b8:	e0fffc17 	ldw	r3,-16(fp)
101050bc:	e0bfff17 	ldw	r2,-4(fp)
101050c0:	18bff01e 	bne	r3,r2,10105084 <__alt_data_end+0xfffe5084>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
101050c4:	0005883a 	mov	r2,zero
}
101050c8:	e037883a 	mov	sp,fp
101050cc:	dfc00117 	ldw	ra,4(sp)
101050d0:	df000017 	ldw	fp,0(sp)
101050d4:	dec00204 	addi	sp,sp,8
101050d8:	f800283a 	ret

101050dc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
101050dc:	defffb04 	addi	sp,sp,-20
101050e0:	dfc00415 	stw	ra,16(sp)
101050e4:	df000315 	stw	fp,12(sp)
101050e8:	df000304 	addi	fp,sp,12
101050ec:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
101050f0:	d0a00417 	ldw	r2,-32752(gp)
101050f4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
101050f8:	00003106 	br	101051c0 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
101050fc:	e0bffd17 	ldw	r2,-12(fp)
10105100:	10800217 	ldw	r2,8(r2)
10105104:	1009883a 	mov	r4,r2
10105108:	01003b40 	call	101003b4 <strlen>
1010510c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10105110:	e0bffd17 	ldw	r2,-12(fp)
10105114:	10c00217 	ldw	r3,8(r2)
10105118:	e0bffe17 	ldw	r2,-8(fp)
1010511c:	10bfffc4 	addi	r2,r2,-1
10105120:	1885883a 	add	r2,r3,r2
10105124:	10800003 	ldbu	r2,0(r2)
10105128:	10803fcc 	andi	r2,r2,255
1010512c:	1080201c 	xori	r2,r2,128
10105130:	10bfe004 	addi	r2,r2,-128
10105134:	10800bd8 	cmpnei	r2,r2,47
10105138:	1000031e 	bne	r2,zero,10105148 <alt_find_file+0x6c>
    {
      len -= 1;
1010513c:	e0bffe17 	ldw	r2,-8(fp)
10105140:	10bfffc4 	addi	r2,r2,-1
10105144:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10105148:	e0bffe17 	ldw	r2,-8(fp)
1010514c:	e0ffff17 	ldw	r3,-4(fp)
10105150:	1885883a 	add	r2,r3,r2
10105154:	10800003 	ldbu	r2,0(r2)
10105158:	10803fcc 	andi	r2,r2,255
1010515c:	1080201c 	xori	r2,r2,128
10105160:	10bfe004 	addi	r2,r2,-128
10105164:	10800be0 	cmpeqi	r2,r2,47
10105168:	1000081e 	bne	r2,zero,1010518c <alt_find_file+0xb0>
1010516c:	e0bffe17 	ldw	r2,-8(fp)
10105170:	e0ffff17 	ldw	r3,-4(fp)
10105174:	1885883a 	add	r2,r3,r2
10105178:	10800003 	ldbu	r2,0(r2)
1010517c:	10803fcc 	andi	r2,r2,255
10105180:	1080201c 	xori	r2,r2,128
10105184:	10bfe004 	addi	r2,r2,-128
10105188:	10000a1e 	bne	r2,zero,101051b4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
1010518c:	e0bffd17 	ldw	r2,-12(fp)
10105190:	10800217 	ldw	r2,8(r2)
10105194:	e0fffe17 	ldw	r3,-8(fp)
10105198:	180d883a 	mov	r6,r3
1010519c:	e17fff17 	ldw	r5,-4(fp)
101051a0:	1009883a 	mov	r4,r2
101051a4:	01054000 	call	10105400 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
101051a8:	1000021e 	bne	r2,zero,101051b4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
101051ac:	e0bffd17 	ldw	r2,-12(fp)
101051b0:	00000706 	br	101051d0 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
101051b4:	e0bffd17 	ldw	r2,-12(fp)
101051b8:	10800017 	ldw	r2,0(r2)
101051bc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
101051c0:	e0fffd17 	ldw	r3,-12(fp)
101051c4:	d0a00404 	addi	r2,gp,-32752
101051c8:	18bfcc1e 	bne	r3,r2,101050fc <__alt_data_end+0xfffe50fc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
101051cc:	0005883a 	mov	r2,zero
}
101051d0:	e037883a 	mov	sp,fp
101051d4:	dfc00117 	ldw	ra,4(sp)
101051d8:	df000017 	ldw	fp,0(sp)
101051dc:	dec00204 	addi	sp,sp,8
101051e0:	f800283a 	ret

101051e4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
101051e4:	defffc04 	addi	sp,sp,-16
101051e8:	df000315 	stw	fp,12(sp)
101051ec:	df000304 	addi	fp,sp,12
101051f0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
101051f4:	00bffa04 	movi	r2,-24
101051f8:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
101051fc:	e03ffd15 	stw	zero,-12(fp)
10105200:	00001906 	br	10105268 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
10105204:	00840434 	movhi	r2,4112
10105208:	1097f804 	addi	r2,r2,24544
1010520c:	e0fffd17 	ldw	r3,-12(fp)
10105210:	18c00324 	muli	r3,r3,12
10105214:	10c5883a 	add	r2,r2,r3
10105218:	10800017 	ldw	r2,0(r2)
1010521c:	10000f1e 	bne	r2,zero,1010525c <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
10105220:	00840434 	movhi	r2,4112
10105224:	1097f804 	addi	r2,r2,24544
10105228:	e0fffd17 	ldw	r3,-12(fp)
1010522c:	18c00324 	muli	r3,r3,12
10105230:	10c5883a 	add	r2,r2,r3
10105234:	e0ffff17 	ldw	r3,-4(fp)
10105238:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
1010523c:	d0e00817 	ldw	r3,-32736(gp)
10105240:	e0bffd17 	ldw	r2,-12(fp)
10105244:	1880020e 	bge	r3,r2,10105250 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
10105248:	e0bffd17 	ldw	r2,-12(fp)
1010524c:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
10105250:	e0bffd17 	ldw	r2,-12(fp)
10105254:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
10105258:	00000606 	br	10105274 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1010525c:	e0bffd17 	ldw	r2,-12(fp)
10105260:	10800044 	addi	r2,r2,1
10105264:	e0bffd15 	stw	r2,-12(fp)
10105268:	e0bffd17 	ldw	r2,-12(fp)
1010526c:	10800810 	cmplti	r2,r2,32
10105270:	103fe41e 	bne	r2,zero,10105204 <__alt_data_end+0xfffe5204>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10105274:	e0bffe17 	ldw	r2,-8(fp)
}
10105278:	e037883a 	mov	sp,fp
1010527c:	df000017 	ldw	fp,0(sp)
10105280:	dec00104 	addi	sp,sp,4
10105284:	f800283a 	ret

10105288 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
10105288:	defffb04 	addi	sp,sp,-20
1010528c:	df000415 	stw	fp,16(sp)
10105290:	df000404 	addi	fp,sp,16
10105294:	e13ffe15 	stw	r4,-8(fp)
10105298:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
1010529c:	e0bfff17 	ldw	r2,-4(fp)
101052a0:	10840070 	cmpltui	r2,r2,4097
101052a4:	1000021e 	bne	r2,zero,101052b0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
101052a8:	00840004 	movi	r2,4096
101052ac:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
101052b0:	e0fffe17 	ldw	r3,-8(fp)
101052b4:	e0bfff17 	ldw	r2,-4(fp)
101052b8:	1885883a 	add	r2,r3,r2
101052bc:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
101052c0:	e0bffe17 	ldw	r2,-8(fp)
101052c4:	e0bffc15 	stw	r2,-16(fp)
101052c8:	00000506 	br	101052e0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
101052cc:	e0bffc17 	ldw	r2,-16(fp)
101052d0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
101052d4:	e0bffc17 	ldw	r2,-16(fp)
101052d8:	10800804 	addi	r2,r2,32
101052dc:	e0bffc15 	stw	r2,-16(fp)
101052e0:	e0fffc17 	ldw	r3,-16(fp)
101052e4:	e0bffd17 	ldw	r2,-12(fp)
101052e8:	18bff836 	bltu	r3,r2,101052cc <__alt_data_end+0xfffe52cc>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
101052ec:	e0bffe17 	ldw	r2,-8(fp)
101052f0:	108007cc 	andi	r2,r2,31
101052f4:	10000226 	beq	r2,zero,10105300 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
101052f8:	e0bffc17 	ldw	r2,-16(fp)
101052fc:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
10105300:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
10105304:	0001883a 	nop
10105308:	e037883a 	mov	sp,fp
1010530c:	df000017 	ldw	fp,0(sp)
10105310:	dec00104 	addi	sp,sp,4
10105314:	f800283a 	ret

10105318 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
10105318:	defffe04 	addi	sp,sp,-8
1010531c:	df000115 	stw	fp,4(sp)
10105320:	df000104 	addi	fp,sp,4
10105324:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
10105328:	e0bfff17 	ldw	r2,-4(fp)
1010532c:	10bffe84 	addi	r2,r2,-6
10105330:	10c00428 	cmpgeui	r3,r2,16
10105334:	18001a1e 	bne	r3,zero,101053a0 <alt_exception_cause_generated_bad_addr+0x88>
10105338:	100690ba 	slli	r3,r2,2
1010533c:	00840434 	movhi	r2,4112
10105340:	1094d404 	addi	r2,r2,21328
10105344:	1885883a 	add	r2,r3,r2
10105348:	10800017 	ldw	r2,0(r2)
1010534c:	1000683a 	jmp	r2
10105350:	10105390 	cmplti	zero,r2,16718
10105354:	10105390 	cmplti	zero,r2,16718
10105358:	101053a0 	cmpeqi	zero,r2,16718
1010535c:	101053a0 	cmpeqi	zero,r2,16718
10105360:	101053a0 	cmpeqi	zero,r2,16718
10105364:	10105390 	cmplti	zero,r2,16718
10105368:	10105398 	cmpnei	zero,r2,16718
1010536c:	101053a0 	cmpeqi	zero,r2,16718
10105370:	10105390 	cmplti	zero,r2,16718
10105374:	10105390 	cmplti	zero,r2,16718
10105378:	101053a0 	cmpeqi	zero,r2,16718
1010537c:	10105390 	cmplti	zero,r2,16718
10105380:	10105398 	cmpnei	zero,r2,16718
10105384:	101053a0 	cmpeqi	zero,r2,16718
10105388:	101053a0 	cmpeqi	zero,r2,16718
1010538c:	10105390 	cmplti	zero,r2,16718
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
10105390:	00800044 	movi	r2,1
10105394:	00000306 	br	101053a4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
10105398:	0005883a 	mov	r2,zero
1010539c:	00000106 	br	101053a4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
101053a0:	0005883a 	mov	r2,zero
  }
}
101053a4:	e037883a 	mov	sp,fp
101053a8:	df000017 	ldw	fp,0(sp)
101053ac:	dec00104 	addi	sp,sp,4
101053b0:	f800283a 	ret

101053b4 <atexit>:
101053b4:	200b883a 	mov	r5,r4
101053b8:	000f883a 	mov	r7,zero
101053bc:	000d883a 	mov	r6,zero
101053c0:	0009883a 	mov	r4,zero
101053c4:	010547c1 	jmpi	1010547c <__register_exitproc>

101053c8 <exit>:
101053c8:	defffe04 	addi	sp,sp,-8
101053cc:	000b883a 	mov	r5,zero
101053d0:	dc000015 	stw	r16,0(sp)
101053d4:	dfc00115 	stw	ra,4(sp)
101053d8:	2021883a 	mov	r16,r4
101053dc:	01055940 	call	10105594 <__call_exitprocs>
101053e0:	00840434 	movhi	r2,4112
101053e4:	109c7004 	addi	r2,r2,29120
101053e8:	11000017 	ldw	r4,0(r2)
101053ec:	20800f17 	ldw	r2,60(r4)
101053f0:	10000126 	beq	r2,zero,101053f8 <exit+0x30>
101053f4:	103ee83a 	callr	r2
101053f8:	8009883a 	mov	r4,r16
101053fc:	01057140 	call	10105714 <_exit>

10105400 <memcmp>:
10105400:	01c000c4 	movi	r7,3
10105404:	3980192e 	bgeu	r7,r6,1010546c <memcmp+0x6c>
10105408:	2144b03a 	or	r2,r4,r5
1010540c:	11c4703a 	and	r2,r2,r7
10105410:	10000f26 	beq	r2,zero,10105450 <memcmp+0x50>
10105414:	20800003 	ldbu	r2,0(r4)
10105418:	28c00003 	ldbu	r3,0(r5)
1010541c:	10c0151e 	bne	r2,r3,10105474 <memcmp+0x74>
10105420:	31bfff84 	addi	r6,r6,-2
10105424:	01ffffc4 	movi	r7,-1
10105428:	00000406 	br	1010543c <memcmp+0x3c>
1010542c:	20800003 	ldbu	r2,0(r4)
10105430:	28c00003 	ldbu	r3,0(r5)
10105434:	31bfffc4 	addi	r6,r6,-1
10105438:	10c00e1e 	bne	r2,r3,10105474 <memcmp+0x74>
1010543c:	21000044 	addi	r4,r4,1
10105440:	29400044 	addi	r5,r5,1
10105444:	31fff91e 	bne	r6,r7,1010542c <__alt_data_end+0xfffe542c>
10105448:	0005883a 	mov	r2,zero
1010544c:	f800283a 	ret
10105450:	20c00017 	ldw	r3,0(r4)
10105454:	28800017 	ldw	r2,0(r5)
10105458:	18bfee1e 	bne	r3,r2,10105414 <__alt_data_end+0xfffe5414>
1010545c:	31bfff04 	addi	r6,r6,-4
10105460:	21000104 	addi	r4,r4,4
10105464:	29400104 	addi	r5,r5,4
10105468:	39bff936 	bltu	r7,r6,10105450 <__alt_data_end+0xfffe5450>
1010546c:	303fe91e 	bne	r6,zero,10105414 <__alt_data_end+0xfffe5414>
10105470:	003ff506 	br	10105448 <__alt_data_end+0xfffe5448>
10105474:	10c5c83a 	sub	r2,r2,r3
10105478:	f800283a 	ret

1010547c <__register_exitproc>:
1010547c:	defffa04 	addi	sp,sp,-24
10105480:	dc000315 	stw	r16,12(sp)
10105484:	04040434 	movhi	r16,4112
10105488:	841c7004 	addi	r16,r16,29120
1010548c:	80c00017 	ldw	r3,0(r16)
10105490:	dc400415 	stw	r17,16(sp)
10105494:	dfc00515 	stw	ra,20(sp)
10105498:	18805217 	ldw	r2,328(r3)
1010549c:	2023883a 	mov	r17,r4
101054a0:	10003726 	beq	r2,zero,10105580 <__register_exitproc+0x104>
101054a4:	10c00117 	ldw	r3,4(r2)
101054a8:	010007c4 	movi	r4,31
101054ac:	20c00e16 	blt	r4,r3,101054e8 <__register_exitproc+0x6c>
101054b0:	1a000044 	addi	r8,r3,1
101054b4:	8800221e 	bne	r17,zero,10105540 <__register_exitproc+0xc4>
101054b8:	18c00084 	addi	r3,r3,2
101054bc:	18c7883a 	add	r3,r3,r3
101054c0:	18c7883a 	add	r3,r3,r3
101054c4:	12000115 	stw	r8,4(r2)
101054c8:	10c7883a 	add	r3,r2,r3
101054cc:	19400015 	stw	r5,0(r3)
101054d0:	0005883a 	mov	r2,zero
101054d4:	dfc00517 	ldw	ra,20(sp)
101054d8:	dc400417 	ldw	r17,16(sp)
101054dc:	dc000317 	ldw	r16,12(sp)
101054e0:	dec00604 	addi	sp,sp,24
101054e4:	f800283a 	ret
101054e8:	00800034 	movhi	r2,0
101054ec:	10800004 	addi	r2,r2,0
101054f0:	10002626 	beq	r2,zero,1010558c <__register_exitproc+0x110>
101054f4:	01006404 	movi	r4,400
101054f8:	d9400015 	stw	r5,0(sp)
101054fc:	d9800115 	stw	r6,4(sp)
10105500:	d9c00215 	stw	r7,8(sp)
10105504:	00000000 	call	10000000 <__alt_mem_onchip_memory2_0-0x100000>
10105508:	d9400017 	ldw	r5,0(sp)
1010550c:	d9800117 	ldw	r6,4(sp)
10105510:	d9c00217 	ldw	r7,8(sp)
10105514:	10001d26 	beq	r2,zero,1010558c <__register_exitproc+0x110>
10105518:	81000017 	ldw	r4,0(r16)
1010551c:	10000115 	stw	zero,4(r2)
10105520:	02000044 	movi	r8,1
10105524:	22405217 	ldw	r9,328(r4)
10105528:	0007883a 	mov	r3,zero
1010552c:	12400015 	stw	r9,0(r2)
10105530:	20805215 	stw	r2,328(r4)
10105534:	10006215 	stw	zero,392(r2)
10105538:	10006315 	stw	zero,396(r2)
1010553c:	883fde26 	beq	r17,zero,101054b8 <__alt_data_end+0xfffe54b8>
10105540:	18c9883a 	add	r4,r3,r3
10105544:	2109883a 	add	r4,r4,r4
10105548:	1109883a 	add	r4,r2,r4
1010554c:	21802215 	stw	r6,136(r4)
10105550:	01800044 	movi	r6,1
10105554:	12406217 	ldw	r9,392(r2)
10105558:	30cc983a 	sll	r6,r6,r3
1010555c:	4992b03a 	or	r9,r9,r6
10105560:	12406215 	stw	r9,392(r2)
10105564:	21c04215 	stw	r7,264(r4)
10105568:	01000084 	movi	r4,2
1010556c:	893fd21e 	bne	r17,r4,101054b8 <__alt_data_end+0xfffe54b8>
10105570:	11006317 	ldw	r4,396(r2)
10105574:	218cb03a 	or	r6,r4,r6
10105578:	11806315 	stw	r6,396(r2)
1010557c:	003fce06 	br	101054b8 <__alt_data_end+0xfffe54b8>
10105580:	18805304 	addi	r2,r3,332
10105584:	18805215 	stw	r2,328(r3)
10105588:	003fc606 	br	101054a4 <__alt_data_end+0xfffe54a4>
1010558c:	00bfffc4 	movi	r2,-1
10105590:	003fd006 	br	101054d4 <__alt_data_end+0xfffe54d4>

10105594 <__call_exitprocs>:
10105594:	defff504 	addi	sp,sp,-44
10105598:	df000915 	stw	fp,36(sp)
1010559c:	dd400615 	stw	r21,24(sp)
101055a0:	dc800315 	stw	r18,12(sp)
101055a4:	dfc00a15 	stw	ra,40(sp)
101055a8:	ddc00815 	stw	r23,32(sp)
101055ac:	dd800715 	stw	r22,28(sp)
101055b0:	dd000515 	stw	r20,20(sp)
101055b4:	dcc00415 	stw	r19,16(sp)
101055b8:	dc400215 	stw	r17,8(sp)
101055bc:	dc000115 	stw	r16,4(sp)
101055c0:	d9000015 	stw	r4,0(sp)
101055c4:	2839883a 	mov	fp,r5
101055c8:	04800044 	movi	r18,1
101055cc:	057fffc4 	movi	r21,-1
101055d0:	00840434 	movhi	r2,4112
101055d4:	109c7004 	addi	r2,r2,29120
101055d8:	12000017 	ldw	r8,0(r2)
101055dc:	45005217 	ldw	r20,328(r8)
101055e0:	44c05204 	addi	r19,r8,328
101055e4:	a0001c26 	beq	r20,zero,10105658 <__call_exitprocs+0xc4>
101055e8:	a0800117 	ldw	r2,4(r20)
101055ec:	15ffffc4 	addi	r23,r2,-1
101055f0:	b8000d16 	blt	r23,zero,10105628 <__call_exitprocs+0x94>
101055f4:	14000044 	addi	r16,r2,1
101055f8:	8421883a 	add	r16,r16,r16
101055fc:	8421883a 	add	r16,r16,r16
10105600:	84402004 	addi	r17,r16,128
10105604:	a463883a 	add	r17,r20,r17
10105608:	a421883a 	add	r16,r20,r16
1010560c:	e0001e26 	beq	fp,zero,10105688 <__call_exitprocs+0xf4>
10105610:	80804017 	ldw	r2,256(r16)
10105614:	e0801c26 	beq	fp,r2,10105688 <__call_exitprocs+0xf4>
10105618:	bdffffc4 	addi	r23,r23,-1
1010561c:	843fff04 	addi	r16,r16,-4
10105620:	8c7fff04 	addi	r17,r17,-4
10105624:	bd7ff91e 	bne	r23,r21,1010560c <__alt_data_end+0xfffe560c>
10105628:	00800034 	movhi	r2,0
1010562c:	10800004 	addi	r2,r2,0
10105630:	10000926 	beq	r2,zero,10105658 <__call_exitprocs+0xc4>
10105634:	a0800117 	ldw	r2,4(r20)
10105638:	1000301e 	bne	r2,zero,101056fc <__call_exitprocs+0x168>
1010563c:	a0800017 	ldw	r2,0(r20)
10105640:	10003226 	beq	r2,zero,1010570c <__call_exitprocs+0x178>
10105644:	a009883a 	mov	r4,r20
10105648:	98800015 	stw	r2,0(r19)
1010564c:	00000000 	call	10000000 <__alt_mem_onchip_memory2_0-0x100000>
10105650:	9d000017 	ldw	r20,0(r19)
10105654:	a03fe41e 	bne	r20,zero,101055e8 <__alt_data_end+0xfffe55e8>
10105658:	dfc00a17 	ldw	ra,40(sp)
1010565c:	df000917 	ldw	fp,36(sp)
10105660:	ddc00817 	ldw	r23,32(sp)
10105664:	dd800717 	ldw	r22,28(sp)
10105668:	dd400617 	ldw	r21,24(sp)
1010566c:	dd000517 	ldw	r20,20(sp)
10105670:	dcc00417 	ldw	r19,16(sp)
10105674:	dc800317 	ldw	r18,12(sp)
10105678:	dc400217 	ldw	r17,8(sp)
1010567c:	dc000117 	ldw	r16,4(sp)
10105680:	dec00b04 	addi	sp,sp,44
10105684:	f800283a 	ret
10105688:	a0800117 	ldw	r2,4(r20)
1010568c:	80c00017 	ldw	r3,0(r16)
10105690:	10bfffc4 	addi	r2,r2,-1
10105694:	15c01426 	beq	r2,r23,101056e8 <__call_exitprocs+0x154>
10105698:	80000015 	stw	zero,0(r16)
1010569c:	183fde26 	beq	r3,zero,10105618 <__alt_data_end+0xfffe5618>
101056a0:	95c8983a 	sll	r4,r18,r23
101056a4:	a0806217 	ldw	r2,392(r20)
101056a8:	a5800117 	ldw	r22,4(r20)
101056ac:	2084703a 	and	r2,r4,r2
101056b0:	10000b26 	beq	r2,zero,101056e0 <__call_exitprocs+0x14c>
101056b4:	a0806317 	ldw	r2,396(r20)
101056b8:	2088703a 	and	r4,r4,r2
101056bc:	20000c1e 	bne	r4,zero,101056f0 <__call_exitprocs+0x15c>
101056c0:	89400017 	ldw	r5,0(r17)
101056c4:	d9000017 	ldw	r4,0(sp)
101056c8:	183ee83a 	callr	r3
101056cc:	a0800117 	ldw	r2,4(r20)
101056d0:	15bfbf1e 	bne	r2,r22,101055d0 <__alt_data_end+0xfffe55d0>
101056d4:	98800017 	ldw	r2,0(r19)
101056d8:	153fcf26 	beq	r2,r20,10105618 <__alt_data_end+0xfffe5618>
101056dc:	003fbc06 	br	101055d0 <__alt_data_end+0xfffe55d0>
101056e0:	183ee83a 	callr	r3
101056e4:	003ff906 	br	101056cc <__alt_data_end+0xfffe56cc>
101056e8:	a5c00115 	stw	r23,4(r20)
101056ec:	003feb06 	br	1010569c <__alt_data_end+0xfffe569c>
101056f0:	89000017 	ldw	r4,0(r17)
101056f4:	183ee83a 	callr	r3
101056f8:	003ff406 	br	101056cc <__alt_data_end+0xfffe56cc>
101056fc:	a0800017 	ldw	r2,0(r20)
10105700:	a027883a 	mov	r19,r20
10105704:	1029883a 	mov	r20,r2
10105708:	003fb606 	br	101055e4 <__alt_data_end+0xfffe55e4>
1010570c:	0005883a 	mov	r2,zero
10105710:	003ffb06 	br	10105700 <__alt_data_end+0xfffe5700>

10105714 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
10105714:	defffd04 	addi	sp,sp,-12
10105718:	df000215 	stw	fp,8(sp)
1010571c:	df000204 	addi	fp,sp,8
10105720:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
10105724:	0001883a 	nop
10105728:	e0bfff17 	ldw	r2,-4(fp)
1010572c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10105730:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10105734:	10000226 	beq	r2,zero,10105740 <_exit+0x2c>
    ALT_SIM_FAIL();
10105738:	002af070 	cmpltui	zero,zero,43969
1010573c:	00000106 	br	10105744 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10105740:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10105744:	003fff06 	br	10105744 <__alt_data_end+0xfffe5744>
