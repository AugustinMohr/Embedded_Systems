
Labo4_LCD.elf:     file format elf32-littlenios2
Labo4_LCD.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10100244

Program Header:
    LOAD off    0x00001000 vaddr 0x10100000 paddr 0x10100000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10100020 paddr 0x10100020 align 2**12
         filesz 0x000113c8 memsz 0x000113c8 flags r-x
    LOAD off    0x000123e8 vaddr 0x101113e8 paddr 0x10112f44 align 2**12
         filesz 0x00001b5c memsz 0x00001b5c flags rw-
    LOAD off    0x00014aa0 vaddr 0x10114aa0 paddr 0x10114aa0 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10100000  10100000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  10100020  10100020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010d8c  10100244  10100244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000418  10110fd0  10110fd0  00011fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b5c  101113e8  10112f44  000123e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  10114aa0  10114aa0  00014aa0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  10114c00  10114c00  00013f44  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00013f44  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001008  00000000  00000000  00013f68  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00029b95  00000000  00000000  00014f70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a532  00000000  00000000  0003eb05  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000ca1b  00000000  00000000  00049037  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000257c  00000000  00000000  00055a54  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003b40  00000000  00000000  00057fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001848e  00000000  00000000  0005bb10  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00073fa0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001a00  00000000  00000000  00073fd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00078f42  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00078f45  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00078f51  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00078f52  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00078f53  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00078f5e  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00078f69  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000a  00000000  00000000  00078f74  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000059  00000000  00000000  00078f7e  2**0
                  CONTENTS, READONLY
 26 .jdi          00007004  00000000  00000000  00078fd7  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0028112c  00000000  00000000  0007ffdb  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10100000 l    d  .entry	00000000 .entry
10100020 l    d  .exceptions	00000000 .exceptions
10100244 l    d  .text	00000000 .text
10110fd0 l    d  .rodata	00000000 .rodata
101113e8 l    d  .rwdata	00000000 .rwdata
10114aa0 l    d  .bss	00000000 .bss
10114c00 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/nicca/DeskDoc/EmbeddedSystems/Embedded_Systems/lab_4_project_template/sw/nios/Labo4_LCD_bsp//obj/HAL/src/crt0.o
1010028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 fgetc.c
00000000 l    df *ABS*	00000000 findfp.c
10101750 l     F .text	00000008 __fp_unlock
10101764 l     F .text	0000019c __sinit.part.1
10101900 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
101113e8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
10103324 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
10111126 l     O .rodata	00000010 zeroes.4404
101059d8 l     F .text	000000bc __sbprintf
10111136 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
10105c9c l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
10111c34 l     O .rwdata	00000020 lc_ctype_charset
10111c14 l     O .rwdata	00000020 lc_message_charset
10111c54 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
10111164 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
101096b4 l     F .text	000000fc __sprint_r.part.0
10111298 l     O .rodata	00000010 blanks.4348
10111288 l     O .rodata	00000010 zeroes.4349
1010ac40 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
1010e420 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1010e52c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1010e558 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
1010e644 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1010e724 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
1010e810 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
1010e9e4 l     F .text	0000003c alt_get_errno
1010ea20 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
1010ec38 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10112eec l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
1010ee84 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
1010efb8 l     F .text	00000034 alt_dev_reg
10111e34 l     O .rwdata	00001060 jtag_uart_0
10112e94 l     O .rwdata	00000028 altera_hostfs
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
1010f29c l     F .text	0000020c altera_avalon_jtag_uart_irq
1010f4a8 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_hostfs.c
10112ef0 l     O .rwdata	00000009 hcinfo.2538
10112efc l     O .rwdata	0000000a hcinfo.2551
10112f08 l     O .rwdata	00000009 hcinfo.2560
10112f14 l     O .rwdata	0000000a hcinfo.2573
10112f20 l     O .rwdata	0000000a hcinfo.2586
10112f2c l     O .rwdata	0000000a hcinfo.2612
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
101100d8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_fs_reg.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10110808 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10114ad4 g     O .bss	00000004 alt_instruction_exception_handler
10108e28 g     F .text	00000074 _mprec_log10
10108f14 g     F .text	0000008c __any_on
10107a8c g     F .text	00000054 _isatty_r
10111170 g     O .rodata	00000028 __mprec_tinytens
1010e920 g     F .text	0000007c alt_main
10103250 g     F .text	000000c0 _puts_r
10114b00 g     O .bss	00000100 alt_irq
10107bbc g     F .text	00000060 _lseek_r
10112f44 g       *ABS*	00000000 __flash_rwdata_start
10107524 g     F .text	000000ac __sflags
1010cf4c g     F .text	00000088 .hidden __eqdf2
10114c00 g       *ABS*	00000000 __alt_heap_start
10103214 g     F .text	0000003c printf
1010b120 g     F .text	0000009c _wcrtomb_r
101036c8 g     F .text	0000005c __sseek
10101aa0 g     F .text	00000010 __sinit
1010afc8 g     F .text	00000140 __swbuf_r
10107ae0 g     F .text	0000007c _setlocale_r
10101908 g     F .text	00000068 __sfmoreglue
1010e9c0 g     F .text	00000024 __malloc_unlock
1010fae0 g     F .text	0000011c alt_hostfs_open
10107e48 g     F .text	0000015c memmove
10101a88 g     F .text	00000018 _cleanup
10107fa4 g     F .text	000000a8 _Balloc
1010cfd4 g     F .text	000000dc .hidden __gtdf2
10110aec g     F .text	00000024 altera_nios2_gen2_irq_init
10100290 g     F .text	00000058 waitms
10100000 g     F .entry	0000001c __reset
10100ce4 g     F .text	0000039c upload_image
10100020 g       *ABS*	00000000 __flash_exceptions_start
101006dc g     F .text	00000070 LCD_Clear
101024b0 g     F .text	0000005c _fstat_r
10114aa0 g     O .bss	00000004 errno
10103588 g     F .text	00000014 __srget
10103644 g     F .text	00000008 __seofread
10100318 g     F .text	00000030 LCD_WR_REG
10114ac0 g     O .bss	00000004 alt_argv
1011aebc g       *ABS*	00000000 _gp
10111cb4 g     O .rwdata	00000180 alt_fd_list
1010fd18 g     F .text	00000068 alt_hostfs_seek
10110278 g     F .text	00000090 alt_find_dev
10107d00 g     F .text	00000148 memcpy
10101758 g     F .text	0000000c _cleanup_r
1010e238 g     F .text	000000dc .hidden __floatsidf
10110410 g     F .text	00000080 alt_fs_reg
101108cc g     F .text	0000007c alt_io_redirect
1010d0b0 g     F .text	000000f4 .hidden __ltdf2
10110fd0 g       *ABS*	00000000 __DTOR_END__
10103310 g     F .text	00000014 puts
10110ba0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
10109564 g     F .text	00000074 __fpclassifyd
10108d84 g     F .text	000000a4 __ratio
1010ac24 g     F .text	0000001c __vfiprintf_internal
1010f6a0 g     F .text	0000021c altera_avalon_jtag_uart_read
101031e4 g     F .text	00000030 _printf_r
10100000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
101011f0 g     F .text	00000064 .hidden __udivsi3
1010e680 g     F .text	000000a4 isatty
101111c0 g     O .rodata	000000c8 __mprec_tens
10100a98 g     F .text	00000030 BUFF_ADD_WR
10107b5c g     F .text	0000000c __locale_charset
10110b10 g     F .text	00000090 alt_icache_flush
10114aac g     O .bss	00000004 __malloc_top_pad
10112ecc g     O .rwdata	00000004 __mb_cur_max
10107b8c g     F .text	0000000c _localeconv_r
101083b0 g     F .text	0000003c __i2b
101075d0 g     F .text	000004bc __sfvwrite_r
1010359c g     F .text	00000054 _sbrk_r
1010fc40 g     F .text	0000006c alt_hostfs_read
10108fa0 g     F .text	00000060 _read_r
10112ee4 g     O .rwdata	00000004 alt_max_fd
101012ac g     F .text	000000f0 _fclose_r
10101628 g     F .text	00000030 fflush
10114aa8 g     O .bss	00000004 __malloc_max_sbrked_mem
10101658 g     F .text	00000070 _fgetc_r
1010bdb8 g     F .text	000008ac .hidden __adddf3
10108b2c g     F .text	0000010c __b2d
1010b880 g     F .text	00000538 .hidden __umoddi3
1010e84c g     F .text	000000d4 lseek
10112ebc g     O .rwdata	00000004 _global_impure_ptr
10109000 g     F .text	00000564 _realloc_r
10114c00 g       *ABS*	00000000 __bss_end
10110718 g     F .text	000000f0 alt_iic_isr_register
101109e4 g     F .text	00000108 alt_tick
1010b308 g     F .text	00000578 .hidden __udivdi3
1010af24 g     F .text	00000024 _fputwc_r
10111198 g     O .rodata	00000028 __mprec_bigtens
10108194 g     F .text	00000104 __s2b
1010e314 g     F .text	000000a8 .hidden __floatunsidf
1010886c g     F .text	00000060 __mcmp
10101ac0 g     F .text	00000018 __fp_lock_all
101106cc g     F .text	0000004c alt_ic_irq_enabled
10110948 g     F .text	0000009c alt_alarm_stop
10114ac8 g     O .bss	00000004 alt_irq_active
10102050 g     F .text	00000444 _fseeko_r
1010fbfc g     F .text	00000044 alt_hostfs_close
101000fc g     F .exceptions	000000d4 alt_irq_handler
10111c8c g     O .rwdata	00000028 alt_dev_null
10110090 g     F .text	00000048 alt_dcache_flush_all
10108298 g     F .text	00000068 __hi0bits
1010e1b8 g     F .text	00000080 .hidden __fixdfsi
10112f44 g       *ABS*	00000000 __ram_rwdata_end
101002e8 g     F .text	00000030 LCD_WR_DATA
10112edc g     O .rwdata	00000008 alt_dev_list
1010eec0 g     F .text	000000f8 write
101113e8 g       *ABS*	00000000 __ram_rodata_end
1010e594 g     F .text	000000b0 fstat
1010d0b0 g     F .text	000000f4 .hidden __ledf2
101085e4 g     F .text	00000140 __pow5mult
101097c8 g     F .text	0000145c ___vfiprintf_internal_r
10114ab8 g     O .bss	00000004 __nlocale_changed
10101254 g     F .text	00000058 .hidden __umodsi3
10114c00 g       *ABS*	00000000 end
10102494 g     F .text	0000001c fseeko
10102034 g     F .text	0000001c fseek
1010f1dc g     F .text	000000c0 altera_avalon_jtag_uart_init
101001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
10110fd0 g       *ABS*	00000000 __CTOR_LIST__
10120000 g       *ABS*	00000000 __alt_stack_pointer
1010e3bc g     F .text	00000064 .hidden __clzsi2
1010f8bc g     F .text	00000224 altera_avalon_jtag_uart_write
10101ab0 g     F .text	00000004 __sfp_lock_acquire
10107c1c g     F .text	000000e4 memchr
101037c4 g     F .text	000021f8 ___vfprintf_internal_r
10101d20 g     F .text	00000310 _free_r
10107b68 g     F .text	00000010 __locale_mb_cur_max
10100a30 g     F .text	0000002c LCD_reset
1010074c g     F .text	00000088 LCD_SetCursor
10110e1c g     F .text	00000180 __call_exitprocs
10103514 g     F .text	00000074 __srget_r
10100b28 g     F .text	000001bc test
10114ab4 g     O .bss	00000004 __mlocale_changed
10112ec4 g     O .rwdata	00000004 __malloc_sbrk_base
10100244 g     F .text	0000004c _start
10114acc g     O .bss	00000004 _alt_tick_rate
10108724 g     F .text	00000148 __lshift
10114ad0 g     O .bss	00000004 _alt_nticks
1010ec74 g     F .text	000000fc read
1010f024 g     F .text	00000054 alt_sys_init
10103184 g     F .text	00000060 _open_r
10110d04 g     F .text	00000118 __register_exitproc
101083ec g     F .text	000001f8 __multiply
1010f548 g     F .text	00000068 altera_avalon_jtag_uart_close
101113e8 g       *ABS*	00000000 __ram_rwdata_start
10110fd0 g       *ABS*	00000000 __ram_rodata_start
10114ad8 g     O .bss	00000028 __malloc_current_mallinfo
10108c38 g     F .text	0000014c __d2b
1010f078 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10110490 g     F .text	000000a4 alt_get_fd
10105c48 g     F .text	00000054 _close_r
10110c88 g     F .text	0000007c memcmp
1010f138 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10114c00 g       *ABS*	00000000 __alt_stack_base
1010f188 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10105af4 g     F .text	00000154 __swsetup_r
1010c664 g     F .text	000008e8 .hidden __divdf3
10101970 g     F .text	00000118 __sfp
10108e9c g     F .text	00000078 __copybits
1011180c g     O .rwdata	00000408 __malloc_av_
10101abc g     F .text	00000004 __sinit_lock_release
1010d1a4 g     F .text	00000718 .hidden __muldf3
101035f0 g     F .text	00000054 __sread
10110308 g     F .text	00000108 alt_find_file
10110114 g     F .text	000000a4 alt_dev_llist_insert
1010e99c g     F .text	00000024 __malloc_lock
1010edd4 g     F .text	000000b0 sbrk
101015cc g     F .text	0000005c _fflush_r
1010acfc g     F .text	000000c4 _calloc_r
10101be4 g     F .text	00000018 fopen
10114aa0 g       *ABS*	00000000 __bss_start
10100348 g     F .text	00000394 LCD_Init
1010305c g     F .text	00000128 memset
10100af8 g     F .text	00000030 BURST_COUNT_WR
10101080 g     F .text	00000078 main
10114ac4 g     O .bss	00000004 alt_envp
10114aa4 g     O .bss	00000004 __malloc_max_total_mem
10100ac8 g     F .text	00000030 BUFF_LEN_WR
1010f0d8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
1010b108 g     F .text	00000018 __swbuf
10103724 g     F .text	00000008 __sclose
10120000 g       *ABS*	00000000 __alt_heap_limit
1010139c g     F .text	00000014 fclose
10105e9c g     F .text	00001688 _dtoa_r
10102850 g     F .text	0000080c _malloc_r
1010b27c g     F .text	00000030 __ascii_wctomb
10112ee8 g     O .rwdata	00000004 alt_errno
1010250c g     F .text	000000c4 _fwalk
101010f8 g     F .text	00000084 .hidden __divsi3
10101bfc g     F .text	00000124 _malloc_trim_r
10110fd0 g       *ABS*	00000000 __CTOR_END__
101095d8 g     F .text	000000dc strcmp
10110fd0 g       *ABS*	00000000 __flash_rodata_start
10110fd0 g       *ABS*	00000000 __DTOR_LIST__
1010cf4c g     F .text	00000088 .hidden __nedf2
1010efec g     F .text	00000038 alt_irq_init
1010ed70 g     F .text	00000064 alt_release_fd
101016c8 g     F .text	00000088 fgetc
101112a8 g     O .rodata	00000100 .hidden __clz_tab
10114ab0 g     O .bss	00000004 _PathLocale
10110c3c g     F .text	00000014 atexit
10105a94 g     F .text	00000060 _write_r
10107b98 g     F .text	00000018 setlocale
10112ec0 g     O .rwdata	00000004 _impure_ptr
10114abc g     O .bss	00000004 alt_argc
101013b0 g     F .text	0000021c __sflush_r
10110218 g     F .text	00000060 _do_dtors
10107b84 g     F .text	00000008 __locale_cjk_lang
10102030 g     F .text	00000004 _fseek_r
10103340 g     F .text	000001d4 __srefill_r
10100020 g       .exceptions	00000000 alt_irq_entry
10108ac8 g     F .text	00000064 __ulp
10101ad8 g     F .text	00000018 __fp_unlock_all
10112ed4 g     O .rwdata	00000008 alt_fs_list
1010fcac g     F .text	0000006c alt_hostfs_write
10100020 g       *ABS*	00000000 __ram_exceptions_start
10107bb0 g     F .text	0000000c localeconv
10110568 g     F .text	00000050 alt_ic_isr_register
10112f44 g       *ABS*	00000000 _edata
10114c00 g       *ABS*	00000000 _end
1010adc0 g     F .text	00000164 __fputwc
10100244 g       *ABS*	00000000 __ram_exceptions_end
1010f5b0 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
10110640 g     F .text	0000008c alt_ic_irq_disable
1010364c g     F .text	0000007c __swrite
10112ec8 g     O .rwdata	00000004 __malloc_trim_threshold
10107b78 g     F .text	0000000c __locale_msgcharset
10110c50 g     F .text	00000038 exit
101025d0 g     F .text	000000c4 _fwalk_reent
101088cc g     F .text	000001fc __mdiff
1010117c g     F .text	00000074 .hidden __modsi3
10120000 g       *ABS*	00000000 __alt_data_end
10100020 g     F .exceptions	00000000 alt_exception
10101ab4 g     F .text	00000004 __sfp_lock_release
10101af0 g     F .text	000000f4 _fopen_r
10110f9c g     F .text	00000034 _exit
1010ff64 g     F .text	0000012c alt_alarm_start
10102694 g     F .text	000001bc __smakebuf_r
1010372c g     F .text	00000098 strlen
1010eae4 g     F .text	00000154 open
1010cfd4 g     F .text	000000dc .hidden __gedf2
10112ed0 g     O .rwdata	00000004 __wctomb
101097b0 g     F .text	00000018 __sprint_r
10110534 g     F .text	00000034 alt_icache_flush_all
10100a5c g     F .text	0000003c MEM_WR
10112f38 g     O .rwdata	00000004 alt_priority_mask
101105b8 g     F .text	00000088 alt_ic_irq_enable
101059bc g     F .text	0000001c __vfprintf_internal
1010b2ac g     F .text	0000005c _wctomb_r
1010d8bc g     F .text	000008fc .hidden __subdf3
10108300 g     F .text	000000b0 __lo0bits
10112f3c g     O .rwdata	00000008 alt_alarm_list
101101b8 g     F .text	00000060 _do_ctors
1010b1bc g     F .text	000000c0 wcrtomb
1010e45c g     F .text	000000d0 close
1010e78c g     F .text	00000084 alt_load
101007d4 g     F .text	0000025c LCD_Swiss
1010af48 g     F .text	00000080 fputwc
10101ab8 g     F .text	00000004 __sinit_lock_acquire
10108074 g     F .text	00000120 __multadd
1010804c g     F .text	00000028 _Bfree
1010fd80 g     F .text	000001e4 alt_hostfs_fstat



Disassembly of section .entry:

10100000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
10100000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
10100004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
10100008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
1010000c:	00bffd16 	blt	zero,r2,10100004 <__alt_data_end+0xfffe0004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10100010:	00440434 	movhi	at,4112
    ori r1, r1, %lo(_start)
10100014:	08409114 	ori	at,at,580
    jmp r1
10100018:	0800683a 	jmp	at
1010001c:	00000000 	call	10000000 <__reset-0x100000>

Disassembly of section .exceptions:

10100020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10100020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10100024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10100028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1010002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10100030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10100034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10100038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1010003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10100040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10100044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10100048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1010004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10100050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10100054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10100058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1010005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10100060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10100064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10100068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1010006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10100070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10100074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10100078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1010007c:	10000326 	beq	r2,zero,1010008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10100080:	20000226 	beq	r4,zero,1010008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10100084:	01000fc0 	call	101000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10100088:	00000706 	br	101000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1010008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10100090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10100094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10100098:	01001d00 	call	101001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1010009c:	1000021e 	bne	r2,zero,101000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
101000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
101000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
101000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
101000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
101000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
101000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
101000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
101000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
101000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
101000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
101000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
101000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
101000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
101000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
101000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
101000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
101000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
101000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
101000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
101000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
101000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
101000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
101000f8:	ef80083a 	eret

101000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
101000fc:	defff904 	addi	sp,sp,-28
10100100:	dfc00615 	stw	ra,24(sp)
10100104:	df000515 	stw	fp,20(sp)
10100108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1010010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10100110:	0005313a 	rdctl	r2,ipending
10100114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10100118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1010011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10100120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10100124:	00800044 	movi	r2,1
10100128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1010012c:	e0fffb17 	ldw	r3,-20(fp)
10100130:	e0bffc17 	ldw	r2,-16(fp)
10100134:	1884703a 	and	r2,r3,r2
10100138:	10001426 	beq	r2,zero,1010018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1010013c:	00840474 	movhi	r2,4113
10100140:	1092c004 	addi	r2,r2,19200
10100144:	e0fffd17 	ldw	r3,-12(fp)
10100148:	180690fa 	slli	r3,r3,3
1010014c:	10c5883a 	add	r2,r2,r3
10100150:	10c00017 	ldw	r3,0(r2)
10100154:	00840474 	movhi	r2,4113
10100158:	1092c004 	addi	r2,r2,19200
1010015c:	e13ffd17 	ldw	r4,-12(fp)
10100160:	200890fa 	slli	r4,r4,3
10100164:	1105883a 	add	r2,r2,r4
10100168:	10800104 	addi	r2,r2,4
1010016c:	10800017 	ldw	r2,0(r2)
10100170:	1009883a 	mov	r4,r2
10100174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10100178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1010017c:	0005313a 	rdctl	r2,ipending
10100180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10100184:	e0bfff17 	ldw	r2,-4(fp)
10100188:	00000706 	br	101001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1010018c:	e0bffc17 	ldw	r2,-16(fp)
10100190:	1085883a 	add	r2,r2,r2
10100194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10100198:	e0bffd17 	ldw	r2,-12(fp)
1010019c:	10800044 	addi	r2,r2,1
101001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
101001a4:	003fe106 	br	1010012c <__alt_data_end+0xfffe012c>

    active = alt_irq_pending ();
101001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
101001ac:	e0bffb17 	ldw	r2,-20(fp)
101001b0:	103fdb1e 	bne	r2,zero,10100120 <__alt_data_end+0xfffe0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
101001b4:	0001883a 	nop
}
101001b8:	0001883a 	nop
101001bc:	e037883a 	mov	sp,fp
101001c0:	dfc00117 	ldw	ra,4(sp)
101001c4:	df000017 	ldw	fp,0(sp)
101001c8:	dec00204 	addi	sp,sp,8
101001cc:	f800283a 	ret

101001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
101001d0:	defffb04 	addi	sp,sp,-20
101001d4:	dfc00415 	stw	ra,16(sp)
101001d8:	df000315 	stw	fp,12(sp)
101001dc:	df000304 	addi	fp,sp,12
101001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
101001e4:	000531fa 	rdctl	r2,exception
101001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
101001ec:	e0bffd17 	ldw	r2,-12(fp)
101001f0:	10801f0c 	andi	r2,r2,124
101001f4:	1004d0ba 	srli	r2,r2,2
101001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
101001fc:	0005333a 	rdctl	r2,badaddr
10100200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
10100204:	d0a70617 	ldw	r2,-25576(gp)
10100208:	10000726 	beq	r2,zero,10100228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
1010020c:	d0a70617 	ldw	r2,-25576(gp)
10100210:	e0fffd17 	ldw	r3,-12(fp)
10100214:	e1bffe17 	ldw	r6,-8(fp)
10100218:	e17fff17 	ldw	r5,-4(fp)
1010021c:	1809883a 	mov	r4,r3
10100220:	103ee83a 	callr	r2
10100224:	00000206 	br	10100230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10100228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
1010022c:	0005883a 	mov	r2,zero
}
10100230:	e037883a 	mov	sp,fp
10100234:	dfc00117 	ldw	ra,4(sp)
10100238:	df000017 	ldw	fp,0(sp)
1010023c:	dec00204 	addi	sp,sp,8
10100240:	f800283a 	ret

Disassembly of section .text:

10100244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
10100244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
10100248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
1010024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
10100250:	00bffd16 	blt	zero,r2,10100248 <__alt_data_end+0xfffe0248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10100254:	06c404b4 	movhi	sp,4114
    ori sp, sp, %lo(__alt_stack_pointer)
10100258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
1010025c:	06840474 	movhi	gp,4113
    ori gp, gp, %lo(_gp)
10100260:	d6abaf14 	ori	gp,gp,44732
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10100264:	00840474 	movhi	r2,4113
    ori r2, r2, %lo(__bss_start)
10100268:	1092a814 	ori	r2,r2,19104

    movhi r3, %hi(__bss_end)
1010026c:	00c40474 	movhi	r3,4113
    ori r3, r3, %lo(__bss_end)
10100270:	18d30014 	ori	r3,r3,19456

    beq r2, r3, 1f
10100274:	10c00326 	beq	r2,r3,10100284 <_start+0x40>

0:
    stw zero, (r2)
10100278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
1010027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
10100280:	10fffd36 	bltu	r2,r3,10100278 <__alt_data_end+0xfffe0278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10100284:	010e78c0 	call	1010e78c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10100288:	010e9200 	call	1010e920 <alt_main>

1010028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
1010028c:	003fff06 	br	1010028c <__alt_data_end+0xfffe028c>

10100290 <waitms>:
#define GREEN 0x07e0
#define BLUE 0x001f
#define BLACK  0x0000
#define WHITE 0xffff

void waitms(int t) {
10100290:	defffd04 	addi	sp,sp,-12
10100294:	df000215 	stw	fp,8(sp)
10100298:	df000204 	addi	fp,sp,8
1010029c:	e13fff15 	stw	r4,-4(fp)
    while(t--) {
101002a0:	00000806 	br	101002c4 <waitms+0x34>
        for(int i = 0; i < 3125; i++) {
101002a4:	e03ffe15 	stw	zero,-8(fp)
101002a8:	00000306 	br	101002b8 <waitms+0x28>
101002ac:	e0bffe17 	ldw	r2,-8(fp)
101002b0:	10800044 	addi	r2,r2,1
101002b4:	e0bffe15 	stw	r2,-8(fp)
101002b8:	e0bffe17 	ldw	r2,-8(fp)
101002bc:	10830d50 	cmplti	r2,r2,3125
101002c0:	103ffa1e 	bne	r2,zero,101002ac <__alt_data_end+0xfffe02ac>
#define BLUE 0x001f
#define BLACK  0x0000
#define WHITE 0xffff

void waitms(int t) {
    while(t--) {
101002c4:	e0bfff17 	ldw	r2,-4(fp)
101002c8:	10ffffc4 	addi	r3,r2,-1
101002cc:	e0ffff15 	stw	r3,-4(fp)
101002d0:	103ff41e 	bne	r2,zero,101002a4 <__alt_data_end+0xfffe02a4>
        for(int i = 0; i < 3125; i++) {
            ;
        }
    }
}
101002d4:	0001883a 	nop
101002d8:	e037883a 	mov	sp,fp
101002dc:	df000017 	ldw	fp,0(sp)
101002e0:	dec00104 	addi	sp,sp,4
101002e4:	f800283a 	ret

101002e8 <LCD_WR_DATA>:

void LCD_WR_DATA(uint data) {
101002e8:	defffe04 	addi	sp,sp,-8
101002ec:	df000115 	stw	fp,4(sp)
101002f0:	df000104 	addi	fp,sp,4
101002f4:	e13fff15 	stw	r4,-4(fp)
    IOWR_32DIRECT(LCD_CONTROLLER_0_BASE, LCD_DATA_OFFSET, data);
101002f8:	e0ffff17 	ldw	r3,-4(fp)
101002fc:	00800304 	movi	r2,12
10100300:	10c00035 	stwio	r3,0(r2)
}
10100304:	0001883a 	nop
10100308:	e037883a 	mov	sp,fp
1010030c:	df000017 	ldw	fp,0(sp)
10100310:	dec00104 	addi	sp,sp,4
10100314:	f800283a 	ret

10100318 <LCD_WR_REG>:

void LCD_WR_REG(uint data) {
10100318:	defffe04 	addi	sp,sp,-8
1010031c:	df000115 	stw	fp,4(sp)
10100320:	df000104 	addi	fp,sp,4
10100324:	e13fff15 	stw	r4,-4(fp)
    IOWR_32DIRECT(LCD_CONTROLLER_0_BASE, LCD_COMMAND_OFFSET, data);
10100328:	e0ffff17 	ldw	r3,-4(fp)
1010032c:	00800204 	movi	r2,8
10100330:	10c00035 	stwio	r3,0(r2)
}
10100334:	0001883a 	nop
10100338:	e037883a 	mov	sp,fp
1010033c:	df000017 	ldw	fp,0(sp)
10100340:	dec00104 	addi	sp,sp,4
10100344:	f800283a 	ret

10100348 <LCD_Init>:

void LCD_Init(void) {
10100348:	defffe04 	addi	sp,sp,-8
1010034c:	dfc00115 	stw	ra,4(sp)
10100350:	df000015 	stw	fp,0(sp)
10100354:	d839883a 	mov	fp,sp

    // software reset
    LCD_reset();
10100358:	0100a300 	call	10100a30 <LCD_reset>
    waitms(120);
1010035c:	01001e04 	movi	r4,120
10100360:	01002900 	call	10100290 <waitms>

    LCD_WR_REG(0x0011); //Exit Sleep
10100364:	01000444 	movi	r4,17
10100368:	01003180 	call	10100318 <LCD_WR_REG>
    LCD_WR_REG(0x00CF);
1010036c:	010033c4 	movi	r4,207
10100370:	01003180 	call	10100318 <LCD_WR_REG>
        LCD_WR_DATA(0x0000);
10100374:	0009883a 	mov	r4,zero
10100378:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0081);
1010037c:	01002044 	movi	r4,129
10100380:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0X00c0);
10100384:	01003004 	movi	r4,192
10100388:	01002e80 	call	101002e8 <LCD_WR_DATA>

    LCD_WR_REG(0x00ED);
1010038c:	01003b44 	movi	r4,237
10100390:	01003180 	call	10100318 <LCD_WR_REG>
        LCD_WR_DATA(0x0064);
10100394:	01001904 	movi	r4,100
10100398:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0003);
1010039c:	010000c4 	movi	r4,3
101003a0:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0X0012);
101003a4:	01000484 	movi	r4,18
101003a8:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0X0081);
101003ac:	01002044 	movi	r4,129
101003b0:	01002e80 	call	101002e8 <LCD_WR_DATA>

    LCD_WR_REG(0x00E8);
101003b4:	01003a04 	movi	r4,232
101003b8:	01003180 	call	10100318 <LCD_WR_REG>
        LCD_WR_DATA(0x0085);
101003bc:	01002144 	movi	r4,133
101003c0:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0001);
101003c4:	01000044 	movi	r4,1
101003c8:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00798);
101003cc:	0101e604 	movi	r4,1944
101003d0:	01002e80 	call	101002e8 <LCD_WR_DATA>

    LCD_WR_REG(0x00CB);
101003d4:	010032c4 	movi	r4,203
101003d8:	01003180 	call	10100318 <LCD_WR_REG>
        LCD_WR_DATA(0x0039);
101003dc:	01000e44 	movi	r4,57
101003e0:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x002C);
101003e4:	01000b04 	movi	r4,44
101003e8:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0000);
101003ec:	0009883a 	mov	r4,zero
101003f0:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0034);
101003f4:	01000d04 	movi	r4,52
101003f8:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0002);
101003fc:	01000084 	movi	r4,2
10100400:	01002e80 	call	101002e8 <LCD_WR_DATA>

    LCD_WR_REG(0x00F7);
10100404:	01003dc4 	movi	r4,247
10100408:	01003180 	call	10100318 <LCD_WR_REG>
        LCD_WR_DATA(0x0020);
1010040c:	01000804 	movi	r4,32
10100410:	01002e80 	call	101002e8 <LCD_WR_DATA>

    LCD_WR_REG(0x00EA);
10100414:	01003a84 	movi	r4,234
10100418:	01003180 	call	10100318 <LCD_WR_REG>
        LCD_WR_DATA(0x0000);
1010041c:	0009883a 	mov	r4,zero
10100420:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0000);
10100424:	0009883a 	mov	r4,zero
10100428:	01002e80 	call	101002e8 <LCD_WR_DATA>

    LCD_WR_REG(0x00B1);
1010042c:	01002c44 	movi	r4,177
10100430:	01003180 	call	10100318 <LCD_WR_REG>
        LCD_WR_DATA(0x0000);
10100434:	0009883a 	mov	r4,zero
10100438:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x001b);
1010043c:	010006c4 	movi	r4,27
10100440:	01002e80 	call	101002e8 <LCD_WR_DATA>

    LCD_WR_REG(0x00B6);
10100444:	01002d84 	movi	r4,182
10100448:	01003180 	call	10100318 <LCD_WR_REG>
        LCD_WR_DATA(0x000A);
1010044c:	01000284 	movi	r4,10
10100450:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00A2);
10100454:	01002884 	movi	r4,162
10100458:	01002e80 	call	101002e8 <LCD_WR_DATA>

    LCD_WR_REG(0x00C0);    //Power control
1010045c:	01003004 	movi	r4,192
10100460:	01003180 	call	10100318 <LCD_WR_REG>
        LCD_WR_DATA(0x0005);   //VRH[5:0]
10100464:	01000144 	movi	r4,5
10100468:	01002e80 	call	101002e8 <LCD_WR_DATA>

    LCD_WR_REG(0x00C1);    //Power control
1010046c:	01003044 	movi	r4,193
10100470:	01003180 	call	10100318 <LCD_WR_REG>
        LCD_WR_DATA(0x0011);   //SAP[2:0];BT[3:0]
10100474:	01000444 	movi	r4,17
10100478:	01002e80 	call	101002e8 <LCD_WR_DATA>

    LCD_WR_REG(0x00C5);    //VCM control
1010047c:	01003144 	movi	r4,197
10100480:	01003180 	call	10100318 <LCD_WR_REG>
        LCD_WR_DATA(0x0045);       //3F
10100484:	01001144 	movi	r4,69
10100488:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0045);       //3C
1010048c:	01001144 	movi	r4,69
10100490:	01002e80 	call	101002e8 <LCD_WR_DATA>

     LCD_WR_REG(0x00C7);    //VCM control2
10100494:	010031c4 	movi	r4,199
10100498:	01003180 	call	10100318 <LCD_WR_REG>
         LCD_WR_DATA(0X00a2);
1010049c:	01002884 	movi	r4,162
101004a0:	01002e80 	call	101002e8 <LCD_WR_DATA>

    LCD_WR_REG(0x0036);    // Memory Access Control
101004a4:	01000d84 	movi	r4,54
101004a8:	01003180 	call	10100318 <LCD_WR_REG>
        LCD_WR_DATA(0x0008);//48
101004ac:	01000204 	movi	r4,8
101004b0:	01002e80 	call	101002e8 <LCD_WR_DATA>

    LCD_WR_REG(0x00F2);    // 3Gamma Function Disable
101004b4:	01003c84 	movi	r4,242
101004b8:	01003180 	call	10100318 <LCD_WR_REG>
        LCD_WR_DATA(0x0000);
101004bc:	0009883a 	mov	r4,zero
101004c0:	01002e80 	call	101002e8 <LCD_WR_DATA>

    LCD_WR_REG(0x0026);    //Gamma curve selected
101004c4:	01000984 	movi	r4,38
101004c8:	01003180 	call	10100318 <LCD_WR_REG>
        LCD_WR_DATA(0x0001);
101004cc:	01000044 	movi	r4,1
101004d0:	01002e80 	call	101002e8 <LCD_WR_DATA>

    LCD_WR_REG(0x00E0);    //Set Gamma
101004d4:	01003804 	movi	r4,224
101004d8:	01003180 	call	10100318 <LCD_WR_REG>
        LCD_WR_DATA(0x000F);
101004dc:	010003c4 	movi	r4,15
101004e0:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0026);
101004e4:	01000984 	movi	r4,38
101004e8:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0024);
101004ec:	01000904 	movi	r4,36
101004f0:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x000b);
101004f4:	010002c4 	movi	r4,11
101004f8:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x000E);
101004fc:	01000384 	movi	r4,14
10100500:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0008);
10100504:	01000204 	movi	r4,8
10100508:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x004b);
1010050c:	010012c4 	movi	r4,75
10100510:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0X00a8);
10100514:	01002a04 	movi	r4,168
10100518:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x003b);
1010051c:	01000ec4 	movi	r4,59
10100520:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x000a);
10100524:	01000284 	movi	r4,10
10100528:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0014);
1010052c:	01000504 	movi	r4,20
10100530:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0006);
10100534:	01000184 	movi	r4,6
10100538:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0010);
1010053c:	01000404 	movi	r4,16
10100540:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0009);
10100544:	01000244 	movi	r4,9
10100548:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0000);
1010054c:	0009883a 	mov	r4,zero
10100550:	01002e80 	call	101002e8 <LCD_WR_DATA>

    LCD_WR_REG(0X00E1);    //Set Gamma
10100554:	01003844 	movi	r4,225
10100558:	01003180 	call	10100318 <LCD_WR_REG>
        LCD_WR_DATA(0x0000);
1010055c:	0009883a 	mov	r4,zero
10100560:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x001c);
10100564:	01000704 	movi	r4,28
10100568:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0020);
1010056c:	01000804 	movi	r4,32
10100570:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0004);
10100574:	01000104 	movi	r4,4
10100578:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0010);
1010057c:	01000404 	movi	r4,16
10100580:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0008);
10100584:	01000204 	movi	r4,8
10100588:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0034);
1010058c:	01000d04 	movi	r4,52
10100590:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0047);
10100594:	010011c4 	movi	r4,71
10100598:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0044);
1010059c:	01001104 	movi	r4,68
101005a0:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0005);
101005a4:	01000144 	movi	r4,5
101005a8:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x000b);
101005ac:	010002c4 	movi	r4,11
101005b0:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0009);
101005b4:	01000244 	movi	r4,9
101005b8:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x002f);
101005bc:	01000bc4 	movi	r4,47
101005c0:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0036);
101005c4:	01000d84 	movi	r4,54
101005c8:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x000f);
101005cc:	010003c4 	movi	r4,15
101005d0:	01002e80 	call	101002e8 <LCD_WR_DATA>

    LCD_WR_REG(0x002A);
101005d4:	01000a84 	movi	r4,42
101005d8:	01003180 	call	10100318 <LCD_WR_REG>
        LCD_WR_DATA(0x0000);
101005dc:	0009883a 	mov	r4,zero
101005e0:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0000);
101005e4:	0009883a 	mov	r4,zero
101005e8:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0000);
101005ec:	0009883a 	mov	r4,zero
101005f0:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00ef);
101005f4:	01003bc4 	movi	r4,239
101005f8:	01002e80 	call	101002e8 <LCD_WR_DATA>

     LCD_WR_REG(0x002B);
101005fc:	01000ac4 	movi	r4,43
10100600:	01003180 	call	10100318 <LCD_WR_REG>
        LCD_WR_DATA(0x0000);
10100604:	0009883a 	mov	r4,zero
10100608:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0000);
1010060c:	0009883a 	mov	r4,zero
10100610:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0001);
10100614:	01000044 	movi	r4,1
10100618:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x003f);
1010061c:	01000fc4 	movi	r4,63
10100620:	01002e80 	call	101002e8 <LCD_WR_DATA>

    LCD_WR_REG(0x003A);
10100624:	01000e84 	movi	r4,58
10100628:	01003180 	call	10100318 <LCD_WR_REG>
        LCD_WR_DATA(0x0055);
1010062c:	01001544 	movi	r4,85
10100630:	01002e80 	call	101002e8 <LCD_WR_DATA>

    LCD_WR_REG(0x00f6);
10100634:	01003d84 	movi	r4,246
10100638:	01003180 	call	10100318 <LCD_WR_REG>
        LCD_WR_DATA(0x0001);
1010063c:	01000044 	movi	r4,1
10100640:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0030);
10100644:	01000c04 	movi	r4,48
10100648:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0000);
1010064c:	0009883a 	mov	r4,zero
10100650:	01002e80 	call	101002e8 <LCD_WR_DATA>

    LCD_WR_REG(0x0029); //display on
10100654:	01000a44 	movi	r4,41
10100658:	01003180 	call	10100318 <LCD_WR_REG>


    LCD_WR_REG(0x0036); // Memory access control (MADCTL B5 = 1)
1010065c:	01000d84 	movi	r4,54
10100660:	01003180 	call	10100318 <LCD_WR_REG>
        LCD_WR_DATA(0x0028); // MY MX MV ML_BGR MH 0 0 -> 0b0010 1000
10100664:	01000a04 	movi	r4,40
10100668:	01002e80 	call	101002e8 <LCD_WR_DATA>


    LCD_WR_REG(0x002A); // Column Address Set
1010066c:	01000a84 	movi	r4,42
10100670:	01003180 	call	10100318 <LCD_WR_REG>
        LCD_WR_DATA(0x0000); // SC0-7
10100674:	0009883a 	mov	r4,zero
10100678:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0000); // SC8-15 -> 0x0000
1010067c:	0009883a 	mov	r4,zero
10100680:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0001); // EC0-7
10100684:	01000044 	movi	r4,1
10100688:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x003F); // EC8-15 -> 0x013F
1010068c:	01000fc4 	movi	r4,63
10100690:	01002e80 	call	101002e8 <LCD_WR_DATA>


    LCD_WR_REG(0x002B); // Page Address Set
10100694:	01000ac4 	movi	r4,43
10100698:	01003180 	call	10100318 <LCD_WR_REG>
        LCD_WR_DATA(0x0000); // SP0-7
1010069c:	0009883a 	mov	r4,zero
101006a0:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0000); // SP8-15 -> 0x0000
101006a4:	0009883a 	mov	r4,zero
101006a8:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0000); // EP0-7
101006ac:	0009883a 	mov	r4,zero
101006b0:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00EF); // EP8-15 -> 0x00EF
101006b4:	01003bc4 	movi	r4,239
101006b8:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_WR_REG(0x0029);
101006bc:	01000a44 	movi	r4,41
101006c0:	01003180 	call	10100318 <LCD_WR_REG>
}
101006c4:	0001883a 	nop
101006c8:	e037883a 	mov	sp,fp
101006cc:	dfc00117 	ldw	ra,4(sp)
101006d0:	df000017 	ldw	fp,0(sp)
101006d4:	dec00204 	addi	sp,sp,8
101006d8:	f800283a 	ret

101006dc <LCD_Clear>:

void LCD_Clear(uint Color)
{
101006dc:	defffc04 	addi	sp,sp,-16
101006e0:	dfc00315 	stw	ra,12(sp)
101006e4:	df000215 	stw	fp,8(sp)
101006e8:	df000204 	addi	fp,sp,8
101006ec:	e13fff15 	stw	r4,-4(fp)
        uint index=0;
101006f0:	e03ffe15 	stw	zero,-8(fp)
        LCD_SetCursor(0x00,0x0000);
101006f4:	000b883a 	mov	r5,zero
101006f8:	0009883a 	mov	r4,zero
101006fc:	010074c0 	call	1010074c <LCD_SetCursor>
        LCD_WR_REG(0x002C);
10100700:	01000b04 	movi	r4,44
10100704:	01003180 	call	10100318 <LCD_WR_REG>
        for(index=0;index<76800;index++)
10100708:	e03ffe15 	stw	zero,-8(fp)
1010070c:	00000506 	br	10100724 <LCD_Clear+0x48>
        {
            LCD_WR_DATA(Color);
10100710:	e13fff17 	ldw	r4,-4(fp)
10100714:	01002e80 	call	101002e8 <LCD_WR_DATA>
void LCD_Clear(uint Color)
{
        uint index=0;
        LCD_SetCursor(0x00,0x0000);
        LCD_WR_REG(0x002C);
        for(index=0;index<76800;index++)
10100718:	e0bffe17 	ldw	r2,-8(fp)
1010071c:	10800044 	addi	r2,r2,1
10100720:	e0bffe15 	stw	r2,-8(fp)
10100724:	e0fffe17 	ldw	r3,-8(fp)
10100728:	00800074 	movhi	r2,1
1010072c:	108affc4 	addi	r2,r2,11263
10100730:	10fff72e 	bgeu	r2,r3,10100710 <__alt_data_end+0xfffe0710>
        {
            LCD_WR_DATA(Color);
        }
}
10100734:	0001883a 	nop
10100738:	e037883a 	mov	sp,fp
1010073c:	dfc00117 	ldw	ra,4(sp)
10100740:	df000017 	ldw	fp,0(sp)
10100744:	dec00204 	addi	sp,sp,8
10100748:	f800283a 	ret

1010074c <LCD_SetCursor>:

void LCD_SetCursor(uint Xpos, uint Ypos)
{
1010074c:	defffc04 	addi	sp,sp,-16
10100750:	dfc00315 	stw	ra,12(sp)
10100754:	df000215 	stw	fp,8(sp)
10100758:	df000204 	addi	fp,sp,8
1010075c:	e13ffe15 	stw	r4,-8(fp)
10100760:	e17fff15 	stw	r5,-4(fp)
     LCD_WR_REG(0x002A);
10100764:	01000a84 	movi	r4,42
10100768:	01003180 	call	10100318 <LCD_WR_REG>
         LCD_WR_DATA(Xpos>>8);
1010076c:	e0bffe17 	ldw	r2,-8(fp)
10100770:	1004d23a 	srli	r2,r2,8
10100774:	1009883a 	mov	r4,r2
10100778:	01002e80 	call	101002e8 <LCD_WR_DATA>
         LCD_WR_DATA(Xpos&0XFF);
1010077c:	e0bffe17 	ldw	r2,-8(fp)
10100780:	10803fcc 	andi	r2,r2,255
10100784:	1009883a 	mov	r4,r2
10100788:	01002e80 	call	101002e8 <LCD_WR_DATA>
     LCD_WR_REG(0x002B);
1010078c:	01000ac4 	movi	r4,43
10100790:	01003180 	call	10100318 <LCD_WR_REG>
         LCD_WR_DATA(Ypos>>8);
10100794:	e0bfff17 	ldw	r2,-4(fp)
10100798:	1004d23a 	srli	r2,r2,8
1010079c:	1009883a 	mov	r4,r2
101007a0:	01002e80 	call	101002e8 <LCD_WR_DATA>
         LCD_WR_DATA(Ypos&0XFF);
101007a4:	e0bfff17 	ldw	r2,-4(fp)
101007a8:	10803fcc 	andi	r2,r2,255
101007ac:	1009883a 	mov	r4,r2
101007b0:	01002e80 	call	101002e8 <LCD_WR_DATA>
     LCD_WR_REG(0x002C);
101007b4:	01000b04 	movi	r4,44
101007b8:	01003180 	call	10100318 <LCD_WR_REG>
}
101007bc:	0001883a 	nop
101007c0:	e037883a 	mov	sp,fp
101007c4:	dfc00117 	ldw	ra,4(sp)
101007c8:	df000017 	ldw	fp,0(sp)
101007cc:	dec00204 	addi	sp,sp,8
101007d0:	f800283a 	ret

101007d4 <LCD_Swiss>:

void LCD_Swiss(uint size) {
101007d4:	defff704 	addi	sp,sp,-36
101007d8:	dfc00815 	stw	ra,32(sp)
101007dc:	df000715 	stw	fp,28(sp)
101007e0:	df000704 	addi	fp,sp,28
101007e4:	e13fff15 	stw	r4,-4(fp)

    LCD_WR_REG(0x002c);
101007e8:	01000b04 	movi	r4,44
101007ec:	01003180 	call	10100318 <LCD_WR_REG>
    LCD_Clear(RED);
101007f0:	013e0014 	movui	r4,63488
101007f4:	01006dc0 	call	101006dc <LCD_Clear>
    // 140 - 180, 60 - 140
    LCD_SetCursor(160 - size * 1/2 , 120 - size * 3/2);
101007f8:	e0bfff17 	ldw	r2,-4(fp)
101007fc:	1004d07a 	srli	r2,r2,1
10100800:	00c02804 	movi	r3,160
10100804:	1889c83a 	sub	r4,r3,r2
10100808:	e0ffff17 	ldw	r3,-4(fp)
1010080c:	1805883a 	mov	r2,r3
10100810:	1085883a 	add	r2,r2,r2
10100814:	10c5883a 	add	r2,r2,r3
10100818:	1004d07a 	srli	r2,r2,1
1010081c:	00c01e04 	movi	r3,120
10100820:	1885c83a 	sub	r2,r3,r2
10100824:	100b883a 	mov	r5,r2
10100828:	010074c0 	call	1010074c <LCD_SetCursor>
    for(int i = 0; i < size; i++) {
1010082c:	e03ff915 	stw	zero,-28(fp)
10100830:	00001c06 	br	101008a4 <LCD_Swiss+0xd0>
        for(int j = 0; j < size; j++) {
10100834:	e03ffa15 	stw	zero,-24(fp)
10100838:	00000506 	br	10100850 <LCD_Swiss+0x7c>
            LCD_WR_DATA(WHITE);
1010083c:	013fffd4 	movui	r4,65535
10100840:	01002e80 	call	101002e8 <LCD_WR_DATA>
    LCD_WR_REG(0x002c);
    LCD_Clear(RED);
    // 140 - 180, 60 - 140
    LCD_SetCursor(160 - size * 1/2 , 120 - size * 3/2);
    for(int i = 0; i < size; i++) {
        for(int j = 0; j < size; j++) {
10100844:	e0bffa17 	ldw	r2,-24(fp)
10100848:	10800044 	addi	r2,r2,1
1010084c:	e0bffa15 	stw	r2,-24(fp)
10100850:	e0fffa17 	ldw	r3,-24(fp)
10100854:	e0bfff17 	ldw	r2,-4(fp)
10100858:	18bff836 	bltu	r3,r2,1010083c <__alt_data_end+0xfffe083c>
            LCD_WR_DATA(WHITE);
        }
        LCD_SetCursor(160 - size * 1/2, 120 - size * 3/2 + i);
1010085c:	e0bfff17 	ldw	r2,-4(fp)
10100860:	1004d07a 	srli	r2,r2,1
10100864:	00c02804 	movi	r3,160
10100868:	188dc83a 	sub	r6,r3,r2
1010086c:	e13ff917 	ldw	r4,-28(fp)
10100870:	e0ffff17 	ldw	r3,-4(fp)
10100874:	1805883a 	mov	r2,r3
10100878:	1085883a 	add	r2,r2,r2
1010087c:	10c5883a 	add	r2,r2,r3
10100880:	1004d07a 	srli	r2,r2,1
10100884:	2085c83a 	sub	r2,r4,r2
10100888:	10801e04 	addi	r2,r2,120
1010088c:	100b883a 	mov	r5,r2
10100890:	3009883a 	mov	r4,r6
10100894:	010074c0 	call	1010074c <LCD_SetCursor>

    LCD_WR_REG(0x002c);
    LCD_Clear(RED);
    // 140 - 180, 60 - 140
    LCD_SetCursor(160 - size * 1/2 , 120 - size * 3/2);
    for(int i = 0; i < size; i++) {
10100898:	e0bff917 	ldw	r2,-28(fp)
1010089c:	10800044 	addi	r2,r2,1
101008a0:	e0bff915 	stw	r2,-28(fp)
101008a4:	e0fff917 	ldw	r3,-28(fp)
101008a8:	e0bfff17 	ldw	r2,-4(fp)
101008ac:	18bfe136 	bltu	r3,r2,10100834 <__alt_data_end+0xfffe0834>
            LCD_WR_DATA(WHITE);
        }
        LCD_SetCursor(160 - size * 1/2, 120 - size * 3/2 + i);
    }

    LCD_SetCursor(160 - size * 3/2 , 120 - size * 1/2);
101008b0:	e0ffff17 	ldw	r3,-4(fp)
101008b4:	1805883a 	mov	r2,r3
101008b8:	1085883a 	add	r2,r2,r2
101008bc:	10c5883a 	add	r2,r2,r3
101008c0:	1004d07a 	srli	r2,r2,1
101008c4:	00c02804 	movi	r3,160
101008c8:	1889c83a 	sub	r4,r3,r2
101008cc:	e0bfff17 	ldw	r2,-4(fp)
101008d0:	1004d07a 	srli	r2,r2,1
101008d4:	00c01e04 	movi	r3,120
101008d8:	1885c83a 	sub	r2,r3,r2
101008dc:	100b883a 	mov	r5,r2
101008e0:	010074c0 	call	1010074c <LCD_SetCursor>
    for(int i = 0; i < size; i++) {
101008e4:	e03ffb15 	stw	zero,-20(fp)
101008e8:	00001e06 	br	10100964 <LCD_Swiss+0x190>
        for(int j = 0; j < 3*size; j++) {
101008ec:	e03ffc15 	stw	zero,-16(fp)
101008f0:	00000506 	br	10100908 <LCD_Swiss+0x134>
            LCD_WR_DATA(WHITE);
101008f4:	013fffd4 	movui	r4,65535
101008f8:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_SetCursor(160 - size * 1/2, 120 - size * 3/2 + i);
    }

    LCD_SetCursor(160 - size * 3/2 , 120 - size * 1/2);
    for(int i = 0; i < size; i++) {
        for(int j = 0; j < 3*size; j++) {
101008fc:	e0bffc17 	ldw	r2,-16(fp)
10100900:	10800044 	addi	r2,r2,1
10100904:	e0bffc15 	stw	r2,-16(fp)
10100908:	e0ffff17 	ldw	r3,-4(fp)
1010090c:	1805883a 	mov	r2,r3
10100910:	1085883a 	add	r2,r2,r2
10100914:	10c5883a 	add	r2,r2,r3
10100918:	e0fffc17 	ldw	r3,-16(fp)
1010091c:	18bff536 	bltu	r3,r2,101008f4 <__alt_data_end+0xfffe08f4>
            LCD_WR_DATA(WHITE);
        }
        LCD_SetCursor(160 - size * 3/2, 120 - size * 1/2 + i);
10100920:	e0ffff17 	ldw	r3,-4(fp)
10100924:	1805883a 	mov	r2,r3
10100928:	1085883a 	add	r2,r2,r2
1010092c:	10c5883a 	add	r2,r2,r3
10100930:	1004d07a 	srli	r2,r2,1
10100934:	00c02804 	movi	r3,160
10100938:	1889c83a 	sub	r4,r3,r2
1010093c:	e0fffb17 	ldw	r3,-20(fp)
10100940:	e0bfff17 	ldw	r2,-4(fp)
10100944:	1004d07a 	srli	r2,r2,1
10100948:	1885c83a 	sub	r2,r3,r2
1010094c:	10801e04 	addi	r2,r2,120
10100950:	100b883a 	mov	r5,r2
10100954:	010074c0 	call	1010074c <LCD_SetCursor>
        }
        LCD_SetCursor(160 - size * 1/2, 120 - size * 3/2 + i);
    }

    LCD_SetCursor(160 - size * 3/2 , 120 - size * 1/2);
    for(int i = 0; i < size; i++) {
10100958:	e0bffb17 	ldw	r2,-20(fp)
1010095c:	10800044 	addi	r2,r2,1
10100960:	e0bffb15 	stw	r2,-20(fp)
10100964:	e0fffb17 	ldw	r3,-20(fp)
10100968:	e0bfff17 	ldw	r2,-4(fp)
1010096c:	18bfdf36 	bltu	r3,r2,101008ec <__alt_data_end+0xfffe08ec>
            LCD_WR_DATA(WHITE);
        }
        LCD_SetCursor(160 - size * 3/2, 120 - size * 1/2 + i);
    }

    LCD_SetCursor(160 - size * 1/2 , 120 + size * 1/2);
10100970:	e0bfff17 	ldw	r2,-4(fp)
10100974:	1004d07a 	srli	r2,r2,1
10100978:	00c02804 	movi	r3,160
1010097c:	1887c83a 	sub	r3,r3,r2
10100980:	e0bfff17 	ldw	r2,-4(fp)
10100984:	1004d07a 	srli	r2,r2,1
10100988:	10801e04 	addi	r2,r2,120
1010098c:	100b883a 	mov	r5,r2
10100990:	1809883a 	mov	r4,r3
10100994:	010074c0 	call	1010074c <LCD_SetCursor>
   for(int i = 0; i < size; i++) {
10100998:	e03ffd15 	stw	zero,-12(fp)
1010099c:	00001806 	br	10100a00 <LCD_Swiss+0x22c>
       for(int j = 0; j < size; j++) {
101009a0:	e03ffe15 	stw	zero,-8(fp)
101009a4:	00000506 	br	101009bc <LCD_Swiss+0x1e8>
           LCD_WR_DATA(WHITE);
101009a8:	013fffd4 	movui	r4,65535
101009ac:	01002e80 	call	101002e8 <LCD_WR_DATA>
        LCD_SetCursor(160 - size * 3/2, 120 - size * 1/2 + i);
    }

    LCD_SetCursor(160 - size * 1/2 , 120 + size * 1/2);
   for(int i = 0; i < size; i++) {
       for(int j = 0; j < size; j++) {
101009b0:	e0bffe17 	ldw	r2,-8(fp)
101009b4:	10800044 	addi	r2,r2,1
101009b8:	e0bffe15 	stw	r2,-8(fp)
101009bc:	e0fffe17 	ldw	r3,-8(fp)
101009c0:	e0bfff17 	ldw	r2,-4(fp)
101009c4:	18bff836 	bltu	r3,r2,101009a8 <__alt_data_end+0xfffe09a8>
           LCD_WR_DATA(WHITE);
       }
       LCD_SetCursor(160 - size * 1/2, 120 + size * 1/2 + i);
101009c8:	e0bfff17 	ldw	r2,-4(fp)
101009cc:	1004d07a 	srli	r2,r2,1
101009d0:	00c02804 	movi	r3,160
101009d4:	1889c83a 	sub	r4,r3,r2
101009d8:	e0bfff17 	ldw	r2,-4(fp)
101009dc:	1006d07a 	srli	r3,r2,1
101009e0:	e0bffd17 	ldw	r2,-12(fp)
101009e4:	1885883a 	add	r2,r3,r2
101009e8:	10801e04 	addi	r2,r2,120
101009ec:	100b883a 	mov	r5,r2
101009f0:	010074c0 	call	1010074c <LCD_SetCursor>
        }
        LCD_SetCursor(160 - size * 3/2, 120 - size * 1/2 + i);
    }

    LCD_SetCursor(160 - size * 1/2 , 120 + size * 1/2);
   for(int i = 0; i < size; i++) {
101009f4:	e0bffd17 	ldw	r2,-12(fp)
101009f8:	10800044 	addi	r2,r2,1
101009fc:	e0bffd15 	stw	r2,-12(fp)
10100a00:	e0fffd17 	ldw	r3,-12(fp)
10100a04:	e0bfff17 	ldw	r2,-4(fp)
10100a08:	18bfe536 	bltu	r3,r2,101009a0 <__alt_data_end+0xfffe09a0>
       for(int j = 0; j < size; j++) {
           LCD_WR_DATA(WHITE);
       }
       LCD_SetCursor(160 - size * 1/2, 120 + size * 1/2 + i);
   }
   LCD_SetCursor(0,0);
10100a0c:	000b883a 	mov	r5,zero
10100a10:	0009883a 	mov	r4,zero
10100a14:	010074c0 	call	1010074c <LCD_SetCursor>
}
10100a18:	0001883a 	nop
10100a1c:	e037883a 	mov	sp,fp
10100a20:	dfc00117 	ldw	ra,4(sp)
10100a24:	df000017 	ldw	fp,0(sp)
10100a28:	dec00204 	addi	sp,sp,8
10100a2c:	f800283a 	ret

10100a30 <LCD_reset>:

void LCD_reset(void) {
10100a30:	deffff04 	addi	sp,sp,-4
10100a34:	df000015 	stw	fp,0(sp)
10100a38:	d839883a 	mov	fp,sp
    IOWR_32DIRECT(LCD_CONTROLLER_0_BASE, LCD_COMMAND_OFFSET, 0x0001);
10100a3c:	00c00044 	movi	r3,1
10100a40:	00800204 	movi	r2,8
10100a44:	10c00035 	stwio	r3,0(r2)
}
10100a48:	0001883a 	nop
10100a4c:	e037883a 	mov	sp,fp
10100a50:	df000017 	ldw	fp,0(sp)
10100a54:	dec00104 	addi	sp,sp,4
10100a58:	f800283a 	ret

10100a5c <MEM_WR>:

void MEM_WR(uint offset, uint data) {
10100a5c:	defffd04 	addi	sp,sp,-12
10100a60:	df000215 	stw	fp,8(sp)
10100a64:	df000204 	addi	fp,sp,8
10100a68:	e13ffe15 	stw	r4,-8(fp)
10100a6c:	e17fff15 	stw	r5,-4(fp)
    IOWR_32DIRECT(HPS_0_BRIDGES_BASE, offset, data);
10100a70:	e0fffe17 	ldw	r3,-8(fp)
10100a74:	00900034 	movhi	r2,16384
10100a78:	1885883a 	add	r2,r3,r2
10100a7c:	e0ffff17 	ldw	r3,-4(fp)
10100a80:	10c00035 	stwio	r3,0(r2)
}
10100a84:	0001883a 	nop
10100a88:	e037883a 	mov	sp,fp
10100a8c:	df000017 	ldw	fp,0(sp)
10100a90:	dec00104 	addi	sp,sp,4
10100a94:	f800283a 	ret

10100a98 <BUFF_ADD_WR>:

void BUFF_ADD_WR(uint data){
10100a98:	defffe04 	addi	sp,sp,-8
10100a9c:	df000115 	stw	fp,4(sp)
10100aa0:	df000104 	addi	fp,sp,4
10100aa4:	e13fff15 	stw	r4,-4(fp)
    IOWR_32DIRECT(LCD_CONTROLLER_0_BASE, BUFFER_ADDRESS_OFFSET, data);
10100aa8:	e0bfff17 	ldw	r2,-4(fp)
10100aac:	0007883a 	mov	r3,zero
10100ab0:	18800035 	stwio	r2,0(r3)
}
10100ab4:	0001883a 	nop
10100ab8:	e037883a 	mov	sp,fp
10100abc:	df000017 	ldw	fp,0(sp)
10100ac0:	dec00104 	addi	sp,sp,4
10100ac4:	f800283a 	ret

10100ac8 <BUFF_LEN_WR>:

void BUFF_LEN_WR(uint data){
10100ac8:	defffe04 	addi	sp,sp,-8
10100acc:	df000115 	stw	fp,4(sp)
10100ad0:	df000104 	addi	fp,sp,4
10100ad4:	e13fff15 	stw	r4,-4(fp)
    IOWR_32DIRECT(LCD_CONTROLLER_0_BASE, BUFFER_LENGTH_OFFSET, data);
10100ad8:	e0ffff17 	ldw	r3,-4(fp)
10100adc:	00800104 	movi	r2,4
10100ae0:	10c00035 	stwio	r3,0(r2)
}
10100ae4:	0001883a 	nop
10100ae8:	e037883a 	mov	sp,fp
10100aec:	df000017 	ldw	fp,0(sp)
10100af0:	dec00104 	addi	sp,sp,4
10100af4:	f800283a 	ret

10100af8 <BURST_COUNT_WR>:

void BURST_COUNT_WR(uint data){
10100af8:	defffe04 	addi	sp,sp,-8
10100afc:	df000115 	stw	fp,4(sp)
10100b00:	df000104 	addi	fp,sp,4
10100b04:	e13fff15 	stw	r4,-4(fp)
    IOWR_32DIRECT(LCD_CONTROLLER_0_BASE, BURST_COUNT_OFFSET, data);
10100b08:	e0ffff17 	ldw	r3,-4(fp)
10100b0c:	00800404 	movi	r2,16
10100b10:	10c00035 	stwio	r3,0(r2)
}
10100b14:	0001883a 	nop
10100b18:	e037883a 	mov	sp,fp
10100b1c:	df000017 	ldw	fp,0(sp)
10100b20:	dec00104 	addi	sp,sp,4
10100b24:	f800283a 	ret

10100b28 <test>:

void test(uint verbose) {
10100b28:	defff904 	addi	sp,sp,-28
10100b2c:	dfc00615 	stw	ra,24(sp)
10100b30:	df000515 	stw	fp,20(sp)
10100b34:	df000504 	addi	fp,sp,20
10100b38:	e13fff15 	stw	r4,-4(fp)

    if(verbose)
10100b3c:	e0bfff17 	ldw	r2,-4(fp)
10100b40:	10000326 	beq	r2,zero,10100b50 <test+0x28>
        printf("sending data to SDRAM... \n");
10100b44:	01040474 	movhi	r4,4113
10100b48:	2103f404 	addi	r4,r4,4048
10100b4c:	01033100 	call	10103310 <puts>
    // write to SDRAM
    for(int i = 0; i < BUFFER_LENGTH * 4; i = i + 4){
10100b50:	e03ffb15 	stw	zero,-20(fp)
10100b54:	00000706 	br	10100b74 <test+0x4c>
        MEM_WR(BUFFER1_OFFSET + i, 0x00000000);
10100b58:	e0bffb17 	ldw	r2,-20(fp)
10100b5c:	000b883a 	mov	r5,zero
10100b60:	1009883a 	mov	r4,r2
10100b64:	0100a5c0 	call	10100a5c <MEM_WR>
void test(uint verbose) {

    if(verbose)
        printf("sending data to SDRAM... \n");
    // write to SDRAM
    for(int i = 0; i < BUFFER_LENGTH * 4; i = i + 4){
10100b68:	e0bffb17 	ldw	r2,-20(fp)
10100b6c:	10800104 	addi	r2,r2,4
10100b70:	e0bffb15 	stw	r2,-20(fp)
10100b74:	e0fffb17 	ldw	r3,-20(fp)
10100b78:	00800274 	movhi	r2,9
10100b7c:	1097ffc4 	addi	r2,r2,24575
10100b80:	10fff50e 	bge	r2,r3,10100b58 <__alt_data_end+0xfffe0b58>
        MEM_WR(BUFFER1_OFFSET + i, 0x00000000);
    }

    for(int i = 0; i < BUFFER_LENGTH; i = i + 4){
10100b84:	e03ffc15 	stw	zero,-16(fp)
10100b88:	00002606 	br	10100c24 <test+0xfc>


        if((i/4)%40 < 40/3) {
10100b8c:	e0bffc17 	ldw	r2,-16(fp)
10100b90:	1000010e 	bge	r2,zero,10100b98 <test+0x70>
10100b94:	108000c4 	addi	r2,r2,3
10100b98:	1005d0ba 	srai	r2,r2,2
10100b9c:	01400a04 	movi	r5,40
10100ba0:	1009883a 	mov	r4,r2
10100ba4:	010117c0 	call	1010117c <__modsi3>
10100ba8:	10800348 	cmpgei	r2,r2,13
10100bac:	1000061e 	bne	r2,zero,10100bc8 <test+0xa0>
            MEM_WR(BUFFER1_OFFSET + i, 0xf800f800);
10100bb0:	e0bffc17 	ldw	r2,-16(fp)
10100bb4:	017e0074 	movhi	r5,63489
10100bb8:	297e0004 	addi	r5,r5,-2048
10100bbc:	1009883a 	mov	r4,r2
10100bc0:	0100a5c0 	call	10100a5c <MEM_WR>
10100bc4:	00001406 	br	10100c18 <test+0xf0>
        } else if((i/4)%40 < 80/3) {
10100bc8:	e0bffc17 	ldw	r2,-16(fp)
10100bcc:	1000010e 	bge	r2,zero,10100bd4 <test+0xac>
10100bd0:	108000c4 	addi	r2,r2,3
10100bd4:	1005d0ba 	srai	r2,r2,2
10100bd8:	01400a04 	movi	r5,40
10100bdc:	1009883a 	mov	r4,r2
10100be0:	010117c0 	call	1010117c <__modsi3>
10100be4:	10800688 	cmpgei	r2,r2,26
10100be8:	1000061e 	bne	r2,zero,10100c04 <test+0xdc>
            MEM_WR(BUFFER1_OFFSET + i, 0x07e007e0);
10100bec:	e0bffc17 	ldw	r2,-16(fp)
10100bf0:	0141f834 	movhi	r5,2016
10100bf4:	2941f804 	addi	r5,r5,2016
10100bf8:	1009883a 	mov	r4,r2
10100bfc:	0100a5c0 	call	10100a5c <MEM_WR>
10100c00:	00000506 	br	10100c18 <test+0xf0>
        } else {
            MEM_WR(BUFFER1_OFFSET + i, 0x008f008f);
10100c04:	e0bffc17 	ldw	r2,-16(fp)
10100c08:	014023f4 	movhi	r5,143
10100c0c:	294023c4 	addi	r5,r5,143
10100c10:	1009883a 	mov	r4,r2
10100c14:	0100a5c0 	call	10100a5c <MEM_WR>
    // write to SDRAM
    for(int i = 0; i < BUFFER_LENGTH * 4; i = i + 4){
        MEM_WR(BUFFER1_OFFSET + i, 0x00000000);
    }

    for(int i = 0; i < BUFFER_LENGTH; i = i + 4){
10100c18:	e0bffc17 	ldw	r2,-16(fp)
10100c1c:	10800104 	addi	r2,r2,4
10100c20:	e0bffc15 	stw	r2,-16(fp)
10100c24:	e0fffc17 	ldw	r3,-16(fp)
10100c28:	008000b4 	movhi	r2,2
10100c2c:	1095ffc4 	addi	r2,r2,22527
10100c30:	10ffd60e 	bge	r2,r3,10100b8c <__alt_data_end+0xfffe0b8c>
            MEM_WR(BUFFER1_OFFSET + i, 0x07e007e0);
        } else {
            MEM_WR(BUFFER1_OFFSET + i, 0x008f008f);
        }
    }
    if(verbose)
10100c34:	e0bfff17 	ldw	r2,-4(fp)
10100c38:	10000326 	beq	r2,zero,10100c48 <test+0x120>
        printf("Data successfully sent. reading \n");
10100c3c:	01040474 	movhi	r4,4113
10100c40:	2103fb04 	addi	r4,r4,4076
10100c44:	01033100 	call	10103310 <puts>

    if(verbose){
10100c48:	e0bfff17 	ldw	r2,-4(fp)
10100c4c:	10001326 	beq	r2,zero,10100c9c <test+0x174>
        unsigned char r;
        for(int i = 0; i < BUFFER_LENGTH ; i = i + 4){
10100c50:	e03ffd15 	stw	zero,-12(fp)
10100c54:	00000d06 	br	10100c8c <test+0x164>
            r =  IORD_32DIRECT(HPS_0_BRIDGES_BASE, BUFFER1_OFFSET + i);
10100c58:	e0fffd17 	ldw	r3,-12(fp)
10100c5c:	00900034 	movhi	r2,16384
10100c60:	1885883a 	add	r2,r3,r2
10100c64:	10800037 	ldwio	r2,0(r2)
10100c68:	e0bffe05 	stb	r2,-8(fp)
            printf("%x \n", r);
10100c6c:	e0bffe03 	ldbu	r2,-8(fp)
10100c70:	100b883a 	mov	r5,r2
10100c74:	01040474 	movhi	r4,4113
10100c78:	21040404 	addi	r4,r4,4112
10100c7c:	01032140 	call	10103214 <printf>
    if(verbose)
        printf("Data successfully sent. reading \n");

    if(verbose){
        unsigned char r;
        for(int i = 0; i < BUFFER_LENGTH ; i = i + 4){
10100c80:	e0bffd17 	ldw	r2,-12(fp)
10100c84:	10800104 	addi	r2,r2,4
10100c88:	e0bffd15 	stw	r2,-12(fp)
10100c8c:	e0fffd17 	ldw	r3,-12(fp)
10100c90:	008000b4 	movhi	r2,2
10100c94:	1095ffc4 	addi	r2,r2,22527
10100c98:	10ffef0e 	bge	r2,r3,10100c58 <__alt_data_end+0xfffe0c58>
            printf("%x \n", r);
        }
    }

    // buffer address
    BUFF_ADD_WR(BUFFER1_OFFSET);
10100c9c:	0009883a 	mov	r4,zero
10100ca0:	0100a980 	call	10100a98 <BUFF_ADD_WR>
    waitms(1);
10100ca4:	01000044 	movi	r4,1
10100ca8:	01002900 	call	10100290 <waitms>
    // buffer length
    BUFF_LEN_WR(BUFFER_LENGTH);
10100cac:	010000b4 	movhi	r4,2
10100cb0:	21160004 	addi	r4,r4,22528
10100cb4:	0100ac80 	call	10100ac8 <BUFF_LEN_WR>

    if(verbose)
10100cb8:	e0bfff17 	ldw	r2,-4(fp)
10100cbc:	10000326 	beq	r2,zero,10100ccc <test+0x1a4>
        printf("Buffer info sent. \n");
10100cc0:	01040474 	movhi	r4,4113
10100cc4:	21040604 	addi	r4,r4,4120
10100cc8:	01033100 	call	10103310 <puts>
}
10100ccc:	0001883a 	nop
10100cd0:	e037883a 	mov	sp,fp
10100cd4:	dfc00117 	ldw	ra,4(sp)
10100cd8:	df000017 	ldw	fp,0(sp)
10100cdc:	dec00204 	addi	sp,sp,8
10100ce0:	f800283a 	ret

10100ce4 <upload_image>:


void upload_image(void) {
10100ce4:	defffb04 	addi	sp,sp,-20
10100ce8:	dfc00415 	stw	ra,16(sp)
10100cec:	df000315 	stw	fp,12(sp)
10100cf0:	dc800215 	stw	r18,8(sp)
10100cf4:	dc400115 	stw	r17,4(sp)
10100cf8:	dc000015 	stw	r16,0(sp)
10100cfc:	df000304 	addi	fp,sp,12
10100d00:	023ffdf4 	movhi	r8,65527
10100d04:	4227f404 	addi	r8,r8,-24624
10100d08:	da37883a 	add	sp,sp,r8
    char* filename = "/mnt/host/image.ppm";
10100d0c:	00840474 	movhi	r2,4113
10100d10:	10840b04 	addi	r2,r2,4140
10100d14:	00fffdf4 	movhi	r3,65527
10100d18:	18e7f304 	addi	r3,r3,-24628
10100d1c:	1f07883a 	add	r3,r3,fp
10100d20:	18800015 	stw	r2,0(r3)

    FILE *file = fopen(filename, "r");
10100d24:	01440474 	movhi	r5,4113
10100d28:	29441004 	addi	r5,r5,4160
10100d2c:	00bffdf4 	movhi	r2,65527
10100d30:	10a7f304 	addi	r2,r2,-24628
10100d34:	1705883a 	add	r2,r2,fp
10100d38:	11000017 	ldw	r4,0(r2)
10100d3c:	0101be40 	call	10101be4 <fopen>
10100d40:	00fffdf4 	movhi	r3,65527
10100d44:	18e7f404 	addi	r3,r3,-24624
10100d48:	1f07883a 	add	r3,r3,fp
10100d4c:	18800015 	stw	r2,0(r3)
    int r1, g1, b1, r2, g2, b2, r;
    unsigned char *a[BUFFER_LENGTH];
    if (!file) {
10100d50:	013ffdf4 	movhi	r4,65527
10100d54:	2127f404 	addi	r4,r4,-24624
10100d58:	2709883a 	add	r4,r4,fp
10100d5c:	20800017 	ldw	r2,0(r4)
10100d60:	1000081e 	bne	r2,zero,10100d84 <upload_image+0xa0>
     printf("Error: could not open \"%s\" for writing\n", filename);
10100d64:	00bffdf4 	movhi	r2,65527
10100d68:	10a7f304 	addi	r2,r2,-24628
10100d6c:	1705883a 	add	r2,r2,fp
10100d70:	11400017 	ldw	r5,0(r2)
10100d74:	01040474 	movhi	r4,4113
10100d78:	21041104 	addi	r4,r4,4164
10100d7c:	01032140 	call	10103214 <printf>
10100d80:	0000b706 	br	10101060 <upload_image+0x37c>
     return;
    }
    int i = 0;
10100d84:	00fffdf4 	movhi	r3,65527
10100d88:	18e7f504 	addi	r3,r3,-24620
10100d8c:	1f07883a 	add	r3,r3,fp
10100d90:	18000015 	stw	zero,0(r3)

    printf("Reading file...\n");
10100d94:	01040474 	movhi	r4,4113
10100d98:	21041b04 	addi	r4,r4,4204
10100d9c:	01033100 	call	10103310 <puts>
    //fread(a, 1, 320 * 240 * 3, file);
    printf("%2s, %d, %d, %d",fgetc(file),fgetc(file),fgetc(file),fgetc(file));
10100da0:	017ffdf4 	movhi	r5,65527
10100da4:	2967f404 	addi	r5,r5,-24624
10100da8:	2f0b883a 	add	r5,r5,fp
10100dac:	29000017 	ldw	r4,0(r5)
10100db0:	01016c80 	call	101016c8 <fgetc>
10100db4:	1021883a 	mov	r16,r2
10100db8:	00bffdf4 	movhi	r2,65527
10100dbc:	10a7f404 	addi	r2,r2,-24624
10100dc0:	1705883a 	add	r2,r2,fp
10100dc4:	11000017 	ldw	r4,0(r2)
10100dc8:	01016c80 	call	101016c8 <fgetc>
10100dcc:	1023883a 	mov	r17,r2
10100dd0:	00fffdf4 	movhi	r3,65527
10100dd4:	18e7f404 	addi	r3,r3,-24624
10100dd8:	1f07883a 	add	r3,r3,fp
10100ddc:	19000017 	ldw	r4,0(r3)
10100de0:	01016c80 	call	101016c8 <fgetc>
10100de4:	1025883a 	mov	r18,r2
10100de8:	017ffdf4 	movhi	r5,65527
10100dec:	2967f404 	addi	r5,r5,-24624
10100df0:	2f0b883a 	add	r5,r5,fp
10100df4:	29000017 	ldw	r4,0(r5)
10100df8:	01016c80 	call	101016c8 <fgetc>
10100dfc:	d8800015 	stw	r2,0(sp)
10100e00:	900f883a 	mov	r7,r18
10100e04:	880d883a 	mov	r6,r17
10100e08:	800b883a 	mov	r5,r16
10100e0c:	01040474 	movhi	r4,4113
10100e10:	21041f04 	addi	r4,r4,4220
10100e14:	01032140 	call	10103214 <printf>
    printf("Sending info to SDRAM...\n");
10100e18:	01040474 	movhi	r4,4113
10100e1c:	21042304 	addi	r4,r4,4236
10100e20:	01033100 	call	10103310 <puts>
    for(int i = 0; i < BUFFER_LENGTH; i = i + 4) {
10100e24:	00bffdf4 	movhi	r2,65527
10100e28:	10a7f204 	addi	r2,r2,-24632
10100e2c:	1705883a 	add	r2,r2,fp
10100e30:	10000015 	stw	zero,0(r2)
10100e34:	00007006 	br	10100ff8 <upload_image+0x314>
        b1 = a[6*i/4 + 2];
        r2 = a[6*i/4 + 3];
        g2 = a[6*i/4 + 4];
        b2 = a[6*i/4 + 5];
        */
        r1=fgetc(file);
10100e38:	00fffdf4 	movhi	r3,65527
10100e3c:	18e7f404 	addi	r3,r3,-24624
10100e40:	1f07883a 	add	r3,r3,fp
10100e44:	19000017 	ldw	r4,0(r3)
10100e48:	01016c80 	call	101016c8 <fgetc>
10100e4c:	013ffdf4 	movhi	r4,65527
10100e50:	2127f604 	addi	r4,r4,-24616
10100e54:	2709883a 	add	r4,r4,fp
10100e58:	20800015 	stw	r2,0(r4)
        g1=fgetc(file);
10100e5c:	017ffdf4 	movhi	r5,65527
10100e60:	2967f404 	addi	r5,r5,-24624
10100e64:	2f0b883a 	add	r5,r5,fp
10100e68:	29000017 	ldw	r4,0(r5)
10100e6c:	01016c80 	call	101016c8 <fgetc>
10100e70:	00fffdf4 	movhi	r3,65527
10100e74:	18e7f704 	addi	r3,r3,-24612
10100e78:	1f07883a 	add	r3,r3,fp
10100e7c:	18800015 	stw	r2,0(r3)
        b1=fgetc(file);
10100e80:	017ffdf4 	movhi	r5,65527
10100e84:	2967f404 	addi	r5,r5,-24624
10100e88:	2f0b883a 	add	r5,r5,fp
10100e8c:	29000017 	ldw	r4,0(r5)
10100e90:	01016c80 	call	101016c8 <fgetc>
10100e94:	00fffdf4 	movhi	r3,65527
10100e98:	18e7f804 	addi	r3,r3,-24608
10100e9c:	1f07883a 	add	r3,r3,fp
10100ea0:	18800015 	stw	r2,0(r3)
        r2=fgetc(file);
10100ea4:	017ffdf4 	movhi	r5,65527
10100ea8:	2967f404 	addi	r5,r5,-24624
10100eac:	2f0b883a 	add	r5,r5,fp
10100eb0:	29000017 	ldw	r4,0(r5)
10100eb4:	01016c80 	call	101016c8 <fgetc>
10100eb8:	00fffdf4 	movhi	r3,65527
10100ebc:	18e7f904 	addi	r3,r3,-24604
10100ec0:	1f07883a 	add	r3,r3,fp
10100ec4:	18800015 	stw	r2,0(r3)
        g2=fgetc(file);
10100ec8:	017ffdf4 	movhi	r5,65527
10100ecc:	2967f404 	addi	r5,r5,-24624
10100ed0:	2f0b883a 	add	r5,r5,fp
10100ed4:	29000017 	ldw	r4,0(r5)
10100ed8:	01016c80 	call	101016c8 <fgetc>
10100edc:	00fffdf4 	movhi	r3,65527
10100ee0:	18e7fa04 	addi	r3,r3,-24600
10100ee4:	1f07883a 	add	r3,r3,fp
10100ee8:	18800015 	stw	r2,0(r3)
        b2=fgetc(file);
10100eec:	017ffdf4 	movhi	r5,65527
10100ef0:	2967f404 	addi	r5,r5,-24624
10100ef4:	2f0b883a 	add	r5,r5,fp
10100ef8:	29000017 	ldw	r4,0(r5)
10100efc:	01016c80 	call	101016c8 <fgetc>
10100f00:	00fffdf4 	movhi	r3,65527
10100f04:	18e7fb04 	addi	r3,r3,-24596
10100f08:	1f07883a 	add	r3,r3,fp
10100f0c:	18800015 	stw	r2,0(r3)

        r = (int)((r1 << 11) + (g1 << 5) + b1) + (((r2 << 11) + (g2 << 5) + b2) << 16);
10100f10:	013ffdf4 	movhi	r4,65527
10100f14:	2127f604 	addi	r4,r4,-24616
10100f18:	2709883a 	add	r4,r4,fp
10100f1c:	20800017 	ldw	r2,0(r4)
10100f20:	100692fa 	slli	r3,r2,11
10100f24:	017ffdf4 	movhi	r5,65527
10100f28:	2967f704 	addi	r5,r5,-24612
10100f2c:	2f0b883a 	add	r5,r5,fp
10100f30:	28800017 	ldw	r2,0(r5)
10100f34:	1004917a 	slli	r2,r2,5
10100f38:	1887883a 	add	r3,r3,r2
10100f3c:	013ffdf4 	movhi	r4,65527
10100f40:	2127f804 	addi	r4,r4,-24608
10100f44:	2709883a 	add	r4,r4,fp
10100f48:	20800017 	ldw	r2,0(r4)
10100f4c:	1887883a 	add	r3,r3,r2
10100f50:	017ffdf4 	movhi	r5,65527
10100f54:	2967f904 	addi	r5,r5,-24604
10100f58:	2f0b883a 	add	r5,r5,fp
10100f5c:	28800017 	ldw	r2,0(r5)
10100f60:	100892fa 	slli	r4,r2,11
10100f64:	017ffdf4 	movhi	r5,65527
10100f68:	2967fa04 	addi	r5,r5,-24600
10100f6c:	2f0b883a 	add	r5,r5,fp
10100f70:	28800017 	ldw	r2,0(r5)
10100f74:	1004917a 	slli	r2,r2,5
10100f78:	2089883a 	add	r4,r4,r2
10100f7c:	017ffdf4 	movhi	r5,65527
10100f80:	2967fb04 	addi	r5,r5,-24596
10100f84:	2f0b883a 	add	r5,r5,fp
10100f88:	28800017 	ldw	r2,0(r5)
10100f8c:	2085883a 	add	r2,r4,r2
10100f90:	1004943a 	slli	r2,r2,16
10100f94:	1885883a 	add	r2,r3,r2
10100f98:	00fffdf4 	movhi	r3,65527
10100f9c:	18e7fc04 	addi	r3,r3,-24592
10100fa0:	1f07883a 	add	r3,r3,fp
10100fa4:	18800015 	stw	r2,0(r3)

        //printf("%x\n", r);
        MEM_WR(BUFFER1_OFFSET + i, r);
10100fa8:	013ffdf4 	movhi	r4,65527
10100fac:	2127f204 	addi	r4,r4,-24632
10100fb0:	2709883a 	add	r4,r4,fp
10100fb4:	20800017 	ldw	r2,0(r4)
10100fb8:	017ffdf4 	movhi	r5,65527
10100fbc:	2967fc04 	addi	r5,r5,-24592
10100fc0:	2f0b883a 	add	r5,r5,fp
10100fc4:	28c00017 	ldw	r3,0(r5)
10100fc8:	180b883a 	mov	r5,r3
10100fcc:	1009883a 	mov	r4,r2
10100fd0:	0100a5c0 	call	10100a5c <MEM_WR>

    printf("Reading file...\n");
    //fread(a, 1, 320 * 240 * 3, file);
    printf("%2s, %d, %d, %d",fgetc(file),fgetc(file),fgetc(file),fgetc(file));
    printf("Sending info to SDRAM...\n");
    for(int i = 0; i < BUFFER_LENGTH; i = i + 4) {
10100fd4:	00fffdf4 	movhi	r3,65527
10100fd8:	18e7f204 	addi	r3,r3,-24632
10100fdc:	1f07883a 	add	r3,r3,fp
10100fe0:	18800017 	ldw	r2,0(r3)
10100fe4:	10800104 	addi	r2,r2,4
10100fe8:	013ffdf4 	movhi	r4,65527
10100fec:	2127f204 	addi	r4,r4,-24632
10100ff0:	2709883a 	add	r4,r4,fp
10100ff4:	20800015 	stw	r2,0(r4)
10100ff8:	017ffdf4 	movhi	r5,65527
10100ffc:	2967f204 	addi	r5,r5,-24632
10101000:	2f0b883a 	add	r5,r5,fp
10101004:	28c00017 	ldw	r3,0(r5)
10101008:	008000b4 	movhi	r2,2
1010100c:	1095ffc4 	addi	r2,r2,22527
10101010:	10ff890e 	bge	r2,r3,10100e38 <__alt_data_end+0xfffe0e38>

        //printf("%x\n", r);
        MEM_WR(BUFFER1_OFFSET + i, r);
    }

    fclose(file);
10101014:	00bffdf4 	movhi	r2,65527
10101018:	10a7f404 	addi	r2,r2,-24624
1010101c:	1705883a 	add	r2,r2,fp
10101020:	11000017 	ldw	r4,0(r2)
10101024:	010139c0 	call	1010139c <fclose>


    printf("Sent image to memory after %d iterations\n", i);
10101028:	00fffdf4 	movhi	r3,65527
1010102c:	18e7f504 	addi	r3,r3,-24620
10101030:	1f07883a 	add	r3,r3,fp
10101034:	19400017 	ldw	r5,0(r3)
10101038:	01040474 	movhi	r4,4113
1010103c:	21042a04 	addi	r4,r4,4264
10101040:	01032140 	call	10103214 <printf>


    // buffer address
    BUFF_ADD_WR(BUFFER1_OFFSET);
10101044:	0009883a 	mov	r4,zero
10101048:	0100a980 	call	10100a98 <BUFF_ADD_WR>
    waitms(1);
1010104c:	01000044 	movi	r4,1
10101050:	01002900 	call	10100290 <waitms>
    // buffer length
    BUFF_LEN_WR(BUFFER_LENGTH);
10101054:	010000b4 	movhi	r4,2
10101058:	21160004 	addi	r4,r4,22528
1010105c:	0100ac80 	call	10100ac8 <BUFF_LEN_WR>
}
10101060:	e6fffd04 	addi	sp,fp,-12
10101064:	dfc00417 	ldw	ra,16(sp)
10101068:	df000317 	ldw	fp,12(sp)
1010106c:	dc800217 	ldw	r18,8(sp)
10101070:	dc400117 	ldw	r17,4(sp)
10101074:	dc000017 	ldw	r16,0(sp)
10101078:	dec00504 	addi	sp,sp,20
1010107c:	f800283a 	ret

10101080 <main>:

int main(void)
{
10101080:	defffe04 	addi	sp,sp,-8
10101084:	dfc00115 	stw	ra,4(sp)
10101088:	df000015 	stw	fp,0(sp)
1010108c:	d839883a 	mov	fp,sp
    printf("start:\n");
10101090:	01040474 	movhi	r4,4113
10101094:	21043504 	addi	r4,r4,4308
10101098:	01033100 	call	10103310 <puts>
    LCD_Init();
1010109c:	01003480 	call	10100348 <LCD_Init>
    BURST_COUNT_WR(16);
101010a0:	01000404 	movi	r4,16
101010a4:	0100af80 	call	10100af8 <BURST_COUNT_WR>
    LCD_Clear(0x0000);
101010a8:	0009883a 	mov	r4,zero
101010ac:	01006dc0 	call	101006dc <LCD_Clear>

    IOWR_8DIRECT(PIO_LEDS_BASE, 1, 0x0);
101010b0:	0007883a 	mov	r3,zero
101010b4:	00840034 	movhi	r2,4096
101010b8:	10820444 	addi	r2,r2,2065
101010bc:	10c00025 	stbio	r3,0(r2)

    //test(0);
    //waitms(3000);
    upload_image();
101010c0:	0100ce40 	call	10100ce4 <upload_image>

    while(1) {
        IOWR_8DIRECT(PIO_LEDS_BASE, 1, 0xAA);
101010c4:	00ffea84 	movi	r3,-86
101010c8:	00840034 	movhi	r2,4096
101010cc:	10820444 	addi	r2,r2,2065
101010d0:	10c00025 	stbio	r3,0(r2)
        waitms(1000);
101010d4:	0100fa04 	movi	r4,1000
101010d8:	01002900 	call	10100290 <waitms>
        IOWR_8DIRECT(PIO_LEDS_BASE, 1, 0x55);
101010dc:	00c01544 	movi	r3,85
101010e0:	00840034 	movhi	r2,4096
101010e4:	10820444 	addi	r2,r2,2065
101010e8:	10c00025 	stbio	r3,0(r2)
        waitms(1000);
101010ec:	0100fa04 	movi	r4,1000
101010f0:	01002900 	call	10100290 <waitms>
    }
101010f4:	003ff306 	br	101010c4 <__alt_data_end+0xfffe10c4>

101010f8 <__divsi3>:
101010f8:	20001b16 	blt	r4,zero,10101168 <__divsi3+0x70>
101010fc:	000f883a 	mov	r7,zero
10101100:	28001616 	blt	r5,zero,1010115c <__divsi3+0x64>
10101104:	200d883a 	mov	r6,r4
10101108:	29001a2e 	bgeu	r5,r4,10101174 <__divsi3+0x7c>
1010110c:	00800804 	movi	r2,32
10101110:	00c00044 	movi	r3,1
10101114:	00000106 	br	1010111c <__divsi3+0x24>
10101118:	10000d26 	beq	r2,zero,10101150 <__divsi3+0x58>
1010111c:	294b883a 	add	r5,r5,r5
10101120:	10bfffc4 	addi	r2,r2,-1
10101124:	18c7883a 	add	r3,r3,r3
10101128:	293ffb36 	bltu	r5,r4,10101118 <__alt_data_end+0xfffe1118>
1010112c:	0005883a 	mov	r2,zero
10101130:	18000726 	beq	r3,zero,10101150 <__divsi3+0x58>
10101134:	0005883a 	mov	r2,zero
10101138:	31400236 	bltu	r6,r5,10101144 <__divsi3+0x4c>
1010113c:	314dc83a 	sub	r6,r6,r5
10101140:	10c4b03a 	or	r2,r2,r3
10101144:	1806d07a 	srli	r3,r3,1
10101148:	280ad07a 	srli	r5,r5,1
1010114c:	183ffa1e 	bne	r3,zero,10101138 <__alt_data_end+0xfffe1138>
10101150:	38000126 	beq	r7,zero,10101158 <__divsi3+0x60>
10101154:	0085c83a 	sub	r2,zero,r2
10101158:	f800283a 	ret
1010115c:	014bc83a 	sub	r5,zero,r5
10101160:	39c0005c 	xori	r7,r7,1
10101164:	003fe706 	br	10101104 <__alt_data_end+0xfffe1104>
10101168:	0109c83a 	sub	r4,zero,r4
1010116c:	01c00044 	movi	r7,1
10101170:	003fe306 	br	10101100 <__alt_data_end+0xfffe1100>
10101174:	00c00044 	movi	r3,1
10101178:	003fee06 	br	10101134 <__alt_data_end+0xfffe1134>

1010117c <__modsi3>:
1010117c:	20001716 	blt	r4,zero,101011dc <__modsi3+0x60>
10101180:	000f883a 	mov	r7,zero
10101184:	2005883a 	mov	r2,r4
10101188:	28001216 	blt	r5,zero,101011d4 <__modsi3+0x58>
1010118c:	2900162e 	bgeu	r5,r4,101011e8 <__modsi3+0x6c>
10101190:	01800804 	movi	r6,32
10101194:	00c00044 	movi	r3,1
10101198:	00000106 	br	101011a0 <__modsi3+0x24>
1010119c:	30000a26 	beq	r6,zero,101011c8 <__modsi3+0x4c>
101011a0:	294b883a 	add	r5,r5,r5
101011a4:	31bfffc4 	addi	r6,r6,-1
101011a8:	18c7883a 	add	r3,r3,r3
101011ac:	293ffb36 	bltu	r5,r4,1010119c <__alt_data_end+0xfffe119c>
101011b0:	18000526 	beq	r3,zero,101011c8 <__modsi3+0x4c>
101011b4:	1806d07a 	srli	r3,r3,1
101011b8:	11400136 	bltu	r2,r5,101011c0 <__modsi3+0x44>
101011bc:	1145c83a 	sub	r2,r2,r5
101011c0:	280ad07a 	srli	r5,r5,1
101011c4:	183ffb1e 	bne	r3,zero,101011b4 <__alt_data_end+0xfffe11b4>
101011c8:	38000126 	beq	r7,zero,101011d0 <__modsi3+0x54>
101011cc:	0085c83a 	sub	r2,zero,r2
101011d0:	f800283a 	ret
101011d4:	014bc83a 	sub	r5,zero,r5
101011d8:	003fec06 	br	1010118c <__alt_data_end+0xfffe118c>
101011dc:	0109c83a 	sub	r4,zero,r4
101011e0:	01c00044 	movi	r7,1
101011e4:	003fe706 	br	10101184 <__alt_data_end+0xfffe1184>
101011e8:	00c00044 	movi	r3,1
101011ec:	003ff106 	br	101011b4 <__alt_data_end+0xfffe11b4>

101011f0 <__udivsi3>:
101011f0:	200d883a 	mov	r6,r4
101011f4:	2900152e 	bgeu	r5,r4,1010124c <__udivsi3+0x5c>
101011f8:	28001416 	blt	r5,zero,1010124c <__udivsi3+0x5c>
101011fc:	00800804 	movi	r2,32
10101200:	00c00044 	movi	r3,1
10101204:	00000206 	br	10101210 <__udivsi3+0x20>
10101208:	10000e26 	beq	r2,zero,10101244 <__udivsi3+0x54>
1010120c:	28000516 	blt	r5,zero,10101224 <__udivsi3+0x34>
10101210:	294b883a 	add	r5,r5,r5
10101214:	10bfffc4 	addi	r2,r2,-1
10101218:	18c7883a 	add	r3,r3,r3
1010121c:	293ffa36 	bltu	r5,r4,10101208 <__alt_data_end+0xfffe1208>
10101220:	18000826 	beq	r3,zero,10101244 <__udivsi3+0x54>
10101224:	0005883a 	mov	r2,zero
10101228:	31400236 	bltu	r6,r5,10101234 <__udivsi3+0x44>
1010122c:	314dc83a 	sub	r6,r6,r5
10101230:	10c4b03a 	or	r2,r2,r3
10101234:	1806d07a 	srli	r3,r3,1
10101238:	280ad07a 	srli	r5,r5,1
1010123c:	183ffa1e 	bne	r3,zero,10101228 <__alt_data_end+0xfffe1228>
10101240:	f800283a 	ret
10101244:	0005883a 	mov	r2,zero
10101248:	f800283a 	ret
1010124c:	00c00044 	movi	r3,1
10101250:	003ff406 	br	10101224 <__alt_data_end+0xfffe1224>

10101254 <__umodsi3>:
10101254:	2005883a 	mov	r2,r4
10101258:	2900122e 	bgeu	r5,r4,101012a4 <__umodsi3+0x50>
1010125c:	28001116 	blt	r5,zero,101012a4 <__umodsi3+0x50>
10101260:	01800804 	movi	r6,32
10101264:	00c00044 	movi	r3,1
10101268:	00000206 	br	10101274 <__umodsi3+0x20>
1010126c:	30000c26 	beq	r6,zero,101012a0 <__umodsi3+0x4c>
10101270:	28000516 	blt	r5,zero,10101288 <__umodsi3+0x34>
10101274:	294b883a 	add	r5,r5,r5
10101278:	31bfffc4 	addi	r6,r6,-1
1010127c:	18c7883a 	add	r3,r3,r3
10101280:	293ffa36 	bltu	r5,r4,1010126c <__alt_data_end+0xfffe126c>
10101284:	18000626 	beq	r3,zero,101012a0 <__umodsi3+0x4c>
10101288:	1806d07a 	srli	r3,r3,1
1010128c:	11400136 	bltu	r2,r5,10101294 <__umodsi3+0x40>
10101290:	1145c83a 	sub	r2,r2,r5
10101294:	280ad07a 	srli	r5,r5,1
10101298:	183ffb1e 	bne	r3,zero,10101288 <__alt_data_end+0xfffe1288>
1010129c:	f800283a 	ret
101012a0:	f800283a 	ret
101012a4:	00c00044 	movi	r3,1
101012a8:	003ff706 	br	10101288 <__alt_data_end+0xfffe1288>

101012ac <_fclose_r>:
101012ac:	28003926 	beq	r5,zero,10101394 <_fclose_r+0xe8>
101012b0:	defffc04 	addi	sp,sp,-16
101012b4:	dc400115 	stw	r17,4(sp)
101012b8:	dc000015 	stw	r16,0(sp)
101012bc:	dfc00315 	stw	ra,12(sp)
101012c0:	dc800215 	stw	r18,8(sp)
101012c4:	2023883a 	mov	r17,r4
101012c8:	2821883a 	mov	r16,r5
101012cc:	20000226 	beq	r4,zero,101012d8 <_fclose_r+0x2c>
101012d0:	20800e17 	ldw	r2,56(r4)
101012d4:	10002726 	beq	r2,zero,10101374 <_fclose_r+0xc8>
101012d8:	8080030f 	ldh	r2,12(r16)
101012dc:	1000071e 	bne	r2,zero,101012fc <_fclose_r+0x50>
101012e0:	0005883a 	mov	r2,zero
101012e4:	dfc00317 	ldw	ra,12(sp)
101012e8:	dc800217 	ldw	r18,8(sp)
101012ec:	dc400117 	ldw	r17,4(sp)
101012f0:	dc000017 	ldw	r16,0(sp)
101012f4:	dec00404 	addi	sp,sp,16
101012f8:	f800283a 	ret
101012fc:	800b883a 	mov	r5,r16
10101300:	8809883a 	mov	r4,r17
10101304:	01013b00 	call	101013b0 <__sflush_r>
10101308:	1025883a 	mov	r18,r2
1010130c:	80800b17 	ldw	r2,44(r16)
10101310:	10000426 	beq	r2,zero,10101324 <_fclose_r+0x78>
10101314:	81400717 	ldw	r5,28(r16)
10101318:	8809883a 	mov	r4,r17
1010131c:	103ee83a 	callr	r2
10101320:	10001616 	blt	r2,zero,1010137c <_fclose_r+0xd0>
10101324:	8080030b 	ldhu	r2,12(r16)
10101328:	1080200c 	andi	r2,r2,128
1010132c:	1000151e 	bne	r2,zero,10101384 <_fclose_r+0xd8>
10101330:	81400c17 	ldw	r5,48(r16)
10101334:	28000526 	beq	r5,zero,1010134c <_fclose_r+0xa0>
10101338:	80801004 	addi	r2,r16,64
1010133c:	28800226 	beq	r5,r2,10101348 <_fclose_r+0x9c>
10101340:	8809883a 	mov	r4,r17
10101344:	0101d200 	call	10101d20 <_free_r>
10101348:	80000c15 	stw	zero,48(r16)
1010134c:	81401117 	ldw	r5,68(r16)
10101350:	28000326 	beq	r5,zero,10101360 <_fclose_r+0xb4>
10101354:	8809883a 	mov	r4,r17
10101358:	0101d200 	call	10101d20 <_free_r>
1010135c:	80001115 	stw	zero,68(r16)
10101360:	0101ab00 	call	10101ab0 <__sfp_lock_acquire>
10101364:	8000030d 	sth	zero,12(r16)
10101368:	0101ab40 	call	10101ab4 <__sfp_lock_release>
1010136c:	9005883a 	mov	r2,r18
10101370:	003fdc06 	br	101012e4 <__alt_data_end+0xfffe12e4>
10101374:	0101aa00 	call	10101aa0 <__sinit>
10101378:	003fd706 	br	101012d8 <__alt_data_end+0xfffe12d8>
1010137c:	04bfffc4 	movi	r18,-1
10101380:	003fe806 	br	10101324 <__alt_data_end+0xfffe1324>
10101384:	81400417 	ldw	r5,16(r16)
10101388:	8809883a 	mov	r4,r17
1010138c:	0101d200 	call	10101d20 <_free_r>
10101390:	003fe706 	br	10101330 <__alt_data_end+0xfffe1330>
10101394:	0005883a 	mov	r2,zero
10101398:	f800283a 	ret

1010139c <fclose>:
1010139c:	00840474 	movhi	r2,4113
101013a0:	108bb004 	addi	r2,r2,11968
101013a4:	200b883a 	mov	r5,r4
101013a8:	11000017 	ldw	r4,0(r2)
101013ac:	01012ac1 	jmpi	101012ac <_fclose_r>

101013b0 <__sflush_r>:
101013b0:	2880030b 	ldhu	r2,12(r5)
101013b4:	defffb04 	addi	sp,sp,-20
101013b8:	dcc00315 	stw	r19,12(sp)
101013bc:	dc400115 	stw	r17,4(sp)
101013c0:	dfc00415 	stw	ra,16(sp)
101013c4:	dc800215 	stw	r18,8(sp)
101013c8:	dc000015 	stw	r16,0(sp)
101013cc:	10c0020c 	andi	r3,r2,8
101013d0:	2823883a 	mov	r17,r5
101013d4:	2027883a 	mov	r19,r4
101013d8:	1800311e 	bne	r3,zero,101014a0 <__sflush_r+0xf0>
101013dc:	28c00117 	ldw	r3,4(r5)
101013e0:	10820014 	ori	r2,r2,2048
101013e4:	2880030d 	sth	r2,12(r5)
101013e8:	00c04b0e 	bge	zero,r3,10101518 <__sflush_r+0x168>
101013ec:	8a000a17 	ldw	r8,40(r17)
101013f0:	40002326 	beq	r8,zero,10101480 <__sflush_r+0xd0>
101013f4:	9c000017 	ldw	r16,0(r19)
101013f8:	10c4000c 	andi	r3,r2,4096
101013fc:	98000015 	stw	zero,0(r19)
10101400:	18004826 	beq	r3,zero,10101524 <__sflush_r+0x174>
10101404:	89801417 	ldw	r6,80(r17)
10101408:	10c0010c 	andi	r3,r2,4
1010140c:	18000626 	beq	r3,zero,10101428 <__sflush_r+0x78>
10101410:	88c00117 	ldw	r3,4(r17)
10101414:	88800c17 	ldw	r2,48(r17)
10101418:	30cdc83a 	sub	r6,r6,r3
1010141c:	10000226 	beq	r2,zero,10101428 <__sflush_r+0x78>
10101420:	88800f17 	ldw	r2,60(r17)
10101424:	308dc83a 	sub	r6,r6,r2
10101428:	89400717 	ldw	r5,28(r17)
1010142c:	000f883a 	mov	r7,zero
10101430:	9809883a 	mov	r4,r19
10101434:	403ee83a 	callr	r8
10101438:	00ffffc4 	movi	r3,-1
1010143c:	10c04426 	beq	r2,r3,10101550 <__sflush_r+0x1a0>
10101440:	88c0030b 	ldhu	r3,12(r17)
10101444:	89000417 	ldw	r4,16(r17)
10101448:	88000115 	stw	zero,4(r17)
1010144c:	197dffcc 	andi	r5,r3,63487
10101450:	8940030d 	sth	r5,12(r17)
10101454:	89000015 	stw	r4,0(r17)
10101458:	18c4000c 	andi	r3,r3,4096
1010145c:	18002c1e 	bne	r3,zero,10101510 <__sflush_r+0x160>
10101460:	89400c17 	ldw	r5,48(r17)
10101464:	9c000015 	stw	r16,0(r19)
10101468:	28000526 	beq	r5,zero,10101480 <__sflush_r+0xd0>
1010146c:	88801004 	addi	r2,r17,64
10101470:	28800226 	beq	r5,r2,1010147c <__sflush_r+0xcc>
10101474:	9809883a 	mov	r4,r19
10101478:	0101d200 	call	10101d20 <_free_r>
1010147c:	88000c15 	stw	zero,48(r17)
10101480:	0005883a 	mov	r2,zero
10101484:	dfc00417 	ldw	ra,16(sp)
10101488:	dcc00317 	ldw	r19,12(sp)
1010148c:	dc800217 	ldw	r18,8(sp)
10101490:	dc400117 	ldw	r17,4(sp)
10101494:	dc000017 	ldw	r16,0(sp)
10101498:	dec00504 	addi	sp,sp,20
1010149c:	f800283a 	ret
101014a0:	2c800417 	ldw	r18,16(r5)
101014a4:	903ff626 	beq	r18,zero,10101480 <__alt_data_end+0xfffe1480>
101014a8:	2c000017 	ldw	r16,0(r5)
101014ac:	108000cc 	andi	r2,r2,3
101014b0:	2c800015 	stw	r18,0(r5)
101014b4:	84a1c83a 	sub	r16,r16,r18
101014b8:	1000131e 	bne	r2,zero,10101508 <__sflush_r+0x158>
101014bc:	28800517 	ldw	r2,20(r5)
101014c0:	88800215 	stw	r2,8(r17)
101014c4:	04000316 	blt	zero,r16,101014d4 <__sflush_r+0x124>
101014c8:	003fed06 	br	10101480 <__alt_data_end+0xfffe1480>
101014cc:	90a5883a 	add	r18,r18,r2
101014d0:	043feb0e 	bge	zero,r16,10101480 <__alt_data_end+0xfffe1480>
101014d4:	88800917 	ldw	r2,36(r17)
101014d8:	89400717 	ldw	r5,28(r17)
101014dc:	800f883a 	mov	r7,r16
101014e0:	900d883a 	mov	r6,r18
101014e4:	9809883a 	mov	r4,r19
101014e8:	103ee83a 	callr	r2
101014ec:	80a1c83a 	sub	r16,r16,r2
101014f0:	00bff616 	blt	zero,r2,101014cc <__alt_data_end+0xfffe14cc>
101014f4:	88c0030b 	ldhu	r3,12(r17)
101014f8:	00bfffc4 	movi	r2,-1
101014fc:	18c01014 	ori	r3,r3,64
10101500:	88c0030d 	sth	r3,12(r17)
10101504:	003fdf06 	br	10101484 <__alt_data_end+0xfffe1484>
10101508:	0005883a 	mov	r2,zero
1010150c:	003fec06 	br	101014c0 <__alt_data_end+0xfffe14c0>
10101510:	88801415 	stw	r2,80(r17)
10101514:	003fd206 	br	10101460 <__alt_data_end+0xfffe1460>
10101518:	28c00f17 	ldw	r3,60(r5)
1010151c:	00ffb316 	blt	zero,r3,101013ec <__alt_data_end+0xfffe13ec>
10101520:	003fd706 	br	10101480 <__alt_data_end+0xfffe1480>
10101524:	89400717 	ldw	r5,28(r17)
10101528:	000d883a 	mov	r6,zero
1010152c:	01c00044 	movi	r7,1
10101530:	9809883a 	mov	r4,r19
10101534:	403ee83a 	callr	r8
10101538:	100d883a 	mov	r6,r2
1010153c:	00bfffc4 	movi	r2,-1
10101540:	30801426 	beq	r6,r2,10101594 <__sflush_r+0x1e4>
10101544:	8880030b 	ldhu	r2,12(r17)
10101548:	8a000a17 	ldw	r8,40(r17)
1010154c:	003fae06 	br	10101408 <__alt_data_end+0xfffe1408>
10101550:	98c00017 	ldw	r3,0(r19)
10101554:	183fba26 	beq	r3,zero,10101440 <__alt_data_end+0xfffe1440>
10101558:	01000744 	movi	r4,29
1010155c:	19000626 	beq	r3,r4,10101578 <__sflush_r+0x1c8>
10101560:	01000584 	movi	r4,22
10101564:	19000426 	beq	r3,r4,10101578 <__sflush_r+0x1c8>
10101568:	88c0030b 	ldhu	r3,12(r17)
1010156c:	18c01014 	ori	r3,r3,64
10101570:	88c0030d 	sth	r3,12(r17)
10101574:	003fc306 	br	10101484 <__alt_data_end+0xfffe1484>
10101578:	8880030b 	ldhu	r2,12(r17)
1010157c:	88c00417 	ldw	r3,16(r17)
10101580:	88000115 	stw	zero,4(r17)
10101584:	10bdffcc 	andi	r2,r2,63487
10101588:	8880030d 	sth	r2,12(r17)
1010158c:	88c00015 	stw	r3,0(r17)
10101590:	003fb306 	br	10101460 <__alt_data_end+0xfffe1460>
10101594:	98800017 	ldw	r2,0(r19)
10101598:	103fea26 	beq	r2,zero,10101544 <__alt_data_end+0xfffe1544>
1010159c:	00c00744 	movi	r3,29
101015a0:	10c00226 	beq	r2,r3,101015ac <__sflush_r+0x1fc>
101015a4:	00c00584 	movi	r3,22
101015a8:	10c0031e 	bne	r2,r3,101015b8 <__sflush_r+0x208>
101015ac:	9c000015 	stw	r16,0(r19)
101015b0:	0005883a 	mov	r2,zero
101015b4:	003fb306 	br	10101484 <__alt_data_end+0xfffe1484>
101015b8:	88c0030b 	ldhu	r3,12(r17)
101015bc:	3005883a 	mov	r2,r6
101015c0:	18c01014 	ori	r3,r3,64
101015c4:	88c0030d 	sth	r3,12(r17)
101015c8:	003fae06 	br	10101484 <__alt_data_end+0xfffe1484>

101015cc <_fflush_r>:
101015cc:	defffd04 	addi	sp,sp,-12
101015d0:	dc000115 	stw	r16,4(sp)
101015d4:	dfc00215 	stw	ra,8(sp)
101015d8:	2021883a 	mov	r16,r4
101015dc:	20000226 	beq	r4,zero,101015e8 <_fflush_r+0x1c>
101015e0:	20800e17 	ldw	r2,56(r4)
101015e4:	10000c26 	beq	r2,zero,10101618 <_fflush_r+0x4c>
101015e8:	2880030f 	ldh	r2,12(r5)
101015ec:	1000051e 	bne	r2,zero,10101604 <_fflush_r+0x38>
101015f0:	0005883a 	mov	r2,zero
101015f4:	dfc00217 	ldw	ra,8(sp)
101015f8:	dc000117 	ldw	r16,4(sp)
101015fc:	dec00304 	addi	sp,sp,12
10101600:	f800283a 	ret
10101604:	8009883a 	mov	r4,r16
10101608:	dfc00217 	ldw	ra,8(sp)
1010160c:	dc000117 	ldw	r16,4(sp)
10101610:	dec00304 	addi	sp,sp,12
10101614:	01013b01 	jmpi	101013b0 <__sflush_r>
10101618:	d9400015 	stw	r5,0(sp)
1010161c:	0101aa00 	call	10101aa0 <__sinit>
10101620:	d9400017 	ldw	r5,0(sp)
10101624:	003ff006 	br	101015e8 <__alt_data_end+0xfffe15e8>

10101628 <fflush>:
10101628:	20000526 	beq	r4,zero,10101640 <fflush+0x18>
1010162c:	00840474 	movhi	r2,4113
10101630:	108bb004 	addi	r2,r2,11968
10101634:	200b883a 	mov	r5,r4
10101638:	11000017 	ldw	r4,0(r2)
1010163c:	01015cc1 	jmpi	101015cc <_fflush_r>
10101640:	00840474 	movhi	r2,4113
10101644:	108baf04 	addi	r2,r2,11964
10101648:	11000017 	ldw	r4,0(r2)
1010164c:	01440434 	movhi	r5,4112
10101650:	29457304 	addi	r5,r5,5580
10101654:	01025d01 	jmpi	101025d0 <_fwalk_reent>

10101658 <_fgetc_r>:
10101658:	defffd04 	addi	sp,sp,-12
1010165c:	dc000115 	stw	r16,4(sp)
10101660:	dfc00215 	stw	ra,8(sp)
10101664:	2021883a 	mov	r16,r4
10101668:	20000226 	beq	r4,zero,10101674 <_fgetc_r+0x1c>
1010166c:	20800e17 	ldw	r2,56(r4)
10101670:	10000c26 	beq	r2,zero,101016a4 <_fgetc_r+0x4c>
10101674:	28800117 	ldw	r2,4(r5)
10101678:	10bfffc4 	addi	r2,r2,-1
1010167c:	28800115 	stw	r2,4(r5)
10101680:	10000c16 	blt	r2,zero,101016b4 <_fgetc_r+0x5c>
10101684:	28800017 	ldw	r2,0(r5)
10101688:	10c00044 	addi	r3,r2,1
1010168c:	28c00015 	stw	r3,0(r5)
10101690:	10800003 	ldbu	r2,0(r2)
10101694:	dfc00217 	ldw	ra,8(sp)
10101698:	dc000117 	ldw	r16,4(sp)
1010169c:	dec00304 	addi	sp,sp,12
101016a0:	f800283a 	ret
101016a4:	d9400015 	stw	r5,0(sp)
101016a8:	0101aa00 	call	10101aa0 <__sinit>
101016ac:	d9400017 	ldw	r5,0(sp)
101016b0:	003ff006 	br	10101674 <__alt_data_end+0xfffe1674>
101016b4:	8009883a 	mov	r4,r16
101016b8:	dfc00217 	ldw	ra,8(sp)
101016bc:	dc000117 	ldw	r16,4(sp)
101016c0:	dec00304 	addi	sp,sp,12
101016c4:	01035141 	jmpi	10103514 <__srget_r>

101016c8 <fgetc>:
101016c8:	00840474 	movhi	r2,4113
101016cc:	defffd04 	addi	sp,sp,-12
101016d0:	108bb004 	addi	r2,r2,11968
101016d4:	dc400115 	stw	r17,4(sp)
101016d8:	14400017 	ldw	r17,0(r2)
101016dc:	dc000015 	stw	r16,0(sp)
101016e0:	dfc00215 	stw	ra,8(sp)
101016e4:	2021883a 	mov	r16,r4
101016e8:	88000226 	beq	r17,zero,101016f4 <fgetc+0x2c>
101016ec:	88800e17 	ldw	r2,56(r17)
101016f0:	10000d26 	beq	r2,zero,10101728 <fgetc+0x60>
101016f4:	80800117 	ldw	r2,4(r16)
101016f8:	10bfffc4 	addi	r2,r2,-1
101016fc:	80800115 	stw	r2,4(r16)
10101700:	10000c16 	blt	r2,zero,10101734 <fgetc+0x6c>
10101704:	80800017 	ldw	r2,0(r16)
10101708:	10c00044 	addi	r3,r2,1
1010170c:	80c00015 	stw	r3,0(r16)
10101710:	10800003 	ldbu	r2,0(r2)
10101714:	dfc00217 	ldw	ra,8(sp)
10101718:	dc400117 	ldw	r17,4(sp)
1010171c:	dc000017 	ldw	r16,0(sp)
10101720:	dec00304 	addi	sp,sp,12
10101724:	f800283a 	ret
10101728:	8809883a 	mov	r4,r17
1010172c:	0101aa00 	call	10101aa0 <__sinit>
10101730:	003ff006 	br	101016f4 <__alt_data_end+0xfffe16f4>
10101734:	800b883a 	mov	r5,r16
10101738:	8809883a 	mov	r4,r17
1010173c:	dfc00217 	ldw	ra,8(sp)
10101740:	dc400117 	ldw	r17,4(sp)
10101744:	dc000017 	ldw	r16,0(sp)
10101748:	dec00304 	addi	sp,sp,12
1010174c:	01035141 	jmpi	10103514 <__srget_r>

10101750 <__fp_unlock>:
10101750:	0005883a 	mov	r2,zero
10101754:	f800283a 	ret

10101758 <_cleanup_r>:
10101758:	01440434 	movhi	r5,4112
1010175c:	2944ab04 	addi	r5,r5,4780
10101760:	01025d01 	jmpi	101025d0 <_fwalk_reent>

10101764 <__sinit.part.1>:
10101764:	defff704 	addi	sp,sp,-36
10101768:	00c40434 	movhi	r3,4112
1010176c:	dfc00815 	stw	ra,32(sp)
10101770:	ddc00715 	stw	r23,28(sp)
10101774:	dd800615 	stw	r22,24(sp)
10101778:	dd400515 	stw	r21,20(sp)
1010177c:	dd000415 	stw	r20,16(sp)
10101780:	dcc00315 	stw	r19,12(sp)
10101784:	dc800215 	stw	r18,8(sp)
10101788:	dc400115 	stw	r17,4(sp)
1010178c:	dc000015 	stw	r16,0(sp)
10101790:	18c5d604 	addi	r3,r3,5976
10101794:	24000117 	ldw	r16,4(r4)
10101798:	20c00f15 	stw	r3,60(r4)
1010179c:	2080bb04 	addi	r2,r4,748
101017a0:	00c000c4 	movi	r3,3
101017a4:	20c0b915 	stw	r3,740(r4)
101017a8:	2080ba15 	stw	r2,744(r4)
101017ac:	2000b815 	stw	zero,736(r4)
101017b0:	05c00204 	movi	r23,8
101017b4:	00800104 	movi	r2,4
101017b8:	2025883a 	mov	r18,r4
101017bc:	b80d883a 	mov	r6,r23
101017c0:	81001704 	addi	r4,r16,92
101017c4:	000b883a 	mov	r5,zero
101017c8:	80000015 	stw	zero,0(r16)
101017cc:	80000115 	stw	zero,4(r16)
101017d0:	80000215 	stw	zero,8(r16)
101017d4:	8080030d 	sth	r2,12(r16)
101017d8:	80001915 	stw	zero,100(r16)
101017dc:	8000038d 	sth	zero,14(r16)
101017e0:	80000415 	stw	zero,16(r16)
101017e4:	80000515 	stw	zero,20(r16)
101017e8:	80000615 	stw	zero,24(r16)
101017ec:	010305c0 	call	1010305c <memset>
101017f0:	05840434 	movhi	r22,4112
101017f4:	94400217 	ldw	r17,8(r18)
101017f8:	05440434 	movhi	r21,4112
101017fc:	05040434 	movhi	r20,4112
10101800:	04c40434 	movhi	r19,4112
10101804:	b58d7c04 	addi	r22,r22,13808
10101808:	ad4d9304 	addi	r21,r21,13900
1010180c:	a50db204 	addi	r20,r20,14024
10101810:	9ccdc904 	addi	r19,r19,14116
10101814:	85800815 	stw	r22,32(r16)
10101818:	85400915 	stw	r21,36(r16)
1010181c:	85000a15 	stw	r20,40(r16)
10101820:	84c00b15 	stw	r19,44(r16)
10101824:	84000715 	stw	r16,28(r16)
10101828:	00800284 	movi	r2,10
1010182c:	8880030d 	sth	r2,12(r17)
10101830:	00800044 	movi	r2,1
10101834:	b80d883a 	mov	r6,r23
10101838:	89001704 	addi	r4,r17,92
1010183c:	000b883a 	mov	r5,zero
10101840:	88000015 	stw	zero,0(r17)
10101844:	88000115 	stw	zero,4(r17)
10101848:	88000215 	stw	zero,8(r17)
1010184c:	88001915 	stw	zero,100(r17)
10101850:	8880038d 	sth	r2,14(r17)
10101854:	88000415 	stw	zero,16(r17)
10101858:	88000515 	stw	zero,20(r17)
1010185c:	88000615 	stw	zero,24(r17)
10101860:	010305c0 	call	1010305c <memset>
10101864:	94000317 	ldw	r16,12(r18)
10101868:	00800484 	movi	r2,18
1010186c:	8c400715 	stw	r17,28(r17)
10101870:	8d800815 	stw	r22,32(r17)
10101874:	8d400915 	stw	r21,36(r17)
10101878:	8d000a15 	stw	r20,40(r17)
1010187c:	8cc00b15 	stw	r19,44(r17)
10101880:	8080030d 	sth	r2,12(r16)
10101884:	00800084 	movi	r2,2
10101888:	80000015 	stw	zero,0(r16)
1010188c:	80000115 	stw	zero,4(r16)
10101890:	80000215 	stw	zero,8(r16)
10101894:	80001915 	stw	zero,100(r16)
10101898:	8080038d 	sth	r2,14(r16)
1010189c:	80000415 	stw	zero,16(r16)
101018a0:	80000515 	stw	zero,20(r16)
101018a4:	80000615 	stw	zero,24(r16)
101018a8:	b80d883a 	mov	r6,r23
101018ac:	000b883a 	mov	r5,zero
101018b0:	81001704 	addi	r4,r16,92
101018b4:	010305c0 	call	1010305c <memset>
101018b8:	00800044 	movi	r2,1
101018bc:	84000715 	stw	r16,28(r16)
101018c0:	85800815 	stw	r22,32(r16)
101018c4:	85400915 	stw	r21,36(r16)
101018c8:	85000a15 	stw	r20,40(r16)
101018cc:	84c00b15 	stw	r19,44(r16)
101018d0:	90800e15 	stw	r2,56(r18)
101018d4:	dfc00817 	ldw	ra,32(sp)
101018d8:	ddc00717 	ldw	r23,28(sp)
101018dc:	dd800617 	ldw	r22,24(sp)
101018e0:	dd400517 	ldw	r21,20(sp)
101018e4:	dd000417 	ldw	r20,16(sp)
101018e8:	dcc00317 	ldw	r19,12(sp)
101018ec:	dc800217 	ldw	r18,8(sp)
101018f0:	dc400117 	ldw	r17,4(sp)
101018f4:	dc000017 	ldw	r16,0(sp)
101018f8:	dec00904 	addi	sp,sp,36
101018fc:	f800283a 	ret

10101900 <__fp_lock>:
10101900:	0005883a 	mov	r2,zero
10101904:	f800283a 	ret

10101908 <__sfmoreglue>:
10101908:	defffc04 	addi	sp,sp,-16
1010190c:	dc400115 	stw	r17,4(sp)
10101910:	2c7fffc4 	addi	r17,r5,-1
10101914:	8c401a24 	muli	r17,r17,104
10101918:	dc800215 	stw	r18,8(sp)
1010191c:	2825883a 	mov	r18,r5
10101920:	89401d04 	addi	r5,r17,116
10101924:	dc000015 	stw	r16,0(sp)
10101928:	dfc00315 	stw	ra,12(sp)
1010192c:	01028500 	call	10102850 <_malloc_r>
10101930:	1021883a 	mov	r16,r2
10101934:	10000726 	beq	r2,zero,10101954 <__sfmoreglue+0x4c>
10101938:	11000304 	addi	r4,r2,12
1010193c:	10000015 	stw	zero,0(r2)
10101940:	14800115 	stw	r18,4(r2)
10101944:	11000215 	stw	r4,8(r2)
10101948:	89801a04 	addi	r6,r17,104
1010194c:	000b883a 	mov	r5,zero
10101950:	010305c0 	call	1010305c <memset>
10101954:	8005883a 	mov	r2,r16
10101958:	dfc00317 	ldw	ra,12(sp)
1010195c:	dc800217 	ldw	r18,8(sp)
10101960:	dc400117 	ldw	r17,4(sp)
10101964:	dc000017 	ldw	r16,0(sp)
10101968:	dec00404 	addi	sp,sp,16
1010196c:	f800283a 	ret

10101970 <__sfp>:
10101970:	defffb04 	addi	sp,sp,-20
10101974:	dc000015 	stw	r16,0(sp)
10101978:	04040474 	movhi	r16,4113
1010197c:	840baf04 	addi	r16,r16,11964
10101980:	dcc00315 	stw	r19,12(sp)
10101984:	2027883a 	mov	r19,r4
10101988:	81000017 	ldw	r4,0(r16)
1010198c:	dfc00415 	stw	ra,16(sp)
10101990:	dc800215 	stw	r18,8(sp)
10101994:	20800e17 	ldw	r2,56(r4)
10101998:	dc400115 	stw	r17,4(sp)
1010199c:	1000021e 	bne	r2,zero,101019a8 <__sfp+0x38>
101019a0:	01017640 	call	10101764 <__sinit.part.1>
101019a4:	81000017 	ldw	r4,0(r16)
101019a8:	2480b804 	addi	r18,r4,736
101019ac:	047fffc4 	movi	r17,-1
101019b0:	91000117 	ldw	r4,4(r18)
101019b4:	94000217 	ldw	r16,8(r18)
101019b8:	213fffc4 	addi	r4,r4,-1
101019bc:	20000a16 	blt	r4,zero,101019e8 <__sfp+0x78>
101019c0:	8080030f 	ldh	r2,12(r16)
101019c4:	10000c26 	beq	r2,zero,101019f8 <__sfp+0x88>
101019c8:	80c01d04 	addi	r3,r16,116
101019cc:	00000206 	br	101019d8 <__sfp+0x68>
101019d0:	18bfe60f 	ldh	r2,-104(r3)
101019d4:	10000826 	beq	r2,zero,101019f8 <__sfp+0x88>
101019d8:	213fffc4 	addi	r4,r4,-1
101019dc:	1c3ffd04 	addi	r16,r3,-12
101019e0:	18c01a04 	addi	r3,r3,104
101019e4:	247ffa1e 	bne	r4,r17,101019d0 <__alt_data_end+0xfffe19d0>
101019e8:	90800017 	ldw	r2,0(r18)
101019ec:	10001d26 	beq	r2,zero,10101a64 <__sfp+0xf4>
101019f0:	1025883a 	mov	r18,r2
101019f4:	003fee06 	br	101019b0 <__alt_data_end+0xfffe19b0>
101019f8:	00bfffc4 	movi	r2,-1
101019fc:	8080038d 	sth	r2,14(r16)
10101a00:	00800044 	movi	r2,1
10101a04:	8080030d 	sth	r2,12(r16)
10101a08:	80001915 	stw	zero,100(r16)
10101a0c:	80000015 	stw	zero,0(r16)
10101a10:	80000215 	stw	zero,8(r16)
10101a14:	80000115 	stw	zero,4(r16)
10101a18:	80000415 	stw	zero,16(r16)
10101a1c:	80000515 	stw	zero,20(r16)
10101a20:	80000615 	stw	zero,24(r16)
10101a24:	01800204 	movi	r6,8
10101a28:	000b883a 	mov	r5,zero
10101a2c:	81001704 	addi	r4,r16,92
10101a30:	010305c0 	call	1010305c <memset>
10101a34:	8005883a 	mov	r2,r16
10101a38:	80000c15 	stw	zero,48(r16)
10101a3c:	80000d15 	stw	zero,52(r16)
10101a40:	80001115 	stw	zero,68(r16)
10101a44:	80001215 	stw	zero,72(r16)
10101a48:	dfc00417 	ldw	ra,16(sp)
10101a4c:	dcc00317 	ldw	r19,12(sp)
10101a50:	dc800217 	ldw	r18,8(sp)
10101a54:	dc400117 	ldw	r17,4(sp)
10101a58:	dc000017 	ldw	r16,0(sp)
10101a5c:	dec00504 	addi	sp,sp,20
10101a60:	f800283a 	ret
10101a64:	01400104 	movi	r5,4
10101a68:	9809883a 	mov	r4,r19
10101a6c:	01019080 	call	10101908 <__sfmoreglue>
10101a70:	90800015 	stw	r2,0(r18)
10101a74:	103fde1e 	bne	r2,zero,101019f0 <__alt_data_end+0xfffe19f0>
10101a78:	00800304 	movi	r2,12
10101a7c:	98800015 	stw	r2,0(r19)
10101a80:	0005883a 	mov	r2,zero
10101a84:	003ff006 	br	10101a48 <__alt_data_end+0xfffe1a48>

10101a88 <_cleanup>:
10101a88:	00840474 	movhi	r2,4113
10101a8c:	108baf04 	addi	r2,r2,11964
10101a90:	11000017 	ldw	r4,0(r2)
10101a94:	01440434 	movhi	r5,4112
10101a98:	2944ab04 	addi	r5,r5,4780
10101a9c:	01025d01 	jmpi	101025d0 <_fwalk_reent>

10101aa0 <__sinit>:
10101aa0:	20800e17 	ldw	r2,56(r4)
10101aa4:	10000126 	beq	r2,zero,10101aac <__sinit+0xc>
10101aa8:	f800283a 	ret
10101aac:	01017641 	jmpi	10101764 <__sinit.part.1>

10101ab0 <__sfp_lock_acquire>:
10101ab0:	f800283a 	ret

10101ab4 <__sfp_lock_release>:
10101ab4:	f800283a 	ret

10101ab8 <__sinit_lock_acquire>:
10101ab8:	f800283a 	ret

10101abc <__sinit_lock_release>:
10101abc:	f800283a 	ret

10101ac0 <__fp_lock_all>:
10101ac0:	00840474 	movhi	r2,4113
10101ac4:	108bb004 	addi	r2,r2,11968
10101ac8:	11000017 	ldw	r4,0(r2)
10101acc:	01440434 	movhi	r5,4112
10101ad0:	29464004 	addi	r5,r5,6400
10101ad4:	010250c1 	jmpi	1010250c <_fwalk>

10101ad8 <__fp_unlock_all>:
10101ad8:	00840474 	movhi	r2,4113
10101adc:	108bb004 	addi	r2,r2,11968
10101ae0:	11000017 	ldw	r4,0(r2)
10101ae4:	01440434 	movhi	r5,4112
10101ae8:	2945d404 	addi	r5,r5,5968
10101aec:	010250c1 	jmpi	1010250c <_fwalk>

10101af0 <_fopen_r>:
10101af0:	defffa04 	addi	sp,sp,-24
10101af4:	3005883a 	mov	r2,r6
10101af8:	dcc00415 	stw	r19,16(sp)
10101afc:	d80d883a 	mov	r6,sp
10101b00:	2827883a 	mov	r19,r5
10101b04:	100b883a 	mov	r5,r2
10101b08:	dc800315 	stw	r18,12(sp)
10101b0c:	dfc00515 	stw	ra,20(sp)
10101b10:	dc400215 	stw	r17,8(sp)
10101b14:	dc000115 	stw	r16,4(sp)
10101b18:	2025883a 	mov	r18,r4
10101b1c:	01075240 	call	10107524 <__sflags>
10101b20:	10002726 	beq	r2,zero,10101bc0 <_fopen_r+0xd0>
10101b24:	9009883a 	mov	r4,r18
10101b28:	1023883a 	mov	r17,r2
10101b2c:	01019700 	call	10101970 <__sfp>
10101b30:	1021883a 	mov	r16,r2
10101b34:	10002226 	beq	r2,zero,10101bc0 <_fopen_r+0xd0>
10101b38:	d9800017 	ldw	r6,0(sp)
10101b3c:	01c06d84 	movi	r7,438
10101b40:	980b883a 	mov	r5,r19
10101b44:	9009883a 	mov	r4,r18
10101b48:	01031840 	call	10103184 <_open_r>
10101b4c:	10001916 	blt	r2,zero,10101bb4 <_fopen_r+0xc4>
10101b50:	8080038d 	sth	r2,14(r16)
10101b54:	00840434 	movhi	r2,4112
10101b58:	108d7c04 	addi	r2,r2,13808
10101b5c:	80800815 	stw	r2,32(r16)
10101b60:	00840434 	movhi	r2,4112
10101b64:	108d9304 	addi	r2,r2,13900
10101b68:	80800915 	stw	r2,36(r16)
10101b6c:	00840434 	movhi	r2,4112
10101b70:	108db204 	addi	r2,r2,14024
10101b74:	80800a15 	stw	r2,40(r16)
10101b78:	00840434 	movhi	r2,4112
10101b7c:	108dc904 	addi	r2,r2,14116
10101b80:	8440030d 	sth	r17,12(r16)
10101b84:	84000715 	stw	r16,28(r16)
10101b88:	80800b15 	stw	r2,44(r16)
10101b8c:	8c40400c 	andi	r17,r17,256
10101b90:	88000d1e 	bne	r17,zero,10101bc8 <_fopen_r+0xd8>
10101b94:	8005883a 	mov	r2,r16
10101b98:	dfc00517 	ldw	ra,20(sp)
10101b9c:	dcc00417 	ldw	r19,16(sp)
10101ba0:	dc800317 	ldw	r18,12(sp)
10101ba4:	dc400217 	ldw	r17,8(sp)
10101ba8:	dc000117 	ldw	r16,4(sp)
10101bac:	dec00604 	addi	sp,sp,24
10101bb0:	f800283a 	ret
10101bb4:	0101ab00 	call	10101ab0 <__sfp_lock_acquire>
10101bb8:	8000030d 	sth	zero,12(r16)
10101bbc:	0101ab40 	call	10101ab4 <__sfp_lock_release>
10101bc0:	0005883a 	mov	r2,zero
10101bc4:	003ff406 	br	10101b98 <__alt_data_end+0xfffe1b98>
10101bc8:	01c00084 	movi	r7,2
10101bcc:	000d883a 	mov	r6,zero
10101bd0:	800b883a 	mov	r5,r16
10101bd4:	9009883a 	mov	r4,r18
10101bd8:	01020300 	call	10102030 <_fseek_r>
10101bdc:	8005883a 	mov	r2,r16
10101be0:	003fed06 	br	10101b98 <__alt_data_end+0xfffe1b98>

10101be4 <fopen>:
10101be4:	00840474 	movhi	r2,4113
10101be8:	108bb004 	addi	r2,r2,11968
10101bec:	280d883a 	mov	r6,r5
10101bf0:	200b883a 	mov	r5,r4
10101bf4:	11000017 	ldw	r4,0(r2)
10101bf8:	0101af01 	jmpi	10101af0 <_fopen_r>

10101bfc <_malloc_trim_r>:
10101bfc:	defffb04 	addi	sp,sp,-20
10101c00:	dcc00315 	stw	r19,12(sp)
10101c04:	04c40474 	movhi	r19,4113
10101c08:	dc800215 	stw	r18,8(sp)
10101c0c:	dc400115 	stw	r17,4(sp)
10101c10:	dc000015 	stw	r16,0(sp)
10101c14:	dfc00415 	stw	ra,16(sp)
10101c18:	2821883a 	mov	r16,r5
10101c1c:	9cc60304 	addi	r19,r19,6156
10101c20:	2025883a 	mov	r18,r4
10101c24:	010e99c0 	call	1010e99c <__malloc_lock>
10101c28:	98800217 	ldw	r2,8(r19)
10101c2c:	14400117 	ldw	r17,4(r2)
10101c30:	00bfff04 	movi	r2,-4
10101c34:	88a2703a 	and	r17,r17,r2
10101c38:	8c21c83a 	sub	r16,r17,r16
10101c3c:	8403fbc4 	addi	r16,r16,4079
10101c40:	8020d33a 	srli	r16,r16,12
10101c44:	0083ffc4 	movi	r2,4095
10101c48:	843fffc4 	addi	r16,r16,-1
10101c4c:	8020933a 	slli	r16,r16,12
10101c50:	1400060e 	bge	r2,r16,10101c6c <_malloc_trim_r+0x70>
10101c54:	000b883a 	mov	r5,zero
10101c58:	9009883a 	mov	r4,r18
10101c5c:	010359c0 	call	1010359c <_sbrk_r>
10101c60:	98c00217 	ldw	r3,8(r19)
10101c64:	1c47883a 	add	r3,r3,r17
10101c68:	10c00a26 	beq	r2,r3,10101c94 <_malloc_trim_r+0x98>
10101c6c:	9009883a 	mov	r4,r18
10101c70:	010e9c00 	call	1010e9c0 <__malloc_unlock>
10101c74:	0005883a 	mov	r2,zero
10101c78:	dfc00417 	ldw	ra,16(sp)
10101c7c:	dcc00317 	ldw	r19,12(sp)
10101c80:	dc800217 	ldw	r18,8(sp)
10101c84:	dc400117 	ldw	r17,4(sp)
10101c88:	dc000017 	ldw	r16,0(sp)
10101c8c:	dec00504 	addi	sp,sp,20
10101c90:	f800283a 	ret
10101c94:	040bc83a 	sub	r5,zero,r16
10101c98:	9009883a 	mov	r4,r18
10101c9c:	010359c0 	call	1010359c <_sbrk_r>
10101ca0:	00ffffc4 	movi	r3,-1
10101ca4:	10c00d26 	beq	r2,r3,10101cdc <_malloc_trim_r+0xe0>
10101ca8:	00c40474 	movhi	r3,4113
10101cac:	18d2b604 	addi	r3,r3,19160
10101cb0:	18800017 	ldw	r2,0(r3)
10101cb4:	99000217 	ldw	r4,8(r19)
10101cb8:	8c23c83a 	sub	r17,r17,r16
10101cbc:	8c400054 	ori	r17,r17,1
10101cc0:	1421c83a 	sub	r16,r2,r16
10101cc4:	24400115 	stw	r17,4(r4)
10101cc8:	9009883a 	mov	r4,r18
10101ccc:	1c000015 	stw	r16,0(r3)
10101cd0:	010e9c00 	call	1010e9c0 <__malloc_unlock>
10101cd4:	00800044 	movi	r2,1
10101cd8:	003fe706 	br	10101c78 <__alt_data_end+0xfffe1c78>
10101cdc:	000b883a 	mov	r5,zero
10101ce0:	9009883a 	mov	r4,r18
10101ce4:	010359c0 	call	1010359c <_sbrk_r>
10101ce8:	99000217 	ldw	r4,8(r19)
10101cec:	014003c4 	movi	r5,15
10101cf0:	1107c83a 	sub	r3,r2,r4
10101cf4:	28ffdd0e 	bge	r5,r3,10101c6c <__alt_data_end+0xfffe1c6c>
10101cf8:	01440474 	movhi	r5,4113
10101cfc:	294bb104 	addi	r5,r5,11972
10101d00:	29400017 	ldw	r5,0(r5)
10101d04:	18c00054 	ori	r3,r3,1
10101d08:	20c00115 	stw	r3,4(r4)
10101d0c:	00c40474 	movhi	r3,4113
10101d10:	1145c83a 	sub	r2,r2,r5
10101d14:	18d2b604 	addi	r3,r3,19160
10101d18:	18800015 	stw	r2,0(r3)
10101d1c:	003fd306 	br	10101c6c <__alt_data_end+0xfffe1c6c>

10101d20 <_free_r>:
10101d20:	28004126 	beq	r5,zero,10101e28 <_free_r+0x108>
10101d24:	defffd04 	addi	sp,sp,-12
10101d28:	dc400115 	stw	r17,4(sp)
10101d2c:	dc000015 	stw	r16,0(sp)
10101d30:	2023883a 	mov	r17,r4
10101d34:	2821883a 	mov	r16,r5
10101d38:	dfc00215 	stw	ra,8(sp)
10101d3c:	010e99c0 	call	1010e99c <__malloc_lock>
10101d40:	81ffff17 	ldw	r7,-4(r16)
10101d44:	00bfff84 	movi	r2,-2
10101d48:	01040474 	movhi	r4,4113
10101d4c:	81bffe04 	addi	r6,r16,-8
10101d50:	3884703a 	and	r2,r7,r2
10101d54:	21060304 	addi	r4,r4,6156
10101d58:	308b883a 	add	r5,r6,r2
10101d5c:	2a400117 	ldw	r9,4(r5)
10101d60:	22000217 	ldw	r8,8(r4)
10101d64:	00ffff04 	movi	r3,-4
10101d68:	48c6703a 	and	r3,r9,r3
10101d6c:	2a005726 	beq	r5,r8,10101ecc <_free_r+0x1ac>
10101d70:	28c00115 	stw	r3,4(r5)
10101d74:	39c0004c 	andi	r7,r7,1
10101d78:	3800091e 	bne	r7,zero,10101da0 <_free_r+0x80>
10101d7c:	823ffe17 	ldw	r8,-8(r16)
10101d80:	22400204 	addi	r9,r4,8
10101d84:	320dc83a 	sub	r6,r6,r8
10101d88:	31c00217 	ldw	r7,8(r6)
10101d8c:	1205883a 	add	r2,r2,r8
10101d90:	3a406526 	beq	r7,r9,10101f28 <_free_r+0x208>
10101d94:	32000317 	ldw	r8,12(r6)
10101d98:	3a000315 	stw	r8,12(r7)
10101d9c:	41c00215 	stw	r7,8(r8)
10101da0:	28cf883a 	add	r7,r5,r3
10101da4:	39c00117 	ldw	r7,4(r7)
10101da8:	39c0004c 	andi	r7,r7,1
10101dac:	38003a26 	beq	r7,zero,10101e98 <_free_r+0x178>
10101db0:	10c00054 	ori	r3,r2,1
10101db4:	30c00115 	stw	r3,4(r6)
10101db8:	3087883a 	add	r3,r6,r2
10101dbc:	18800015 	stw	r2,0(r3)
10101dc0:	00c07fc4 	movi	r3,511
10101dc4:	18801936 	bltu	r3,r2,10101e2c <_free_r+0x10c>
10101dc8:	1004d0fa 	srli	r2,r2,3
10101dcc:	01c00044 	movi	r7,1
10101dd0:	21400117 	ldw	r5,4(r4)
10101dd4:	10c00044 	addi	r3,r2,1
10101dd8:	18c7883a 	add	r3,r3,r3
10101ddc:	1005d0ba 	srai	r2,r2,2
10101de0:	18c7883a 	add	r3,r3,r3
10101de4:	18c7883a 	add	r3,r3,r3
10101de8:	1907883a 	add	r3,r3,r4
10101dec:	3884983a 	sll	r2,r7,r2
10101df0:	19c00017 	ldw	r7,0(r3)
10101df4:	1a3ffe04 	addi	r8,r3,-8
10101df8:	1144b03a 	or	r2,r2,r5
10101dfc:	32000315 	stw	r8,12(r6)
10101e00:	31c00215 	stw	r7,8(r6)
10101e04:	20800115 	stw	r2,4(r4)
10101e08:	19800015 	stw	r6,0(r3)
10101e0c:	39800315 	stw	r6,12(r7)
10101e10:	8809883a 	mov	r4,r17
10101e14:	dfc00217 	ldw	ra,8(sp)
10101e18:	dc400117 	ldw	r17,4(sp)
10101e1c:	dc000017 	ldw	r16,0(sp)
10101e20:	dec00304 	addi	sp,sp,12
10101e24:	010e9c01 	jmpi	1010e9c0 <__malloc_unlock>
10101e28:	f800283a 	ret
10101e2c:	100ad27a 	srli	r5,r2,9
10101e30:	00c00104 	movi	r3,4
10101e34:	19404a36 	bltu	r3,r5,10101f60 <_free_r+0x240>
10101e38:	100ad1ba 	srli	r5,r2,6
10101e3c:	28c00e44 	addi	r3,r5,57
10101e40:	18c7883a 	add	r3,r3,r3
10101e44:	29400e04 	addi	r5,r5,56
10101e48:	18c7883a 	add	r3,r3,r3
10101e4c:	18c7883a 	add	r3,r3,r3
10101e50:	1909883a 	add	r4,r3,r4
10101e54:	20c00017 	ldw	r3,0(r4)
10101e58:	01c40474 	movhi	r7,4113
10101e5c:	213ffe04 	addi	r4,r4,-8
10101e60:	39c60304 	addi	r7,r7,6156
10101e64:	20c04426 	beq	r4,r3,10101f78 <_free_r+0x258>
10101e68:	01ffff04 	movi	r7,-4
10101e6c:	19400117 	ldw	r5,4(r3)
10101e70:	29ca703a 	and	r5,r5,r7
10101e74:	1140022e 	bgeu	r2,r5,10101e80 <_free_r+0x160>
10101e78:	18c00217 	ldw	r3,8(r3)
10101e7c:	20fffb1e 	bne	r4,r3,10101e6c <__alt_data_end+0xfffe1e6c>
10101e80:	19000317 	ldw	r4,12(r3)
10101e84:	31000315 	stw	r4,12(r6)
10101e88:	30c00215 	stw	r3,8(r6)
10101e8c:	21800215 	stw	r6,8(r4)
10101e90:	19800315 	stw	r6,12(r3)
10101e94:	003fde06 	br	10101e10 <__alt_data_end+0xfffe1e10>
10101e98:	29c00217 	ldw	r7,8(r5)
10101e9c:	10c5883a 	add	r2,r2,r3
10101ea0:	00c40474 	movhi	r3,4113
10101ea4:	18c60504 	addi	r3,r3,6164
10101ea8:	38c03b26 	beq	r7,r3,10101f98 <_free_r+0x278>
10101eac:	2a000317 	ldw	r8,12(r5)
10101eb0:	11400054 	ori	r5,r2,1
10101eb4:	3087883a 	add	r3,r6,r2
10101eb8:	3a000315 	stw	r8,12(r7)
10101ebc:	41c00215 	stw	r7,8(r8)
10101ec0:	31400115 	stw	r5,4(r6)
10101ec4:	18800015 	stw	r2,0(r3)
10101ec8:	003fbd06 	br	10101dc0 <__alt_data_end+0xfffe1dc0>
10101ecc:	39c0004c 	andi	r7,r7,1
10101ed0:	10c5883a 	add	r2,r2,r3
10101ed4:	3800071e 	bne	r7,zero,10101ef4 <_free_r+0x1d4>
10101ed8:	81fffe17 	ldw	r7,-8(r16)
10101edc:	31cdc83a 	sub	r6,r6,r7
10101ee0:	30c00317 	ldw	r3,12(r6)
10101ee4:	31400217 	ldw	r5,8(r6)
10101ee8:	11c5883a 	add	r2,r2,r7
10101eec:	28c00315 	stw	r3,12(r5)
10101ef0:	19400215 	stw	r5,8(r3)
10101ef4:	10c00054 	ori	r3,r2,1
10101ef8:	30c00115 	stw	r3,4(r6)
10101efc:	00c40474 	movhi	r3,4113
10101f00:	18cbb204 	addi	r3,r3,11976
10101f04:	18c00017 	ldw	r3,0(r3)
10101f08:	21800215 	stw	r6,8(r4)
10101f0c:	10ffc036 	bltu	r2,r3,10101e10 <__alt_data_end+0xfffe1e10>
10101f10:	00840474 	movhi	r2,4113
10101f14:	1092ab04 	addi	r2,r2,19116
10101f18:	11400017 	ldw	r5,0(r2)
10101f1c:	8809883a 	mov	r4,r17
10101f20:	0101bfc0 	call	10101bfc <_malloc_trim_r>
10101f24:	003fba06 	br	10101e10 <__alt_data_end+0xfffe1e10>
10101f28:	28c9883a 	add	r4,r5,r3
10101f2c:	21000117 	ldw	r4,4(r4)
10101f30:	2100004c 	andi	r4,r4,1
10101f34:	2000391e 	bne	r4,zero,1010201c <_free_r+0x2fc>
10101f38:	29c00217 	ldw	r7,8(r5)
10101f3c:	29000317 	ldw	r4,12(r5)
10101f40:	1885883a 	add	r2,r3,r2
10101f44:	10c00054 	ori	r3,r2,1
10101f48:	39000315 	stw	r4,12(r7)
10101f4c:	21c00215 	stw	r7,8(r4)
10101f50:	30c00115 	stw	r3,4(r6)
10101f54:	308d883a 	add	r6,r6,r2
10101f58:	30800015 	stw	r2,0(r6)
10101f5c:	003fac06 	br	10101e10 <__alt_data_end+0xfffe1e10>
10101f60:	00c00504 	movi	r3,20
10101f64:	19401536 	bltu	r3,r5,10101fbc <_free_r+0x29c>
10101f68:	28c01704 	addi	r3,r5,92
10101f6c:	18c7883a 	add	r3,r3,r3
10101f70:	294016c4 	addi	r5,r5,91
10101f74:	003fb406 	br	10101e48 <__alt_data_end+0xfffe1e48>
10101f78:	280bd0ba 	srai	r5,r5,2
10101f7c:	00c00044 	movi	r3,1
10101f80:	38800117 	ldw	r2,4(r7)
10101f84:	194a983a 	sll	r5,r3,r5
10101f88:	2007883a 	mov	r3,r4
10101f8c:	2884b03a 	or	r2,r5,r2
10101f90:	38800115 	stw	r2,4(r7)
10101f94:	003fbb06 	br	10101e84 <__alt_data_end+0xfffe1e84>
10101f98:	21800515 	stw	r6,20(r4)
10101f9c:	21800415 	stw	r6,16(r4)
10101fa0:	10c00054 	ori	r3,r2,1
10101fa4:	31c00315 	stw	r7,12(r6)
10101fa8:	31c00215 	stw	r7,8(r6)
10101fac:	30c00115 	stw	r3,4(r6)
10101fb0:	308d883a 	add	r6,r6,r2
10101fb4:	30800015 	stw	r2,0(r6)
10101fb8:	003f9506 	br	10101e10 <__alt_data_end+0xfffe1e10>
10101fbc:	00c01504 	movi	r3,84
10101fc0:	19400536 	bltu	r3,r5,10101fd8 <_free_r+0x2b8>
10101fc4:	100ad33a 	srli	r5,r2,12
10101fc8:	28c01bc4 	addi	r3,r5,111
10101fcc:	18c7883a 	add	r3,r3,r3
10101fd0:	29401b84 	addi	r5,r5,110
10101fd4:	003f9c06 	br	10101e48 <__alt_data_end+0xfffe1e48>
10101fd8:	00c05504 	movi	r3,340
10101fdc:	19400536 	bltu	r3,r5,10101ff4 <_free_r+0x2d4>
10101fe0:	100ad3fa 	srli	r5,r2,15
10101fe4:	28c01e04 	addi	r3,r5,120
10101fe8:	18c7883a 	add	r3,r3,r3
10101fec:	29401dc4 	addi	r5,r5,119
10101ff0:	003f9506 	br	10101e48 <__alt_data_end+0xfffe1e48>
10101ff4:	00c15504 	movi	r3,1364
10101ff8:	19400536 	bltu	r3,r5,10102010 <_free_r+0x2f0>
10101ffc:	100ad4ba 	srli	r5,r2,18
10102000:	28c01f44 	addi	r3,r5,125
10102004:	18c7883a 	add	r3,r3,r3
10102008:	29401f04 	addi	r5,r5,124
1010200c:	003f8e06 	br	10101e48 <__alt_data_end+0xfffe1e48>
10102010:	00c03f84 	movi	r3,254
10102014:	01401f84 	movi	r5,126
10102018:	003f8b06 	br	10101e48 <__alt_data_end+0xfffe1e48>
1010201c:	10c00054 	ori	r3,r2,1
10102020:	30c00115 	stw	r3,4(r6)
10102024:	308d883a 	add	r6,r6,r2
10102028:	30800015 	stw	r2,0(r6)
1010202c:	003f7806 	br	10101e10 <__alt_data_end+0xfffe1e10>

10102030 <_fseek_r>:
10102030:	01020501 	jmpi	10102050 <_fseeko_r>

10102034 <fseek>:
10102034:	00840474 	movhi	r2,4113
10102038:	108bb004 	addi	r2,r2,11968
1010203c:	300f883a 	mov	r7,r6
10102040:	280d883a 	mov	r6,r5
10102044:	200b883a 	mov	r5,r4
10102048:	11000017 	ldw	r4,0(r2)
1010204c:	01020501 	jmpi	10102050 <_fseeko_r>

10102050 <_fseeko_r>:
10102050:	deffe804 	addi	sp,sp,-96
10102054:	dd401415 	stw	r21,80(sp)
10102058:	dc801115 	stw	r18,68(sp)
1010205c:	dc401015 	stw	r17,64(sp)
10102060:	dc000f15 	stw	r16,60(sp)
10102064:	dfc01715 	stw	ra,92(sp)
10102068:	ddc01615 	stw	r23,88(sp)
1010206c:	dd801515 	stw	r22,84(sp)
10102070:	dd001315 	stw	r20,76(sp)
10102074:	dcc01215 	stw	r19,72(sp)
10102078:	2023883a 	mov	r17,r4
1010207c:	2821883a 	mov	r16,r5
10102080:	302b883a 	mov	r21,r6
10102084:	3825883a 	mov	r18,r7
10102088:	20000226 	beq	r4,zero,10102094 <_fseeko_r+0x44>
1010208c:	20800e17 	ldw	r2,56(r4)
10102090:	10005a26 	beq	r2,zero,101021fc <_fseeko_r+0x1ac>
10102094:	8080030b 	ldhu	r2,12(r16)
10102098:	00c04204 	movi	r3,264
1010209c:	1080420c 	andi	r2,r2,264
101020a0:	10c05b26 	beq	r2,r3,10102210 <_fseeko_r+0x1c0>
101020a4:	85000a17 	ldw	r20,40(r16)
101020a8:	a000f626 	beq	r20,zero,10102484 <_fseeko_r+0x434>
101020ac:	00800044 	movi	r2,1
101020b0:	90803e26 	beq	r18,r2,101021ac <_fseeko_r+0x15c>
101020b4:	00800084 	movi	r2,2
101020b8:	90801026 	beq	r18,r2,101020fc <_fseeko_r+0xac>
101020bc:	90000f26 	beq	r18,zero,101020fc <_fseeko_r+0xac>
101020c0:	00800584 	movi	r2,22
101020c4:	88800015 	stw	r2,0(r17)
101020c8:	04ffffc4 	movi	r19,-1
101020cc:	9805883a 	mov	r2,r19
101020d0:	dfc01717 	ldw	ra,92(sp)
101020d4:	ddc01617 	ldw	r23,88(sp)
101020d8:	dd801517 	ldw	r22,84(sp)
101020dc:	dd401417 	ldw	r21,80(sp)
101020e0:	dd001317 	ldw	r20,76(sp)
101020e4:	dcc01217 	ldw	r19,72(sp)
101020e8:	dc801117 	ldw	r18,68(sp)
101020ec:	dc401017 	ldw	r17,64(sp)
101020f0:	dc000f17 	ldw	r16,60(sp)
101020f4:	dec01804 	addi	sp,sp,96
101020f8:	f800283a 	ret
101020fc:	80800417 	ldw	r2,16(r16)
10102100:	002f883a 	mov	r23,zero
10102104:	0027883a 	mov	r19,zero
10102108:	1000cb26 	beq	r2,zero,10102438 <_fseeko_r+0x3e8>
1010210c:	8080030b 	ldhu	r2,12(r16)
10102110:	10c2068c 	andi	r3,r2,2074
10102114:	1800071e 	bne	r3,zero,10102134 <_fseeko_r+0xe4>
10102118:	10c1000c 	andi	r3,r2,1024
1010211c:	1800451e 	bne	r3,zero,10102234 <_fseeko_r+0x1e4>
10102120:	00c40434 	movhi	r3,4112
10102124:	18cdb204 	addi	r3,r3,14024
10102128:	a0c0b726 	beq	r20,r3,10102408 <_fseeko_r+0x3b8>
1010212c:	10820014 	ori	r2,r2,2048
10102130:	8080030d 	sth	r2,12(r16)
10102134:	800b883a 	mov	r5,r16
10102138:	8809883a 	mov	r4,r17
1010213c:	01015cc0 	call	101015cc <_fflush_r>
10102140:	1027883a 	mov	r19,r2
10102144:	103fe01e 	bne	r2,zero,101020c8 <__alt_data_end+0xfffe20c8>
10102148:	81400717 	ldw	r5,28(r16)
1010214c:	900f883a 	mov	r7,r18
10102150:	a80d883a 	mov	r6,r21
10102154:	8809883a 	mov	r4,r17
10102158:	a03ee83a 	callr	r20
1010215c:	00ffffc4 	movi	r3,-1
10102160:	10ffd926 	beq	r2,r3,101020c8 <__alt_data_end+0xfffe20c8>
10102164:	81400c17 	ldw	r5,48(r16)
10102168:	28000526 	beq	r5,zero,10102180 <_fseeko_r+0x130>
1010216c:	80801004 	addi	r2,r16,64
10102170:	28800226 	beq	r5,r2,1010217c <_fseeko_r+0x12c>
10102174:	8809883a 	mov	r4,r17
10102178:	0101d200 	call	10101d20 <_free_r>
1010217c:	80000c15 	stw	zero,48(r16)
10102180:	8080030b 	ldhu	r2,12(r16)
10102184:	80c00417 	ldw	r3,16(r16)
10102188:	80000115 	stw	zero,4(r16)
1010218c:	10bdf7cc 	andi	r2,r2,63455
10102190:	80c00015 	stw	r3,0(r16)
10102194:	8080030d 	sth	r2,12(r16)
10102198:	01800204 	movi	r6,8
1010219c:	000b883a 	mov	r5,zero
101021a0:	81001704 	addi	r4,r16,92
101021a4:	010305c0 	call	1010305c <memset>
101021a8:	003fc806 	br	101020cc <__alt_data_end+0xfffe20cc>
101021ac:	800b883a 	mov	r5,r16
101021b0:	8809883a 	mov	r4,r17
101021b4:	01015cc0 	call	101015cc <_fflush_r>
101021b8:	8080030b 	ldhu	r2,12(r16)
101021bc:	10c4000c 	andi	r3,r2,4096
101021c0:	18008726 	beq	r3,zero,101023e0 <_fseeko_r+0x390>
101021c4:	84c01417 	ldw	r19,80(r16)
101021c8:	10c0010c 	andi	r3,r2,4
101021cc:	1800431e 	bne	r3,zero,101022dc <_fseeko_r+0x28c>
101021d0:	1080020c 	andi	r2,r2,8
101021d4:	10008026 	beq	r2,zero,101023d8 <_fseeko_r+0x388>
101021d8:	80c00017 	ldw	r3,0(r16)
101021dc:	80800417 	ldw	r2,16(r16)
101021e0:	18000226 	beq	r3,zero,101021ec <_fseeko_r+0x19c>
101021e4:	1887c83a 	sub	r3,r3,r2
101021e8:	98e7883a 	add	r19,r19,r3
101021ec:	aceb883a 	add	r21,r21,r19
101021f0:	05c00044 	movi	r23,1
101021f4:	0025883a 	mov	r18,zero
101021f8:	003fc306 	br	10102108 <__alt_data_end+0xfffe2108>
101021fc:	0101aa00 	call	10101aa0 <__sinit>
10102200:	8080030b 	ldhu	r2,12(r16)
10102204:	00c04204 	movi	r3,264
10102208:	1080420c 	andi	r2,r2,264
1010220c:	10ffa51e 	bne	r2,r3,101020a4 <__alt_data_end+0xfffe20a4>
10102210:	800b883a 	mov	r5,r16
10102214:	8809883a 	mov	r4,r17
10102218:	01015cc0 	call	101015cc <_fflush_r>
1010221c:	003fa106 	br	101020a4 <__alt_data_end+0xfffe20a4>
10102220:	8080030b 	ldhu	r2,12(r16)
10102224:	00c10004 	movi	r3,1024
10102228:	80c01315 	stw	r3,76(r16)
1010222c:	10c4b03a 	or	r2,r2,r3
10102230:	8080030d 	sth	r2,12(r16)
10102234:	9000311e 	bne	r18,zero,101022fc <_fseeko_r+0x2ac>
10102238:	a82d883a 	mov	r22,r21
1010223c:	b800371e 	bne	r23,zero,1010231c <_fseeko_r+0x2cc>
10102240:	8080030b 	ldhu	r2,12(r16)
10102244:	1084000c 	andi	r2,r2,4096
10102248:	10007f26 	beq	r2,zero,10102448 <_fseeko_r+0x3f8>
1010224c:	80801417 	ldw	r2,80(r16)
10102250:	81800117 	ldw	r6,4(r16)
10102254:	81400c17 	ldw	r5,48(r16)
10102258:	11a7c83a 	sub	r19,r2,r6
1010225c:	28008226 	beq	r5,zero,10102468 <_fseeko_r+0x418>
10102260:	81c00f17 	ldw	r7,60(r16)
10102264:	99e7c83a 	sub	r19,r19,r7
10102268:	81000e17 	ldw	r4,56(r16)
1010226c:	80800417 	ldw	r2,16(r16)
10102270:	99a7883a 	add	r19,r19,r6
10102274:	2087c83a 	sub	r3,r4,r2
10102278:	98e7c83a 	sub	r19,r19,r3
1010227c:	38c7883a 	add	r3,r7,r3
10102280:	b4c02b16 	blt	r22,r19,10102330 <_fseeko_r+0x2e0>
10102284:	98c9883a 	add	r4,r19,r3
10102288:	b100292e 	bgeu	r22,r4,10102330 <_fseeko_r+0x2e0>
1010228c:	b4e7c83a 	sub	r19,r22,r19
10102290:	14c5883a 	add	r2,r2,r19
10102294:	1ce7c83a 	sub	r19,r3,r19
10102298:	80800015 	stw	r2,0(r16)
1010229c:	84c00115 	stw	r19,4(r16)
101022a0:	28000526 	beq	r5,zero,101022b8 <_fseeko_r+0x268>
101022a4:	80801004 	addi	r2,r16,64
101022a8:	28800226 	beq	r5,r2,101022b4 <_fseeko_r+0x264>
101022ac:	8809883a 	mov	r4,r17
101022b0:	0101d200 	call	10101d20 <_free_r>
101022b4:	80000c15 	stw	zero,48(r16)
101022b8:	8080030b 	ldhu	r2,12(r16)
101022bc:	01800204 	movi	r6,8
101022c0:	000b883a 	mov	r5,zero
101022c4:	10bff7cc 	andi	r2,r2,65503
101022c8:	8080030d 	sth	r2,12(r16)
101022cc:	81001704 	addi	r4,r16,92
101022d0:	010305c0 	call	1010305c <memset>
101022d4:	0027883a 	mov	r19,zero
101022d8:	003f7c06 	br	101020cc <__alt_data_end+0xfffe20cc>
101022dc:	80c00117 	ldw	r3,4(r16)
101022e0:	80800c17 	ldw	r2,48(r16)
101022e4:	98e7c83a 	sub	r19,r19,r3
101022e8:	10003b26 	beq	r2,zero,101023d8 <_fseeko_r+0x388>
101022ec:	80c00f17 	ldw	r3,60(r16)
101022f0:	80800417 	ldw	r2,16(r16)
101022f4:	98e7c83a 	sub	r19,r19,r3
101022f8:	003fbc06 	br	101021ec <__alt_data_end+0xfffe21ec>
101022fc:	8140038f 	ldh	r5,14(r16)
10102300:	d80d883a 	mov	r6,sp
10102304:	8809883a 	mov	r4,r17
10102308:	01024b00 	call	101024b0 <_fstat_r>
1010230c:	103f891e 	bne	r2,zero,10102134 <__alt_data_end+0xfffe2134>
10102310:	dd800417 	ldw	r22,16(sp)
10102314:	adad883a 	add	r22,r21,r22
10102318:	b83fc926 	beq	r23,zero,10102240 <__alt_data_end+0xfffe2240>
1010231c:	81400c17 	ldw	r5,48(r16)
10102320:	81800117 	ldw	r6,4(r16)
10102324:	28005026 	beq	r5,zero,10102468 <_fseeko_r+0x418>
10102328:	81c00f17 	ldw	r7,60(r16)
1010232c:	003fce06 	br	10102268 <__alt_data_end+0xfffe2268>
10102330:	84c01317 	ldw	r19,76(r16)
10102334:	81400717 	ldw	r5,28(r16)
10102338:	000f883a 	mov	r7,zero
1010233c:	04e7c83a 	sub	r19,zero,r19
10102340:	9da6703a 	and	r19,r19,r22
10102344:	980d883a 	mov	r6,r19
10102348:	8809883a 	mov	r4,r17
1010234c:	a03ee83a 	callr	r20
10102350:	00ffffc4 	movi	r3,-1
10102354:	10ff7726 	beq	r2,r3,10102134 <__alt_data_end+0xfffe2134>
10102358:	80800417 	ldw	r2,16(r16)
1010235c:	81400c17 	ldw	r5,48(r16)
10102360:	80000115 	stw	zero,4(r16)
10102364:	80800015 	stw	r2,0(r16)
10102368:	28000526 	beq	r5,zero,10102380 <_fseeko_r+0x330>
1010236c:	80801004 	addi	r2,r16,64
10102370:	28800226 	beq	r5,r2,1010237c <_fseeko_r+0x32c>
10102374:	8809883a 	mov	r4,r17
10102378:	0101d200 	call	10101d20 <_free_r>
1010237c:	80000c15 	stw	zero,48(r16)
10102380:	8080030b 	ldhu	r2,12(r16)
10102384:	b4e7c83a 	sub	r19,r22,r19
10102388:	10bff7cc 	andi	r2,r2,65503
1010238c:	8080030d 	sth	r2,12(r16)
10102390:	98000b26 	beq	r19,zero,101023c0 <_fseeko_r+0x370>
10102394:	800b883a 	mov	r5,r16
10102398:	8809883a 	mov	r4,r17
1010239c:	01033400 	call	10103340 <__srefill_r>
101023a0:	103f641e 	bne	r2,zero,10102134 <__alt_data_end+0xfffe2134>
101023a4:	80800117 	ldw	r2,4(r16)
101023a8:	14ff6236 	bltu	r2,r19,10102134 <__alt_data_end+0xfffe2134>
101023ac:	80c00017 	ldw	r3,0(r16)
101023b0:	14c5c83a 	sub	r2,r2,r19
101023b4:	80800115 	stw	r2,4(r16)
101023b8:	1ce7883a 	add	r19,r3,r19
101023bc:	84c00015 	stw	r19,0(r16)
101023c0:	01800204 	movi	r6,8
101023c4:	000b883a 	mov	r5,zero
101023c8:	81001704 	addi	r4,r16,92
101023cc:	010305c0 	call	1010305c <memset>
101023d0:	0027883a 	mov	r19,zero
101023d4:	003f3d06 	br	101020cc <__alt_data_end+0xfffe20cc>
101023d8:	80800417 	ldw	r2,16(r16)
101023dc:	003f8306 	br	101021ec <__alt_data_end+0xfffe21ec>
101023e0:	81400717 	ldw	r5,28(r16)
101023e4:	900f883a 	mov	r7,r18
101023e8:	000d883a 	mov	r6,zero
101023ec:	8809883a 	mov	r4,r17
101023f0:	a03ee83a 	callr	r20
101023f4:	1027883a 	mov	r19,r2
101023f8:	00bfffc4 	movi	r2,-1
101023fc:	98bf3226 	beq	r19,r2,101020c8 <__alt_data_end+0xfffe20c8>
10102400:	8080030b 	ldhu	r2,12(r16)
10102404:	003f7006 	br	101021c8 <__alt_data_end+0xfffe21c8>
10102408:	8140038f 	ldh	r5,14(r16)
1010240c:	283f4716 	blt	r5,zero,1010212c <__alt_data_end+0xfffe212c>
10102410:	d80d883a 	mov	r6,sp
10102414:	8809883a 	mov	r4,r17
10102418:	01024b00 	call	101024b0 <_fstat_r>
1010241c:	1000041e 	bne	r2,zero,10102430 <_fseeko_r+0x3e0>
10102420:	d8800117 	ldw	r2,4(sp)
10102424:	00e00014 	movui	r3,32768
10102428:	10bc000c 	andi	r2,r2,61440
1010242c:	10ff7c26 	beq	r2,r3,10102220 <__alt_data_end+0xfffe2220>
10102430:	8080030b 	ldhu	r2,12(r16)
10102434:	003f3d06 	br	1010212c <__alt_data_end+0xfffe212c>
10102438:	800b883a 	mov	r5,r16
1010243c:	8809883a 	mov	r4,r17
10102440:	01026940 	call	10102694 <__smakebuf_r>
10102444:	003f3106 	br	1010210c <__alt_data_end+0xfffe210c>
10102448:	81400717 	ldw	r5,28(r16)
1010244c:	01c00044 	movi	r7,1
10102450:	000d883a 	mov	r6,zero
10102454:	8809883a 	mov	r4,r17
10102458:	a03ee83a 	callr	r20
1010245c:	00ffffc4 	movi	r3,-1
10102460:	10ff7b1e 	bne	r2,r3,10102250 <__alt_data_end+0xfffe2250>
10102464:	003f3306 	br	10102134 <__alt_data_end+0xfffe2134>
10102468:	80c00017 	ldw	r3,0(r16)
1010246c:	80800417 	ldw	r2,16(r16)
10102470:	000b883a 	mov	r5,zero
10102474:	1887c83a 	sub	r3,r3,r2
10102478:	98e7c83a 	sub	r19,r19,r3
1010247c:	30c7883a 	add	r3,r6,r3
10102480:	003f7f06 	br	10102280 <__alt_data_end+0xfffe2280>
10102484:	00800744 	movi	r2,29
10102488:	88800015 	stw	r2,0(r17)
1010248c:	04ffffc4 	movi	r19,-1
10102490:	003f0e06 	br	101020cc <__alt_data_end+0xfffe20cc>

10102494 <fseeko>:
10102494:	00840474 	movhi	r2,4113
10102498:	108bb004 	addi	r2,r2,11968
1010249c:	300f883a 	mov	r7,r6
101024a0:	280d883a 	mov	r6,r5
101024a4:	200b883a 	mov	r5,r4
101024a8:	11000017 	ldw	r4,0(r2)
101024ac:	01020501 	jmpi	10102050 <_fseeko_r>

101024b0 <_fstat_r>:
101024b0:	defffd04 	addi	sp,sp,-12
101024b4:	2805883a 	mov	r2,r5
101024b8:	dc000015 	stw	r16,0(sp)
101024bc:	04040474 	movhi	r16,4113
101024c0:	dc400115 	stw	r17,4(sp)
101024c4:	8412a804 	addi	r16,r16,19104
101024c8:	2023883a 	mov	r17,r4
101024cc:	300b883a 	mov	r5,r6
101024d0:	1009883a 	mov	r4,r2
101024d4:	dfc00215 	stw	ra,8(sp)
101024d8:	80000015 	stw	zero,0(r16)
101024dc:	010e5940 	call	1010e594 <fstat>
101024e0:	00ffffc4 	movi	r3,-1
101024e4:	10c00526 	beq	r2,r3,101024fc <_fstat_r+0x4c>
101024e8:	dfc00217 	ldw	ra,8(sp)
101024ec:	dc400117 	ldw	r17,4(sp)
101024f0:	dc000017 	ldw	r16,0(sp)
101024f4:	dec00304 	addi	sp,sp,12
101024f8:	f800283a 	ret
101024fc:	80c00017 	ldw	r3,0(r16)
10102500:	183ff926 	beq	r3,zero,101024e8 <__alt_data_end+0xfffe24e8>
10102504:	88c00015 	stw	r3,0(r17)
10102508:	003ff706 	br	101024e8 <__alt_data_end+0xfffe24e8>

1010250c <_fwalk>:
1010250c:	defff704 	addi	sp,sp,-36
10102510:	dd000415 	stw	r20,16(sp)
10102514:	dfc00815 	stw	ra,32(sp)
10102518:	ddc00715 	stw	r23,28(sp)
1010251c:	dd800615 	stw	r22,24(sp)
10102520:	dd400515 	stw	r21,20(sp)
10102524:	dcc00315 	stw	r19,12(sp)
10102528:	dc800215 	stw	r18,8(sp)
1010252c:	dc400115 	stw	r17,4(sp)
10102530:	dc000015 	stw	r16,0(sp)
10102534:	2500b804 	addi	r20,r4,736
10102538:	a0002326 	beq	r20,zero,101025c8 <_fwalk+0xbc>
1010253c:	282b883a 	mov	r21,r5
10102540:	002f883a 	mov	r23,zero
10102544:	05800044 	movi	r22,1
10102548:	04ffffc4 	movi	r19,-1
1010254c:	a4400117 	ldw	r17,4(r20)
10102550:	a4800217 	ldw	r18,8(r20)
10102554:	8c7fffc4 	addi	r17,r17,-1
10102558:	88000d16 	blt	r17,zero,10102590 <_fwalk+0x84>
1010255c:	94000304 	addi	r16,r18,12
10102560:	94800384 	addi	r18,r18,14
10102564:	8080000b 	ldhu	r2,0(r16)
10102568:	8c7fffc4 	addi	r17,r17,-1
1010256c:	813ffd04 	addi	r4,r16,-12
10102570:	b080042e 	bgeu	r22,r2,10102584 <_fwalk+0x78>
10102574:	9080000f 	ldh	r2,0(r18)
10102578:	14c00226 	beq	r2,r19,10102584 <_fwalk+0x78>
1010257c:	a83ee83a 	callr	r21
10102580:	b8aeb03a 	or	r23,r23,r2
10102584:	84001a04 	addi	r16,r16,104
10102588:	94801a04 	addi	r18,r18,104
1010258c:	8cfff51e 	bne	r17,r19,10102564 <__alt_data_end+0xfffe2564>
10102590:	a5000017 	ldw	r20,0(r20)
10102594:	a03fed1e 	bne	r20,zero,1010254c <__alt_data_end+0xfffe254c>
10102598:	b805883a 	mov	r2,r23
1010259c:	dfc00817 	ldw	ra,32(sp)
101025a0:	ddc00717 	ldw	r23,28(sp)
101025a4:	dd800617 	ldw	r22,24(sp)
101025a8:	dd400517 	ldw	r21,20(sp)
101025ac:	dd000417 	ldw	r20,16(sp)
101025b0:	dcc00317 	ldw	r19,12(sp)
101025b4:	dc800217 	ldw	r18,8(sp)
101025b8:	dc400117 	ldw	r17,4(sp)
101025bc:	dc000017 	ldw	r16,0(sp)
101025c0:	dec00904 	addi	sp,sp,36
101025c4:	f800283a 	ret
101025c8:	002f883a 	mov	r23,zero
101025cc:	003ff206 	br	10102598 <__alt_data_end+0xfffe2598>

101025d0 <_fwalk_reent>:
101025d0:	defff704 	addi	sp,sp,-36
101025d4:	dd000415 	stw	r20,16(sp)
101025d8:	dfc00815 	stw	ra,32(sp)
101025dc:	ddc00715 	stw	r23,28(sp)
101025e0:	dd800615 	stw	r22,24(sp)
101025e4:	dd400515 	stw	r21,20(sp)
101025e8:	dcc00315 	stw	r19,12(sp)
101025ec:	dc800215 	stw	r18,8(sp)
101025f0:	dc400115 	stw	r17,4(sp)
101025f4:	dc000015 	stw	r16,0(sp)
101025f8:	2500b804 	addi	r20,r4,736
101025fc:	a0002326 	beq	r20,zero,1010268c <_fwalk_reent+0xbc>
10102600:	282b883a 	mov	r21,r5
10102604:	2027883a 	mov	r19,r4
10102608:	002f883a 	mov	r23,zero
1010260c:	05800044 	movi	r22,1
10102610:	04bfffc4 	movi	r18,-1
10102614:	a4400117 	ldw	r17,4(r20)
10102618:	a4000217 	ldw	r16,8(r20)
1010261c:	8c7fffc4 	addi	r17,r17,-1
10102620:	88000c16 	blt	r17,zero,10102654 <_fwalk_reent+0x84>
10102624:	84000304 	addi	r16,r16,12
10102628:	8080000b 	ldhu	r2,0(r16)
1010262c:	8c7fffc4 	addi	r17,r17,-1
10102630:	817ffd04 	addi	r5,r16,-12
10102634:	b080052e 	bgeu	r22,r2,1010264c <_fwalk_reent+0x7c>
10102638:	8080008f 	ldh	r2,2(r16)
1010263c:	9809883a 	mov	r4,r19
10102640:	14800226 	beq	r2,r18,1010264c <_fwalk_reent+0x7c>
10102644:	a83ee83a 	callr	r21
10102648:	b8aeb03a 	or	r23,r23,r2
1010264c:	84001a04 	addi	r16,r16,104
10102650:	8cbff51e 	bne	r17,r18,10102628 <__alt_data_end+0xfffe2628>
10102654:	a5000017 	ldw	r20,0(r20)
10102658:	a03fee1e 	bne	r20,zero,10102614 <__alt_data_end+0xfffe2614>
1010265c:	b805883a 	mov	r2,r23
10102660:	dfc00817 	ldw	ra,32(sp)
10102664:	ddc00717 	ldw	r23,28(sp)
10102668:	dd800617 	ldw	r22,24(sp)
1010266c:	dd400517 	ldw	r21,20(sp)
10102670:	dd000417 	ldw	r20,16(sp)
10102674:	dcc00317 	ldw	r19,12(sp)
10102678:	dc800217 	ldw	r18,8(sp)
1010267c:	dc400117 	ldw	r17,4(sp)
10102680:	dc000017 	ldw	r16,0(sp)
10102684:	dec00904 	addi	sp,sp,36
10102688:	f800283a 	ret
1010268c:	002f883a 	mov	r23,zero
10102690:	003ff206 	br	1010265c <__alt_data_end+0xfffe265c>

10102694 <__smakebuf_r>:
10102694:	2880030b 	ldhu	r2,12(r5)
10102698:	10c0008c 	andi	r3,r2,2
1010269c:	1800411e 	bne	r3,zero,101027a4 <__smakebuf_r+0x110>
101026a0:	deffec04 	addi	sp,sp,-80
101026a4:	dc000f15 	stw	r16,60(sp)
101026a8:	2821883a 	mov	r16,r5
101026ac:	2940038f 	ldh	r5,14(r5)
101026b0:	dc401015 	stw	r17,64(sp)
101026b4:	dfc01315 	stw	ra,76(sp)
101026b8:	dcc01215 	stw	r19,72(sp)
101026bc:	dc801115 	stw	r18,68(sp)
101026c0:	2023883a 	mov	r17,r4
101026c4:	28001c16 	blt	r5,zero,10102738 <__smakebuf_r+0xa4>
101026c8:	d80d883a 	mov	r6,sp
101026cc:	01024b00 	call	101024b0 <_fstat_r>
101026d0:	10001816 	blt	r2,zero,10102734 <__smakebuf_r+0xa0>
101026d4:	d8800117 	ldw	r2,4(sp)
101026d8:	00e00014 	movui	r3,32768
101026dc:	10bc000c 	andi	r2,r2,61440
101026e0:	14c80020 	cmpeqi	r19,r2,8192
101026e4:	10c03726 	beq	r2,r3,101027c4 <__smakebuf_r+0x130>
101026e8:	80c0030b 	ldhu	r3,12(r16)
101026ec:	18c20014 	ori	r3,r3,2048
101026f0:	80c0030d 	sth	r3,12(r16)
101026f4:	00c80004 	movi	r3,8192
101026f8:	10c0521e 	bne	r2,r3,10102844 <__smakebuf_r+0x1b0>
101026fc:	8140038f 	ldh	r5,14(r16)
10102700:	8809883a 	mov	r4,r17
10102704:	0107a8c0 	call	10107a8c <_isatty_r>
10102708:	10004c26 	beq	r2,zero,1010283c <__smakebuf_r+0x1a8>
1010270c:	8080030b 	ldhu	r2,12(r16)
10102710:	80c010c4 	addi	r3,r16,67
10102714:	80c00015 	stw	r3,0(r16)
10102718:	10800054 	ori	r2,r2,1
1010271c:	8080030d 	sth	r2,12(r16)
10102720:	00800044 	movi	r2,1
10102724:	80c00415 	stw	r3,16(r16)
10102728:	80800515 	stw	r2,20(r16)
1010272c:	04810004 	movi	r18,1024
10102730:	00000706 	br	10102750 <__smakebuf_r+0xbc>
10102734:	8080030b 	ldhu	r2,12(r16)
10102738:	10c0200c 	andi	r3,r2,128
1010273c:	18001f1e 	bne	r3,zero,101027bc <__smakebuf_r+0x128>
10102740:	04810004 	movi	r18,1024
10102744:	10820014 	ori	r2,r2,2048
10102748:	8080030d 	sth	r2,12(r16)
1010274c:	0027883a 	mov	r19,zero
10102750:	900b883a 	mov	r5,r18
10102754:	8809883a 	mov	r4,r17
10102758:	01028500 	call	10102850 <_malloc_r>
1010275c:	10002c26 	beq	r2,zero,10102810 <__smakebuf_r+0x17c>
10102760:	80c0030b 	ldhu	r3,12(r16)
10102764:	01040434 	movhi	r4,4112
10102768:	2105d604 	addi	r4,r4,5976
1010276c:	89000f15 	stw	r4,60(r17)
10102770:	18c02014 	ori	r3,r3,128
10102774:	80c0030d 	sth	r3,12(r16)
10102778:	80800015 	stw	r2,0(r16)
1010277c:	80800415 	stw	r2,16(r16)
10102780:	84800515 	stw	r18,20(r16)
10102784:	98001a1e 	bne	r19,zero,101027f0 <__smakebuf_r+0x15c>
10102788:	dfc01317 	ldw	ra,76(sp)
1010278c:	dcc01217 	ldw	r19,72(sp)
10102790:	dc801117 	ldw	r18,68(sp)
10102794:	dc401017 	ldw	r17,64(sp)
10102798:	dc000f17 	ldw	r16,60(sp)
1010279c:	dec01404 	addi	sp,sp,80
101027a0:	f800283a 	ret
101027a4:	288010c4 	addi	r2,r5,67
101027a8:	28800015 	stw	r2,0(r5)
101027ac:	28800415 	stw	r2,16(r5)
101027b0:	00800044 	movi	r2,1
101027b4:	28800515 	stw	r2,20(r5)
101027b8:	f800283a 	ret
101027bc:	04801004 	movi	r18,64
101027c0:	003fe006 	br	10102744 <__alt_data_end+0xfffe2744>
101027c4:	81000a17 	ldw	r4,40(r16)
101027c8:	00c40434 	movhi	r3,4112
101027cc:	18cdb204 	addi	r3,r3,14024
101027d0:	20ffc51e 	bne	r4,r3,101026e8 <__alt_data_end+0xfffe26e8>
101027d4:	8080030b 	ldhu	r2,12(r16)
101027d8:	04810004 	movi	r18,1024
101027dc:	84801315 	stw	r18,76(r16)
101027e0:	1484b03a 	or	r2,r2,r18
101027e4:	8080030d 	sth	r2,12(r16)
101027e8:	0027883a 	mov	r19,zero
101027ec:	003fd806 	br	10102750 <__alt_data_end+0xfffe2750>
101027f0:	8140038f 	ldh	r5,14(r16)
101027f4:	8809883a 	mov	r4,r17
101027f8:	0107a8c0 	call	10107a8c <_isatty_r>
101027fc:	103fe226 	beq	r2,zero,10102788 <__alt_data_end+0xfffe2788>
10102800:	8080030b 	ldhu	r2,12(r16)
10102804:	10800054 	ori	r2,r2,1
10102808:	8080030d 	sth	r2,12(r16)
1010280c:	003fde06 	br	10102788 <__alt_data_end+0xfffe2788>
10102810:	8080030b 	ldhu	r2,12(r16)
10102814:	10c0800c 	andi	r3,r2,512
10102818:	183fdb1e 	bne	r3,zero,10102788 <__alt_data_end+0xfffe2788>
1010281c:	10800094 	ori	r2,r2,2
10102820:	80c010c4 	addi	r3,r16,67
10102824:	8080030d 	sth	r2,12(r16)
10102828:	00800044 	movi	r2,1
1010282c:	80c00015 	stw	r3,0(r16)
10102830:	80c00415 	stw	r3,16(r16)
10102834:	80800515 	stw	r2,20(r16)
10102838:	003fd306 	br	10102788 <__alt_data_end+0xfffe2788>
1010283c:	04810004 	movi	r18,1024
10102840:	003fc306 	br	10102750 <__alt_data_end+0xfffe2750>
10102844:	0027883a 	mov	r19,zero
10102848:	04810004 	movi	r18,1024
1010284c:	003fc006 	br	10102750 <__alt_data_end+0xfffe2750>

10102850 <_malloc_r>:
10102850:	defff504 	addi	sp,sp,-44
10102854:	dc800315 	stw	r18,12(sp)
10102858:	dfc00a15 	stw	ra,40(sp)
1010285c:	df000915 	stw	fp,36(sp)
10102860:	ddc00815 	stw	r23,32(sp)
10102864:	dd800715 	stw	r22,28(sp)
10102868:	dd400615 	stw	r21,24(sp)
1010286c:	dd000515 	stw	r20,20(sp)
10102870:	dcc00415 	stw	r19,16(sp)
10102874:	dc400215 	stw	r17,8(sp)
10102878:	dc000115 	stw	r16,4(sp)
1010287c:	288002c4 	addi	r2,r5,11
10102880:	00c00584 	movi	r3,22
10102884:	2025883a 	mov	r18,r4
10102888:	18807f2e 	bgeu	r3,r2,10102a88 <_malloc_r+0x238>
1010288c:	047ffe04 	movi	r17,-8
10102890:	1462703a 	and	r17,r2,r17
10102894:	8800a316 	blt	r17,zero,10102b24 <_malloc_r+0x2d4>
10102898:	8940a236 	bltu	r17,r5,10102b24 <_malloc_r+0x2d4>
1010289c:	010e99c0 	call	1010e99c <__malloc_lock>
101028a0:	00807dc4 	movi	r2,503
101028a4:	1441e92e 	bgeu	r2,r17,1010304c <_malloc_r+0x7fc>
101028a8:	8804d27a 	srli	r2,r17,9
101028ac:	1000a126 	beq	r2,zero,10102b34 <_malloc_r+0x2e4>
101028b0:	00c00104 	movi	r3,4
101028b4:	18811e36 	bltu	r3,r2,10102d30 <_malloc_r+0x4e0>
101028b8:	8804d1ba 	srli	r2,r17,6
101028bc:	12000e44 	addi	r8,r2,57
101028c0:	11c00e04 	addi	r7,r2,56
101028c4:	4209883a 	add	r4,r8,r8
101028c8:	04c40474 	movhi	r19,4113
101028cc:	2109883a 	add	r4,r4,r4
101028d0:	9cc60304 	addi	r19,r19,6156
101028d4:	2109883a 	add	r4,r4,r4
101028d8:	9909883a 	add	r4,r19,r4
101028dc:	24000117 	ldw	r16,4(r4)
101028e0:	213ffe04 	addi	r4,r4,-8
101028e4:	24009726 	beq	r4,r16,10102b44 <_malloc_r+0x2f4>
101028e8:	80800117 	ldw	r2,4(r16)
101028ec:	01bfff04 	movi	r6,-4
101028f0:	014003c4 	movi	r5,15
101028f4:	1184703a 	and	r2,r2,r6
101028f8:	1447c83a 	sub	r3,r2,r17
101028fc:	28c00716 	blt	r5,r3,1010291c <_malloc_r+0xcc>
10102900:	1800920e 	bge	r3,zero,10102b4c <_malloc_r+0x2fc>
10102904:	84000317 	ldw	r16,12(r16)
10102908:	24008e26 	beq	r4,r16,10102b44 <_malloc_r+0x2f4>
1010290c:	80800117 	ldw	r2,4(r16)
10102910:	1184703a 	and	r2,r2,r6
10102914:	1447c83a 	sub	r3,r2,r17
10102918:	28fff90e 	bge	r5,r3,10102900 <__alt_data_end+0xfffe2900>
1010291c:	3809883a 	mov	r4,r7
10102920:	01840474 	movhi	r6,4113
10102924:	9c000417 	ldw	r16,16(r19)
10102928:	31860304 	addi	r6,r6,6156
1010292c:	32000204 	addi	r8,r6,8
10102930:	82013426 	beq	r16,r8,10102e04 <_malloc_r+0x5b4>
10102934:	80c00117 	ldw	r3,4(r16)
10102938:	00bfff04 	movi	r2,-4
1010293c:	188e703a 	and	r7,r3,r2
10102940:	3c45c83a 	sub	r2,r7,r17
10102944:	00c003c4 	movi	r3,15
10102948:	18811f16 	blt	r3,r2,10102dc8 <_malloc_r+0x578>
1010294c:	32000515 	stw	r8,20(r6)
10102950:	32000415 	stw	r8,16(r6)
10102954:	10007f0e 	bge	r2,zero,10102b54 <_malloc_r+0x304>
10102958:	00807fc4 	movi	r2,511
1010295c:	11c0fd36 	bltu	r2,r7,10102d54 <_malloc_r+0x504>
10102960:	3806d0fa 	srli	r3,r7,3
10102964:	01c00044 	movi	r7,1
10102968:	30800117 	ldw	r2,4(r6)
1010296c:	19400044 	addi	r5,r3,1
10102970:	294b883a 	add	r5,r5,r5
10102974:	1807d0ba 	srai	r3,r3,2
10102978:	294b883a 	add	r5,r5,r5
1010297c:	294b883a 	add	r5,r5,r5
10102980:	298b883a 	add	r5,r5,r6
10102984:	38c6983a 	sll	r3,r7,r3
10102988:	29c00017 	ldw	r7,0(r5)
1010298c:	2a7ffe04 	addi	r9,r5,-8
10102990:	1886b03a 	or	r3,r3,r2
10102994:	82400315 	stw	r9,12(r16)
10102998:	81c00215 	stw	r7,8(r16)
1010299c:	30c00115 	stw	r3,4(r6)
101029a0:	2c000015 	stw	r16,0(r5)
101029a4:	3c000315 	stw	r16,12(r7)
101029a8:	2005d0ba 	srai	r2,r4,2
101029ac:	01400044 	movi	r5,1
101029b0:	288a983a 	sll	r5,r5,r2
101029b4:	19406f36 	bltu	r3,r5,10102b74 <_malloc_r+0x324>
101029b8:	28c4703a 	and	r2,r5,r3
101029bc:	10000a1e 	bne	r2,zero,101029e8 <_malloc_r+0x198>
101029c0:	00bfff04 	movi	r2,-4
101029c4:	294b883a 	add	r5,r5,r5
101029c8:	2088703a 	and	r4,r4,r2
101029cc:	28c4703a 	and	r2,r5,r3
101029d0:	21000104 	addi	r4,r4,4
101029d4:	1000041e 	bne	r2,zero,101029e8 <_malloc_r+0x198>
101029d8:	294b883a 	add	r5,r5,r5
101029dc:	28c4703a 	and	r2,r5,r3
101029e0:	21000104 	addi	r4,r4,4
101029e4:	103ffc26 	beq	r2,zero,101029d8 <__alt_data_end+0xfffe29d8>
101029e8:	02bfff04 	movi	r10,-4
101029ec:	024003c4 	movi	r9,15
101029f0:	21800044 	addi	r6,r4,1
101029f4:	318d883a 	add	r6,r6,r6
101029f8:	318d883a 	add	r6,r6,r6
101029fc:	318d883a 	add	r6,r6,r6
10102a00:	998d883a 	add	r6,r19,r6
10102a04:	333ffe04 	addi	r12,r6,-8
10102a08:	2017883a 	mov	r11,r4
10102a0c:	31800104 	addi	r6,r6,4
10102a10:	34000017 	ldw	r16,0(r6)
10102a14:	31fffd04 	addi	r7,r6,-12
10102a18:	81c0041e 	bne	r16,r7,10102a2c <_malloc_r+0x1dc>
10102a1c:	0000fb06 	br	10102e0c <_malloc_r+0x5bc>
10102a20:	1801030e 	bge	r3,zero,10102e30 <_malloc_r+0x5e0>
10102a24:	84000317 	ldw	r16,12(r16)
10102a28:	81c0f826 	beq	r16,r7,10102e0c <_malloc_r+0x5bc>
10102a2c:	80800117 	ldw	r2,4(r16)
10102a30:	1284703a 	and	r2,r2,r10
10102a34:	1447c83a 	sub	r3,r2,r17
10102a38:	48fff90e 	bge	r9,r3,10102a20 <__alt_data_end+0xfffe2a20>
10102a3c:	80800317 	ldw	r2,12(r16)
10102a40:	81000217 	ldw	r4,8(r16)
10102a44:	89400054 	ori	r5,r17,1
10102a48:	81400115 	stw	r5,4(r16)
10102a4c:	20800315 	stw	r2,12(r4)
10102a50:	11000215 	stw	r4,8(r2)
10102a54:	8463883a 	add	r17,r16,r17
10102a58:	9c400515 	stw	r17,20(r19)
10102a5c:	9c400415 	stw	r17,16(r19)
10102a60:	18800054 	ori	r2,r3,1
10102a64:	88800115 	stw	r2,4(r17)
10102a68:	8a000315 	stw	r8,12(r17)
10102a6c:	8a000215 	stw	r8,8(r17)
10102a70:	88e3883a 	add	r17,r17,r3
10102a74:	88c00015 	stw	r3,0(r17)
10102a78:	9009883a 	mov	r4,r18
10102a7c:	010e9c00 	call	1010e9c0 <__malloc_unlock>
10102a80:	80800204 	addi	r2,r16,8
10102a84:	00001b06 	br	10102af4 <_malloc_r+0x2a4>
10102a88:	04400404 	movi	r17,16
10102a8c:	89402536 	bltu	r17,r5,10102b24 <_malloc_r+0x2d4>
10102a90:	010e99c0 	call	1010e99c <__malloc_lock>
10102a94:	00800184 	movi	r2,6
10102a98:	01000084 	movi	r4,2
10102a9c:	04c40474 	movhi	r19,4113
10102aa0:	1085883a 	add	r2,r2,r2
10102aa4:	9cc60304 	addi	r19,r19,6156
10102aa8:	1085883a 	add	r2,r2,r2
10102aac:	9885883a 	add	r2,r19,r2
10102ab0:	14000117 	ldw	r16,4(r2)
10102ab4:	10fffe04 	addi	r3,r2,-8
10102ab8:	80c0d926 	beq	r16,r3,10102e20 <_malloc_r+0x5d0>
10102abc:	80c00117 	ldw	r3,4(r16)
10102ac0:	81000317 	ldw	r4,12(r16)
10102ac4:	00bfff04 	movi	r2,-4
10102ac8:	1884703a 	and	r2,r3,r2
10102acc:	81400217 	ldw	r5,8(r16)
10102ad0:	8085883a 	add	r2,r16,r2
10102ad4:	10c00117 	ldw	r3,4(r2)
10102ad8:	29000315 	stw	r4,12(r5)
10102adc:	21400215 	stw	r5,8(r4)
10102ae0:	18c00054 	ori	r3,r3,1
10102ae4:	10c00115 	stw	r3,4(r2)
10102ae8:	9009883a 	mov	r4,r18
10102aec:	010e9c00 	call	1010e9c0 <__malloc_unlock>
10102af0:	80800204 	addi	r2,r16,8
10102af4:	dfc00a17 	ldw	ra,40(sp)
10102af8:	df000917 	ldw	fp,36(sp)
10102afc:	ddc00817 	ldw	r23,32(sp)
10102b00:	dd800717 	ldw	r22,28(sp)
10102b04:	dd400617 	ldw	r21,24(sp)
10102b08:	dd000517 	ldw	r20,20(sp)
10102b0c:	dcc00417 	ldw	r19,16(sp)
10102b10:	dc800317 	ldw	r18,12(sp)
10102b14:	dc400217 	ldw	r17,8(sp)
10102b18:	dc000117 	ldw	r16,4(sp)
10102b1c:	dec00b04 	addi	sp,sp,44
10102b20:	f800283a 	ret
10102b24:	00800304 	movi	r2,12
10102b28:	90800015 	stw	r2,0(r18)
10102b2c:	0005883a 	mov	r2,zero
10102b30:	003ff006 	br	10102af4 <__alt_data_end+0xfffe2af4>
10102b34:	01002004 	movi	r4,128
10102b38:	02001004 	movi	r8,64
10102b3c:	01c00fc4 	movi	r7,63
10102b40:	003f6106 	br	101028c8 <__alt_data_end+0xfffe28c8>
10102b44:	4009883a 	mov	r4,r8
10102b48:	003f7506 	br	10102920 <__alt_data_end+0xfffe2920>
10102b4c:	81000317 	ldw	r4,12(r16)
10102b50:	003fde06 	br	10102acc <__alt_data_end+0xfffe2acc>
10102b54:	81c5883a 	add	r2,r16,r7
10102b58:	11400117 	ldw	r5,4(r2)
10102b5c:	9009883a 	mov	r4,r18
10102b60:	29400054 	ori	r5,r5,1
10102b64:	11400115 	stw	r5,4(r2)
10102b68:	010e9c00 	call	1010e9c0 <__malloc_unlock>
10102b6c:	80800204 	addi	r2,r16,8
10102b70:	003fe006 	br	10102af4 <__alt_data_end+0xfffe2af4>
10102b74:	9c000217 	ldw	r16,8(r19)
10102b78:	00bfff04 	movi	r2,-4
10102b7c:	85800117 	ldw	r22,4(r16)
10102b80:	b0ac703a 	and	r22,r22,r2
10102b84:	b4400336 	bltu	r22,r17,10102b94 <_malloc_r+0x344>
10102b88:	b445c83a 	sub	r2,r22,r17
10102b8c:	00c003c4 	movi	r3,15
10102b90:	18805d16 	blt	r3,r2,10102d08 <_malloc_r+0x4b8>
10102b94:	05c40474 	movhi	r23,4113
10102b98:	00840474 	movhi	r2,4113
10102b9c:	1092ab04 	addi	r2,r2,19116
10102ba0:	bdcbb104 	addi	r23,r23,11972
10102ba4:	15400017 	ldw	r21,0(r2)
10102ba8:	b8c00017 	ldw	r3,0(r23)
10102bac:	00bfffc4 	movi	r2,-1
10102bb0:	858d883a 	add	r6,r16,r22
10102bb4:	8d6b883a 	add	r21,r17,r21
10102bb8:	1880ea26 	beq	r3,r2,10102f64 <_malloc_r+0x714>
10102bbc:	ad4403c4 	addi	r21,r21,4111
10102bc0:	00bc0004 	movi	r2,-4096
10102bc4:	a8aa703a 	and	r21,r21,r2
10102bc8:	a80b883a 	mov	r5,r21
10102bcc:	9009883a 	mov	r4,r18
10102bd0:	d9800015 	stw	r6,0(sp)
10102bd4:	010359c0 	call	1010359c <_sbrk_r>
10102bd8:	1029883a 	mov	r20,r2
10102bdc:	00bfffc4 	movi	r2,-1
10102be0:	d9800017 	ldw	r6,0(sp)
10102be4:	a080e826 	beq	r20,r2,10102f88 <_malloc_r+0x738>
10102be8:	a180a636 	bltu	r20,r6,10102e84 <_malloc_r+0x634>
10102bec:	07040474 	movhi	fp,4113
10102bf0:	e712b604 	addi	fp,fp,19160
10102bf4:	e0800017 	ldw	r2,0(fp)
10102bf8:	a887883a 	add	r3,r21,r2
10102bfc:	e0c00015 	stw	r3,0(fp)
10102c00:	3500e626 	beq	r6,r20,10102f9c <_malloc_r+0x74c>
10102c04:	b9000017 	ldw	r4,0(r23)
10102c08:	00bfffc4 	movi	r2,-1
10102c0c:	2080ee26 	beq	r4,r2,10102fc8 <_malloc_r+0x778>
10102c10:	a185c83a 	sub	r2,r20,r6
10102c14:	10c5883a 	add	r2,r2,r3
10102c18:	e0800015 	stw	r2,0(fp)
10102c1c:	a0c001cc 	andi	r3,r20,7
10102c20:	1800bc26 	beq	r3,zero,10102f14 <_malloc_r+0x6c4>
10102c24:	a0e9c83a 	sub	r20,r20,r3
10102c28:	00840204 	movi	r2,4104
10102c2c:	a5000204 	addi	r20,r20,8
10102c30:	10c7c83a 	sub	r3,r2,r3
10102c34:	a545883a 	add	r2,r20,r21
10102c38:	1083ffcc 	andi	r2,r2,4095
10102c3c:	18abc83a 	sub	r21,r3,r2
10102c40:	a80b883a 	mov	r5,r21
10102c44:	9009883a 	mov	r4,r18
10102c48:	010359c0 	call	1010359c <_sbrk_r>
10102c4c:	00ffffc4 	movi	r3,-1
10102c50:	10c0e126 	beq	r2,r3,10102fd8 <_malloc_r+0x788>
10102c54:	1505c83a 	sub	r2,r2,r20
10102c58:	1545883a 	add	r2,r2,r21
10102c5c:	10800054 	ori	r2,r2,1
10102c60:	e0c00017 	ldw	r3,0(fp)
10102c64:	9d000215 	stw	r20,8(r19)
10102c68:	a0800115 	stw	r2,4(r20)
10102c6c:	a8c7883a 	add	r3,r21,r3
10102c70:	e0c00015 	stw	r3,0(fp)
10102c74:	84c00e26 	beq	r16,r19,10102cb0 <_malloc_r+0x460>
10102c78:	018003c4 	movi	r6,15
10102c7c:	3580a72e 	bgeu	r6,r22,10102f1c <_malloc_r+0x6cc>
10102c80:	81400117 	ldw	r5,4(r16)
10102c84:	013ffe04 	movi	r4,-8
10102c88:	b0bffd04 	addi	r2,r22,-12
10102c8c:	1104703a 	and	r2,r2,r4
10102c90:	2900004c 	andi	r4,r5,1
10102c94:	2088b03a 	or	r4,r4,r2
10102c98:	81000115 	stw	r4,4(r16)
10102c9c:	01400144 	movi	r5,5
10102ca0:	8089883a 	add	r4,r16,r2
10102ca4:	21400115 	stw	r5,4(r4)
10102ca8:	21400215 	stw	r5,8(r4)
10102cac:	3080cd36 	bltu	r6,r2,10102fe4 <_malloc_r+0x794>
10102cb0:	00840474 	movhi	r2,4113
10102cb4:	1092aa04 	addi	r2,r2,19112
10102cb8:	11000017 	ldw	r4,0(r2)
10102cbc:	20c0012e 	bgeu	r4,r3,10102cc4 <_malloc_r+0x474>
10102cc0:	10c00015 	stw	r3,0(r2)
10102cc4:	00840474 	movhi	r2,4113
10102cc8:	1092a904 	addi	r2,r2,19108
10102ccc:	11000017 	ldw	r4,0(r2)
10102cd0:	9c000217 	ldw	r16,8(r19)
10102cd4:	20c0012e 	bgeu	r4,r3,10102cdc <_malloc_r+0x48c>
10102cd8:	10c00015 	stw	r3,0(r2)
10102cdc:	80c00117 	ldw	r3,4(r16)
10102ce0:	00bfff04 	movi	r2,-4
10102ce4:	1886703a 	and	r3,r3,r2
10102ce8:	1c45c83a 	sub	r2,r3,r17
10102cec:	1c400236 	bltu	r3,r17,10102cf8 <_malloc_r+0x4a8>
10102cf0:	00c003c4 	movi	r3,15
10102cf4:	18800416 	blt	r3,r2,10102d08 <_malloc_r+0x4b8>
10102cf8:	9009883a 	mov	r4,r18
10102cfc:	010e9c00 	call	1010e9c0 <__malloc_unlock>
10102d00:	0005883a 	mov	r2,zero
10102d04:	003f7b06 	br	10102af4 <__alt_data_end+0xfffe2af4>
10102d08:	88c00054 	ori	r3,r17,1
10102d0c:	80c00115 	stw	r3,4(r16)
10102d10:	8463883a 	add	r17,r16,r17
10102d14:	10800054 	ori	r2,r2,1
10102d18:	9c400215 	stw	r17,8(r19)
10102d1c:	88800115 	stw	r2,4(r17)
10102d20:	9009883a 	mov	r4,r18
10102d24:	010e9c00 	call	1010e9c0 <__malloc_unlock>
10102d28:	80800204 	addi	r2,r16,8
10102d2c:	003f7106 	br	10102af4 <__alt_data_end+0xfffe2af4>
10102d30:	00c00504 	movi	r3,20
10102d34:	18804a2e 	bgeu	r3,r2,10102e60 <_malloc_r+0x610>
10102d38:	00c01504 	movi	r3,84
10102d3c:	18806e36 	bltu	r3,r2,10102ef8 <_malloc_r+0x6a8>
10102d40:	8804d33a 	srli	r2,r17,12
10102d44:	12001bc4 	addi	r8,r2,111
10102d48:	11c01b84 	addi	r7,r2,110
10102d4c:	4209883a 	add	r4,r8,r8
10102d50:	003edd06 	br	101028c8 <__alt_data_end+0xfffe28c8>
10102d54:	3804d27a 	srli	r2,r7,9
10102d58:	00c00104 	movi	r3,4
10102d5c:	1880442e 	bgeu	r3,r2,10102e70 <_malloc_r+0x620>
10102d60:	00c00504 	movi	r3,20
10102d64:	18808136 	bltu	r3,r2,10102f6c <_malloc_r+0x71c>
10102d68:	11401704 	addi	r5,r2,92
10102d6c:	10c016c4 	addi	r3,r2,91
10102d70:	294b883a 	add	r5,r5,r5
10102d74:	294b883a 	add	r5,r5,r5
10102d78:	294b883a 	add	r5,r5,r5
10102d7c:	994b883a 	add	r5,r19,r5
10102d80:	28800017 	ldw	r2,0(r5)
10102d84:	01840474 	movhi	r6,4113
10102d88:	297ffe04 	addi	r5,r5,-8
10102d8c:	31860304 	addi	r6,r6,6156
10102d90:	28806526 	beq	r5,r2,10102f28 <_malloc_r+0x6d8>
10102d94:	01bfff04 	movi	r6,-4
10102d98:	10c00117 	ldw	r3,4(r2)
10102d9c:	1986703a 	and	r3,r3,r6
10102da0:	38c0022e 	bgeu	r7,r3,10102dac <_malloc_r+0x55c>
10102da4:	10800217 	ldw	r2,8(r2)
10102da8:	28bffb1e 	bne	r5,r2,10102d98 <__alt_data_end+0xfffe2d98>
10102dac:	11400317 	ldw	r5,12(r2)
10102db0:	98c00117 	ldw	r3,4(r19)
10102db4:	81400315 	stw	r5,12(r16)
10102db8:	80800215 	stw	r2,8(r16)
10102dbc:	2c000215 	stw	r16,8(r5)
10102dc0:	14000315 	stw	r16,12(r2)
10102dc4:	003ef806 	br	101029a8 <__alt_data_end+0xfffe29a8>
10102dc8:	88c00054 	ori	r3,r17,1
10102dcc:	80c00115 	stw	r3,4(r16)
10102dd0:	8463883a 	add	r17,r16,r17
10102dd4:	34400515 	stw	r17,20(r6)
10102dd8:	34400415 	stw	r17,16(r6)
10102ddc:	10c00054 	ori	r3,r2,1
10102de0:	8a000315 	stw	r8,12(r17)
10102de4:	8a000215 	stw	r8,8(r17)
10102de8:	88c00115 	stw	r3,4(r17)
10102dec:	88a3883a 	add	r17,r17,r2
10102df0:	88800015 	stw	r2,0(r17)
10102df4:	9009883a 	mov	r4,r18
10102df8:	010e9c00 	call	1010e9c0 <__malloc_unlock>
10102dfc:	80800204 	addi	r2,r16,8
10102e00:	003f3c06 	br	10102af4 <__alt_data_end+0xfffe2af4>
10102e04:	30c00117 	ldw	r3,4(r6)
10102e08:	003ee706 	br	101029a8 <__alt_data_end+0xfffe29a8>
10102e0c:	5ac00044 	addi	r11,r11,1
10102e10:	588000cc 	andi	r2,r11,3
10102e14:	31800204 	addi	r6,r6,8
10102e18:	103efd1e 	bne	r2,zero,10102a10 <__alt_data_end+0xfffe2a10>
10102e1c:	00002406 	br	10102eb0 <_malloc_r+0x660>
10102e20:	14000317 	ldw	r16,12(r2)
10102e24:	143f251e 	bne	r2,r16,10102abc <__alt_data_end+0xfffe2abc>
10102e28:	21000084 	addi	r4,r4,2
10102e2c:	003ebc06 	br	10102920 <__alt_data_end+0xfffe2920>
10102e30:	8085883a 	add	r2,r16,r2
10102e34:	10c00117 	ldw	r3,4(r2)
10102e38:	81000317 	ldw	r4,12(r16)
10102e3c:	81400217 	ldw	r5,8(r16)
10102e40:	18c00054 	ori	r3,r3,1
10102e44:	10c00115 	stw	r3,4(r2)
10102e48:	29000315 	stw	r4,12(r5)
10102e4c:	21400215 	stw	r5,8(r4)
10102e50:	9009883a 	mov	r4,r18
10102e54:	010e9c00 	call	1010e9c0 <__malloc_unlock>
10102e58:	80800204 	addi	r2,r16,8
10102e5c:	003f2506 	br	10102af4 <__alt_data_end+0xfffe2af4>
10102e60:	12001704 	addi	r8,r2,92
10102e64:	11c016c4 	addi	r7,r2,91
10102e68:	4209883a 	add	r4,r8,r8
10102e6c:	003e9606 	br	101028c8 <__alt_data_end+0xfffe28c8>
10102e70:	3804d1ba 	srli	r2,r7,6
10102e74:	11400e44 	addi	r5,r2,57
10102e78:	10c00e04 	addi	r3,r2,56
10102e7c:	294b883a 	add	r5,r5,r5
10102e80:	003fbc06 	br	10102d74 <__alt_data_end+0xfffe2d74>
10102e84:	84ff5926 	beq	r16,r19,10102bec <__alt_data_end+0xfffe2bec>
10102e88:	00840474 	movhi	r2,4113
10102e8c:	10860304 	addi	r2,r2,6156
10102e90:	14000217 	ldw	r16,8(r2)
10102e94:	00bfff04 	movi	r2,-4
10102e98:	80c00117 	ldw	r3,4(r16)
10102e9c:	1886703a 	and	r3,r3,r2
10102ea0:	003f9106 	br	10102ce8 <__alt_data_end+0xfffe2ce8>
10102ea4:	60800217 	ldw	r2,8(r12)
10102ea8:	213fffc4 	addi	r4,r4,-1
10102eac:	1300651e 	bne	r2,r12,10103044 <_malloc_r+0x7f4>
10102eb0:	208000cc 	andi	r2,r4,3
10102eb4:	633ffe04 	addi	r12,r12,-8
10102eb8:	103ffa1e 	bne	r2,zero,10102ea4 <__alt_data_end+0xfffe2ea4>
10102ebc:	98800117 	ldw	r2,4(r19)
10102ec0:	0146303a 	nor	r3,zero,r5
10102ec4:	1884703a 	and	r2,r3,r2
10102ec8:	98800115 	stw	r2,4(r19)
10102ecc:	294b883a 	add	r5,r5,r5
10102ed0:	117f2836 	bltu	r2,r5,10102b74 <__alt_data_end+0xfffe2b74>
10102ed4:	283f2726 	beq	r5,zero,10102b74 <__alt_data_end+0xfffe2b74>
10102ed8:	2886703a 	and	r3,r5,r2
10102edc:	5809883a 	mov	r4,r11
10102ee0:	183ec31e 	bne	r3,zero,101029f0 <__alt_data_end+0xfffe29f0>
10102ee4:	294b883a 	add	r5,r5,r5
10102ee8:	2886703a 	and	r3,r5,r2
10102eec:	21000104 	addi	r4,r4,4
10102ef0:	183ffc26 	beq	r3,zero,10102ee4 <__alt_data_end+0xfffe2ee4>
10102ef4:	003ebe06 	br	101029f0 <__alt_data_end+0xfffe29f0>
10102ef8:	00c05504 	movi	r3,340
10102efc:	18801236 	bltu	r3,r2,10102f48 <_malloc_r+0x6f8>
10102f00:	8804d3fa 	srli	r2,r17,15
10102f04:	12001e04 	addi	r8,r2,120
10102f08:	11c01dc4 	addi	r7,r2,119
10102f0c:	4209883a 	add	r4,r8,r8
10102f10:	003e6d06 	br	101028c8 <__alt_data_end+0xfffe28c8>
10102f14:	00c40004 	movi	r3,4096
10102f18:	003f4606 	br	10102c34 <__alt_data_end+0xfffe2c34>
10102f1c:	00800044 	movi	r2,1
10102f20:	a0800115 	stw	r2,4(r20)
10102f24:	003f7406 	br	10102cf8 <__alt_data_end+0xfffe2cf8>
10102f28:	1805d0ba 	srai	r2,r3,2
10102f2c:	01c00044 	movi	r7,1
10102f30:	30c00117 	ldw	r3,4(r6)
10102f34:	388e983a 	sll	r7,r7,r2
10102f38:	2805883a 	mov	r2,r5
10102f3c:	38c6b03a 	or	r3,r7,r3
10102f40:	30c00115 	stw	r3,4(r6)
10102f44:	003f9b06 	br	10102db4 <__alt_data_end+0xfffe2db4>
10102f48:	00c15504 	movi	r3,1364
10102f4c:	18801a36 	bltu	r3,r2,10102fb8 <_malloc_r+0x768>
10102f50:	8804d4ba 	srli	r2,r17,18
10102f54:	12001f44 	addi	r8,r2,125
10102f58:	11c01f04 	addi	r7,r2,124
10102f5c:	4209883a 	add	r4,r8,r8
10102f60:	003e5906 	br	101028c8 <__alt_data_end+0xfffe28c8>
10102f64:	ad400404 	addi	r21,r21,16
10102f68:	003f1706 	br	10102bc8 <__alt_data_end+0xfffe2bc8>
10102f6c:	00c01504 	movi	r3,84
10102f70:	18802336 	bltu	r3,r2,10103000 <_malloc_r+0x7b0>
10102f74:	3804d33a 	srli	r2,r7,12
10102f78:	11401bc4 	addi	r5,r2,111
10102f7c:	10c01b84 	addi	r3,r2,110
10102f80:	294b883a 	add	r5,r5,r5
10102f84:	003f7b06 	br	10102d74 <__alt_data_end+0xfffe2d74>
10102f88:	9c000217 	ldw	r16,8(r19)
10102f8c:	00bfff04 	movi	r2,-4
10102f90:	80c00117 	ldw	r3,4(r16)
10102f94:	1886703a 	and	r3,r3,r2
10102f98:	003f5306 	br	10102ce8 <__alt_data_end+0xfffe2ce8>
10102f9c:	3083ffcc 	andi	r2,r6,4095
10102fa0:	103f181e 	bne	r2,zero,10102c04 <__alt_data_end+0xfffe2c04>
10102fa4:	99000217 	ldw	r4,8(r19)
10102fa8:	b545883a 	add	r2,r22,r21
10102fac:	10800054 	ori	r2,r2,1
10102fb0:	20800115 	stw	r2,4(r4)
10102fb4:	003f3e06 	br	10102cb0 <__alt_data_end+0xfffe2cb0>
10102fb8:	01003f84 	movi	r4,254
10102fbc:	02001fc4 	movi	r8,127
10102fc0:	01c01f84 	movi	r7,126
10102fc4:	003e4006 	br	101028c8 <__alt_data_end+0xfffe28c8>
10102fc8:	00840474 	movhi	r2,4113
10102fcc:	108bb104 	addi	r2,r2,11972
10102fd0:	15000015 	stw	r20,0(r2)
10102fd4:	003f1106 	br	10102c1c <__alt_data_end+0xfffe2c1c>
10102fd8:	00800044 	movi	r2,1
10102fdc:	002b883a 	mov	r21,zero
10102fe0:	003f1f06 	br	10102c60 <__alt_data_end+0xfffe2c60>
10102fe4:	81400204 	addi	r5,r16,8
10102fe8:	9009883a 	mov	r4,r18
10102fec:	0101d200 	call	10101d20 <_free_r>
10102ff0:	00840474 	movhi	r2,4113
10102ff4:	1092b604 	addi	r2,r2,19160
10102ff8:	10c00017 	ldw	r3,0(r2)
10102ffc:	003f2c06 	br	10102cb0 <__alt_data_end+0xfffe2cb0>
10103000:	00c05504 	movi	r3,340
10103004:	18800536 	bltu	r3,r2,1010301c <_malloc_r+0x7cc>
10103008:	3804d3fa 	srli	r2,r7,15
1010300c:	11401e04 	addi	r5,r2,120
10103010:	10c01dc4 	addi	r3,r2,119
10103014:	294b883a 	add	r5,r5,r5
10103018:	003f5606 	br	10102d74 <__alt_data_end+0xfffe2d74>
1010301c:	00c15504 	movi	r3,1364
10103020:	18800536 	bltu	r3,r2,10103038 <_malloc_r+0x7e8>
10103024:	3804d4ba 	srli	r2,r7,18
10103028:	11401f44 	addi	r5,r2,125
1010302c:	10c01f04 	addi	r3,r2,124
10103030:	294b883a 	add	r5,r5,r5
10103034:	003f4f06 	br	10102d74 <__alt_data_end+0xfffe2d74>
10103038:	01403f84 	movi	r5,254
1010303c:	00c01f84 	movi	r3,126
10103040:	003f4c06 	br	10102d74 <__alt_data_end+0xfffe2d74>
10103044:	98800117 	ldw	r2,4(r19)
10103048:	003fa006 	br	10102ecc <__alt_data_end+0xfffe2ecc>
1010304c:	8808d0fa 	srli	r4,r17,3
10103050:	20800044 	addi	r2,r4,1
10103054:	1085883a 	add	r2,r2,r2
10103058:	003e9006 	br	10102a9c <__alt_data_end+0xfffe2a9c>

1010305c <memset>:
1010305c:	20c000cc 	andi	r3,r4,3
10103060:	2005883a 	mov	r2,r4
10103064:	18004426 	beq	r3,zero,10103178 <memset+0x11c>
10103068:	31ffffc4 	addi	r7,r6,-1
1010306c:	30004026 	beq	r6,zero,10103170 <memset+0x114>
10103070:	2813883a 	mov	r9,r5
10103074:	200d883a 	mov	r6,r4
10103078:	2007883a 	mov	r3,r4
1010307c:	00000406 	br	10103090 <memset+0x34>
10103080:	3a3fffc4 	addi	r8,r7,-1
10103084:	31800044 	addi	r6,r6,1
10103088:	38003926 	beq	r7,zero,10103170 <memset+0x114>
1010308c:	400f883a 	mov	r7,r8
10103090:	18c00044 	addi	r3,r3,1
10103094:	32400005 	stb	r9,0(r6)
10103098:	1a0000cc 	andi	r8,r3,3
1010309c:	403ff81e 	bne	r8,zero,10103080 <__alt_data_end+0xfffe3080>
101030a0:	010000c4 	movi	r4,3
101030a4:	21c02d2e 	bgeu	r4,r7,1010315c <memset+0x100>
101030a8:	29003fcc 	andi	r4,r5,255
101030ac:	200c923a 	slli	r6,r4,8
101030b0:	3108b03a 	or	r4,r6,r4
101030b4:	200c943a 	slli	r6,r4,16
101030b8:	218cb03a 	or	r6,r4,r6
101030bc:	010003c4 	movi	r4,15
101030c0:	21c0182e 	bgeu	r4,r7,10103124 <memset+0xc8>
101030c4:	3b3ffc04 	addi	r12,r7,-16
101030c8:	6018d13a 	srli	r12,r12,4
101030cc:	1a000104 	addi	r8,r3,4
101030d0:	1ac00204 	addi	r11,r3,8
101030d4:	6008913a 	slli	r4,r12,4
101030d8:	1a800304 	addi	r10,r3,12
101030dc:	1813883a 	mov	r9,r3
101030e0:	21000504 	addi	r4,r4,20
101030e4:	1909883a 	add	r4,r3,r4
101030e8:	49800015 	stw	r6,0(r9)
101030ec:	41800015 	stw	r6,0(r8)
101030f0:	59800015 	stw	r6,0(r11)
101030f4:	51800015 	stw	r6,0(r10)
101030f8:	42000404 	addi	r8,r8,16
101030fc:	4a400404 	addi	r9,r9,16
10103100:	5ac00404 	addi	r11,r11,16
10103104:	52800404 	addi	r10,r10,16
10103108:	413ff71e 	bne	r8,r4,101030e8 <__alt_data_end+0xfffe30e8>
1010310c:	63000044 	addi	r12,r12,1
10103110:	6018913a 	slli	r12,r12,4
10103114:	39c003cc 	andi	r7,r7,15
10103118:	010000c4 	movi	r4,3
1010311c:	1b07883a 	add	r3,r3,r12
10103120:	21c00e2e 	bgeu	r4,r7,1010315c <memset+0x100>
10103124:	1813883a 	mov	r9,r3
10103128:	3811883a 	mov	r8,r7
1010312c:	010000c4 	movi	r4,3
10103130:	49800015 	stw	r6,0(r9)
10103134:	423fff04 	addi	r8,r8,-4
10103138:	4a400104 	addi	r9,r9,4
1010313c:	223ffc36 	bltu	r4,r8,10103130 <__alt_data_end+0xfffe3130>
10103140:	393fff04 	addi	r4,r7,-4
10103144:	2008d0ba 	srli	r4,r4,2
10103148:	39c000cc 	andi	r7,r7,3
1010314c:	21000044 	addi	r4,r4,1
10103150:	2109883a 	add	r4,r4,r4
10103154:	2109883a 	add	r4,r4,r4
10103158:	1907883a 	add	r3,r3,r4
1010315c:	38000526 	beq	r7,zero,10103174 <memset+0x118>
10103160:	19cf883a 	add	r7,r3,r7
10103164:	19400005 	stb	r5,0(r3)
10103168:	18c00044 	addi	r3,r3,1
1010316c:	38fffd1e 	bne	r7,r3,10103164 <__alt_data_end+0xfffe3164>
10103170:	f800283a 	ret
10103174:	f800283a 	ret
10103178:	2007883a 	mov	r3,r4
1010317c:	300f883a 	mov	r7,r6
10103180:	003fc706 	br	101030a0 <__alt_data_end+0xfffe30a0>

10103184 <_open_r>:
10103184:	defffd04 	addi	sp,sp,-12
10103188:	2805883a 	mov	r2,r5
1010318c:	dc000015 	stw	r16,0(sp)
10103190:	04040474 	movhi	r16,4113
10103194:	dc400115 	stw	r17,4(sp)
10103198:	300b883a 	mov	r5,r6
1010319c:	8412a804 	addi	r16,r16,19104
101031a0:	2023883a 	mov	r17,r4
101031a4:	380d883a 	mov	r6,r7
101031a8:	1009883a 	mov	r4,r2
101031ac:	dfc00215 	stw	ra,8(sp)
101031b0:	80000015 	stw	zero,0(r16)
101031b4:	010eae40 	call	1010eae4 <open>
101031b8:	00ffffc4 	movi	r3,-1
101031bc:	10c00526 	beq	r2,r3,101031d4 <_open_r+0x50>
101031c0:	dfc00217 	ldw	ra,8(sp)
101031c4:	dc400117 	ldw	r17,4(sp)
101031c8:	dc000017 	ldw	r16,0(sp)
101031cc:	dec00304 	addi	sp,sp,12
101031d0:	f800283a 	ret
101031d4:	80c00017 	ldw	r3,0(r16)
101031d8:	183ff926 	beq	r3,zero,101031c0 <__alt_data_end+0xfffe31c0>
101031dc:	88c00015 	stw	r3,0(r17)
101031e0:	003ff706 	br	101031c0 <__alt_data_end+0xfffe31c0>

101031e4 <_printf_r>:
101031e4:	defffd04 	addi	sp,sp,-12
101031e8:	2805883a 	mov	r2,r5
101031ec:	dfc00015 	stw	ra,0(sp)
101031f0:	d9800115 	stw	r6,4(sp)
101031f4:	d9c00215 	stw	r7,8(sp)
101031f8:	21400217 	ldw	r5,8(r4)
101031fc:	d9c00104 	addi	r7,sp,4
10103200:	100d883a 	mov	r6,r2
10103204:	01037c40 	call	101037c4 <___vfprintf_internal_r>
10103208:	dfc00017 	ldw	ra,0(sp)
1010320c:	dec00304 	addi	sp,sp,12
10103210:	f800283a 	ret

10103214 <printf>:
10103214:	defffc04 	addi	sp,sp,-16
10103218:	dfc00015 	stw	ra,0(sp)
1010321c:	d9400115 	stw	r5,4(sp)
10103220:	d9800215 	stw	r6,8(sp)
10103224:	d9c00315 	stw	r7,12(sp)
10103228:	00840474 	movhi	r2,4113
1010322c:	108bb004 	addi	r2,r2,11968
10103230:	10800017 	ldw	r2,0(r2)
10103234:	200b883a 	mov	r5,r4
10103238:	d9800104 	addi	r6,sp,4
1010323c:	11000217 	ldw	r4,8(r2)
10103240:	01059bc0 	call	101059bc <__vfprintf_internal>
10103244:	dfc00017 	ldw	ra,0(sp)
10103248:	dec00404 	addi	sp,sp,16
1010324c:	f800283a 	ret

10103250 <_puts_r>:
10103250:	defff604 	addi	sp,sp,-40
10103254:	dc000715 	stw	r16,28(sp)
10103258:	2021883a 	mov	r16,r4
1010325c:	2809883a 	mov	r4,r5
10103260:	dc400815 	stw	r17,32(sp)
10103264:	dfc00915 	stw	ra,36(sp)
10103268:	2823883a 	mov	r17,r5
1010326c:	010372c0 	call	1010372c <strlen>
10103270:	10c00044 	addi	r3,r2,1
10103274:	d8800115 	stw	r2,4(sp)
10103278:	00840474 	movhi	r2,4113
1010327c:	10843804 	addi	r2,r2,4320
10103280:	d8800215 	stw	r2,8(sp)
10103284:	00800044 	movi	r2,1
10103288:	d8800315 	stw	r2,12(sp)
1010328c:	00800084 	movi	r2,2
10103290:	dc400015 	stw	r17,0(sp)
10103294:	d8c00615 	stw	r3,24(sp)
10103298:	dec00415 	stw	sp,16(sp)
1010329c:	d8800515 	stw	r2,20(sp)
101032a0:	80000226 	beq	r16,zero,101032ac <_puts_r+0x5c>
101032a4:	80800e17 	ldw	r2,56(r16)
101032a8:	10001426 	beq	r2,zero,101032fc <_puts_r+0xac>
101032ac:	81400217 	ldw	r5,8(r16)
101032b0:	2880030b 	ldhu	r2,12(r5)
101032b4:	10c8000c 	andi	r3,r2,8192
101032b8:	1800061e 	bne	r3,zero,101032d4 <_puts_r+0x84>
101032bc:	29001917 	ldw	r4,100(r5)
101032c0:	00f7ffc4 	movi	r3,-8193
101032c4:	10880014 	ori	r2,r2,8192
101032c8:	20c6703a 	and	r3,r4,r3
101032cc:	2880030d 	sth	r2,12(r5)
101032d0:	28c01915 	stw	r3,100(r5)
101032d4:	d9800404 	addi	r6,sp,16
101032d8:	8009883a 	mov	r4,r16
101032dc:	01075d00 	call	101075d0 <__sfvwrite_r>
101032e0:	1000091e 	bne	r2,zero,10103308 <_puts_r+0xb8>
101032e4:	00800284 	movi	r2,10
101032e8:	dfc00917 	ldw	ra,36(sp)
101032ec:	dc400817 	ldw	r17,32(sp)
101032f0:	dc000717 	ldw	r16,28(sp)
101032f4:	dec00a04 	addi	sp,sp,40
101032f8:	f800283a 	ret
101032fc:	8009883a 	mov	r4,r16
10103300:	0101aa00 	call	10101aa0 <__sinit>
10103304:	003fe906 	br	101032ac <__alt_data_end+0xfffe32ac>
10103308:	00bfffc4 	movi	r2,-1
1010330c:	003ff606 	br	101032e8 <__alt_data_end+0xfffe32e8>

10103310 <puts>:
10103310:	00840474 	movhi	r2,4113
10103314:	108bb004 	addi	r2,r2,11968
10103318:	200b883a 	mov	r5,r4
1010331c:	11000017 	ldw	r4,0(r2)
10103320:	01032501 	jmpi	10103250 <_puts_r>

10103324 <lflush>:
10103324:	2080030b 	ldhu	r2,12(r4)
10103328:	00c00244 	movi	r3,9
1010332c:	1080024c 	andi	r2,r2,9
10103330:	10c00226 	beq	r2,r3,1010333c <lflush+0x18>
10103334:	0005883a 	mov	r2,zero
10103338:	f800283a 	ret
1010333c:	01016281 	jmpi	10101628 <fflush>

10103340 <__srefill_r>:
10103340:	defffc04 	addi	sp,sp,-16
10103344:	dc400115 	stw	r17,4(sp)
10103348:	dc000015 	stw	r16,0(sp)
1010334c:	dfc00315 	stw	ra,12(sp)
10103350:	dc800215 	stw	r18,8(sp)
10103354:	2023883a 	mov	r17,r4
10103358:	2821883a 	mov	r16,r5
1010335c:	20000226 	beq	r4,zero,10103368 <__srefill_r+0x28>
10103360:	20800e17 	ldw	r2,56(r4)
10103364:	10003c26 	beq	r2,zero,10103458 <__srefill_r+0x118>
10103368:	80c0030b 	ldhu	r3,12(r16)
1010336c:	1908000c 	andi	r4,r3,8192
10103370:	1805883a 	mov	r2,r3
10103374:	2000071e 	bne	r4,zero,10103394 <__srefill_r+0x54>
10103378:	81001917 	ldw	r4,100(r16)
1010337c:	18880014 	ori	r2,r3,8192
10103380:	00f7ffc4 	movi	r3,-8193
10103384:	20c8703a 	and	r4,r4,r3
10103388:	8080030d 	sth	r2,12(r16)
1010338c:	1007883a 	mov	r3,r2
10103390:	81001915 	stw	r4,100(r16)
10103394:	80000115 	stw	zero,4(r16)
10103398:	1100080c 	andi	r4,r2,32
1010339c:	2000571e 	bne	r4,zero,101034fc <__srefill_r+0x1bc>
101033a0:	1100010c 	andi	r4,r2,4
101033a4:	20001f26 	beq	r4,zero,10103424 <__srefill_r+0xe4>
101033a8:	81400c17 	ldw	r5,48(r16)
101033ac:	28000826 	beq	r5,zero,101033d0 <__srefill_r+0x90>
101033b0:	80801004 	addi	r2,r16,64
101033b4:	28800226 	beq	r5,r2,101033c0 <__srefill_r+0x80>
101033b8:	8809883a 	mov	r4,r17
101033bc:	0101d200 	call	10101d20 <_free_r>
101033c0:	80800f17 	ldw	r2,60(r16)
101033c4:	80000c15 	stw	zero,48(r16)
101033c8:	80800115 	stw	r2,4(r16)
101033cc:	1000391e 	bne	r2,zero,101034b4 <__srefill_r+0x174>
101033d0:	80800417 	ldw	r2,16(r16)
101033d4:	10004b26 	beq	r2,zero,10103504 <__srefill_r+0x1c4>
101033d8:	8480030b 	ldhu	r18,12(r16)
101033dc:	908000cc 	andi	r2,r18,3
101033e0:	10001f1e 	bne	r2,zero,10103460 <__srefill_r+0x120>
101033e4:	81800417 	ldw	r6,16(r16)
101033e8:	80800817 	ldw	r2,32(r16)
101033ec:	81c00517 	ldw	r7,20(r16)
101033f0:	81400717 	ldw	r5,28(r16)
101033f4:	81800015 	stw	r6,0(r16)
101033f8:	8809883a 	mov	r4,r17
101033fc:	103ee83a 	callr	r2
10103400:	80800115 	stw	r2,4(r16)
10103404:	00800e0e 	bge	zero,r2,10103440 <__srefill_r+0x100>
10103408:	0005883a 	mov	r2,zero
1010340c:	dfc00317 	ldw	ra,12(sp)
10103410:	dc800217 	ldw	r18,8(sp)
10103414:	dc400117 	ldw	r17,4(sp)
10103418:	dc000017 	ldw	r16,0(sp)
1010341c:	dec00404 	addi	sp,sp,16
10103420:	f800283a 	ret
10103424:	1100040c 	andi	r4,r2,16
10103428:	20003026 	beq	r4,zero,101034ec <__srefill_r+0x1ac>
1010342c:	1080020c 	andi	r2,r2,8
10103430:	1000241e 	bne	r2,zero,101034c4 <__srefill_r+0x184>
10103434:	18c00114 	ori	r3,r3,4
10103438:	80c0030d 	sth	r3,12(r16)
1010343c:	003fe406 	br	101033d0 <__alt_data_end+0xfffe33d0>
10103440:	80c0030b 	ldhu	r3,12(r16)
10103444:	1000161e 	bne	r2,zero,101034a0 <__srefill_r+0x160>
10103448:	18c00814 	ori	r3,r3,32
1010344c:	00bfffc4 	movi	r2,-1
10103450:	80c0030d 	sth	r3,12(r16)
10103454:	003fed06 	br	1010340c <__alt_data_end+0xfffe340c>
10103458:	0101aa00 	call	10101aa0 <__sinit>
1010345c:	003fc206 	br	10103368 <__alt_data_end+0xfffe3368>
10103460:	00840474 	movhi	r2,4113
10103464:	108baf04 	addi	r2,r2,11964
10103468:	11000017 	ldw	r4,0(r2)
1010346c:	01440434 	movhi	r5,4112
10103470:	00800044 	movi	r2,1
10103474:	294cc904 	addi	r5,r5,13092
10103478:	8080030d 	sth	r2,12(r16)
1010347c:	010250c0 	call	1010250c <_fwalk>
10103480:	00800244 	movi	r2,9
10103484:	8480030d 	sth	r18,12(r16)
10103488:	9480024c 	andi	r18,r18,9
1010348c:	90bfd51e 	bne	r18,r2,101033e4 <__alt_data_end+0xfffe33e4>
10103490:	800b883a 	mov	r5,r16
10103494:	8809883a 	mov	r4,r17
10103498:	01013b00 	call	101013b0 <__sflush_r>
1010349c:	003fd106 	br	101033e4 <__alt_data_end+0xfffe33e4>
101034a0:	18c01014 	ori	r3,r3,64
101034a4:	80000115 	stw	zero,4(r16)
101034a8:	00bfffc4 	movi	r2,-1
101034ac:	80c0030d 	sth	r3,12(r16)
101034b0:	003fd606 	br	1010340c <__alt_data_end+0xfffe340c>
101034b4:	80c00e17 	ldw	r3,56(r16)
101034b8:	0005883a 	mov	r2,zero
101034bc:	80c00015 	stw	r3,0(r16)
101034c0:	003fd206 	br	1010340c <__alt_data_end+0xfffe340c>
101034c4:	800b883a 	mov	r5,r16
101034c8:	8809883a 	mov	r4,r17
101034cc:	01015cc0 	call	101015cc <_fflush_r>
101034d0:	10000a1e 	bne	r2,zero,101034fc <__srefill_r+0x1bc>
101034d4:	8080030b 	ldhu	r2,12(r16)
101034d8:	00fffdc4 	movi	r3,-9
101034dc:	80000215 	stw	zero,8(r16)
101034e0:	1886703a 	and	r3,r3,r2
101034e4:	80000615 	stw	zero,24(r16)
101034e8:	003fd206 	br	10103434 <__alt_data_end+0xfffe3434>
101034ec:	00800244 	movi	r2,9
101034f0:	88800015 	stw	r2,0(r17)
101034f4:	18c01014 	ori	r3,r3,64
101034f8:	80c0030d 	sth	r3,12(r16)
101034fc:	00bfffc4 	movi	r2,-1
10103500:	003fc206 	br	1010340c <__alt_data_end+0xfffe340c>
10103504:	800b883a 	mov	r5,r16
10103508:	8809883a 	mov	r4,r17
1010350c:	01026940 	call	10102694 <__smakebuf_r>
10103510:	003fb106 	br	101033d8 <__alt_data_end+0xfffe33d8>

10103514 <__srget_r>:
10103514:	defffd04 	addi	sp,sp,-12
10103518:	dc400115 	stw	r17,4(sp)
1010351c:	dc000015 	stw	r16,0(sp)
10103520:	dfc00215 	stw	ra,8(sp)
10103524:	2023883a 	mov	r17,r4
10103528:	2821883a 	mov	r16,r5
1010352c:	20000226 	beq	r4,zero,10103538 <__srget_r+0x24>
10103530:	20800e17 	ldw	r2,56(r4)
10103534:	10001026 	beq	r2,zero,10103578 <__srget_r+0x64>
10103538:	800b883a 	mov	r5,r16
1010353c:	8809883a 	mov	r4,r17
10103540:	01033400 	call	10103340 <__srefill_r>
10103544:	10000e1e 	bne	r2,zero,10103580 <__srget_r+0x6c>
10103548:	80c00017 	ldw	r3,0(r16)
1010354c:	80800117 	ldw	r2,4(r16)
10103550:	19000044 	addi	r4,r3,1
10103554:	10bfffc4 	addi	r2,r2,-1
10103558:	80800115 	stw	r2,4(r16)
1010355c:	81000015 	stw	r4,0(r16)
10103560:	18800003 	ldbu	r2,0(r3)
10103564:	dfc00217 	ldw	ra,8(sp)
10103568:	dc400117 	ldw	r17,4(sp)
1010356c:	dc000017 	ldw	r16,0(sp)
10103570:	dec00304 	addi	sp,sp,12
10103574:	f800283a 	ret
10103578:	0101aa00 	call	10101aa0 <__sinit>
1010357c:	003fee06 	br	10103538 <__alt_data_end+0xfffe3538>
10103580:	00bfffc4 	movi	r2,-1
10103584:	003ff706 	br	10103564 <__alt_data_end+0xfffe3564>

10103588 <__srget>:
10103588:	00840474 	movhi	r2,4113
1010358c:	108bb004 	addi	r2,r2,11968
10103590:	200b883a 	mov	r5,r4
10103594:	11000017 	ldw	r4,0(r2)
10103598:	01035141 	jmpi	10103514 <__srget_r>

1010359c <_sbrk_r>:
1010359c:	defffd04 	addi	sp,sp,-12
101035a0:	dc000015 	stw	r16,0(sp)
101035a4:	04040474 	movhi	r16,4113
101035a8:	dc400115 	stw	r17,4(sp)
101035ac:	8412a804 	addi	r16,r16,19104
101035b0:	2023883a 	mov	r17,r4
101035b4:	2809883a 	mov	r4,r5
101035b8:	dfc00215 	stw	ra,8(sp)
101035bc:	80000015 	stw	zero,0(r16)
101035c0:	010edd40 	call	1010edd4 <sbrk>
101035c4:	00ffffc4 	movi	r3,-1
101035c8:	10c00526 	beq	r2,r3,101035e0 <_sbrk_r+0x44>
101035cc:	dfc00217 	ldw	ra,8(sp)
101035d0:	dc400117 	ldw	r17,4(sp)
101035d4:	dc000017 	ldw	r16,0(sp)
101035d8:	dec00304 	addi	sp,sp,12
101035dc:	f800283a 	ret
101035e0:	80c00017 	ldw	r3,0(r16)
101035e4:	183ff926 	beq	r3,zero,101035cc <__alt_data_end+0xfffe35cc>
101035e8:	88c00015 	stw	r3,0(r17)
101035ec:	003ff706 	br	101035cc <__alt_data_end+0xfffe35cc>

101035f0 <__sread>:
101035f0:	defffe04 	addi	sp,sp,-8
101035f4:	dc000015 	stw	r16,0(sp)
101035f8:	2821883a 	mov	r16,r5
101035fc:	2940038f 	ldh	r5,14(r5)
10103600:	dfc00115 	stw	ra,4(sp)
10103604:	0108fa00 	call	10108fa0 <_read_r>
10103608:	10000716 	blt	r2,zero,10103628 <__sread+0x38>
1010360c:	80c01417 	ldw	r3,80(r16)
10103610:	1887883a 	add	r3,r3,r2
10103614:	80c01415 	stw	r3,80(r16)
10103618:	dfc00117 	ldw	ra,4(sp)
1010361c:	dc000017 	ldw	r16,0(sp)
10103620:	dec00204 	addi	sp,sp,8
10103624:	f800283a 	ret
10103628:	80c0030b 	ldhu	r3,12(r16)
1010362c:	18fbffcc 	andi	r3,r3,61439
10103630:	80c0030d 	sth	r3,12(r16)
10103634:	dfc00117 	ldw	ra,4(sp)
10103638:	dc000017 	ldw	r16,0(sp)
1010363c:	dec00204 	addi	sp,sp,8
10103640:	f800283a 	ret

10103644 <__seofread>:
10103644:	0005883a 	mov	r2,zero
10103648:	f800283a 	ret

1010364c <__swrite>:
1010364c:	2880030b 	ldhu	r2,12(r5)
10103650:	defffb04 	addi	sp,sp,-20
10103654:	dcc00315 	stw	r19,12(sp)
10103658:	dc800215 	stw	r18,8(sp)
1010365c:	dc400115 	stw	r17,4(sp)
10103660:	dc000015 	stw	r16,0(sp)
10103664:	dfc00415 	stw	ra,16(sp)
10103668:	10c0400c 	andi	r3,r2,256
1010366c:	2821883a 	mov	r16,r5
10103670:	2023883a 	mov	r17,r4
10103674:	3025883a 	mov	r18,r6
10103678:	3827883a 	mov	r19,r7
1010367c:	18000526 	beq	r3,zero,10103694 <__swrite+0x48>
10103680:	2940038f 	ldh	r5,14(r5)
10103684:	01c00084 	movi	r7,2
10103688:	000d883a 	mov	r6,zero
1010368c:	0107bbc0 	call	10107bbc <_lseek_r>
10103690:	8080030b 	ldhu	r2,12(r16)
10103694:	8140038f 	ldh	r5,14(r16)
10103698:	10bbffcc 	andi	r2,r2,61439
1010369c:	980f883a 	mov	r7,r19
101036a0:	900d883a 	mov	r6,r18
101036a4:	8809883a 	mov	r4,r17
101036a8:	8080030d 	sth	r2,12(r16)
101036ac:	dfc00417 	ldw	ra,16(sp)
101036b0:	dcc00317 	ldw	r19,12(sp)
101036b4:	dc800217 	ldw	r18,8(sp)
101036b8:	dc400117 	ldw	r17,4(sp)
101036bc:	dc000017 	ldw	r16,0(sp)
101036c0:	dec00504 	addi	sp,sp,20
101036c4:	0105a941 	jmpi	10105a94 <_write_r>

101036c8 <__sseek>:
101036c8:	defffe04 	addi	sp,sp,-8
101036cc:	dc000015 	stw	r16,0(sp)
101036d0:	2821883a 	mov	r16,r5
101036d4:	2940038f 	ldh	r5,14(r5)
101036d8:	dfc00115 	stw	ra,4(sp)
101036dc:	0107bbc0 	call	10107bbc <_lseek_r>
101036e0:	00ffffc4 	movi	r3,-1
101036e4:	10c00826 	beq	r2,r3,10103708 <__sseek+0x40>
101036e8:	80c0030b 	ldhu	r3,12(r16)
101036ec:	80801415 	stw	r2,80(r16)
101036f0:	18c40014 	ori	r3,r3,4096
101036f4:	80c0030d 	sth	r3,12(r16)
101036f8:	dfc00117 	ldw	ra,4(sp)
101036fc:	dc000017 	ldw	r16,0(sp)
10103700:	dec00204 	addi	sp,sp,8
10103704:	f800283a 	ret
10103708:	80c0030b 	ldhu	r3,12(r16)
1010370c:	18fbffcc 	andi	r3,r3,61439
10103710:	80c0030d 	sth	r3,12(r16)
10103714:	dfc00117 	ldw	ra,4(sp)
10103718:	dc000017 	ldw	r16,0(sp)
1010371c:	dec00204 	addi	sp,sp,8
10103720:	f800283a 	ret

10103724 <__sclose>:
10103724:	2940038f 	ldh	r5,14(r5)
10103728:	0105c481 	jmpi	10105c48 <_close_r>

1010372c <strlen>:
1010372c:	208000cc 	andi	r2,r4,3
10103730:	10002026 	beq	r2,zero,101037b4 <strlen+0x88>
10103734:	20800007 	ldb	r2,0(r4)
10103738:	10002026 	beq	r2,zero,101037bc <strlen+0x90>
1010373c:	2005883a 	mov	r2,r4
10103740:	00000206 	br	1010374c <strlen+0x20>
10103744:	10c00007 	ldb	r3,0(r2)
10103748:	18001826 	beq	r3,zero,101037ac <strlen+0x80>
1010374c:	10800044 	addi	r2,r2,1
10103750:	10c000cc 	andi	r3,r2,3
10103754:	183ffb1e 	bne	r3,zero,10103744 <__alt_data_end+0xfffe3744>
10103758:	10c00017 	ldw	r3,0(r2)
1010375c:	01ffbff4 	movhi	r7,65279
10103760:	39ffbfc4 	addi	r7,r7,-257
10103764:	00ca303a 	nor	r5,zero,r3
10103768:	01a02074 	movhi	r6,32897
1010376c:	19c7883a 	add	r3,r3,r7
10103770:	31a02004 	addi	r6,r6,-32640
10103774:	1946703a 	and	r3,r3,r5
10103778:	1986703a 	and	r3,r3,r6
1010377c:	1800091e 	bne	r3,zero,101037a4 <strlen+0x78>
10103780:	10800104 	addi	r2,r2,4
10103784:	10c00017 	ldw	r3,0(r2)
10103788:	19cb883a 	add	r5,r3,r7
1010378c:	00c6303a 	nor	r3,zero,r3
10103790:	28c6703a 	and	r3,r5,r3
10103794:	1986703a 	and	r3,r3,r6
10103798:	183ff926 	beq	r3,zero,10103780 <__alt_data_end+0xfffe3780>
1010379c:	00000106 	br	101037a4 <strlen+0x78>
101037a0:	10800044 	addi	r2,r2,1
101037a4:	10c00007 	ldb	r3,0(r2)
101037a8:	183ffd1e 	bne	r3,zero,101037a0 <__alt_data_end+0xfffe37a0>
101037ac:	1105c83a 	sub	r2,r2,r4
101037b0:	f800283a 	ret
101037b4:	2005883a 	mov	r2,r4
101037b8:	003fe706 	br	10103758 <__alt_data_end+0xfffe3758>
101037bc:	0005883a 	mov	r2,zero
101037c0:	f800283a 	ret

101037c4 <___vfprintf_internal_r>:
101037c4:	deffb804 	addi	sp,sp,-288
101037c8:	dfc04715 	stw	ra,284(sp)
101037cc:	ddc04515 	stw	r23,276(sp)
101037d0:	dd404315 	stw	r21,268(sp)
101037d4:	d9002c15 	stw	r4,176(sp)
101037d8:	282f883a 	mov	r23,r5
101037dc:	302b883a 	mov	r21,r6
101037e0:	d9c02d15 	stw	r7,180(sp)
101037e4:	df004615 	stw	fp,280(sp)
101037e8:	dd804415 	stw	r22,272(sp)
101037ec:	dd004215 	stw	r20,264(sp)
101037f0:	dcc04115 	stw	r19,260(sp)
101037f4:	dc804015 	stw	r18,256(sp)
101037f8:	dc403f15 	stw	r17,252(sp)
101037fc:	dc003e15 	stw	r16,248(sp)
10103800:	0107b8c0 	call	10107b8c <_localeconv_r>
10103804:	10800017 	ldw	r2,0(r2)
10103808:	1009883a 	mov	r4,r2
1010380c:	d8803415 	stw	r2,208(sp)
10103810:	010372c0 	call	1010372c <strlen>
10103814:	d8803715 	stw	r2,220(sp)
10103818:	d8802c17 	ldw	r2,176(sp)
1010381c:	10000226 	beq	r2,zero,10103828 <___vfprintf_internal_r+0x64>
10103820:	10800e17 	ldw	r2,56(r2)
10103824:	1000f926 	beq	r2,zero,10103c0c <___vfprintf_internal_r+0x448>
10103828:	b880030b 	ldhu	r2,12(r23)
1010382c:	10c8000c 	andi	r3,r2,8192
10103830:	1800061e 	bne	r3,zero,1010384c <___vfprintf_internal_r+0x88>
10103834:	b9001917 	ldw	r4,100(r23)
10103838:	00f7ffc4 	movi	r3,-8193
1010383c:	10880014 	ori	r2,r2,8192
10103840:	20c6703a 	and	r3,r4,r3
10103844:	b880030d 	sth	r2,12(r23)
10103848:	b8c01915 	stw	r3,100(r23)
1010384c:	10c0020c 	andi	r3,r2,8
10103850:	1800c126 	beq	r3,zero,10103b58 <___vfprintf_internal_r+0x394>
10103854:	b8c00417 	ldw	r3,16(r23)
10103858:	1800bf26 	beq	r3,zero,10103b58 <___vfprintf_internal_r+0x394>
1010385c:	1080068c 	andi	r2,r2,26
10103860:	00c00284 	movi	r3,10
10103864:	10c0c426 	beq	r2,r3,10103b78 <___vfprintf_internal_r+0x3b4>
10103868:	d8c00404 	addi	r3,sp,16
1010386c:	05040474 	movhi	r20,4113
10103870:	d9001e04 	addi	r4,sp,120
10103874:	a5044984 	addi	r20,r20,4390
10103878:	d8c01e15 	stw	r3,120(sp)
1010387c:	d8002015 	stw	zero,128(sp)
10103880:	d8001f15 	stw	zero,124(sp)
10103884:	d8003315 	stw	zero,204(sp)
10103888:	d8003615 	stw	zero,216(sp)
1010388c:	d8003815 	stw	zero,224(sp)
10103890:	1811883a 	mov	r8,r3
10103894:	d8003915 	stw	zero,228(sp)
10103898:	d8003a15 	stw	zero,232(sp)
1010389c:	d8002f15 	stw	zero,188(sp)
101038a0:	d9002815 	stw	r4,160(sp)
101038a4:	a8800007 	ldb	r2,0(r21)
101038a8:	10027b26 	beq	r2,zero,10104298 <___vfprintf_internal_r+0xad4>
101038ac:	00c00944 	movi	r3,37
101038b0:	a821883a 	mov	r16,r21
101038b4:	10c0021e 	bne	r2,r3,101038c0 <___vfprintf_internal_r+0xfc>
101038b8:	00001406 	br	1010390c <___vfprintf_internal_r+0x148>
101038bc:	10c00326 	beq	r2,r3,101038cc <___vfprintf_internal_r+0x108>
101038c0:	84000044 	addi	r16,r16,1
101038c4:	80800007 	ldb	r2,0(r16)
101038c8:	103ffc1e 	bne	r2,zero,101038bc <__alt_data_end+0xfffe38bc>
101038cc:	8563c83a 	sub	r17,r16,r21
101038d0:	88000e26 	beq	r17,zero,1010390c <___vfprintf_internal_r+0x148>
101038d4:	d8c02017 	ldw	r3,128(sp)
101038d8:	d8801f17 	ldw	r2,124(sp)
101038dc:	45400015 	stw	r21,0(r8)
101038e0:	1c47883a 	add	r3,r3,r17
101038e4:	10800044 	addi	r2,r2,1
101038e8:	d8c02015 	stw	r3,128(sp)
101038ec:	44400115 	stw	r17,4(r8)
101038f0:	d8801f15 	stw	r2,124(sp)
101038f4:	00c001c4 	movi	r3,7
101038f8:	1880a716 	blt	r3,r2,10103b98 <___vfprintf_internal_r+0x3d4>
101038fc:	42000204 	addi	r8,r8,8
10103900:	d9402f17 	ldw	r5,188(sp)
10103904:	2c4b883a 	add	r5,r5,r17
10103908:	d9402f15 	stw	r5,188(sp)
1010390c:	80800007 	ldb	r2,0(r16)
10103910:	1000a826 	beq	r2,zero,10103bb4 <___vfprintf_internal_r+0x3f0>
10103914:	84400047 	ldb	r17,1(r16)
10103918:	00bfffc4 	movi	r2,-1
1010391c:	85400044 	addi	r21,r16,1
10103920:	d8002785 	stb	zero,158(sp)
10103924:	0007883a 	mov	r3,zero
10103928:	000f883a 	mov	r7,zero
1010392c:	d8802915 	stw	r2,164(sp)
10103930:	d8003115 	stw	zero,196(sp)
10103934:	0025883a 	mov	r18,zero
10103938:	01401604 	movi	r5,88
1010393c:	01800244 	movi	r6,9
10103940:	02800a84 	movi	r10,42
10103944:	02401b04 	movi	r9,108
10103948:	ad400044 	addi	r21,r21,1
1010394c:	88bff804 	addi	r2,r17,-32
10103950:	28830436 	bltu	r5,r2,10104564 <___vfprintf_internal_r+0xda0>
10103954:	100490ba 	slli	r2,r2,2
10103958:	01040434 	movhi	r4,4112
1010395c:	210e5b04 	addi	r4,r4,14700
10103960:	1105883a 	add	r2,r2,r4
10103964:	10800017 	ldw	r2,0(r2)
10103968:	1000683a 	jmp	r2
1010396c:	10104484 	addi	zero,r2,16658
10103970:	10104564 	muli	zero,r2,16661
10103974:	10104564 	muli	zero,r2,16661
10103978:	101044a4 	muli	zero,r2,16658
1010397c:	10104564 	muli	zero,r2,16661
10103980:	10104564 	muli	zero,r2,16661
10103984:	10104564 	muli	zero,r2,16661
10103988:	10104564 	muli	zero,r2,16661
1010398c:	10104564 	muli	zero,r2,16661
10103990:	10104564 	muli	zero,r2,16661
10103994:	10103c18 	cmpnei	zero,r2,16624
10103998:	101043c0 	call	1101043c <__alt_data_end+0xef043c>
1010399c:	10104564 	muli	zero,r2,16661
101039a0:	10103ae0 	cmpeqi	zero,r2,16619
101039a4:	10103c40 	call	110103c4 <__alt_data_end+0xef03c4>
101039a8:	10104564 	muli	zero,r2,16661
101039ac:	10103c80 	call	110103c8 <__alt_data_end+0xef03c8>
101039b0:	10103c8c 	andi	zero,r2,16626
101039b4:	10103c8c 	andi	zero,r2,16626
101039b8:	10103c8c 	andi	zero,r2,16626
101039bc:	10103c8c 	andi	zero,r2,16626
101039c0:	10103c8c 	andi	zero,r2,16626
101039c4:	10103c8c 	andi	zero,r2,16626
101039c8:	10103c8c 	andi	zero,r2,16626
101039cc:	10103c8c 	andi	zero,r2,16626
101039d0:	10103c8c 	andi	zero,r2,16626
101039d4:	10104564 	muli	zero,r2,16661
101039d8:	10104564 	muli	zero,r2,16661
101039dc:	10104564 	muli	zero,r2,16661
101039e0:	10104564 	muli	zero,r2,16661
101039e4:	10104564 	muli	zero,r2,16661
101039e8:	10104564 	muli	zero,r2,16661
101039ec:	10104564 	muli	zero,r2,16661
101039f0:	10104564 	muli	zero,r2,16661
101039f4:	10104564 	muli	zero,r2,16661
101039f8:	10104564 	muli	zero,r2,16661
101039fc:	10103cc0 	call	110103cc <__alt_data_end+0xef03cc>
10103a00:	10103d7c 	xorhi	zero,r2,16629
10103a04:	10104564 	muli	zero,r2,16661
10103a08:	10103d7c 	xorhi	zero,r2,16629
10103a0c:	10104564 	muli	zero,r2,16661
10103a10:	10104564 	muli	zero,r2,16661
10103a14:	10104564 	muli	zero,r2,16661
10103a18:	10104564 	muli	zero,r2,16661
10103a1c:	10103e1c 	xori	zero,r2,16632
10103a20:	10104564 	muli	zero,r2,16661
10103a24:	10104564 	muli	zero,r2,16661
10103a28:	10103e28 	cmpgeui	zero,r2,16632
10103a2c:	10104564 	muli	zero,r2,16661
10103a30:	10104564 	muli	zero,r2,16661
10103a34:	10104564 	muli	zero,r2,16661
10103a38:	10104564 	muli	zero,r2,16661
10103a3c:	10104564 	muli	zero,r2,16661
10103a40:	101042a0 	cmpeqi	zero,r2,16650
10103a44:	10104564 	muli	zero,r2,16661
10103a48:	10104564 	muli	zero,r2,16661
10103a4c:	10104300 	call	11010430 <__alt_data_end+0xef0430>
10103a50:	10104564 	muli	zero,r2,16661
10103a54:	10104564 	muli	zero,r2,16661
10103a58:	10104564 	muli	zero,r2,16661
10103a5c:	10104564 	muli	zero,r2,16661
10103a60:	10104564 	muli	zero,r2,16661
10103a64:	10104564 	muli	zero,r2,16661
10103a68:	10104564 	muli	zero,r2,16661
10103a6c:	10104564 	muli	zero,r2,16661
10103a70:	10104564 	muli	zero,r2,16661
10103a74:	10104564 	muli	zero,r2,16661
10103a78:	10104510 	cmplti	zero,r2,16660
10103a7c:	101044b0 	cmpltui	zero,r2,16658
10103a80:	10103d7c 	xorhi	zero,r2,16629
10103a84:	10103d7c 	xorhi	zero,r2,16629
10103a88:	10103d7c 	xorhi	zero,r2,16629
10103a8c:	101044c0 	call	1101044c <__alt_data_end+0xef044c>
10103a90:	101044b0 	cmpltui	zero,r2,16658
10103a94:	10104564 	muli	zero,r2,16661
10103a98:	10104564 	muli	zero,r2,16661
10103a9c:	101044cc 	andi	zero,r2,16659
10103aa0:	10104564 	muli	zero,r2,16661
10103aa4:	101044dc 	xori	zero,r2,16659
10103aa8:	101043b0 	cmpltui	zero,r2,16654
10103aac:	10103aec 	andhi	zero,r2,16619
10103ab0:	101043d0 	cmplti	zero,r2,16655
10103ab4:	10104564 	muli	zero,r2,16661
10103ab8:	101043dc 	xori	zero,r2,16655
10103abc:	10104564 	muli	zero,r2,16661
10103ac0:	10104438 	rdprs	zero,r2,16656
10103ac4:	10104564 	muli	zero,r2,16661
10103ac8:	10104564 	muli	zero,r2,16661
10103acc:	10104448 	cmpgei	zero,r2,16657
10103ad0:	d9003117 	ldw	r4,196(sp)
10103ad4:	d8802d15 	stw	r2,180(sp)
10103ad8:	0109c83a 	sub	r4,zero,r4
10103adc:	d9003115 	stw	r4,196(sp)
10103ae0:	94800114 	ori	r18,r18,4
10103ae4:	ac400007 	ldb	r17,0(r21)
10103ae8:	003f9706 	br	10103948 <__alt_data_end+0xfffe3948>
10103aec:	00800c04 	movi	r2,48
10103af0:	d9002d17 	ldw	r4,180(sp)
10103af4:	d9402917 	ldw	r5,164(sp)
10103af8:	d8802705 	stb	r2,156(sp)
10103afc:	00801e04 	movi	r2,120
10103b00:	d8802745 	stb	r2,157(sp)
10103b04:	d8002785 	stb	zero,158(sp)
10103b08:	20c00104 	addi	r3,r4,4
10103b0c:	24c00017 	ldw	r19,0(r4)
10103b10:	002d883a 	mov	r22,zero
10103b14:	90800094 	ori	r2,r18,2
10103b18:	28029a16 	blt	r5,zero,10104584 <___vfprintf_internal_r+0xdc0>
10103b1c:	00bfdfc4 	movi	r2,-129
10103b20:	90a4703a 	and	r18,r18,r2
10103b24:	d8c02d15 	stw	r3,180(sp)
10103b28:	94800094 	ori	r18,r18,2
10103b2c:	9802871e 	bne	r19,zero,1010454c <___vfprintf_internal_r+0xd88>
10103b30:	00840474 	movhi	r2,4113
10103b34:	10844204 	addi	r2,r2,4360
10103b38:	d8803915 	stw	r2,228(sp)
10103b3c:	04401e04 	movi	r17,120
10103b40:	d8802917 	ldw	r2,164(sp)
10103b44:	0039883a 	mov	fp,zero
10103b48:	1001e926 	beq	r2,zero,101042f0 <___vfprintf_internal_r+0xb2c>
10103b4c:	0027883a 	mov	r19,zero
10103b50:	002d883a 	mov	r22,zero
10103b54:	00020506 	br	1010436c <___vfprintf_internal_r+0xba8>
10103b58:	d9002c17 	ldw	r4,176(sp)
10103b5c:	b80b883a 	mov	r5,r23
10103b60:	0105af40 	call	10105af4 <__swsetup_r>
10103b64:	1005ac1e 	bne	r2,zero,10105218 <___vfprintf_internal_r+0x1a54>
10103b68:	b880030b 	ldhu	r2,12(r23)
10103b6c:	00c00284 	movi	r3,10
10103b70:	1080068c 	andi	r2,r2,26
10103b74:	10ff3c1e 	bne	r2,r3,10103868 <__alt_data_end+0xfffe3868>
10103b78:	b880038f 	ldh	r2,14(r23)
10103b7c:	103f3a16 	blt	r2,zero,10103868 <__alt_data_end+0xfffe3868>
10103b80:	d9c02d17 	ldw	r7,180(sp)
10103b84:	d9002c17 	ldw	r4,176(sp)
10103b88:	a80d883a 	mov	r6,r21
10103b8c:	b80b883a 	mov	r5,r23
10103b90:	01059d80 	call	101059d8 <__sbprintf>
10103b94:	00001106 	br	10103bdc <___vfprintf_internal_r+0x418>
10103b98:	d9002c17 	ldw	r4,176(sp)
10103b9c:	d9801e04 	addi	r6,sp,120
10103ba0:	b80b883a 	mov	r5,r23
10103ba4:	01097b00 	call	101097b0 <__sprint_r>
10103ba8:	1000081e 	bne	r2,zero,10103bcc <___vfprintf_internal_r+0x408>
10103bac:	da000404 	addi	r8,sp,16
10103bb0:	003f5306 	br	10103900 <__alt_data_end+0xfffe3900>
10103bb4:	d8802017 	ldw	r2,128(sp)
10103bb8:	10000426 	beq	r2,zero,10103bcc <___vfprintf_internal_r+0x408>
10103bbc:	d9002c17 	ldw	r4,176(sp)
10103bc0:	d9801e04 	addi	r6,sp,120
10103bc4:	b80b883a 	mov	r5,r23
10103bc8:	01097b00 	call	101097b0 <__sprint_r>
10103bcc:	b880030b 	ldhu	r2,12(r23)
10103bd0:	1080100c 	andi	r2,r2,64
10103bd4:	1005901e 	bne	r2,zero,10105218 <___vfprintf_internal_r+0x1a54>
10103bd8:	d8802f17 	ldw	r2,188(sp)
10103bdc:	dfc04717 	ldw	ra,284(sp)
10103be0:	df004617 	ldw	fp,280(sp)
10103be4:	ddc04517 	ldw	r23,276(sp)
10103be8:	dd804417 	ldw	r22,272(sp)
10103bec:	dd404317 	ldw	r21,268(sp)
10103bf0:	dd004217 	ldw	r20,264(sp)
10103bf4:	dcc04117 	ldw	r19,260(sp)
10103bf8:	dc804017 	ldw	r18,256(sp)
10103bfc:	dc403f17 	ldw	r17,252(sp)
10103c00:	dc003e17 	ldw	r16,248(sp)
10103c04:	dec04804 	addi	sp,sp,288
10103c08:	f800283a 	ret
10103c0c:	d9002c17 	ldw	r4,176(sp)
10103c10:	0101aa00 	call	10101aa0 <__sinit>
10103c14:	003f0406 	br	10103828 <__alt_data_end+0xfffe3828>
10103c18:	d8802d17 	ldw	r2,180(sp)
10103c1c:	d9002d17 	ldw	r4,180(sp)
10103c20:	10800017 	ldw	r2,0(r2)
10103c24:	d8803115 	stw	r2,196(sp)
10103c28:	20800104 	addi	r2,r4,4
10103c2c:	d9003117 	ldw	r4,196(sp)
10103c30:	203fa716 	blt	r4,zero,10103ad0 <__alt_data_end+0xfffe3ad0>
10103c34:	d8802d15 	stw	r2,180(sp)
10103c38:	ac400007 	ldb	r17,0(r21)
10103c3c:	003f4206 	br	10103948 <__alt_data_end+0xfffe3948>
10103c40:	ac400007 	ldb	r17,0(r21)
10103c44:	aac00044 	addi	r11,r21,1
10103c48:	8a872826 	beq	r17,r10,101058ec <___vfprintf_internal_r+0x2128>
10103c4c:	88bff404 	addi	r2,r17,-48
10103c50:	0009883a 	mov	r4,zero
10103c54:	30867d36 	bltu	r6,r2,1010564c <___vfprintf_internal_r+0x1e88>
10103c58:	5c400007 	ldb	r17,0(r11)
10103c5c:	210002a4 	muli	r4,r4,10
10103c60:	5d400044 	addi	r21,r11,1
10103c64:	a817883a 	mov	r11,r21
10103c68:	2089883a 	add	r4,r4,r2
10103c6c:	88bff404 	addi	r2,r17,-48
10103c70:	30bff92e 	bgeu	r6,r2,10103c58 <__alt_data_end+0xfffe3c58>
10103c74:	2005c916 	blt	r4,zero,1010539c <___vfprintf_internal_r+0x1bd8>
10103c78:	d9002915 	stw	r4,164(sp)
10103c7c:	003f3306 	br	1010394c <__alt_data_end+0xfffe394c>
10103c80:	94802014 	ori	r18,r18,128
10103c84:	ac400007 	ldb	r17,0(r21)
10103c88:	003f2f06 	br	10103948 <__alt_data_end+0xfffe3948>
10103c8c:	a809883a 	mov	r4,r21
10103c90:	d8003115 	stw	zero,196(sp)
10103c94:	88bff404 	addi	r2,r17,-48
10103c98:	0017883a 	mov	r11,zero
10103c9c:	24400007 	ldb	r17,0(r4)
10103ca0:	5ac002a4 	muli	r11,r11,10
10103ca4:	ad400044 	addi	r21,r21,1
10103ca8:	a809883a 	mov	r4,r21
10103cac:	12d7883a 	add	r11,r2,r11
10103cb0:	88bff404 	addi	r2,r17,-48
10103cb4:	30bff92e 	bgeu	r6,r2,10103c9c <__alt_data_end+0xfffe3c9c>
10103cb8:	dac03115 	stw	r11,196(sp)
10103cbc:	003f2306 	br	1010394c <__alt_data_end+0xfffe394c>
10103cc0:	18c03fcc 	andi	r3,r3,255
10103cc4:	18072b1e 	bne	r3,zero,10105974 <___vfprintf_internal_r+0x21b0>
10103cc8:	94800414 	ori	r18,r18,16
10103ccc:	9080080c 	andi	r2,r18,32
10103cd0:	10037b26 	beq	r2,zero,10104ac0 <___vfprintf_internal_r+0x12fc>
10103cd4:	d9402d17 	ldw	r5,180(sp)
10103cd8:	28800117 	ldw	r2,4(r5)
10103cdc:	2cc00017 	ldw	r19,0(r5)
10103ce0:	29400204 	addi	r5,r5,8
10103ce4:	d9402d15 	stw	r5,180(sp)
10103ce8:	102d883a 	mov	r22,r2
10103cec:	10044b16 	blt	r2,zero,10104e1c <___vfprintf_internal_r+0x1658>
10103cf0:	d9402917 	ldw	r5,164(sp)
10103cf4:	df002783 	ldbu	fp,158(sp)
10103cf8:	2803bc16 	blt	r5,zero,10104bec <___vfprintf_internal_r+0x1428>
10103cfc:	00ffdfc4 	movi	r3,-129
10103d00:	9d84b03a 	or	r2,r19,r22
10103d04:	90e4703a 	and	r18,r18,r3
10103d08:	10017726 	beq	r2,zero,101042e8 <___vfprintf_internal_r+0xb24>
10103d0c:	b0038326 	beq	r22,zero,10104b1c <___vfprintf_internal_r+0x1358>
10103d10:	dc402a15 	stw	r17,168(sp)
10103d14:	dc001e04 	addi	r16,sp,120
10103d18:	b023883a 	mov	r17,r22
10103d1c:	402d883a 	mov	r22,r8
10103d20:	9809883a 	mov	r4,r19
10103d24:	880b883a 	mov	r5,r17
10103d28:	01800284 	movi	r6,10
10103d2c:	000f883a 	mov	r7,zero
10103d30:	010b8800 	call	1010b880 <__umoddi3>
10103d34:	10800c04 	addi	r2,r2,48
10103d38:	843fffc4 	addi	r16,r16,-1
10103d3c:	9809883a 	mov	r4,r19
10103d40:	880b883a 	mov	r5,r17
10103d44:	80800005 	stb	r2,0(r16)
10103d48:	01800284 	movi	r6,10
10103d4c:	000f883a 	mov	r7,zero
10103d50:	010b3080 	call	1010b308 <__udivdi3>
10103d54:	1027883a 	mov	r19,r2
10103d58:	10c4b03a 	or	r2,r2,r3
10103d5c:	1823883a 	mov	r17,r3
10103d60:	103fef1e 	bne	r2,zero,10103d20 <__alt_data_end+0xfffe3d20>
10103d64:	d8c02817 	ldw	r3,160(sp)
10103d68:	dc402a17 	ldw	r17,168(sp)
10103d6c:	b011883a 	mov	r8,r22
10103d70:	1c07c83a 	sub	r3,r3,r16
10103d74:	d8c02e15 	stw	r3,184(sp)
10103d78:	00005906 	br	10103ee0 <___vfprintf_internal_r+0x71c>
10103d7c:	18c03fcc 	andi	r3,r3,255
10103d80:	1806fa1e 	bne	r3,zero,1010596c <___vfprintf_internal_r+0x21a8>
10103d84:	9080020c 	andi	r2,r18,8
10103d88:	10048a26 	beq	r2,zero,10104fb4 <___vfprintf_internal_r+0x17f0>
10103d8c:	d8c02d17 	ldw	r3,180(sp)
10103d90:	d9002d17 	ldw	r4,180(sp)
10103d94:	d9402d17 	ldw	r5,180(sp)
10103d98:	18c00017 	ldw	r3,0(r3)
10103d9c:	21000117 	ldw	r4,4(r4)
10103da0:	29400204 	addi	r5,r5,8
10103da4:	d8c03615 	stw	r3,216(sp)
10103da8:	d9003815 	stw	r4,224(sp)
10103dac:	d9402d15 	stw	r5,180(sp)
10103db0:	d9003617 	ldw	r4,216(sp)
10103db4:	d9403817 	ldw	r5,224(sp)
10103db8:	da003d15 	stw	r8,244(sp)
10103dbc:	04000044 	movi	r16,1
10103dc0:	01095640 	call	10109564 <__fpclassifyd>
10103dc4:	da003d17 	ldw	r8,244(sp)
10103dc8:	14041f1e 	bne	r2,r16,10104e48 <___vfprintf_internal_r+0x1684>
10103dcc:	d9003617 	ldw	r4,216(sp)
10103dd0:	d9403817 	ldw	r5,224(sp)
10103dd4:	000d883a 	mov	r6,zero
10103dd8:	000f883a 	mov	r7,zero
10103ddc:	010d0b00 	call	1010d0b0 <__ledf2>
10103de0:	da003d17 	ldw	r8,244(sp)
10103de4:	1005be16 	blt	r2,zero,101054e0 <___vfprintf_internal_r+0x1d1c>
10103de8:	df002783 	ldbu	fp,158(sp)
10103dec:	008011c4 	movi	r2,71
10103df0:	1445330e 	bge	r2,r17,101052c0 <___vfprintf_internal_r+0x1afc>
10103df4:	04040474 	movhi	r16,4113
10103df8:	84043a04 	addi	r16,r16,4328
10103dfc:	00c000c4 	movi	r3,3
10103e00:	00bfdfc4 	movi	r2,-129
10103e04:	d8c02a15 	stw	r3,168(sp)
10103e08:	90a4703a 	and	r18,r18,r2
10103e0c:	d8c02e15 	stw	r3,184(sp)
10103e10:	d8002915 	stw	zero,164(sp)
10103e14:	d8003215 	stw	zero,200(sp)
10103e18:	00003706 	br	10103ef8 <___vfprintf_internal_r+0x734>
10103e1c:	94800214 	ori	r18,r18,8
10103e20:	ac400007 	ldb	r17,0(r21)
10103e24:	003ec806 	br	10103948 <__alt_data_end+0xfffe3948>
10103e28:	18c03fcc 	andi	r3,r3,255
10103e2c:	1806db1e 	bne	r3,zero,1010599c <___vfprintf_internal_r+0x21d8>
10103e30:	94800414 	ori	r18,r18,16
10103e34:	9080080c 	andi	r2,r18,32
10103e38:	1002d826 	beq	r2,zero,1010499c <___vfprintf_internal_r+0x11d8>
10103e3c:	d9402d17 	ldw	r5,180(sp)
10103e40:	d8c02917 	ldw	r3,164(sp)
10103e44:	d8002785 	stb	zero,158(sp)
10103e48:	28800204 	addi	r2,r5,8
10103e4c:	2cc00017 	ldw	r19,0(r5)
10103e50:	2d800117 	ldw	r22,4(r5)
10103e54:	18048f16 	blt	r3,zero,10105094 <___vfprintf_internal_r+0x18d0>
10103e58:	013fdfc4 	movi	r4,-129
10103e5c:	9d86b03a 	or	r3,r19,r22
10103e60:	d8802d15 	stw	r2,180(sp)
10103e64:	9124703a 	and	r18,r18,r4
10103e68:	1802d91e 	bne	r3,zero,101049d0 <___vfprintf_internal_r+0x120c>
10103e6c:	d8c02917 	ldw	r3,164(sp)
10103e70:	0039883a 	mov	fp,zero
10103e74:	1805c326 	beq	r3,zero,10105584 <___vfprintf_internal_r+0x1dc0>
10103e78:	0027883a 	mov	r19,zero
10103e7c:	002d883a 	mov	r22,zero
10103e80:	dc001e04 	addi	r16,sp,120
10103e84:	9806d0fa 	srli	r3,r19,3
10103e88:	b008977a 	slli	r4,r22,29
10103e8c:	b02cd0fa 	srli	r22,r22,3
10103e90:	9cc001cc 	andi	r19,r19,7
10103e94:	98800c04 	addi	r2,r19,48
10103e98:	843fffc4 	addi	r16,r16,-1
10103e9c:	20e6b03a 	or	r19,r4,r3
10103ea0:	80800005 	stb	r2,0(r16)
10103ea4:	9d86b03a 	or	r3,r19,r22
10103ea8:	183ff61e 	bne	r3,zero,10103e84 <__alt_data_end+0xfffe3e84>
10103eac:	90c0004c 	andi	r3,r18,1
10103eb0:	18013b26 	beq	r3,zero,101043a0 <___vfprintf_internal_r+0xbdc>
10103eb4:	10803fcc 	andi	r2,r2,255
10103eb8:	1080201c 	xori	r2,r2,128
10103ebc:	10bfe004 	addi	r2,r2,-128
10103ec0:	00c00c04 	movi	r3,48
10103ec4:	10c13626 	beq	r2,r3,101043a0 <___vfprintf_internal_r+0xbdc>
10103ec8:	80ffffc5 	stb	r3,-1(r16)
10103ecc:	d8c02817 	ldw	r3,160(sp)
10103ed0:	80bfffc4 	addi	r2,r16,-1
10103ed4:	1021883a 	mov	r16,r2
10103ed8:	1887c83a 	sub	r3,r3,r2
10103edc:	d8c02e15 	stw	r3,184(sp)
10103ee0:	d8802e17 	ldw	r2,184(sp)
10103ee4:	d9002917 	ldw	r4,164(sp)
10103ee8:	1100010e 	bge	r2,r4,10103ef0 <___vfprintf_internal_r+0x72c>
10103eec:	2005883a 	mov	r2,r4
10103ef0:	d8802a15 	stw	r2,168(sp)
10103ef4:	d8003215 	stw	zero,200(sp)
10103ef8:	e7003fcc 	andi	fp,fp,255
10103efc:	e700201c 	xori	fp,fp,128
10103f00:	e73fe004 	addi	fp,fp,-128
10103f04:	e0000326 	beq	fp,zero,10103f14 <___vfprintf_internal_r+0x750>
10103f08:	d8c02a17 	ldw	r3,168(sp)
10103f0c:	18c00044 	addi	r3,r3,1
10103f10:	d8c02a15 	stw	r3,168(sp)
10103f14:	90c0008c 	andi	r3,r18,2
10103f18:	d8c02b15 	stw	r3,172(sp)
10103f1c:	18000326 	beq	r3,zero,10103f2c <___vfprintf_internal_r+0x768>
10103f20:	d8c02a17 	ldw	r3,168(sp)
10103f24:	18c00084 	addi	r3,r3,2
10103f28:	d8c02a15 	stw	r3,168(sp)
10103f2c:	90c0210c 	andi	r3,r18,132
10103f30:	d8c03015 	stw	r3,192(sp)
10103f34:	1801a31e 	bne	r3,zero,101045c4 <___vfprintf_internal_r+0xe00>
10103f38:	d9003117 	ldw	r4,196(sp)
10103f3c:	d8c02a17 	ldw	r3,168(sp)
10103f40:	20e7c83a 	sub	r19,r4,r3
10103f44:	04c19f0e 	bge	zero,r19,101045c4 <___vfprintf_internal_r+0xe00>
10103f48:	02400404 	movi	r9,16
10103f4c:	d8c02017 	ldw	r3,128(sp)
10103f50:	d8801f17 	ldw	r2,124(sp)
10103f54:	4cc50d0e 	bge	r9,r19,1010538c <___vfprintf_internal_r+0x1bc8>
10103f58:	01440474 	movhi	r5,4113
10103f5c:	29444d84 	addi	r5,r5,4406
10103f60:	dc403b15 	stw	r17,236(sp)
10103f64:	d9403515 	stw	r5,212(sp)
10103f68:	9823883a 	mov	r17,r19
10103f6c:	482d883a 	mov	r22,r9
10103f70:	9027883a 	mov	r19,r18
10103f74:	070001c4 	movi	fp,7
10103f78:	8025883a 	mov	r18,r16
10103f7c:	dc002c17 	ldw	r16,176(sp)
10103f80:	00000306 	br	10103f90 <___vfprintf_internal_r+0x7cc>
10103f84:	8c7ffc04 	addi	r17,r17,-16
10103f88:	42000204 	addi	r8,r8,8
10103f8c:	b440130e 	bge	r22,r17,10103fdc <___vfprintf_internal_r+0x818>
10103f90:	01040474 	movhi	r4,4113
10103f94:	18c00404 	addi	r3,r3,16
10103f98:	10800044 	addi	r2,r2,1
10103f9c:	21044d84 	addi	r4,r4,4406
10103fa0:	41000015 	stw	r4,0(r8)
10103fa4:	45800115 	stw	r22,4(r8)
10103fa8:	d8c02015 	stw	r3,128(sp)
10103fac:	d8801f15 	stw	r2,124(sp)
10103fb0:	e0bff40e 	bge	fp,r2,10103f84 <__alt_data_end+0xfffe3f84>
10103fb4:	d9801e04 	addi	r6,sp,120
10103fb8:	b80b883a 	mov	r5,r23
10103fbc:	8009883a 	mov	r4,r16
10103fc0:	01097b00 	call	101097b0 <__sprint_r>
10103fc4:	103f011e 	bne	r2,zero,10103bcc <__alt_data_end+0xfffe3bcc>
10103fc8:	8c7ffc04 	addi	r17,r17,-16
10103fcc:	d8c02017 	ldw	r3,128(sp)
10103fd0:	d8801f17 	ldw	r2,124(sp)
10103fd4:	da000404 	addi	r8,sp,16
10103fd8:	b47fed16 	blt	r22,r17,10103f90 <__alt_data_end+0xfffe3f90>
10103fdc:	9021883a 	mov	r16,r18
10103fe0:	9825883a 	mov	r18,r19
10103fe4:	8827883a 	mov	r19,r17
10103fe8:	dc403b17 	ldw	r17,236(sp)
10103fec:	d9403517 	ldw	r5,212(sp)
10103ff0:	98c7883a 	add	r3,r19,r3
10103ff4:	10800044 	addi	r2,r2,1
10103ff8:	41400015 	stw	r5,0(r8)
10103ffc:	44c00115 	stw	r19,4(r8)
10104000:	d8c02015 	stw	r3,128(sp)
10104004:	d8801f15 	stw	r2,124(sp)
10104008:	010001c4 	movi	r4,7
1010400c:	2082a316 	blt	r4,r2,10104a9c <___vfprintf_internal_r+0x12d8>
10104010:	df002787 	ldb	fp,158(sp)
10104014:	42000204 	addi	r8,r8,8
10104018:	e0000c26 	beq	fp,zero,1010404c <___vfprintf_internal_r+0x888>
1010401c:	d8801f17 	ldw	r2,124(sp)
10104020:	d9002784 	addi	r4,sp,158
10104024:	18c00044 	addi	r3,r3,1
10104028:	10800044 	addi	r2,r2,1
1010402c:	41000015 	stw	r4,0(r8)
10104030:	01000044 	movi	r4,1
10104034:	41000115 	stw	r4,4(r8)
10104038:	d8c02015 	stw	r3,128(sp)
1010403c:	d8801f15 	stw	r2,124(sp)
10104040:	010001c4 	movi	r4,7
10104044:	20823c16 	blt	r4,r2,10104938 <___vfprintf_internal_r+0x1174>
10104048:	42000204 	addi	r8,r8,8
1010404c:	d8802b17 	ldw	r2,172(sp)
10104050:	10000c26 	beq	r2,zero,10104084 <___vfprintf_internal_r+0x8c0>
10104054:	d8801f17 	ldw	r2,124(sp)
10104058:	d9002704 	addi	r4,sp,156
1010405c:	18c00084 	addi	r3,r3,2
10104060:	10800044 	addi	r2,r2,1
10104064:	41000015 	stw	r4,0(r8)
10104068:	01000084 	movi	r4,2
1010406c:	41000115 	stw	r4,4(r8)
10104070:	d8c02015 	stw	r3,128(sp)
10104074:	d8801f15 	stw	r2,124(sp)
10104078:	010001c4 	movi	r4,7
1010407c:	20823616 	blt	r4,r2,10104958 <___vfprintf_internal_r+0x1194>
10104080:	42000204 	addi	r8,r8,8
10104084:	d9003017 	ldw	r4,192(sp)
10104088:	00802004 	movi	r2,128
1010408c:	20819926 	beq	r4,r2,101046f4 <___vfprintf_internal_r+0xf30>
10104090:	d9402917 	ldw	r5,164(sp)
10104094:	d8802e17 	ldw	r2,184(sp)
10104098:	28adc83a 	sub	r22,r5,r2
1010409c:	0580310e 	bge	zero,r22,10104164 <___vfprintf_internal_r+0x9a0>
101040a0:	07000404 	movi	fp,16
101040a4:	d8801f17 	ldw	r2,124(sp)
101040a8:	e584140e 	bge	fp,r22,101050fc <___vfprintf_internal_r+0x1938>
101040ac:	01440474 	movhi	r5,4113
101040b0:	29444984 	addi	r5,r5,4390
101040b4:	dc402915 	stw	r17,164(sp)
101040b8:	d9402b15 	stw	r5,172(sp)
101040bc:	b023883a 	mov	r17,r22
101040c0:	04c001c4 	movi	r19,7
101040c4:	a82d883a 	mov	r22,r21
101040c8:	902b883a 	mov	r21,r18
101040cc:	8025883a 	mov	r18,r16
101040d0:	dc002c17 	ldw	r16,176(sp)
101040d4:	00000306 	br	101040e4 <___vfprintf_internal_r+0x920>
101040d8:	8c7ffc04 	addi	r17,r17,-16
101040dc:	42000204 	addi	r8,r8,8
101040e0:	e440110e 	bge	fp,r17,10104128 <___vfprintf_internal_r+0x964>
101040e4:	18c00404 	addi	r3,r3,16
101040e8:	10800044 	addi	r2,r2,1
101040ec:	45000015 	stw	r20,0(r8)
101040f0:	47000115 	stw	fp,4(r8)
101040f4:	d8c02015 	stw	r3,128(sp)
101040f8:	d8801f15 	stw	r2,124(sp)
101040fc:	98bff60e 	bge	r19,r2,101040d8 <__alt_data_end+0xfffe40d8>
10104100:	d9801e04 	addi	r6,sp,120
10104104:	b80b883a 	mov	r5,r23
10104108:	8009883a 	mov	r4,r16
1010410c:	01097b00 	call	101097b0 <__sprint_r>
10104110:	103eae1e 	bne	r2,zero,10103bcc <__alt_data_end+0xfffe3bcc>
10104114:	8c7ffc04 	addi	r17,r17,-16
10104118:	d8c02017 	ldw	r3,128(sp)
1010411c:	d8801f17 	ldw	r2,124(sp)
10104120:	da000404 	addi	r8,sp,16
10104124:	e47fef16 	blt	fp,r17,101040e4 <__alt_data_end+0xfffe40e4>
10104128:	9021883a 	mov	r16,r18
1010412c:	a825883a 	mov	r18,r21
10104130:	b02b883a 	mov	r21,r22
10104134:	882d883a 	mov	r22,r17
10104138:	dc402917 	ldw	r17,164(sp)
1010413c:	d9002b17 	ldw	r4,172(sp)
10104140:	1d87883a 	add	r3,r3,r22
10104144:	10800044 	addi	r2,r2,1
10104148:	41000015 	stw	r4,0(r8)
1010414c:	45800115 	stw	r22,4(r8)
10104150:	d8c02015 	stw	r3,128(sp)
10104154:	d8801f15 	stw	r2,124(sp)
10104158:	010001c4 	movi	r4,7
1010415c:	2081ee16 	blt	r4,r2,10104918 <___vfprintf_internal_r+0x1154>
10104160:	42000204 	addi	r8,r8,8
10104164:	9080400c 	andi	r2,r18,256
10104168:	1001181e 	bne	r2,zero,101045cc <___vfprintf_internal_r+0xe08>
1010416c:	d9402e17 	ldw	r5,184(sp)
10104170:	d8801f17 	ldw	r2,124(sp)
10104174:	44000015 	stw	r16,0(r8)
10104178:	1947883a 	add	r3,r3,r5
1010417c:	10800044 	addi	r2,r2,1
10104180:	41400115 	stw	r5,4(r8)
10104184:	d8c02015 	stw	r3,128(sp)
10104188:	d8801f15 	stw	r2,124(sp)
1010418c:	010001c4 	movi	r4,7
10104190:	2081d316 	blt	r4,r2,101048e0 <___vfprintf_internal_r+0x111c>
10104194:	42000204 	addi	r8,r8,8
10104198:	9480010c 	andi	r18,r18,4
1010419c:	90003226 	beq	r18,zero,10104268 <___vfprintf_internal_r+0xaa4>
101041a0:	d9403117 	ldw	r5,196(sp)
101041a4:	d8802a17 	ldw	r2,168(sp)
101041a8:	28a1c83a 	sub	r16,r5,r2
101041ac:	04002e0e 	bge	zero,r16,10104268 <___vfprintf_internal_r+0xaa4>
101041b0:	04400404 	movi	r17,16
101041b4:	d8801f17 	ldw	r2,124(sp)
101041b8:	8c04a20e 	bge	r17,r16,10105444 <___vfprintf_internal_r+0x1c80>
101041bc:	01440474 	movhi	r5,4113
101041c0:	29444d84 	addi	r5,r5,4406
101041c4:	d9403515 	stw	r5,212(sp)
101041c8:	048001c4 	movi	r18,7
101041cc:	dcc02c17 	ldw	r19,176(sp)
101041d0:	00000306 	br	101041e0 <___vfprintf_internal_r+0xa1c>
101041d4:	843ffc04 	addi	r16,r16,-16
101041d8:	42000204 	addi	r8,r8,8
101041dc:	8c00130e 	bge	r17,r16,1010422c <___vfprintf_internal_r+0xa68>
101041e0:	01040474 	movhi	r4,4113
101041e4:	18c00404 	addi	r3,r3,16
101041e8:	10800044 	addi	r2,r2,1
101041ec:	21044d84 	addi	r4,r4,4406
101041f0:	41000015 	stw	r4,0(r8)
101041f4:	44400115 	stw	r17,4(r8)
101041f8:	d8c02015 	stw	r3,128(sp)
101041fc:	d8801f15 	stw	r2,124(sp)
10104200:	90bff40e 	bge	r18,r2,101041d4 <__alt_data_end+0xfffe41d4>
10104204:	d9801e04 	addi	r6,sp,120
10104208:	b80b883a 	mov	r5,r23
1010420c:	9809883a 	mov	r4,r19
10104210:	01097b00 	call	101097b0 <__sprint_r>
10104214:	103e6d1e 	bne	r2,zero,10103bcc <__alt_data_end+0xfffe3bcc>
10104218:	843ffc04 	addi	r16,r16,-16
1010421c:	d8c02017 	ldw	r3,128(sp)
10104220:	d8801f17 	ldw	r2,124(sp)
10104224:	da000404 	addi	r8,sp,16
10104228:	8c3fed16 	blt	r17,r16,101041e0 <__alt_data_end+0xfffe41e0>
1010422c:	d9403517 	ldw	r5,212(sp)
10104230:	1c07883a 	add	r3,r3,r16
10104234:	10800044 	addi	r2,r2,1
10104238:	41400015 	stw	r5,0(r8)
1010423c:	44000115 	stw	r16,4(r8)
10104240:	d8c02015 	stw	r3,128(sp)
10104244:	d8801f15 	stw	r2,124(sp)
10104248:	010001c4 	movi	r4,7
1010424c:	2080060e 	bge	r4,r2,10104268 <___vfprintf_internal_r+0xaa4>
10104250:	d9002c17 	ldw	r4,176(sp)
10104254:	d9801e04 	addi	r6,sp,120
10104258:	b80b883a 	mov	r5,r23
1010425c:	01097b00 	call	101097b0 <__sprint_r>
10104260:	103e5a1e 	bne	r2,zero,10103bcc <__alt_data_end+0xfffe3bcc>
10104264:	d8c02017 	ldw	r3,128(sp)
10104268:	d8803117 	ldw	r2,196(sp)
1010426c:	d9002a17 	ldw	r4,168(sp)
10104270:	1100010e 	bge	r2,r4,10104278 <___vfprintf_internal_r+0xab4>
10104274:	2005883a 	mov	r2,r4
10104278:	d9402f17 	ldw	r5,188(sp)
1010427c:	288b883a 	add	r5,r5,r2
10104280:	d9402f15 	stw	r5,188(sp)
10104284:	18019e1e 	bne	r3,zero,10104900 <___vfprintf_internal_r+0x113c>
10104288:	a8800007 	ldb	r2,0(r21)
1010428c:	d8001f15 	stw	zero,124(sp)
10104290:	da000404 	addi	r8,sp,16
10104294:	103d851e 	bne	r2,zero,101038ac <__alt_data_end+0xfffe38ac>
10104298:	a821883a 	mov	r16,r21
1010429c:	003d9b06 	br	1010390c <__alt_data_end+0xfffe390c>
101042a0:	18c03fcc 	andi	r3,r3,255
101042a4:	1805c11e 	bne	r3,zero,101059ac <___vfprintf_internal_r+0x21e8>
101042a8:	94800414 	ori	r18,r18,16
101042ac:	9080080c 	andi	r2,r18,32
101042b0:	10020c26 	beq	r2,zero,10104ae4 <___vfprintf_internal_r+0x1320>
101042b4:	d8802d17 	ldw	r2,180(sp)
101042b8:	d9002917 	ldw	r4,164(sp)
101042bc:	d8002785 	stb	zero,158(sp)
101042c0:	10c00204 	addi	r3,r2,8
101042c4:	14c00017 	ldw	r19,0(r2)
101042c8:	15800117 	ldw	r22,4(r2)
101042cc:	20040f16 	blt	r4,zero,1010530c <___vfprintf_internal_r+0x1b48>
101042d0:	013fdfc4 	movi	r4,-129
101042d4:	9d84b03a 	or	r2,r19,r22
101042d8:	d8c02d15 	stw	r3,180(sp)
101042dc:	9124703a 	and	r18,r18,r4
101042e0:	0039883a 	mov	fp,zero
101042e4:	103e891e 	bne	r2,zero,10103d0c <__alt_data_end+0xfffe3d0c>
101042e8:	d9002917 	ldw	r4,164(sp)
101042ec:	2002c11e 	bne	r4,zero,10104df4 <___vfprintf_internal_r+0x1630>
101042f0:	d8002915 	stw	zero,164(sp)
101042f4:	d8002e15 	stw	zero,184(sp)
101042f8:	dc001e04 	addi	r16,sp,120
101042fc:	003ef806 	br	10103ee0 <__alt_data_end+0xfffe3ee0>
10104300:	18c03fcc 	andi	r3,r3,255
10104304:	18059d1e 	bne	r3,zero,1010597c <___vfprintf_internal_r+0x21b8>
10104308:	01440474 	movhi	r5,4113
1010430c:	29443d04 	addi	r5,r5,4340
10104310:	d9403915 	stw	r5,228(sp)
10104314:	9080080c 	andi	r2,r18,32
10104318:	10005226 	beq	r2,zero,10104464 <___vfprintf_internal_r+0xca0>
1010431c:	d8802d17 	ldw	r2,180(sp)
10104320:	14c00017 	ldw	r19,0(r2)
10104324:	15800117 	ldw	r22,4(r2)
10104328:	10800204 	addi	r2,r2,8
1010432c:	d8802d15 	stw	r2,180(sp)
10104330:	9080004c 	andi	r2,r18,1
10104334:	10019026 	beq	r2,zero,10104978 <___vfprintf_internal_r+0x11b4>
10104338:	9d84b03a 	or	r2,r19,r22
1010433c:	10036926 	beq	r2,zero,101050e4 <___vfprintf_internal_r+0x1920>
10104340:	d8c02917 	ldw	r3,164(sp)
10104344:	00800c04 	movi	r2,48
10104348:	d8802705 	stb	r2,156(sp)
1010434c:	dc402745 	stb	r17,157(sp)
10104350:	d8002785 	stb	zero,158(sp)
10104354:	90800094 	ori	r2,r18,2
10104358:	18045d16 	blt	r3,zero,101054d0 <___vfprintf_internal_r+0x1d0c>
1010435c:	00bfdfc4 	movi	r2,-129
10104360:	90a4703a 	and	r18,r18,r2
10104364:	94800094 	ori	r18,r18,2
10104368:	0039883a 	mov	fp,zero
1010436c:	d9003917 	ldw	r4,228(sp)
10104370:	dc001e04 	addi	r16,sp,120
10104374:	988003cc 	andi	r2,r19,15
10104378:	b006973a 	slli	r3,r22,28
1010437c:	2085883a 	add	r2,r4,r2
10104380:	9826d13a 	srli	r19,r19,4
10104384:	10800003 	ldbu	r2,0(r2)
10104388:	b02cd13a 	srli	r22,r22,4
1010438c:	843fffc4 	addi	r16,r16,-1
10104390:	1ce6b03a 	or	r19,r3,r19
10104394:	80800005 	stb	r2,0(r16)
10104398:	9d84b03a 	or	r2,r19,r22
1010439c:	103ff51e 	bne	r2,zero,10104374 <__alt_data_end+0xfffe4374>
101043a0:	d8c02817 	ldw	r3,160(sp)
101043a4:	1c07c83a 	sub	r3,r3,r16
101043a8:	d8c02e15 	stw	r3,184(sp)
101043ac:	003ecc06 	br	10103ee0 <__alt_data_end+0xfffe3ee0>
101043b0:	18c03fcc 	andi	r3,r3,255
101043b4:	183e9f26 	beq	r3,zero,10103e34 <__alt_data_end+0xfffe3e34>
101043b8:	d9c02785 	stb	r7,158(sp)
101043bc:	003e9d06 	br	10103e34 <__alt_data_end+0xfffe3e34>
101043c0:	00c00044 	movi	r3,1
101043c4:	01c00ac4 	movi	r7,43
101043c8:	ac400007 	ldb	r17,0(r21)
101043cc:	003d5e06 	br	10103948 <__alt_data_end+0xfffe3948>
101043d0:	94800814 	ori	r18,r18,32
101043d4:	ac400007 	ldb	r17,0(r21)
101043d8:	003d5b06 	br	10103948 <__alt_data_end+0xfffe3948>
101043dc:	d8c02d17 	ldw	r3,180(sp)
101043e0:	d8002785 	stb	zero,158(sp)
101043e4:	1c000017 	ldw	r16,0(r3)
101043e8:	1cc00104 	addi	r19,r3,4
101043ec:	80041926 	beq	r16,zero,10105454 <___vfprintf_internal_r+0x1c90>
101043f0:	d9002917 	ldw	r4,164(sp)
101043f4:	2003d016 	blt	r4,zero,10105338 <___vfprintf_internal_r+0x1b74>
101043f8:	200d883a 	mov	r6,r4
101043fc:	000b883a 	mov	r5,zero
10104400:	8009883a 	mov	r4,r16
10104404:	da003d15 	stw	r8,244(sp)
10104408:	0107c1c0 	call	10107c1c <memchr>
1010440c:	da003d17 	ldw	r8,244(sp)
10104410:	10045426 	beq	r2,zero,10105564 <___vfprintf_internal_r+0x1da0>
10104414:	1405c83a 	sub	r2,r2,r16
10104418:	d8802e15 	stw	r2,184(sp)
1010441c:	1003cc16 	blt	r2,zero,10105350 <___vfprintf_internal_r+0x1b8c>
10104420:	df002783 	ldbu	fp,158(sp)
10104424:	d8802a15 	stw	r2,168(sp)
10104428:	dcc02d15 	stw	r19,180(sp)
1010442c:	d8002915 	stw	zero,164(sp)
10104430:	d8003215 	stw	zero,200(sp)
10104434:	003eb006 	br	10103ef8 <__alt_data_end+0xfffe3ef8>
10104438:	18c03fcc 	andi	r3,r3,255
1010443c:	183f9b26 	beq	r3,zero,101042ac <__alt_data_end+0xfffe42ac>
10104440:	d9c02785 	stb	r7,158(sp)
10104444:	003f9906 	br	101042ac <__alt_data_end+0xfffe42ac>
10104448:	18c03fcc 	andi	r3,r3,255
1010444c:	1805551e 	bne	r3,zero,101059a4 <___vfprintf_internal_r+0x21e0>
10104450:	01440474 	movhi	r5,4113
10104454:	29444204 	addi	r5,r5,4360
10104458:	d9403915 	stw	r5,228(sp)
1010445c:	9080080c 	andi	r2,r18,32
10104460:	103fae1e 	bne	r2,zero,1010431c <__alt_data_end+0xfffe431c>
10104464:	9080040c 	andi	r2,r18,16
10104468:	1002de26 	beq	r2,zero,10104fe4 <___vfprintf_internal_r+0x1820>
1010446c:	d8c02d17 	ldw	r3,180(sp)
10104470:	002d883a 	mov	r22,zero
10104474:	1cc00017 	ldw	r19,0(r3)
10104478:	18c00104 	addi	r3,r3,4
1010447c:	d8c02d15 	stw	r3,180(sp)
10104480:	003fab06 	br	10104330 <__alt_data_end+0xfffe4330>
10104484:	38803fcc 	andi	r2,r7,255
10104488:	1080201c 	xori	r2,r2,128
1010448c:	10bfe004 	addi	r2,r2,-128
10104490:	1002d21e 	bne	r2,zero,10104fdc <___vfprintf_internal_r+0x1818>
10104494:	00c00044 	movi	r3,1
10104498:	01c00804 	movi	r7,32
1010449c:	ac400007 	ldb	r17,0(r21)
101044a0:	003d2906 	br	10103948 <__alt_data_end+0xfffe3948>
101044a4:	94800054 	ori	r18,r18,1
101044a8:	ac400007 	ldb	r17,0(r21)
101044ac:	003d2606 	br	10103948 <__alt_data_end+0xfffe3948>
101044b0:	18c03fcc 	andi	r3,r3,255
101044b4:	183e0526 	beq	r3,zero,10103ccc <__alt_data_end+0xfffe3ccc>
101044b8:	d9c02785 	stb	r7,158(sp)
101044bc:	003e0306 	br	10103ccc <__alt_data_end+0xfffe3ccc>
101044c0:	94801014 	ori	r18,r18,64
101044c4:	ac400007 	ldb	r17,0(r21)
101044c8:	003d1f06 	br	10103948 <__alt_data_end+0xfffe3948>
101044cc:	ac400007 	ldb	r17,0(r21)
101044d0:	8a438726 	beq	r17,r9,101052f0 <___vfprintf_internal_r+0x1b2c>
101044d4:	94800414 	ori	r18,r18,16
101044d8:	003d1b06 	br	10103948 <__alt_data_end+0xfffe3948>
101044dc:	18c03fcc 	andi	r3,r3,255
101044e0:	1805341e 	bne	r3,zero,101059b4 <___vfprintf_internal_r+0x21f0>
101044e4:	9080080c 	andi	r2,r18,32
101044e8:	1002cd26 	beq	r2,zero,10105020 <___vfprintf_internal_r+0x185c>
101044ec:	d9402d17 	ldw	r5,180(sp)
101044f0:	d9002f17 	ldw	r4,188(sp)
101044f4:	28800017 	ldw	r2,0(r5)
101044f8:	2007d7fa 	srai	r3,r4,31
101044fc:	29400104 	addi	r5,r5,4
10104500:	d9402d15 	stw	r5,180(sp)
10104504:	11000015 	stw	r4,0(r2)
10104508:	10c00115 	stw	r3,4(r2)
1010450c:	003ce506 	br	101038a4 <__alt_data_end+0xfffe38a4>
10104510:	d8c02d17 	ldw	r3,180(sp)
10104514:	d9002d17 	ldw	r4,180(sp)
10104518:	d8002785 	stb	zero,158(sp)
1010451c:	18800017 	ldw	r2,0(r3)
10104520:	21000104 	addi	r4,r4,4
10104524:	00c00044 	movi	r3,1
10104528:	d8c02a15 	stw	r3,168(sp)
1010452c:	d8801405 	stb	r2,80(sp)
10104530:	d9002d15 	stw	r4,180(sp)
10104534:	d8c02e15 	stw	r3,184(sp)
10104538:	d8002915 	stw	zero,164(sp)
1010453c:	d8003215 	stw	zero,200(sp)
10104540:	dc001404 	addi	r16,sp,80
10104544:	0039883a 	mov	fp,zero
10104548:	003e7206 	br	10103f14 <__alt_data_end+0xfffe3f14>
1010454c:	01040474 	movhi	r4,4113
10104550:	21044204 	addi	r4,r4,4360
10104554:	0039883a 	mov	fp,zero
10104558:	d9003915 	stw	r4,228(sp)
1010455c:	04401e04 	movi	r17,120
10104560:	003f8206 	br	1010436c <__alt_data_end+0xfffe436c>
10104564:	18c03fcc 	andi	r3,r3,255
10104568:	1805061e 	bne	r3,zero,10105984 <___vfprintf_internal_r+0x21c0>
1010456c:	883d9126 	beq	r17,zero,10103bb4 <__alt_data_end+0xfffe3bb4>
10104570:	00c00044 	movi	r3,1
10104574:	d8c02a15 	stw	r3,168(sp)
10104578:	dc401405 	stb	r17,80(sp)
1010457c:	d8002785 	stb	zero,158(sp)
10104580:	003fec06 	br	10104534 <__alt_data_end+0xfffe4534>
10104584:	01440474 	movhi	r5,4113
10104588:	29444204 	addi	r5,r5,4360
1010458c:	d9403915 	stw	r5,228(sp)
10104590:	d8c02d15 	stw	r3,180(sp)
10104594:	1025883a 	mov	r18,r2
10104598:	04401e04 	movi	r17,120
1010459c:	9d84b03a 	or	r2,r19,r22
101045a0:	1000fc1e 	bne	r2,zero,10104994 <___vfprintf_internal_r+0x11d0>
101045a4:	0039883a 	mov	fp,zero
101045a8:	00800084 	movi	r2,2
101045ac:	10803fcc 	andi	r2,r2,255
101045b0:	00c00044 	movi	r3,1
101045b4:	10c20f26 	beq	r2,r3,10104df4 <___vfprintf_internal_r+0x1630>
101045b8:	00c00084 	movi	r3,2
101045bc:	10fd6326 	beq	r2,r3,10103b4c <__alt_data_end+0xfffe3b4c>
101045c0:	003e2d06 	br	10103e78 <__alt_data_end+0xfffe3e78>
101045c4:	d8c02017 	ldw	r3,128(sp)
101045c8:	003e9306 	br	10104018 <__alt_data_end+0xfffe4018>
101045cc:	00801944 	movi	r2,101
101045d0:	14407e0e 	bge	r2,r17,101047cc <___vfprintf_internal_r+0x1008>
101045d4:	d9003617 	ldw	r4,216(sp)
101045d8:	d9403817 	ldw	r5,224(sp)
101045dc:	000d883a 	mov	r6,zero
101045e0:	000f883a 	mov	r7,zero
101045e4:	d8c03c15 	stw	r3,240(sp)
101045e8:	da003d15 	stw	r8,244(sp)
101045ec:	010cf4c0 	call	1010cf4c <__eqdf2>
101045f0:	d8c03c17 	ldw	r3,240(sp)
101045f4:	da003d17 	ldw	r8,244(sp)
101045f8:	1000f71e 	bne	r2,zero,101049d8 <___vfprintf_internal_r+0x1214>
101045fc:	d8801f17 	ldw	r2,124(sp)
10104600:	01040474 	movhi	r4,4113
10104604:	21044904 	addi	r4,r4,4388
10104608:	18c00044 	addi	r3,r3,1
1010460c:	10800044 	addi	r2,r2,1
10104610:	41000015 	stw	r4,0(r8)
10104614:	01000044 	movi	r4,1
10104618:	41000115 	stw	r4,4(r8)
1010461c:	d8c02015 	stw	r3,128(sp)
10104620:	d8801f15 	stw	r2,124(sp)
10104624:	010001c4 	movi	r4,7
10104628:	2082b816 	blt	r4,r2,1010510c <___vfprintf_internal_r+0x1948>
1010462c:	42000204 	addi	r8,r8,8
10104630:	d8802617 	ldw	r2,152(sp)
10104634:	d9403317 	ldw	r5,204(sp)
10104638:	11400216 	blt	r2,r5,10104644 <___vfprintf_internal_r+0xe80>
1010463c:	9080004c 	andi	r2,r18,1
10104640:	103ed526 	beq	r2,zero,10104198 <__alt_data_end+0xfffe4198>
10104644:	d8803717 	ldw	r2,220(sp)
10104648:	d9003417 	ldw	r4,208(sp)
1010464c:	d9403717 	ldw	r5,220(sp)
10104650:	1887883a 	add	r3,r3,r2
10104654:	d8801f17 	ldw	r2,124(sp)
10104658:	41000015 	stw	r4,0(r8)
1010465c:	41400115 	stw	r5,4(r8)
10104660:	10800044 	addi	r2,r2,1
10104664:	d8c02015 	stw	r3,128(sp)
10104668:	d8801f15 	stw	r2,124(sp)
1010466c:	010001c4 	movi	r4,7
10104670:	20832916 	blt	r4,r2,10105318 <___vfprintf_internal_r+0x1b54>
10104674:	42000204 	addi	r8,r8,8
10104678:	d8803317 	ldw	r2,204(sp)
1010467c:	143fffc4 	addi	r16,r2,-1
10104680:	043ec50e 	bge	zero,r16,10104198 <__alt_data_end+0xfffe4198>
10104684:	04400404 	movi	r17,16
10104688:	d8801f17 	ldw	r2,124(sp)
1010468c:	8c00880e 	bge	r17,r16,101048b0 <___vfprintf_internal_r+0x10ec>
10104690:	01440474 	movhi	r5,4113
10104694:	29444984 	addi	r5,r5,4390
10104698:	d9402b15 	stw	r5,172(sp)
1010469c:	058001c4 	movi	r22,7
101046a0:	dcc02c17 	ldw	r19,176(sp)
101046a4:	00000306 	br	101046b4 <___vfprintf_internal_r+0xef0>
101046a8:	42000204 	addi	r8,r8,8
101046ac:	843ffc04 	addi	r16,r16,-16
101046b0:	8c00820e 	bge	r17,r16,101048bc <___vfprintf_internal_r+0x10f8>
101046b4:	18c00404 	addi	r3,r3,16
101046b8:	10800044 	addi	r2,r2,1
101046bc:	45000015 	stw	r20,0(r8)
101046c0:	44400115 	stw	r17,4(r8)
101046c4:	d8c02015 	stw	r3,128(sp)
101046c8:	d8801f15 	stw	r2,124(sp)
101046cc:	b0bff60e 	bge	r22,r2,101046a8 <__alt_data_end+0xfffe46a8>
101046d0:	d9801e04 	addi	r6,sp,120
101046d4:	b80b883a 	mov	r5,r23
101046d8:	9809883a 	mov	r4,r19
101046dc:	01097b00 	call	101097b0 <__sprint_r>
101046e0:	103d3a1e 	bne	r2,zero,10103bcc <__alt_data_end+0xfffe3bcc>
101046e4:	d8c02017 	ldw	r3,128(sp)
101046e8:	d8801f17 	ldw	r2,124(sp)
101046ec:	da000404 	addi	r8,sp,16
101046f0:	003fee06 	br	101046ac <__alt_data_end+0xfffe46ac>
101046f4:	d9403117 	ldw	r5,196(sp)
101046f8:	d8802a17 	ldw	r2,168(sp)
101046fc:	28adc83a 	sub	r22,r5,r2
10104700:	05be630e 	bge	zero,r22,10104090 <__alt_data_end+0xfffe4090>
10104704:	07000404 	movi	fp,16
10104708:	d8801f17 	ldw	r2,124(sp)
1010470c:	e5838f0e 	bge	fp,r22,1010554c <___vfprintf_internal_r+0x1d88>
10104710:	01440474 	movhi	r5,4113
10104714:	29444984 	addi	r5,r5,4390
10104718:	dc403015 	stw	r17,192(sp)
1010471c:	d9402b15 	stw	r5,172(sp)
10104720:	b023883a 	mov	r17,r22
10104724:	04c001c4 	movi	r19,7
10104728:	a82d883a 	mov	r22,r21
1010472c:	902b883a 	mov	r21,r18
10104730:	8025883a 	mov	r18,r16
10104734:	dc002c17 	ldw	r16,176(sp)
10104738:	00000306 	br	10104748 <___vfprintf_internal_r+0xf84>
1010473c:	8c7ffc04 	addi	r17,r17,-16
10104740:	42000204 	addi	r8,r8,8
10104744:	e440110e 	bge	fp,r17,1010478c <___vfprintf_internal_r+0xfc8>
10104748:	18c00404 	addi	r3,r3,16
1010474c:	10800044 	addi	r2,r2,1
10104750:	45000015 	stw	r20,0(r8)
10104754:	47000115 	stw	fp,4(r8)
10104758:	d8c02015 	stw	r3,128(sp)
1010475c:	d8801f15 	stw	r2,124(sp)
10104760:	98bff60e 	bge	r19,r2,1010473c <__alt_data_end+0xfffe473c>
10104764:	d9801e04 	addi	r6,sp,120
10104768:	b80b883a 	mov	r5,r23
1010476c:	8009883a 	mov	r4,r16
10104770:	01097b00 	call	101097b0 <__sprint_r>
10104774:	103d151e 	bne	r2,zero,10103bcc <__alt_data_end+0xfffe3bcc>
10104778:	8c7ffc04 	addi	r17,r17,-16
1010477c:	d8c02017 	ldw	r3,128(sp)
10104780:	d8801f17 	ldw	r2,124(sp)
10104784:	da000404 	addi	r8,sp,16
10104788:	e47fef16 	blt	fp,r17,10104748 <__alt_data_end+0xfffe4748>
1010478c:	9021883a 	mov	r16,r18
10104790:	a825883a 	mov	r18,r21
10104794:	b02b883a 	mov	r21,r22
10104798:	882d883a 	mov	r22,r17
1010479c:	dc403017 	ldw	r17,192(sp)
101047a0:	d9002b17 	ldw	r4,172(sp)
101047a4:	1d87883a 	add	r3,r3,r22
101047a8:	10800044 	addi	r2,r2,1
101047ac:	41000015 	stw	r4,0(r8)
101047b0:	45800115 	stw	r22,4(r8)
101047b4:	d8c02015 	stw	r3,128(sp)
101047b8:	d8801f15 	stw	r2,124(sp)
101047bc:	010001c4 	movi	r4,7
101047c0:	20818e16 	blt	r4,r2,10104dfc <___vfprintf_internal_r+0x1638>
101047c4:	42000204 	addi	r8,r8,8
101047c8:	003e3106 	br	10104090 <__alt_data_end+0xfffe4090>
101047cc:	d9403317 	ldw	r5,204(sp)
101047d0:	00800044 	movi	r2,1
101047d4:	18c00044 	addi	r3,r3,1
101047d8:	1141530e 	bge	r2,r5,10104d28 <___vfprintf_internal_r+0x1564>
101047dc:	dc401f17 	ldw	r17,124(sp)
101047e0:	00800044 	movi	r2,1
101047e4:	40800115 	stw	r2,4(r8)
101047e8:	8c400044 	addi	r17,r17,1
101047ec:	44000015 	stw	r16,0(r8)
101047f0:	d8c02015 	stw	r3,128(sp)
101047f4:	dc401f15 	stw	r17,124(sp)
101047f8:	008001c4 	movi	r2,7
101047fc:	14416b16 	blt	r2,r17,10104dac <___vfprintf_internal_r+0x15e8>
10104800:	42000204 	addi	r8,r8,8
10104804:	d8803717 	ldw	r2,220(sp)
10104808:	d9003417 	ldw	r4,208(sp)
1010480c:	8c400044 	addi	r17,r17,1
10104810:	10c7883a 	add	r3,r2,r3
10104814:	40800115 	stw	r2,4(r8)
10104818:	41000015 	stw	r4,0(r8)
1010481c:	d8c02015 	stw	r3,128(sp)
10104820:	dc401f15 	stw	r17,124(sp)
10104824:	008001c4 	movi	r2,7
10104828:	14416916 	blt	r2,r17,10104dd0 <___vfprintf_internal_r+0x160c>
1010482c:	45800204 	addi	r22,r8,8
10104830:	d9003617 	ldw	r4,216(sp)
10104834:	d9403817 	ldw	r5,224(sp)
10104838:	000d883a 	mov	r6,zero
1010483c:	000f883a 	mov	r7,zero
10104840:	d8c03c15 	stw	r3,240(sp)
10104844:	010cf4c0 	call	1010cf4c <__eqdf2>
10104848:	d8c03c17 	ldw	r3,240(sp)
1010484c:	1000bc26 	beq	r2,zero,10104b40 <___vfprintf_internal_r+0x137c>
10104850:	d9403317 	ldw	r5,204(sp)
10104854:	84000044 	addi	r16,r16,1
10104858:	8c400044 	addi	r17,r17,1
1010485c:	28bfffc4 	addi	r2,r5,-1
10104860:	1887883a 	add	r3,r3,r2
10104864:	b0800115 	stw	r2,4(r22)
10104868:	b4000015 	stw	r16,0(r22)
1010486c:	d8c02015 	stw	r3,128(sp)
10104870:	dc401f15 	stw	r17,124(sp)
10104874:	008001c4 	movi	r2,7
10104878:	14414316 	blt	r2,r17,10104d88 <___vfprintf_internal_r+0x15c4>
1010487c:	b5800204 	addi	r22,r22,8
10104880:	d9003a17 	ldw	r4,232(sp)
10104884:	df0022c4 	addi	fp,sp,139
10104888:	8c400044 	addi	r17,r17,1
1010488c:	20c7883a 	add	r3,r4,r3
10104890:	b7000015 	stw	fp,0(r22)
10104894:	b1000115 	stw	r4,4(r22)
10104898:	d8c02015 	stw	r3,128(sp)
1010489c:	dc401f15 	stw	r17,124(sp)
101048a0:	008001c4 	movi	r2,7
101048a4:	14400e16 	blt	r2,r17,101048e0 <___vfprintf_internal_r+0x111c>
101048a8:	b2000204 	addi	r8,r22,8
101048ac:	003e3a06 	br	10104198 <__alt_data_end+0xfffe4198>
101048b0:	01040474 	movhi	r4,4113
101048b4:	21044984 	addi	r4,r4,4390
101048b8:	d9002b15 	stw	r4,172(sp)
101048bc:	d9002b17 	ldw	r4,172(sp)
101048c0:	1c07883a 	add	r3,r3,r16
101048c4:	44000115 	stw	r16,4(r8)
101048c8:	41000015 	stw	r4,0(r8)
101048cc:	10800044 	addi	r2,r2,1
101048d0:	d8c02015 	stw	r3,128(sp)
101048d4:	d8801f15 	stw	r2,124(sp)
101048d8:	010001c4 	movi	r4,7
101048dc:	20be2d0e 	bge	r4,r2,10104194 <__alt_data_end+0xfffe4194>
101048e0:	d9002c17 	ldw	r4,176(sp)
101048e4:	d9801e04 	addi	r6,sp,120
101048e8:	b80b883a 	mov	r5,r23
101048ec:	01097b00 	call	101097b0 <__sprint_r>
101048f0:	103cb61e 	bne	r2,zero,10103bcc <__alt_data_end+0xfffe3bcc>
101048f4:	d8c02017 	ldw	r3,128(sp)
101048f8:	da000404 	addi	r8,sp,16
101048fc:	003e2606 	br	10104198 <__alt_data_end+0xfffe4198>
10104900:	d9002c17 	ldw	r4,176(sp)
10104904:	d9801e04 	addi	r6,sp,120
10104908:	b80b883a 	mov	r5,r23
1010490c:	01097b00 	call	101097b0 <__sprint_r>
10104910:	103e5d26 	beq	r2,zero,10104288 <__alt_data_end+0xfffe4288>
10104914:	003cad06 	br	10103bcc <__alt_data_end+0xfffe3bcc>
10104918:	d9002c17 	ldw	r4,176(sp)
1010491c:	d9801e04 	addi	r6,sp,120
10104920:	b80b883a 	mov	r5,r23
10104924:	01097b00 	call	101097b0 <__sprint_r>
10104928:	103ca81e 	bne	r2,zero,10103bcc <__alt_data_end+0xfffe3bcc>
1010492c:	d8c02017 	ldw	r3,128(sp)
10104930:	da000404 	addi	r8,sp,16
10104934:	003e0b06 	br	10104164 <__alt_data_end+0xfffe4164>
10104938:	d9002c17 	ldw	r4,176(sp)
1010493c:	d9801e04 	addi	r6,sp,120
10104940:	b80b883a 	mov	r5,r23
10104944:	01097b00 	call	101097b0 <__sprint_r>
10104948:	103ca01e 	bne	r2,zero,10103bcc <__alt_data_end+0xfffe3bcc>
1010494c:	d8c02017 	ldw	r3,128(sp)
10104950:	da000404 	addi	r8,sp,16
10104954:	003dbd06 	br	1010404c <__alt_data_end+0xfffe404c>
10104958:	d9002c17 	ldw	r4,176(sp)
1010495c:	d9801e04 	addi	r6,sp,120
10104960:	b80b883a 	mov	r5,r23
10104964:	01097b00 	call	101097b0 <__sprint_r>
10104968:	103c981e 	bne	r2,zero,10103bcc <__alt_data_end+0xfffe3bcc>
1010496c:	d8c02017 	ldw	r3,128(sp)
10104970:	da000404 	addi	r8,sp,16
10104974:	003dc306 	br	10104084 <__alt_data_end+0xfffe4084>
10104978:	d8802917 	ldw	r2,164(sp)
1010497c:	d8002785 	stb	zero,158(sp)
10104980:	103f0616 	blt	r2,zero,1010459c <__alt_data_end+0xfffe459c>
10104984:	00ffdfc4 	movi	r3,-129
10104988:	9d84b03a 	or	r2,r19,r22
1010498c:	90e4703a 	and	r18,r18,r3
10104990:	103c6b26 	beq	r2,zero,10103b40 <__alt_data_end+0xfffe3b40>
10104994:	0039883a 	mov	fp,zero
10104998:	003e7406 	br	1010436c <__alt_data_end+0xfffe436c>
1010499c:	9080040c 	andi	r2,r18,16
101049a0:	1001b326 	beq	r2,zero,10105070 <___vfprintf_internal_r+0x18ac>
101049a4:	d9002d17 	ldw	r4,180(sp)
101049a8:	d9402917 	ldw	r5,164(sp)
101049ac:	d8002785 	stb	zero,158(sp)
101049b0:	20800104 	addi	r2,r4,4
101049b4:	24c00017 	ldw	r19,0(r4)
101049b8:	002d883a 	mov	r22,zero
101049bc:	2801b516 	blt	r5,zero,10105094 <___vfprintf_internal_r+0x18d0>
101049c0:	00ffdfc4 	movi	r3,-129
101049c4:	d8802d15 	stw	r2,180(sp)
101049c8:	90e4703a 	and	r18,r18,r3
101049cc:	983d2726 	beq	r19,zero,10103e6c <__alt_data_end+0xfffe3e6c>
101049d0:	0039883a 	mov	fp,zero
101049d4:	003d2a06 	br	10103e80 <__alt_data_end+0xfffe3e80>
101049d8:	dc402617 	ldw	r17,152(sp)
101049dc:	0441d30e 	bge	zero,r17,1010512c <___vfprintf_internal_r+0x1968>
101049e0:	dc403217 	ldw	r17,200(sp)
101049e4:	d8803317 	ldw	r2,204(sp)
101049e8:	1440010e 	bge	r2,r17,101049f0 <___vfprintf_internal_r+0x122c>
101049ec:	1023883a 	mov	r17,r2
101049f0:	04400a0e 	bge	zero,r17,10104a1c <___vfprintf_internal_r+0x1258>
101049f4:	d8801f17 	ldw	r2,124(sp)
101049f8:	1c47883a 	add	r3,r3,r17
101049fc:	44000015 	stw	r16,0(r8)
10104a00:	10800044 	addi	r2,r2,1
10104a04:	44400115 	stw	r17,4(r8)
10104a08:	d8c02015 	stw	r3,128(sp)
10104a0c:	d8801f15 	stw	r2,124(sp)
10104a10:	010001c4 	movi	r4,7
10104a14:	20826516 	blt	r4,r2,101053ac <___vfprintf_internal_r+0x1be8>
10104a18:	42000204 	addi	r8,r8,8
10104a1c:	88026116 	blt	r17,zero,101053a4 <___vfprintf_internal_r+0x1be0>
10104a20:	d9003217 	ldw	r4,200(sp)
10104a24:	2463c83a 	sub	r17,r4,r17
10104a28:	04407b0e 	bge	zero,r17,10104c18 <___vfprintf_internal_r+0x1454>
10104a2c:	05800404 	movi	r22,16
10104a30:	d8801f17 	ldw	r2,124(sp)
10104a34:	b4419d0e 	bge	r22,r17,101050ac <___vfprintf_internal_r+0x18e8>
10104a38:	01040474 	movhi	r4,4113
10104a3c:	21044984 	addi	r4,r4,4390
10104a40:	d9002b15 	stw	r4,172(sp)
10104a44:	070001c4 	movi	fp,7
10104a48:	dcc02c17 	ldw	r19,176(sp)
10104a4c:	00000306 	br	10104a5c <___vfprintf_internal_r+0x1298>
10104a50:	42000204 	addi	r8,r8,8
10104a54:	8c7ffc04 	addi	r17,r17,-16
10104a58:	b441970e 	bge	r22,r17,101050b8 <___vfprintf_internal_r+0x18f4>
10104a5c:	18c00404 	addi	r3,r3,16
10104a60:	10800044 	addi	r2,r2,1
10104a64:	45000015 	stw	r20,0(r8)
10104a68:	45800115 	stw	r22,4(r8)
10104a6c:	d8c02015 	stw	r3,128(sp)
10104a70:	d8801f15 	stw	r2,124(sp)
10104a74:	e0bff60e 	bge	fp,r2,10104a50 <__alt_data_end+0xfffe4a50>
10104a78:	d9801e04 	addi	r6,sp,120
10104a7c:	b80b883a 	mov	r5,r23
10104a80:	9809883a 	mov	r4,r19
10104a84:	01097b00 	call	101097b0 <__sprint_r>
10104a88:	103c501e 	bne	r2,zero,10103bcc <__alt_data_end+0xfffe3bcc>
10104a8c:	d8c02017 	ldw	r3,128(sp)
10104a90:	d8801f17 	ldw	r2,124(sp)
10104a94:	da000404 	addi	r8,sp,16
10104a98:	003fee06 	br	10104a54 <__alt_data_end+0xfffe4a54>
10104a9c:	d9002c17 	ldw	r4,176(sp)
10104aa0:	d9801e04 	addi	r6,sp,120
10104aa4:	b80b883a 	mov	r5,r23
10104aa8:	01097b00 	call	101097b0 <__sprint_r>
10104aac:	103c471e 	bne	r2,zero,10103bcc <__alt_data_end+0xfffe3bcc>
10104ab0:	d8c02017 	ldw	r3,128(sp)
10104ab4:	df002787 	ldb	fp,158(sp)
10104ab8:	da000404 	addi	r8,sp,16
10104abc:	003d5606 	br	10104018 <__alt_data_end+0xfffe4018>
10104ac0:	9080040c 	andi	r2,r18,16
10104ac4:	10016126 	beq	r2,zero,1010504c <___vfprintf_internal_r+0x1888>
10104ac8:	d8802d17 	ldw	r2,180(sp)
10104acc:	14c00017 	ldw	r19,0(r2)
10104ad0:	10800104 	addi	r2,r2,4
10104ad4:	d8802d15 	stw	r2,180(sp)
10104ad8:	982dd7fa 	srai	r22,r19,31
10104adc:	b005883a 	mov	r2,r22
10104ae0:	003c8206 	br	10103cec <__alt_data_end+0xfffe3cec>
10104ae4:	9080040c 	andi	r2,r18,16
10104ae8:	10003526 	beq	r2,zero,10104bc0 <___vfprintf_internal_r+0x13fc>
10104aec:	d9402d17 	ldw	r5,180(sp)
10104af0:	d8c02917 	ldw	r3,164(sp)
10104af4:	d8002785 	stb	zero,158(sp)
10104af8:	28800104 	addi	r2,r5,4
10104afc:	2cc00017 	ldw	r19,0(r5)
10104b00:	002d883a 	mov	r22,zero
10104b04:	18003716 	blt	r3,zero,10104be4 <___vfprintf_internal_r+0x1420>
10104b08:	00ffdfc4 	movi	r3,-129
10104b0c:	d8802d15 	stw	r2,180(sp)
10104b10:	90e4703a 	and	r18,r18,r3
10104b14:	0039883a 	mov	fp,zero
10104b18:	983df326 	beq	r19,zero,101042e8 <__alt_data_end+0xfffe42e8>
10104b1c:	00800244 	movi	r2,9
10104b20:	14fc7b36 	bltu	r2,r19,10103d10 <__alt_data_end+0xfffe3d10>
10104b24:	d8c02817 	ldw	r3,160(sp)
10104b28:	dc001dc4 	addi	r16,sp,119
10104b2c:	9cc00c04 	addi	r19,r19,48
10104b30:	1c07c83a 	sub	r3,r3,r16
10104b34:	dcc01dc5 	stb	r19,119(sp)
10104b38:	d8c02e15 	stw	r3,184(sp)
10104b3c:	003ce806 	br	10103ee0 <__alt_data_end+0xfffe3ee0>
10104b40:	d8803317 	ldw	r2,204(sp)
10104b44:	143fffc4 	addi	r16,r2,-1
10104b48:	043f4d0e 	bge	zero,r16,10104880 <__alt_data_end+0xfffe4880>
10104b4c:	07000404 	movi	fp,16
10104b50:	e400810e 	bge	fp,r16,10104d58 <___vfprintf_internal_r+0x1594>
10104b54:	01440474 	movhi	r5,4113
10104b58:	29444984 	addi	r5,r5,4390
10104b5c:	d9402b15 	stw	r5,172(sp)
10104b60:	01c001c4 	movi	r7,7
10104b64:	dcc02c17 	ldw	r19,176(sp)
10104b68:	00000306 	br	10104b78 <___vfprintf_internal_r+0x13b4>
10104b6c:	b5800204 	addi	r22,r22,8
10104b70:	843ffc04 	addi	r16,r16,-16
10104b74:	e4007b0e 	bge	fp,r16,10104d64 <___vfprintf_internal_r+0x15a0>
10104b78:	18c00404 	addi	r3,r3,16
10104b7c:	8c400044 	addi	r17,r17,1
10104b80:	b5000015 	stw	r20,0(r22)
10104b84:	b7000115 	stw	fp,4(r22)
10104b88:	d8c02015 	stw	r3,128(sp)
10104b8c:	dc401f15 	stw	r17,124(sp)
10104b90:	3c7ff60e 	bge	r7,r17,10104b6c <__alt_data_end+0xfffe4b6c>
10104b94:	d9801e04 	addi	r6,sp,120
10104b98:	b80b883a 	mov	r5,r23
10104b9c:	9809883a 	mov	r4,r19
10104ba0:	d9c03c15 	stw	r7,240(sp)
10104ba4:	01097b00 	call	101097b0 <__sprint_r>
10104ba8:	d9c03c17 	ldw	r7,240(sp)
10104bac:	103c071e 	bne	r2,zero,10103bcc <__alt_data_end+0xfffe3bcc>
10104bb0:	d8c02017 	ldw	r3,128(sp)
10104bb4:	dc401f17 	ldw	r17,124(sp)
10104bb8:	dd800404 	addi	r22,sp,16
10104bbc:	003fec06 	br	10104b70 <__alt_data_end+0xfffe4b70>
10104bc0:	9080100c 	andi	r2,r18,64
10104bc4:	d8002785 	stb	zero,158(sp)
10104bc8:	10010e26 	beq	r2,zero,10105004 <___vfprintf_internal_r+0x1840>
10104bcc:	d9002d17 	ldw	r4,180(sp)
10104bd0:	d9402917 	ldw	r5,164(sp)
10104bd4:	002d883a 	mov	r22,zero
10104bd8:	20800104 	addi	r2,r4,4
10104bdc:	24c0000b 	ldhu	r19,0(r4)
10104be0:	283fc90e 	bge	r5,zero,10104b08 <__alt_data_end+0xfffe4b08>
10104be4:	d8802d15 	stw	r2,180(sp)
10104be8:	0039883a 	mov	fp,zero
10104bec:	9d84b03a 	or	r2,r19,r22
10104bf0:	103c461e 	bne	r2,zero,10103d0c <__alt_data_end+0xfffe3d0c>
10104bf4:	00800044 	movi	r2,1
10104bf8:	003e6c06 	br	101045ac <__alt_data_end+0xfffe45ac>
10104bfc:	d9002c17 	ldw	r4,176(sp)
10104c00:	d9801e04 	addi	r6,sp,120
10104c04:	b80b883a 	mov	r5,r23
10104c08:	01097b00 	call	101097b0 <__sprint_r>
10104c0c:	103bef1e 	bne	r2,zero,10103bcc <__alt_data_end+0xfffe3bcc>
10104c10:	d8c02017 	ldw	r3,128(sp)
10104c14:	da000404 	addi	r8,sp,16
10104c18:	d9003217 	ldw	r4,200(sp)
10104c1c:	d8802617 	ldw	r2,152(sp)
10104c20:	d9403317 	ldw	r5,204(sp)
10104c24:	8123883a 	add	r17,r16,r4
10104c28:	11400216 	blt	r2,r5,10104c34 <___vfprintf_internal_r+0x1470>
10104c2c:	9100004c 	andi	r4,r18,1
10104c30:	20000d26 	beq	r4,zero,10104c68 <___vfprintf_internal_r+0x14a4>
10104c34:	d9003717 	ldw	r4,220(sp)
10104c38:	d9403417 	ldw	r5,208(sp)
10104c3c:	1907883a 	add	r3,r3,r4
10104c40:	d9001f17 	ldw	r4,124(sp)
10104c44:	41400015 	stw	r5,0(r8)
10104c48:	d9403717 	ldw	r5,220(sp)
10104c4c:	21000044 	addi	r4,r4,1
10104c50:	d8c02015 	stw	r3,128(sp)
10104c54:	41400115 	stw	r5,4(r8)
10104c58:	d9001f15 	stw	r4,124(sp)
10104c5c:	014001c4 	movi	r5,7
10104c60:	2901e816 	blt	r5,r4,10105404 <___vfprintf_internal_r+0x1c40>
10104c64:	42000204 	addi	r8,r8,8
10104c68:	d9003317 	ldw	r4,204(sp)
10104c6c:	8121883a 	add	r16,r16,r4
10104c70:	2085c83a 	sub	r2,r4,r2
10104c74:	8461c83a 	sub	r16,r16,r17
10104c78:	1400010e 	bge	r2,r16,10104c80 <___vfprintf_internal_r+0x14bc>
10104c7c:	1021883a 	mov	r16,r2
10104c80:	04000a0e 	bge	zero,r16,10104cac <___vfprintf_internal_r+0x14e8>
10104c84:	d9001f17 	ldw	r4,124(sp)
10104c88:	1c07883a 	add	r3,r3,r16
10104c8c:	44400015 	stw	r17,0(r8)
10104c90:	21000044 	addi	r4,r4,1
10104c94:	44000115 	stw	r16,4(r8)
10104c98:	d8c02015 	stw	r3,128(sp)
10104c9c:	d9001f15 	stw	r4,124(sp)
10104ca0:	014001c4 	movi	r5,7
10104ca4:	2901fb16 	blt	r5,r4,10105494 <___vfprintf_internal_r+0x1cd0>
10104ca8:	42000204 	addi	r8,r8,8
10104cac:	8001f716 	blt	r16,zero,1010548c <___vfprintf_internal_r+0x1cc8>
10104cb0:	1421c83a 	sub	r16,r2,r16
10104cb4:	043d380e 	bge	zero,r16,10104198 <__alt_data_end+0xfffe4198>
10104cb8:	04400404 	movi	r17,16
10104cbc:	d8801f17 	ldw	r2,124(sp)
10104cc0:	8c3efb0e 	bge	r17,r16,101048b0 <__alt_data_end+0xfffe48b0>
10104cc4:	01440474 	movhi	r5,4113
10104cc8:	29444984 	addi	r5,r5,4390
10104ccc:	d9402b15 	stw	r5,172(sp)
10104cd0:	058001c4 	movi	r22,7
10104cd4:	dcc02c17 	ldw	r19,176(sp)
10104cd8:	00000306 	br	10104ce8 <___vfprintf_internal_r+0x1524>
10104cdc:	42000204 	addi	r8,r8,8
10104ce0:	843ffc04 	addi	r16,r16,-16
10104ce4:	8c3ef50e 	bge	r17,r16,101048bc <__alt_data_end+0xfffe48bc>
10104ce8:	18c00404 	addi	r3,r3,16
10104cec:	10800044 	addi	r2,r2,1
10104cf0:	45000015 	stw	r20,0(r8)
10104cf4:	44400115 	stw	r17,4(r8)
10104cf8:	d8c02015 	stw	r3,128(sp)
10104cfc:	d8801f15 	stw	r2,124(sp)
10104d00:	b0bff60e 	bge	r22,r2,10104cdc <__alt_data_end+0xfffe4cdc>
10104d04:	d9801e04 	addi	r6,sp,120
10104d08:	b80b883a 	mov	r5,r23
10104d0c:	9809883a 	mov	r4,r19
10104d10:	01097b00 	call	101097b0 <__sprint_r>
10104d14:	103bad1e 	bne	r2,zero,10103bcc <__alt_data_end+0xfffe3bcc>
10104d18:	d8c02017 	ldw	r3,128(sp)
10104d1c:	d8801f17 	ldw	r2,124(sp)
10104d20:	da000404 	addi	r8,sp,16
10104d24:	003fee06 	br	10104ce0 <__alt_data_end+0xfffe4ce0>
10104d28:	9088703a 	and	r4,r18,r2
10104d2c:	203eab1e 	bne	r4,zero,101047dc <__alt_data_end+0xfffe47dc>
10104d30:	dc401f17 	ldw	r17,124(sp)
10104d34:	40800115 	stw	r2,4(r8)
10104d38:	44000015 	stw	r16,0(r8)
10104d3c:	8c400044 	addi	r17,r17,1
10104d40:	d8c02015 	stw	r3,128(sp)
10104d44:	dc401f15 	stw	r17,124(sp)
10104d48:	008001c4 	movi	r2,7
10104d4c:	14400e16 	blt	r2,r17,10104d88 <___vfprintf_internal_r+0x15c4>
10104d50:	45800204 	addi	r22,r8,8
10104d54:	003eca06 	br	10104880 <__alt_data_end+0xfffe4880>
10104d58:	01040474 	movhi	r4,4113
10104d5c:	21044984 	addi	r4,r4,4390
10104d60:	d9002b15 	stw	r4,172(sp)
10104d64:	d8802b17 	ldw	r2,172(sp)
10104d68:	1c07883a 	add	r3,r3,r16
10104d6c:	8c400044 	addi	r17,r17,1
10104d70:	b0800015 	stw	r2,0(r22)
10104d74:	b4000115 	stw	r16,4(r22)
10104d78:	d8c02015 	stw	r3,128(sp)
10104d7c:	dc401f15 	stw	r17,124(sp)
10104d80:	008001c4 	movi	r2,7
10104d84:	147ebd0e 	bge	r2,r17,1010487c <__alt_data_end+0xfffe487c>
10104d88:	d9002c17 	ldw	r4,176(sp)
10104d8c:	d9801e04 	addi	r6,sp,120
10104d90:	b80b883a 	mov	r5,r23
10104d94:	01097b00 	call	101097b0 <__sprint_r>
10104d98:	103b8c1e 	bne	r2,zero,10103bcc <__alt_data_end+0xfffe3bcc>
10104d9c:	d8c02017 	ldw	r3,128(sp)
10104da0:	dc401f17 	ldw	r17,124(sp)
10104da4:	dd800404 	addi	r22,sp,16
10104da8:	003eb506 	br	10104880 <__alt_data_end+0xfffe4880>
10104dac:	d9002c17 	ldw	r4,176(sp)
10104db0:	d9801e04 	addi	r6,sp,120
10104db4:	b80b883a 	mov	r5,r23
10104db8:	01097b00 	call	101097b0 <__sprint_r>
10104dbc:	103b831e 	bne	r2,zero,10103bcc <__alt_data_end+0xfffe3bcc>
10104dc0:	d8c02017 	ldw	r3,128(sp)
10104dc4:	dc401f17 	ldw	r17,124(sp)
10104dc8:	da000404 	addi	r8,sp,16
10104dcc:	003e8d06 	br	10104804 <__alt_data_end+0xfffe4804>
10104dd0:	d9002c17 	ldw	r4,176(sp)
10104dd4:	d9801e04 	addi	r6,sp,120
10104dd8:	b80b883a 	mov	r5,r23
10104ddc:	01097b00 	call	101097b0 <__sprint_r>
10104de0:	103b7a1e 	bne	r2,zero,10103bcc <__alt_data_end+0xfffe3bcc>
10104de4:	d8c02017 	ldw	r3,128(sp)
10104de8:	dc401f17 	ldw	r17,124(sp)
10104dec:	dd800404 	addi	r22,sp,16
10104df0:	003e8f06 	br	10104830 <__alt_data_end+0xfffe4830>
10104df4:	0027883a 	mov	r19,zero
10104df8:	003f4a06 	br	10104b24 <__alt_data_end+0xfffe4b24>
10104dfc:	d9002c17 	ldw	r4,176(sp)
10104e00:	d9801e04 	addi	r6,sp,120
10104e04:	b80b883a 	mov	r5,r23
10104e08:	01097b00 	call	101097b0 <__sprint_r>
10104e0c:	103b6f1e 	bne	r2,zero,10103bcc <__alt_data_end+0xfffe3bcc>
10104e10:	d8c02017 	ldw	r3,128(sp)
10104e14:	da000404 	addi	r8,sp,16
10104e18:	003c9d06 	br	10104090 <__alt_data_end+0xfffe4090>
10104e1c:	04e7c83a 	sub	r19,zero,r19
10104e20:	9804c03a 	cmpne	r2,r19,zero
10104e24:	05adc83a 	sub	r22,zero,r22
10104e28:	b0adc83a 	sub	r22,r22,r2
10104e2c:	d8802917 	ldw	r2,164(sp)
10104e30:	07000b44 	movi	fp,45
10104e34:	df002785 	stb	fp,158(sp)
10104e38:	10017b16 	blt	r2,zero,10105428 <___vfprintf_internal_r+0x1c64>
10104e3c:	00bfdfc4 	movi	r2,-129
10104e40:	90a4703a 	and	r18,r18,r2
10104e44:	003bb106 	br	10103d0c <__alt_data_end+0xfffe3d0c>
10104e48:	d9003617 	ldw	r4,216(sp)
10104e4c:	d9403817 	ldw	r5,224(sp)
10104e50:	da003d15 	stw	r8,244(sp)
10104e54:	01095640 	call	10109564 <__fpclassifyd>
10104e58:	da003d17 	ldw	r8,244(sp)
10104e5c:	1000f026 	beq	r2,zero,10105220 <___vfprintf_internal_r+0x1a5c>
10104e60:	d9002917 	ldw	r4,164(sp)
10104e64:	05bff7c4 	movi	r22,-33
10104e68:	00bfffc4 	movi	r2,-1
10104e6c:	8dac703a 	and	r22,r17,r22
10104e70:	20820026 	beq	r4,r2,10105674 <___vfprintf_internal_r+0x1eb0>
10104e74:	008011c4 	movi	r2,71
10104e78:	b081f726 	beq	r22,r2,10105658 <___vfprintf_internal_r+0x1e94>
10104e7c:	d9003817 	ldw	r4,224(sp)
10104e80:	90c04014 	ori	r3,r18,256
10104e84:	d8c02b15 	stw	r3,172(sp)
10104e88:	20021516 	blt	r4,zero,101056e0 <___vfprintf_internal_r+0x1f1c>
10104e8c:	dcc03817 	ldw	r19,224(sp)
10104e90:	d8002a05 	stb	zero,168(sp)
10104e94:	00801984 	movi	r2,102
10104e98:	8881f926 	beq	r17,r2,10105680 <___vfprintf_internal_r+0x1ebc>
10104e9c:	00801184 	movi	r2,70
10104ea0:	88821c26 	beq	r17,r2,10105714 <___vfprintf_internal_r+0x1f50>
10104ea4:	00801144 	movi	r2,69
10104ea8:	b081ef26 	beq	r22,r2,10105668 <___vfprintf_internal_r+0x1ea4>
10104eac:	d8c02917 	ldw	r3,164(sp)
10104eb0:	d8802104 	addi	r2,sp,132
10104eb4:	d8800315 	stw	r2,12(sp)
10104eb8:	d9403617 	ldw	r5,216(sp)
10104ebc:	d8802504 	addi	r2,sp,148
10104ec0:	d9002c17 	ldw	r4,176(sp)
10104ec4:	d8800215 	stw	r2,8(sp)
10104ec8:	d8802604 	addi	r2,sp,152
10104ecc:	d8c00015 	stw	r3,0(sp)
10104ed0:	d8800115 	stw	r2,4(sp)
10104ed4:	01c00084 	movi	r7,2
10104ed8:	980d883a 	mov	r6,r19
10104edc:	d8c03c15 	stw	r3,240(sp)
10104ee0:	da003d15 	stw	r8,244(sp)
10104ee4:	0105e9c0 	call	10105e9c <_dtoa_r>
10104ee8:	1021883a 	mov	r16,r2
10104eec:	008019c4 	movi	r2,103
10104ef0:	d8c03c17 	ldw	r3,240(sp)
10104ef4:	da003d17 	ldw	r8,244(sp)
10104ef8:	88817126 	beq	r17,r2,101054c0 <___vfprintf_internal_r+0x1cfc>
10104efc:	008011c4 	movi	r2,71
10104f00:	88829226 	beq	r17,r2,1010594c <___vfprintf_internal_r+0x2188>
10104f04:	80f9883a 	add	fp,r16,r3
10104f08:	d9003617 	ldw	r4,216(sp)
10104f0c:	000d883a 	mov	r6,zero
10104f10:	000f883a 	mov	r7,zero
10104f14:	980b883a 	mov	r5,r19
10104f18:	da003d15 	stw	r8,244(sp)
10104f1c:	010cf4c0 	call	1010cf4c <__eqdf2>
10104f20:	da003d17 	ldw	r8,244(sp)
10104f24:	10018d26 	beq	r2,zero,1010555c <___vfprintf_internal_r+0x1d98>
10104f28:	d8802117 	ldw	r2,132(sp)
10104f2c:	1700062e 	bgeu	r2,fp,10104f48 <___vfprintf_internal_r+0x1784>
10104f30:	01000c04 	movi	r4,48
10104f34:	10c00044 	addi	r3,r2,1
10104f38:	d8c02115 	stw	r3,132(sp)
10104f3c:	11000005 	stb	r4,0(r2)
10104f40:	d8802117 	ldw	r2,132(sp)
10104f44:	173ffb36 	bltu	r2,fp,10104f34 <__alt_data_end+0xfffe4f34>
10104f48:	1405c83a 	sub	r2,r2,r16
10104f4c:	d8803315 	stw	r2,204(sp)
10104f50:	008011c4 	movi	r2,71
10104f54:	b0817626 	beq	r22,r2,10105530 <___vfprintf_internal_r+0x1d6c>
10104f58:	00801944 	movi	r2,101
10104f5c:	1442810e 	bge	r2,r17,10105964 <___vfprintf_internal_r+0x21a0>
10104f60:	d8c02617 	ldw	r3,152(sp)
10104f64:	00801984 	movi	r2,102
10104f68:	d8c03215 	stw	r3,200(sp)
10104f6c:	8881fe26 	beq	r17,r2,10105768 <___vfprintf_internal_r+0x1fa4>
10104f70:	d8c03217 	ldw	r3,200(sp)
10104f74:	d9003317 	ldw	r4,204(sp)
10104f78:	1901dd16 	blt	r3,r4,101056f0 <___vfprintf_internal_r+0x1f2c>
10104f7c:	9480004c 	andi	r18,r18,1
10104f80:	90022b1e 	bne	r18,zero,10105830 <___vfprintf_internal_r+0x206c>
10104f84:	1805883a 	mov	r2,r3
10104f88:	18028016 	blt	r3,zero,1010598c <___vfprintf_internal_r+0x21c8>
10104f8c:	d8c03217 	ldw	r3,200(sp)
10104f90:	044019c4 	movi	r17,103
10104f94:	d8c02e15 	stw	r3,184(sp)
10104f98:	df002a07 	ldb	fp,168(sp)
10104f9c:	e001531e 	bne	fp,zero,101054ec <___vfprintf_internal_r+0x1d28>
10104fa0:	df002783 	ldbu	fp,158(sp)
10104fa4:	d8802a15 	stw	r2,168(sp)
10104fa8:	dc802b17 	ldw	r18,172(sp)
10104fac:	d8002915 	stw	zero,164(sp)
10104fb0:	003bd106 	br	10103ef8 <__alt_data_end+0xfffe3ef8>
10104fb4:	d8802d17 	ldw	r2,180(sp)
10104fb8:	d8c02d17 	ldw	r3,180(sp)
10104fbc:	d9002d17 	ldw	r4,180(sp)
10104fc0:	10800017 	ldw	r2,0(r2)
10104fc4:	18c00117 	ldw	r3,4(r3)
10104fc8:	21000204 	addi	r4,r4,8
10104fcc:	d8803615 	stw	r2,216(sp)
10104fd0:	d8c03815 	stw	r3,224(sp)
10104fd4:	d9002d15 	stw	r4,180(sp)
10104fd8:	003b7506 	br	10103db0 <__alt_data_end+0xfffe3db0>
10104fdc:	ac400007 	ldb	r17,0(r21)
10104fe0:	003a5906 	br	10103948 <__alt_data_end+0xfffe3948>
10104fe4:	9080100c 	andi	r2,r18,64
10104fe8:	1000a826 	beq	r2,zero,1010528c <___vfprintf_internal_r+0x1ac8>
10104fec:	d9002d17 	ldw	r4,180(sp)
10104ff0:	002d883a 	mov	r22,zero
10104ff4:	24c0000b 	ldhu	r19,0(r4)
10104ff8:	21000104 	addi	r4,r4,4
10104ffc:	d9002d15 	stw	r4,180(sp)
10105000:	003ccb06 	br	10104330 <__alt_data_end+0xfffe4330>
10105004:	d8c02d17 	ldw	r3,180(sp)
10105008:	d9002917 	ldw	r4,164(sp)
1010500c:	002d883a 	mov	r22,zero
10105010:	18800104 	addi	r2,r3,4
10105014:	1cc00017 	ldw	r19,0(r3)
10105018:	203ebb0e 	bge	r4,zero,10104b08 <__alt_data_end+0xfffe4b08>
1010501c:	003ef106 	br	10104be4 <__alt_data_end+0xfffe4be4>
10105020:	9080040c 	andi	r2,r18,16
10105024:	1000921e 	bne	r2,zero,10105270 <___vfprintf_internal_r+0x1aac>
10105028:	9480100c 	andi	r18,r18,64
1010502c:	90013926 	beq	r18,zero,10105514 <___vfprintf_internal_r+0x1d50>
10105030:	d9002d17 	ldw	r4,180(sp)
10105034:	d9402f17 	ldw	r5,188(sp)
10105038:	20800017 	ldw	r2,0(r4)
1010503c:	21000104 	addi	r4,r4,4
10105040:	d9002d15 	stw	r4,180(sp)
10105044:	1140000d 	sth	r5,0(r2)
10105048:	003a1606 	br	101038a4 <__alt_data_end+0xfffe38a4>
1010504c:	9080100c 	andi	r2,r18,64
10105050:	10008026 	beq	r2,zero,10105254 <___vfprintf_internal_r+0x1a90>
10105054:	d8c02d17 	ldw	r3,180(sp)
10105058:	1cc0000f 	ldh	r19,0(r3)
1010505c:	18c00104 	addi	r3,r3,4
10105060:	d8c02d15 	stw	r3,180(sp)
10105064:	982dd7fa 	srai	r22,r19,31
10105068:	b005883a 	mov	r2,r22
1010506c:	003b1f06 	br	10103cec <__alt_data_end+0xfffe3cec>
10105070:	9080100c 	andi	r2,r18,64
10105074:	d8002785 	stb	zero,158(sp)
10105078:	10008a1e 	bne	r2,zero,101052a4 <___vfprintf_internal_r+0x1ae0>
1010507c:	d9402d17 	ldw	r5,180(sp)
10105080:	d8c02917 	ldw	r3,164(sp)
10105084:	002d883a 	mov	r22,zero
10105088:	28800104 	addi	r2,r5,4
1010508c:	2cc00017 	ldw	r19,0(r5)
10105090:	183e4b0e 	bge	r3,zero,101049c0 <__alt_data_end+0xfffe49c0>
10105094:	9d86b03a 	or	r3,r19,r22
10105098:	d8802d15 	stw	r2,180(sp)
1010509c:	183e4c1e 	bne	r3,zero,101049d0 <__alt_data_end+0xfffe49d0>
101050a0:	0039883a 	mov	fp,zero
101050a4:	0005883a 	mov	r2,zero
101050a8:	003d4006 	br	101045ac <__alt_data_end+0xfffe45ac>
101050ac:	01440474 	movhi	r5,4113
101050b0:	29444984 	addi	r5,r5,4390
101050b4:	d9402b15 	stw	r5,172(sp)
101050b8:	d9402b17 	ldw	r5,172(sp)
101050bc:	1c47883a 	add	r3,r3,r17
101050c0:	10800044 	addi	r2,r2,1
101050c4:	41400015 	stw	r5,0(r8)
101050c8:	44400115 	stw	r17,4(r8)
101050cc:	d8c02015 	stw	r3,128(sp)
101050d0:	d8801f15 	stw	r2,124(sp)
101050d4:	010001c4 	movi	r4,7
101050d8:	20bec816 	blt	r4,r2,10104bfc <__alt_data_end+0xfffe4bfc>
101050dc:	42000204 	addi	r8,r8,8
101050e0:	003ecd06 	br	10104c18 <__alt_data_end+0xfffe4c18>
101050e4:	d9002917 	ldw	r4,164(sp)
101050e8:	d8002785 	stb	zero,158(sp)
101050ec:	203d2d16 	blt	r4,zero,101045a4 <__alt_data_end+0xfffe45a4>
101050f0:	00bfdfc4 	movi	r2,-129
101050f4:	90a4703a 	and	r18,r18,r2
101050f8:	003a9106 	br	10103b40 <__alt_data_end+0xfffe3b40>
101050fc:	01040474 	movhi	r4,4113
10105100:	21044984 	addi	r4,r4,4390
10105104:	d9002b15 	stw	r4,172(sp)
10105108:	003c0c06 	br	1010413c <__alt_data_end+0xfffe413c>
1010510c:	d9002c17 	ldw	r4,176(sp)
10105110:	d9801e04 	addi	r6,sp,120
10105114:	b80b883a 	mov	r5,r23
10105118:	01097b00 	call	101097b0 <__sprint_r>
1010511c:	103aab1e 	bne	r2,zero,10103bcc <__alt_data_end+0xfffe3bcc>
10105120:	d8c02017 	ldw	r3,128(sp)
10105124:	da000404 	addi	r8,sp,16
10105128:	003d4106 	br	10104630 <__alt_data_end+0xfffe4630>
1010512c:	d8801f17 	ldw	r2,124(sp)
10105130:	01440474 	movhi	r5,4113
10105134:	01000044 	movi	r4,1
10105138:	18c00044 	addi	r3,r3,1
1010513c:	10800044 	addi	r2,r2,1
10105140:	29444904 	addi	r5,r5,4388
10105144:	41000115 	stw	r4,4(r8)
10105148:	41400015 	stw	r5,0(r8)
1010514c:	d8c02015 	stw	r3,128(sp)
10105150:	d8801f15 	stw	r2,124(sp)
10105154:	010001c4 	movi	r4,7
10105158:	20805c16 	blt	r4,r2,101052cc <___vfprintf_internal_r+0x1b08>
1010515c:	42000204 	addi	r8,r8,8
10105160:	8800041e 	bne	r17,zero,10105174 <___vfprintf_internal_r+0x19b0>
10105164:	d8803317 	ldw	r2,204(sp)
10105168:	1000021e 	bne	r2,zero,10105174 <___vfprintf_internal_r+0x19b0>
1010516c:	9080004c 	andi	r2,r18,1
10105170:	103c0926 	beq	r2,zero,10104198 <__alt_data_end+0xfffe4198>
10105174:	d9003717 	ldw	r4,220(sp)
10105178:	d8801f17 	ldw	r2,124(sp)
1010517c:	d9403417 	ldw	r5,208(sp)
10105180:	20c7883a 	add	r3,r4,r3
10105184:	10800044 	addi	r2,r2,1
10105188:	41000115 	stw	r4,4(r8)
1010518c:	41400015 	stw	r5,0(r8)
10105190:	d8c02015 	stw	r3,128(sp)
10105194:	d8801f15 	stw	r2,124(sp)
10105198:	010001c4 	movi	r4,7
1010519c:	20812116 	blt	r4,r2,10105624 <___vfprintf_internal_r+0x1e60>
101051a0:	42000204 	addi	r8,r8,8
101051a4:	0463c83a 	sub	r17,zero,r17
101051a8:	0440730e 	bge	zero,r17,10105378 <___vfprintf_internal_r+0x1bb4>
101051ac:	05800404 	movi	r22,16
101051b0:	b440860e 	bge	r22,r17,101053cc <___vfprintf_internal_r+0x1c08>
101051b4:	01440474 	movhi	r5,4113
101051b8:	29444984 	addi	r5,r5,4390
101051bc:	d9402b15 	stw	r5,172(sp)
101051c0:	070001c4 	movi	fp,7
101051c4:	dcc02c17 	ldw	r19,176(sp)
101051c8:	00000306 	br	101051d8 <___vfprintf_internal_r+0x1a14>
101051cc:	42000204 	addi	r8,r8,8
101051d0:	8c7ffc04 	addi	r17,r17,-16
101051d4:	b440800e 	bge	r22,r17,101053d8 <___vfprintf_internal_r+0x1c14>
101051d8:	18c00404 	addi	r3,r3,16
101051dc:	10800044 	addi	r2,r2,1
101051e0:	45000015 	stw	r20,0(r8)
101051e4:	45800115 	stw	r22,4(r8)
101051e8:	d8c02015 	stw	r3,128(sp)
101051ec:	d8801f15 	stw	r2,124(sp)
101051f0:	e0bff60e 	bge	fp,r2,101051cc <__alt_data_end+0xfffe51cc>
101051f4:	d9801e04 	addi	r6,sp,120
101051f8:	b80b883a 	mov	r5,r23
101051fc:	9809883a 	mov	r4,r19
10105200:	01097b00 	call	101097b0 <__sprint_r>
10105204:	103a711e 	bne	r2,zero,10103bcc <__alt_data_end+0xfffe3bcc>
10105208:	d8c02017 	ldw	r3,128(sp)
1010520c:	d8801f17 	ldw	r2,124(sp)
10105210:	da000404 	addi	r8,sp,16
10105214:	003fee06 	br	101051d0 <__alt_data_end+0xfffe51d0>
10105218:	00bfffc4 	movi	r2,-1
1010521c:	003a6f06 	br	10103bdc <__alt_data_end+0xfffe3bdc>
10105220:	008011c4 	movi	r2,71
10105224:	1440b816 	blt	r2,r17,10105508 <___vfprintf_internal_r+0x1d44>
10105228:	04040474 	movhi	r16,4113
1010522c:	84043b04 	addi	r16,r16,4332
10105230:	00c000c4 	movi	r3,3
10105234:	00bfdfc4 	movi	r2,-129
10105238:	d8c02a15 	stw	r3,168(sp)
1010523c:	90a4703a 	and	r18,r18,r2
10105240:	df002783 	ldbu	fp,158(sp)
10105244:	d8c02e15 	stw	r3,184(sp)
10105248:	d8002915 	stw	zero,164(sp)
1010524c:	d8003215 	stw	zero,200(sp)
10105250:	003b2906 	br	10103ef8 <__alt_data_end+0xfffe3ef8>
10105254:	d9002d17 	ldw	r4,180(sp)
10105258:	24c00017 	ldw	r19,0(r4)
1010525c:	21000104 	addi	r4,r4,4
10105260:	d9002d15 	stw	r4,180(sp)
10105264:	982dd7fa 	srai	r22,r19,31
10105268:	b005883a 	mov	r2,r22
1010526c:	003a9f06 	br	10103cec <__alt_data_end+0xfffe3cec>
10105270:	d9402d17 	ldw	r5,180(sp)
10105274:	d8c02f17 	ldw	r3,188(sp)
10105278:	28800017 	ldw	r2,0(r5)
1010527c:	29400104 	addi	r5,r5,4
10105280:	d9402d15 	stw	r5,180(sp)
10105284:	10c00015 	stw	r3,0(r2)
10105288:	00398606 	br	101038a4 <__alt_data_end+0xfffe38a4>
1010528c:	d9402d17 	ldw	r5,180(sp)
10105290:	002d883a 	mov	r22,zero
10105294:	2cc00017 	ldw	r19,0(r5)
10105298:	29400104 	addi	r5,r5,4
1010529c:	d9402d15 	stw	r5,180(sp)
101052a0:	003c2306 	br	10104330 <__alt_data_end+0xfffe4330>
101052a4:	d8c02d17 	ldw	r3,180(sp)
101052a8:	d9002917 	ldw	r4,164(sp)
101052ac:	002d883a 	mov	r22,zero
101052b0:	18800104 	addi	r2,r3,4
101052b4:	1cc0000b 	ldhu	r19,0(r3)
101052b8:	203dc10e 	bge	r4,zero,101049c0 <__alt_data_end+0xfffe49c0>
101052bc:	003f7506 	br	10105094 <__alt_data_end+0xfffe5094>
101052c0:	04040474 	movhi	r16,4113
101052c4:	84043904 	addi	r16,r16,4324
101052c8:	003acc06 	br	10103dfc <__alt_data_end+0xfffe3dfc>
101052cc:	d9002c17 	ldw	r4,176(sp)
101052d0:	d9801e04 	addi	r6,sp,120
101052d4:	b80b883a 	mov	r5,r23
101052d8:	01097b00 	call	101097b0 <__sprint_r>
101052dc:	103a3b1e 	bne	r2,zero,10103bcc <__alt_data_end+0xfffe3bcc>
101052e0:	dc402617 	ldw	r17,152(sp)
101052e4:	d8c02017 	ldw	r3,128(sp)
101052e8:	da000404 	addi	r8,sp,16
101052ec:	003f9c06 	br	10105160 <__alt_data_end+0xfffe5160>
101052f0:	ac400043 	ldbu	r17,1(r21)
101052f4:	94800814 	ori	r18,r18,32
101052f8:	ad400044 	addi	r21,r21,1
101052fc:	8c403fcc 	andi	r17,r17,255
10105300:	8c40201c 	xori	r17,r17,128
10105304:	8c7fe004 	addi	r17,r17,-128
10105308:	00398f06 	br	10103948 <__alt_data_end+0xfffe3948>
1010530c:	d8c02d15 	stw	r3,180(sp)
10105310:	0039883a 	mov	fp,zero
10105314:	003e3506 	br	10104bec <__alt_data_end+0xfffe4bec>
10105318:	d9002c17 	ldw	r4,176(sp)
1010531c:	d9801e04 	addi	r6,sp,120
10105320:	b80b883a 	mov	r5,r23
10105324:	01097b00 	call	101097b0 <__sprint_r>
10105328:	103a281e 	bne	r2,zero,10103bcc <__alt_data_end+0xfffe3bcc>
1010532c:	d8c02017 	ldw	r3,128(sp)
10105330:	da000404 	addi	r8,sp,16
10105334:	003cd006 	br	10104678 <__alt_data_end+0xfffe4678>
10105338:	8009883a 	mov	r4,r16
1010533c:	da003d15 	stw	r8,244(sp)
10105340:	010372c0 	call	1010372c <strlen>
10105344:	d8802e15 	stw	r2,184(sp)
10105348:	da003d17 	ldw	r8,244(sp)
1010534c:	103c340e 	bge	r2,zero,10104420 <__alt_data_end+0xfffe4420>
10105350:	0005883a 	mov	r2,zero
10105354:	003c3206 	br	10104420 <__alt_data_end+0xfffe4420>
10105358:	d9002c17 	ldw	r4,176(sp)
1010535c:	d9801e04 	addi	r6,sp,120
10105360:	b80b883a 	mov	r5,r23
10105364:	01097b00 	call	101097b0 <__sprint_r>
10105368:	103a181e 	bne	r2,zero,10103bcc <__alt_data_end+0xfffe3bcc>
1010536c:	d8c02017 	ldw	r3,128(sp)
10105370:	d8801f17 	ldw	r2,124(sp)
10105374:	da000404 	addi	r8,sp,16
10105378:	d9403317 	ldw	r5,204(sp)
1010537c:	10800044 	addi	r2,r2,1
10105380:	44000015 	stw	r16,0(r8)
10105384:	28c7883a 	add	r3,r5,r3
10105388:	003b7d06 	br	10104180 <__alt_data_end+0xfffe4180>
1010538c:	01040474 	movhi	r4,4113
10105390:	21044d84 	addi	r4,r4,4406
10105394:	d9003515 	stw	r4,212(sp)
10105398:	003b1406 	br	10103fec <__alt_data_end+0xfffe3fec>
1010539c:	013fffc4 	movi	r4,-1
101053a0:	003a3506 	br	10103c78 <__alt_data_end+0xfffe3c78>
101053a4:	0023883a 	mov	r17,zero
101053a8:	003d9d06 	br	10104a20 <__alt_data_end+0xfffe4a20>
101053ac:	d9002c17 	ldw	r4,176(sp)
101053b0:	d9801e04 	addi	r6,sp,120
101053b4:	b80b883a 	mov	r5,r23
101053b8:	01097b00 	call	101097b0 <__sprint_r>
101053bc:	103a031e 	bne	r2,zero,10103bcc <__alt_data_end+0xfffe3bcc>
101053c0:	d8c02017 	ldw	r3,128(sp)
101053c4:	da000404 	addi	r8,sp,16
101053c8:	003d9406 	br	10104a1c <__alt_data_end+0xfffe4a1c>
101053cc:	01040474 	movhi	r4,4113
101053d0:	21044984 	addi	r4,r4,4390
101053d4:	d9002b15 	stw	r4,172(sp)
101053d8:	d9002b17 	ldw	r4,172(sp)
101053dc:	1c47883a 	add	r3,r3,r17
101053e0:	10800044 	addi	r2,r2,1
101053e4:	41000015 	stw	r4,0(r8)
101053e8:	44400115 	stw	r17,4(r8)
101053ec:	d8c02015 	stw	r3,128(sp)
101053f0:	d8801f15 	stw	r2,124(sp)
101053f4:	010001c4 	movi	r4,7
101053f8:	20bfd716 	blt	r4,r2,10105358 <__alt_data_end+0xfffe5358>
101053fc:	42000204 	addi	r8,r8,8
10105400:	003fdd06 	br	10105378 <__alt_data_end+0xfffe5378>
10105404:	d9002c17 	ldw	r4,176(sp)
10105408:	d9801e04 	addi	r6,sp,120
1010540c:	b80b883a 	mov	r5,r23
10105410:	01097b00 	call	101097b0 <__sprint_r>
10105414:	1039ed1e 	bne	r2,zero,10103bcc <__alt_data_end+0xfffe3bcc>
10105418:	d8802617 	ldw	r2,152(sp)
1010541c:	d8c02017 	ldw	r3,128(sp)
10105420:	da000404 	addi	r8,sp,16
10105424:	003e1006 	br	10104c68 <__alt_data_end+0xfffe4c68>
10105428:	00800044 	movi	r2,1
1010542c:	10803fcc 	andi	r2,r2,255
10105430:	00c00044 	movi	r3,1
10105434:	10fa3526 	beq	r2,r3,10103d0c <__alt_data_end+0xfffe3d0c>
10105438:	00c00084 	movi	r3,2
1010543c:	10fbcb26 	beq	r2,r3,1010436c <__alt_data_end+0xfffe436c>
10105440:	003a8f06 	br	10103e80 <__alt_data_end+0xfffe3e80>
10105444:	01040474 	movhi	r4,4113
10105448:	21044d84 	addi	r4,r4,4406
1010544c:	d9003515 	stw	r4,212(sp)
10105450:	003b7606 	br	1010422c <__alt_data_end+0xfffe422c>
10105454:	d8802917 	ldw	r2,164(sp)
10105458:	00c00184 	movi	r3,6
1010545c:	1880012e 	bgeu	r3,r2,10105464 <___vfprintf_internal_r+0x1ca0>
10105460:	1805883a 	mov	r2,r3
10105464:	d8802e15 	stw	r2,184(sp)
10105468:	1000ef16 	blt	r2,zero,10105828 <___vfprintf_internal_r+0x2064>
1010546c:	04040474 	movhi	r16,4113
10105470:	d8802a15 	stw	r2,168(sp)
10105474:	dcc02d15 	stw	r19,180(sp)
10105478:	d8002915 	stw	zero,164(sp)
1010547c:	d8003215 	stw	zero,200(sp)
10105480:	84044704 	addi	r16,r16,4380
10105484:	0039883a 	mov	fp,zero
10105488:	003aa206 	br	10103f14 <__alt_data_end+0xfffe3f14>
1010548c:	0021883a 	mov	r16,zero
10105490:	003e0706 	br	10104cb0 <__alt_data_end+0xfffe4cb0>
10105494:	d9002c17 	ldw	r4,176(sp)
10105498:	d9801e04 	addi	r6,sp,120
1010549c:	b80b883a 	mov	r5,r23
101054a0:	01097b00 	call	101097b0 <__sprint_r>
101054a4:	1039c91e 	bne	r2,zero,10103bcc <__alt_data_end+0xfffe3bcc>
101054a8:	d8802617 	ldw	r2,152(sp)
101054ac:	d9403317 	ldw	r5,204(sp)
101054b0:	d8c02017 	ldw	r3,128(sp)
101054b4:	da000404 	addi	r8,sp,16
101054b8:	2885c83a 	sub	r2,r5,r2
101054bc:	003dfb06 	br	10104cac <__alt_data_end+0xfffe4cac>
101054c0:	9080004c 	andi	r2,r18,1
101054c4:	103e8f1e 	bne	r2,zero,10104f04 <__alt_data_end+0xfffe4f04>
101054c8:	d8802117 	ldw	r2,132(sp)
101054cc:	003e9e06 	br	10104f48 <__alt_data_end+0xfffe4f48>
101054d0:	1025883a 	mov	r18,r2
101054d4:	0039883a 	mov	fp,zero
101054d8:	00800084 	movi	r2,2
101054dc:	003fd306 	br	1010542c <__alt_data_end+0xfffe542c>
101054e0:	07000b44 	movi	fp,45
101054e4:	df002785 	stb	fp,158(sp)
101054e8:	003a4006 	br	10103dec <__alt_data_end+0xfffe3dec>
101054ec:	00c00b44 	movi	r3,45
101054f0:	d8c02785 	stb	r3,158(sp)
101054f4:	d8802a15 	stw	r2,168(sp)
101054f8:	dc802b17 	ldw	r18,172(sp)
101054fc:	d8002915 	stw	zero,164(sp)
10105500:	07000b44 	movi	fp,45
10105504:	003a8006 	br	10103f08 <__alt_data_end+0xfffe3f08>
10105508:	04040474 	movhi	r16,4113
1010550c:	84043c04 	addi	r16,r16,4336
10105510:	003f4706 	br	10105230 <__alt_data_end+0xfffe5230>
10105514:	d8c02d17 	ldw	r3,180(sp)
10105518:	d9002f17 	ldw	r4,188(sp)
1010551c:	18800017 	ldw	r2,0(r3)
10105520:	18c00104 	addi	r3,r3,4
10105524:	d8c02d15 	stw	r3,180(sp)
10105528:	11000015 	stw	r4,0(r2)
1010552c:	0038dd06 	br	101038a4 <__alt_data_end+0xfffe38a4>
10105530:	dd802617 	ldw	r22,152(sp)
10105534:	00bfff44 	movi	r2,-3
10105538:	b0801c16 	blt	r22,r2,101055ac <___vfprintf_internal_r+0x1de8>
1010553c:	d9402917 	ldw	r5,164(sp)
10105540:	2d801a16 	blt	r5,r22,101055ac <___vfprintf_internal_r+0x1de8>
10105544:	dd803215 	stw	r22,200(sp)
10105548:	003e8906 	br	10104f70 <__alt_data_end+0xfffe4f70>
1010554c:	01040474 	movhi	r4,4113
10105550:	21044984 	addi	r4,r4,4390
10105554:	d9002b15 	stw	r4,172(sp)
10105558:	003c9106 	br	101047a0 <__alt_data_end+0xfffe47a0>
1010555c:	e005883a 	mov	r2,fp
10105560:	003e7906 	br	10104f48 <__alt_data_end+0xfffe4f48>
10105564:	d9402917 	ldw	r5,164(sp)
10105568:	df002783 	ldbu	fp,158(sp)
1010556c:	dcc02d15 	stw	r19,180(sp)
10105570:	d9402a15 	stw	r5,168(sp)
10105574:	d9402e15 	stw	r5,184(sp)
10105578:	d8002915 	stw	zero,164(sp)
1010557c:	d8003215 	stw	zero,200(sp)
10105580:	003a5d06 	br	10103ef8 <__alt_data_end+0xfffe3ef8>
10105584:	9080004c 	andi	r2,r18,1
10105588:	0039883a 	mov	fp,zero
1010558c:	10000426 	beq	r2,zero,101055a0 <___vfprintf_internal_r+0x1ddc>
10105590:	00800c04 	movi	r2,48
10105594:	dc001dc4 	addi	r16,sp,119
10105598:	d8801dc5 	stb	r2,119(sp)
1010559c:	003b8006 	br	101043a0 <__alt_data_end+0xfffe43a0>
101055a0:	d8002e15 	stw	zero,184(sp)
101055a4:	dc001e04 	addi	r16,sp,120
101055a8:	003a4d06 	br	10103ee0 <__alt_data_end+0xfffe3ee0>
101055ac:	8c7fff84 	addi	r17,r17,-2
101055b0:	b5bfffc4 	addi	r22,r22,-1
101055b4:	dd802615 	stw	r22,152(sp)
101055b8:	dc4022c5 	stb	r17,139(sp)
101055bc:	b000bf16 	blt	r22,zero,101058bc <___vfprintf_internal_r+0x20f8>
101055c0:	00800ac4 	movi	r2,43
101055c4:	d8802305 	stb	r2,140(sp)
101055c8:	00800244 	movi	r2,9
101055cc:	15807016 	blt	r2,r22,10105790 <___vfprintf_internal_r+0x1fcc>
101055d0:	00800c04 	movi	r2,48
101055d4:	b5800c04 	addi	r22,r22,48
101055d8:	d8802345 	stb	r2,141(sp)
101055dc:	dd802385 	stb	r22,142(sp)
101055e0:	d88023c4 	addi	r2,sp,143
101055e4:	df0022c4 	addi	fp,sp,139
101055e8:	d8c03317 	ldw	r3,204(sp)
101055ec:	1739c83a 	sub	fp,r2,fp
101055f0:	d9003317 	ldw	r4,204(sp)
101055f4:	e0c7883a 	add	r3,fp,r3
101055f8:	df003a15 	stw	fp,232(sp)
101055fc:	d8c02e15 	stw	r3,184(sp)
10105600:	00800044 	movi	r2,1
10105604:	1100b30e 	bge	r2,r4,101058d4 <___vfprintf_internal_r+0x2110>
10105608:	d8c02e17 	ldw	r3,184(sp)
1010560c:	18c00044 	addi	r3,r3,1
10105610:	d8c02e15 	stw	r3,184(sp)
10105614:	1805883a 	mov	r2,r3
10105618:	1800ac16 	blt	r3,zero,101058cc <___vfprintf_internal_r+0x2108>
1010561c:	d8003215 	stw	zero,200(sp)
10105620:	003e5d06 	br	10104f98 <__alt_data_end+0xfffe4f98>
10105624:	d9002c17 	ldw	r4,176(sp)
10105628:	d9801e04 	addi	r6,sp,120
1010562c:	b80b883a 	mov	r5,r23
10105630:	01097b00 	call	101097b0 <__sprint_r>
10105634:	1039651e 	bne	r2,zero,10103bcc <__alt_data_end+0xfffe3bcc>
10105638:	dc402617 	ldw	r17,152(sp)
1010563c:	d8c02017 	ldw	r3,128(sp)
10105640:	d8801f17 	ldw	r2,124(sp)
10105644:	da000404 	addi	r8,sp,16
10105648:	003ed606 	br	101051a4 <__alt_data_end+0xfffe51a4>
1010564c:	582b883a 	mov	r21,r11
10105650:	d8002915 	stw	zero,164(sp)
10105654:	0038bd06 	br	1010394c <__alt_data_end+0xfffe394c>
10105658:	d8802917 	ldw	r2,164(sp)
1010565c:	103e071e 	bne	r2,zero,10104e7c <__alt_data_end+0xfffe4e7c>
10105660:	dc002915 	stw	r16,164(sp)
10105664:	003e0506 	br	10104e7c <__alt_data_end+0xfffe4e7c>
10105668:	d9002917 	ldw	r4,164(sp)
1010566c:	20c00044 	addi	r3,r4,1
10105670:	003e0f06 	br	10104eb0 <__alt_data_end+0xfffe4eb0>
10105674:	01400184 	movi	r5,6
10105678:	d9402915 	stw	r5,164(sp)
1010567c:	003dff06 	br	10104e7c <__alt_data_end+0xfffe4e7c>
10105680:	d8802104 	addi	r2,sp,132
10105684:	d8800315 	stw	r2,12(sp)
10105688:	d8802504 	addi	r2,sp,148
1010568c:	d8800215 	stw	r2,8(sp)
10105690:	d8802604 	addi	r2,sp,152
10105694:	d8800115 	stw	r2,4(sp)
10105698:	d8802917 	ldw	r2,164(sp)
1010569c:	d9403617 	ldw	r5,216(sp)
101056a0:	d9002c17 	ldw	r4,176(sp)
101056a4:	d8800015 	stw	r2,0(sp)
101056a8:	01c000c4 	movi	r7,3
101056ac:	980d883a 	mov	r6,r19
101056b0:	da003d15 	stw	r8,244(sp)
101056b4:	0105e9c0 	call	10105e9c <_dtoa_r>
101056b8:	d8c02917 	ldw	r3,164(sp)
101056bc:	da003d17 	ldw	r8,244(sp)
101056c0:	1021883a 	mov	r16,r2
101056c4:	10f9883a 	add	fp,r2,r3
101056c8:	81000007 	ldb	r4,0(r16)
101056cc:	00800c04 	movi	r2,48
101056d0:	20805e26 	beq	r4,r2,1010584c <___vfprintf_internal_r+0x2088>
101056d4:	d8c02617 	ldw	r3,152(sp)
101056d8:	e0f9883a 	add	fp,fp,r3
101056dc:	003e0a06 	br	10104f08 <__alt_data_end+0xfffe4f08>
101056e0:	00c00b44 	movi	r3,45
101056e4:	24e0003c 	xorhi	r19,r4,32768
101056e8:	d8c02a05 	stb	r3,168(sp)
101056ec:	003de906 	br	10104e94 <__alt_data_end+0xfffe4e94>
101056f0:	d8c03217 	ldw	r3,200(sp)
101056f4:	00c07a0e 	bge	zero,r3,101058e0 <___vfprintf_internal_r+0x211c>
101056f8:	00800044 	movi	r2,1
101056fc:	d9003317 	ldw	r4,204(sp)
10105700:	1105883a 	add	r2,r2,r4
10105704:	d8802e15 	stw	r2,184(sp)
10105708:	10004e16 	blt	r2,zero,10105844 <___vfprintf_internal_r+0x2080>
1010570c:	044019c4 	movi	r17,103
10105710:	003e2106 	br	10104f98 <__alt_data_end+0xfffe4f98>
10105714:	d9002917 	ldw	r4,164(sp)
10105718:	d8802104 	addi	r2,sp,132
1010571c:	d8800315 	stw	r2,12(sp)
10105720:	d9000015 	stw	r4,0(sp)
10105724:	d8802504 	addi	r2,sp,148
10105728:	d9403617 	ldw	r5,216(sp)
1010572c:	d9002c17 	ldw	r4,176(sp)
10105730:	d8800215 	stw	r2,8(sp)
10105734:	d8802604 	addi	r2,sp,152
10105738:	d8800115 	stw	r2,4(sp)
1010573c:	01c000c4 	movi	r7,3
10105740:	980d883a 	mov	r6,r19
10105744:	da003d15 	stw	r8,244(sp)
10105748:	0105e9c0 	call	10105e9c <_dtoa_r>
1010574c:	d8c02917 	ldw	r3,164(sp)
10105750:	da003d17 	ldw	r8,244(sp)
10105754:	1021883a 	mov	r16,r2
10105758:	00801184 	movi	r2,70
1010575c:	80f9883a 	add	fp,r16,r3
10105760:	88bfd926 	beq	r17,r2,101056c8 <__alt_data_end+0xfffe56c8>
10105764:	003de806 	br	10104f08 <__alt_data_end+0xfffe4f08>
10105768:	d9002917 	ldw	r4,164(sp)
1010576c:	00c04d0e 	bge	zero,r3,101058a4 <___vfprintf_internal_r+0x20e0>
10105770:	2000441e 	bne	r4,zero,10105884 <___vfprintf_internal_r+0x20c0>
10105774:	9480004c 	andi	r18,r18,1
10105778:	9000421e 	bne	r18,zero,10105884 <___vfprintf_internal_r+0x20c0>
1010577c:	1805883a 	mov	r2,r3
10105780:	18007016 	blt	r3,zero,10105944 <___vfprintf_internal_r+0x2180>
10105784:	d8c03217 	ldw	r3,200(sp)
10105788:	d8c02e15 	stw	r3,184(sp)
1010578c:	003e0206 	br	10104f98 <__alt_data_end+0xfffe4f98>
10105790:	df0022c4 	addi	fp,sp,139
10105794:	dc002915 	stw	r16,164(sp)
10105798:	4027883a 	mov	r19,r8
1010579c:	e021883a 	mov	r16,fp
101057a0:	b009883a 	mov	r4,r22
101057a4:	01400284 	movi	r5,10
101057a8:	010117c0 	call	1010117c <__modsi3>
101057ac:	10800c04 	addi	r2,r2,48
101057b0:	843fffc4 	addi	r16,r16,-1
101057b4:	b009883a 	mov	r4,r22
101057b8:	01400284 	movi	r5,10
101057bc:	80800005 	stb	r2,0(r16)
101057c0:	01010f80 	call	101010f8 <__divsi3>
101057c4:	102d883a 	mov	r22,r2
101057c8:	00800244 	movi	r2,9
101057cc:	15bff416 	blt	r2,r22,101057a0 <__alt_data_end+0xfffe57a0>
101057d0:	9811883a 	mov	r8,r19
101057d4:	b0800c04 	addi	r2,r22,48
101057d8:	8027883a 	mov	r19,r16
101057dc:	997fffc4 	addi	r5,r19,-1
101057e0:	98bfffc5 	stb	r2,-1(r19)
101057e4:	dc002917 	ldw	r16,164(sp)
101057e8:	2f006a2e 	bgeu	r5,fp,10105994 <___vfprintf_internal_r+0x21d0>
101057ec:	d9c02384 	addi	r7,sp,142
101057f0:	3ccfc83a 	sub	r7,r7,r19
101057f4:	d9002344 	addi	r4,sp,141
101057f8:	e1cf883a 	add	r7,fp,r7
101057fc:	00000106 	br	10105804 <___vfprintf_internal_r+0x2040>
10105800:	28800003 	ldbu	r2,0(r5)
10105804:	20800005 	stb	r2,0(r4)
10105808:	21000044 	addi	r4,r4,1
1010580c:	29400044 	addi	r5,r5,1
10105810:	393ffb1e 	bne	r7,r4,10105800 <__alt_data_end+0xfffe5800>
10105814:	d8802304 	addi	r2,sp,140
10105818:	14c5c83a 	sub	r2,r2,r19
1010581c:	d8c02344 	addi	r3,sp,141
10105820:	1885883a 	add	r2,r3,r2
10105824:	003f7006 	br	101055e8 <__alt_data_end+0xfffe55e8>
10105828:	0005883a 	mov	r2,zero
1010582c:	003f0f06 	br	1010546c <__alt_data_end+0xfffe546c>
10105830:	d8c03217 	ldw	r3,200(sp)
10105834:	18c00044 	addi	r3,r3,1
10105838:	d8c02e15 	stw	r3,184(sp)
1010583c:	1805883a 	mov	r2,r3
10105840:	183fb20e 	bge	r3,zero,1010570c <__alt_data_end+0xfffe570c>
10105844:	0005883a 	mov	r2,zero
10105848:	003fb006 	br	1010570c <__alt_data_end+0xfffe570c>
1010584c:	d9003617 	ldw	r4,216(sp)
10105850:	000d883a 	mov	r6,zero
10105854:	000f883a 	mov	r7,zero
10105858:	980b883a 	mov	r5,r19
1010585c:	d8c03c15 	stw	r3,240(sp)
10105860:	da003d15 	stw	r8,244(sp)
10105864:	010cf4c0 	call	1010cf4c <__eqdf2>
10105868:	d8c03c17 	ldw	r3,240(sp)
1010586c:	da003d17 	ldw	r8,244(sp)
10105870:	103f9826 	beq	r2,zero,101056d4 <__alt_data_end+0xfffe56d4>
10105874:	00800044 	movi	r2,1
10105878:	10c7c83a 	sub	r3,r2,r3
1010587c:	d8c02615 	stw	r3,152(sp)
10105880:	003f9506 	br	101056d8 <__alt_data_end+0xfffe56d8>
10105884:	d9002917 	ldw	r4,164(sp)
10105888:	d8c03217 	ldw	r3,200(sp)
1010588c:	20800044 	addi	r2,r4,1
10105890:	1885883a 	add	r2,r3,r2
10105894:	d8802e15 	stw	r2,184(sp)
10105898:	103dbf0e 	bge	r2,zero,10104f98 <__alt_data_end+0xfffe4f98>
1010589c:	0005883a 	mov	r2,zero
101058a0:	003dbd06 	br	10104f98 <__alt_data_end+0xfffe4f98>
101058a4:	2000211e 	bne	r4,zero,1010592c <___vfprintf_internal_r+0x2168>
101058a8:	9480004c 	andi	r18,r18,1
101058ac:	90001f1e 	bne	r18,zero,1010592c <___vfprintf_internal_r+0x2168>
101058b0:	00800044 	movi	r2,1
101058b4:	d8802e15 	stw	r2,184(sp)
101058b8:	003db706 	br	10104f98 <__alt_data_end+0xfffe4f98>
101058bc:	00800b44 	movi	r2,45
101058c0:	05adc83a 	sub	r22,zero,r22
101058c4:	d8802305 	stb	r2,140(sp)
101058c8:	003f3f06 	br	101055c8 <__alt_data_end+0xfffe55c8>
101058cc:	0005883a 	mov	r2,zero
101058d0:	003f5206 	br	1010561c <__alt_data_end+0xfffe561c>
101058d4:	90a4703a 	and	r18,r18,r2
101058d8:	903f4e26 	beq	r18,zero,10105614 <__alt_data_end+0xfffe5614>
101058dc:	003f4a06 	br	10105608 <__alt_data_end+0xfffe5608>
101058e0:	00800084 	movi	r2,2
101058e4:	10c5c83a 	sub	r2,r2,r3
101058e8:	003f8406 	br	101056fc <__alt_data_end+0xfffe56fc>
101058ec:	d8802d17 	ldw	r2,180(sp)
101058f0:	d9002d17 	ldw	r4,180(sp)
101058f4:	ac400043 	ldbu	r17,1(r21)
101058f8:	10800017 	ldw	r2,0(r2)
101058fc:	582b883a 	mov	r21,r11
10105900:	d8802915 	stw	r2,164(sp)
10105904:	20800104 	addi	r2,r4,4
10105908:	d9002917 	ldw	r4,164(sp)
1010590c:	d8802d15 	stw	r2,180(sp)
10105910:	203e7a0e 	bge	r4,zero,101052fc <__alt_data_end+0xfffe52fc>
10105914:	8c403fcc 	andi	r17,r17,255
10105918:	00bfffc4 	movi	r2,-1
1010591c:	8c40201c 	xori	r17,r17,128
10105920:	d8802915 	stw	r2,164(sp)
10105924:	8c7fe004 	addi	r17,r17,-128
10105928:	00380706 	br	10103948 <__alt_data_end+0xfffe3948>
1010592c:	d8c02917 	ldw	r3,164(sp)
10105930:	18c00084 	addi	r3,r3,2
10105934:	d8c02e15 	stw	r3,184(sp)
10105938:	1805883a 	mov	r2,r3
1010593c:	183d960e 	bge	r3,zero,10104f98 <__alt_data_end+0xfffe4f98>
10105940:	003fd606 	br	1010589c <__alt_data_end+0xfffe589c>
10105944:	0005883a 	mov	r2,zero
10105948:	003f8e06 	br	10105784 <__alt_data_end+0xfffe5784>
1010594c:	9080004c 	andi	r2,r18,1
10105950:	103f811e 	bne	r2,zero,10105758 <__alt_data_end+0xfffe5758>
10105954:	d8802117 	ldw	r2,132(sp)
10105958:	1405c83a 	sub	r2,r2,r16
1010595c:	d8803315 	stw	r2,204(sp)
10105960:	b47ef326 	beq	r22,r17,10105530 <__alt_data_end+0xfffe5530>
10105964:	dd802617 	ldw	r22,152(sp)
10105968:	003f1106 	br	101055b0 <__alt_data_end+0xfffe55b0>
1010596c:	d9c02785 	stb	r7,158(sp)
10105970:	00390406 	br	10103d84 <__alt_data_end+0xfffe3d84>
10105974:	d9c02785 	stb	r7,158(sp)
10105978:	0038d306 	br	10103cc8 <__alt_data_end+0xfffe3cc8>
1010597c:	d9c02785 	stb	r7,158(sp)
10105980:	003a6106 	br	10104308 <__alt_data_end+0xfffe4308>
10105984:	d9c02785 	stb	r7,158(sp)
10105988:	003af806 	br	1010456c <__alt_data_end+0xfffe456c>
1010598c:	0005883a 	mov	r2,zero
10105990:	003d7e06 	br	10104f8c <__alt_data_end+0xfffe4f8c>
10105994:	d8802344 	addi	r2,sp,141
10105998:	003f1306 	br	101055e8 <__alt_data_end+0xfffe55e8>
1010599c:	d9c02785 	stb	r7,158(sp)
101059a0:	00392306 	br	10103e30 <__alt_data_end+0xfffe3e30>
101059a4:	d9c02785 	stb	r7,158(sp)
101059a8:	003aa906 	br	10104450 <__alt_data_end+0xfffe4450>
101059ac:	d9c02785 	stb	r7,158(sp)
101059b0:	003a3d06 	br	101042a8 <__alt_data_end+0xfffe42a8>
101059b4:	d9c02785 	stb	r7,158(sp)
101059b8:	003aca06 	br	101044e4 <__alt_data_end+0xfffe44e4>

101059bc <__vfprintf_internal>:
101059bc:	00840474 	movhi	r2,4113
101059c0:	108bb004 	addi	r2,r2,11968
101059c4:	300f883a 	mov	r7,r6
101059c8:	280d883a 	mov	r6,r5
101059cc:	200b883a 	mov	r5,r4
101059d0:	11000017 	ldw	r4,0(r2)
101059d4:	01037c41 	jmpi	101037c4 <___vfprintf_internal_r>

101059d8 <__sbprintf>:
101059d8:	2880030b 	ldhu	r2,12(r5)
101059dc:	2ac01917 	ldw	r11,100(r5)
101059e0:	2a80038b 	ldhu	r10,14(r5)
101059e4:	2a400717 	ldw	r9,28(r5)
101059e8:	2a000917 	ldw	r8,36(r5)
101059ec:	defee204 	addi	sp,sp,-1144
101059f0:	00c10004 	movi	r3,1024
101059f4:	dc011a15 	stw	r16,1128(sp)
101059f8:	10bfff4c 	andi	r2,r2,65533
101059fc:	2821883a 	mov	r16,r5
10105a00:	d8cb883a 	add	r5,sp,r3
10105a04:	dc811c15 	stw	r18,1136(sp)
10105a08:	dc411b15 	stw	r17,1132(sp)
10105a0c:	dfc11d15 	stw	ra,1140(sp)
10105a10:	2025883a 	mov	r18,r4
10105a14:	d881030d 	sth	r2,1036(sp)
10105a18:	dac11915 	stw	r11,1124(sp)
10105a1c:	da81038d 	sth	r10,1038(sp)
10105a20:	da410715 	stw	r9,1052(sp)
10105a24:	da010915 	stw	r8,1060(sp)
10105a28:	dec10015 	stw	sp,1024(sp)
10105a2c:	dec10415 	stw	sp,1040(sp)
10105a30:	d8c10215 	stw	r3,1032(sp)
10105a34:	d8c10515 	stw	r3,1044(sp)
10105a38:	d8010615 	stw	zero,1048(sp)
10105a3c:	01037c40 	call	101037c4 <___vfprintf_internal_r>
10105a40:	1023883a 	mov	r17,r2
10105a44:	10000416 	blt	r2,zero,10105a58 <__sbprintf+0x80>
10105a48:	d9410004 	addi	r5,sp,1024
10105a4c:	9009883a 	mov	r4,r18
10105a50:	01015cc0 	call	101015cc <_fflush_r>
10105a54:	10000d1e 	bne	r2,zero,10105a8c <__sbprintf+0xb4>
10105a58:	d881030b 	ldhu	r2,1036(sp)
10105a5c:	1080100c 	andi	r2,r2,64
10105a60:	10000326 	beq	r2,zero,10105a70 <__sbprintf+0x98>
10105a64:	8080030b 	ldhu	r2,12(r16)
10105a68:	10801014 	ori	r2,r2,64
10105a6c:	8080030d 	sth	r2,12(r16)
10105a70:	8805883a 	mov	r2,r17
10105a74:	dfc11d17 	ldw	ra,1140(sp)
10105a78:	dc811c17 	ldw	r18,1136(sp)
10105a7c:	dc411b17 	ldw	r17,1132(sp)
10105a80:	dc011a17 	ldw	r16,1128(sp)
10105a84:	dec11e04 	addi	sp,sp,1144
10105a88:	f800283a 	ret
10105a8c:	047fffc4 	movi	r17,-1
10105a90:	003ff106 	br	10105a58 <__alt_data_end+0xfffe5a58>

10105a94 <_write_r>:
10105a94:	defffd04 	addi	sp,sp,-12
10105a98:	2805883a 	mov	r2,r5
10105a9c:	dc000015 	stw	r16,0(sp)
10105aa0:	04040474 	movhi	r16,4113
10105aa4:	dc400115 	stw	r17,4(sp)
10105aa8:	300b883a 	mov	r5,r6
10105aac:	8412a804 	addi	r16,r16,19104
10105ab0:	2023883a 	mov	r17,r4
10105ab4:	380d883a 	mov	r6,r7
10105ab8:	1009883a 	mov	r4,r2
10105abc:	dfc00215 	stw	ra,8(sp)
10105ac0:	80000015 	stw	zero,0(r16)
10105ac4:	010eec00 	call	1010eec0 <write>
10105ac8:	00ffffc4 	movi	r3,-1
10105acc:	10c00526 	beq	r2,r3,10105ae4 <_write_r+0x50>
10105ad0:	dfc00217 	ldw	ra,8(sp)
10105ad4:	dc400117 	ldw	r17,4(sp)
10105ad8:	dc000017 	ldw	r16,0(sp)
10105adc:	dec00304 	addi	sp,sp,12
10105ae0:	f800283a 	ret
10105ae4:	80c00017 	ldw	r3,0(r16)
10105ae8:	183ff926 	beq	r3,zero,10105ad0 <__alt_data_end+0xfffe5ad0>
10105aec:	88c00015 	stw	r3,0(r17)
10105af0:	003ff706 	br	10105ad0 <__alt_data_end+0xfffe5ad0>

10105af4 <__swsetup_r>:
10105af4:	00840474 	movhi	r2,4113
10105af8:	defffd04 	addi	sp,sp,-12
10105afc:	108bb004 	addi	r2,r2,11968
10105b00:	dc400115 	stw	r17,4(sp)
10105b04:	2023883a 	mov	r17,r4
10105b08:	11000017 	ldw	r4,0(r2)
10105b0c:	dc000015 	stw	r16,0(sp)
10105b10:	dfc00215 	stw	ra,8(sp)
10105b14:	2821883a 	mov	r16,r5
10105b18:	20000226 	beq	r4,zero,10105b24 <__swsetup_r+0x30>
10105b1c:	20800e17 	ldw	r2,56(r4)
10105b20:	10003126 	beq	r2,zero,10105be8 <__swsetup_r+0xf4>
10105b24:	8080030b 	ldhu	r2,12(r16)
10105b28:	10c0020c 	andi	r3,r2,8
10105b2c:	1009883a 	mov	r4,r2
10105b30:	18000f26 	beq	r3,zero,10105b70 <__swsetup_r+0x7c>
10105b34:	80c00417 	ldw	r3,16(r16)
10105b38:	18001526 	beq	r3,zero,10105b90 <__swsetup_r+0x9c>
10105b3c:	1100004c 	andi	r4,r2,1
10105b40:	20001c1e 	bne	r4,zero,10105bb4 <__swsetup_r+0xc0>
10105b44:	1080008c 	andi	r2,r2,2
10105b48:	1000291e 	bne	r2,zero,10105bf0 <__swsetup_r+0xfc>
10105b4c:	80800517 	ldw	r2,20(r16)
10105b50:	80800215 	stw	r2,8(r16)
10105b54:	18001c26 	beq	r3,zero,10105bc8 <__swsetup_r+0xd4>
10105b58:	0005883a 	mov	r2,zero
10105b5c:	dfc00217 	ldw	ra,8(sp)
10105b60:	dc400117 	ldw	r17,4(sp)
10105b64:	dc000017 	ldw	r16,0(sp)
10105b68:	dec00304 	addi	sp,sp,12
10105b6c:	f800283a 	ret
10105b70:	2080040c 	andi	r2,r4,16
10105b74:	10002e26 	beq	r2,zero,10105c30 <__swsetup_r+0x13c>
10105b78:	2080010c 	andi	r2,r4,4
10105b7c:	10001e1e 	bne	r2,zero,10105bf8 <__swsetup_r+0x104>
10105b80:	80c00417 	ldw	r3,16(r16)
10105b84:	20800214 	ori	r2,r4,8
10105b88:	8080030d 	sth	r2,12(r16)
10105b8c:	183feb1e 	bne	r3,zero,10105b3c <__alt_data_end+0xfffe5b3c>
10105b90:	1100a00c 	andi	r4,r2,640
10105b94:	01408004 	movi	r5,512
10105b98:	217fe826 	beq	r4,r5,10105b3c <__alt_data_end+0xfffe5b3c>
10105b9c:	800b883a 	mov	r5,r16
10105ba0:	8809883a 	mov	r4,r17
10105ba4:	01026940 	call	10102694 <__smakebuf_r>
10105ba8:	8080030b 	ldhu	r2,12(r16)
10105bac:	80c00417 	ldw	r3,16(r16)
10105bb0:	003fe206 	br	10105b3c <__alt_data_end+0xfffe5b3c>
10105bb4:	80800517 	ldw	r2,20(r16)
10105bb8:	80000215 	stw	zero,8(r16)
10105bbc:	0085c83a 	sub	r2,zero,r2
10105bc0:	80800615 	stw	r2,24(r16)
10105bc4:	183fe41e 	bne	r3,zero,10105b58 <__alt_data_end+0xfffe5b58>
10105bc8:	80c0030b 	ldhu	r3,12(r16)
10105bcc:	0005883a 	mov	r2,zero
10105bd0:	1900200c 	andi	r4,r3,128
10105bd4:	203fe126 	beq	r4,zero,10105b5c <__alt_data_end+0xfffe5b5c>
10105bd8:	18c01014 	ori	r3,r3,64
10105bdc:	80c0030d 	sth	r3,12(r16)
10105be0:	00bfffc4 	movi	r2,-1
10105be4:	003fdd06 	br	10105b5c <__alt_data_end+0xfffe5b5c>
10105be8:	0101aa00 	call	10101aa0 <__sinit>
10105bec:	003fcd06 	br	10105b24 <__alt_data_end+0xfffe5b24>
10105bf0:	0005883a 	mov	r2,zero
10105bf4:	003fd606 	br	10105b50 <__alt_data_end+0xfffe5b50>
10105bf8:	81400c17 	ldw	r5,48(r16)
10105bfc:	28000626 	beq	r5,zero,10105c18 <__swsetup_r+0x124>
10105c00:	80801004 	addi	r2,r16,64
10105c04:	28800326 	beq	r5,r2,10105c14 <__swsetup_r+0x120>
10105c08:	8809883a 	mov	r4,r17
10105c0c:	0101d200 	call	10101d20 <_free_r>
10105c10:	8100030b 	ldhu	r4,12(r16)
10105c14:	80000c15 	stw	zero,48(r16)
10105c18:	80c00417 	ldw	r3,16(r16)
10105c1c:	00bff6c4 	movi	r2,-37
10105c20:	1108703a 	and	r4,r2,r4
10105c24:	80000115 	stw	zero,4(r16)
10105c28:	80c00015 	stw	r3,0(r16)
10105c2c:	003fd506 	br	10105b84 <__alt_data_end+0xfffe5b84>
10105c30:	00800244 	movi	r2,9
10105c34:	88800015 	stw	r2,0(r17)
10105c38:	20801014 	ori	r2,r4,64
10105c3c:	8080030d 	sth	r2,12(r16)
10105c40:	00bfffc4 	movi	r2,-1
10105c44:	003fc506 	br	10105b5c <__alt_data_end+0xfffe5b5c>

10105c48 <_close_r>:
10105c48:	defffd04 	addi	sp,sp,-12
10105c4c:	dc000015 	stw	r16,0(sp)
10105c50:	04040474 	movhi	r16,4113
10105c54:	dc400115 	stw	r17,4(sp)
10105c58:	8412a804 	addi	r16,r16,19104
10105c5c:	2023883a 	mov	r17,r4
10105c60:	2809883a 	mov	r4,r5
10105c64:	dfc00215 	stw	ra,8(sp)
10105c68:	80000015 	stw	zero,0(r16)
10105c6c:	010e45c0 	call	1010e45c <close>
10105c70:	00ffffc4 	movi	r3,-1
10105c74:	10c00526 	beq	r2,r3,10105c8c <_close_r+0x44>
10105c78:	dfc00217 	ldw	ra,8(sp)
10105c7c:	dc400117 	ldw	r17,4(sp)
10105c80:	dc000017 	ldw	r16,0(sp)
10105c84:	dec00304 	addi	sp,sp,12
10105c88:	f800283a 	ret
10105c8c:	80c00017 	ldw	r3,0(r16)
10105c90:	183ff926 	beq	r3,zero,10105c78 <__alt_data_end+0xfffe5c78>
10105c94:	88c00015 	stw	r3,0(r17)
10105c98:	003ff706 	br	10105c78 <__alt_data_end+0xfffe5c78>

10105c9c <quorem>:
10105c9c:	defff704 	addi	sp,sp,-36
10105ca0:	dc800215 	stw	r18,8(sp)
10105ca4:	20800417 	ldw	r2,16(r4)
10105ca8:	2c800417 	ldw	r18,16(r5)
10105cac:	dfc00815 	stw	ra,32(sp)
10105cb0:	ddc00715 	stw	r23,28(sp)
10105cb4:	dd800615 	stw	r22,24(sp)
10105cb8:	dd400515 	stw	r21,20(sp)
10105cbc:	dd000415 	stw	r20,16(sp)
10105cc0:	dcc00315 	stw	r19,12(sp)
10105cc4:	dc400115 	stw	r17,4(sp)
10105cc8:	dc000015 	stw	r16,0(sp)
10105ccc:	14807116 	blt	r2,r18,10105e94 <quorem+0x1f8>
10105cd0:	94bfffc4 	addi	r18,r18,-1
10105cd4:	94ad883a 	add	r22,r18,r18
10105cd8:	b5ad883a 	add	r22,r22,r22
10105cdc:	2c400504 	addi	r17,r5,20
10105ce0:	8da9883a 	add	r20,r17,r22
10105ce4:	25400504 	addi	r21,r4,20
10105ce8:	282f883a 	mov	r23,r5
10105cec:	adad883a 	add	r22,r21,r22
10105cf0:	a1400017 	ldw	r5,0(r20)
10105cf4:	2021883a 	mov	r16,r4
10105cf8:	b1000017 	ldw	r4,0(r22)
10105cfc:	29400044 	addi	r5,r5,1
10105d00:	01011f00 	call	101011f0 <__udivsi3>
10105d04:	1027883a 	mov	r19,r2
10105d08:	10002c26 	beq	r2,zero,10105dbc <quorem+0x120>
10105d0c:	a813883a 	mov	r9,r21
10105d10:	880b883a 	mov	r5,r17
10105d14:	0009883a 	mov	r4,zero
10105d18:	000d883a 	mov	r6,zero
10105d1c:	2a000017 	ldw	r8,0(r5)
10105d20:	49c00017 	ldw	r7,0(r9)
10105d24:	29400104 	addi	r5,r5,4
10105d28:	40bfffcc 	andi	r2,r8,65535
10105d2c:	14c5383a 	mul	r2,r2,r19
10105d30:	4010d43a 	srli	r8,r8,16
10105d34:	38ffffcc 	andi	r3,r7,65535
10105d38:	1105883a 	add	r2,r2,r4
10105d3c:	1008d43a 	srli	r4,r2,16
10105d40:	44d1383a 	mul	r8,r8,r19
10105d44:	198d883a 	add	r6,r3,r6
10105d48:	10ffffcc 	andi	r3,r2,65535
10105d4c:	30c7c83a 	sub	r3,r6,r3
10105d50:	380ed43a 	srli	r7,r7,16
10105d54:	4105883a 	add	r2,r8,r4
10105d58:	180dd43a 	srai	r6,r3,16
10105d5c:	113fffcc 	andi	r4,r2,65535
10105d60:	390fc83a 	sub	r7,r7,r4
10105d64:	398d883a 	add	r6,r7,r6
10105d68:	300e943a 	slli	r7,r6,16
10105d6c:	18ffffcc 	andi	r3,r3,65535
10105d70:	1008d43a 	srli	r4,r2,16
10105d74:	38ceb03a 	or	r7,r7,r3
10105d78:	49c00015 	stw	r7,0(r9)
10105d7c:	300dd43a 	srai	r6,r6,16
10105d80:	4a400104 	addi	r9,r9,4
10105d84:	a17fe52e 	bgeu	r20,r5,10105d1c <__alt_data_end+0xfffe5d1c>
10105d88:	b0800017 	ldw	r2,0(r22)
10105d8c:	10000b1e 	bne	r2,zero,10105dbc <quorem+0x120>
10105d90:	b0bfff04 	addi	r2,r22,-4
10105d94:	a880082e 	bgeu	r21,r2,10105db8 <quorem+0x11c>
10105d98:	b0ffff17 	ldw	r3,-4(r22)
10105d9c:	18000326 	beq	r3,zero,10105dac <quorem+0x110>
10105da0:	00000506 	br	10105db8 <quorem+0x11c>
10105da4:	10c00017 	ldw	r3,0(r2)
10105da8:	1800031e 	bne	r3,zero,10105db8 <quorem+0x11c>
10105dac:	10bfff04 	addi	r2,r2,-4
10105db0:	94bfffc4 	addi	r18,r18,-1
10105db4:	a8bffb36 	bltu	r21,r2,10105da4 <__alt_data_end+0xfffe5da4>
10105db8:	84800415 	stw	r18,16(r16)
10105dbc:	b80b883a 	mov	r5,r23
10105dc0:	8009883a 	mov	r4,r16
10105dc4:	010886c0 	call	1010886c <__mcmp>
10105dc8:	10002616 	blt	r2,zero,10105e64 <quorem+0x1c8>
10105dcc:	9cc00044 	addi	r19,r19,1
10105dd0:	a805883a 	mov	r2,r21
10105dd4:	000b883a 	mov	r5,zero
10105dd8:	11000017 	ldw	r4,0(r2)
10105ddc:	89800017 	ldw	r6,0(r17)
10105de0:	10800104 	addi	r2,r2,4
10105de4:	20ffffcc 	andi	r3,r4,65535
10105de8:	194b883a 	add	r5,r3,r5
10105dec:	30ffffcc 	andi	r3,r6,65535
10105df0:	28c7c83a 	sub	r3,r5,r3
10105df4:	300cd43a 	srli	r6,r6,16
10105df8:	2008d43a 	srli	r4,r4,16
10105dfc:	180bd43a 	srai	r5,r3,16
10105e00:	18ffffcc 	andi	r3,r3,65535
10105e04:	2189c83a 	sub	r4,r4,r6
10105e08:	2149883a 	add	r4,r4,r5
10105e0c:	200c943a 	slli	r6,r4,16
10105e10:	8c400104 	addi	r17,r17,4
10105e14:	200bd43a 	srai	r5,r4,16
10105e18:	30c6b03a 	or	r3,r6,r3
10105e1c:	10ffff15 	stw	r3,-4(r2)
10105e20:	a47fed2e 	bgeu	r20,r17,10105dd8 <__alt_data_end+0xfffe5dd8>
10105e24:	9485883a 	add	r2,r18,r18
10105e28:	1085883a 	add	r2,r2,r2
10105e2c:	a887883a 	add	r3,r21,r2
10105e30:	18800017 	ldw	r2,0(r3)
10105e34:	10000b1e 	bne	r2,zero,10105e64 <quorem+0x1c8>
10105e38:	18bfff04 	addi	r2,r3,-4
10105e3c:	a880082e 	bgeu	r21,r2,10105e60 <quorem+0x1c4>
10105e40:	18ffff17 	ldw	r3,-4(r3)
10105e44:	18000326 	beq	r3,zero,10105e54 <quorem+0x1b8>
10105e48:	00000506 	br	10105e60 <quorem+0x1c4>
10105e4c:	10c00017 	ldw	r3,0(r2)
10105e50:	1800031e 	bne	r3,zero,10105e60 <quorem+0x1c4>
10105e54:	10bfff04 	addi	r2,r2,-4
10105e58:	94bfffc4 	addi	r18,r18,-1
10105e5c:	a8bffb36 	bltu	r21,r2,10105e4c <__alt_data_end+0xfffe5e4c>
10105e60:	84800415 	stw	r18,16(r16)
10105e64:	9805883a 	mov	r2,r19
10105e68:	dfc00817 	ldw	ra,32(sp)
10105e6c:	ddc00717 	ldw	r23,28(sp)
10105e70:	dd800617 	ldw	r22,24(sp)
10105e74:	dd400517 	ldw	r21,20(sp)
10105e78:	dd000417 	ldw	r20,16(sp)
10105e7c:	dcc00317 	ldw	r19,12(sp)
10105e80:	dc800217 	ldw	r18,8(sp)
10105e84:	dc400117 	ldw	r17,4(sp)
10105e88:	dc000017 	ldw	r16,0(sp)
10105e8c:	dec00904 	addi	sp,sp,36
10105e90:	f800283a 	ret
10105e94:	0005883a 	mov	r2,zero
10105e98:	003ff306 	br	10105e68 <__alt_data_end+0xfffe5e68>

10105e9c <_dtoa_r>:
10105e9c:	20801017 	ldw	r2,64(r4)
10105ea0:	deffde04 	addi	sp,sp,-136
10105ea4:	df002015 	stw	fp,128(sp)
10105ea8:	dcc01b15 	stw	r19,108(sp)
10105eac:	dc801a15 	stw	r18,104(sp)
10105eb0:	dc401915 	stw	r17,100(sp)
10105eb4:	dc001815 	stw	r16,96(sp)
10105eb8:	dfc02115 	stw	ra,132(sp)
10105ebc:	ddc01f15 	stw	r23,124(sp)
10105ec0:	dd801e15 	stw	r22,120(sp)
10105ec4:	dd401d15 	stw	r21,116(sp)
10105ec8:	dd001c15 	stw	r20,112(sp)
10105ecc:	d9c00315 	stw	r7,12(sp)
10105ed0:	2039883a 	mov	fp,r4
10105ed4:	3023883a 	mov	r17,r6
10105ed8:	2825883a 	mov	r18,r5
10105edc:	dc002417 	ldw	r16,144(sp)
10105ee0:	3027883a 	mov	r19,r6
10105ee4:	10000826 	beq	r2,zero,10105f08 <_dtoa_r+0x6c>
10105ee8:	21801117 	ldw	r6,68(r4)
10105eec:	00c00044 	movi	r3,1
10105ef0:	100b883a 	mov	r5,r2
10105ef4:	1986983a 	sll	r3,r3,r6
10105ef8:	11800115 	stw	r6,4(r2)
10105efc:	10c00215 	stw	r3,8(r2)
10105f00:	010804c0 	call	1010804c <_Bfree>
10105f04:	e0001015 	stw	zero,64(fp)
10105f08:	88002e16 	blt	r17,zero,10105fc4 <_dtoa_r+0x128>
10105f0c:	80000015 	stw	zero,0(r16)
10105f10:	889ffc2c 	andhi	r2,r17,32752
10105f14:	00dffc34 	movhi	r3,32752
10105f18:	10c01c26 	beq	r2,r3,10105f8c <_dtoa_r+0xf0>
10105f1c:	000d883a 	mov	r6,zero
10105f20:	000f883a 	mov	r7,zero
10105f24:	9009883a 	mov	r4,r18
10105f28:	980b883a 	mov	r5,r19
10105f2c:	010cf4c0 	call	1010cf4c <__eqdf2>
10105f30:	10002b1e 	bne	r2,zero,10105fe0 <_dtoa_r+0x144>
10105f34:	d9c02317 	ldw	r7,140(sp)
10105f38:	00800044 	movi	r2,1
10105f3c:	38800015 	stw	r2,0(r7)
10105f40:	d8802517 	ldw	r2,148(sp)
10105f44:	10019e26 	beq	r2,zero,101065c0 <_dtoa_r+0x724>
10105f48:	d8c02517 	ldw	r3,148(sp)
10105f4c:	00840474 	movhi	r2,4113
10105f50:	10844944 	addi	r2,r2,4389
10105f54:	18800015 	stw	r2,0(r3)
10105f58:	10bfffc4 	addi	r2,r2,-1
10105f5c:	dfc02117 	ldw	ra,132(sp)
10105f60:	df002017 	ldw	fp,128(sp)
10105f64:	ddc01f17 	ldw	r23,124(sp)
10105f68:	dd801e17 	ldw	r22,120(sp)
10105f6c:	dd401d17 	ldw	r21,116(sp)
10105f70:	dd001c17 	ldw	r20,112(sp)
10105f74:	dcc01b17 	ldw	r19,108(sp)
10105f78:	dc801a17 	ldw	r18,104(sp)
10105f7c:	dc401917 	ldw	r17,100(sp)
10105f80:	dc001817 	ldw	r16,96(sp)
10105f84:	dec02204 	addi	sp,sp,136
10105f88:	f800283a 	ret
10105f8c:	d8c02317 	ldw	r3,140(sp)
10105f90:	0089c3c4 	movi	r2,9999
10105f94:	18800015 	stw	r2,0(r3)
10105f98:	90017726 	beq	r18,zero,10106578 <_dtoa_r+0x6dc>
10105f9c:	00840474 	movhi	r2,4113
10105fa0:	10845504 	addi	r2,r2,4436
10105fa4:	d9002517 	ldw	r4,148(sp)
10105fa8:	203fec26 	beq	r4,zero,10105f5c <__alt_data_end+0xfffe5f5c>
10105fac:	10c000c7 	ldb	r3,3(r2)
10105fb0:	1801781e 	bne	r3,zero,10106594 <_dtoa_r+0x6f8>
10105fb4:	10c000c4 	addi	r3,r2,3
10105fb8:	d9802517 	ldw	r6,148(sp)
10105fbc:	30c00015 	stw	r3,0(r6)
10105fc0:	003fe606 	br	10105f5c <__alt_data_end+0xfffe5f5c>
10105fc4:	04e00034 	movhi	r19,32768
10105fc8:	9cffffc4 	addi	r19,r19,-1
10105fcc:	00800044 	movi	r2,1
10105fd0:	8ce6703a 	and	r19,r17,r19
10105fd4:	80800015 	stw	r2,0(r16)
10105fd8:	9823883a 	mov	r17,r19
10105fdc:	003fcc06 	br	10105f10 <__alt_data_end+0xfffe5f10>
10105fe0:	d8800204 	addi	r2,sp,8
10105fe4:	d8800015 	stw	r2,0(sp)
10105fe8:	d9c00104 	addi	r7,sp,4
10105fec:	900b883a 	mov	r5,r18
10105ff0:	980d883a 	mov	r6,r19
10105ff4:	e009883a 	mov	r4,fp
10105ff8:	8820d53a 	srli	r16,r17,20
10105ffc:	0108c380 	call	10108c38 <__d2b>
10106000:	d8800915 	stw	r2,36(sp)
10106004:	8001651e 	bne	r16,zero,1010659c <_dtoa_r+0x700>
10106008:	dd800217 	ldw	r22,8(sp)
1010600c:	dc000117 	ldw	r16,4(sp)
10106010:	00800804 	movi	r2,32
10106014:	b421883a 	add	r16,r22,r16
10106018:	80c10c84 	addi	r3,r16,1074
1010601c:	10c2d10e 	bge	r2,r3,10106b64 <_dtoa_r+0xcc8>
10106020:	00801004 	movi	r2,64
10106024:	81010484 	addi	r4,r16,1042
10106028:	10c7c83a 	sub	r3,r2,r3
1010602c:	9108d83a 	srl	r4,r18,r4
10106030:	88e2983a 	sll	r17,r17,r3
10106034:	2448b03a 	or	r4,r4,r17
10106038:	010e3140 	call	1010e314 <__floatunsidf>
1010603c:	017f8434 	movhi	r5,65040
10106040:	01800044 	movi	r6,1
10106044:	1009883a 	mov	r4,r2
10106048:	194b883a 	add	r5,r3,r5
1010604c:	843fffc4 	addi	r16,r16,-1
10106050:	d9801115 	stw	r6,68(sp)
10106054:	000d883a 	mov	r6,zero
10106058:	01cffe34 	movhi	r7,16376
1010605c:	010d8bc0 	call	1010d8bc <__subdf3>
10106060:	0198dbf4 	movhi	r6,25455
10106064:	01cff4f4 	movhi	r7,16339
10106068:	3190d844 	addi	r6,r6,17249
1010606c:	39e1e9c4 	addi	r7,r7,-30809
10106070:	1009883a 	mov	r4,r2
10106074:	180b883a 	mov	r5,r3
10106078:	010d1a40 	call	1010d1a4 <__muldf3>
1010607c:	01a2d874 	movhi	r6,35681
10106080:	01cff1f4 	movhi	r7,16327
10106084:	31b22cc4 	addi	r6,r6,-14157
10106088:	39e28a04 	addi	r7,r7,-30168
1010608c:	180b883a 	mov	r5,r3
10106090:	1009883a 	mov	r4,r2
10106094:	010bdb80 	call	1010bdb8 <__adddf3>
10106098:	8009883a 	mov	r4,r16
1010609c:	1029883a 	mov	r20,r2
101060a0:	1823883a 	mov	r17,r3
101060a4:	010e2380 	call	1010e238 <__floatsidf>
101060a8:	019427f4 	movhi	r6,20639
101060ac:	01cff4f4 	movhi	r7,16339
101060b0:	319e7ec4 	addi	r6,r6,31227
101060b4:	39d104c4 	addi	r7,r7,17427
101060b8:	1009883a 	mov	r4,r2
101060bc:	180b883a 	mov	r5,r3
101060c0:	010d1a40 	call	1010d1a4 <__muldf3>
101060c4:	100d883a 	mov	r6,r2
101060c8:	180f883a 	mov	r7,r3
101060cc:	a009883a 	mov	r4,r20
101060d0:	880b883a 	mov	r5,r17
101060d4:	010bdb80 	call	1010bdb8 <__adddf3>
101060d8:	1009883a 	mov	r4,r2
101060dc:	180b883a 	mov	r5,r3
101060e0:	1029883a 	mov	r20,r2
101060e4:	1823883a 	mov	r17,r3
101060e8:	010e1b80 	call	1010e1b8 <__fixdfsi>
101060ec:	000d883a 	mov	r6,zero
101060f0:	000f883a 	mov	r7,zero
101060f4:	a009883a 	mov	r4,r20
101060f8:	880b883a 	mov	r5,r17
101060fc:	d8800515 	stw	r2,20(sp)
10106100:	010d0b00 	call	1010d0b0 <__ledf2>
10106104:	10028716 	blt	r2,zero,10106b24 <_dtoa_r+0xc88>
10106108:	d8c00517 	ldw	r3,20(sp)
1010610c:	00800584 	movi	r2,22
10106110:	10c27536 	bltu	r2,r3,10106ae8 <_dtoa_r+0xc4c>
10106114:	180490fa 	slli	r2,r3,3
10106118:	00c40474 	movhi	r3,4113
1010611c:	18c47004 	addi	r3,r3,4544
10106120:	1885883a 	add	r2,r3,r2
10106124:	11000017 	ldw	r4,0(r2)
10106128:	11400117 	ldw	r5,4(r2)
1010612c:	900d883a 	mov	r6,r18
10106130:	980f883a 	mov	r7,r19
10106134:	010cfd40 	call	1010cfd4 <__gedf2>
10106138:	00828d0e 	bge	zero,r2,10106b70 <_dtoa_r+0xcd4>
1010613c:	d9000517 	ldw	r4,20(sp)
10106140:	d8000e15 	stw	zero,56(sp)
10106144:	213fffc4 	addi	r4,r4,-1
10106148:	d9000515 	stw	r4,20(sp)
1010614c:	b42dc83a 	sub	r22,r22,r16
10106150:	b5bfffc4 	addi	r22,r22,-1
10106154:	b0026f16 	blt	r22,zero,10106b14 <_dtoa_r+0xc78>
10106158:	d8000815 	stw	zero,32(sp)
1010615c:	d9c00517 	ldw	r7,20(sp)
10106160:	38026416 	blt	r7,zero,10106af4 <_dtoa_r+0xc58>
10106164:	b1ed883a 	add	r22,r22,r7
10106168:	d9c00d15 	stw	r7,52(sp)
1010616c:	d8000a15 	stw	zero,40(sp)
10106170:	d9800317 	ldw	r6,12(sp)
10106174:	00800244 	movi	r2,9
10106178:	11811436 	bltu	r2,r6,101065cc <_dtoa_r+0x730>
1010617c:	00800144 	movi	r2,5
10106180:	1184e10e 	bge	r2,r6,10107508 <_dtoa_r+0x166c>
10106184:	31bfff04 	addi	r6,r6,-4
10106188:	d9800315 	stw	r6,12(sp)
1010618c:	0023883a 	mov	r17,zero
10106190:	d9800317 	ldw	r6,12(sp)
10106194:	008000c4 	movi	r2,3
10106198:	30836726 	beq	r6,r2,10106f38 <_dtoa_r+0x109c>
1010619c:	1183410e 	bge	r2,r6,10106ea4 <_dtoa_r+0x1008>
101061a0:	d9c00317 	ldw	r7,12(sp)
101061a4:	00800104 	movi	r2,4
101061a8:	38827c26 	beq	r7,r2,10106b9c <_dtoa_r+0xd00>
101061ac:	00800144 	movi	r2,5
101061b0:	3884c41e 	bne	r7,r2,101074c4 <_dtoa_r+0x1628>
101061b4:	00800044 	movi	r2,1
101061b8:	d8800b15 	stw	r2,44(sp)
101061bc:	d8c00517 	ldw	r3,20(sp)
101061c0:	d9002217 	ldw	r4,136(sp)
101061c4:	1907883a 	add	r3,r3,r4
101061c8:	19800044 	addi	r6,r3,1
101061cc:	d8c00c15 	stw	r3,48(sp)
101061d0:	d9800615 	stw	r6,24(sp)
101061d4:	0183a40e 	bge	zero,r6,10107068 <_dtoa_r+0x11cc>
101061d8:	d9800617 	ldw	r6,24(sp)
101061dc:	3021883a 	mov	r16,r6
101061e0:	e0001115 	stw	zero,68(fp)
101061e4:	008005c4 	movi	r2,23
101061e8:	1184c92e 	bgeu	r2,r6,10107510 <_dtoa_r+0x1674>
101061ec:	00c00044 	movi	r3,1
101061f0:	00800104 	movi	r2,4
101061f4:	1085883a 	add	r2,r2,r2
101061f8:	11000504 	addi	r4,r2,20
101061fc:	180b883a 	mov	r5,r3
10106200:	18c00044 	addi	r3,r3,1
10106204:	313ffb2e 	bgeu	r6,r4,101061f4 <__alt_data_end+0xfffe61f4>
10106208:	e1401115 	stw	r5,68(fp)
1010620c:	e009883a 	mov	r4,fp
10106210:	0107fa40 	call	10107fa4 <_Balloc>
10106214:	d8800715 	stw	r2,28(sp)
10106218:	e0801015 	stw	r2,64(fp)
1010621c:	00800384 	movi	r2,14
10106220:	1400f736 	bltu	r2,r16,10106600 <_dtoa_r+0x764>
10106224:	8800f626 	beq	r17,zero,10106600 <_dtoa_r+0x764>
10106228:	d9c00517 	ldw	r7,20(sp)
1010622c:	01c39a0e 	bge	zero,r7,10107098 <_dtoa_r+0x11fc>
10106230:	388003cc 	andi	r2,r7,15
10106234:	100490fa 	slli	r2,r2,3
10106238:	382bd13a 	srai	r21,r7,4
1010623c:	00c40474 	movhi	r3,4113
10106240:	18c47004 	addi	r3,r3,4544
10106244:	1885883a 	add	r2,r3,r2
10106248:	a8c0040c 	andi	r3,r21,16
1010624c:	12400017 	ldw	r9,0(r2)
10106250:	12000117 	ldw	r8,4(r2)
10106254:	18037926 	beq	r3,zero,1010703c <_dtoa_r+0x11a0>
10106258:	00840474 	movhi	r2,4113
1010625c:	10846604 	addi	r2,r2,4504
10106260:	11800817 	ldw	r6,32(r2)
10106264:	11c00917 	ldw	r7,36(r2)
10106268:	9009883a 	mov	r4,r18
1010626c:	980b883a 	mov	r5,r19
10106270:	da001715 	stw	r8,92(sp)
10106274:	da401615 	stw	r9,88(sp)
10106278:	010c6640 	call	1010c664 <__divdf3>
1010627c:	da001717 	ldw	r8,92(sp)
10106280:	da401617 	ldw	r9,88(sp)
10106284:	ad4003cc 	andi	r21,r21,15
10106288:	040000c4 	movi	r16,3
1010628c:	1023883a 	mov	r17,r2
10106290:	1829883a 	mov	r20,r3
10106294:	a8001126 	beq	r21,zero,101062dc <_dtoa_r+0x440>
10106298:	05c40474 	movhi	r23,4113
1010629c:	bdc46604 	addi	r23,r23,4504
101062a0:	4805883a 	mov	r2,r9
101062a4:	4007883a 	mov	r3,r8
101062a8:	a980004c 	andi	r6,r21,1
101062ac:	1009883a 	mov	r4,r2
101062b0:	a82bd07a 	srai	r21,r21,1
101062b4:	180b883a 	mov	r5,r3
101062b8:	30000426 	beq	r6,zero,101062cc <_dtoa_r+0x430>
101062bc:	b9800017 	ldw	r6,0(r23)
101062c0:	b9c00117 	ldw	r7,4(r23)
101062c4:	84000044 	addi	r16,r16,1
101062c8:	010d1a40 	call	1010d1a4 <__muldf3>
101062cc:	bdc00204 	addi	r23,r23,8
101062d0:	a83ff51e 	bne	r21,zero,101062a8 <__alt_data_end+0xfffe62a8>
101062d4:	1013883a 	mov	r9,r2
101062d8:	1811883a 	mov	r8,r3
101062dc:	480d883a 	mov	r6,r9
101062e0:	400f883a 	mov	r7,r8
101062e4:	8809883a 	mov	r4,r17
101062e8:	a00b883a 	mov	r5,r20
101062ec:	010c6640 	call	1010c664 <__divdf3>
101062f0:	d8800f15 	stw	r2,60(sp)
101062f4:	d8c01015 	stw	r3,64(sp)
101062f8:	d8c00e17 	ldw	r3,56(sp)
101062fc:	18000626 	beq	r3,zero,10106318 <_dtoa_r+0x47c>
10106300:	d9000f17 	ldw	r4,60(sp)
10106304:	d9401017 	ldw	r5,64(sp)
10106308:	000d883a 	mov	r6,zero
1010630c:	01cffc34 	movhi	r7,16368
10106310:	010d0b00 	call	1010d0b0 <__ledf2>
10106314:	10040b16 	blt	r2,zero,10107344 <_dtoa_r+0x14a8>
10106318:	8009883a 	mov	r4,r16
1010631c:	010e2380 	call	1010e238 <__floatsidf>
10106320:	d9800f17 	ldw	r6,60(sp)
10106324:	d9c01017 	ldw	r7,64(sp)
10106328:	1009883a 	mov	r4,r2
1010632c:	180b883a 	mov	r5,r3
10106330:	010d1a40 	call	1010d1a4 <__muldf3>
10106334:	000d883a 	mov	r6,zero
10106338:	01d00734 	movhi	r7,16412
1010633c:	1009883a 	mov	r4,r2
10106340:	180b883a 	mov	r5,r3
10106344:	010bdb80 	call	1010bdb8 <__adddf3>
10106348:	1021883a 	mov	r16,r2
1010634c:	d8800617 	ldw	r2,24(sp)
10106350:	047f3034 	movhi	r17,64704
10106354:	1c63883a 	add	r17,r3,r17
10106358:	10031826 	beq	r2,zero,10106fbc <_dtoa_r+0x1120>
1010635c:	d8c00517 	ldw	r3,20(sp)
10106360:	db000617 	ldw	r12,24(sp)
10106364:	d8c01315 	stw	r3,76(sp)
10106368:	d9000b17 	ldw	r4,44(sp)
1010636c:	20038f26 	beq	r4,zero,101071ac <_dtoa_r+0x1310>
10106370:	60bfffc4 	addi	r2,r12,-1
10106374:	100490fa 	slli	r2,r2,3
10106378:	00c40474 	movhi	r3,4113
1010637c:	18c47004 	addi	r3,r3,4544
10106380:	1885883a 	add	r2,r3,r2
10106384:	11800017 	ldw	r6,0(r2)
10106388:	11c00117 	ldw	r7,4(r2)
1010638c:	d8800717 	ldw	r2,28(sp)
10106390:	0009883a 	mov	r4,zero
10106394:	014ff834 	movhi	r5,16352
10106398:	db001615 	stw	r12,88(sp)
1010639c:	15c00044 	addi	r23,r2,1
101063a0:	010c6640 	call	1010c664 <__divdf3>
101063a4:	800d883a 	mov	r6,r16
101063a8:	880f883a 	mov	r7,r17
101063ac:	1009883a 	mov	r4,r2
101063b0:	180b883a 	mov	r5,r3
101063b4:	010d8bc0 	call	1010d8bc <__subdf3>
101063b8:	d9401017 	ldw	r5,64(sp)
101063bc:	d9000f17 	ldw	r4,60(sp)
101063c0:	102b883a 	mov	r21,r2
101063c4:	d8c01215 	stw	r3,72(sp)
101063c8:	010e1b80 	call	1010e1b8 <__fixdfsi>
101063cc:	1009883a 	mov	r4,r2
101063d0:	1029883a 	mov	r20,r2
101063d4:	010e2380 	call	1010e238 <__floatsidf>
101063d8:	d9000f17 	ldw	r4,60(sp)
101063dc:	d9401017 	ldw	r5,64(sp)
101063e0:	100d883a 	mov	r6,r2
101063e4:	180f883a 	mov	r7,r3
101063e8:	010d8bc0 	call	1010d8bc <__subdf3>
101063ec:	1823883a 	mov	r17,r3
101063f0:	d8c00717 	ldw	r3,28(sp)
101063f4:	d9401217 	ldw	r5,72(sp)
101063f8:	a2000c04 	addi	r8,r20,48
101063fc:	1021883a 	mov	r16,r2
10106400:	1a000005 	stb	r8,0(r3)
10106404:	800d883a 	mov	r6,r16
10106408:	880f883a 	mov	r7,r17
1010640c:	a809883a 	mov	r4,r21
10106410:	4029883a 	mov	r20,r8
10106414:	010cfd40 	call	1010cfd4 <__gedf2>
10106418:	00841d16 	blt	zero,r2,10107490 <_dtoa_r+0x15f4>
1010641c:	800d883a 	mov	r6,r16
10106420:	880f883a 	mov	r7,r17
10106424:	0009883a 	mov	r4,zero
10106428:	014ffc34 	movhi	r5,16368
1010642c:	010d8bc0 	call	1010d8bc <__subdf3>
10106430:	d9401217 	ldw	r5,72(sp)
10106434:	100d883a 	mov	r6,r2
10106438:	180f883a 	mov	r7,r3
1010643c:	a809883a 	mov	r4,r21
10106440:	010cfd40 	call	1010cfd4 <__gedf2>
10106444:	db001617 	ldw	r12,88(sp)
10106448:	00840e16 	blt	zero,r2,10107484 <_dtoa_r+0x15e8>
1010644c:	00800044 	movi	r2,1
10106450:	13006b0e 	bge	r2,r12,10106600 <_dtoa_r+0x764>
10106454:	d9000717 	ldw	r4,28(sp)
10106458:	dd800f15 	stw	r22,60(sp)
1010645c:	dcc01015 	stw	r19,64(sp)
10106460:	2319883a 	add	r12,r4,r12
10106464:	dcc01217 	ldw	r19,72(sp)
10106468:	602d883a 	mov	r22,r12
1010646c:	dc801215 	stw	r18,72(sp)
10106470:	b825883a 	mov	r18,r23
10106474:	00000906 	br	1010649c <_dtoa_r+0x600>
10106478:	010d8bc0 	call	1010d8bc <__subdf3>
1010647c:	a80d883a 	mov	r6,r21
10106480:	980f883a 	mov	r7,r19
10106484:	1009883a 	mov	r4,r2
10106488:	180b883a 	mov	r5,r3
1010648c:	010d0b00 	call	1010d0b0 <__ledf2>
10106490:	1003e816 	blt	r2,zero,10107434 <_dtoa_r+0x1598>
10106494:	b825883a 	mov	r18,r23
10106498:	bd83e926 	beq	r23,r22,10107440 <_dtoa_r+0x15a4>
1010649c:	a809883a 	mov	r4,r21
101064a0:	980b883a 	mov	r5,r19
101064a4:	000d883a 	mov	r6,zero
101064a8:	01d00934 	movhi	r7,16420
101064ac:	010d1a40 	call	1010d1a4 <__muldf3>
101064b0:	000d883a 	mov	r6,zero
101064b4:	01d00934 	movhi	r7,16420
101064b8:	8009883a 	mov	r4,r16
101064bc:	880b883a 	mov	r5,r17
101064c0:	102b883a 	mov	r21,r2
101064c4:	1827883a 	mov	r19,r3
101064c8:	010d1a40 	call	1010d1a4 <__muldf3>
101064cc:	180b883a 	mov	r5,r3
101064d0:	1009883a 	mov	r4,r2
101064d4:	1821883a 	mov	r16,r3
101064d8:	1023883a 	mov	r17,r2
101064dc:	010e1b80 	call	1010e1b8 <__fixdfsi>
101064e0:	1009883a 	mov	r4,r2
101064e4:	1029883a 	mov	r20,r2
101064e8:	010e2380 	call	1010e238 <__floatsidf>
101064ec:	8809883a 	mov	r4,r17
101064f0:	800b883a 	mov	r5,r16
101064f4:	100d883a 	mov	r6,r2
101064f8:	180f883a 	mov	r7,r3
101064fc:	010d8bc0 	call	1010d8bc <__subdf3>
10106500:	a5000c04 	addi	r20,r20,48
10106504:	a80d883a 	mov	r6,r21
10106508:	980f883a 	mov	r7,r19
1010650c:	1009883a 	mov	r4,r2
10106510:	180b883a 	mov	r5,r3
10106514:	95000005 	stb	r20,0(r18)
10106518:	1021883a 	mov	r16,r2
1010651c:	1823883a 	mov	r17,r3
10106520:	010d0b00 	call	1010d0b0 <__ledf2>
10106524:	bdc00044 	addi	r23,r23,1
10106528:	800d883a 	mov	r6,r16
1010652c:	880f883a 	mov	r7,r17
10106530:	0009883a 	mov	r4,zero
10106534:	014ffc34 	movhi	r5,16368
10106538:	103fcf0e 	bge	r2,zero,10106478 <__alt_data_end+0xfffe6478>
1010653c:	d8c01317 	ldw	r3,76(sp)
10106540:	d8c00515 	stw	r3,20(sp)
10106544:	d9400917 	ldw	r5,36(sp)
10106548:	e009883a 	mov	r4,fp
1010654c:	010804c0 	call	1010804c <_Bfree>
10106550:	d9000517 	ldw	r4,20(sp)
10106554:	d9802317 	ldw	r6,140(sp)
10106558:	d9c02517 	ldw	r7,148(sp)
1010655c:	b8000005 	stb	zero,0(r23)
10106560:	20800044 	addi	r2,r4,1
10106564:	30800015 	stw	r2,0(r6)
10106568:	3802aa26 	beq	r7,zero,10107014 <_dtoa_r+0x1178>
1010656c:	3dc00015 	stw	r23,0(r7)
10106570:	d8800717 	ldw	r2,28(sp)
10106574:	003e7906 	br	10105f5c <__alt_data_end+0xfffe5f5c>
10106578:	00800434 	movhi	r2,16
1010657c:	10bfffc4 	addi	r2,r2,-1
10106580:	88a2703a 	and	r17,r17,r2
10106584:	883e851e 	bne	r17,zero,10105f9c <__alt_data_end+0xfffe5f9c>
10106588:	00840474 	movhi	r2,4113
1010658c:	10845204 	addi	r2,r2,4424
10106590:	003e8406 	br	10105fa4 <__alt_data_end+0xfffe5fa4>
10106594:	10c00204 	addi	r3,r2,8
10106598:	003e8706 	br	10105fb8 <__alt_data_end+0xfffe5fb8>
1010659c:	01400434 	movhi	r5,16
101065a0:	297fffc4 	addi	r5,r5,-1
101065a4:	994a703a 	and	r5,r19,r5
101065a8:	9009883a 	mov	r4,r18
101065ac:	843f0044 	addi	r16,r16,-1023
101065b0:	294ffc34 	orhi	r5,r5,16368
101065b4:	dd800217 	ldw	r22,8(sp)
101065b8:	d8001115 	stw	zero,68(sp)
101065bc:	003ea506 	br	10106054 <__alt_data_end+0xfffe6054>
101065c0:	00840474 	movhi	r2,4113
101065c4:	10844904 	addi	r2,r2,4388
101065c8:	003e6406 	br	10105f5c <__alt_data_end+0xfffe5f5c>
101065cc:	e0001115 	stw	zero,68(fp)
101065d0:	000b883a 	mov	r5,zero
101065d4:	e009883a 	mov	r4,fp
101065d8:	0107fa40 	call	10107fa4 <_Balloc>
101065dc:	01bfffc4 	movi	r6,-1
101065e0:	01c00044 	movi	r7,1
101065e4:	d8800715 	stw	r2,28(sp)
101065e8:	d9800c15 	stw	r6,48(sp)
101065ec:	e0801015 	stw	r2,64(fp)
101065f0:	d8000315 	stw	zero,12(sp)
101065f4:	d9c00b15 	stw	r7,44(sp)
101065f8:	d9800615 	stw	r6,24(sp)
101065fc:	d8002215 	stw	zero,136(sp)
10106600:	d8800117 	ldw	r2,4(sp)
10106604:	10008916 	blt	r2,zero,1010682c <_dtoa_r+0x990>
10106608:	d9000517 	ldw	r4,20(sp)
1010660c:	00c00384 	movi	r3,14
10106610:	19008616 	blt	r3,r4,1010682c <_dtoa_r+0x990>
10106614:	200490fa 	slli	r2,r4,3
10106618:	00c40474 	movhi	r3,4113
1010661c:	d9802217 	ldw	r6,136(sp)
10106620:	18c47004 	addi	r3,r3,4544
10106624:	1885883a 	add	r2,r3,r2
10106628:	14000017 	ldw	r16,0(r2)
1010662c:	14400117 	ldw	r17,4(r2)
10106630:	30016316 	blt	r6,zero,10106bc0 <_dtoa_r+0xd24>
10106634:	800d883a 	mov	r6,r16
10106638:	880f883a 	mov	r7,r17
1010663c:	9009883a 	mov	r4,r18
10106640:	980b883a 	mov	r5,r19
10106644:	010c6640 	call	1010c664 <__divdf3>
10106648:	180b883a 	mov	r5,r3
1010664c:	1009883a 	mov	r4,r2
10106650:	010e1b80 	call	1010e1b8 <__fixdfsi>
10106654:	1009883a 	mov	r4,r2
10106658:	102b883a 	mov	r21,r2
1010665c:	010e2380 	call	1010e238 <__floatsidf>
10106660:	800d883a 	mov	r6,r16
10106664:	880f883a 	mov	r7,r17
10106668:	1009883a 	mov	r4,r2
1010666c:	180b883a 	mov	r5,r3
10106670:	010d1a40 	call	1010d1a4 <__muldf3>
10106674:	100d883a 	mov	r6,r2
10106678:	180f883a 	mov	r7,r3
1010667c:	9009883a 	mov	r4,r18
10106680:	980b883a 	mov	r5,r19
10106684:	010d8bc0 	call	1010d8bc <__subdf3>
10106688:	d9c00717 	ldw	r7,28(sp)
1010668c:	1009883a 	mov	r4,r2
10106690:	a8800c04 	addi	r2,r21,48
10106694:	38800005 	stb	r2,0(r7)
10106698:	3dc00044 	addi	r23,r7,1
1010669c:	d9c00617 	ldw	r7,24(sp)
101066a0:	01800044 	movi	r6,1
101066a4:	180b883a 	mov	r5,r3
101066a8:	2005883a 	mov	r2,r4
101066ac:	39803826 	beq	r7,r6,10106790 <_dtoa_r+0x8f4>
101066b0:	000d883a 	mov	r6,zero
101066b4:	01d00934 	movhi	r7,16420
101066b8:	010d1a40 	call	1010d1a4 <__muldf3>
101066bc:	000d883a 	mov	r6,zero
101066c0:	000f883a 	mov	r7,zero
101066c4:	1009883a 	mov	r4,r2
101066c8:	180b883a 	mov	r5,r3
101066cc:	1025883a 	mov	r18,r2
101066d0:	1827883a 	mov	r19,r3
101066d4:	010cf4c0 	call	1010cf4c <__eqdf2>
101066d8:	103f9a26 	beq	r2,zero,10106544 <__alt_data_end+0xfffe6544>
101066dc:	d9c00617 	ldw	r7,24(sp)
101066e0:	d8c00717 	ldw	r3,28(sp)
101066e4:	b829883a 	mov	r20,r23
101066e8:	38bfffc4 	addi	r2,r7,-1
101066ec:	18ad883a 	add	r22,r3,r2
101066f0:	00000a06 	br	1010671c <_dtoa_r+0x880>
101066f4:	010d1a40 	call	1010d1a4 <__muldf3>
101066f8:	000d883a 	mov	r6,zero
101066fc:	000f883a 	mov	r7,zero
10106700:	1009883a 	mov	r4,r2
10106704:	180b883a 	mov	r5,r3
10106708:	1025883a 	mov	r18,r2
1010670c:	1827883a 	mov	r19,r3
10106710:	b829883a 	mov	r20,r23
10106714:	010cf4c0 	call	1010cf4c <__eqdf2>
10106718:	103f8a26 	beq	r2,zero,10106544 <__alt_data_end+0xfffe6544>
1010671c:	800d883a 	mov	r6,r16
10106720:	880f883a 	mov	r7,r17
10106724:	9009883a 	mov	r4,r18
10106728:	980b883a 	mov	r5,r19
1010672c:	010c6640 	call	1010c664 <__divdf3>
10106730:	180b883a 	mov	r5,r3
10106734:	1009883a 	mov	r4,r2
10106738:	010e1b80 	call	1010e1b8 <__fixdfsi>
1010673c:	1009883a 	mov	r4,r2
10106740:	102b883a 	mov	r21,r2
10106744:	010e2380 	call	1010e238 <__floatsidf>
10106748:	800d883a 	mov	r6,r16
1010674c:	880f883a 	mov	r7,r17
10106750:	1009883a 	mov	r4,r2
10106754:	180b883a 	mov	r5,r3
10106758:	010d1a40 	call	1010d1a4 <__muldf3>
1010675c:	100d883a 	mov	r6,r2
10106760:	180f883a 	mov	r7,r3
10106764:	9009883a 	mov	r4,r18
10106768:	980b883a 	mov	r5,r19
1010676c:	010d8bc0 	call	1010d8bc <__subdf3>
10106770:	aa000c04 	addi	r8,r21,48
10106774:	a2000005 	stb	r8,0(r20)
10106778:	000d883a 	mov	r6,zero
1010677c:	01d00934 	movhi	r7,16420
10106780:	1009883a 	mov	r4,r2
10106784:	180b883a 	mov	r5,r3
10106788:	a5c00044 	addi	r23,r20,1
1010678c:	b53fd91e 	bne	r22,r20,101066f4 <__alt_data_end+0xfffe66f4>
10106790:	100d883a 	mov	r6,r2
10106794:	180f883a 	mov	r7,r3
10106798:	1009883a 	mov	r4,r2
1010679c:	180b883a 	mov	r5,r3
101067a0:	010bdb80 	call	1010bdb8 <__adddf3>
101067a4:	100d883a 	mov	r6,r2
101067a8:	180f883a 	mov	r7,r3
101067ac:	8009883a 	mov	r4,r16
101067b0:	880b883a 	mov	r5,r17
101067b4:	1027883a 	mov	r19,r2
101067b8:	1825883a 	mov	r18,r3
101067bc:	010d0b00 	call	1010d0b0 <__ledf2>
101067c0:	10000816 	blt	r2,zero,101067e4 <_dtoa_r+0x948>
101067c4:	980d883a 	mov	r6,r19
101067c8:	900f883a 	mov	r7,r18
101067cc:	8009883a 	mov	r4,r16
101067d0:	880b883a 	mov	r5,r17
101067d4:	010cf4c0 	call	1010cf4c <__eqdf2>
101067d8:	103f5a1e 	bne	r2,zero,10106544 <__alt_data_end+0xfffe6544>
101067dc:	ad40004c 	andi	r21,r21,1
101067e0:	a83f5826 	beq	r21,zero,10106544 <__alt_data_end+0xfffe6544>
101067e4:	bd3fffc3 	ldbu	r20,-1(r23)
101067e8:	b8bfffc4 	addi	r2,r23,-1
101067ec:	1007883a 	mov	r3,r2
101067f0:	01400e44 	movi	r5,57
101067f4:	d9800717 	ldw	r6,28(sp)
101067f8:	00000506 	br	10106810 <_dtoa_r+0x974>
101067fc:	18ffffc4 	addi	r3,r3,-1
10106800:	11824726 	beq	r2,r6,10107120 <_dtoa_r+0x1284>
10106804:	1d000003 	ldbu	r20,0(r3)
10106808:	102f883a 	mov	r23,r2
1010680c:	10bfffc4 	addi	r2,r2,-1
10106810:	a1003fcc 	andi	r4,r20,255
10106814:	2100201c 	xori	r4,r4,128
10106818:	213fe004 	addi	r4,r4,-128
1010681c:	217ff726 	beq	r4,r5,101067fc <__alt_data_end+0xfffe67fc>
10106820:	a2000044 	addi	r8,r20,1
10106824:	12000005 	stb	r8,0(r2)
10106828:	003f4606 	br	10106544 <__alt_data_end+0xfffe6544>
1010682c:	d9000b17 	ldw	r4,44(sp)
10106830:	2000c826 	beq	r4,zero,10106b54 <_dtoa_r+0xcb8>
10106834:	d9800317 	ldw	r6,12(sp)
10106838:	00c00044 	movi	r3,1
1010683c:	1980f90e 	bge	r3,r6,10106c24 <_dtoa_r+0xd88>
10106840:	d8800617 	ldw	r2,24(sp)
10106844:	d8c00a17 	ldw	r3,40(sp)
10106848:	157fffc4 	addi	r21,r2,-1
1010684c:	1d41f316 	blt	r3,r21,1010701c <_dtoa_r+0x1180>
10106850:	1d6bc83a 	sub	r21,r3,r21
10106854:	d9c00617 	ldw	r7,24(sp)
10106858:	3802aa16 	blt	r7,zero,10107304 <_dtoa_r+0x1468>
1010685c:	dd000817 	ldw	r20,32(sp)
10106860:	d8800617 	ldw	r2,24(sp)
10106864:	d8c00817 	ldw	r3,32(sp)
10106868:	01400044 	movi	r5,1
1010686c:	e009883a 	mov	r4,fp
10106870:	1887883a 	add	r3,r3,r2
10106874:	d8c00815 	stw	r3,32(sp)
10106878:	b0ad883a 	add	r22,r22,r2
1010687c:	01083b00 	call	101083b0 <__i2b>
10106880:	1023883a 	mov	r17,r2
10106884:	a0000826 	beq	r20,zero,101068a8 <_dtoa_r+0xa0c>
10106888:	0580070e 	bge	zero,r22,101068a8 <_dtoa_r+0xa0c>
1010688c:	a005883a 	mov	r2,r20
10106890:	b500b916 	blt	r22,r20,10106b78 <_dtoa_r+0xcdc>
10106894:	d9000817 	ldw	r4,32(sp)
10106898:	a0a9c83a 	sub	r20,r20,r2
1010689c:	b0adc83a 	sub	r22,r22,r2
101068a0:	2089c83a 	sub	r4,r4,r2
101068a4:	d9000815 	stw	r4,32(sp)
101068a8:	d9800a17 	ldw	r6,40(sp)
101068ac:	0181810e 	bge	zero,r6,10106eb4 <_dtoa_r+0x1018>
101068b0:	d9c00b17 	ldw	r7,44(sp)
101068b4:	3800b326 	beq	r7,zero,10106b84 <_dtoa_r+0xce8>
101068b8:	a800b226 	beq	r21,zero,10106b84 <_dtoa_r+0xce8>
101068bc:	880b883a 	mov	r5,r17
101068c0:	a80d883a 	mov	r6,r21
101068c4:	e009883a 	mov	r4,fp
101068c8:	01085e40 	call	101085e4 <__pow5mult>
101068cc:	d9800917 	ldw	r6,36(sp)
101068d0:	100b883a 	mov	r5,r2
101068d4:	e009883a 	mov	r4,fp
101068d8:	1023883a 	mov	r17,r2
101068dc:	01083ec0 	call	101083ec <__multiply>
101068e0:	1021883a 	mov	r16,r2
101068e4:	d8800a17 	ldw	r2,40(sp)
101068e8:	d9400917 	ldw	r5,36(sp)
101068ec:	e009883a 	mov	r4,fp
101068f0:	1545c83a 	sub	r2,r2,r21
101068f4:	d8800a15 	stw	r2,40(sp)
101068f8:	010804c0 	call	1010804c <_Bfree>
101068fc:	d8c00a17 	ldw	r3,40(sp)
10106900:	18009f1e 	bne	r3,zero,10106b80 <_dtoa_r+0xce4>
10106904:	05c00044 	movi	r23,1
10106908:	e009883a 	mov	r4,fp
1010690c:	b80b883a 	mov	r5,r23
10106910:	01083b00 	call	101083b0 <__i2b>
10106914:	d9000d17 	ldw	r4,52(sp)
10106918:	102b883a 	mov	r21,r2
1010691c:	2000ce26 	beq	r4,zero,10106c58 <_dtoa_r+0xdbc>
10106920:	200d883a 	mov	r6,r4
10106924:	100b883a 	mov	r5,r2
10106928:	e009883a 	mov	r4,fp
1010692c:	01085e40 	call	101085e4 <__pow5mult>
10106930:	d9800317 	ldw	r6,12(sp)
10106934:	102b883a 	mov	r21,r2
10106938:	b981810e 	bge	r23,r6,10106f40 <_dtoa_r+0x10a4>
1010693c:	0027883a 	mov	r19,zero
10106940:	a8800417 	ldw	r2,16(r21)
10106944:	05c00804 	movi	r23,32
10106948:	10800104 	addi	r2,r2,4
1010694c:	1085883a 	add	r2,r2,r2
10106950:	1085883a 	add	r2,r2,r2
10106954:	a885883a 	add	r2,r21,r2
10106958:	11000017 	ldw	r4,0(r2)
1010695c:	01082980 	call	10108298 <__hi0bits>
10106960:	b885c83a 	sub	r2,r23,r2
10106964:	1585883a 	add	r2,r2,r22
10106968:	108007cc 	andi	r2,r2,31
1010696c:	1000b326 	beq	r2,zero,10106c3c <_dtoa_r+0xda0>
10106970:	00c00804 	movi	r3,32
10106974:	1887c83a 	sub	r3,r3,r2
10106978:	01000104 	movi	r4,4
1010697c:	20c2cd0e 	bge	r4,r3,101074b4 <_dtoa_r+0x1618>
10106980:	00c00704 	movi	r3,28
10106984:	1885c83a 	sub	r2,r3,r2
10106988:	d8c00817 	ldw	r3,32(sp)
1010698c:	a0a9883a 	add	r20,r20,r2
10106990:	b0ad883a 	add	r22,r22,r2
10106994:	1887883a 	add	r3,r3,r2
10106998:	d8c00815 	stw	r3,32(sp)
1010699c:	d9800817 	ldw	r6,32(sp)
101069a0:	0180040e 	bge	zero,r6,101069b4 <_dtoa_r+0xb18>
101069a4:	800b883a 	mov	r5,r16
101069a8:	e009883a 	mov	r4,fp
101069ac:	01087240 	call	10108724 <__lshift>
101069b0:	1021883a 	mov	r16,r2
101069b4:	0580050e 	bge	zero,r22,101069cc <_dtoa_r+0xb30>
101069b8:	a80b883a 	mov	r5,r21
101069bc:	b00d883a 	mov	r6,r22
101069c0:	e009883a 	mov	r4,fp
101069c4:	01087240 	call	10108724 <__lshift>
101069c8:	102b883a 	mov	r21,r2
101069cc:	d9c00e17 	ldw	r7,56(sp)
101069d0:	3801211e 	bne	r7,zero,10106e58 <_dtoa_r+0xfbc>
101069d4:	d9800617 	ldw	r6,24(sp)
101069d8:	0181380e 	bge	zero,r6,10106ebc <_dtoa_r+0x1020>
101069dc:	d8c00b17 	ldw	r3,44(sp)
101069e0:	1800ab1e 	bne	r3,zero,10106c90 <_dtoa_r+0xdf4>
101069e4:	dc800717 	ldw	r18,28(sp)
101069e8:	dcc00617 	ldw	r19,24(sp)
101069ec:	9029883a 	mov	r20,r18
101069f0:	00000206 	br	101069fc <_dtoa_r+0xb60>
101069f4:	01080740 	call	10108074 <__multadd>
101069f8:	1021883a 	mov	r16,r2
101069fc:	a80b883a 	mov	r5,r21
10106a00:	8009883a 	mov	r4,r16
10106a04:	0105c9c0 	call	10105c9c <quorem>
10106a08:	10800c04 	addi	r2,r2,48
10106a0c:	90800005 	stb	r2,0(r18)
10106a10:	94800044 	addi	r18,r18,1
10106a14:	9507c83a 	sub	r3,r18,r20
10106a18:	000f883a 	mov	r7,zero
10106a1c:	01800284 	movi	r6,10
10106a20:	800b883a 	mov	r5,r16
10106a24:	e009883a 	mov	r4,fp
10106a28:	1cfff216 	blt	r3,r19,101069f4 <__alt_data_end+0xfffe69f4>
10106a2c:	1011883a 	mov	r8,r2
10106a30:	d8800617 	ldw	r2,24(sp)
10106a34:	0082370e 	bge	zero,r2,10107314 <_dtoa_r+0x1478>
10106a38:	d9000717 	ldw	r4,28(sp)
10106a3c:	0025883a 	mov	r18,zero
10106a40:	20af883a 	add	r23,r4,r2
10106a44:	01800044 	movi	r6,1
10106a48:	800b883a 	mov	r5,r16
10106a4c:	e009883a 	mov	r4,fp
10106a50:	da001715 	stw	r8,92(sp)
10106a54:	01087240 	call	10108724 <__lshift>
10106a58:	a80b883a 	mov	r5,r21
10106a5c:	1009883a 	mov	r4,r2
10106a60:	d8800915 	stw	r2,36(sp)
10106a64:	010886c0 	call	1010886c <__mcmp>
10106a68:	da001717 	ldw	r8,92(sp)
10106a6c:	0081800e 	bge	zero,r2,10107070 <_dtoa_r+0x11d4>
10106a70:	b93fffc3 	ldbu	r4,-1(r23)
10106a74:	b8bfffc4 	addi	r2,r23,-1
10106a78:	1007883a 	mov	r3,r2
10106a7c:	01800e44 	movi	r6,57
10106a80:	d9c00717 	ldw	r7,28(sp)
10106a84:	00000506 	br	10106a9c <_dtoa_r+0xc00>
10106a88:	18ffffc4 	addi	r3,r3,-1
10106a8c:	11c12326 	beq	r2,r7,10106f1c <_dtoa_r+0x1080>
10106a90:	19000003 	ldbu	r4,0(r3)
10106a94:	102f883a 	mov	r23,r2
10106a98:	10bfffc4 	addi	r2,r2,-1
10106a9c:	21403fcc 	andi	r5,r4,255
10106aa0:	2940201c 	xori	r5,r5,128
10106aa4:	297fe004 	addi	r5,r5,-128
10106aa8:	29bff726 	beq	r5,r6,10106a88 <__alt_data_end+0xfffe6a88>
10106aac:	21000044 	addi	r4,r4,1
10106ab0:	11000005 	stb	r4,0(r2)
10106ab4:	a80b883a 	mov	r5,r21
10106ab8:	e009883a 	mov	r4,fp
10106abc:	010804c0 	call	1010804c <_Bfree>
10106ac0:	883ea026 	beq	r17,zero,10106544 <__alt_data_end+0xfffe6544>
10106ac4:	90000426 	beq	r18,zero,10106ad8 <_dtoa_r+0xc3c>
10106ac8:	94400326 	beq	r18,r17,10106ad8 <_dtoa_r+0xc3c>
10106acc:	900b883a 	mov	r5,r18
10106ad0:	e009883a 	mov	r4,fp
10106ad4:	010804c0 	call	1010804c <_Bfree>
10106ad8:	880b883a 	mov	r5,r17
10106adc:	e009883a 	mov	r4,fp
10106ae0:	010804c0 	call	1010804c <_Bfree>
10106ae4:	003e9706 	br	10106544 <__alt_data_end+0xfffe6544>
10106ae8:	01800044 	movi	r6,1
10106aec:	d9800e15 	stw	r6,56(sp)
10106af0:	003d9606 	br	1010614c <__alt_data_end+0xfffe614c>
10106af4:	d8800817 	ldw	r2,32(sp)
10106af8:	d8c00517 	ldw	r3,20(sp)
10106afc:	d8000d15 	stw	zero,52(sp)
10106b00:	10c5c83a 	sub	r2,r2,r3
10106b04:	00c9c83a 	sub	r4,zero,r3
10106b08:	d8800815 	stw	r2,32(sp)
10106b0c:	d9000a15 	stw	r4,40(sp)
10106b10:	003d9706 	br	10106170 <__alt_data_end+0xfffe6170>
10106b14:	05adc83a 	sub	r22,zero,r22
10106b18:	dd800815 	stw	r22,32(sp)
10106b1c:	002d883a 	mov	r22,zero
10106b20:	003d8e06 	br	1010615c <__alt_data_end+0xfffe615c>
10106b24:	d9000517 	ldw	r4,20(sp)
10106b28:	010e2380 	call	1010e238 <__floatsidf>
10106b2c:	100d883a 	mov	r6,r2
10106b30:	180f883a 	mov	r7,r3
10106b34:	a009883a 	mov	r4,r20
10106b38:	880b883a 	mov	r5,r17
10106b3c:	010cf4c0 	call	1010cf4c <__eqdf2>
10106b40:	103d7126 	beq	r2,zero,10106108 <__alt_data_end+0xfffe6108>
10106b44:	d9c00517 	ldw	r7,20(sp)
10106b48:	39ffffc4 	addi	r7,r7,-1
10106b4c:	d9c00515 	stw	r7,20(sp)
10106b50:	003d6d06 	br	10106108 <__alt_data_end+0xfffe6108>
10106b54:	dd400a17 	ldw	r21,40(sp)
10106b58:	dd000817 	ldw	r20,32(sp)
10106b5c:	0023883a 	mov	r17,zero
10106b60:	003f4806 	br	10106884 <__alt_data_end+0xfffe6884>
10106b64:	10e3c83a 	sub	r17,r2,r3
10106b68:	9448983a 	sll	r4,r18,r17
10106b6c:	003d3206 	br	10106038 <__alt_data_end+0xfffe6038>
10106b70:	d8000e15 	stw	zero,56(sp)
10106b74:	003d7506 	br	1010614c <__alt_data_end+0xfffe614c>
10106b78:	b005883a 	mov	r2,r22
10106b7c:	003f4506 	br	10106894 <__alt_data_end+0xfffe6894>
10106b80:	dc000915 	stw	r16,36(sp)
10106b84:	d9800a17 	ldw	r6,40(sp)
10106b88:	d9400917 	ldw	r5,36(sp)
10106b8c:	e009883a 	mov	r4,fp
10106b90:	01085e40 	call	101085e4 <__pow5mult>
10106b94:	1021883a 	mov	r16,r2
10106b98:	003f5a06 	br	10106904 <__alt_data_end+0xfffe6904>
10106b9c:	01c00044 	movi	r7,1
10106ba0:	d9c00b15 	stw	r7,44(sp)
10106ba4:	d8802217 	ldw	r2,136(sp)
10106ba8:	0081280e 	bge	zero,r2,1010704c <_dtoa_r+0x11b0>
10106bac:	100d883a 	mov	r6,r2
10106bb0:	1021883a 	mov	r16,r2
10106bb4:	d8800c15 	stw	r2,48(sp)
10106bb8:	d8800615 	stw	r2,24(sp)
10106bbc:	003d8806 	br	101061e0 <__alt_data_end+0xfffe61e0>
10106bc0:	d8800617 	ldw	r2,24(sp)
10106bc4:	00be9b16 	blt	zero,r2,10106634 <__alt_data_end+0xfffe6634>
10106bc8:	10010f1e 	bne	r2,zero,10107008 <_dtoa_r+0x116c>
10106bcc:	880b883a 	mov	r5,r17
10106bd0:	000d883a 	mov	r6,zero
10106bd4:	01d00534 	movhi	r7,16404
10106bd8:	8009883a 	mov	r4,r16
10106bdc:	010d1a40 	call	1010d1a4 <__muldf3>
10106be0:	900d883a 	mov	r6,r18
10106be4:	980f883a 	mov	r7,r19
10106be8:	1009883a 	mov	r4,r2
10106bec:	180b883a 	mov	r5,r3
10106bf0:	010cfd40 	call	1010cfd4 <__gedf2>
10106bf4:	002b883a 	mov	r21,zero
10106bf8:	0023883a 	mov	r17,zero
10106bfc:	1000bf16 	blt	r2,zero,10106efc <_dtoa_r+0x1060>
10106c00:	d9802217 	ldw	r6,136(sp)
10106c04:	ddc00717 	ldw	r23,28(sp)
10106c08:	018c303a 	nor	r6,zero,r6
10106c0c:	d9800515 	stw	r6,20(sp)
10106c10:	a80b883a 	mov	r5,r21
10106c14:	e009883a 	mov	r4,fp
10106c18:	010804c0 	call	1010804c <_Bfree>
10106c1c:	883e4926 	beq	r17,zero,10106544 <__alt_data_end+0xfffe6544>
10106c20:	003fad06 	br	10106ad8 <__alt_data_end+0xfffe6ad8>
10106c24:	d9c01117 	ldw	r7,68(sp)
10106c28:	3801bc26 	beq	r7,zero,1010731c <_dtoa_r+0x1480>
10106c2c:	10810cc4 	addi	r2,r2,1075
10106c30:	dd400a17 	ldw	r21,40(sp)
10106c34:	dd000817 	ldw	r20,32(sp)
10106c38:	003f0a06 	br	10106864 <__alt_data_end+0xfffe6864>
10106c3c:	00800704 	movi	r2,28
10106c40:	d9000817 	ldw	r4,32(sp)
10106c44:	a0a9883a 	add	r20,r20,r2
10106c48:	b0ad883a 	add	r22,r22,r2
10106c4c:	2089883a 	add	r4,r4,r2
10106c50:	d9000815 	stw	r4,32(sp)
10106c54:	003f5106 	br	1010699c <__alt_data_end+0xfffe699c>
10106c58:	d8c00317 	ldw	r3,12(sp)
10106c5c:	b8c1fc0e 	bge	r23,r3,10107450 <_dtoa_r+0x15b4>
10106c60:	0027883a 	mov	r19,zero
10106c64:	b805883a 	mov	r2,r23
10106c68:	003f3e06 	br	10106964 <__alt_data_end+0xfffe6964>
10106c6c:	880b883a 	mov	r5,r17
10106c70:	e009883a 	mov	r4,fp
10106c74:	000f883a 	mov	r7,zero
10106c78:	01800284 	movi	r6,10
10106c7c:	01080740 	call	10108074 <__multadd>
10106c80:	d9000c17 	ldw	r4,48(sp)
10106c84:	1023883a 	mov	r17,r2
10106c88:	0102040e 	bge	zero,r4,1010749c <_dtoa_r+0x1600>
10106c8c:	d9000615 	stw	r4,24(sp)
10106c90:	0500050e 	bge	zero,r20,10106ca8 <_dtoa_r+0xe0c>
10106c94:	880b883a 	mov	r5,r17
10106c98:	a00d883a 	mov	r6,r20
10106c9c:	e009883a 	mov	r4,fp
10106ca0:	01087240 	call	10108724 <__lshift>
10106ca4:	1023883a 	mov	r17,r2
10106ca8:	9801241e 	bne	r19,zero,1010713c <_dtoa_r+0x12a0>
10106cac:	8829883a 	mov	r20,r17
10106cb0:	d9000617 	ldw	r4,24(sp)
10106cb4:	dcc00717 	ldw	r19,28(sp)
10106cb8:	9480004c 	andi	r18,r18,1
10106cbc:	20bfffc4 	addi	r2,r4,-1
10106cc0:	9885883a 	add	r2,r19,r2
10106cc4:	d8800415 	stw	r2,16(sp)
10106cc8:	dc800615 	stw	r18,24(sp)
10106ccc:	a80b883a 	mov	r5,r21
10106cd0:	8009883a 	mov	r4,r16
10106cd4:	0105c9c0 	call	10105c9c <quorem>
10106cd8:	880b883a 	mov	r5,r17
10106cdc:	8009883a 	mov	r4,r16
10106ce0:	102f883a 	mov	r23,r2
10106ce4:	010886c0 	call	1010886c <__mcmp>
10106ce8:	a80b883a 	mov	r5,r21
10106cec:	a00d883a 	mov	r6,r20
10106cf0:	e009883a 	mov	r4,fp
10106cf4:	102d883a 	mov	r22,r2
10106cf8:	01088cc0 	call	101088cc <__mdiff>
10106cfc:	1007883a 	mov	r3,r2
10106d00:	10800317 	ldw	r2,12(r2)
10106d04:	bc800c04 	addi	r18,r23,48
10106d08:	180b883a 	mov	r5,r3
10106d0c:	10004e1e 	bne	r2,zero,10106e48 <_dtoa_r+0xfac>
10106d10:	8009883a 	mov	r4,r16
10106d14:	d8c01615 	stw	r3,88(sp)
10106d18:	010886c0 	call	1010886c <__mcmp>
10106d1c:	d8c01617 	ldw	r3,88(sp)
10106d20:	e009883a 	mov	r4,fp
10106d24:	d8801615 	stw	r2,88(sp)
10106d28:	180b883a 	mov	r5,r3
10106d2c:	010804c0 	call	1010804c <_Bfree>
10106d30:	d8801617 	ldw	r2,88(sp)
10106d34:	1000041e 	bne	r2,zero,10106d48 <_dtoa_r+0xeac>
10106d38:	d9800317 	ldw	r6,12(sp)
10106d3c:	3000021e 	bne	r6,zero,10106d48 <_dtoa_r+0xeac>
10106d40:	d8c00617 	ldw	r3,24(sp)
10106d44:	18003726 	beq	r3,zero,10106e24 <_dtoa_r+0xf88>
10106d48:	b0002016 	blt	r22,zero,10106dcc <_dtoa_r+0xf30>
10106d4c:	b000041e 	bne	r22,zero,10106d60 <_dtoa_r+0xec4>
10106d50:	d9000317 	ldw	r4,12(sp)
10106d54:	2000021e 	bne	r4,zero,10106d60 <_dtoa_r+0xec4>
10106d58:	d8c00617 	ldw	r3,24(sp)
10106d5c:	18001b26 	beq	r3,zero,10106dcc <_dtoa_r+0xf30>
10106d60:	00810716 	blt	zero,r2,10107180 <_dtoa_r+0x12e4>
10106d64:	d8c00417 	ldw	r3,16(sp)
10106d68:	9d800044 	addi	r22,r19,1
10106d6c:	9c800005 	stb	r18,0(r19)
10106d70:	b02f883a 	mov	r23,r22
10106d74:	98c10626 	beq	r19,r3,10107190 <_dtoa_r+0x12f4>
10106d78:	800b883a 	mov	r5,r16
10106d7c:	000f883a 	mov	r7,zero
10106d80:	01800284 	movi	r6,10
10106d84:	e009883a 	mov	r4,fp
10106d88:	01080740 	call	10108074 <__multadd>
10106d8c:	1021883a 	mov	r16,r2
10106d90:	000f883a 	mov	r7,zero
10106d94:	01800284 	movi	r6,10
10106d98:	880b883a 	mov	r5,r17
10106d9c:	e009883a 	mov	r4,fp
10106da0:	8d002526 	beq	r17,r20,10106e38 <_dtoa_r+0xf9c>
10106da4:	01080740 	call	10108074 <__multadd>
10106da8:	a00b883a 	mov	r5,r20
10106dac:	000f883a 	mov	r7,zero
10106db0:	01800284 	movi	r6,10
10106db4:	e009883a 	mov	r4,fp
10106db8:	1023883a 	mov	r17,r2
10106dbc:	01080740 	call	10108074 <__multadd>
10106dc0:	1029883a 	mov	r20,r2
10106dc4:	b027883a 	mov	r19,r22
10106dc8:	003fc006 	br	10106ccc <__alt_data_end+0xfffe6ccc>
10106dcc:	9011883a 	mov	r8,r18
10106dd0:	00800e0e 	bge	zero,r2,10106e0c <_dtoa_r+0xf70>
10106dd4:	800b883a 	mov	r5,r16
10106dd8:	01800044 	movi	r6,1
10106ddc:	e009883a 	mov	r4,fp
10106de0:	da001715 	stw	r8,92(sp)
10106de4:	01087240 	call	10108724 <__lshift>
10106de8:	a80b883a 	mov	r5,r21
10106dec:	1009883a 	mov	r4,r2
10106df0:	1021883a 	mov	r16,r2
10106df4:	010886c0 	call	1010886c <__mcmp>
10106df8:	da001717 	ldw	r8,92(sp)
10106dfc:	0081960e 	bge	zero,r2,10107458 <_dtoa_r+0x15bc>
10106e00:	00800e44 	movi	r2,57
10106e04:	40817026 	beq	r8,r2,101073c8 <_dtoa_r+0x152c>
10106e08:	ba000c44 	addi	r8,r23,49
10106e0c:	8825883a 	mov	r18,r17
10106e10:	9dc00044 	addi	r23,r19,1
10106e14:	9a000005 	stb	r8,0(r19)
10106e18:	a023883a 	mov	r17,r20
10106e1c:	dc000915 	stw	r16,36(sp)
10106e20:	003f2406 	br	10106ab4 <__alt_data_end+0xfffe6ab4>
10106e24:	00800e44 	movi	r2,57
10106e28:	9011883a 	mov	r8,r18
10106e2c:	90816626 	beq	r18,r2,101073c8 <_dtoa_r+0x152c>
10106e30:	05bff516 	blt	zero,r22,10106e08 <__alt_data_end+0xfffe6e08>
10106e34:	003ff506 	br	10106e0c <__alt_data_end+0xfffe6e0c>
10106e38:	01080740 	call	10108074 <__multadd>
10106e3c:	1023883a 	mov	r17,r2
10106e40:	1029883a 	mov	r20,r2
10106e44:	003fdf06 	br	10106dc4 <__alt_data_end+0xfffe6dc4>
10106e48:	e009883a 	mov	r4,fp
10106e4c:	010804c0 	call	1010804c <_Bfree>
10106e50:	00800044 	movi	r2,1
10106e54:	003fbc06 	br	10106d48 <__alt_data_end+0xfffe6d48>
10106e58:	a80b883a 	mov	r5,r21
10106e5c:	8009883a 	mov	r4,r16
10106e60:	010886c0 	call	1010886c <__mcmp>
10106e64:	103edb0e 	bge	r2,zero,101069d4 <__alt_data_end+0xfffe69d4>
10106e68:	800b883a 	mov	r5,r16
10106e6c:	000f883a 	mov	r7,zero
10106e70:	01800284 	movi	r6,10
10106e74:	e009883a 	mov	r4,fp
10106e78:	01080740 	call	10108074 <__multadd>
10106e7c:	1021883a 	mov	r16,r2
10106e80:	d8800517 	ldw	r2,20(sp)
10106e84:	d8c00b17 	ldw	r3,44(sp)
10106e88:	10bfffc4 	addi	r2,r2,-1
10106e8c:	d8800515 	stw	r2,20(sp)
10106e90:	183f761e 	bne	r3,zero,10106c6c <__alt_data_end+0xfffe6c6c>
10106e94:	d9000c17 	ldw	r4,48(sp)
10106e98:	0101730e 	bge	zero,r4,10107468 <_dtoa_r+0x15cc>
10106e9c:	d9000615 	stw	r4,24(sp)
10106ea0:	003ed006 	br	101069e4 <__alt_data_end+0xfffe69e4>
10106ea4:	00800084 	movi	r2,2
10106ea8:	3081861e 	bne	r6,r2,101074c4 <_dtoa_r+0x1628>
10106eac:	d8000b15 	stw	zero,44(sp)
10106eb0:	003f3c06 	br	10106ba4 <__alt_data_end+0xfffe6ba4>
10106eb4:	dc000917 	ldw	r16,36(sp)
10106eb8:	003e9206 	br	10106904 <__alt_data_end+0xfffe6904>
10106ebc:	d9c00317 	ldw	r7,12(sp)
10106ec0:	00800084 	movi	r2,2
10106ec4:	11fec50e 	bge	r2,r7,101069dc <__alt_data_end+0xfffe69dc>
10106ec8:	d9000617 	ldw	r4,24(sp)
10106ecc:	20013c1e 	bne	r4,zero,101073c0 <_dtoa_r+0x1524>
10106ed0:	a80b883a 	mov	r5,r21
10106ed4:	000f883a 	mov	r7,zero
10106ed8:	01800144 	movi	r6,5
10106edc:	e009883a 	mov	r4,fp
10106ee0:	01080740 	call	10108074 <__multadd>
10106ee4:	100b883a 	mov	r5,r2
10106ee8:	8009883a 	mov	r4,r16
10106eec:	102b883a 	mov	r21,r2
10106ef0:	010886c0 	call	1010886c <__mcmp>
10106ef4:	dc000915 	stw	r16,36(sp)
10106ef8:	00bf410e 	bge	zero,r2,10106c00 <__alt_data_end+0xfffe6c00>
10106efc:	d9c00717 	ldw	r7,28(sp)
10106f00:	00800c44 	movi	r2,49
10106f04:	38800005 	stb	r2,0(r7)
10106f08:	d8800517 	ldw	r2,20(sp)
10106f0c:	3dc00044 	addi	r23,r7,1
10106f10:	10800044 	addi	r2,r2,1
10106f14:	d8800515 	stw	r2,20(sp)
10106f18:	003f3d06 	br	10106c10 <__alt_data_end+0xfffe6c10>
10106f1c:	d9800517 	ldw	r6,20(sp)
10106f20:	d9c00717 	ldw	r7,28(sp)
10106f24:	00800c44 	movi	r2,49
10106f28:	31800044 	addi	r6,r6,1
10106f2c:	d9800515 	stw	r6,20(sp)
10106f30:	38800005 	stb	r2,0(r7)
10106f34:	003edf06 	br	10106ab4 <__alt_data_end+0xfffe6ab4>
10106f38:	d8000b15 	stw	zero,44(sp)
10106f3c:	003c9f06 	br	101061bc <__alt_data_end+0xfffe61bc>
10106f40:	903e7e1e 	bne	r18,zero,1010693c <__alt_data_end+0xfffe693c>
10106f44:	00800434 	movhi	r2,16
10106f48:	10bfffc4 	addi	r2,r2,-1
10106f4c:	9884703a 	and	r2,r19,r2
10106f50:	1000ea1e 	bne	r2,zero,101072fc <_dtoa_r+0x1460>
10106f54:	9cdffc2c 	andhi	r19,r19,32752
10106f58:	9800e826 	beq	r19,zero,101072fc <_dtoa_r+0x1460>
10106f5c:	d9c00817 	ldw	r7,32(sp)
10106f60:	b5800044 	addi	r22,r22,1
10106f64:	04c00044 	movi	r19,1
10106f68:	39c00044 	addi	r7,r7,1
10106f6c:	d9c00815 	stw	r7,32(sp)
10106f70:	d8800d17 	ldw	r2,52(sp)
10106f74:	103e721e 	bne	r2,zero,10106940 <__alt_data_end+0xfffe6940>
10106f78:	00800044 	movi	r2,1
10106f7c:	003e7906 	br	10106964 <__alt_data_end+0xfffe6964>
10106f80:	8009883a 	mov	r4,r16
10106f84:	010e2380 	call	1010e238 <__floatsidf>
10106f88:	d9800f17 	ldw	r6,60(sp)
10106f8c:	d9c01017 	ldw	r7,64(sp)
10106f90:	1009883a 	mov	r4,r2
10106f94:	180b883a 	mov	r5,r3
10106f98:	010d1a40 	call	1010d1a4 <__muldf3>
10106f9c:	000d883a 	mov	r6,zero
10106fa0:	01d00734 	movhi	r7,16412
10106fa4:	1009883a 	mov	r4,r2
10106fa8:	180b883a 	mov	r5,r3
10106fac:	010bdb80 	call	1010bdb8 <__adddf3>
10106fb0:	047f3034 	movhi	r17,64704
10106fb4:	1021883a 	mov	r16,r2
10106fb8:	1c63883a 	add	r17,r3,r17
10106fbc:	d9000f17 	ldw	r4,60(sp)
10106fc0:	d9401017 	ldw	r5,64(sp)
10106fc4:	000d883a 	mov	r6,zero
10106fc8:	01d00534 	movhi	r7,16404
10106fcc:	010d8bc0 	call	1010d8bc <__subdf3>
10106fd0:	800d883a 	mov	r6,r16
10106fd4:	880f883a 	mov	r7,r17
10106fd8:	1009883a 	mov	r4,r2
10106fdc:	180b883a 	mov	r5,r3
10106fe0:	102b883a 	mov	r21,r2
10106fe4:	1829883a 	mov	r20,r3
10106fe8:	010cfd40 	call	1010cfd4 <__gedf2>
10106fec:	00806c16 	blt	zero,r2,101071a0 <_dtoa_r+0x1304>
10106ff0:	89e0003c 	xorhi	r7,r17,32768
10106ff4:	800d883a 	mov	r6,r16
10106ff8:	a809883a 	mov	r4,r21
10106ffc:	a00b883a 	mov	r5,r20
10107000:	010d0b00 	call	1010d0b0 <__ledf2>
10107004:	103d7e0e 	bge	r2,zero,10106600 <__alt_data_end+0xfffe6600>
10107008:	002b883a 	mov	r21,zero
1010700c:	0023883a 	mov	r17,zero
10107010:	003efb06 	br	10106c00 <__alt_data_end+0xfffe6c00>
10107014:	d8800717 	ldw	r2,28(sp)
10107018:	003bd006 	br	10105f5c <__alt_data_end+0xfffe5f5c>
1010701c:	d9000a17 	ldw	r4,40(sp)
10107020:	d9800d17 	ldw	r6,52(sp)
10107024:	dd400a15 	stw	r21,40(sp)
10107028:	a905c83a 	sub	r2,r21,r4
1010702c:	308d883a 	add	r6,r6,r2
10107030:	d9800d15 	stw	r6,52(sp)
10107034:	002b883a 	mov	r21,zero
10107038:	003e0606 	br	10106854 <__alt_data_end+0xfffe6854>
1010703c:	9023883a 	mov	r17,r18
10107040:	9829883a 	mov	r20,r19
10107044:	04000084 	movi	r16,2
10107048:	003c9206 	br	10106294 <__alt_data_end+0xfffe6294>
1010704c:	04000044 	movi	r16,1
10107050:	dc000c15 	stw	r16,48(sp)
10107054:	dc000615 	stw	r16,24(sp)
10107058:	dc002215 	stw	r16,136(sp)
1010705c:	e0001115 	stw	zero,68(fp)
10107060:	000b883a 	mov	r5,zero
10107064:	003c6906 	br	1010620c <__alt_data_end+0xfffe620c>
10107068:	3021883a 	mov	r16,r6
1010706c:	003ffb06 	br	1010705c <__alt_data_end+0xfffe705c>
10107070:	1000021e 	bne	r2,zero,1010707c <_dtoa_r+0x11e0>
10107074:	4200004c 	andi	r8,r8,1
10107078:	403e7d1e 	bne	r8,zero,10106a70 <__alt_data_end+0xfffe6a70>
1010707c:	01000c04 	movi	r4,48
10107080:	00000106 	br	10107088 <_dtoa_r+0x11ec>
10107084:	102f883a 	mov	r23,r2
10107088:	b8bfffc4 	addi	r2,r23,-1
1010708c:	10c00007 	ldb	r3,0(r2)
10107090:	193ffc26 	beq	r3,r4,10107084 <__alt_data_end+0xfffe7084>
10107094:	003e8706 	br	10106ab4 <__alt_data_end+0xfffe6ab4>
10107098:	d8800517 	ldw	r2,20(sp)
1010709c:	00a3c83a 	sub	r17,zero,r2
101070a0:	8800a426 	beq	r17,zero,10107334 <_dtoa_r+0x1498>
101070a4:	888003cc 	andi	r2,r17,15
101070a8:	100490fa 	slli	r2,r2,3
101070ac:	00c40474 	movhi	r3,4113
101070b0:	18c47004 	addi	r3,r3,4544
101070b4:	1885883a 	add	r2,r3,r2
101070b8:	11800017 	ldw	r6,0(r2)
101070bc:	11c00117 	ldw	r7,4(r2)
101070c0:	9009883a 	mov	r4,r18
101070c4:	980b883a 	mov	r5,r19
101070c8:	8823d13a 	srai	r17,r17,4
101070cc:	010d1a40 	call	1010d1a4 <__muldf3>
101070d0:	d8800f15 	stw	r2,60(sp)
101070d4:	d8c01015 	stw	r3,64(sp)
101070d8:	8800e826 	beq	r17,zero,1010747c <_dtoa_r+0x15e0>
101070dc:	05040474 	movhi	r20,4113
101070e0:	a5046604 	addi	r20,r20,4504
101070e4:	04000084 	movi	r16,2
101070e8:	8980004c 	andi	r6,r17,1
101070ec:	1009883a 	mov	r4,r2
101070f0:	8823d07a 	srai	r17,r17,1
101070f4:	180b883a 	mov	r5,r3
101070f8:	30000426 	beq	r6,zero,1010710c <_dtoa_r+0x1270>
101070fc:	a1800017 	ldw	r6,0(r20)
10107100:	a1c00117 	ldw	r7,4(r20)
10107104:	84000044 	addi	r16,r16,1
10107108:	010d1a40 	call	1010d1a4 <__muldf3>
1010710c:	a5000204 	addi	r20,r20,8
10107110:	883ff51e 	bne	r17,zero,101070e8 <__alt_data_end+0xfffe70e8>
10107114:	d8800f15 	stw	r2,60(sp)
10107118:	d8c01015 	stw	r3,64(sp)
1010711c:	003c7606 	br	101062f8 <__alt_data_end+0xfffe62f8>
10107120:	00c00c04 	movi	r3,48
10107124:	10c00005 	stb	r3,0(r2)
10107128:	d8c00517 	ldw	r3,20(sp)
1010712c:	bd3fffc3 	ldbu	r20,-1(r23)
10107130:	18c00044 	addi	r3,r3,1
10107134:	d8c00515 	stw	r3,20(sp)
10107138:	003db906 	br	10106820 <__alt_data_end+0xfffe6820>
1010713c:	89400117 	ldw	r5,4(r17)
10107140:	e009883a 	mov	r4,fp
10107144:	0107fa40 	call	10107fa4 <_Balloc>
10107148:	89800417 	ldw	r6,16(r17)
1010714c:	89400304 	addi	r5,r17,12
10107150:	11000304 	addi	r4,r2,12
10107154:	31800084 	addi	r6,r6,2
10107158:	318d883a 	add	r6,r6,r6
1010715c:	318d883a 	add	r6,r6,r6
10107160:	1027883a 	mov	r19,r2
10107164:	0107d000 	call	10107d00 <memcpy>
10107168:	01800044 	movi	r6,1
1010716c:	980b883a 	mov	r5,r19
10107170:	e009883a 	mov	r4,fp
10107174:	01087240 	call	10108724 <__lshift>
10107178:	1029883a 	mov	r20,r2
1010717c:	003ecc06 	br	10106cb0 <__alt_data_end+0xfffe6cb0>
10107180:	00800e44 	movi	r2,57
10107184:	90809026 	beq	r18,r2,101073c8 <_dtoa_r+0x152c>
10107188:	92000044 	addi	r8,r18,1
1010718c:	003f1f06 	br	10106e0c <__alt_data_end+0xfffe6e0c>
10107190:	9011883a 	mov	r8,r18
10107194:	8825883a 	mov	r18,r17
10107198:	a023883a 	mov	r17,r20
1010719c:	003e2906 	br	10106a44 <__alt_data_end+0xfffe6a44>
101071a0:	002b883a 	mov	r21,zero
101071a4:	0023883a 	mov	r17,zero
101071a8:	003f5406 	br	10106efc <__alt_data_end+0xfffe6efc>
101071ac:	61bfffc4 	addi	r6,r12,-1
101071b0:	300490fa 	slli	r2,r6,3
101071b4:	00c40474 	movhi	r3,4113
101071b8:	18c47004 	addi	r3,r3,4544
101071bc:	1885883a 	add	r2,r3,r2
101071c0:	11000017 	ldw	r4,0(r2)
101071c4:	11400117 	ldw	r5,4(r2)
101071c8:	d8800717 	ldw	r2,28(sp)
101071cc:	880f883a 	mov	r7,r17
101071d0:	d9801215 	stw	r6,72(sp)
101071d4:	800d883a 	mov	r6,r16
101071d8:	db001615 	stw	r12,88(sp)
101071dc:	15c00044 	addi	r23,r2,1
101071e0:	010d1a40 	call	1010d1a4 <__muldf3>
101071e4:	d9401017 	ldw	r5,64(sp)
101071e8:	d9000f17 	ldw	r4,60(sp)
101071ec:	d8c01515 	stw	r3,84(sp)
101071f0:	d8801415 	stw	r2,80(sp)
101071f4:	010e1b80 	call	1010e1b8 <__fixdfsi>
101071f8:	1009883a 	mov	r4,r2
101071fc:	1021883a 	mov	r16,r2
10107200:	010e2380 	call	1010e238 <__floatsidf>
10107204:	d9000f17 	ldw	r4,60(sp)
10107208:	d9401017 	ldw	r5,64(sp)
1010720c:	100d883a 	mov	r6,r2
10107210:	180f883a 	mov	r7,r3
10107214:	010d8bc0 	call	1010d8bc <__subdf3>
10107218:	1829883a 	mov	r20,r3
1010721c:	d8c00717 	ldw	r3,28(sp)
10107220:	84000c04 	addi	r16,r16,48
10107224:	1023883a 	mov	r17,r2
10107228:	1c000005 	stb	r16,0(r3)
1010722c:	db001617 	ldw	r12,88(sp)
10107230:	00800044 	movi	r2,1
10107234:	60802226 	beq	r12,r2,101072c0 <_dtoa_r+0x1424>
10107238:	d9c00717 	ldw	r7,28(sp)
1010723c:	8805883a 	mov	r2,r17
10107240:	b82b883a 	mov	r21,r23
10107244:	3b19883a 	add	r12,r7,r12
10107248:	6023883a 	mov	r17,r12
1010724c:	a007883a 	mov	r3,r20
10107250:	dc800f15 	stw	r18,60(sp)
10107254:	000d883a 	mov	r6,zero
10107258:	01d00934 	movhi	r7,16420
1010725c:	1009883a 	mov	r4,r2
10107260:	180b883a 	mov	r5,r3
10107264:	010d1a40 	call	1010d1a4 <__muldf3>
10107268:	180b883a 	mov	r5,r3
1010726c:	1009883a 	mov	r4,r2
10107270:	1829883a 	mov	r20,r3
10107274:	1025883a 	mov	r18,r2
10107278:	010e1b80 	call	1010e1b8 <__fixdfsi>
1010727c:	1009883a 	mov	r4,r2
10107280:	1021883a 	mov	r16,r2
10107284:	010e2380 	call	1010e238 <__floatsidf>
10107288:	100d883a 	mov	r6,r2
1010728c:	180f883a 	mov	r7,r3
10107290:	9009883a 	mov	r4,r18
10107294:	a00b883a 	mov	r5,r20
10107298:	84000c04 	addi	r16,r16,48
1010729c:	010d8bc0 	call	1010d8bc <__subdf3>
101072a0:	ad400044 	addi	r21,r21,1
101072a4:	ac3fffc5 	stb	r16,-1(r21)
101072a8:	ac7fea1e 	bne	r21,r17,10107254 <__alt_data_end+0xfffe7254>
101072ac:	1023883a 	mov	r17,r2
101072b0:	d8801217 	ldw	r2,72(sp)
101072b4:	dc800f17 	ldw	r18,60(sp)
101072b8:	1829883a 	mov	r20,r3
101072bc:	b8af883a 	add	r23,r23,r2
101072c0:	d9001417 	ldw	r4,80(sp)
101072c4:	d9401517 	ldw	r5,84(sp)
101072c8:	000d883a 	mov	r6,zero
101072cc:	01cff834 	movhi	r7,16352
101072d0:	010bdb80 	call	1010bdb8 <__adddf3>
101072d4:	880d883a 	mov	r6,r17
101072d8:	a00f883a 	mov	r7,r20
101072dc:	1009883a 	mov	r4,r2
101072e0:	180b883a 	mov	r5,r3
101072e4:	010d0b00 	call	1010d0b0 <__ledf2>
101072e8:	10003e0e 	bge	r2,zero,101073e4 <_dtoa_r+0x1548>
101072ec:	d9001317 	ldw	r4,76(sp)
101072f0:	bd3fffc3 	ldbu	r20,-1(r23)
101072f4:	d9000515 	stw	r4,20(sp)
101072f8:	003d3b06 	br	101067e8 <__alt_data_end+0xfffe67e8>
101072fc:	0027883a 	mov	r19,zero
10107300:	003f1b06 	br	10106f70 <__alt_data_end+0xfffe6f70>
10107304:	d8800817 	ldw	r2,32(sp)
10107308:	11e9c83a 	sub	r20,r2,r7
1010730c:	0005883a 	mov	r2,zero
10107310:	003d5406 	br	10106864 <__alt_data_end+0xfffe6864>
10107314:	00800044 	movi	r2,1
10107318:	003dc706 	br	10106a38 <__alt_data_end+0xfffe6a38>
1010731c:	d8c00217 	ldw	r3,8(sp)
10107320:	00800d84 	movi	r2,54
10107324:	dd400a17 	ldw	r21,40(sp)
10107328:	10c5c83a 	sub	r2,r2,r3
1010732c:	dd000817 	ldw	r20,32(sp)
10107330:	003d4c06 	br	10106864 <__alt_data_end+0xfffe6864>
10107334:	dc800f15 	stw	r18,60(sp)
10107338:	dcc01015 	stw	r19,64(sp)
1010733c:	04000084 	movi	r16,2
10107340:	003bed06 	br	101062f8 <__alt_data_end+0xfffe62f8>
10107344:	d9000617 	ldw	r4,24(sp)
10107348:	203f0d26 	beq	r4,zero,10106f80 <__alt_data_end+0xfffe6f80>
1010734c:	d9800c17 	ldw	r6,48(sp)
10107350:	01bcab0e 	bge	zero,r6,10106600 <__alt_data_end+0xfffe6600>
10107354:	d9401017 	ldw	r5,64(sp)
10107358:	d9000f17 	ldw	r4,60(sp)
1010735c:	000d883a 	mov	r6,zero
10107360:	01d00934 	movhi	r7,16420
10107364:	010d1a40 	call	1010d1a4 <__muldf3>
10107368:	81000044 	addi	r4,r16,1
1010736c:	d8800f15 	stw	r2,60(sp)
10107370:	d8c01015 	stw	r3,64(sp)
10107374:	010e2380 	call	1010e238 <__floatsidf>
10107378:	d9800f17 	ldw	r6,60(sp)
1010737c:	d9c01017 	ldw	r7,64(sp)
10107380:	1009883a 	mov	r4,r2
10107384:	180b883a 	mov	r5,r3
10107388:	010d1a40 	call	1010d1a4 <__muldf3>
1010738c:	01d00734 	movhi	r7,16412
10107390:	000d883a 	mov	r6,zero
10107394:	1009883a 	mov	r4,r2
10107398:	180b883a 	mov	r5,r3
1010739c:	010bdb80 	call	1010bdb8 <__adddf3>
101073a0:	d9c00517 	ldw	r7,20(sp)
101073a4:	047f3034 	movhi	r17,64704
101073a8:	1021883a 	mov	r16,r2
101073ac:	39ffffc4 	addi	r7,r7,-1
101073b0:	d9c01315 	stw	r7,76(sp)
101073b4:	1c63883a 	add	r17,r3,r17
101073b8:	db000c17 	ldw	r12,48(sp)
101073bc:	003bea06 	br	10106368 <__alt_data_end+0xfffe6368>
101073c0:	dc000915 	stw	r16,36(sp)
101073c4:	003e0e06 	br	10106c00 <__alt_data_end+0xfffe6c00>
101073c8:	01000e44 	movi	r4,57
101073cc:	8825883a 	mov	r18,r17
101073d0:	9dc00044 	addi	r23,r19,1
101073d4:	99000005 	stb	r4,0(r19)
101073d8:	a023883a 	mov	r17,r20
101073dc:	dc000915 	stw	r16,36(sp)
101073e0:	003da406 	br	10106a74 <__alt_data_end+0xfffe6a74>
101073e4:	d9801417 	ldw	r6,80(sp)
101073e8:	d9c01517 	ldw	r7,84(sp)
101073ec:	0009883a 	mov	r4,zero
101073f0:	014ff834 	movhi	r5,16352
101073f4:	010d8bc0 	call	1010d8bc <__subdf3>
101073f8:	880d883a 	mov	r6,r17
101073fc:	a00f883a 	mov	r7,r20
10107400:	1009883a 	mov	r4,r2
10107404:	180b883a 	mov	r5,r3
10107408:	010cfd40 	call	1010cfd4 <__gedf2>
1010740c:	00bc7c0e 	bge	zero,r2,10106600 <__alt_data_end+0xfffe6600>
10107410:	01000c04 	movi	r4,48
10107414:	00000106 	br	1010741c <_dtoa_r+0x1580>
10107418:	102f883a 	mov	r23,r2
1010741c:	b8bfffc4 	addi	r2,r23,-1
10107420:	10c00007 	ldb	r3,0(r2)
10107424:	193ffc26 	beq	r3,r4,10107418 <__alt_data_end+0xfffe7418>
10107428:	d9801317 	ldw	r6,76(sp)
1010742c:	d9800515 	stw	r6,20(sp)
10107430:	003c4406 	br	10106544 <__alt_data_end+0xfffe6544>
10107434:	d9801317 	ldw	r6,76(sp)
10107438:	d9800515 	stw	r6,20(sp)
1010743c:	003cea06 	br	101067e8 <__alt_data_end+0xfffe67e8>
10107440:	dd800f17 	ldw	r22,60(sp)
10107444:	dcc01017 	ldw	r19,64(sp)
10107448:	dc801217 	ldw	r18,72(sp)
1010744c:	003c6c06 	br	10106600 <__alt_data_end+0xfffe6600>
10107450:	903e031e 	bne	r18,zero,10106c60 <__alt_data_end+0xfffe6c60>
10107454:	003ebb06 	br	10106f44 <__alt_data_end+0xfffe6f44>
10107458:	103e6c1e 	bne	r2,zero,10106e0c <__alt_data_end+0xfffe6e0c>
1010745c:	4080004c 	andi	r2,r8,1
10107460:	103e6a26 	beq	r2,zero,10106e0c <__alt_data_end+0xfffe6e0c>
10107464:	003e6606 	br	10106e00 <__alt_data_end+0xfffe6e00>
10107468:	d8c00317 	ldw	r3,12(sp)
1010746c:	00800084 	movi	r2,2
10107470:	10c02916 	blt	r2,r3,10107518 <_dtoa_r+0x167c>
10107474:	d9000c17 	ldw	r4,48(sp)
10107478:	003e8806 	br	10106e9c <__alt_data_end+0xfffe6e9c>
1010747c:	04000084 	movi	r16,2
10107480:	003b9d06 	br	101062f8 <__alt_data_end+0xfffe62f8>
10107484:	d9001317 	ldw	r4,76(sp)
10107488:	d9000515 	stw	r4,20(sp)
1010748c:	003cd606 	br	101067e8 <__alt_data_end+0xfffe67e8>
10107490:	d8801317 	ldw	r2,76(sp)
10107494:	d8800515 	stw	r2,20(sp)
10107498:	003c2a06 	br	10106544 <__alt_data_end+0xfffe6544>
1010749c:	d9800317 	ldw	r6,12(sp)
101074a0:	00800084 	movi	r2,2
101074a4:	11801516 	blt	r2,r6,101074fc <_dtoa_r+0x1660>
101074a8:	d9c00c17 	ldw	r7,48(sp)
101074ac:	d9c00615 	stw	r7,24(sp)
101074b0:	003df706 	br	10106c90 <__alt_data_end+0xfffe6c90>
101074b4:	193d3926 	beq	r3,r4,1010699c <__alt_data_end+0xfffe699c>
101074b8:	00c00f04 	movi	r3,60
101074bc:	1885c83a 	sub	r2,r3,r2
101074c0:	003ddf06 	br	10106c40 <__alt_data_end+0xfffe6c40>
101074c4:	e009883a 	mov	r4,fp
101074c8:	e0001115 	stw	zero,68(fp)
101074cc:	000b883a 	mov	r5,zero
101074d0:	0107fa40 	call	10107fa4 <_Balloc>
101074d4:	d8800715 	stw	r2,28(sp)
101074d8:	d8c00717 	ldw	r3,28(sp)
101074dc:	00bfffc4 	movi	r2,-1
101074e0:	01000044 	movi	r4,1
101074e4:	d8800c15 	stw	r2,48(sp)
101074e8:	e0c01015 	stw	r3,64(fp)
101074ec:	d9000b15 	stw	r4,44(sp)
101074f0:	d8800615 	stw	r2,24(sp)
101074f4:	d8002215 	stw	zero,136(sp)
101074f8:	003c4106 	br	10106600 <__alt_data_end+0xfffe6600>
101074fc:	d8c00c17 	ldw	r3,48(sp)
10107500:	d8c00615 	stw	r3,24(sp)
10107504:	003e7006 	br	10106ec8 <__alt_data_end+0xfffe6ec8>
10107508:	04400044 	movi	r17,1
1010750c:	003b2006 	br	10106190 <__alt_data_end+0xfffe6190>
10107510:	000b883a 	mov	r5,zero
10107514:	003b3d06 	br	1010620c <__alt_data_end+0xfffe620c>
10107518:	d8800c17 	ldw	r2,48(sp)
1010751c:	d8800615 	stw	r2,24(sp)
10107520:	003e6906 	br	10106ec8 <__alt_data_end+0xfffe6ec8>

10107524 <__sflags>:
10107524:	28800007 	ldb	r2,0(r5)
10107528:	00c01c84 	movi	r3,114
1010752c:	10c02426 	beq	r2,r3,101075c0 <__sflags+0x9c>
10107530:	00c01dc4 	movi	r3,119
10107534:	10c01e26 	beq	r2,r3,101075b0 <__sflags+0x8c>
10107538:	00c01844 	movi	r3,97
1010753c:	10c00426 	beq	r2,r3,10107550 <__sflags+0x2c>
10107540:	00800584 	movi	r2,22
10107544:	20800015 	stw	r2,0(r4)
10107548:	0005883a 	mov	r2,zero
1010754c:	f800283a 	ret
10107550:	02c08204 	movi	r11,520
10107554:	01000044 	movi	r4,1
10107558:	00804204 	movi	r2,264
1010755c:	01c00ac4 	movi	r7,43
10107560:	02bff8c4 	movi	r10,-29
10107564:	027fff04 	movi	r9,-4
10107568:	02001e04 	movi	r8,120
1010756c:	29400044 	addi	r5,r5,1
10107570:	28c00007 	ldb	r3,0(r5)
10107574:	18000626 	beq	r3,zero,10107590 <__sflags+0x6c>
10107578:	19c00826 	beq	r3,r7,1010759c <__sflags+0x78>
1010757c:	1a3ffb1e 	bne	r3,r8,1010756c <__alt_data_end+0xfffe756c>
10107580:	29400044 	addi	r5,r5,1
10107584:	28c00007 	ldb	r3,0(r5)
10107588:	21020014 	ori	r4,r4,2048
1010758c:	183ffa1e 	bne	r3,zero,10107578 <__alt_data_end+0xfffe7578>
10107590:	22c8b03a 	or	r4,r4,r11
10107594:	31000015 	stw	r4,0(r6)
10107598:	f800283a 	ret
1010759c:	1284703a 	and	r2,r2,r10
101075a0:	2248703a 	and	r4,r4,r9
101075a4:	10800414 	ori	r2,r2,16
101075a8:	21000094 	ori	r4,r4,2
101075ac:	003fef06 	br	1010756c <__alt_data_end+0xfffe756c>
101075b0:	02c18004 	movi	r11,1536
101075b4:	01000044 	movi	r4,1
101075b8:	00800204 	movi	r2,8
101075bc:	003fe706 	br	1010755c <__alt_data_end+0xfffe755c>
101075c0:	0017883a 	mov	r11,zero
101075c4:	0009883a 	mov	r4,zero
101075c8:	00800104 	movi	r2,4
101075cc:	003fe306 	br	1010755c <__alt_data_end+0xfffe755c>

101075d0 <__sfvwrite_r>:
101075d0:	30800217 	ldw	r2,8(r6)
101075d4:	10006726 	beq	r2,zero,10107774 <__sfvwrite_r+0x1a4>
101075d8:	28c0030b 	ldhu	r3,12(r5)
101075dc:	defff404 	addi	sp,sp,-48
101075e0:	dd400715 	stw	r21,28(sp)
101075e4:	dd000615 	stw	r20,24(sp)
101075e8:	dc000215 	stw	r16,8(sp)
101075ec:	dfc00b15 	stw	ra,44(sp)
101075f0:	df000a15 	stw	fp,40(sp)
101075f4:	ddc00915 	stw	r23,36(sp)
101075f8:	dd800815 	stw	r22,32(sp)
101075fc:	dcc00515 	stw	r19,20(sp)
10107600:	dc800415 	stw	r18,16(sp)
10107604:	dc400315 	stw	r17,12(sp)
10107608:	1880020c 	andi	r2,r3,8
1010760c:	2821883a 	mov	r16,r5
10107610:	202b883a 	mov	r21,r4
10107614:	3029883a 	mov	r20,r6
10107618:	10002726 	beq	r2,zero,101076b8 <__sfvwrite_r+0xe8>
1010761c:	28800417 	ldw	r2,16(r5)
10107620:	10002526 	beq	r2,zero,101076b8 <__sfvwrite_r+0xe8>
10107624:	1880008c 	andi	r2,r3,2
10107628:	a4400017 	ldw	r17,0(r20)
1010762c:	10002a26 	beq	r2,zero,101076d8 <__sfvwrite_r+0x108>
10107630:	05a00034 	movhi	r22,32768
10107634:	0027883a 	mov	r19,zero
10107638:	0025883a 	mov	r18,zero
1010763c:	b5bf0004 	addi	r22,r22,-1024
10107640:	980d883a 	mov	r6,r19
10107644:	a809883a 	mov	r4,r21
10107648:	90004626 	beq	r18,zero,10107764 <__sfvwrite_r+0x194>
1010764c:	900f883a 	mov	r7,r18
10107650:	b480022e 	bgeu	r22,r18,1010765c <__sfvwrite_r+0x8c>
10107654:	01e00034 	movhi	r7,32768
10107658:	39ff0004 	addi	r7,r7,-1024
1010765c:	80800917 	ldw	r2,36(r16)
10107660:	81400717 	ldw	r5,28(r16)
10107664:	103ee83a 	callr	r2
10107668:	0080570e 	bge	zero,r2,101077c8 <__sfvwrite_r+0x1f8>
1010766c:	a0c00217 	ldw	r3,8(r20)
10107670:	98a7883a 	add	r19,r19,r2
10107674:	90a5c83a 	sub	r18,r18,r2
10107678:	1885c83a 	sub	r2,r3,r2
1010767c:	a0800215 	stw	r2,8(r20)
10107680:	103fef1e 	bne	r2,zero,10107640 <__alt_data_end+0xfffe7640>
10107684:	0005883a 	mov	r2,zero
10107688:	dfc00b17 	ldw	ra,44(sp)
1010768c:	df000a17 	ldw	fp,40(sp)
10107690:	ddc00917 	ldw	r23,36(sp)
10107694:	dd800817 	ldw	r22,32(sp)
10107698:	dd400717 	ldw	r21,28(sp)
1010769c:	dd000617 	ldw	r20,24(sp)
101076a0:	dcc00517 	ldw	r19,20(sp)
101076a4:	dc800417 	ldw	r18,16(sp)
101076a8:	dc400317 	ldw	r17,12(sp)
101076ac:	dc000217 	ldw	r16,8(sp)
101076b0:	dec00c04 	addi	sp,sp,48
101076b4:	f800283a 	ret
101076b8:	800b883a 	mov	r5,r16
101076bc:	a809883a 	mov	r4,r21
101076c0:	0105af40 	call	10105af4 <__swsetup_r>
101076c4:	1000eb1e 	bne	r2,zero,10107a74 <__sfvwrite_r+0x4a4>
101076c8:	80c0030b 	ldhu	r3,12(r16)
101076cc:	a4400017 	ldw	r17,0(r20)
101076d0:	1880008c 	andi	r2,r3,2
101076d4:	103fd61e 	bne	r2,zero,10107630 <__alt_data_end+0xfffe7630>
101076d8:	1880004c 	andi	r2,r3,1
101076dc:	10003f1e 	bne	r2,zero,101077dc <__sfvwrite_r+0x20c>
101076e0:	0039883a 	mov	fp,zero
101076e4:	0025883a 	mov	r18,zero
101076e8:	90001a26 	beq	r18,zero,10107754 <__sfvwrite_r+0x184>
101076ec:	1880800c 	andi	r2,r3,512
101076f0:	84c00217 	ldw	r19,8(r16)
101076f4:	10002126 	beq	r2,zero,1010777c <__sfvwrite_r+0x1ac>
101076f8:	982f883a 	mov	r23,r19
101076fc:	94c09336 	bltu	r18,r19,1010794c <__sfvwrite_r+0x37c>
10107700:	1881200c 	andi	r2,r3,1152
10107704:	10009e1e 	bne	r2,zero,10107980 <__sfvwrite_r+0x3b0>
10107708:	81000017 	ldw	r4,0(r16)
1010770c:	b80d883a 	mov	r6,r23
10107710:	e00b883a 	mov	r5,fp
10107714:	0107e480 	call	10107e48 <memmove>
10107718:	80c00217 	ldw	r3,8(r16)
1010771c:	81000017 	ldw	r4,0(r16)
10107720:	9005883a 	mov	r2,r18
10107724:	1ce7c83a 	sub	r19,r3,r19
10107728:	25cf883a 	add	r7,r4,r23
1010772c:	84c00215 	stw	r19,8(r16)
10107730:	81c00015 	stw	r7,0(r16)
10107734:	a0c00217 	ldw	r3,8(r20)
10107738:	e0b9883a 	add	fp,fp,r2
1010773c:	90a5c83a 	sub	r18,r18,r2
10107740:	18a7c83a 	sub	r19,r3,r2
10107744:	a4c00215 	stw	r19,8(r20)
10107748:	983fce26 	beq	r19,zero,10107684 <__alt_data_end+0xfffe7684>
1010774c:	80c0030b 	ldhu	r3,12(r16)
10107750:	903fe61e 	bne	r18,zero,101076ec <__alt_data_end+0xfffe76ec>
10107754:	8f000017 	ldw	fp,0(r17)
10107758:	8c800117 	ldw	r18,4(r17)
1010775c:	8c400204 	addi	r17,r17,8
10107760:	003fe106 	br	101076e8 <__alt_data_end+0xfffe76e8>
10107764:	8cc00017 	ldw	r19,0(r17)
10107768:	8c800117 	ldw	r18,4(r17)
1010776c:	8c400204 	addi	r17,r17,8
10107770:	003fb306 	br	10107640 <__alt_data_end+0xfffe7640>
10107774:	0005883a 	mov	r2,zero
10107778:	f800283a 	ret
1010777c:	81000017 	ldw	r4,0(r16)
10107780:	80800417 	ldw	r2,16(r16)
10107784:	11005736 	bltu	r2,r4,101078e4 <__sfvwrite_r+0x314>
10107788:	85c00517 	ldw	r23,20(r16)
1010778c:	95c05536 	bltu	r18,r23,101078e4 <__sfvwrite_r+0x314>
10107790:	00a00034 	movhi	r2,32768
10107794:	10bfffc4 	addi	r2,r2,-1
10107798:	9009883a 	mov	r4,r18
1010779c:	1480012e 	bgeu	r2,r18,101077a4 <__sfvwrite_r+0x1d4>
101077a0:	1009883a 	mov	r4,r2
101077a4:	b80b883a 	mov	r5,r23
101077a8:	01010f80 	call	101010f8 <__divsi3>
101077ac:	15cf383a 	mul	r7,r2,r23
101077b0:	81400717 	ldw	r5,28(r16)
101077b4:	80800917 	ldw	r2,36(r16)
101077b8:	e00d883a 	mov	r6,fp
101077bc:	a809883a 	mov	r4,r21
101077c0:	103ee83a 	callr	r2
101077c4:	00bfdb16 	blt	zero,r2,10107734 <__alt_data_end+0xfffe7734>
101077c8:	8080030b 	ldhu	r2,12(r16)
101077cc:	10801014 	ori	r2,r2,64
101077d0:	8080030d 	sth	r2,12(r16)
101077d4:	00bfffc4 	movi	r2,-1
101077d8:	003fab06 	br	10107688 <__alt_data_end+0xfffe7688>
101077dc:	0027883a 	mov	r19,zero
101077e0:	0011883a 	mov	r8,zero
101077e4:	0039883a 	mov	fp,zero
101077e8:	0025883a 	mov	r18,zero
101077ec:	90001f26 	beq	r18,zero,1010786c <__sfvwrite_r+0x29c>
101077f0:	40005a26 	beq	r8,zero,1010795c <__sfvwrite_r+0x38c>
101077f4:	982d883a 	mov	r22,r19
101077f8:	94c0012e 	bgeu	r18,r19,10107800 <__sfvwrite_r+0x230>
101077fc:	902d883a 	mov	r22,r18
10107800:	81000017 	ldw	r4,0(r16)
10107804:	80800417 	ldw	r2,16(r16)
10107808:	b02f883a 	mov	r23,r22
1010780c:	81c00517 	ldw	r7,20(r16)
10107810:	1100032e 	bgeu	r2,r4,10107820 <__sfvwrite_r+0x250>
10107814:	80c00217 	ldw	r3,8(r16)
10107818:	38c7883a 	add	r3,r7,r3
1010781c:	1d801816 	blt	r3,r22,10107880 <__sfvwrite_r+0x2b0>
10107820:	b1c03e16 	blt	r22,r7,1010791c <__sfvwrite_r+0x34c>
10107824:	80800917 	ldw	r2,36(r16)
10107828:	81400717 	ldw	r5,28(r16)
1010782c:	e00d883a 	mov	r6,fp
10107830:	da000115 	stw	r8,4(sp)
10107834:	a809883a 	mov	r4,r21
10107838:	103ee83a 	callr	r2
1010783c:	102f883a 	mov	r23,r2
10107840:	da000117 	ldw	r8,4(sp)
10107844:	00bfe00e 	bge	zero,r2,101077c8 <__alt_data_end+0xfffe77c8>
10107848:	9de7c83a 	sub	r19,r19,r23
1010784c:	98001f26 	beq	r19,zero,101078cc <__sfvwrite_r+0x2fc>
10107850:	a0800217 	ldw	r2,8(r20)
10107854:	e5f9883a 	add	fp,fp,r23
10107858:	95e5c83a 	sub	r18,r18,r23
1010785c:	15efc83a 	sub	r23,r2,r23
10107860:	a5c00215 	stw	r23,8(r20)
10107864:	b83f8726 	beq	r23,zero,10107684 <__alt_data_end+0xfffe7684>
10107868:	903fe11e 	bne	r18,zero,101077f0 <__alt_data_end+0xfffe77f0>
1010786c:	8f000017 	ldw	fp,0(r17)
10107870:	8c800117 	ldw	r18,4(r17)
10107874:	0011883a 	mov	r8,zero
10107878:	8c400204 	addi	r17,r17,8
1010787c:	003fdb06 	br	101077ec <__alt_data_end+0xfffe77ec>
10107880:	180d883a 	mov	r6,r3
10107884:	e00b883a 	mov	r5,fp
10107888:	da000115 	stw	r8,4(sp)
1010788c:	d8c00015 	stw	r3,0(sp)
10107890:	0107e480 	call	10107e48 <memmove>
10107894:	d8c00017 	ldw	r3,0(sp)
10107898:	80800017 	ldw	r2,0(r16)
1010789c:	800b883a 	mov	r5,r16
101078a0:	a809883a 	mov	r4,r21
101078a4:	10c5883a 	add	r2,r2,r3
101078a8:	80800015 	stw	r2,0(r16)
101078ac:	d8c00015 	stw	r3,0(sp)
101078b0:	01015cc0 	call	101015cc <_fflush_r>
101078b4:	d8c00017 	ldw	r3,0(sp)
101078b8:	da000117 	ldw	r8,4(sp)
101078bc:	103fc21e 	bne	r2,zero,101077c8 <__alt_data_end+0xfffe77c8>
101078c0:	182f883a 	mov	r23,r3
101078c4:	9de7c83a 	sub	r19,r19,r23
101078c8:	983fe11e 	bne	r19,zero,10107850 <__alt_data_end+0xfffe7850>
101078cc:	800b883a 	mov	r5,r16
101078d0:	a809883a 	mov	r4,r21
101078d4:	01015cc0 	call	101015cc <_fflush_r>
101078d8:	103fbb1e 	bne	r2,zero,101077c8 <__alt_data_end+0xfffe77c8>
101078dc:	0011883a 	mov	r8,zero
101078e0:	003fdb06 	br	10107850 <__alt_data_end+0xfffe7850>
101078e4:	94c0012e 	bgeu	r18,r19,101078ec <__sfvwrite_r+0x31c>
101078e8:	9027883a 	mov	r19,r18
101078ec:	980d883a 	mov	r6,r19
101078f0:	e00b883a 	mov	r5,fp
101078f4:	0107e480 	call	10107e48 <memmove>
101078f8:	80800217 	ldw	r2,8(r16)
101078fc:	80c00017 	ldw	r3,0(r16)
10107900:	14c5c83a 	sub	r2,r2,r19
10107904:	1cc7883a 	add	r3,r3,r19
10107908:	80800215 	stw	r2,8(r16)
1010790c:	80c00015 	stw	r3,0(r16)
10107910:	10004326 	beq	r2,zero,10107a20 <__sfvwrite_r+0x450>
10107914:	9805883a 	mov	r2,r19
10107918:	003f8606 	br	10107734 <__alt_data_end+0xfffe7734>
1010791c:	b00d883a 	mov	r6,r22
10107920:	e00b883a 	mov	r5,fp
10107924:	da000115 	stw	r8,4(sp)
10107928:	0107e480 	call	10107e48 <memmove>
1010792c:	80800217 	ldw	r2,8(r16)
10107930:	80c00017 	ldw	r3,0(r16)
10107934:	da000117 	ldw	r8,4(sp)
10107938:	1585c83a 	sub	r2,r2,r22
1010793c:	1dad883a 	add	r22,r3,r22
10107940:	80800215 	stw	r2,8(r16)
10107944:	85800015 	stw	r22,0(r16)
10107948:	003fbf06 	br	10107848 <__alt_data_end+0xfffe7848>
1010794c:	81000017 	ldw	r4,0(r16)
10107950:	9027883a 	mov	r19,r18
10107954:	902f883a 	mov	r23,r18
10107958:	003f6c06 	br	1010770c <__alt_data_end+0xfffe770c>
1010795c:	900d883a 	mov	r6,r18
10107960:	01400284 	movi	r5,10
10107964:	e009883a 	mov	r4,fp
10107968:	0107c1c0 	call	10107c1c <memchr>
1010796c:	10003e26 	beq	r2,zero,10107a68 <__sfvwrite_r+0x498>
10107970:	10800044 	addi	r2,r2,1
10107974:	1727c83a 	sub	r19,r2,fp
10107978:	02000044 	movi	r8,1
1010797c:	003f9d06 	br	101077f4 <__alt_data_end+0xfffe77f4>
10107980:	80800517 	ldw	r2,20(r16)
10107984:	81400417 	ldw	r5,16(r16)
10107988:	81c00017 	ldw	r7,0(r16)
1010798c:	10a7883a 	add	r19,r2,r2
10107990:	9885883a 	add	r2,r19,r2
10107994:	1026d7fa 	srli	r19,r2,31
10107998:	396dc83a 	sub	r22,r7,r5
1010799c:	b1000044 	addi	r4,r22,1
101079a0:	9885883a 	add	r2,r19,r2
101079a4:	1027d07a 	srai	r19,r2,1
101079a8:	2485883a 	add	r2,r4,r18
101079ac:	980d883a 	mov	r6,r19
101079b0:	9880022e 	bgeu	r19,r2,101079bc <__sfvwrite_r+0x3ec>
101079b4:	1027883a 	mov	r19,r2
101079b8:	100d883a 	mov	r6,r2
101079bc:	18c1000c 	andi	r3,r3,1024
101079c0:	18001c26 	beq	r3,zero,10107a34 <__sfvwrite_r+0x464>
101079c4:	300b883a 	mov	r5,r6
101079c8:	a809883a 	mov	r4,r21
101079cc:	01028500 	call	10102850 <_malloc_r>
101079d0:	102f883a 	mov	r23,r2
101079d4:	10002926 	beq	r2,zero,10107a7c <__sfvwrite_r+0x4ac>
101079d8:	81400417 	ldw	r5,16(r16)
101079dc:	b00d883a 	mov	r6,r22
101079e0:	1009883a 	mov	r4,r2
101079e4:	0107d000 	call	10107d00 <memcpy>
101079e8:	8080030b 	ldhu	r2,12(r16)
101079ec:	00fedfc4 	movi	r3,-1153
101079f0:	10c4703a 	and	r2,r2,r3
101079f4:	10802014 	ori	r2,r2,128
101079f8:	8080030d 	sth	r2,12(r16)
101079fc:	bd89883a 	add	r4,r23,r22
10107a00:	9d8fc83a 	sub	r7,r19,r22
10107a04:	85c00415 	stw	r23,16(r16)
10107a08:	84c00515 	stw	r19,20(r16)
10107a0c:	81000015 	stw	r4,0(r16)
10107a10:	9027883a 	mov	r19,r18
10107a14:	81c00215 	stw	r7,8(r16)
10107a18:	902f883a 	mov	r23,r18
10107a1c:	003f3b06 	br	1010770c <__alt_data_end+0xfffe770c>
10107a20:	800b883a 	mov	r5,r16
10107a24:	a809883a 	mov	r4,r21
10107a28:	01015cc0 	call	101015cc <_fflush_r>
10107a2c:	103fb926 	beq	r2,zero,10107914 <__alt_data_end+0xfffe7914>
10107a30:	003f6506 	br	101077c8 <__alt_data_end+0xfffe77c8>
10107a34:	a809883a 	mov	r4,r21
10107a38:	01090000 	call	10109000 <_realloc_r>
10107a3c:	102f883a 	mov	r23,r2
10107a40:	103fee1e 	bne	r2,zero,101079fc <__alt_data_end+0xfffe79fc>
10107a44:	81400417 	ldw	r5,16(r16)
10107a48:	a809883a 	mov	r4,r21
10107a4c:	0101d200 	call	10101d20 <_free_r>
10107a50:	8080030b 	ldhu	r2,12(r16)
10107a54:	00ffdfc4 	movi	r3,-129
10107a58:	1884703a 	and	r2,r3,r2
10107a5c:	00c00304 	movi	r3,12
10107a60:	a8c00015 	stw	r3,0(r21)
10107a64:	003f5906 	br	101077cc <__alt_data_end+0xfffe77cc>
10107a68:	94c00044 	addi	r19,r18,1
10107a6c:	02000044 	movi	r8,1
10107a70:	003f6006 	br	101077f4 <__alt_data_end+0xfffe77f4>
10107a74:	00bfffc4 	movi	r2,-1
10107a78:	003f0306 	br	10107688 <__alt_data_end+0xfffe7688>
10107a7c:	00800304 	movi	r2,12
10107a80:	a8800015 	stw	r2,0(r21)
10107a84:	8080030b 	ldhu	r2,12(r16)
10107a88:	003f5006 	br	101077cc <__alt_data_end+0xfffe77cc>

10107a8c <_isatty_r>:
10107a8c:	defffd04 	addi	sp,sp,-12
10107a90:	dc000015 	stw	r16,0(sp)
10107a94:	04040474 	movhi	r16,4113
10107a98:	dc400115 	stw	r17,4(sp)
10107a9c:	8412a804 	addi	r16,r16,19104
10107aa0:	2023883a 	mov	r17,r4
10107aa4:	2809883a 	mov	r4,r5
10107aa8:	dfc00215 	stw	ra,8(sp)
10107aac:	80000015 	stw	zero,0(r16)
10107ab0:	010e6800 	call	1010e680 <isatty>
10107ab4:	00ffffc4 	movi	r3,-1
10107ab8:	10c00526 	beq	r2,r3,10107ad0 <_isatty_r+0x44>
10107abc:	dfc00217 	ldw	ra,8(sp)
10107ac0:	dc400117 	ldw	r17,4(sp)
10107ac4:	dc000017 	ldw	r16,0(sp)
10107ac8:	dec00304 	addi	sp,sp,12
10107acc:	f800283a 	ret
10107ad0:	80c00017 	ldw	r3,0(r16)
10107ad4:	183ff926 	beq	r3,zero,10107abc <__alt_data_end+0xfffe7abc>
10107ad8:	88c00015 	stw	r3,0(r17)
10107adc:	003ff706 	br	10107abc <__alt_data_end+0xfffe7abc>

10107ae0 <_setlocale_r>:
10107ae0:	30001b26 	beq	r6,zero,10107b50 <_setlocale_r+0x70>
10107ae4:	01440474 	movhi	r5,4113
10107ae8:	defffe04 	addi	sp,sp,-8
10107aec:	29445604 	addi	r5,r5,4440
10107af0:	3009883a 	mov	r4,r6
10107af4:	dc000015 	stw	r16,0(sp)
10107af8:	dfc00115 	stw	ra,4(sp)
10107afc:	3021883a 	mov	r16,r6
10107b00:	01095d80 	call	101095d8 <strcmp>
10107b04:	1000061e 	bne	r2,zero,10107b20 <_setlocale_r+0x40>
10107b08:	00840474 	movhi	r2,4113
10107b0c:	10843704 	addi	r2,r2,4316
10107b10:	dfc00117 	ldw	ra,4(sp)
10107b14:	dc000017 	ldw	r16,0(sp)
10107b18:	dec00204 	addi	sp,sp,8
10107b1c:	f800283a 	ret
10107b20:	01440474 	movhi	r5,4113
10107b24:	29443704 	addi	r5,r5,4316
10107b28:	8009883a 	mov	r4,r16
10107b2c:	01095d80 	call	101095d8 <strcmp>
10107b30:	103ff526 	beq	r2,zero,10107b08 <__alt_data_end+0xfffe7b08>
10107b34:	01440474 	movhi	r5,4113
10107b38:	29444104 	addi	r5,r5,4356
10107b3c:	8009883a 	mov	r4,r16
10107b40:	01095d80 	call	101095d8 <strcmp>
10107b44:	103ff026 	beq	r2,zero,10107b08 <__alt_data_end+0xfffe7b08>
10107b48:	0005883a 	mov	r2,zero
10107b4c:	003ff006 	br	10107b10 <__alt_data_end+0xfffe7b10>
10107b50:	00840474 	movhi	r2,4113
10107b54:	10843704 	addi	r2,r2,4316
10107b58:	f800283a 	ret

10107b5c <__locale_charset>:
10107b5c:	00840474 	movhi	r2,4113
10107b60:	10870d04 	addi	r2,r2,7220
10107b64:	f800283a 	ret

10107b68 <__locale_mb_cur_max>:
10107b68:	00840474 	movhi	r2,4113
10107b6c:	108bb304 	addi	r2,r2,11980
10107b70:	10800017 	ldw	r2,0(r2)
10107b74:	f800283a 	ret

10107b78 <__locale_msgcharset>:
10107b78:	00840474 	movhi	r2,4113
10107b7c:	10870504 	addi	r2,r2,7188
10107b80:	f800283a 	ret

10107b84 <__locale_cjk_lang>:
10107b84:	0005883a 	mov	r2,zero
10107b88:	f800283a 	ret

10107b8c <_localeconv_r>:
10107b8c:	00840474 	movhi	r2,4113
10107b90:	10871504 	addi	r2,r2,7252
10107b94:	f800283a 	ret

10107b98 <setlocale>:
10107b98:	00840474 	movhi	r2,4113
10107b9c:	108bb004 	addi	r2,r2,11968
10107ba0:	280d883a 	mov	r6,r5
10107ba4:	200b883a 	mov	r5,r4
10107ba8:	11000017 	ldw	r4,0(r2)
10107bac:	0107ae01 	jmpi	10107ae0 <_setlocale_r>

10107bb0 <localeconv>:
10107bb0:	00840474 	movhi	r2,4113
10107bb4:	10871504 	addi	r2,r2,7252
10107bb8:	f800283a 	ret

10107bbc <_lseek_r>:
10107bbc:	defffd04 	addi	sp,sp,-12
10107bc0:	2805883a 	mov	r2,r5
10107bc4:	dc000015 	stw	r16,0(sp)
10107bc8:	04040474 	movhi	r16,4113
10107bcc:	dc400115 	stw	r17,4(sp)
10107bd0:	300b883a 	mov	r5,r6
10107bd4:	8412a804 	addi	r16,r16,19104
10107bd8:	2023883a 	mov	r17,r4
10107bdc:	380d883a 	mov	r6,r7
10107be0:	1009883a 	mov	r4,r2
10107be4:	dfc00215 	stw	ra,8(sp)
10107be8:	80000015 	stw	zero,0(r16)
10107bec:	010e84c0 	call	1010e84c <lseek>
10107bf0:	00ffffc4 	movi	r3,-1
10107bf4:	10c00526 	beq	r2,r3,10107c0c <_lseek_r+0x50>
10107bf8:	dfc00217 	ldw	ra,8(sp)
10107bfc:	dc400117 	ldw	r17,4(sp)
10107c00:	dc000017 	ldw	r16,0(sp)
10107c04:	dec00304 	addi	sp,sp,12
10107c08:	f800283a 	ret
10107c0c:	80c00017 	ldw	r3,0(r16)
10107c10:	183ff926 	beq	r3,zero,10107bf8 <__alt_data_end+0xfffe7bf8>
10107c14:	88c00015 	stw	r3,0(r17)
10107c18:	003ff706 	br	10107bf8 <__alt_data_end+0xfffe7bf8>

10107c1c <memchr>:
10107c1c:	208000cc 	andi	r2,r4,3
10107c20:	280f883a 	mov	r7,r5
10107c24:	10003426 	beq	r2,zero,10107cf8 <memchr+0xdc>
10107c28:	30bfffc4 	addi	r2,r6,-1
10107c2c:	30001a26 	beq	r6,zero,10107c98 <memchr+0x7c>
10107c30:	20c00003 	ldbu	r3,0(r4)
10107c34:	29803fcc 	andi	r6,r5,255
10107c38:	30c0051e 	bne	r6,r3,10107c50 <memchr+0x34>
10107c3c:	00001806 	br	10107ca0 <memchr+0x84>
10107c40:	10001526 	beq	r2,zero,10107c98 <memchr+0x7c>
10107c44:	20c00003 	ldbu	r3,0(r4)
10107c48:	10bfffc4 	addi	r2,r2,-1
10107c4c:	30c01426 	beq	r6,r3,10107ca0 <memchr+0x84>
10107c50:	21000044 	addi	r4,r4,1
10107c54:	20c000cc 	andi	r3,r4,3
10107c58:	183ff91e 	bne	r3,zero,10107c40 <__alt_data_end+0xfffe7c40>
10107c5c:	020000c4 	movi	r8,3
10107c60:	40801136 	bltu	r8,r2,10107ca8 <memchr+0x8c>
10107c64:	10000c26 	beq	r2,zero,10107c98 <memchr+0x7c>
10107c68:	20c00003 	ldbu	r3,0(r4)
10107c6c:	29403fcc 	andi	r5,r5,255
10107c70:	28c00b26 	beq	r5,r3,10107ca0 <memchr+0x84>
10107c74:	20c00044 	addi	r3,r4,1
10107c78:	39803fcc 	andi	r6,r7,255
10107c7c:	2089883a 	add	r4,r4,r2
10107c80:	00000306 	br	10107c90 <memchr+0x74>
10107c84:	18c00044 	addi	r3,r3,1
10107c88:	197fffc3 	ldbu	r5,-1(r3)
10107c8c:	31400526 	beq	r6,r5,10107ca4 <memchr+0x88>
10107c90:	1805883a 	mov	r2,r3
10107c94:	20fffb1e 	bne	r4,r3,10107c84 <__alt_data_end+0xfffe7c84>
10107c98:	0005883a 	mov	r2,zero
10107c9c:	f800283a 	ret
10107ca0:	2005883a 	mov	r2,r4
10107ca4:	f800283a 	ret
10107ca8:	28c03fcc 	andi	r3,r5,255
10107cac:	1812923a 	slli	r9,r3,8
10107cb0:	02ffbff4 	movhi	r11,65279
10107cb4:	02a02074 	movhi	r10,32897
10107cb8:	48d2b03a 	or	r9,r9,r3
10107cbc:	4806943a 	slli	r3,r9,16
10107cc0:	5affbfc4 	addi	r11,r11,-257
10107cc4:	52a02004 	addi	r10,r10,-32640
10107cc8:	48d2b03a 	or	r9,r9,r3
10107ccc:	20c00017 	ldw	r3,0(r4)
10107cd0:	48c6f03a 	xor	r3,r9,r3
10107cd4:	1acd883a 	add	r6,r3,r11
10107cd8:	00c6303a 	nor	r3,zero,r3
10107cdc:	30c6703a 	and	r3,r6,r3
10107ce0:	1a86703a 	and	r3,r3,r10
10107ce4:	183fe01e 	bne	r3,zero,10107c68 <__alt_data_end+0xfffe7c68>
10107ce8:	10bfff04 	addi	r2,r2,-4
10107cec:	21000104 	addi	r4,r4,4
10107cf0:	40bff636 	bltu	r8,r2,10107ccc <__alt_data_end+0xfffe7ccc>
10107cf4:	003fdb06 	br	10107c64 <__alt_data_end+0xfffe7c64>
10107cf8:	3005883a 	mov	r2,r6
10107cfc:	003fd706 	br	10107c5c <__alt_data_end+0xfffe7c5c>

10107d00 <memcpy>:
10107d00:	defffd04 	addi	sp,sp,-12
10107d04:	dfc00215 	stw	ra,8(sp)
10107d08:	dc400115 	stw	r17,4(sp)
10107d0c:	dc000015 	stw	r16,0(sp)
10107d10:	00c003c4 	movi	r3,15
10107d14:	2005883a 	mov	r2,r4
10107d18:	1980452e 	bgeu	r3,r6,10107e30 <memcpy+0x130>
10107d1c:	2906b03a 	or	r3,r5,r4
10107d20:	18c000cc 	andi	r3,r3,3
10107d24:	1800441e 	bne	r3,zero,10107e38 <memcpy+0x138>
10107d28:	347ffc04 	addi	r17,r6,-16
10107d2c:	8822d13a 	srli	r17,r17,4
10107d30:	28c00104 	addi	r3,r5,4
10107d34:	23400104 	addi	r13,r4,4
10107d38:	8820913a 	slli	r16,r17,4
10107d3c:	2b000204 	addi	r12,r5,8
10107d40:	22c00204 	addi	r11,r4,8
10107d44:	84000504 	addi	r16,r16,20
10107d48:	2a800304 	addi	r10,r5,12
10107d4c:	22400304 	addi	r9,r4,12
10107d50:	2c21883a 	add	r16,r5,r16
10107d54:	2811883a 	mov	r8,r5
10107d58:	200f883a 	mov	r7,r4
10107d5c:	41000017 	ldw	r4,0(r8)
10107d60:	1fc00017 	ldw	ra,0(r3)
10107d64:	63c00017 	ldw	r15,0(r12)
10107d68:	39000015 	stw	r4,0(r7)
10107d6c:	53800017 	ldw	r14,0(r10)
10107d70:	6fc00015 	stw	ra,0(r13)
10107d74:	5bc00015 	stw	r15,0(r11)
10107d78:	4b800015 	stw	r14,0(r9)
10107d7c:	18c00404 	addi	r3,r3,16
10107d80:	39c00404 	addi	r7,r7,16
10107d84:	42000404 	addi	r8,r8,16
10107d88:	6b400404 	addi	r13,r13,16
10107d8c:	63000404 	addi	r12,r12,16
10107d90:	5ac00404 	addi	r11,r11,16
10107d94:	52800404 	addi	r10,r10,16
10107d98:	4a400404 	addi	r9,r9,16
10107d9c:	1c3fef1e 	bne	r3,r16,10107d5c <__alt_data_end+0xfffe7d5c>
10107da0:	89c00044 	addi	r7,r17,1
10107da4:	380e913a 	slli	r7,r7,4
10107da8:	310003cc 	andi	r4,r6,15
10107dac:	02c000c4 	movi	r11,3
10107db0:	11c7883a 	add	r3,r2,r7
10107db4:	29cb883a 	add	r5,r5,r7
10107db8:	5900212e 	bgeu	r11,r4,10107e40 <memcpy+0x140>
10107dbc:	1813883a 	mov	r9,r3
10107dc0:	2811883a 	mov	r8,r5
10107dc4:	200f883a 	mov	r7,r4
10107dc8:	42800017 	ldw	r10,0(r8)
10107dcc:	4a400104 	addi	r9,r9,4
10107dd0:	39ffff04 	addi	r7,r7,-4
10107dd4:	4abfff15 	stw	r10,-4(r9)
10107dd8:	42000104 	addi	r8,r8,4
10107ddc:	59fffa36 	bltu	r11,r7,10107dc8 <__alt_data_end+0xfffe7dc8>
10107de0:	213fff04 	addi	r4,r4,-4
10107de4:	2008d0ba 	srli	r4,r4,2
10107de8:	318000cc 	andi	r6,r6,3
10107dec:	21000044 	addi	r4,r4,1
10107df0:	2109883a 	add	r4,r4,r4
10107df4:	2109883a 	add	r4,r4,r4
10107df8:	1907883a 	add	r3,r3,r4
10107dfc:	290b883a 	add	r5,r5,r4
10107e00:	30000626 	beq	r6,zero,10107e1c <memcpy+0x11c>
10107e04:	198d883a 	add	r6,r3,r6
10107e08:	29c00003 	ldbu	r7,0(r5)
10107e0c:	18c00044 	addi	r3,r3,1
10107e10:	29400044 	addi	r5,r5,1
10107e14:	19ffffc5 	stb	r7,-1(r3)
10107e18:	19bffb1e 	bne	r3,r6,10107e08 <__alt_data_end+0xfffe7e08>
10107e1c:	dfc00217 	ldw	ra,8(sp)
10107e20:	dc400117 	ldw	r17,4(sp)
10107e24:	dc000017 	ldw	r16,0(sp)
10107e28:	dec00304 	addi	sp,sp,12
10107e2c:	f800283a 	ret
10107e30:	2007883a 	mov	r3,r4
10107e34:	003ff206 	br	10107e00 <__alt_data_end+0xfffe7e00>
10107e38:	2007883a 	mov	r3,r4
10107e3c:	003ff106 	br	10107e04 <__alt_data_end+0xfffe7e04>
10107e40:	200d883a 	mov	r6,r4
10107e44:	003fee06 	br	10107e00 <__alt_data_end+0xfffe7e00>

10107e48 <memmove>:
10107e48:	2005883a 	mov	r2,r4
10107e4c:	29000b2e 	bgeu	r5,r4,10107e7c <memmove+0x34>
10107e50:	298f883a 	add	r7,r5,r6
10107e54:	21c0092e 	bgeu	r4,r7,10107e7c <memmove+0x34>
10107e58:	2187883a 	add	r3,r4,r6
10107e5c:	198bc83a 	sub	r5,r3,r6
10107e60:	30004826 	beq	r6,zero,10107f84 <memmove+0x13c>
10107e64:	39ffffc4 	addi	r7,r7,-1
10107e68:	39000003 	ldbu	r4,0(r7)
10107e6c:	18ffffc4 	addi	r3,r3,-1
10107e70:	19000005 	stb	r4,0(r3)
10107e74:	28fffb1e 	bne	r5,r3,10107e64 <__alt_data_end+0xfffe7e64>
10107e78:	f800283a 	ret
10107e7c:	00c003c4 	movi	r3,15
10107e80:	1980412e 	bgeu	r3,r6,10107f88 <memmove+0x140>
10107e84:	2886b03a 	or	r3,r5,r2
10107e88:	18c000cc 	andi	r3,r3,3
10107e8c:	1800401e 	bne	r3,zero,10107f90 <memmove+0x148>
10107e90:	33fffc04 	addi	r15,r6,-16
10107e94:	781ed13a 	srli	r15,r15,4
10107e98:	28c00104 	addi	r3,r5,4
10107e9c:	13400104 	addi	r13,r2,4
10107ea0:	781c913a 	slli	r14,r15,4
10107ea4:	2b000204 	addi	r12,r5,8
10107ea8:	12c00204 	addi	r11,r2,8
10107eac:	73800504 	addi	r14,r14,20
10107eb0:	2a800304 	addi	r10,r5,12
10107eb4:	12400304 	addi	r9,r2,12
10107eb8:	2b9d883a 	add	r14,r5,r14
10107ebc:	2811883a 	mov	r8,r5
10107ec0:	100f883a 	mov	r7,r2
10107ec4:	41000017 	ldw	r4,0(r8)
10107ec8:	39c00404 	addi	r7,r7,16
10107ecc:	18c00404 	addi	r3,r3,16
10107ed0:	393ffc15 	stw	r4,-16(r7)
10107ed4:	193ffc17 	ldw	r4,-16(r3)
10107ed8:	6b400404 	addi	r13,r13,16
10107edc:	5ac00404 	addi	r11,r11,16
10107ee0:	693ffc15 	stw	r4,-16(r13)
10107ee4:	61000017 	ldw	r4,0(r12)
10107ee8:	4a400404 	addi	r9,r9,16
10107eec:	42000404 	addi	r8,r8,16
10107ef0:	593ffc15 	stw	r4,-16(r11)
10107ef4:	51000017 	ldw	r4,0(r10)
10107ef8:	63000404 	addi	r12,r12,16
10107efc:	52800404 	addi	r10,r10,16
10107f00:	493ffc15 	stw	r4,-16(r9)
10107f04:	1bbfef1e 	bne	r3,r14,10107ec4 <__alt_data_end+0xfffe7ec4>
10107f08:	79000044 	addi	r4,r15,1
10107f0c:	2008913a 	slli	r4,r4,4
10107f10:	328003cc 	andi	r10,r6,15
10107f14:	02c000c4 	movi	r11,3
10107f18:	1107883a 	add	r3,r2,r4
10107f1c:	290b883a 	add	r5,r5,r4
10107f20:	5a801e2e 	bgeu	r11,r10,10107f9c <memmove+0x154>
10107f24:	1813883a 	mov	r9,r3
10107f28:	2811883a 	mov	r8,r5
10107f2c:	500f883a 	mov	r7,r10
10107f30:	41000017 	ldw	r4,0(r8)
10107f34:	4a400104 	addi	r9,r9,4
10107f38:	39ffff04 	addi	r7,r7,-4
10107f3c:	493fff15 	stw	r4,-4(r9)
10107f40:	42000104 	addi	r8,r8,4
10107f44:	59fffa36 	bltu	r11,r7,10107f30 <__alt_data_end+0xfffe7f30>
10107f48:	513fff04 	addi	r4,r10,-4
10107f4c:	2008d0ba 	srli	r4,r4,2
10107f50:	318000cc 	andi	r6,r6,3
10107f54:	21000044 	addi	r4,r4,1
10107f58:	2109883a 	add	r4,r4,r4
10107f5c:	2109883a 	add	r4,r4,r4
10107f60:	1907883a 	add	r3,r3,r4
10107f64:	290b883a 	add	r5,r5,r4
10107f68:	30000b26 	beq	r6,zero,10107f98 <memmove+0x150>
10107f6c:	198d883a 	add	r6,r3,r6
10107f70:	29c00003 	ldbu	r7,0(r5)
10107f74:	18c00044 	addi	r3,r3,1
10107f78:	29400044 	addi	r5,r5,1
10107f7c:	19ffffc5 	stb	r7,-1(r3)
10107f80:	19bffb1e 	bne	r3,r6,10107f70 <__alt_data_end+0xfffe7f70>
10107f84:	f800283a 	ret
10107f88:	1007883a 	mov	r3,r2
10107f8c:	003ff606 	br	10107f68 <__alt_data_end+0xfffe7f68>
10107f90:	1007883a 	mov	r3,r2
10107f94:	003ff506 	br	10107f6c <__alt_data_end+0xfffe7f6c>
10107f98:	f800283a 	ret
10107f9c:	500d883a 	mov	r6,r10
10107fa0:	003ff106 	br	10107f68 <__alt_data_end+0xfffe7f68>

10107fa4 <_Balloc>:
10107fa4:	20801317 	ldw	r2,76(r4)
10107fa8:	defffc04 	addi	sp,sp,-16
10107fac:	dc400115 	stw	r17,4(sp)
10107fb0:	dc000015 	stw	r16,0(sp)
10107fb4:	dfc00315 	stw	ra,12(sp)
10107fb8:	dc800215 	stw	r18,8(sp)
10107fbc:	2023883a 	mov	r17,r4
10107fc0:	2821883a 	mov	r16,r5
10107fc4:	10000f26 	beq	r2,zero,10108004 <_Balloc+0x60>
10107fc8:	8407883a 	add	r3,r16,r16
10107fcc:	18c7883a 	add	r3,r3,r3
10107fd0:	10c7883a 	add	r3,r2,r3
10107fd4:	18800017 	ldw	r2,0(r3)
10107fd8:	10001126 	beq	r2,zero,10108020 <_Balloc+0x7c>
10107fdc:	11000017 	ldw	r4,0(r2)
10107fe0:	19000015 	stw	r4,0(r3)
10107fe4:	10000415 	stw	zero,16(r2)
10107fe8:	10000315 	stw	zero,12(r2)
10107fec:	dfc00317 	ldw	ra,12(sp)
10107ff0:	dc800217 	ldw	r18,8(sp)
10107ff4:	dc400117 	ldw	r17,4(sp)
10107ff8:	dc000017 	ldw	r16,0(sp)
10107ffc:	dec00404 	addi	sp,sp,16
10108000:	f800283a 	ret
10108004:	01800844 	movi	r6,33
10108008:	01400104 	movi	r5,4
1010800c:	010acfc0 	call	1010acfc <_calloc_r>
10108010:	88801315 	stw	r2,76(r17)
10108014:	103fec1e 	bne	r2,zero,10107fc8 <__alt_data_end+0xfffe7fc8>
10108018:	0005883a 	mov	r2,zero
1010801c:	003ff306 	br	10107fec <__alt_data_end+0xfffe7fec>
10108020:	01400044 	movi	r5,1
10108024:	2c24983a 	sll	r18,r5,r16
10108028:	8809883a 	mov	r4,r17
1010802c:	91800144 	addi	r6,r18,5
10108030:	318d883a 	add	r6,r6,r6
10108034:	318d883a 	add	r6,r6,r6
10108038:	010acfc0 	call	1010acfc <_calloc_r>
1010803c:	103ff626 	beq	r2,zero,10108018 <__alt_data_end+0xfffe8018>
10108040:	14000115 	stw	r16,4(r2)
10108044:	14800215 	stw	r18,8(r2)
10108048:	003fe606 	br	10107fe4 <__alt_data_end+0xfffe7fe4>

1010804c <_Bfree>:
1010804c:	28000826 	beq	r5,zero,10108070 <_Bfree+0x24>
10108050:	28c00117 	ldw	r3,4(r5)
10108054:	20801317 	ldw	r2,76(r4)
10108058:	18c7883a 	add	r3,r3,r3
1010805c:	18c7883a 	add	r3,r3,r3
10108060:	10c5883a 	add	r2,r2,r3
10108064:	10c00017 	ldw	r3,0(r2)
10108068:	28c00015 	stw	r3,0(r5)
1010806c:	11400015 	stw	r5,0(r2)
10108070:	f800283a 	ret

10108074 <__multadd>:
10108074:	defffa04 	addi	sp,sp,-24
10108078:	dc800315 	stw	r18,12(sp)
1010807c:	dc400215 	stw	r17,8(sp)
10108080:	dc000115 	stw	r16,4(sp)
10108084:	2823883a 	mov	r17,r5
10108088:	2c000417 	ldw	r16,16(r5)
1010808c:	dfc00515 	stw	ra,20(sp)
10108090:	dcc00415 	stw	r19,16(sp)
10108094:	2025883a 	mov	r18,r4
10108098:	29400504 	addi	r5,r5,20
1010809c:	0011883a 	mov	r8,zero
101080a0:	28c00017 	ldw	r3,0(r5)
101080a4:	29400104 	addi	r5,r5,4
101080a8:	42000044 	addi	r8,r8,1
101080ac:	18bfffcc 	andi	r2,r3,65535
101080b0:	1185383a 	mul	r2,r2,r6
101080b4:	1806d43a 	srli	r3,r3,16
101080b8:	11cf883a 	add	r7,r2,r7
101080bc:	3808d43a 	srli	r4,r7,16
101080c0:	1987383a 	mul	r3,r3,r6
101080c4:	38bfffcc 	andi	r2,r7,65535
101080c8:	1907883a 	add	r3,r3,r4
101080cc:	1808943a 	slli	r4,r3,16
101080d0:	180ed43a 	srli	r7,r3,16
101080d4:	2085883a 	add	r2,r4,r2
101080d8:	28bfff15 	stw	r2,-4(r5)
101080dc:	443ff016 	blt	r8,r16,101080a0 <__alt_data_end+0xfffe80a0>
101080e0:	38000926 	beq	r7,zero,10108108 <__multadd+0x94>
101080e4:	88800217 	ldw	r2,8(r17)
101080e8:	80800f0e 	bge	r16,r2,10108128 <__multadd+0xb4>
101080ec:	80800144 	addi	r2,r16,5
101080f0:	1085883a 	add	r2,r2,r2
101080f4:	1085883a 	add	r2,r2,r2
101080f8:	8885883a 	add	r2,r17,r2
101080fc:	11c00015 	stw	r7,0(r2)
10108100:	84000044 	addi	r16,r16,1
10108104:	8c000415 	stw	r16,16(r17)
10108108:	8805883a 	mov	r2,r17
1010810c:	dfc00517 	ldw	ra,20(sp)
10108110:	dcc00417 	ldw	r19,16(sp)
10108114:	dc800317 	ldw	r18,12(sp)
10108118:	dc400217 	ldw	r17,8(sp)
1010811c:	dc000117 	ldw	r16,4(sp)
10108120:	dec00604 	addi	sp,sp,24
10108124:	f800283a 	ret
10108128:	89400117 	ldw	r5,4(r17)
1010812c:	9009883a 	mov	r4,r18
10108130:	d9c00015 	stw	r7,0(sp)
10108134:	29400044 	addi	r5,r5,1
10108138:	0107fa40 	call	10107fa4 <_Balloc>
1010813c:	89800417 	ldw	r6,16(r17)
10108140:	89400304 	addi	r5,r17,12
10108144:	11000304 	addi	r4,r2,12
10108148:	31800084 	addi	r6,r6,2
1010814c:	318d883a 	add	r6,r6,r6
10108150:	318d883a 	add	r6,r6,r6
10108154:	1027883a 	mov	r19,r2
10108158:	0107d000 	call	10107d00 <memcpy>
1010815c:	d9c00017 	ldw	r7,0(sp)
10108160:	88000a26 	beq	r17,zero,1010818c <__multadd+0x118>
10108164:	88c00117 	ldw	r3,4(r17)
10108168:	90801317 	ldw	r2,76(r18)
1010816c:	18c7883a 	add	r3,r3,r3
10108170:	18c7883a 	add	r3,r3,r3
10108174:	10c5883a 	add	r2,r2,r3
10108178:	10c00017 	ldw	r3,0(r2)
1010817c:	88c00015 	stw	r3,0(r17)
10108180:	14400015 	stw	r17,0(r2)
10108184:	9823883a 	mov	r17,r19
10108188:	003fd806 	br	101080ec <__alt_data_end+0xfffe80ec>
1010818c:	9823883a 	mov	r17,r19
10108190:	003fd606 	br	101080ec <__alt_data_end+0xfffe80ec>

10108194 <__s2b>:
10108194:	defff904 	addi	sp,sp,-28
10108198:	dc400115 	stw	r17,4(sp)
1010819c:	dc000015 	stw	r16,0(sp)
101081a0:	2023883a 	mov	r17,r4
101081a4:	2821883a 	mov	r16,r5
101081a8:	39000204 	addi	r4,r7,8
101081ac:	01400244 	movi	r5,9
101081b0:	dcc00315 	stw	r19,12(sp)
101081b4:	dc800215 	stw	r18,8(sp)
101081b8:	dfc00615 	stw	ra,24(sp)
101081bc:	dd400515 	stw	r21,20(sp)
101081c0:	dd000415 	stw	r20,16(sp)
101081c4:	3825883a 	mov	r18,r7
101081c8:	3027883a 	mov	r19,r6
101081cc:	01010f80 	call	101010f8 <__divsi3>
101081d0:	00c00044 	movi	r3,1
101081d4:	000b883a 	mov	r5,zero
101081d8:	1880030e 	bge	r3,r2,101081e8 <__s2b+0x54>
101081dc:	18c7883a 	add	r3,r3,r3
101081e0:	29400044 	addi	r5,r5,1
101081e4:	18bffd16 	blt	r3,r2,101081dc <__alt_data_end+0xfffe81dc>
101081e8:	8809883a 	mov	r4,r17
101081ec:	0107fa40 	call	10107fa4 <_Balloc>
101081f0:	d8c00717 	ldw	r3,28(sp)
101081f4:	10c00515 	stw	r3,20(r2)
101081f8:	00c00044 	movi	r3,1
101081fc:	10c00415 	stw	r3,16(r2)
10108200:	00c00244 	movi	r3,9
10108204:	1cc0210e 	bge	r3,r19,1010828c <__s2b+0xf8>
10108208:	80eb883a 	add	r21,r16,r3
1010820c:	a829883a 	mov	r20,r21
10108210:	84e1883a 	add	r16,r16,r19
10108214:	a1c00007 	ldb	r7,0(r20)
10108218:	01800284 	movi	r6,10
1010821c:	a5000044 	addi	r20,r20,1
10108220:	100b883a 	mov	r5,r2
10108224:	39fff404 	addi	r7,r7,-48
10108228:	8809883a 	mov	r4,r17
1010822c:	01080740 	call	10108074 <__multadd>
10108230:	a43ff81e 	bne	r20,r16,10108214 <__alt_data_end+0xfffe8214>
10108234:	ace1883a 	add	r16,r21,r19
10108238:	843ffe04 	addi	r16,r16,-8
1010823c:	9c800a0e 	bge	r19,r18,10108268 <__s2b+0xd4>
10108240:	94e5c83a 	sub	r18,r18,r19
10108244:	84a5883a 	add	r18,r16,r18
10108248:	81c00007 	ldb	r7,0(r16)
1010824c:	01800284 	movi	r6,10
10108250:	84000044 	addi	r16,r16,1
10108254:	100b883a 	mov	r5,r2
10108258:	39fff404 	addi	r7,r7,-48
1010825c:	8809883a 	mov	r4,r17
10108260:	01080740 	call	10108074 <__multadd>
10108264:	84bff81e 	bne	r16,r18,10108248 <__alt_data_end+0xfffe8248>
10108268:	dfc00617 	ldw	ra,24(sp)
1010826c:	dd400517 	ldw	r21,20(sp)
10108270:	dd000417 	ldw	r20,16(sp)
10108274:	dcc00317 	ldw	r19,12(sp)
10108278:	dc800217 	ldw	r18,8(sp)
1010827c:	dc400117 	ldw	r17,4(sp)
10108280:	dc000017 	ldw	r16,0(sp)
10108284:	dec00704 	addi	sp,sp,28
10108288:	f800283a 	ret
1010828c:	84000284 	addi	r16,r16,10
10108290:	1827883a 	mov	r19,r3
10108294:	003fe906 	br	1010823c <__alt_data_end+0xfffe823c>

10108298 <__hi0bits>:
10108298:	20bfffec 	andhi	r2,r4,65535
1010829c:	1000141e 	bne	r2,zero,101082f0 <__hi0bits+0x58>
101082a0:	2008943a 	slli	r4,r4,16
101082a4:	00800404 	movi	r2,16
101082a8:	20ffc02c 	andhi	r3,r4,65280
101082ac:	1800021e 	bne	r3,zero,101082b8 <__hi0bits+0x20>
101082b0:	2008923a 	slli	r4,r4,8
101082b4:	10800204 	addi	r2,r2,8
101082b8:	20fc002c 	andhi	r3,r4,61440
101082bc:	1800021e 	bne	r3,zero,101082c8 <__hi0bits+0x30>
101082c0:	2008913a 	slli	r4,r4,4
101082c4:	10800104 	addi	r2,r2,4
101082c8:	20f0002c 	andhi	r3,r4,49152
101082cc:	1800031e 	bne	r3,zero,101082dc <__hi0bits+0x44>
101082d0:	2109883a 	add	r4,r4,r4
101082d4:	10800084 	addi	r2,r2,2
101082d8:	2109883a 	add	r4,r4,r4
101082dc:	20000316 	blt	r4,zero,101082ec <__hi0bits+0x54>
101082e0:	2110002c 	andhi	r4,r4,16384
101082e4:	2000041e 	bne	r4,zero,101082f8 <__hi0bits+0x60>
101082e8:	00800804 	movi	r2,32
101082ec:	f800283a 	ret
101082f0:	0005883a 	mov	r2,zero
101082f4:	003fec06 	br	101082a8 <__alt_data_end+0xfffe82a8>
101082f8:	10800044 	addi	r2,r2,1
101082fc:	f800283a 	ret

10108300 <__lo0bits>:
10108300:	20c00017 	ldw	r3,0(r4)
10108304:	188001cc 	andi	r2,r3,7
10108308:	10000826 	beq	r2,zero,1010832c <__lo0bits+0x2c>
1010830c:	1880004c 	andi	r2,r3,1
10108310:	1000211e 	bne	r2,zero,10108398 <__lo0bits+0x98>
10108314:	1880008c 	andi	r2,r3,2
10108318:	1000211e 	bne	r2,zero,101083a0 <__lo0bits+0xa0>
1010831c:	1806d0ba 	srli	r3,r3,2
10108320:	00800084 	movi	r2,2
10108324:	20c00015 	stw	r3,0(r4)
10108328:	f800283a 	ret
1010832c:	18bfffcc 	andi	r2,r3,65535
10108330:	10001326 	beq	r2,zero,10108380 <__lo0bits+0x80>
10108334:	0005883a 	mov	r2,zero
10108338:	19403fcc 	andi	r5,r3,255
1010833c:	2800021e 	bne	r5,zero,10108348 <__lo0bits+0x48>
10108340:	1806d23a 	srli	r3,r3,8
10108344:	10800204 	addi	r2,r2,8
10108348:	194003cc 	andi	r5,r3,15
1010834c:	2800021e 	bne	r5,zero,10108358 <__lo0bits+0x58>
10108350:	1806d13a 	srli	r3,r3,4
10108354:	10800104 	addi	r2,r2,4
10108358:	194000cc 	andi	r5,r3,3
1010835c:	2800021e 	bne	r5,zero,10108368 <__lo0bits+0x68>
10108360:	1806d0ba 	srli	r3,r3,2
10108364:	10800084 	addi	r2,r2,2
10108368:	1940004c 	andi	r5,r3,1
1010836c:	2800081e 	bne	r5,zero,10108390 <__lo0bits+0x90>
10108370:	1806d07a 	srli	r3,r3,1
10108374:	1800051e 	bne	r3,zero,1010838c <__lo0bits+0x8c>
10108378:	00800804 	movi	r2,32
1010837c:	f800283a 	ret
10108380:	1806d43a 	srli	r3,r3,16
10108384:	00800404 	movi	r2,16
10108388:	003feb06 	br	10108338 <__alt_data_end+0xfffe8338>
1010838c:	10800044 	addi	r2,r2,1
10108390:	20c00015 	stw	r3,0(r4)
10108394:	f800283a 	ret
10108398:	0005883a 	mov	r2,zero
1010839c:	f800283a 	ret
101083a0:	1806d07a 	srli	r3,r3,1
101083a4:	00800044 	movi	r2,1
101083a8:	20c00015 	stw	r3,0(r4)
101083ac:	f800283a 	ret

101083b0 <__i2b>:
101083b0:	defffd04 	addi	sp,sp,-12
101083b4:	dc000015 	stw	r16,0(sp)
101083b8:	04000044 	movi	r16,1
101083bc:	dc400115 	stw	r17,4(sp)
101083c0:	2823883a 	mov	r17,r5
101083c4:	800b883a 	mov	r5,r16
101083c8:	dfc00215 	stw	ra,8(sp)
101083cc:	0107fa40 	call	10107fa4 <_Balloc>
101083d0:	14400515 	stw	r17,20(r2)
101083d4:	14000415 	stw	r16,16(r2)
101083d8:	dfc00217 	ldw	ra,8(sp)
101083dc:	dc400117 	ldw	r17,4(sp)
101083e0:	dc000017 	ldw	r16,0(sp)
101083e4:	dec00304 	addi	sp,sp,12
101083e8:	f800283a 	ret

101083ec <__multiply>:
101083ec:	defffa04 	addi	sp,sp,-24
101083f0:	dcc00315 	stw	r19,12(sp)
101083f4:	dc800215 	stw	r18,8(sp)
101083f8:	34c00417 	ldw	r19,16(r6)
101083fc:	2c800417 	ldw	r18,16(r5)
10108400:	dd000415 	stw	r20,16(sp)
10108404:	dc400115 	stw	r17,4(sp)
10108408:	dfc00515 	stw	ra,20(sp)
1010840c:	dc000015 	stw	r16,0(sp)
10108410:	2829883a 	mov	r20,r5
10108414:	3023883a 	mov	r17,r6
10108418:	94c0050e 	bge	r18,r19,10108430 <__multiply+0x44>
1010841c:	9007883a 	mov	r3,r18
10108420:	3029883a 	mov	r20,r6
10108424:	9825883a 	mov	r18,r19
10108428:	2823883a 	mov	r17,r5
1010842c:	1827883a 	mov	r19,r3
10108430:	a0800217 	ldw	r2,8(r20)
10108434:	94e1883a 	add	r16,r18,r19
10108438:	a1400117 	ldw	r5,4(r20)
1010843c:	1400010e 	bge	r2,r16,10108444 <__multiply+0x58>
10108440:	29400044 	addi	r5,r5,1
10108444:	0107fa40 	call	10107fa4 <_Balloc>
10108448:	8415883a 	add	r10,r16,r16
1010844c:	12c00504 	addi	r11,r2,20
10108450:	5295883a 	add	r10,r10,r10
10108454:	5a95883a 	add	r10,r11,r10
10108458:	5807883a 	mov	r3,r11
1010845c:	5a80032e 	bgeu	r11,r10,1010846c <__multiply+0x80>
10108460:	18000015 	stw	zero,0(r3)
10108464:	18c00104 	addi	r3,r3,4
10108468:	1abffd36 	bltu	r3,r10,10108460 <__alt_data_end+0xfffe8460>
1010846c:	9ce7883a 	add	r19,r19,r19
10108470:	94a5883a 	add	r18,r18,r18
10108474:	89800504 	addi	r6,r17,20
10108478:	9ce7883a 	add	r19,r19,r19
1010847c:	a3400504 	addi	r13,r20,20
10108480:	94a5883a 	add	r18,r18,r18
10108484:	34d9883a 	add	r12,r6,r19
10108488:	6c93883a 	add	r9,r13,r18
1010848c:	3300422e 	bgeu	r6,r12,10108598 <__multiply+0x1ac>
10108490:	37c00017 	ldw	ra,0(r6)
10108494:	fbffffcc 	andi	r15,ra,65535
10108498:	78001b26 	beq	r15,zero,10108508 <__multiply+0x11c>
1010849c:	5811883a 	mov	r8,r11
101084a0:	681d883a 	mov	r14,r13
101084a4:	000f883a 	mov	r7,zero
101084a8:	71000017 	ldw	r4,0(r14)
101084ac:	40c00017 	ldw	r3,0(r8)
101084b0:	73800104 	addi	r14,r14,4
101084b4:	217fffcc 	andi	r5,r4,65535
101084b8:	2bcb383a 	mul	r5,r5,r15
101084bc:	2008d43a 	srli	r4,r4,16
101084c0:	1c7fffcc 	andi	r17,r3,65535
101084c4:	2c4b883a 	add	r5,r5,r17
101084c8:	29cb883a 	add	r5,r5,r7
101084cc:	23c9383a 	mul	r4,r4,r15
101084d0:	1806d43a 	srli	r3,r3,16
101084d4:	280ed43a 	srli	r7,r5,16
101084d8:	297fffcc 	andi	r5,r5,65535
101084dc:	20c7883a 	add	r3,r4,r3
101084e0:	19c7883a 	add	r3,r3,r7
101084e4:	1808943a 	slli	r4,r3,16
101084e8:	4023883a 	mov	r17,r8
101084ec:	180ed43a 	srli	r7,r3,16
101084f0:	214ab03a 	or	r5,r4,r5
101084f4:	41400015 	stw	r5,0(r8)
101084f8:	42000104 	addi	r8,r8,4
101084fc:	727fea36 	bltu	r14,r9,101084a8 <__alt_data_end+0xfffe84a8>
10108500:	89c00115 	stw	r7,4(r17)
10108504:	37c00017 	ldw	ra,0(r6)
10108508:	f83ed43a 	srli	ra,ra,16
1010850c:	f8001f26 	beq	ra,zero,1010858c <__multiply+0x1a0>
10108510:	58c00017 	ldw	r3,0(r11)
10108514:	681d883a 	mov	r14,r13
10108518:	581f883a 	mov	r15,r11
1010851c:	1811883a 	mov	r8,r3
10108520:	5825883a 	mov	r18,r11
10108524:	000f883a 	mov	r7,zero
10108528:	00000106 	br	10108530 <__multiply+0x144>
1010852c:	8825883a 	mov	r18,r17
10108530:	7140000b 	ldhu	r5,0(r14)
10108534:	4010d43a 	srli	r8,r8,16
10108538:	193fffcc 	andi	r4,r3,65535
1010853c:	2fcb383a 	mul	r5,r5,ra
10108540:	7bc00104 	addi	r15,r15,4
10108544:	73800104 	addi	r14,r14,4
10108548:	2a0b883a 	add	r5,r5,r8
1010854c:	29cb883a 	add	r5,r5,r7
10108550:	2806943a 	slli	r3,r5,16
10108554:	94400104 	addi	r17,r18,4
10108558:	280ad43a 	srli	r5,r5,16
1010855c:	1908b03a 	or	r4,r3,r4
10108560:	793fff15 	stw	r4,-4(r15)
10108564:	70ffff17 	ldw	r3,-4(r14)
10108568:	8a000017 	ldw	r8,0(r17)
1010856c:	1806d43a 	srli	r3,r3,16
10108570:	413fffcc 	andi	r4,r8,65535
10108574:	1fc7383a 	mul	r3,r3,ra
10108578:	1907883a 	add	r3,r3,r4
1010857c:	1947883a 	add	r3,r3,r5
10108580:	180ed43a 	srli	r7,r3,16
10108584:	727fe936 	bltu	r14,r9,1010852c <__alt_data_end+0xfffe852c>
10108588:	90c00115 	stw	r3,4(r18)
1010858c:	31800104 	addi	r6,r6,4
10108590:	5ac00104 	addi	r11,r11,4
10108594:	333fbe36 	bltu	r6,r12,10108490 <__alt_data_end+0xfffe8490>
10108598:	0400090e 	bge	zero,r16,101085c0 <__multiply+0x1d4>
1010859c:	50ffff17 	ldw	r3,-4(r10)
101085a0:	52bfff04 	addi	r10,r10,-4
101085a4:	18000326 	beq	r3,zero,101085b4 <__multiply+0x1c8>
101085a8:	00000506 	br	101085c0 <__multiply+0x1d4>
101085ac:	50c00017 	ldw	r3,0(r10)
101085b0:	1800031e 	bne	r3,zero,101085c0 <__multiply+0x1d4>
101085b4:	843fffc4 	addi	r16,r16,-1
101085b8:	52bfff04 	addi	r10,r10,-4
101085bc:	803ffb1e 	bne	r16,zero,101085ac <__alt_data_end+0xfffe85ac>
101085c0:	14000415 	stw	r16,16(r2)
101085c4:	dfc00517 	ldw	ra,20(sp)
101085c8:	dd000417 	ldw	r20,16(sp)
101085cc:	dcc00317 	ldw	r19,12(sp)
101085d0:	dc800217 	ldw	r18,8(sp)
101085d4:	dc400117 	ldw	r17,4(sp)
101085d8:	dc000017 	ldw	r16,0(sp)
101085dc:	dec00604 	addi	sp,sp,24
101085e0:	f800283a 	ret

101085e4 <__pow5mult>:
101085e4:	defffa04 	addi	sp,sp,-24
101085e8:	dcc00315 	stw	r19,12(sp)
101085ec:	dc000015 	stw	r16,0(sp)
101085f0:	dfc00515 	stw	ra,20(sp)
101085f4:	dd000415 	stw	r20,16(sp)
101085f8:	dc800215 	stw	r18,8(sp)
101085fc:	dc400115 	stw	r17,4(sp)
10108600:	308000cc 	andi	r2,r6,3
10108604:	3021883a 	mov	r16,r6
10108608:	2027883a 	mov	r19,r4
1010860c:	10002f1e 	bne	r2,zero,101086cc <__pow5mult+0xe8>
10108610:	2825883a 	mov	r18,r5
10108614:	8021d0ba 	srai	r16,r16,2
10108618:	80001a26 	beq	r16,zero,10108684 <__pow5mult+0xa0>
1010861c:	9c401217 	ldw	r17,72(r19)
10108620:	8800061e 	bne	r17,zero,1010863c <__pow5mult+0x58>
10108624:	00003406 	br	101086f8 <__pow5mult+0x114>
10108628:	8021d07a 	srai	r16,r16,1
1010862c:	80001526 	beq	r16,zero,10108684 <__pow5mult+0xa0>
10108630:	88800017 	ldw	r2,0(r17)
10108634:	10001c26 	beq	r2,zero,101086a8 <__pow5mult+0xc4>
10108638:	1023883a 	mov	r17,r2
1010863c:	8080004c 	andi	r2,r16,1
10108640:	103ff926 	beq	r2,zero,10108628 <__alt_data_end+0xfffe8628>
10108644:	880d883a 	mov	r6,r17
10108648:	900b883a 	mov	r5,r18
1010864c:	9809883a 	mov	r4,r19
10108650:	01083ec0 	call	101083ec <__multiply>
10108654:	90001b26 	beq	r18,zero,101086c4 <__pow5mult+0xe0>
10108658:	91000117 	ldw	r4,4(r18)
1010865c:	98c01317 	ldw	r3,76(r19)
10108660:	8021d07a 	srai	r16,r16,1
10108664:	2109883a 	add	r4,r4,r4
10108668:	2109883a 	add	r4,r4,r4
1010866c:	1907883a 	add	r3,r3,r4
10108670:	19000017 	ldw	r4,0(r3)
10108674:	91000015 	stw	r4,0(r18)
10108678:	1c800015 	stw	r18,0(r3)
1010867c:	1025883a 	mov	r18,r2
10108680:	803feb1e 	bne	r16,zero,10108630 <__alt_data_end+0xfffe8630>
10108684:	9005883a 	mov	r2,r18
10108688:	dfc00517 	ldw	ra,20(sp)
1010868c:	dd000417 	ldw	r20,16(sp)
10108690:	dcc00317 	ldw	r19,12(sp)
10108694:	dc800217 	ldw	r18,8(sp)
10108698:	dc400117 	ldw	r17,4(sp)
1010869c:	dc000017 	ldw	r16,0(sp)
101086a0:	dec00604 	addi	sp,sp,24
101086a4:	f800283a 	ret
101086a8:	880d883a 	mov	r6,r17
101086ac:	880b883a 	mov	r5,r17
101086b0:	9809883a 	mov	r4,r19
101086b4:	01083ec0 	call	101083ec <__multiply>
101086b8:	88800015 	stw	r2,0(r17)
101086bc:	10000015 	stw	zero,0(r2)
101086c0:	003fdd06 	br	10108638 <__alt_data_end+0xfffe8638>
101086c4:	1025883a 	mov	r18,r2
101086c8:	003fd706 	br	10108628 <__alt_data_end+0xfffe8628>
101086cc:	10bfffc4 	addi	r2,r2,-1
101086d0:	1085883a 	add	r2,r2,r2
101086d4:	00c40474 	movhi	r3,4113
101086d8:	18c45904 	addi	r3,r3,4452
101086dc:	1085883a 	add	r2,r2,r2
101086e0:	1885883a 	add	r2,r3,r2
101086e4:	11800017 	ldw	r6,0(r2)
101086e8:	000f883a 	mov	r7,zero
101086ec:	01080740 	call	10108074 <__multadd>
101086f0:	1025883a 	mov	r18,r2
101086f4:	003fc706 	br	10108614 <__alt_data_end+0xfffe8614>
101086f8:	05000044 	movi	r20,1
101086fc:	a00b883a 	mov	r5,r20
10108700:	9809883a 	mov	r4,r19
10108704:	0107fa40 	call	10107fa4 <_Balloc>
10108708:	1023883a 	mov	r17,r2
1010870c:	00809c44 	movi	r2,625
10108710:	88800515 	stw	r2,20(r17)
10108714:	8d000415 	stw	r20,16(r17)
10108718:	9c401215 	stw	r17,72(r19)
1010871c:	88000015 	stw	zero,0(r17)
10108720:	003fc606 	br	1010863c <__alt_data_end+0xfffe863c>

10108724 <__lshift>:
10108724:	defff904 	addi	sp,sp,-28
10108728:	dd400515 	stw	r21,20(sp)
1010872c:	dcc00315 	stw	r19,12(sp)
10108730:	302bd17a 	srai	r21,r6,5
10108734:	2cc00417 	ldw	r19,16(r5)
10108738:	28800217 	ldw	r2,8(r5)
1010873c:	dd000415 	stw	r20,16(sp)
10108740:	ace7883a 	add	r19,r21,r19
10108744:	dc800215 	stw	r18,8(sp)
10108748:	dc400115 	stw	r17,4(sp)
1010874c:	dc000015 	stw	r16,0(sp)
10108750:	dfc00615 	stw	ra,24(sp)
10108754:	9c000044 	addi	r16,r19,1
10108758:	2823883a 	mov	r17,r5
1010875c:	3029883a 	mov	r20,r6
10108760:	2025883a 	mov	r18,r4
10108764:	29400117 	ldw	r5,4(r5)
10108768:	1400030e 	bge	r2,r16,10108778 <__lshift+0x54>
1010876c:	1085883a 	add	r2,r2,r2
10108770:	29400044 	addi	r5,r5,1
10108774:	143ffd16 	blt	r2,r16,1010876c <__alt_data_end+0xfffe876c>
10108778:	9009883a 	mov	r4,r18
1010877c:	0107fa40 	call	10107fa4 <_Balloc>
10108780:	10c00504 	addi	r3,r2,20
10108784:	0540070e 	bge	zero,r21,101087a4 <__lshift+0x80>
10108788:	ad6b883a 	add	r21,r21,r21
1010878c:	ad6b883a 	add	r21,r21,r21
10108790:	1809883a 	mov	r4,r3
10108794:	1d47883a 	add	r3,r3,r21
10108798:	20000015 	stw	zero,0(r4)
1010879c:	21000104 	addi	r4,r4,4
101087a0:	193ffd1e 	bne	r3,r4,10108798 <__alt_data_end+0xfffe8798>
101087a4:	8a000417 	ldw	r8,16(r17)
101087a8:	89000504 	addi	r4,r17,20
101087ac:	a18007cc 	andi	r6,r20,31
101087b0:	4211883a 	add	r8,r8,r8
101087b4:	4211883a 	add	r8,r8,r8
101087b8:	2211883a 	add	r8,r4,r8
101087bc:	30002326 	beq	r6,zero,1010884c <__lshift+0x128>
101087c0:	02400804 	movi	r9,32
101087c4:	4993c83a 	sub	r9,r9,r6
101087c8:	000b883a 	mov	r5,zero
101087cc:	21c00017 	ldw	r7,0(r4)
101087d0:	1815883a 	mov	r10,r3
101087d4:	18c00104 	addi	r3,r3,4
101087d8:	398e983a 	sll	r7,r7,r6
101087dc:	21000104 	addi	r4,r4,4
101087e0:	394ab03a 	or	r5,r7,r5
101087e4:	197fff15 	stw	r5,-4(r3)
101087e8:	217fff17 	ldw	r5,-4(r4)
101087ec:	2a4ad83a 	srl	r5,r5,r9
101087f0:	223ff636 	bltu	r4,r8,101087cc <__alt_data_end+0xfffe87cc>
101087f4:	51400115 	stw	r5,4(r10)
101087f8:	28001a1e 	bne	r5,zero,10108864 <__lshift+0x140>
101087fc:	843fffc4 	addi	r16,r16,-1
10108800:	14000415 	stw	r16,16(r2)
10108804:	88000826 	beq	r17,zero,10108828 <__lshift+0x104>
10108808:	89000117 	ldw	r4,4(r17)
1010880c:	90c01317 	ldw	r3,76(r18)
10108810:	2109883a 	add	r4,r4,r4
10108814:	2109883a 	add	r4,r4,r4
10108818:	1907883a 	add	r3,r3,r4
1010881c:	19000017 	ldw	r4,0(r3)
10108820:	89000015 	stw	r4,0(r17)
10108824:	1c400015 	stw	r17,0(r3)
10108828:	dfc00617 	ldw	ra,24(sp)
1010882c:	dd400517 	ldw	r21,20(sp)
10108830:	dd000417 	ldw	r20,16(sp)
10108834:	dcc00317 	ldw	r19,12(sp)
10108838:	dc800217 	ldw	r18,8(sp)
1010883c:	dc400117 	ldw	r17,4(sp)
10108840:	dc000017 	ldw	r16,0(sp)
10108844:	dec00704 	addi	sp,sp,28
10108848:	f800283a 	ret
1010884c:	21400017 	ldw	r5,0(r4)
10108850:	18c00104 	addi	r3,r3,4
10108854:	21000104 	addi	r4,r4,4
10108858:	197fff15 	stw	r5,-4(r3)
1010885c:	223ffb36 	bltu	r4,r8,1010884c <__alt_data_end+0xfffe884c>
10108860:	003fe606 	br	101087fc <__alt_data_end+0xfffe87fc>
10108864:	9c000084 	addi	r16,r19,2
10108868:	003fe406 	br	101087fc <__alt_data_end+0xfffe87fc>

1010886c <__mcmp>:
1010886c:	20800417 	ldw	r2,16(r4)
10108870:	28c00417 	ldw	r3,16(r5)
10108874:	10c5c83a 	sub	r2,r2,r3
10108878:	1000111e 	bne	r2,zero,101088c0 <__mcmp+0x54>
1010887c:	18c7883a 	add	r3,r3,r3
10108880:	18c7883a 	add	r3,r3,r3
10108884:	21000504 	addi	r4,r4,20
10108888:	29400504 	addi	r5,r5,20
1010888c:	20c5883a 	add	r2,r4,r3
10108890:	28cb883a 	add	r5,r5,r3
10108894:	00000106 	br	1010889c <__mcmp+0x30>
10108898:	20800a2e 	bgeu	r4,r2,101088c4 <__mcmp+0x58>
1010889c:	10bfff04 	addi	r2,r2,-4
101088a0:	297fff04 	addi	r5,r5,-4
101088a4:	11800017 	ldw	r6,0(r2)
101088a8:	28c00017 	ldw	r3,0(r5)
101088ac:	30fffa26 	beq	r6,r3,10108898 <__alt_data_end+0xfffe8898>
101088b0:	30c00236 	bltu	r6,r3,101088bc <__mcmp+0x50>
101088b4:	00800044 	movi	r2,1
101088b8:	f800283a 	ret
101088bc:	00bfffc4 	movi	r2,-1
101088c0:	f800283a 	ret
101088c4:	0005883a 	mov	r2,zero
101088c8:	f800283a 	ret

101088cc <__mdiff>:
101088cc:	28c00417 	ldw	r3,16(r5)
101088d0:	30800417 	ldw	r2,16(r6)
101088d4:	defffa04 	addi	sp,sp,-24
101088d8:	dcc00315 	stw	r19,12(sp)
101088dc:	dc800215 	stw	r18,8(sp)
101088e0:	dfc00515 	stw	ra,20(sp)
101088e4:	dd000415 	stw	r20,16(sp)
101088e8:	dc400115 	stw	r17,4(sp)
101088ec:	dc000015 	stw	r16,0(sp)
101088f0:	1887c83a 	sub	r3,r3,r2
101088f4:	2825883a 	mov	r18,r5
101088f8:	3027883a 	mov	r19,r6
101088fc:	1800141e 	bne	r3,zero,10108950 <__mdiff+0x84>
10108900:	1085883a 	add	r2,r2,r2
10108904:	1085883a 	add	r2,r2,r2
10108908:	2a000504 	addi	r8,r5,20
1010890c:	34000504 	addi	r16,r6,20
10108910:	4087883a 	add	r3,r8,r2
10108914:	8085883a 	add	r2,r16,r2
10108918:	00000106 	br	10108920 <__mdiff+0x54>
1010891c:	40c0592e 	bgeu	r8,r3,10108a84 <__mdiff+0x1b8>
10108920:	18ffff04 	addi	r3,r3,-4
10108924:	10bfff04 	addi	r2,r2,-4
10108928:	19c00017 	ldw	r7,0(r3)
1010892c:	11400017 	ldw	r5,0(r2)
10108930:	397ffa26 	beq	r7,r5,1010891c <__alt_data_end+0xfffe891c>
10108934:	3940592e 	bgeu	r7,r5,10108a9c <__mdiff+0x1d0>
10108938:	9005883a 	mov	r2,r18
1010893c:	4023883a 	mov	r17,r8
10108940:	9825883a 	mov	r18,r19
10108944:	05000044 	movi	r20,1
10108948:	1027883a 	mov	r19,r2
1010894c:	00000406 	br	10108960 <__mdiff+0x94>
10108950:	18005616 	blt	r3,zero,10108aac <__mdiff+0x1e0>
10108954:	34400504 	addi	r17,r6,20
10108958:	2c000504 	addi	r16,r5,20
1010895c:	0029883a 	mov	r20,zero
10108960:	91400117 	ldw	r5,4(r18)
10108964:	0107fa40 	call	10107fa4 <_Balloc>
10108968:	92400417 	ldw	r9,16(r18)
1010896c:	9b000417 	ldw	r12,16(r19)
10108970:	12c00504 	addi	r11,r2,20
10108974:	4a51883a 	add	r8,r9,r9
10108978:	6319883a 	add	r12,r12,r12
1010897c:	4211883a 	add	r8,r8,r8
10108980:	6319883a 	add	r12,r12,r12
10108984:	15000315 	stw	r20,12(r2)
10108988:	8211883a 	add	r8,r16,r8
1010898c:	8b19883a 	add	r12,r17,r12
10108990:	0007883a 	mov	r3,zero
10108994:	81400017 	ldw	r5,0(r16)
10108998:	89c00017 	ldw	r7,0(r17)
1010899c:	59800104 	addi	r6,r11,4
101089a0:	293fffcc 	andi	r4,r5,65535
101089a4:	20c7883a 	add	r3,r4,r3
101089a8:	393fffcc 	andi	r4,r7,65535
101089ac:	1909c83a 	sub	r4,r3,r4
101089b0:	280ad43a 	srli	r5,r5,16
101089b4:	380ed43a 	srli	r7,r7,16
101089b8:	2007d43a 	srai	r3,r4,16
101089bc:	213fffcc 	andi	r4,r4,65535
101089c0:	29cbc83a 	sub	r5,r5,r7
101089c4:	28c7883a 	add	r3,r5,r3
101089c8:	180a943a 	slli	r5,r3,16
101089cc:	8c400104 	addi	r17,r17,4
101089d0:	84000104 	addi	r16,r16,4
101089d4:	2908b03a 	or	r4,r5,r4
101089d8:	59000015 	stw	r4,0(r11)
101089dc:	1807d43a 	srai	r3,r3,16
101089e0:	3015883a 	mov	r10,r6
101089e4:	3017883a 	mov	r11,r6
101089e8:	8b3fea36 	bltu	r17,r12,10108994 <__alt_data_end+0xfffe8994>
101089ec:	8200162e 	bgeu	r16,r8,10108a48 <__mdiff+0x17c>
101089f0:	8017883a 	mov	r11,r16
101089f4:	59400017 	ldw	r5,0(r11)
101089f8:	31800104 	addi	r6,r6,4
101089fc:	5ac00104 	addi	r11,r11,4
10108a00:	293fffcc 	andi	r4,r5,65535
10108a04:	20c7883a 	add	r3,r4,r3
10108a08:	280ed43a 	srli	r7,r5,16
10108a0c:	180bd43a 	srai	r5,r3,16
10108a10:	193fffcc 	andi	r4,r3,65535
10108a14:	3947883a 	add	r3,r7,r5
10108a18:	180a943a 	slli	r5,r3,16
10108a1c:	1807d43a 	srai	r3,r3,16
10108a20:	2908b03a 	or	r4,r5,r4
10108a24:	313fff15 	stw	r4,-4(r6)
10108a28:	5a3ff236 	bltu	r11,r8,101089f4 <__alt_data_end+0xfffe89f4>
10108a2c:	0406303a 	nor	r3,zero,r16
10108a30:	1a07883a 	add	r3,r3,r8
10108a34:	1806d0ba 	srli	r3,r3,2
10108a38:	18c00044 	addi	r3,r3,1
10108a3c:	18c7883a 	add	r3,r3,r3
10108a40:	18c7883a 	add	r3,r3,r3
10108a44:	50d5883a 	add	r10,r10,r3
10108a48:	50ffff04 	addi	r3,r10,-4
10108a4c:	2000041e 	bne	r4,zero,10108a60 <__mdiff+0x194>
10108a50:	18ffff04 	addi	r3,r3,-4
10108a54:	19000017 	ldw	r4,0(r3)
10108a58:	4a7fffc4 	addi	r9,r9,-1
10108a5c:	203ffc26 	beq	r4,zero,10108a50 <__alt_data_end+0xfffe8a50>
10108a60:	12400415 	stw	r9,16(r2)
10108a64:	dfc00517 	ldw	ra,20(sp)
10108a68:	dd000417 	ldw	r20,16(sp)
10108a6c:	dcc00317 	ldw	r19,12(sp)
10108a70:	dc800217 	ldw	r18,8(sp)
10108a74:	dc400117 	ldw	r17,4(sp)
10108a78:	dc000017 	ldw	r16,0(sp)
10108a7c:	dec00604 	addi	sp,sp,24
10108a80:	f800283a 	ret
10108a84:	000b883a 	mov	r5,zero
10108a88:	0107fa40 	call	10107fa4 <_Balloc>
10108a8c:	00c00044 	movi	r3,1
10108a90:	10c00415 	stw	r3,16(r2)
10108a94:	10000515 	stw	zero,20(r2)
10108a98:	003ff206 	br	10108a64 <__alt_data_end+0xfffe8a64>
10108a9c:	8023883a 	mov	r17,r16
10108aa0:	0029883a 	mov	r20,zero
10108aa4:	4021883a 	mov	r16,r8
10108aa8:	003fad06 	br	10108960 <__alt_data_end+0xfffe8960>
10108aac:	9005883a 	mov	r2,r18
10108ab0:	94400504 	addi	r17,r18,20
10108ab4:	9c000504 	addi	r16,r19,20
10108ab8:	9825883a 	mov	r18,r19
10108abc:	05000044 	movi	r20,1
10108ac0:	1027883a 	mov	r19,r2
10108ac4:	003fa606 	br	10108960 <__alt_data_end+0xfffe8960>

10108ac8 <__ulp>:
10108ac8:	295ffc2c 	andhi	r5,r5,32752
10108acc:	00bf3034 	movhi	r2,64704
10108ad0:	2887883a 	add	r3,r5,r2
10108ad4:	00c0020e 	bge	zero,r3,10108ae0 <__ulp+0x18>
10108ad8:	0005883a 	mov	r2,zero
10108adc:	f800283a 	ret
10108ae0:	00c7c83a 	sub	r3,zero,r3
10108ae4:	1807d53a 	srai	r3,r3,20
10108ae8:	008004c4 	movi	r2,19
10108aec:	10c00b0e 	bge	r2,r3,10108b1c <__ulp+0x54>
10108af0:	18bffb04 	addi	r2,r3,-20
10108af4:	01000784 	movi	r4,30
10108af8:	0007883a 	mov	r3,zero
10108afc:	20800516 	blt	r4,r2,10108b14 <__ulp+0x4c>
10108b00:	010007c4 	movi	r4,31
10108b04:	2089c83a 	sub	r4,r4,r2
10108b08:	00800044 	movi	r2,1
10108b0c:	1104983a 	sll	r2,r2,r4
10108b10:	f800283a 	ret
10108b14:	00800044 	movi	r2,1
10108b18:	f800283a 	ret
10108b1c:	01400234 	movhi	r5,8
10108b20:	28c7d83a 	sra	r3,r5,r3
10108b24:	0005883a 	mov	r2,zero
10108b28:	f800283a 	ret

10108b2c <__b2d>:
10108b2c:	defffa04 	addi	sp,sp,-24
10108b30:	dc000015 	stw	r16,0(sp)
10108b34:	24000417 	ldw	r16,16(r4)
10108b38:	dc400115 	stw	r17,4(sp)
10108b3c:	24400504 	addi	r17,r4,20
10108b40:	8421883a 	add	r16,r16,r16
10108b44:	8421883a 	add	r16,r16,r16
10108b48:	8c21883a 	add	r16,r17,r16
10108b4c:	dc800215 	stw	r18,8(sp)
10108b50:	84bfff17 	ldw	r18,-4(r16)
10108b54:	dd000415 	stw	r20,16(sp)
10108b58:	dcc00315 	stw	r19,12(sp)
10108b5c:	9009883a 	mov	r4,r18
10108b60:	2829883a 	mov	r20,r5
10108b64:	dfc00515 	stw	ra,20(sp)
10108b68:	01082980 	call	10108298 <__hi0bits>
10108b6c:	00c00804 	movi	r3,32
10108b70:	1889c83a 	sub	r4,r3,r2
10108b74:	a1000015 	stw	r4,0(r20)
10108b78:	01000284 	movi	r4,10
10108b7c:	84ffff04 	addi	r19,r16,-4
10108b80:	20801216 	blt	r4,r2,10108bcc <__b2d+0xa0>
10108b84:	018002c4 	movi	r6,11
10108b88:	308dc83a 	sub	r6,r6,r2
10108b8c:	9186d83a 	srl	r3,r18,r6
10108b90:	18cffc34 	orhi	r3,r3,16368
10108b94:	8cc0212e 	bgeu	r17,r19,10108c1c <__b2d+0xf0>
10108b98:	813ffe17 	ldw	r4,-8(r16)
10108b9c:	218cd83a 	srl	r6,r4,r6
10108ba0:	10800544 	addi	r2,r2,21
10108ba4:	9084983a 	sll	r2,r18,r2
10108ba8:	1184b03a 	or	r2,r2,r6
10108bac:	dfc00517 	ldw	ra,20(sp)
10108bb0:	dd000417 	ldw	r20,16(sp)
10108bb4:	dcc00317 	ldw	r19,12(sp)
10108bb8:	dc800217 	ldw	r18,8(sp)
10108bbc:	dc400117 	ldw	r17,4(sp)
10108bc0:	dc000017 	ldw	r16,0(sp)
10108bc4:	dec00604 	addi	sp,sp,24
10108bc8:	f800283a 	ret
10108bcc:	8cc00f2e 	bgeu	r17,r19,10108c0c <__b2d+0xe0>
10108bd0:	117ffd44 	addi	r5,r2,-11
10108bd4:	80bffe17 	ldw	r2,-8(r16)
10108bd8:	28000e26 	beq	r5,zero,10108c14 <__b2d+0xe8>
10108bdc:	1949c83a 	sub	r4,r3,r5
10108be0:	9164983a 	sll	r18,r18,r5
10108be4:	1106d83a 	srl	r3,r2,r4
10108be8:	81bffe04 	addi	r6,r16,-8
10108bec:	948ffc34 	orhi	r18,r18,16368
10108bf0:	90c6b03a 	or	r3,r18,r3
10108bf4:	89800e2e 	bgeu	r17,r6,10108c30 <__b2d+0x104>
10108bf8:	81bffd17 	ldw	r6,-12(r16)
10108bfc:	1144983a 	sll	r2,r2,r5
10108c00:	310ad83a 	srl	r5,r6,r4
10108c04:	2884b03a 	or	r2,r5,r2
10108c08:	003fe806 	br	10108bac <__alt_data_end+0xfffe8bac>
10108c0c:	10bffd44 	addi	r2,r2,-11
10108c10:	1000041e 	bne	r2,zero,10108c24 <__b2d+0xf8>
10108c14:	90cffc34 	orhi	r3,r18,16368
10108c18:	003fe406 	br	10108bac <__alt_data_end+0xfffe8bac>
10108c1c:	000d883a 	mov	r6,zero
10108c20:	003fdf06 	br	10108ba0 <__alt_data_end+0xfffe8ba0>
10108c24:	90a4983a 	sll	r18,r18,r2
10108c28:	0005883a 	mov	r2,zero
10108c2c:	003ff906 	br	10108c14 <__alt_data_end+0xfffe8c14>
10108c30:	1144983a 	sll	r2,r2,r5
10108c34:	003fdd06 	br	10108bac <__alt_data_end+0xfffe8bac>

10108c38 <__d2b>:
10108c38:	defff804 	addi	sp,sp,-32
10108c3c:	dc000215 	stw	r16,8(sp)
10108c40:	3021883a 	mov	r16,r6
10108c44:	dc400315 	stw	r17,12(sp)
10108c48:	8022907a 	slli	r17,r16,1
10108c4c:	dd000615 	stw	r20,24(sp)
10108c50:	2829883a 	mov	r20,r5
10108c54:	01400044 	movi	r5,1
10108c58:	dcc00515 	stw	r19,20(sp)
10108c5c:	dc800415 	stw	r18,16(sp)
10108c60:	dfc00715 	stw	ra,28(sp)
10108c64:	3825883a 	mov	r18,r7
10108c68:	8822d57a 	srli	r17,r17,21
10108c6c:	0107fa40 	call	10107fa4 <_Balloc>
10108c70:	1027883a 	mov	r19,r2
10108c74:	00800434 	movhi	r2,16
10108c78:	10bfffc4 	addi	r2,r2,-1
10108c7c:	808c703a 	and	r6,r16,r2
10108c80:	88000126 	beq	r17,zero,10108c88 <__d2b+0x50>
10108c84:	31800434 	orhi	r6,r6,16
10108c88:	d9800015 	stw	r6,0(sp)
10108c8c:	a0002426 	beq	r20,zero,10108d20 <__d2b+0xe8>
10108c90:	d9000104 	addi	r4,sp,4
10108c94:	dd000115 	stw	r20,4(sp)
10108c98:	01083000 	call	10108300 <__lo0bits>
10108c9c:	d8c00017 	ldw	r3,0(sp)
10108ca0:	10002f1e 	bne	r2,zero,10108d60 <__d2b+0x128>
10108ca4:	d9000117 	ldw	r4,4(sp)
10108ca8:	99000515 	stw	r4,20(r19)
10108cac:	1821003a 	cmpeq	r16,r3,zero
10108cb0:	01000084 	movi	r4,2
10108cb4:	2421c83a 	sub	r16,r4,r16
10108cb8:	98c00615 	stw	r3,24(r19)
10108cbc:	9c000415 	stw	r16,16(r19)
10108cc0:	88001f1e 	bne	r17,zero,10108d40 <__d2b+0x108>
10108cc4:	10bef384 	addi	r2,r2,-1074
10108cc8:	90800015 	stw	r2,0(r18)
10108ccc:	00900034 	movhi	r2,16384
10108cd0:	10bfffc4 	addi	r2,r2,-1
10108cd4:	8085883a 	add	r2,r16,r2
10108cd8:	1085883a 	add	r2,r2,r2
10108cdc:	1085883a 	add	r2,r2,r2
10108ce0:	9885883a 	add	r2,r19,r2
10108ce4:	11000517 	ldw	r4,20(r2)
10108ce8:	8020917a 	slli	r16,r16,5
10108cec:	01082980 	call	10108298 <__hi0bits>
10108cf0:	d8c00817 	ldw	r3,32(sp)
10108cf4:	8085c83a 	sub	r2,r16,r2
10108cf8:	18800015 	stw	r2,0(r3)
10108cfc:	9805883a 	mov	r2,r19
10108d00:	dfc00717 	ldw	ra,28(sp)
10108d04:	dd000617 	ldw	r20,24(sp)
10108d08:	dcc00517 	ldw	r19,20(sp)
10108d0c:	dc800417 	ldw	r18,16(sp)
10108d10:	dc400317 	ldw	r17,12(sp)
10108d14:	dc000217 	ldw	r16,8(sp)
10108d18:	dec00804 	addi	sp,sp,32
10108d1c:	f800283a 	ret
10108d20:	d809883a 	mov	r4,sp
10108d24:	01083000 	call	10108300 <__lo0bits>
10108d28:	d8c00017 	ldw	r3,0(sp)
10108d2c:	04000044 	movi	r16,1
10108d30:	9c000415 	stw	r16,16(r19)
10108d34:	98c00515 	stw	r3,20(r19)
10108d38:	10800804 	addi	r2,r2,32
10108d3c:	883fe126 	beq	r17,zero,10108cc4 <__alt_data_end+0xfffe8cc4>
10108d40:	00c00d44 	movi	r3,53
10108d44:	8c7ef344 	addi	r17,r17,-1075
10108d48:	88a3883a 	add	r17,r17,r2
10108d4c:	1885c83a 	sub	r2,r3,r2
10108d50:	d8c00817 	ldw	r3,32(sp)
10108d54:	94400015 	stw	r17,0(r18)
10108d58:	18800015 	stw	r2,0(r3)
10108d5c:	003fe706 	br	10108cfc <__alt_data_end+0xfffe8cfc>
10108d60:	01000804 	movi	r4,32
10108d64:	2089c83a 	sub	r4,r4,r2
10108d68:	1908983a 	sll	r4,r3,r4
10108d6c:	d9400117 	ldw	r5,4(sp)
10108d70:	1886d83a 	srl	r3,r3,r2
10108d74:	2148b03a 	or	r4,r4,r5
10108d78:	99000515 	stw	r4,20(r19)
10108d7c:	d8c00015 	stw	r3,0(sp)
10108d80:	003fca06 	br	10108cac <__alt_data_end+0xfffe8cac>

10108d84 <__ratio>:
10108d84:	defff904 	addi	sp,sp,-28
10108d88:	dc400315 	stw	r17,12(sp)
10108d8c:	2823883a 	mov	r17,r5
10108d90:	d9400104 	addi	r5,sp,4
10108d94:	dfc00615 	stw	ra,24(sp)
10108d98:	dcc00515 	stw	r19,20(sp)
10108d9c:	dc800415 	stw	r18,16(sp)
10108da0:	2027883a 	mov	r19,r4
10108da4:	dc000215 	stw	r16,8(sp)
10108da8:	0108b2c0 	call	10108b2c <__b2d>
10108dac:	d80b883a 	mov	r5,sp
10108db0:	8809883a 	mov	r4,r17
10108db4:	1025883a 	mov	r18,r2
10108db8:	1821883a 	mov	r16,r3
10108dbc:	0108b2c0 	call	10108b2c <__b2d>
10108dc0:	8a000417 	ldw	r8,16(r17)
10108dc4:	99000417 	ldw	r4,16(r19)
10108dc8:	d9400117 	ldw	r5,4(sp)
10108dcc:	2209c83a 	sub	r4,r4,r8
10108dd0:	2010917a 	slli	r8,r4,5
10108dd4:	d9000017 	ldw	r4,0(sp)
10108dd8:	2909c83a 	sub	r4,r5,r4
10108ddc:	4109883a 	add	r4,r8,r4
10108de0:	01000e0e 	bge	zero,r4,10108e1c <__ratio+0x98>
10108de4:	2008953a 	slli	r4,r4,20
10108de8:	2421883a 	add	r16,r4,r16
10108dec:	100d883a 	mov	r6,r2
10108df0:	180f883a 	mov	r7,r3
10108df4:	9009883a 	mov	r4,r18
10108df8:	800b883a 	mov	r5,r16
10108dfc:	010c6640 	call	1010c664 <__divdf3>
10108e00:	dfc00617 	ldw	ra,24(sp)
10108e04:	dcc00517 	ldw	r19,20(sp)
10108e08:	dc800417 	ldw	r18,16(sp)
10108e0c:	dc400317 	ldw	r17,12(sp)
10108e10:	dc000217 	ldw	r16,8(sp)
10108e14:	dec00704 	addi	sp,sp,28
10108e18:	f800283a 	ret
10108e1c:	2008953a 	slli	r4,r4,20
10108e20:	1907c83a 	sub	r3,r3,r4
10108e24:	003ff106 	br	10108dec <__alt_data_end+0xfffe8dec>

10108e28 <_mprec_log10>:
10108e28:	defffe04 	addi	sp,sp,-8
10108e2c:	dc000015 	stw	r16,0(sp)
10108e30:	dfc00115 	stw	ra,4(sp)
10108e34:	008005c4 	movi	r2,23
10108e38:	2021883a 	mov	r16,r4
10108e3c:	11000d0e 	bge	r2,r4,10108e74 <_mprec_log10+0x4c>
10108e40:	0005883a 	mov	r2,zero
10108e44:	00cffc34 	movhi	r3,16368
10108e48:	843fffc4 	addi	r16,r16,-1
10108e4c:	000d883a 	mov	r6,zero
10108e50:	01d00934 	movhi	r7,16420
10108e54:	1009883a 	mov	r4,r2
10108e58:	180b883a 	mov	r5,r3
10108e5c:	010d1a40 	call	1010d1a4 <__muldf3>
10108e60:	803ff91e 	bne	r16,zero,10108e48 <__alt_data_end+0xfffe8e48>
10108e64:	dfc00117 	ldw	ra,4(sp)
10108e68:	dc000017 	ldw	r16,0(sp)
10108e6c:	dec00204 	addi	sp,sp,8
10108e70:	f800283a 	ret
10108e74:	202090fa 	slli	r16,r4,3
10108e78:	00840474 	movhi	r2,4113
10108e7c:	10847004 	addi	r2,r2,4544
10108e80:	1421883a 	add	r16,r2,r16
10108e84:	80800017 	ldw	r2,0(r16)
10108e88:	80c00117 	ldw	r3,4(r16)
10108e8c:	dfc00117 	ldw	ra,4(sp)
10108e90:	dc000017 	ldw	r16,0(sp)
10108e94:	dec00204 	addi	sp,sp,8
10108e98:	f800283a 	ret

10108e9c <__copybits>:
10108e9c:	297fffc4 	addi	r5,r5,-1
10108ea0:	280fd17a 	srai	r7,r5,5
10108ea4:	30c00417 	ldw	r3,16(r6)
10108ea8:	30800504 	addi	r2,r6,20
10108eac:	39c00044 	addi	r7,r7,1
10108eb0:	18c7883a 	add	r3,r3,r3
10108eb4:	39cf883a 	add	r7,r7,r7
10108eb8:	18c7883a 	add	r3,r3,r3
10108ebc:	39cf883a 	add	r7,r7,r7
10108ec0:	10c7883a 	add	r3,r2,r3
10108ec4:	21cf883a 	add	r7,r4,r7
10108ec8:	10c00d2e 	bgeu	r2,r3,10108f00 <__copybits+0x64>
10108ecc:	200b883a 	mov	r5,r4
10108ed0:	12000017 	ldw	r8,0(r2)
10108ed4:	29400104 	addi	r5,r5,4
10108ed8:	10800104 	addi	r2,r2,4
10108edc:	2a3fff15 	stw	r8,-4(r5)
10108ee0:	10fffb36 	bltu	r2,r3,10108ed0 <__alt_data_end+0xfffe8ed0>
10108ee4:	1985c83a 	sub	r2,r3,r6
10108ee8:	10bffac4 	addi	r2,r2,-21
10108eec:	1004d0ba 	srli	r2,r2,2
10108ef0:	10800044 	addi	r2,r2,1
10108ef4:	1085883a 	add	r2,r2,r2
10108ef8:	1085883a 	add	r2,r2,r2
10108efc:	2089883a 	add	r4,r4,r2
10108f00:	21c0032e 	bgeu	r4,r7,10108f10 <__copybits+0x74>
10108f04:	20000015 	stw	zero,0(r4)
10108f08:	21000104 	addi	r4,r4,4
10108f0c:	21fffd36 	bltu	r4,r7,10108f04 <__alt_data_end+0xfffe8f04>
10108f10:	f800283a 	ret

10108f14 <__any_on>:
10108f14:	20c00417 	ldw	r3,16(r4)
10108f18:	2805d17a 	srai	r2,r5,5
10108f1c:	21000504 	addi	r4,r4,20
10108f20:	18800d0e 	bge	r3,r2,10108f58 <__any_on+0x44>
10108f24:	18c7883a 	add	r3,r3,r3
10108f28:	18c7883a 	add	r3,r3,r3
10108f2c:	20c7883a 	add	r3,r4,r3
10108f30:	20c0192e 	bgeu	r4,r3,10108f98 <__any_on+0x84>
10108f34:	18bfff17 	ldw	r2,-4(r3)
10108f38:	18ffff04 	addi	r3,r3,-4
10108f3c:	1000041e 	bne	r2,zero,10108f50 <__any_on+0x3c>
10108f40:	20c0142e 	bgeu	r4,r3,10108f94 <__any_on+0x80>
10108f44:	18ffff04 	addi	r3,r3,-4
10108f48:	19400017 	ldw	r5,0(r3)
10108f4c:	283ffc26 	beq	r5,zero,10108f40 <__alt_data_end+0xfffe8f40>
10108f50:	00800044 	movi	r2,1
10108f54:	f800283a 	ret
10108f58:	10c00a0e 	bge	r2,r3,10108f84 <__any_on+0x70>
10108f5c:	1085883a 	add	r2,r2,r2
10108f60:	1085883a 	add	r2,r2,r2
10108f64:	294007cc 	andi	r5,r5,31
10108f68:	2087883a 	add	r3,r4,r2
10108f6c:	283ff026 	beq	r5,zero,10108f30 <__alt_data_end+0xfffe8f30>
10108f70:	19800017 	ldw	r6,0(r3)
10108f74:	3144d83a 	srl	r2,r6,r5
10108f78:	114a983a 	sll	r5,r2,r5
10108f7c:	317ff41e 	bne	r6,r5,10108f50 <__alt_data_end+0xfffe8f50>
10108f80:	003feb06 	br	10108f30 <__alt_data_end+0xfffe8f30>
10108f84:	1085883a 	add	r2,r2,r2
10108f88:	1085883a 	add	r2,r2,r2
10108f8c:	2087883a 	add	r3,r4,r2
10108f90:	003fe706 	br	10108f30 <__alt_data_end+0xfffe8f30>
10108f94:	f800283a 	ret
10108f98:	0005883a 	mov	r2,zero
10108f9c:	f800283a 	ret

10108fa0 <_read_r>:
10108fa0:	defffd04 	addi	sp,sp,-12
10108fa4:	2805883a 	mov	r2,r5
10108fa8:	dc000015 	stw	r16,0(sp)
10108fac:	04040474 	movhi	r16,4113
10108fb0:	dc400115 	stw	r17,4(sp)
10108fb4:	300b883a 	mov	r5,r6
10108fb8:	8412a804 	addi	r16,r16,19104
10108fbc:	2023883a 	mov	r17,r4
10108fc0:	380d883a 	mov	r6,r7
10108fc4:	1009883a 	mov	r4,r2
10108fc8:	dfc00215 	stw	ra,8(sp)
10108fcc:	80000015 	stw	zero,0(r16)
10108fd0:	010ec740 	call	1010ec74 <read>
10108fd4:	00ffffc4 	movi	r3,-1
10108fd8:	10c00526 	beq	r2,r3,10108ff0 <_read_r+0x50>
10108fdc:	dfc00217 	ldw	ra,8(sp)
10108fe0:	dc400117 	ldw	r17,4(sp)
10108fe4:	dc000017 	ldw	r16,0(sp)
10108fe8:	dec00304 	addi	sp,sp,12
10108fec:	f800283a 	ret
10108ff0:	80c00017 	ldw	r3,0(r16)
10108ff4:	183ff926 	beq	r3,zero,10108fdc <__alt_data_end+0xfffe8fdc>
10108ff8:	88c00015 	stw	r3,0(r17)
10108ffc:	003ff706 	br	10108fdc <__alt_data_end+0xfffe8fdc>

10109000 <_realloc_r>:
10109000:	defff604 	addi	sp,sp,-40
10109004:	dc800215 	stw	r18,8(sp)
10109008:	dfc00915 	stw	ra,36(sp)
1010900c:	df000815 	stw	fp,32(sp)
10109010:	ddc00715 	stw	r23,28(sp)
10109014:	dd800615 	stw	r22,24(sp)
10109018:	dd400515 	stw	r21,20(sp)
1010901c:	dd000415 	stw	r20,16(sp)
10109020:	dcc00315 	stw	r19,12(sp)
10109024:	dc400115 	stw	r17,4(sp)
10109028:	dc000015 	stw	r16,0(sp)
1010902c:	3025883a 	mov	r18,r6
10109030:	2800b726 	beq	r5,zero,10109310 <_realloc_r+0x310>
10109034:	282b883a 	mov	r21,r5
10109038:	2029883a 	mov	r20,r4
1010903c:	010e99c0 	call	1010e99c <__malloc_lock>
10109040:	a8bfff17 	ldw	r2,-4(r21)
10109044:	043fff04 	movi	r16,-4
10109048:	90c002c4 	addi	r3,r18,11
1010904c:	01000584 	movi	r4,22
10109050:	acfffe04 	addi	r19,r21,-8
10109054:	1420703a 	and	r16,r2,r16
10109058:	20c0332e 	bgeu	r4,r3,10109128 <_realloc_r+0x128>
1010905c:	047ffe04 	movi	r17,-8
10109060:	1c62703a 	and	r17,r3,r17
10109064:	8807883a 	mov	r3,r17
10109068:	88005816 	blt	r17,zero,101091cc <_realloc_r+0x1cc>
1010906c:	8c805736 	bltu	r17,r18,101091cc <_realloc_r+0x1cc>
10109070:	80c0300e 	bge	r16,r3,10109134 <_realloc_r+0x134>
10109074:	07040474 	movhi	fp,4113
10109078:	e7060304 	addi	fp,fp,6156
1010907c:	e1c00217 	ldw	r7,8(fp)
10109080:	9c09883a 	add	r4,r19,r16
10109084:	22000117 	ldw	r8,4(r4)
10109088:	21c06326 	beq	r4,r7,10109218 <_realloc_r+0x218>
1010908c:	017fff84 	movi	r5,-2
10109090:	414a703a 	and	r5,r8,r5
10109094:	214b883a 	add	r5,r4,r5
10109098:	29800117 	ldw	r6,4(r5)
1010909c:	3180004c 	andi	r6,r6,1
101090a0:	30003f26 	beq	r6,zero,101091a0 <_realloc_r+0x1a0>
101090a4:	1080004c 	andi	r2,r2,1
101090a8:	10008326 	beq	r2,zero,101092b8 <_realloc_r+0x2b8>
101090ac:	900b883a 	mov	r5,r18
101090b0:	a009883a 	mov	r4,r20
101090b4:	01028500 	call	10102850 <_malloc_r>
101090b8:	1025883a 	mov	r18,r2
101090bc:	10011e26 	beq	r2,zero,10109538 <_realloc_r+0x538>
101090c0:	a93fff17 	ldw	r4,-4(r21)
101090c4:	10fffe04 	addi	r3,r2,-8
101090c8:	00bfff84 	movi	r2,-2
101090cc:	2084703a 	and	r2,r4,r2
101090d0:	9885883a 	add	r2,r19,r2
101090d4:	1880ee26 	beq	r3,r2,10109490 <_realloc_r+0x490>
101090d8:	81bfff04 	addi	r6,r16,-4
101090dc:	00800904 	movi	r2,36
101090e0:	1180b836 	bltu	r2,r6,101093c4 <_realloc_r+0x3c4>
101090e4:	00c004c4 	movi	r3,19
101090e8:	19809636 	bltu	r3,r6,10109344 <_realloc_r+0x344>
101090ec:	9005883a 	mov	r2,r18
101090f0:	a807883a 	mov	r3,r21
101090f4:	19000017 	ldw	r4,0(r3)
101090f8:	11000015 	stw	r4,0(r2)
101090fc:	19000117 	ldw	r4,4(r3)
10109100:	11000115 	stw	r4,4(r2)
10109104:	18c00217 	ldw	r3,8(r3)
10109108:	10c00215 	stw	r3,8(r2)
1010910c:	a80b883a 	mov	r5,r21
10109110:	a009883a 	mov	r4,r20
10109114:	0101d200 	call	10101d20 <_free_r>
10109118:	a009883a 	mov	r4,r20
1010911c:	010e9c00 	call	1010e9c0 <__malloc_unlock>
10109120:	9005883a 	mov	r2,r18
10109124:	00001206 	br	10109170 <_realloc_r+0x170>
10109128:	00c00404 	movi	r3,16
1010912c:	1823883a 	mov	r17,r3
10109130:	003fce06 	br	1010906c <__alt_data_end+0xfffe906c>
10109134:	a825883a 	mov	r18,r21
10109138:	8445c83a 	sub	r2,r16,r17
1010913c:	00c003c4 	movi	r3,15
10109140:	18802636 	bltu	r3,r2,101091dc <_realloc_r+0x1dc>
10109144:	99800117 	ldw	r6,4(r19)
10109148:	9c07883a 	add	r3,r19,r16
1010914c:	3180004c 	andi	r6,r6,1
10109150:	3420b03a 	or	r16,r6,r16
10109154:	9c000115 	stw	r16,4(r19)
10109158:	18800117 	ldw	r2,4(r3)
1010915c:	10800054 	ori	r2,r2,1
10109160:	18800115 	stw	r2,4(r3)
10109164:	a009883a 	mov	r4,r20
10109168:	010e9c00 	call	1010e9c0 <__malloc_unlock>
1010916c:	9005883a 	mov	r2,r18
10109170:	dfc00917 	ldw	ra,36(sp)
10109174:	df000817 	ldw	fp,32(sp)
10109178:	ddc00717 	ldw	r23,28(sp)
1010917c:	dd800617 	ldw	r22,24(sp)
10109180:	dd400517 	ldw	r21,20(sp)
10109184:	dd000417 	ldw	r20,16(sp)
10109188:	dcc00317 	ldw	r19,12(sp)
1010918c:	dc800217 	ldw	r18,8(sp)
10109190:	dc400117 	ldw	r17,4(sp)
10109194:	dc000017 	ldw	r16,0(sp)
10109198:	dec00a04 	addi	sp,sp,40
1010919c:	f800283a 	ret
101091a0:	017fff04 	movi	r5,-4
101091a4:	414a703a 	and	r5,r8,r5
101091a8:	814d883a 	add	r6,r16,r5
101091ac:	30c01f16 	blt	r6,r3,1010922c <_realloc_r+0x22c>
101091b0:	20800317 	ldw	r2,12(r4)
101091b4:	20c00217 	ldw	r3,8(r4)
101091b8:	a825883a 	mov	r18,r21
101091bc:	3021883a 	mov	r16,r6
101091c0:	18800315 	stw	r2,12(r3)
101091c4:	10c00215 	stw	r3,8(r2)
101091c8:	003fdb06 	br	10109138 <__alt_data_end+0xfffe9138>
101091cc:	00800304 	movi	r2,12
101091d0:	a0800015 	stw	r2,0(r20)
101091d4:	0005883a 	mov	r2,zero
101091d8:	003fe506 	br	10109170 <__alt_data_end+0xfffe9170>
101091dc:	98c00117 	ldw	r3,4(r19)
101091e0:	9c4b883a 	add	r5,r19,r17
101091e4:	11000054 	ori	r4,r2,1
101091e8:	18c0004c 	andi	r3,r3,1
101091ec:	1c62b03a 	or	r17,r3,r17
101091f0:	9c400115 	stw	r17,4(r19)
101091f4:	29000115 	stw	r4,4(r5)
101091f8:	2885883a 	add	r2,r5,r2
101091fc:	10c00117 	ldw	r3,4(r2)
10109200:	29400204 	addi	r5,r5,8
10109204:	a009883a 	mov	r4,r20
10109208:	18c00054 	ori	r3,r3,1
1010920c:	10c00115 	stw	r3,4(r2)
10109210:	0101d200 	call	10101d20 <_free_r>
10109214:	003fd306 	br	10109164 <__alt_data_end+0xfffe9164>
10109218:	017fff04 	movi	r5,-4
1010921c:	414a703a 	and	r5,r8,r5
10109220:	89800404 	addi	r6,r17,16
10109224:	8151883a 	add	r8,r16,r5
10109228:	4180590e 	bge	r8,r6,10109390 <_realloc_r+0x390>
1010922c:	1080004c 	andi	r2,r2,1
10109230:	103f9e1e 	bne	r2,zero,101090ac <__alt_data_end+0xfffe90ac>
10109234:	adbffe17 	ldw	r22,-8(r21)
10109238:	00bfff04 	movi	r2,-4
1010923c:	9dadc83a 	sub	r22,r19,r22
10109240:	b1800117 	ldw	r6,4(r22)
10109244:	3084703a 	and	r2,r6,r2
10109248:	20002026 	beq	r4,zero,101092cc <_realloc_r+0x2cc>
1010924c:	80af883a 	add	r23,r16,r2
10109250:	b96f883a 	add	r23,r23,r5
10109254:	21c05f26 	beq	r4,r7,101093d4 <_realloc_r+0x3d4>
10109258:	b8c01c16 	blt	r23,r3,101092cc <_realloc_r+0x2cc>
1010925c:	20800317 	ldw	r2,12(r4)
10109260:	20c00217 	ldw	r3,8(r4)
10109264:	81bfff04 	addi	r6,r16,-4
10109268:	01000904 	movi	r4,36
1010926c:	18800315 	stw	r2,12(r3)
10109270:	10c00215 	stw	r3,8(r2)
10109274:	b0c00217 	ldw	r3,8(r22)
10109278:	b0800317 	ldw	r2,12(r22)
1010927c:	b4800204 	addi	r18,r22,8
10109280:	18800315 	stw	r2,12(r3)
10109284:	10c00215 	stw	r3,8(r2)
10109288:	21801b36 	bltu	r4,r6,101092f8 <_realloc_r+0x2f8>
1010928c:	008004c4 	movi	r2,19
10109290:	1180352e 	bgeu	r2,r6,10109368 <_realloc_r+0x368>
10109294:	a8800017 	ldw	r2,0(r21)
10109298:	b0800215 	stw	r2,8(r22)
1010929c:	a8800117 	ldw	r2,4(r21)
101092a0:	b0800315 	stw	r2,12(r22)
101092a4:	008006c4 	movi	r2,27
101092a8:	11807f36 	bltu	r2,r6,101094a8 <_realloc_r+0x4a8>
101092ac:	b0800404 	addi	r2,r22,16
101092b0:	ad400204 	addi	r21,r21,8
101092b4:	00002d06 	br	1010936c <_realloc_r+0x36c>
101092b8:	adbffe17 	ldw	r22,-8(r21)
101092bc:	00bfff04 	movi	r2,-4
101092c0:	9dadc83a 	sub	r22,r19,r22
101092c4:	b1000117 	ldw	r4,4(r22)
101092c8:	2084703a 	and	r2,r4,r2
101092cc:	b03f7726 	beq	r22,zero,101090ac <__alt_data_end+0xfffe90ac>
101092d0:	80af883a 	add	r23,r16,r2
101092d4:	b8ff7516 	blt	r23,r3,101090ac <__alt_data_end+0xfffe90ac>
101092d8:	b0800317 	ldw	r2,12(r22)
101092dc:	b0c00217 	ldw	r3,8(r22)
101092e0:	81bfff04 	addi	r6,r16,-4
101092e4:	01000904 	movi	r4,36
101092e8:	18800315 	stw	r2,12(r3)
101092ec:	10c00215 	stw	r3,8(r2)
101092f0:	b4800204 	addi	r18,r22,8
101092f4:	21bfe52e 	bgeu	r4,r6,1010928c <__alt_data_end+0xfffe928c>
101092f8:	a80b883a 	mov	r5,r21
101092fc:	9009883a 	mov	r4,r18
10109300:	0107e480 	call	10107e48 <memmove>
10109304:	b821883a 	mov	r16,r23
10109308:	b027883a 	mov	r19,r22
1010930c:	003f8a06 	br	10109138 <__alt_data_end+0xfffe9138>
10109310:	300b883a 	mov	r5,r6
10109314:	dfc00917 	ldw	ra,36(sp)
10109318:	df000817 	ldw	fp,32(sp)
1010931c:	ddc00717 	ldw	r23,28(sp)
10109320:	dd800617 	ldw	r22,24(sp)
10109324:	dd400517 	ldw	r21,20(sp)
10109328:	dd000417 	ldw	r20,16(sp)
1010932c:	dcc00317 	ldw	r19,12(sp)
10109330:	dc800217 	ldw	r18,8(sp)
10109334:	dc400117 	ldw	r17,4(sp)
10109338:	dc000017 	ldw	r16,0(sp)
1010933c:	dec00a04 	addi	sp,sp,40
10109340:	01028501 	jmpi	10102850 <_malloc_r>
10109344:	a8c00017 	ldw	r3,0(r21)
10109348:	90c00015 	stw	r3,0(r18)
1010934c:	a8c00117 	ldw	r3,4(r21)
10109350:	90c00115 	stw	r3,4(r18)
10109354:	00c006c4 	movi	r3,27
10109358:	19804536 	bltu	r3,r6,10109470 <_realloc_r+0x470>
1010935c:	90800204 	addi	r2,r18,8
10109360:	a8c00204 	addi	r3,r21,8
10109364:	003f6306 	br	101090f4 <__alt_data_end+0xfffe90f4>
10109368:	9005883a 	mov	r2,r18
1010936c:	a8c00017 	ldw	r3,0(r21)
10109370:	b821883a 	mov	r16,r23
10109374:	b027883a 	mov	r19,r22
10109378:	10c00015 	stw	r3,0(r2)
1010937c:	a8c00117 	ldw	r3,4(r21)
10109380:	10c00115 	stw	r3,4(r2)
10109384:	a8c00217 	ldw	r3,8(r21)
10109388:	10c00215 	stw	r3,8(r2)
1010938c:	003f6a06 	br	10109138 <__alt_data_end+0xfffe9138>
10109390:	9c67883a 	add	r19,r19,r17
10109394:	4445c83a 	sub	r2,r8,r17
10109398:	e4c00215 	stw	r19,8(fp)
1010939c:	10800054 	ori	r2,r2,1
101093a0:	98800115 	stw	r2,4(r19)
101093a4:	a8bfff17 	ldw	r2,-4(r21)
101093a8:	a009883a 	mov	r4,r20
101093ac:	1080004c 	andi	r2,r2,1
101093b0:	1462b03a 	or	r17,r2,r17
101093b4:	ac7fff15 	stw	r17,-4(r21)
101093b8:	010e9c00 	call	1010e9c0 <__malloc_unlock>
101093bc:	a805883a 	mov	r2,r21
101093c0:	003f6b06 	br	10109170 <__alt_data_end+0xfffe9170>
101093c4:	a80b883a 	mov	r5,r21
101093c8:	9009883a 	mov	r4,r18
101093cc:	0107e480 	call	10107e48 <memmove>
101093d0:	003f4e06 	br	1010910c <__alt_data_end+0xfffe910c>
101093d4:	89000404 	addi	r4,r17,16
101093d8:	b93fbc16 	blt	r23,r4,101092cc <__alt_data_end+0xfffe92cc>
101093dc:	b0800317 	ldw	r2,12(r22)
101093e0:	b0c00217 	ldw	r3,8(r22)
101093e4:	81bfff04 	addi	r6,r16,-4
101093e8:	01000904 	movi	r4,36
101093ec:	18800315 	stw	r2,12(r3)
101093f0:	10c00215 	stw	r3,8(r2)
101093f4:	b4800204 	addi	r18,r22,8
101093f8:	21804336 	bltu	r4,r6,10109508 <_realloc_r+0x508>
101093fc:	008004c4 	movi	r2,19
10109400:	11803f2e 	bgeu	r2,r6,10109500 <_realloc_r+0x500>
10109404:	a8800017 	ldw	r2,0(r21)
10109408:	b0800215 	stw	r2,8(r22)
1010940c:	a8800117 	ldw	r2,4(r21)
10109410:	b0800315 	stw	r2,12(r22)
10109414:	008006c4 	movi	r2,27
10109418:	11803f36 	bltu	r2,r6,10109518 <_realloc_r+0x518>
1010941c:	b0800404 	addi	r2,r22,16
10109420:	ad400204 	addi	r21,r21,8
10109424:	a8c00017 	ldw	r3,0(r21)
10109428:	10c00015 	stw	r3,0(r2)
1010942c:	a8c00117 	ldw	r3,4(r21)
10109430:	10c00115 	stw	r3,4(r2)
10109434:	a8c00217 	ldw	r3,8(r21)
10109438:	10c00215 	stw	r3,8(r2)
1010943c:	b447883a 	add	r3,r22,r17
10109440:	bc45c83a 	sub	r2,r23,r17
10109444:	e0c00215 	stw	r3,8(fp)
10109448:	10800054 	ori	r2,r2,1
1010944c:	18800115 	stw	r2,4(r3)
10109450:	b0800117 	ldw	r2,4(r22)
10109454:	a009883a 	mov	r4,r20
10109458:	1080004c 	andi	r2,r2,1
1010945c:	1462b03a 	or	r17,r2,r17
10109460:	b4400115 	stw	r17,4(r22)
10109464:	010e9c00 	call	1010e9c0 <__malloc_unlock>
10109468:	9005883a 	mov	r2,r18
1010946c:	003f4006 	br	10109170 <__alt_data_end+0xfffe9170>
10109470:	a8c00217 	ldw	r3,8(r21)
10109474:	90c00215 	stw	r3,8(r18)
10109478:	a8c00317 	ldw	r3,12(r21)
1010947c:	90c00315 	stw	r3,12(r18)
10109480:	30801126 	beq	r6,r2,101094c8 <_realloc_r+0x4c8>
10109484:	90800404 	addi	r2,r18,16
10109488:	a8c00404 	addi	r3,r21,16
1010948c:	003f1906 	br	101090f4 <__alt_data_end+0xfffe90f4>
10109490:	90ffff17 	ldw	r3,-4(r18)
10109494:	00bfff04 	movi	r2,-4
10109498:	a825883a 	mov	r18,r21
1010949c:	1884703a 	and	r2,r3,r2
101094a0:	80a1883a 	add	r16,r16,r2
101094a4:	003f2406 	br	10109138 <__alt_data_end+0xfffe9138>
101094a8:	a8800217 	ldw	r2,8(r21)
101094ac:	b0800415 	stw	r2,16(r22)
101094b0:	a8800317 	ldw	r2,12(r21)
101094b4:	b0800515 	stw	r2,20(r22)
101094b8:	31000a26 	beq	r6,r4,101094e4 <_realloc_r+0x4e4>
101094bc:	b0800604 	addi	r2,r22,24
101094c0:	ad400404 	addi	r21,r21,16
101094c4:	003fa906 	br	1010936c <__alt_data_end+0xfffe936c>
101094c8:	a9000417 	ldw	r4,16(r21)
101094cc:	90800604 	addi	r2,r18,24
101094d0:	a8c00604 	addi	r3,r21,24
101094d4:	91000415 	stw	r4,16(r18)
101094d8:	a9000517 	ldw	r4,20(r21)
101094dc:	91000515 	stw	r4,20(r18)
101094e0:	003f0406 	br	101090f4 <__alt_data_end+0xfffe90f4>
101094e4:	a8c00417 	ldw	r3,16(r21)
101094e8:	ad400604 	addi	r21,r21,24
101094ec:	b0800804 	addi	r2,r22,32
101094f0:	b0c00615 	stw	r3,24(r22)
101094f4:	a8ffff17 	ldw	r3,-4(r21)
101094f8:	b0c00715 	stw	r3,28(r22)
101094fc:	003f9b06 	br	1010936c <__alt_data_end+0xfffe936c>
10109500:	9005883a 	mov	r2,r18
10109504:	003fc706 	br	10109424 <__alt_data_end+0xfffe9424>
10109508:	a80b883a 	mov	r5,r21
1010950c:	9009883a 	mov	r4,r18
10109510:	0107e480 	call	10107e48 <memmove>
10109514:	003fc906 	br	1010943c <__alt_data_end+0xfffe943c>
10109518:	a8800217 	ldw	r2,8(r21)
1010951c:	b0800415 	stw	r2,16(r22)
10109520:	a8800317 	ldw	r2,12(r21)
10109524:	b0800515 	stw	r2,20(r22)
10109528:	31000726 	beq	r6,r4,10109548 <_realloc_r+0x548>
1010952c:	b0800604 	addi	r2,r22,24
10109530:	ad400404 	addi	r21,r21,16
10109534:	003fbb06 	br	10109424 <__alt_data_end+0xfffe9424>
10109538:	a009883a 	mov	r4,r20
1010953c:	010e9c00 	call	1010e9c0 <__malloc_unlock>
10109540:	0005883a 	mov	r2,zero
10109544:	003f0a06 	br	10109170 <__alt_data_end+0xfffe9170>
10109548:	a8c00417 	ldw	r3,16(r21)
1010954c:	ad400604 	addi	r21,r21,24
10109550:	b0800804 	addi	r2,r22,32
10109554:	b0c00615 	stw	r3,24(r22)
10109558:	a8ffff17 	ldw	r3,-4(r21)
1010955c:	b0c00715 	stw	r3,28(r22)
10109560:	003fb006 	br	10109424 <__alt_data_end+0xfffe9424>

10109564 <__fpclassifyd>:
10109564:	00a00034 	movhi	r2,32768
10109568:	10bfffc4 	addi	r2,r2,-1
1010956c:	2884703a 	and	r2,r5,r2
10109570:	10000726 	beq	r2,zero,10109590 <__fpclassifyd+0x2c>
10109574:	00fffc34 	movhi	r3,65520
10109578:	019ff834 	movhi	r6,32736
1010957c:	28c7883a 	add	r3,r5,r3
10109580:	31bfffc4 	addi	r6,r6,-1
10109584:	30c00536 	bltu	r6,r3,1010959c <__fpclassifyd+0x38>
10109588:	00800104 	movi	r2,4
1010958c:	f800283a 	ret
10109590:	2000021e 	bne	r4,zero,1010959c <__fpclassifyd+0x38>
10109594:	00800084 	movi	r2,2
10109598:	f800283a 	ret
1010959c:	00dffc34 	movhi	r3,32752
101095a0:	019ff834 	movhi	r6,32736
101095a4:	28cb883a 	add	r5,r5,r3
101095a8:	31bfffc4 	addi	r6,r6,-1
101095ac:	317ff62e 	bgeu	r6,r5,10109588 <__alt_data_end+0xfffe9588>
101095b0:	01400434 	movhi	r5,16
101095b4:	297fffc4 	addi	r5,r5,-1
101095b8:	28800236 	bltu	r5,r2,101095c4 <__fpclassifyd+0x60>
101095bc:	008000c4 	movi	r2,3
101095c0:	f800283a 	ret
101095c4:	10c00226 	beq	r2,r3,101095d0 <__fpclassifyd+0x6c>
101095c8:	0005883a 	mov	r2,zero
101095cc:	f800283a 	ret
101095d0:	2005003a 	cmpeq	r2,r4,zero
101095d4:	f800283a 	ret

101095d8 <strcmp>:
101095d8:	2144b03a 	or	r2,r4,r5
101095dc:	108000cc 	andi	r2,r2,3
101095e0:	1000171e 	bne	r2,zero,10109640 <strcmp+0x68>
101095e4:	20800017 	ldw	r2,0(r4)
101095e8:	28c00017 	ldw	r3,0(r5)
101095ec:	10c0141e 	bne	r2,r3,10109640 <strcmp+0x68>
101095f0:	027fbff4 	movhi	r9,65279
101095f4:	4a7fbfc4 	addi	r9,r9,-257
101095f8:	0086303a 	nor	r3,zero,r2
101095fc:	02202074 	movhi	r8,32897
10109600:	1245883a 	add	r2,r2,r9
10109604:	42202004 	addi	r8,r8,-32640
10109608:	10c4703a 	and	r2,r2,r3
1010960c:	1204703a 	and	r2,r2,r8
10109610:	10000226 	beq	r2,zero,1010961c <strcmp+0x44>
10109614:	00002306 	br	101096a4 <strcmp+0xcc>
10109618:	1000221e 	bne	r2,zero,101096a4 <strcmp+0xcc>
1010961c:	21000104 	addi	r4,r4,4
10109620:	20c00017 	ldw	r3,0(r4)
10109624:	29400104 	addi	r5,r5,4
10109628:	29800017 	ldw	r6,0(r5)
1010962c:	1a4f883a 	add	r7,r3,r9
10109630:	00c4303a 	nor	r2,zero,r3
10109634:	3884703a 	and	r2,r7,r2
10109638:	1204703a 	and	r2,r2,r8
1010963c:	19bff626 	beq	r3,r6,10109618 <__alt_data_end+0xfffe9618>
10109640:	20800003 	ldbu	r2,0(r4)
10109644:	10c03fcc 	andi	r3,r2,255
10109648:	18c0201c 	xori	r3,r3,128
1010964c:	18ffe004 	addi	r3,r3,-128
10109650:	18000c26 	beq	r3,zero,10109684 <strcmp+0xac>
10109654:	29800007 	ldb	r6,0(r5)
10109658:	19800326 	beq	r3,r6,10109668 <strcmp+0x90>
1010965c:	00001306 	br	101096ac <strcmp+0xd4>
10109660:	29800007 	ldb	r6,0(r5)
10109664:	11800b1e 	bne	r2,r6,10109694 <strcmp+0xbc>
10109668:	21000044 	addi	r4,r4,1
1010966c:	20c00003 	ldbu	r3,0(r4)
10109670:	29400044 	addi	r5,r5,1
10109674:	18803fcc 	andi	r2,r3,255
10109678:	1080201c 	xori	r2,r2,128
1010967c:	10bfe004 	addi	r2,r2,-128
10109680:	103ff71e 	bne	r2,zero,10109660 <__alt_data_end+0xfffe9660>
10109684:	0007883a 	mov	r3,zero
10109688:	28800003 	ldbu	r2,0(r5)
1010968c:	1885c83a 	sub	r2,r3,r2
10109690:	f800283a 	ret
10109694:	28800003 	ldbu	r2,0(r5)
10109698:	18c03fcc 	andi	r3,r3,255
1010969c:	1885c83a 	sub	r2,r3,r2
101096a0:	f800283a 	ret
101096a4:	0005883a 	mov	r2,zero
101096a8:	f800283a 	ret
101096ac:	10c03fcc 	andi	r3,r2,255
101096b0:	003ff506 	br	10109688 <__alt_data_end+0xfffe9688>

101096b4 <__sprint_r.part.0>:
101096b4:	28801917 	ldw	r2,100(r5)
101096b8:	defff604 	addi	sp,sp,-40
101096bc:	dd400515 	stw	r21,20(sp)
101096c0:	dfc00915 	stw	ra,36(sp)
101096c4:	df000815 	stw	fp,32(sp)
101096c8:	ddc00715 	stw	r23,28(sp)
101096cc:	dd800615 	stw	r22,24(sp)
101096d0:	dd000415 	stw	r20,16(sp)
101096d4:	dcc00315 	stw	r19,12(sp)
101096d8:	dc800215 	stw	r18,8(sp)
101096dc:	dc400115 	stw	r17,4(sp)
101096e0:	dc000015 	stw	r16,0(sp)
101096e4:	1088000c 	andi	r2,r2,8192
101096e8:	302b883a 	mov	r21,r6
101096ec:	10002e26 	beq	r2,zero,101097a8 <__sprint_r.part.0+0xf4>
101096f0:	30800217 	ldw	r2,8(r6)
101096f4:	35800017 	ldw	r22,0(r6)
101096f8:	10002926 	beq	r2,zero,101097a0 <__sprint_r.part.0+0xec>
101096fc:	2827883a 	mov	r19,r5
10109700:	2029883a 	mov	r20,r4
10109704:	b5c00104 	addi	r23,r22,4
10109708:	04bfffc4 	movi	r18,-1
1010970c:	bc400017 	ldw	r17,0(r23)
10109710:	b4000017 	ldw	r16,0(r22)
10109714:	0039883a 	mov	fp,zero
10109718:	8822d0ba 	srli	r17,r17,2
1010971c:	8800031e 	bne	r17,zero,1010972c <__sprint_r.part.0+0x78>
10109720:	00001806 	br	10109784 <__sprint_r.part.0+0xd0>
10109724:	84000104 	addi	r16,r16,4
10109728:	8f001526 	beq	r17,fp,10109780 <__sprint_r.part.0+0xcc>
1010972c:	81400017 	ldw	r5,0(r16)
10109730:	980d883a 	mov	r6,r19
10109734:	a009883a 	mov	r4,r20
10109738:	010af240 	call	1010af24 <_fputwc_r>
1010973c:	e7000044 	addi	fp,fp,1
10109740:	14bff81e 	bne	r2,r18,10109724 <__alt_data_end+0xfffe9724>
10109744:	9005883a 	mov	r2,r18
10109748:	a8000215 	stw	zero,8(r21)
1010974c:	a8000115 	stw	zero,4(r21)
10109750:	dfc00917 	ldw	ra,36(sp)
10109754:	df000817 	ldw	fp,32(sp)
10109758:	ddc00717 	ldw	r23,28(sp)
1010975c:	dd800617 	ldw	r22,24(sp)
10109760:	dd400517 	ldw	r21,20(sp)
10109764:	dd000417 	ldw	r20,16(sp)
10109768:	dcc00317 	ldw	r19,12(sp)
1010976c:	dc800217 	ldw	r18,8(sp)
10109770:	dc400117 	ldw	r17,4(sp)
10109774:	dc000017 	ldw	r16,0(sp)
10109778:	dec00a04 	addi	sp,sp,40
1010977c:	f800283a 	ret
10109780:	a8800217 	ldw	r2,8(r21)
10109784:	8c63883a 	add	r17,r17,r17
10109788:	8c63883a 	add	r17,r17,r17
1010978c:	1445c83a 	sub	r2,r2,r17
10109790:	a8800215 	stw	r2,8(r21)
10109794:	b5800204 	addi	r22,r22,8
10109798:	bdc00204 	addi	r23,r23,8
1010979c:	103fdb1e 	bne	r2,zero,1010970c <__alt_data_end+0xfffe970c>
101097a0:	0005883a 	mov	r2,zero
101097a4:	003fe806 	br	10109748 <__alt_data_end+0xfffe9748>
101097a8:	01075d00 	call	101075d0 <__sfvwrite_r>
101097ac:	003fe606 	br	10109748 <__alt_data_end+0xfffe9748>

101097b0 <__sprint_r>:
101097b0:	30c00217 	ldw	r3,8(r6)
101097b4:	18000126 	beq	r3,zero,101097bc <__sprint_r+0xc>
101097b8:	01096b41 	jmpi	101096b4 <__sprint_r.part.0>
101097bc:	30000115 	stw	zero,4(r6)
101097c0:	0005883a 	mov	r2,zero
101097c4:	f800283a 	ret

101097c8 <___vfiprintf_internal_r>:
101097c8:	deffc904 	addi	sp,sp,-220
101097cc:	df003515 	stw	fp,212(sp)
101097d0:	dd003115 	stw	r20,196(sp)
101097d4:	dfc03615 	stw	ra,216(sp)
101097d8:	ddc03415 	stw	r23,208(sp)
101097dc:	dd803315 	stw	r22,204(sp)
101097e0:	dd403215 	stw	r21,200(sp)
101097e4:	dcc03015 	stw	r19,192(sp)
101097e8:	dc802f15 	stw	r18,188(sp)
101097ec:	dc402e15 	stw	r17,184(sp)
101097f0:	dc002d15 	stw	r16,180(sp)
101097f4:	d9002015 	stw	r4,128(sp)
101097f8:	d9c02215 	stw	r7,136(sp)
101097fc:	2829883a 	mov	r20,r5
10109800:	3039883a 	mov	fp,r6
10109804:	20000226 	beq	r4,zero,10109810 <___vfiprintf_internal_r+0x48>
10109808:	20800e17 	ldw	r2,56(r4)
1010980c:	1000cf26 	beq	r2,zero,10109b4c <___vfiprintf_internal_r+0x384>
10109810:	a080030b 	ldhu	r2,12(r20)
10109814:	10c8000c 	andi	r3,r2,8192
10109818:	1800061e 	bne	r3,zero,10109834 <___vfiprintf_internal_r+0x6c>
1010981c:	a1001917 	ldw	r4,100(r20)
10109820:	00f7ffc4 	movi	r3,-8193
10109824:	10880014 	ori	r2,r2,8192
10109828:	20c6703a 	and	r3,r4,r3
1010982c:	a080030d 	sth	r2,12(r20)
10109830:	a0c01915 	stw	r3,100(r20)
10109834:	10c0020c 	andi	r3,r2,8
10109838:	1800a926 	beq	r3,zero,10109ae0 <___vfiprintf_internal_r+0x318>
1010983c:	a0c00417 	ldw	r3,16(r20)
10109840:	1800a726 	beq	r3,zero,10109ae0 <___vfiprintf_internal_r+0x318>
10109844:	1080068c 	andi	r2,r2,26
10109848:	00c00284 	movi	r3,10
1010984c:	10c0ac26 	beq	r2,r3,10109b00 <___vfiprintf_internal_r+0x338>
10109850:	da801a04 	addi	r10,sp,104
10109854:	da801e15 	stw	r10,120(sp)
10109858:	d8801e17 	ldw	r2,120(sp)
1010985c:	da8019c4 	addi	r10,sp,103
10109860:	05840474 	movhi	r22,4113
10109864:	05c40474 	movhi	r23,4113
10109868:	da801f15 	stw	r10,124(sp)
1010986c:	1295c83a 	sub	r10,r2,r10
10109870:	b584a604 	addi	r22,r22,4760
10109874:	bdc4a204 	addi	r23,r23,4744
10109878:	dec01a15 	stw	sp,104(sp)
1010987c:	d8001c15 	stw	zero,112(sp)
10109880:	d8001b15 	stw	zero,108(sp)
10109884:	d8002615 	stw	zero,152(sp)
10109888:	d8002315 	stw	zero,140(sp)
1010988c:	da802715 	stw	r10,156(sp)
10109890:	d811883a 	mov	r8,sp
10109894:	dd002115 	stw	r20,132(sp)
10109898:	e021883a 	mov	r16,fp
1010989c:	80800007 	ldb	r2,0(r16)
101098a0:	1003ea26 	beq	r2,zero,1010a84c <___vfiprintf_internal_r+0x1084>
101098a4:	00c00944 	movi	r3,37
101098a8:	8025883a 	mov	r18,r16
101098ac:	10c0021e 	bne	r2,r3,101098b8 <___vfiprintf_internal_r+0xf0>
101098b0:	00001606 	br	1010990c <___vfiprintf_internal_r+0x144>
101098b4:	10c00326 	beq	r2,r3,101098c4 <___vfiprintf_internal_r+0xfc>
101098b8:	94800044 	addi	r18,r18,1
101098bc:	90800007 	ldb	r2,0(r18)
101098c0:	103ffc1e 	bne	r2,zero,101098b4 <__alt_data_end+0xfffe98b4>
101098c4:	9423c83a 	sub	r17,r18,r16
101098c8:	88001026 	beq	r17,zero,1010990c <___vfiprintf_internal_r+0x144>
101098cc:	d8c01c17 	ldw	r3,112(sp)
101098d0:	d8801b17 	ldw	r2,108(sp)
101098d4:	44000015 	stw	r16,0(r8)
101098d8:	88c7883a 	add	r3,r17,r3
101098dc:	10800044 	addi	r2,r2,1
101098e0:	44400115 	stw	r17,4(r8)
101098e4:	d8c01c15 	stw	r3,112(sp)
101098e8:	d8801b15 	stw	r2,108(sp)
101098ec:	010001c4 	movi	r4,7
101098f0:	2080760e 	bge	r4,r2,10109acc <___vfiprintf_internal_r+0x304>
101098f4:	1803821e 	bne	r3,zero,1010a700 <___vfiprintf_internal_r+0xf38>
101098f8:	da802317 	ldw	r10,140(sp)
101098fc:	d8001b15 	stw	zero,108(sp)
10109900:	d811883a 	mov	r8,sp
10109904:	5455883a 	add	r10,r10,r17
10109908:	da802315 	stw	r10,140(sp)
1010990c:	90800007 	ldb	r2,0(r18)
10109910:	10044626 	beq	r2,zero,1010aa2c <___vfiprintf_internal_r+0x1264>
10109914:	90c00047 	ldb	r3,1(r18)
10109918:	94000044 	addi	r16,r18,1
1010991c:	d8001d85 	stb	zero,118(sp)
10109920:	0009883a 	mov	r4,zero
10109924:	000f883a 	mov	r7,zero
10109928:	027fffc4 	movi	r9,-1
1010992c:	0023883a 	mov	r17,zero
10109930:	0029883a 	mov	r20,zero
10109934:	01401604 	movi	r5,88
10109938:	01800244 	movi	r6,9
1010993c:	03400a84 	movi	r13,42
10109940:	03001b04 	movi	r12,108
10109944:	84000044 	addi	r16,r16,1
10109948:	18bff804 	addi	r2,r3,-32
1010994c:	28827336 	bltu	r5,r2,1010a31c <___vfiprintf_internal_r+0xb54>
10109950:	100490ba 	slli	r2,r2,2
10109954:	02840474 	movhi	r10,4113
10109958:	52a65a04 	addi	r10,r10,-26264
1010995c:	1285883a 	add	r2,r2,r10
10109960:	10800017 	ldw	r2,0(r2)
10109964:	1000683a 	jmp	r2
10109968:	1010a050 	cmplti	zero,r2,17025
1010996c:	1010a31c 	xori	zero,r2,17036
10109970:	1010a31c 	xori	zero,r2,17036
10109974:	1010a070 	cmpltui	zero,r2,17025
10109978:	1010a31c 	xori	zero,r2,17036
1010997c:	1010a31c 	xori	zero,r2,17036
10109980:	1010a31c 	xori	zero,r2,17036
10109984:	1010a31c 	xori	zero,r2,17036
10109988:	1010a31c 	xori	zero,r2,17036
1010998c:	1010a31c 	xori	zero,r2,17036
10109990:	1010a258 	cmpnei	zero,r2,17033
10109994:	1010a274 	orhi	zero,r2,17033
10109998:	1010a31c 	xori	zero,r2,17036
1010999c:	10109b5c 	xori	zero,r2,17005
101099a0:	1010a284 	addi	zero,r2,17034
101099a4:	1010a31c 	xori	zero,r2,17036
101099a8:	1010a07c 	xorhi	zero,r2,17025
101099ac:	1010a088 	cmpgei	zero,r2,17026
101099b0:	1010a088 	cmpgei	zero,r2,17026
101099b4:	1010a088 	cmpgei	zero,r2,17026
101099b8:	1010a088 	cmpgei	zero,r2,17026
101099bc:	1010a088 	cmpgei	zero,r2,17026
101099c0:	1010a088 	cmpgei	zero,r2,17026
101099c4:	1010a088 	cmpgei	zero,r2,17026
101099c8:	1010a088 	cmpgei	zero,r2,17026
101099cc:	1010a088 	cmpgei	zero,r2,17026
101099d0:	1010a31c 	xori	zero,r2,17036
101099d4:	1010a31c 	xori	zero,r2,17036
101099d8:	1010a31c 	xori	zero,r2,17036
101099dc:	1010a31c 	xori	zero,r2,17036
101099e0:	1010a31c 	xori	zero,r2,17036
101099e4:	1010a31c 	xori	zero,r2,17036
101099e8:	1010a31c 	xori	zero,r2,17036
101099ec:	1010a31c 	xori	zero,r2,17036
101099f0:	1010a31c 	xori	zero,r2,17036
101099f4:	1010a31c 	xori	zero,r2,17036
101099f8:	1010a0b4 	orhi	zero,r2,17026
101099fc:	1010a31c 	xori	zero,r2,17036
10109a00:	1010a31c 	xori	zero,r2,17036
10109a04:	1010a31c 	xori	zero,r2,17036
10109a08:	1010a31c 	xori	zero,r2,17036
10109a0c:	1010a31c 	xori	zero,r2,17036
10109a10:	1010a31c 	xori	zero,r2,17036
10109a14:	1010a31c 	xori	zero,r2,17036
10109a18:	1010a31c 	xori	zero,r2,17036
10109a1c:	1010a31c 	xori	zero,r2,17036
10109a20:	1010a31c 	xori	zero,r2,17036
10109a24:	1010a0ec 	andhi	zero,r2,17027
10109a28:	1010a31c 	xori	zero,r2,17036
10109a2c:	1010a31c 	xori	zero,r2,17036
10109a30:	1010a31c 	xori	zero,r2,17036
10109a34:	1010a31c 	xori	zero,r2,17036
10109a38:	1010a31c 	xori	zero,r2,17036
10109a3c:	1010a144 	addi	zero,r2,17029
10109a40:	1010a31c 	xori	zero,r2,17036
10109a44:	1010a31c 	xori	zero,r2,17036
10109a48:	1010a1b4 	orhi	zero,r2,17030
10109a4c:	1010a31c 	xori	zero,r2,17036
10109a50:	1010a31c 	xori	zero,r2,17036
10109a54:	1010a31c 	xori	zero,r2,17036
10109a58:	1010a31c 	xori	zero,r2,17036
10109a5c:	1010a31c 	xori	zero,r2,17036
10109a60:	1010a31c 	xori	zero,r2,17036
10109a64:	1010a31c 	xori	zero,r2,17036
10109a68:	1010a31c 	xori	zero,r2,17036
10109a6c:	1010a31c 	xori	zero,r2,17036
10109a70:	1010a31c 	xori	zero,r2,17036
10109a74:	10109f60 	cmpeqi	zero,r2,17021
10109a78:	10109f8c 	andi	zero,r2,17022
10109a7c:	1010a31c 	xori	zero,r2,17036
10109a80:	1010a31c 	xori	zero,r2,17036
10109a84:	1010a31c 	xori	zero,r2,17036
10109a88:	1010a2c4 	addi	zero,r2,17035
10109a8c:	10109f8c 	andi	zero,r2,17022
10109a90:	1010a31c 	xori	zero,r2,17036
10109a94:	1010a31c 	xori	zero,r2,17036
10109a98:	10109e20 	cmpeqi	zero,r2,17016
10109a9c:	1010a31c 	xori	zero,r2,17036
10109aa0:	10109e30 	cmpltui	zero,r2,17016
10109aa4:	10109e6c 	andhi	zero,r2,17017
10109aa8:	10109b68 	cmpgeui	zero,r2,17005
10109aac:	10109e14 	ori	zero,r2,17016
10109ab0:	1010a31c 	xori	zero,r2,17036
10109ab4:	1010a1f0 	cmpltui	zero,r2,17031
10109ab8:	1010a31c 	xori	zero,r2,17036
10109abc:	1010a248 	cmpgei	zero,r2,17033
10109ac0:	1010a31c 	xori	zero,r2,17036
10109ac4:	1010a31c 	xori	zero,r2,17036
10109ac8:	10109f0c 	andi	zero,r2,17020
10109acc:	42000204 	addi	r8,r8,8
10109ad0:	da802317 	ldw	r10,140(sp)
10109ad4:	5455883a 	add	r10,r10,r17
10109ad8:	da802315 	stw	r10,140(sp)
10109adc:	003f8b06 	br	1010990c <__alt_data_end+0xfffe990c>
10109ae0:	d9002017 	ldw	r4,128(sp)
10109ae4:	a00b883a 	mov	r5,r20
10109ae8:	0105af40 	call	10105af4 <__swsetup_r>
10109aec:	1003b11e 	bne	r2,zero,1010a9b4 <___vfiprintf_internal_r+0x11ec>
10109af0:	a080030b 	ldhu	r2,12(r20)
10109af4:	00c00284 	movi	r3,10
10109af8:	1080068c 	andi	r2,r2,26
10109afc:	10ff541e 	bne	r2,r3,10109850 <__alt_data_end+0xfffe9850>
10109b00:	a080038f 	ldh	r2,14(r20)
10109b04:	103f5216 	blt	r2,zero,10109850 <__alt_data_end+0xfffe9850>
10109b08:	d9c02217 	ldw	r7,136(sp)
10109b0c:	d9002017 	ldw	r4,128(sp)
10109b10:	e00d883a 	mov	r6,fp
10109b14:	a00b883a 	mov	r5,r20
10109b18:	010ac400 	call	1010ac40 <__sbprintf>
10109b1c:	dfc03617 	ldw	ra,216(sp)
10109b20:	df003517 	ldw	fp,212(sp)
10109b24:	ddc03417 	ldw	r23,208(sp)
10109b28:	dd803317 	ldw	r22,204(sp)
10109b2c:	dd403217 	ldw	r21,200(sp)
10109b30:	dd003117 	ldw	r20,196(sp)
10109b34:	dcc03017 	ldw	r19,192(sp)
10109b38:	dc802f17 	ldw	r18,188(sp)
10109b3c:	dc402e17 	ldw	r17,184(sp)
10109b40:	dc002d17 	ldw	r16,180(sp)
10109b44:	dec03704 	addi	sp,sp,220
10109b48:	f800283a 	ret
10109b4c:	0101aa00 	call	10101aa0 <__sinit>
10109b50:	003f2f06 	br	10109810 <__alt_data_end+0xfffe9810>
10109b54:	0463c83a 	sub	r17,zero,r17
10109b58:	d8802215 	stw	r2,136(sp)
10109b5c:	a5000114 	ori	r20,r20,4
10109b60:	80c00007 	ldb	r3,0(r16)
10109b64:	003f7706 	br	10109944 <__alt_data_end+0xfffe9944>
10109b68:	00800c04 	movi	r2,48
10109b6c:	da802217 	ldw	r10,136(sp)
10109b70:	d8801d05 	stb	r2,116(sp)
10109b74:	00801e04 	movi	r2,120
10109b78:	d8801d45 	stb	r2,117(sp)
10109b7c:	d8001d85 	stb	zero,118(sp)
10109b80:	50c00104 	addi	r3,r10,4
10109b84:	54800017 	ldw	r18,0(r10)
10109b88:	0027883a 	mov	r19,zero
10109b8c:	a0800094 	ori	r2,r20,2
10109b90:	48030b16 	blt	r9,zero,1010a7c0 <___vfiprintf_internal_r+0xff8>
10109b94:	00bfdfc4 	movi	r2,-129
10109b98:	a096703a 	and	r11,r20,r2
10109b9c:	d8c02215 	stw	r3,136(sp)
10109ba0:	5d000094 	ori	r20,r11,2
10109ba4:	90032b1e 	bne	r18,zero,1010a854 <___vfiprintf_internal_r+0x108c>
10109ba8:	00840474 	movhi	r2,4113
10109bac:	10844204 	addi	r2,r2,4360
10109bb0:	d8802615 	stw	r2,152(sp)
10109bb4:	0039883a 	mov	fp,zero
10109bb8:	48017b1e 	bne	r9,zero,1010a1a8 <___vfiprintf_internal_r+0x9e0>
10109bbc:	0013883a 	mov	r9,zero
10109bc0:	0027883a 	mov	r19,zero
10109bc4:	dd401a04 	addi	r21,sp,104
10109bc8:	4825883a 	mov	r18,r9
10109bcc:	4cc0010e 	bge	r9,r19,10109bd4 <___vfiprintf_internal_r+0x40c>
10109bd0:	9825883a 	mov	r18,r19
10109bd4:	e7003fcc 	andi	fp,fp,255
10109bd8:	e700201c 	xori	fp,fp,128
10109bdc:	e73fe004 	addi	fp,fp,-128
10109be0:	e0000126 	beq	fp,zero,10109be8 <___vfiprintf_internal_r+0x420>
10109be4:	94800044 	addi	r18,r18,1
10109be8:	a380008c 	andi	r14,r20,2
10109bec:	70000126 	beq	r14,zero,10109bf4 <___vfiprintf_internal_r+0x42c>
10109bf0:	94800084 	addi	r18,r18,2
10109bf4:	a700210c 	andi	fp,r20,132
10109bf8:	e001df1e 	bne	fp,zero,1010a378 <___vfiprintf_internal_r+0xbb0>
10109bfc:	8c87c83a 	sub	r3,r17,r18
10109c00:	00c1dd0e 	bge	zero,r3,1010a378 <___vfiprintf_internal_r+0xbb0>
10109c04:	01c00404 	movi	r7,16
10109c08:	d8801c17 	ldw	r2,112(sp)
10109c0c:	38c3ad0e 	bge	r7,r3,1010aac4 <___vfiprintf_internal_r+0x12fc>
10109c10:	02840474 	movhi	r10,4113
10109c14:	5284a604 	addi	r10,r10,4760
10109c18:	dc002915 	stw	r16,164(sp)
10109c1c:	d9801b17 	ldw	r6,108(sp)
10109c20:	da802415 	stw	r10,144(sp)
10109c24:	03c001c4 	movi	r15,7
10109c28:	da402515 	stw	r9,148(sp)
10109c2c:	db802815 	stw	r14,160(sp)
10109c30:	1821883a 	mov	r16,r3
10109c34:	00000506 	br	10109c4c <___vfiprintf_internal_r+0x484>
10109c38:	31400084 	addi	r5,r6,2
10109c3c:	42000204 	addi	r8,r8,8
10109c40:	200d883a 	mov	r6,r4
10109c44:	843ffc04 	addi	r16,r16,-16
10109c48:	3c000d0e 	bge	r7,r16,10109c80 <___vfiprintf_internal_r+0x4b8>
10109c4c:	10800404 	addi	r2,r2,16
10109c50:	31000044 	addi	r4,r6,1
10109c54:	45800015 	stw	r22,0(r8)
10109c58:	41c00115 	stw	r7,4(r8)
10109c5c:	d8801c15 	stw	r2,112(sp)
10109c60:	d9001b15 	stw	r4,108(sp)
10109c64:	793ff40e 	bge	r15,r4,10109c38 <__alt_data_end+0xfffe9c38>
10109c68:	1001b51e 	bne	r2,zero,1010a340 <___vfiprintf_internal_r+0xb78>
10109c6c:	843ffc04 	addi	r16,r16,-16
10109c70:	000d883a 	mov	r6,zero
10109c74:	01400044 	movi	r5,1
10109c78:	d811883a 	mov	r8,sp
10109c7c:	3c3ff316 	blt	r7,r16,10109c4c <__alt_data_end+0xfffe9c4c>
10109c80:	8007883a 	mov	r3,r16
10109c84:	da402517 	ldw	r9,148(sp)
10109c88:	db802817 	ldw	r14,160(sp)
10109c8c:	dc002917 	ldw	r16,164(sp)
10109c90:	da802417 	ldw	r10,144(sp)
10109c94:	1885883a 	add	r2,r3,r2
10109c98:	40c00115 	stw	r3,4(r8)
10109c9c:	42800015 	stw	r10,0(r8)
10109ca0:	d8801c15 	stw	r2,112(sp)
10109ca4:	d9401b15 	stw	r5,108(sp)
10109ca8:	00c001c4 	movi	r3,7
10109cac:	19426016 	blt	r3,r5,1010a630 <___vfiprintf_internal_r+0xe68>
10109cb0:	d8c01d87 	ldb	r3,118(sp)
10109cb4:	42000204 	addi	r8,r8,8
10109cb8:	29000044 	addi	r4,r5,1
10109cbc:	1801b31e 	bne	r3,zero,1010a38c <___vfiprintf_internal_r+0xbc4>
10109cc0:	7001c026 	beq	r14,zero,1010a3c4 <___vfiprintf_internal_r+0xbfc>
10109cc4:	d8c01d04 	addi	r3,sp,116
10109cc8:	10800084 	addi	r2,r2,2
10109ccc:	40c00015 	stw	r3,0(r8)
10109cd0:	00c00084 	movi	r3,2
10109cd4:	40c00115 	stw	r3,4(r8)
10109cd8:	d8801c15 	stw	r2,112(sp)
10109cdc:	d9001b15 	stw	r4,108(sp)
10109ce0:	00c001c4 	movi	r3,7
10109ce4:	1902650e 	bge	r3,r4,1010a67c <___vfiprintf_internal_r+0xeb4>
10109ce8:	10029a1e 	bne	r2,zero,1010a754 <___vfiprintf_internal_r+0xf8c>
10109cec:	00c02004 	movi	r3,128
10109cf0:	01000044 	movi	r4,1
10109cf4:	000b883a 	mov	r5,zero
10109cf8:	d811883a 	mov	r8,sp
10109cfc:	e0c1b31e 	bne	fp,r3,1010a3cc <___vfiprintf_internal_r+0xc04>
10109d00:	8cb9c83a 	sub	fp,r17,r18
10109d04:	0701b10e 	bge	zero,fp,1010a3cc <___vfiprintf_internal_r+0xc04>
10109d08:	01c00404 	movi	r7,16
10109d0c:	3f03890e 	bge	r7,fp,1010ab34 <___vfiprintf_internal_r+0x136c>
10109d10:	00c40474 	movhi	r3,4113
10109d14:	18c4a204 	addi	r3,r3,4744
10109d18:	d8c02415 	stw	r3,144(sp)
10109d1c:	8007883a 	mov	r3,r16
10109d20:	034001c4 	movi	r13,7
10109d24:	e021883a 	mov	r16,fp
10109d28:	da402515 	stw	r9,148(sp)
10109d2c:	1839883a 	mov	fp,r3
10109d30:	00000506 	br	10109d48 <___vfiprintf_internal_r+0x580>
10109d34:	29800084 	addi	r6,r5,2
10109d38:	42000204 	addi	r8,r8,8
10109d3c:	180b883a 	mov	r5,r3
10109d40:	843ffc04 	addi	r16,r16,-16
10109d44:	3c000d0e 	bge	r7,r16,10109d7c <___vfiprintf_internal_r+0x5b4>
10109d48:	10800404 	addi	r2,r2,16
10109d4c:	28c00044 	addi	r3,r5,1
10109d50:	45c00015 	stw	r23,0(r8)
10109d54:	41c00115 	stw	r7,4(r8)
10109d58:	d8801c15 	stw	r2,112(sp)
10109d5c:	d8c01b15 	stw	r3,108(sp)
10109d60:	68fff40e 	bge	r13,r3,10109d34 <__alt_data_end+0xfffe9d34>
10109d64:	1002241e 	bne	r2,zero,1010a5f8 <___vfiprintf_internal_r+0xe30>
10109d68:	843ffc04 	addi	r16,r16,-16
10109d6c:	01800044 	movi	r6,1
10109d70:	000b883a 	mov	r5,zero
10109d74:	d811883a 	mov	r8,sp
10109d78:	3c3ff316 	blt	r7,r16,10109d48 <__alt_data_end+0xfffe9d48>
10109d7c:	da402517 	ldw	r9,148(sp)
10109d80:	e007883a 	mov	r3,fp
10109d84:	8039883a 	mov	fp,r16
10109d88:	1821883a 	mov	r16,r3
10109d8c:	d8c02417 	ldw	r3,144(sp)
10109d90:	1705883a 	add	r2,r2,fp
10109d94:	47000115 	stw	fp,4(r8)
10109d98:	40c00015 	stw	r3,0(r8)
10109d9c:	d8801c15 	stw	r2,112(sp)
10109da0:	d9801b15 	stw	r6,108(sp)
10109da4:	00c001c4 	movi	r3,7
10109da8:	19827616 	blt	r3,r6,1010a784 <___vfiprintf_internal_r+0xfbc>
10109dac:	4cf9c83a 	sub	fp,r9,r19
10109db0:	42000204 	addi	r8,r8,8
10109db4:	31000044 	addi	r4,r6,1
10109db8:	300b883a 	mov	r5,r6
10109dbc:	07018516 	blt	zero,fp,1010a3d4 <___vfiprintf_internal_r+0xc0c>
10109dc0:	9885883a 	add	r2,r19,r2
10109dc4:	45400015 	stw	r21,0(r8)
10109dc8:	44c00115 	stw	r19,4(r8)
10109dcc:	d8801c15 	stw	r2,112(sp)
10109dd0:	d9001b15 	stw	r4,108(sp)
10109dd4:	00c001c4 	movi	r3,7
10109dd8:	1901dd0e 	bge	r3,r4,1010a550 <___vfiprintf_internal_r+0xd88>
10109ddc:	1002401e 	bne	r2,zero,1010a6e0 <___vfiprintf_internal_r+0xf18>
10109de0:	d8001b15 	stw	zero,108(sp)
10109de4:	a2c0010c 	andi	r11,r20,4
10109de8:	58000226 	beq	r11,zero,10109df4 <___vfiprintf_internal_r+0x62c>
10109dec:	8ca7c83a 	sub	r19,r17,r18
10109df0:	04c2f216 	blt	zero,r19,1010a9bc <___vfiprintf_internal_r+0x11f4>
10109df4:	8c80010e 	bge	r17,r18,10109dfc <___vfiprintf_internal_r+0x634>
10109df8:	9023883a 	mov	r17,r18
10109dfc:	da802317 	ldw	r10,140(sp)
10109e00:	5455883a 	add	r10,r10,r17
10109e04:	da802315 	stw	r10,140(sp)
10109e08:	d8001b15 	stw	zero,108(sp)
10109e0c:	d811883a 	mov	r8,sp
10109e10:	003ea206 	br	1010989c <__alt_data_end+0xfffe989c>
10109e14:	a5000814 	ori	r20,r20,32
10109e18:	80c00007 	ldb	r3,0(r16)
10109e1c:	003ec906 	br	10109944 <__alt_data_end+0xfffe9944>
10109e20:	80c00007 	ldb	r3,0(r16)
10109e24:	1b030926 	beq	r3,r12,1010aa4c <___vfiprintf_internal_r+0x1284>
10109e28:	a5000414 	ori	r20,r20,16
10109e2c:	003ec506 	br	10109944 <__alt_data_end+0xfffe9944>
10109e30:	21003fcc 	andi	r4,r4,255
10109e34:	20035e1e 	bne	r4,zero,1010abb0 <___vfiprintf_internal_r+0x13e8>
10109e38:	a080080c 	andi	r2,r20,32
10109e3c:	1002a526 	beq	r2,zero,1010a8d4 <___vfiprintf_internal_r+0x110c>
10109e40:	da802217 	ldw	r10,136(sp)
10109e44:	50800017 	ldw	r2,0(r10)
10109e48:	da802317 	ldw	r10,140(sp)
10109e4c:	5007d7fa 	srai	r3,r10,31
10109e50:	da802217 	ldw	r10,136(sp)
10109e54:	10c00115 	stw	r3,4(r2)
10109e58:	52800104 	addi	r10,r10,4
10109e5c:	da802215 	stw	r10,136(sp)
10109e60:	da802317 	ldw	r10,140(sp)
10109e64:	12800015 	stw	r10,0(r2)
10109e68:	003e8c06 	br	1010989c <__alt_data_end+0xfffe989c>
10109e6c:	21003fcc 	andi	r4,r4,255
10109e70:	2003511e 	bne	r4,zero,1010abb8 <___vfiprintf_internal_r+0x13f0>
10109e74:	a080080c 	andi	r2,r20,32
10109e78:	1000a126 	beq	r2,zero,1010a100 <___vfiprintf_internal_r+0x938>
10109e7c:	da802217 	ldw	r10,136(sp)
10109e80:	d8001d85 	stb	zero,118(sp)
10109e84:	50800204 	addi	r2,r10,8
10109e88:	54800017 	ldw	r18,0(r10)
10109e8c:	54c00117 	ldw	r19,4(r10)
10109e90:	4802b416 	blt	r9,zero,1010a964 <___vfiprintf_internal_r+0x119c>
10109e94:	013fdfc4 	movi	r4,-129
10109e98:	94c6b03a 	or	r3,r18,r19
10109e9c:	d8802215 	stw	r2,136(sp)
10109ea0:	a128703a 	and	r20,r20,r4
10109ea4:	1800a226 	beq	r3,zero,1010a130 <___vfiprintf_internal_r+0x968>
10109ea8:	0039883a 	mov	fp,zero
10109eac:	dd401a04 	addi	r21,sp,104
10109eb0:	9006d0fa 	srli	r3,r18,3
10109eb4:	9808977a 	slli	r4,r19,29
10109eb8:	9826d0fa 	srli	r19,r19,3
10109ebc:	948001cc 	andi	r18,r18,7
10109ec0:	90800c04 	addi	r2,r18,48
10109ec4:	ad7fffc4 	addi	r21,r21,-1
10109ec8:	20e4b03a 	or	r18,r4,r3
10109ecc:	a8800005 	stb	r2,0(r21)
10109ed0:	94c6b03a 	or	r3,r18,r19
10109ed4:	183ff61e 	bne	r3,zero,10109eb0 <__alt_data_end+0xfffe9eb0>
10109ed8:	a0c0004c 	andi	r3,r20,1
10109edc:	18005926 	beq	r3,zero,1010a044 <___vfiprintf_internal_r+0x87c>
10109ee0:	10803fcc 	andi	r2,r2,255
10109ee4:	1080201c 	xori	r2,r2,128
10109ee8:	10bfe004 	addi	r2,r2,-128
10109eec:	00c00c04 	movi	r3,48
10109ef0:	10c05426 	beq	r2,r3,1010a044 <___vfiprintf_internal_r+0x87c>
10109ef4:	da801e17 	ldw	r10,120(sp)
10109ef8:	a8bfffc4 	addi	r2,r21,-1
10109efc:	a8ffffc5 	stb	r3,-1(r21)
10109f00:	50a7c83a 	sub	r19,r10,r2
10109f04:	102b883a 	mov	r21,r2
10109f08:	003f2f06 	br	10109bc8 <__alt_data_end+0xfffe9bc8>
10109f0c:	21003fcc 	andi	r4,r4,255
10109f10:	2003421e 	bne	r4,zero,1010ac1c <___vfiprintf_internal_r+0x1454>
10109f14:	00840474 	movhi	r2,4113
10109f18:	10844204 	addi	r2,r2,4360
10109f1c:	d8802615 	stw	r2,152(sp)
10109f20:	a080080c 	andi	r2,r20,32
10109f24:	1000aa26 	beq	r2,zero,1010a1d0 <___vfiprintf_internal_r+0xa08>
10109f28:	da802217 	ldw	r10,136(sp)
10109f2c:	54800017 	ldw	r18,0(r10)
10109f30:	54c00117 	ldw	r19,4(r10)
10109f34:	52800204 	addi	r10,r10,8
10109f38:	da802215 	stw	r10,136(sp)
10109f3c:	a080004c 	andi	r2,r20,1
10109f40:	1001d226 	beq	r2,zero,1010a68c <___vfiprintf_internal_r+0xec4>
10109f44:	94c4b03a 	or	r2,r18,r19
10109f48:	1002351e 	bne	r2,zero,1010a820 <___vfiprintf_internal_r+0x1058>
10109f4c:	d8001d85 	stb	zero,118(sp)
10109f50:	48022216 	blt	r9,zero,1010a7dc <___vfiprintf_internal_r+0x1014>
10109f54:	00bfdfc4 	movi	r2,-129
10109f58:	a0a8703a 	and	r20,r20,r2
10109f5c:	003f1506 	br	10109bb4 <__alt_data_end+0xfffe9bb4>
10109f60:	da802217 	ldw	r10,136(sp)
10109f64:	04800044 	movi	r18,1
10109f68:	d8001d85 	stb	zero,118(sp)
10109f6c:	50800017 	ldw	r2,0(r10)
10109f70:	52800104 	addi	r10,r10,4
10109f74:	da802215 	stw	r10,136(sp)
10109f78:	d8801005 	stb	r2,64(sp)
10109f7c:	9027883a 	mov	r19,r18
10109f80:	dd401004 	addi	r21,sp,64
10109f84:	0013883a 	mov	r9,zero
10109f88:	003f1706 	br	10109be8 <__alt_data_end+0xfffe9be8>
10109f8c:	21003fcc 	andi	r4,r4,255
10109f90:	2003201e 	bne	r4,zero,1010ac14 <___vfiprintf_internal_r+0x144c>
10109f94:	a080080c 	andi	r2,r20,32
10109f98:	10004b26 	beq	r2,zero,1010a0c8 <___vfiprintf_internal_r+0x900>
10109f9c:	da802217 	ldw	r10,136(sp)
10109fa0:	50800117 	ldw	r2,4(r10)
10109fa4:	54800017 	ldw	r18,0(r10)
10109fa8:	52800204 	addi	r10,r10,8
10109fac:	da802215 	stw	r10,136(sp)
10109fb0:	1027883a 	mov	r19,r2
10109fb4:	10022c16 	blt	r2,zero,1010a868 <___vfiprintf_internal_r+0x10a0>
10109fb8:	df001d83 	ldbu	fp,118(sp)
10109fbc:	48007216 	blt	r9,zero,1010a188 <___vfiprintf_internal_r+0x9c0>
10109fc0:	00ffdfc4 	movi	r3,-129
10109fc4:	94c4b03a 	or	r2,r18,r19
10109fc8:	a0e8703a 	and	r20,r20,r3
10109fcc:	1000cc26 	beq	r2,zero,1010a300 <___vfiprintf_internal_r+0xb38>
10109fd0:	98021026 	beq	r19,zero,1010a814 <___vfiprintf_internal_r+0x104c>
10109fd4:	dc402415 	stw	r17,144(sp)
10109fd8:	dc002515 	stw	r16,148(sp)
10109fdc:	9823883a 	mov	r17,r19
10109fe0:	9021883a 	mov	r16,r18
10109fe4:	dd401a04 	addi	r21,sp,104
10109fe8:	4825883a 	mov	r18,r9
10109fec:	4027883a 	mov	r19,r8
10109ff0:	8009883a 	mov	r4,r16
10109ff4:	880b883a 	mov	r5,r17
10109ff8:	01800284 	movi	r6,10
10109ffc:	000f883a 	mov	r7,zero
1010a000:	010b8800 	call	1010b880 <__umoddi3>
1010a004:	10800c04 	addi	r2,r2,48
1010a008:	ad7fffc4 	addi	r21,r21,-1
1010a00c:	8009883a 	mov	r4,r16
1010a010:	880b883a 	mov	r5,r17
1010a014:	a8800005 	stb	r2,0(r21)
1010a018:	01800284 	movi	r6,10
1010a01c:	000f883a 	mov	r7,zero
1010a020:	010b3080 	call	1010b308 <__udivdi3>
1010a024:	1021883a 	mov	r16,r2
1010a028:	10c4b03a 	or	r2,r2,r3
1010a02c:	1823883a 	mov	r17,r3
1010a030:	103fef1e 	bne	r2,zero,10109ff0 <__alt_data_end+0xfffe9ff0>
1010a034:	dc402417 	ldw	r17,144(sp)
1010a038:	dc002517 	ldw	r16,148(sp)
1010a03c:	9013883a 	mov	r9,r18
1010a040:	9811883a 	mov	r8,r19
1010a044:	da801e17 	ldw	r10,120(sp)
1010a048:	5567c83a 	sub	r19,r10,r21
1010a04c:	003ede06 	br	10109bc8 <__alt_data_end+0xfffe9bc8>
1010a050:	38803fcc 	andi	r2,r7,255
1010a054:	1080201c 	xori	r2,r2,128
1010a058:	10bfe004 	addi	r2,r2,-128
1010a05c:	1002371e 	bne	r2,zero,1010a93c <___vfiprintf_internal_r+0x1174>
1010a060:	01000044 	movi	r4,1
1010a064:	01c00804 	movi	r7,32
1010a068:	80c00007 	ldb	r3,0(r16)
1010a06c:	003e3506 	br	10109944 <__alt_data_end+0xfffe9944>
1010a070:	a5000054 	ori	r20,r20,1
1010a074:	80c00007 	ldb	r3,0(r16)
1010a078:	003e3206 	br	10109944 <__alt_data_end+0xfffe9944>
1010a07c:	a5002014 	ori	r20,r20,128
1010a080:	80c00007 	ldb	r3,0(r16)
1010a084:	003e2f06 	br	10109944 <__alt_data_end+0xfffe9944>
1010a088:	8015883a 	mov	r10,r16
1010a08c:	0023883a 	mov	r17,zero
1010a090:	18bff404 	addi	r2,r3,-48
1010a094:	50c00007 	ldb	r3,0(r10)
1010a098:	8c4002a4 	muli	r17,r17,10
1010a09c:	84000044 	addi	r16,r16,1
1010a0a0:	8015883a 	mov	r10,r16
1010a0a4:	1463883a 	add	r17,r2,r17
1010a0a8:	18bff404 	addi	r2,r3,-48
1010a0ac:	30bff92e 	bgeu	r6,r2,1010a094 <__alt_data_end+0xfffea094>
1010a0b0:	003e2506 	br	10109948 <__alt_data_end+0xfffe9948>
1010a0b4:	21003fcc 	andi	r4,r4,255
1010a0b8:	2002d41e 	bne	r4,zero,1010ac0c <___vfiprintf_internal_r+0x1444>
1010a0bc:	a5000414 	ori	r20,r20,16
1010a0c0:	a080080c 	andi	r2,r20,32
1010a0c4:	103fb51e 	bne	r2,zero,10109f9c <__alt_data_end+0xfffe9f9c>
1010a0c8:	a080040c 	andi	r2,r20,16
1010a0cc:	1001f826 	beq	r2,zero,1010a8b0 <___vfiprintf_internal_r+0x10e8>
1010a0d0:	da802217 	ldw	r10,136(sp)
1010a0d4:	54800017 	ldw	r18,0(r10)
1010a0d8:	52800104 	addi	r10,r10,4
1010a0dc:	da802215 	stw	r10,136(sp)
1010a0e0:	9027d7fa 	srai	r19,r18,31
1010a0e4:	9805883a 	mov	r2,r19
1010a0e8:	003fb206 	br	10109fb4 <__alt_data_end+0xfffe9fb4>
1010a0ec:	21003fcc 	andi	r4,r4,255
1010a0f0:	2002c41e 	bne	r4,zero,1010ac04 <___vfiprintf_internal_r+0x143c>
1010a0f4:	a5000414 	ori	r20,r20,16
1010a0f8:	a080080c 	andi	r2,r20,32
1010a0fc:	103f5f1e 	bne	r2,zero,10109e7c <__alt_data_end+0xfffe9e7c>
1010a100:	a080040c 	andi	r2,r20,16
1010a104:	10020f26 	beq	r2,zero,1010a944 <___vfiprintf_internal_r+0x117c>
1010a108:	da802217 	ldw	r10,136(sp)
1010a10c:	d8001d85 	stb	zero,118(sp)
1010a110:	0027883a 	mov	r19,zero
1010a114:	50800104 	addi	r2,r10,4
1010a118:	54800017 	ldw	r18,0(r10)
1010a11c:	48021116 	blt	r9,zero,1010a964 <___vfiprintf_internal_r+0x119c>
1010a120:	00ffdfc4 	movi	r3,-129
1010a124:	d8802215 	stw	r2,136(sp)
1010a128:	a0e8703a 	and	r20,r20,r3
1010a12c:	903f5e1e 	bne	r18,zero,10109ea8 <__alt_data_end+0xfffe9ea8>
1010a130:	0039883a 	mov	fp,zero
1010a134:	4802a626 	beq	r9,zero,1010abd0 <___vfiprintf_internal_r+0x1408>
1010a138:	0025883a 	mov	r18,zero
1010a13c:	0027883a 	mov	r19,zero
1010a140:	003f5a06 	br	10109eac <__alt_data_end+0xfffe9eac>
1010a144:	21003fcc 	andi	r4,r4,255
1010a148:	20029f1e 	bne	r4,zero,1010abc8 <___vfiprintf_internal_r+0x1400>
1010a14c:	a5000414 	ori	r20,r20,16
1010a150:	a080080c 	andi	r2,r20,32
1010a154:	10005e1e 	bne	r2,zero,1010a2d0 <___vfiprintf_internal_r+0xb08>
1010a158:	a080040c 	andi	r2,r20,16
1010a15c:	1001a21e 	bne	r2,zero,1010a7e8 <___vfiprintf_internal_r+0x1020>
1010a160:	a080100c 	andi	r2,r20,64
1010a164:	d8001d85 	stb	zero,118(sp)
1010a168:	da802217 	ldw	r10,136(sp)
1010a16c:	1002231e 	bne	r2,zero,1010a9fc <___vfiprintf_internal_r+0x1234>
1010a170:	50800104 	addi	r2,r10,4
1010a174:	54800017 	ldw	r18,0(r10)
1010a178:	0027883a 	mov	r19,zero
1010a17c:	4801a00e 	bge	r9,zero,1010a800 <___vfiprintf_internal_r+0x1038>
1010a180:	d8802215 	stw	r2,136(sp)
1010a184:	0039883a 	mov	fp,zero
1010a188:	94c4b03a 	or	r2,r18,r19
1010a18c:	103f901e 	bne	r2,zero,10109fd0 <__alt_data_end+0xfffe9fd0>
1010a190:	00800044 	movi	r2,1
1010a194:	10803fcc 	andi	r2,r2,255
1010a198:	00c00044 	movi	r3,1
1010a19c:	10c05926 	beq	r2,r3,1010a304 <___vfiprintf_internal_r+0xb3c>
1010a1a0:	00c00084 	movi	r3,2
1010a1a4:	10ffe41e 	bne	r2,r3,1010a138 <__alt_data_end+0xfffea138>
1010a1a8:	0025883a 	mov	r18,zero
1010a1ac:	0027883a 	mov	r19,zero
1010a1b0:	00013d06 	br	1010a6a8 <___vfiprintf_internal_r+0xee0>
1010a1b4:	21003fcc 	andi	r4,r4,255
1010a1b8:	2002811e 	bne	r4,zero,1010abc0 <___vfiprintf_internal_r+0x13f8>
1010a1bc:	00840474 	movhi	r2,4113
1010a1c0:	10843d04 	addi	r2,r2,4340
1010a1c4:	d8802615 	stw	r2,152(sp)
1010a1c8:	a080080c 	andi	r2,r20,32
1010a1cc:	103f561e 	bne	r2,zero,10109f28 <__alt_data_end+0xfffe9f28>
1010a1d0:	a080040c 	andi	r2,r20,16
1010a1d4:	1001d126 	beq	r2,zero,1010a91c <___vfiprintf_internal_r+0x1154>
1010a1d8:	da802217 	ldw	r10,136(sp)
1010a1dc:	0027883a 	mov	r19,zero
1010a1e0:	54800017 	ldw	r18,0(r10)
1010a1e4:	52800104 	addi	r10,r10,4
1010a1e8:	da802215 	stw	r10,136(sp)
1010a1ec:	003f5306 	br	10109f3c <__alt_data_end+0xfffe9f3c>
1010a1f0:	da802217 	ldw	r10,136(sp)
1010a1f4:	d8001d85 	stb	zero,118(sp)
1010a1f8:	55400017 	ldw	r21,0(r10)
1010a1fc:	50c00104 	addi	r3,r10,4
1010a200:	a8024226 	beq	r21,zero,1010ab0c <___vfiprintf_internal_r+0x1344>
1010a204:	48021816 	blt	r9,zero,1010aa68 <___vfiprintf_internal_r+0x12a0>
1010a208:	480d883a 	mov	r6,r9
1010a20c:	000b883a 	mov	r5,zero
1010a210:	a809883a 	mov	r4,r21
1010a214:	d8c02a15 	stw	r3,168(sp)
1010a218:	da002b15 	stw	r8,172(sp)
1010a21c:	da402c15 	stw	r9,176(sp)
1010a220:	0107c1c0 	call	10107c1c <memchr>
1010a224:	d8c02a17 	ldw	r3,168(sp)
1010a228:	da002b17 	ldw	r8,172(sp)
1010a22c:	da402c17 	ldw	r9,176(sp)
1010a230:	10024826 	beq	r2,zero,1010ab54 <___vfiprintf_internal_r+0x138c>
1010a234:	1567c83a 	sub	r19,r2,r21
1010a238:	df001d83 	ldbu	fp,118(sp)
1010a23c:	d8c02215 	stw	r3,136(sp)
1010a240:	0013883a 	mov	r9,zero
1010a244:	003e6006 	br	10109bc8 <__alt_data_end+0xfffe9bc8>
1010a248:	21003fcc 	andi	r4,r4,255
1010a24c:	203fc026 	beq	r4,zero,1010a150 <__alt_data_end+0xfffea150>
1010a250:	d9c01d85 	stb	r7,118(sp)
1010a254:	003fbe06 	br	1010a150 <__alt_data_end+0xfffea150>
1010a258:	da802217 	ldw	r10,136(sp)
1010a25c:	54400017 	ldw	r17,0(r10)
1010a260:	50800104 	addi	r2,r10,4
1010a264:	883e3b16 	blt	r17,zero,10109b54 <__alt_data_end+0xfffe9b54>
1010a268:	d8802215 	stw	r2,136(sp)
1010a26c:	80c00007 	ldb	r3,0(r16)
1010a270:	003db406 	br	10109944 <__alt_data_end+0xfffe9944>
1010a274:	01000044 	movi	r4,1
1010a278:	01c00ac4 	movi	r7,43
1010a27c:	80c00007 	ldb	r3,0(r16)
1010a280:	003db006 	br	10109944 <__alt_data_end+0xfffe9944>
1010a284:	80c00007 	ldb	r3,0(r16)
1010a288:	82800044 	addi	r10,r16,1
1010a28c:	1b423c26 	beq	r3,r13,1010ab80 <___vfiprintf_internal_r+0x13b8>
1010a290:	18bff404 	addi	r2,r3,-48
1010a294:	0013883a 	mov	r9,zero
1010a298:	30822b36 	bltu	r6,r2,1010ab48 <___vfiprintf_internal_r+0x1380>
1010a29c:	50c00007 	ldb	r3,0(r10)
1010a2a0:	4a4002a4 	muli	r9,r9,10
1010a2a4:	54000044 	addi	r16,r10,1
1010a2a8:	8015883a 	mov	r10,r16
1010a2ac:	4893883a 	add	r9,r9,r2
1010a2b0:	18bff404 	addi	r2,r3,-48
1010a2b4:	30bff92e 	bgeu	r6,r2,1010a29c <__alt_data_end+0xfffea29c>
1010a2b8:	483da30e 	bge	r9,zero,10109948 <__alt_data_end+0xfffe9948>
1010a2bc:	027fffc4 	movi	r9,-1
1010a2c0:	003da106 	br	10109948 <__alt_data_end+0xfffe9948>
1010a2c4:	a5001014 	ori	r20,r20,64
1010a2c8:	80c00007 	ldb	r3,0(r16)
1010a2cc:	003d9d06 	br	10109944 <__alt_data_end+0xfffe9944>
1010a2d0:	da802217 	ldw	r10,136(sp)
1010a2d4:	d8001d85 	stb	zero,118(sp)
1010a2d8:	50c00204 	addi	r3,r10,8
1010a2dc:	54800017 	ldw	r18,0(r10)
1010a2e0:	54c00117 	ldw	r19,4(r10)
1010a2e4:	4801ca16 	blt	r9,zero,1010aa10 <___vfiprintf_internal_r+0x1248>
1010a2e8:	013fdfc4 	movi	r4,-129
1010a2ec:	94c4b03a 	or	r2,r18,r19
1010a2f0:	d8c02215 	stw	r3,136(sp)
1010a2f4:	a128703a 	and	r20,r20,r4
1010a2f8:	0039883a 	mov	fp,zero
1010a2fc:	103f341e 	bne	r2,zero,10109fd0 <__alt_data_end+0xfffe9fd0>
1010a300:	483e2e26 	beq	r9,zero,10109bbc <__alt_data_end+0xfffe9bbc>
1010a304:	0025883a 	mov	r18,zero
1010a308:	94800c04 	addi	r18,r18,48
1010a30c:	dc8019c5 	stb	r18,103(sp)
1010a310:	dcc02717 	ldw	r19,156(sp)
1010a314:	dd4019c4 	addi	r21,sp,103
1010a318:	003e2b06 	br	10109bc8 <__alt_data_end+0xfffe9bc8>
1010a31c:	21003fcc 	andi	r4,r4,255
1010a320:	2002361e 	bne	r4,zero,1010abfc <___vfiprintf_internal_r+0x1434>
1010a324:	1801c126 	beq	r3,zero,1010aa2c <___vfiprintf_internal_r+0x1264>
1010a328:	04800044 	movi	r18,1
1010a32c:	d8c01005 	stb	r3,64(sp)
1010a330:	d8001d85 	stb	zero,118(sp)
1010a334:	9027883a 	mov	r19,r18
1010a338:	dd401004 	addi	r21,sp,64
1010a33c:	003f1106 	br	10109f84 <__alt_data_end+0xfffe9f84>
1010a340:	d9402117 	ldw	r5,132(sp)
1010a344:	d9002017 	ldw	r4,128(sp)
1010a348:	d9801a04 	addi	r6,sp,104
1010a34c:	d9c02b15 	stw	r7,172(sp)
1010a350:	dbc02a15 	stw	r15,168(sp)
1010a354:	01096b40 	call	101096b4 <__sprint_r.part.0>
1010a358:	d9c02b17 	ldw	r7,172(sp)
1010a35c:	dbc02a17 	ldw	r15,168(sp)
1010a360:	10006d1e 	bne	r2,zero,1010a518 <___vfiprintf_internal_r+0xd50>
1010a364:	d9801b17 	ldw	r6,108(sp)
1010a368:	d8801c17 	ldw	r2,112(sp)
1010a36c:	d811883a 	mov	r8,sp
1010a370:	31400044 	addi	r5,r6,1
1010a374:	003e3306 	br	10109c44 <__alt_data_end+0xfffe9c44>
1010a378:	d9401b17 	ldw	r5,108(sp)
1010a37c:	d8801c17 	ldw	r2,112(sp)
1010a380:	29000044 	addi	r4,r5,1
1010a384:	d8c01d87 	ldb	r3,118(sp)
1010a388:	183e4d26 	beq	r3,zero,10109cc0 <__alt_data_end+0xfffe9cc0>
1010a38c:	00c00044 	movi	r3,1
1010a390:	d9401d84 	addi	r5,sp,118
1010a394:	10c5883a 	add	r2,r2,r3
1010a398:	41400015 	stw	r5,0(r8)
1010a39c:	40c00115 	stw	r3,4(r8)
1010a3a0:	d8801c15 	stw	r2,112(sp)
1010a3a4:	d9001b15 	stw	r4,108(sp)
1010a3a8:	014001c4 	movi	r5,7
1010a3ac:	2900a90e 	bge	r5,r4,1010a654 <___vfiprintf_internal_r+0xe8c>
1010a3b0:	1000da1e 	bne	r2,zero,1010a71c <___vfiprintf_internal_r+0xf54>
1010a3b4:	7000ab1e 	bne	r14,zero,1010a664 <___vfiprintf_internal_r+0xe9c>
1010a3b8:	000b883a 	mov	r5,zero
1010a3bc:	1809883a 	mov	r4,r3
1010a3c0:	d811883a 	mov	r8,sp
1010a3c4:	00c02004 	movi	r3,128
1010a3c8:	e0fe4d26 	beq	fp,r3,10109d00 <__alt_data_end+0xfffe9d00>
1010a3cc:	4cf9c83a 	sub	fp,r9,r19
1010a3d0:	073e7b0e 	bge	zero,fp,10109dc0 <__alt_data_end+0xfffe9dc0>
1010a3d4:	01c00404 	movi	r7,16
1010a3d8:	3f01900e 	bge	r7,fp,1010aa1c <___vfiprintf_internal_r+0x1254>
1010a3dc:	00c40474 	movhi	r3,4113
1010a3e0:	18c4a204 	addi	r3,r3,4744
1010a3e4:	d8c02415 	stw	r3,144(sp)
1010a3e8:	034001c4 	movi	r13,7
1010a3ec:	00000506 	br	1010a404 <___vfiprintf_internal_r+0xc3c>
1010a3f0:	29000084 	addi	r4,r5,2
1010a3f4:	42000204 	addi	r8,r8,8
1010a3f8:	180b883a 	mov	r5,r3
1010a3fc:	e73ffc04 	addi	fp,fp,-16
1010a400:	3f000d0e 	bge	r7,fp,1010a438 <___vfiprintf_internal_r+0xc70>
1010a404:	10800404 	addi	r2,r2,16
1010a408:	28c00044 	addi	r3,r5,1
1010a40c:	45c00015 	stw	r23,0(r8)
1010a410:	41c00115 	stw	r7,4(r8)
1010a414:	d8801c15 	stw	r2,112(sp)
1010a418:	d8c01b15 	stw	r3,108(sp)
1010a41c:	68fff40e 	bge	r13,r3,1010a3f0 <__alt_data_end+0xfffea3f0>
1010a420:	1000101e 	bne	r2,zero,1010a464 <___vfiprintf_internal_r+0xc9c>
1010a424:	e73ffc04 	addi	fp,fp,-16
1010a428:	01000044 	movi	r4,1
1010a42c:	000b883a 	mov	r5,zero
1010a430:	d811883a 	mov	r8,sp
1010a434:	3f3ff316 	blt	r7,fp,1010a404 <__alt_data_end+0xfffea404>
1010a438:	da802417 	ldw	r10,144(sp)
1010a43c:	1705883a 	add	r2,r2,fp
1010a440:	47000115 	stw	fp,4(r8)
1010a444:	42800015 	stw	r10,0(r8)
1010a448:	d8801c15 	stw	r2,112(sp)
1010a44c:	d9001b15 	stw	r4,108(sp)
1010a450:	00c001c4 	movi	r3,7
1010a454:	19003616 	blt	r3,r4,1010a530 <___vfiprintf_internal_r+0xd68>
1010a458:	42000204 	addi	r8,r8,8
1010a45c:	21000044 	addi	r4,r4,1
1010a460:	003e5706 	br	10109dc0 <__alt_data_end+0xfffe9dc0>
1010a464:	d9402117 	ldw	r5,132(sp)
1010a468:	d9002017 	ldw	r4,128(sp)
1010a46c:	d9801a04 	addi	r6,sp,104
1010a470:	d9c02b15 	stw	r7,172(sp)
1010a474:	db402a15 	stw	r13,168(sp)
1010a478:	01096b40 	call	101096b4 <__sprint_r.part.0>
1010a47c:	d9c02b17 	ldw	r7,172(sp)
1010a480:	db402a17 	ldw	r13,168(sp)
1010a484:	1000241e 	bne	r2,zero,1010a518 <___vfiprintf_internal_r+0xd50>
1010a488:	d9401b17 	ldw	r5,108(sp)
1010a48c:	d8801c17 	ldw	r2,112(sp)
1010a490:	d811883a 	mov	r8,sp
1010a494:	29000044 	addi	r4,r5,1
1010a498:	003fd806 	br	1010a3fc <__alt_data_end+0xfffea3fc>
1010a49c:	d9401b17 	ldw	r5,108(sp)
1010a4a0:	00c40474 	movhi	r3,4113
1010a4a4:	18c4a604 	addi	r3,r3,4760
1010a4a8:	d8c02415 	stw	r3,144(sp)
1010a4ac:	29400044 	addi	r5,r5,1
1010a4b0:	d8c02417 	ldw	r3,144(sp)
1010a4b4:	14c5883a 	add	r2,r2,r19
1010a4b8:	44c00115 	stw	r19,4(r8)
1010a4bc:	40c00015 	stw	r3,0(r8)
1010a4c0:	d8801c15 	stw	r2,112(sp)
1010a4c4:	d9401b15 	stw	r5,108(sp)
1010a4c8:	00c001c4 	movi	r3,7
1010a4cc:	1940070e 	bge	r3,r5,1010a4ec <___vfiprintf_internal_r+0xd24>
1010a4d0:	103e4826 	beq	r2,zero,10109df4 <__alt_data_end+0xfffe9df4>
1010a4d4:	d9402117 	ldw	r5,132(sp)
1010a4d8:	d9002017 	ldw	r4,128(sp)
1010a4dc:	d9801a04 	addi	r6,sp,104
1010a4e0:	01096b40 	call	101096b4 <__sprint_r.part.0>
1010a4e4:	10000c1e 	bne	r2,zero,1010a518 <___vfiprintf_internal_r+0xd50>
1010a4e8:	d8801c17 	ldw	r2,112(sp)
1010a4ec:	8c80010e 	bge	r17,r18,1010a4f4 <___vfiprintf_internal_r+0xd2c>
1010a4f0:	9023883a 	mov	r17,r18
1010a4f4:	da802317 	ldw	r10,140(sp)
1010a4f8:	5455883a 	add	r10,r10,r17
1010a4fc:	da802315 	stw	r10,140(sp)
1010a500:	103e4126 	beq	r2,zero,10109e08 <__alt_data_end+0xfffe9e08>
1010a504:	d9402117 	ldw	r5,132(sp)
1010a508:	d9002017 	ldw	r4,128(sp)
1010a50c:	d9801a04 	addi	r6,sp,104
1010a510:	01096b40 	call	101096b4 <__sprint_r.part.0>
1010a514:	103e3c26 	beq	r2,zero,10109e08 <__alt_data_end+0xfffe9e08>
1010a518:	dd002117 	ldw	r20,132(sp)
1010a51c:	a080030b 	ldhu	r2,12(r20)
1010a520:	1080100c 	andi	r2,r2,64
1010a524:	1001231e 	bne	r2,zero,1010a9b4 <___vfiprintf_internal_r+0x11ec>
1010a528:	d8802317 	ldw	r2,140(sp)
1010a52c:	003d7b06 	br	10109b1c <__alt_data_end+0xfffe9b1c>
1010a530:	1000991e 	bne	r2,zero,1010a798 <___vfiprintf_internal_r+0xfd0>
1010a534:	00c00044 	movi	r3,1
1010a538:	9805883a 	mov	r2,r19
1010a53c:	dd400015 	stw	r21,0(sp)
1010a540:	dcc00115 	stw	r19,4(sp)
1010a544:	dcc01c15 	stw	r19,112(sp)
1010a548:	d8c01b15 	stw	r3,108(sp)
1010a54c:	d811883a 	mov	r8,sp
1010a550:	42000204 	addi	r8,r8,8
1010a554:	a2c0010c 	andi	r11,r20,4
1010a558:	583fe426 	beq	r11,zero,1010a4ec <__alt_data_end+0xfffea4ec>
1010a55c:	8ca7c83a 	sub	r19,r17,r18
1010a560:	04ffe20e 	bge	zero,r19,1010a4ec <__alt_data_end+0xfffea4ec>
1010a564:	01c00404 	movi	r7,16
1010a568:	3cffcc0e 	bge	r7,r19,1010a49c <__alt_data_end+0xfffea49c>
1010a56c:	02840474 	movhi	r10,4113
1010a570:	5284a604 	addi	r10,r10,4760
1010a574:	d9001b17 	ldw	r4,108(sp)
1010a578:	da802415 	stw	r10,144(sp)
1010a57c:	382b883a 	mov	r21,r7
1010a580:	050001c4 	movi	r20,7
1010a584:	df002017 	ldw	fp,128(sp)
1010a588:	00000506 	br	1010a5a0 <___vfiprintf_internal_r+0xdd8>
1010a58c:	21400084 	addi	r5,r4,2
1010a590:	42000204 	addi	r8,r8,8
1010a594:	1809883a 	mov	r4,r3
1010a598:	9cfffc04 	addi	r19,r19,-16
1010a59c:	acffc40e 	bge	r21,r19,1010a4b0 <__alt_data_end+0xfffea4b0>
1010a5a0:	10800404 	addi	r2,r2,16
1010a5a4:	20c00044 	addi	r3,r4,1
1010a5a8:	45800015 	stw	r22,0(r8)
1010a5ac:	45400115 	stw	r21,4(r8)
1010a5b0:	d8801c15 	stw	r2,112(sp)
1010a5b4:	d8c01b15 	stw	r3,108(sp)
1010a5b8:	a0fff40e 	bge	r20,r3,1010a58c <__alt_data_end+0xfffea58c>
1010a5bc:	1000041e 	bne	r2,zero,1010a5d0 <___vfiprintf_internal_r+0xe08>
1010a5c0:	01400044 	movi	r5,1
1010a5c4:	0009883a 	mov	r4,zero
1010a5c8:	d811883a 	mov	r8,sp
1010a5cc:	003ff206 	br	1010a598 <__alt_data_end+0xfffea598>
1010a5d0:	d9402117 	ldw	r5,132(sp)
1010a5d4:	d9801a04 	addi	r6,sp,104
1010a5d8:	e009883a 	mov	r4,fp
1010a5dc:	01096b40 	call	101096b4 <__sprint_r.part.0>
1010a5e0:	103fcd1e 	bne	r2,zero,1010a518 <__alt_data_end+0xfffea518>
1010a5e4:	d9001b17 	ldw	r4,108(sp)
1010a5e8:	d8801c17 	ldw	r2,112(sp)
1010a5ec:	d811883a 	mov	r8,sp
1010a5f0:	21400044 	addi	r5,r4,1
1010a5f4:	003fe806 	br	1010a598 <__alt_data_end+0xfffea598>
1010a5f8:	d9402117 	ldw	r5,132(sp)
1010a5fc:	d9002017 	ldw	r4,128(sp)
1010a600:	d9801a04 	addi	r6,sp,104
1010a604:	d9c02b15 	stw	r7,172(sp)
1010a608:	db402a15 	stw	r13,168(sp)
1010a60c:	01096b40 	call	101096b4 <__sprint_r.part.0>
1010a610:	d9c02b17 	ldw	r7,172(sp)
1010a614:	db402a17 	ldw	r13,168(sp)
1010a618:	103fbf1e 	bne	r2,zero,1010a518 <__alt_data_end+0xfffea518>
1010a61c:	d9401b17 	ldw	r5,108(sp)
1010a620:	d8801c17 	ldw	r2,112(sp)
1010a624:	d811883a 	mov	r8,sp
1010a628:	29800044 	addi	r6,r5,1
1010a62c:	003dc406 	br	10109d40 <__alt_data_end+0xfffe9d40>
1010a630:	1000d21e 	bne	r2,zero,1010a97c <___vfiprintf_internal_r+0x11b4>
1010a634:	d8c01d87 	ldb	r3,118(sp)
1010a638:	18009526 	beq	r3,zero,1010a890 <___vfiprintf_internal_r+0x10c8>
1010a63c:	00800044 	movi	r2,1
1010a640:	d8c01d84 	addi	r3,sp,118
1010a644:	1009883a 	mov	r4,r2
1010a648:	d8c00015 	stw	r3,0(sp)
1010a64c:	d8800115 	stw	r2,4(sp)
1010a650:	d811883a 	mov	r8,sp
1010a654:	200b883a 	mov	r5,r4
1010a658:	42000204 	addi	r8,r8,8
1010a65c:	21000044 	addi	r4,r4,1
1010a660:	003d9706 	br	10109cc0 <__alt_data_end+0xfffe9cc0>
1010a664:	d9001d04 	addi	r4,sp,116
1010a668:	00800084 	movi	r2,2
1010a66c:	d9000015 	stw	r4,0(sp)
1010a670:	d8800115 	stw	r2,4(sp)
1010a674:	1809883a 	mov	r4,r3
1010a678:	d811883a 	mov	r8,sp
1010a67c:	200b883a 	mov	r5,r4
1010a680:	42000204 	addi	r8,r8,8
1010a684:	21000044 	addi	r4,r4,1
1010a688:	003f4e06 	br	1010a3c4 <__alt_data_end+0xfffea3c4>
1010a68c:	d8001d85 	stb	zero,118(sp)
1010a690:	48005016 	blt	r9,zero,1010a7d4 <___vfiprintf_internal_r+0x100c>
1010a694:	00ffdfc4 	movi	r3,-129
1010a698:	94c4b03a 	or	r2,r18,r19
1010a69c:	a0e8703a 	and	r20,r20,r3
1010a6a0:	103d4426 	beq	r2,zero,10109bb4 <__alt_data_end+0xfffe9bb4>
1010a6a4:	0039883a 	mov	fp,zero
1010a6a8:	d9002617 	ldw	r4,152(sp)
1010a6ac:	dd401a04 	addi	r21,sp,104
1010a6b0:	908003cc 	andi	r2,r18,15
1010a6b4:	9806973a 	slli	r3,r19,28
1010a6b8:	2085883a 	add	r2,r4,r2
1010a6bc:	9024d13a 	srli	r18,r18,4
1010a6c0:	10800003 	ldbu	r2,0(r2)
1010a6c4:	9826d13a 	srli	r19,r19,4
1010a6c8:	ad7fffc4 	addi	r21,r21,-1
1010a6cc:	1ca4b03a 	or	r18,r3,r18
1010a6d0:	a8800005 	stb	r2,0(r21)
1010a6d4:	94c4b03a 	or	r2,r18,r19
1010a6d8:	103ff51e 	bne	r2,zero,1010a6b0 <__alt_data_end+0xfffea6b0>
1010a6dc:	003e5906 	br	1010a044 <__alt_data_end+0xfffea044>
1010a6e0:	d9402117 	ldw	r5,132(sp)
1010a6e4:	d9002017 	ldw	r4,128(sp)
1010a6e8:	d9801a04 	addi	r6,sp,104
1010a6ec:	01096b40 	call	101096b4 <__sprint_r.part.0>
1010a6f0:	103f891e 	bne	r2,zero,1010a518 <__alt_data_end+0xfffea518>
1010a6f4:	d8801c17 	ldw	r2,112(sp)
1010a6f8:	d811883a 	mov	r8,sp
1010a6fc:	003f9506 	br	1010a554 <__alt_data_end+0xfffea554>
1010a700:	d9402117 	ldw	r5,132(sp)
1010a704:	d9002017 	ldw	r4,128(sp)
1010a708:	d9801a04 	addi	r6,sp,104
1010a70c:	01096b40 	call	101096b4 <__sprint_r.part.0>
1010a710:	103f811e 	bne	r2,zero,1010a518 <__alt_data_end+0xfffea518>
1010a714:	d811883a 	mov	r8,sp
1010a718:	003ced06 	br	10109ad0 <__alt_data_end+0xfffe9ad0>
1010a71c:	d9402117 	ldw	r5,132(sp)
1010a720:	d9002017 	ldw	r4,128(sp)
1010a724:	d9801a04 	addi	r6,sp,104
1010a728:	da402c15 	stw	r9,176(sp)
1010a72c:	db802a15 	stw	r14,168(sp)
1010a730:	01096b40 	call	101096b4 <__sprint_r.part.0>
1010a734:	da402c17 	ldw	r9,176(sp)
1010a738:	db802a17 	ldw	r14,168(sp)
1010a73c:	103f761e 	bne	r2,zero,1010a518 <__alt_data_end+0xfffea518>
1010a740:	d9401b17 	ldw	r5,108(sp)
1010a744:	d8801c17 	ldw	r2,112(sp)
1010a748:	d811883a 	mov	r8,sp
1010a74c:	29000044 	addi	r4,r5,1
1010a750:	003d5b06 	br	10109cc0 <__alt_data_end+0xfffe9cc0>
1010a754:	d9402117 	ldw	r5,132(sp)
1010a758:	d9002017 	ldw	r4,128(sp)
1010a75c:	d9801a04 	addi	r6,sp,104
1010a760:	da402c15 	stw	r9,176(sp)
1010a764:	01096b40 	call	101096b4 <__sprint_r.part.0>
1010a768:	da402c17 	ldw	r9,176(sp)
1010a76c:	103f6a1e 	bne	r2,zero,1010a518 <__alt_data_end+0xfffea518>
1010a770:	d9401b17 	ldw	r5,108(sp)
1010a774:	d8801c17 	ldw	r2,112(sp)
1010a778:	d811883a 	mov	r8,sp
1010a77c:	29000044 	addi	r4,r5,1
1010a780:	003f1006 	br	1010a3c4 <__alt_data_end+0xfffea3c4>
1010a784:	1000c31e 	bne	r2,zero,1010aa94 <___vfiprintf_internal_r+0x12cc>
1010a788:	01000044 	movi	r4,1
1010a78c:	000b883a 	mov	r5,zero
1010a790:	d811883a 	mov	r8,sp
1010a794:	003f0d06 	br	1010a3cc <__alt_data_end+0xfffea3cc>
1010a798:	d9402117 	ldw	r5,132(sp)
1010a79c:	d9002017 	ldw	r4,128(sp)
1010a7a0:	d9801a04 	addi	r6,sp,104
1010a7a4:	01096b40 	call	101096b4 <__sprint_r.part.0>
1010a7a8:	103f5b1e 	bne	r2,zero,1010a518 <__alt_data_end+0xfffea518>
1010a7ac:	d9001b17 	ldw	r4,108(sp)
1010a7b0:	d8801c17 	ldw	r2,112(sp)
1010a7b4:	d811883a 	mov	r8,sp
1010a7b8:	21000044 	addi	r4,r4,1
1010a7bc:	003d8006 	br	10109dc0 <__alt_data_end+0xfffe9dc0>
1010a7c0:	01040474 	movhi	r4,4113
1010a7c4:	21044204 	addi	r4,r4,4360
1010a7c8:	d9002615 	stw	r4,152(sp)
1010a7cc:	d8c02215 	stw	r3,136(sp)
1010a7d0:	1029883a 	mov	r20,r2
1010a7d4:	94c4b03a 	or	r2,r18,r19
1010a7d8:	103fb21e 	bne	r2,zero,1010a6a4 <__alt_data_end+0xfffea6a4>
1010a7dc:	0039883a 	mov	fp,zero
1010a7e0:	00800084 	movi	r2,2
1010a7e4:	003e6b06 	br	1010a194 <__alt_data_end+0xfffea194>
1010a7e8:	da802217 	ldw	r10,136(sp)
1010a7ec:	d8001d85 	stb	zero,118(sp)
1010a7f0:	0027883a 	mov	r19,zero
1010a7f4:	50800104 	addi	r2,r10,4
1010a7f8:	54800017 	ldw	r18,0(r10)
1010a7fc:	483e6016 	blt	r9,zero,1010a180 <__alt_data_end+0xfffea180>
1010a800:	00ffdfc4 	movi	r3,-129
1010a804:	d8802215 	stw	r2,136(sp)
1010a808:	a0e8703a 	and	r20,r20,r3
1010a80c:	0039883a 	mov	fp,zero
1010a810:	903ebb26 	beq	r18,zero,1010a300 <__alt_data_end+0xfffea300>
1010a814:	00800244 	movi	r2,9
1010a818:	14bdee36 	bltu	r2,r18,10109fd4 <__alt_data_end+0xfffe9fd4>
1010a81c:	003eba06 	br	1010a308 <__alt_data_end+0xfffea308>
1010a820:	00800c04 	movi	r2,48
1010a824:	d8c01d45 	stb	r3,117(sp)
1010a828:	d8801d05 	stb	r2,116(sp)
1010a82c:	d8001d85 	stb	zero,118(sp)
1010a830:	a0c00094 	ori	r3,r20,2
1010a834:	4800a916 	blt	r9,zero,1010aadc <___vfiprintf_internal_r+0x1314>
1010a838:	00bfdfc4 	movi	r2,-129
1010a83c:	a096703a 	and	r11,r20,r2
1010a840:	5d000094 	ori	r20,r11,2
1010a844:	0039883a 	mov	fp,zero
1010a848:	003f9706 	br	1010a6a8 <__alt_data_end+0xfffea6a8>
1010a84c:	8025883a 	mov	r18,r16
1010a850:	003c2e06 	br	1010990c <__alt_data_end+0xfffe990c>
1010a854:	00840474 	movhi	r2,4113
1010a858:	10844204 	addi	r2,r2,4360
1010a85c:	0039883a 	mov	fp,zero
1010a860:	d8802615 	stw	r2,152(sp)
1010a864:	003f9006 	br	1010a6a8 <__alt_data_end+0xfffea6a8>
1010a868:	04a5c83a 	sub	r18,zero,r18
1010a86c:	07000b44 	movi	fp,45
1010a870:	9004c03a 	cmpne	r2,r18,zero
1010a874:	04e7c83a 	sub	r19,zero,r19
1010a878:	df001d85 	stb	fp,118(sp)
1010a87c:	98a7c83a 	sub	r19,r19,r2
1010a880:	48009f16 	blt	r9,zero,1010ab00 <___vfiprintf_internal_r+0x1338>
1010a884:	00bfdfc4 	movi	r2,-129
1010a888:	a0a8703a 	and	r20,r20,r2
1010a88c:	003dd006 	br	10109fd0 <__alt_data_end+0xfffe9fd0>
1010a890:	70004c26 	beq	r14,zero,1010a9c4 <___vfiprintf_internal_r+0x11fc>
1010a894:	00800084 	movi	r2,2
1010a898:	d8c01d04 	addi	r3,sp,116
1010a89c:	d8c00015 	stw	r3,0(sp)
1010a8a0:	d8800115 	stw	r2,4(sp)
1010a8a4:	01000044 	movi	r4,1
1010a8a8:	d811883a 	mov	r8,sp
1010a8ac:	003f7306 	br	1010a67c <__alt_data_end+0xfffea67c>
1010a8b0:	a080100c 	andi	r2,r20,64
1010a8b4:	da802217 	ldw	r10,136(sp)
1010a8b8:	103e0626 	beq	r2,zero,1010a0d4 <__alt_data_end+0xfffea0d4>
1010a8bc:	5480000f 	ldh	r18,0(r10)
1010a8c0:	52800104 	addi	r10,r10,4
1010a8c4:	da802215 	stw	r10,136(sp)
1010a8c8:	9027d7fa 	srai	r19,r18,31
1010a8cc:	9805883a 	mov	r2,r19
1010a8d0:	003db806 	br	10109fb4 <__alt_data_end+0xfffe9fb4>
1010a8d4:	a080040c 	andi	r2,r20,16
1010a8d8:	1000091e 	bne	r2,zero,1010a900 <___vfiprintf_internal_r+0x1138>
1010a8dc:	a2c0100c 	andi	r11,r20,64
1010a8e0:	58000726 	beq	r11,zero,1010a900 <___vfiprintf_internal_r+0x1138>
1010a8e4:	da802217 	ldw	r10,136(sp)
1010a8e8:	50800017 	ldw	r2,0(r10)
1010a8ec:	52800104 	addi	r10,r10,4
1010a8f0:	da802215 	stw	r10,136(sp)
1010a8f4:	da802317 	ldw	r10,140(sp)
1010a8f8:	1280000d 	sth	r10,0(r2)
1010a8fc:	003be706 	br	1010989c <__alt_data_end+0xfffe989c>
1010a900:	da802217 	ldw	r10,136(sp)
1010a904:	50800017 	ldw	r2,0(r10)
1010a908:	52800104 	addi	r10,r10,4
1010a90c:	da802215 	stw	r10,136(sp)
1010a910:	da802317 	ldw	r10,140(sp)
1010a914:	12800015 	stw	r10,0(r2)
1010a918:	003be006 	br	1010989c <__alt_data_end+0xfffe989c>
1010a91c:	a080100c 	andi	r2,r20,64
1010a920:	da802217 	ldw	r10,136(sp)
1010a924:	10003026 	beq	r2,zero,1010a9e8 <___vfiprintf_internal_r+0x1220>
1010a928:	5480000b 	ldhu	r18,0(r10)
1010a92c:	52800104 	addi	r10,r10,4
1010a930:	0027883a 	mov	r19,zero
1010a934:	da802215 	stw	r10,136(sp)
1010a938:	003d8006 	br	10109f3c <__alt_data_end+0xfffe9f3c>
1010a93c:	80c00007 	ldb	r3,0(r16)
1010a940:	003c0006 	br	10109944 <__alt_data_end+0xfffe9944>
1010a944:	a080100c 	andi	r2,r20,64
1010a948:	d8001d85 	stb	zero,118(sp)
1010a94c:	da802217 	ldw	r10,136(sp)
1010a950:	1000201e 	bne	r2,zero,1010a9d4 <___vfiprintf_internal_r+0x120c>
1010a954:	50800104 	addi	r2,r10,4
1010a958:	54800017 	ldw	r18,0(r10)
1010a95c:	0027883a 	mov	r19,zero
1010a960:	483def0e 	bge	r9,zero,1010a120 <__alt_data_end+0xfffea120>
1010a964:	94c6b03a 	or	r3,r18,r19
1010a968:	d8802215 	stw	r2,136(sp)
1010a96c:	183d4e1e 	bne	r3,zero,10109ea8 <__alt_data_end+0xfffe9ea8>
1010a970:	0039883a 	mov	fp,zero
1010a974:	0005883a 	mov	r2,zero
1010a978:	003e0606 	br	1010a194 <__alt_data_end+0xfffea194>
1010a97c:	d9402117 	ldw	r5,132(sp)
1010a980:	d9002017 	ldw	r4,128(sp)
1010a984:	d9801a04 	addi	r6,sp,104
1010a988:	da402c15 	stw	r9,176(sp)
1010a98c:	db802a15 	stw	r14,168(sp)
1010a990:	01096b40 	call	101096b4 <__sprint_r.part.0>
1010a994:	da402c17 	ldw	r9,176(sp)
1010a998:	db802a17 	ldw	r14,168(sp)
1010a99c:	103ede1e 	bne	r2,zero,1010a518 <__alt_data_end+0xfffea518>
1010a9a0:	d9401b17 	ldw	r5,108(sp)
1010a9a4:	d8801c17 	ldw	r2,112(sp)
1010a9a8:	d811883a 	mov	r8,sp
1010a9ac:	29000044 	addi	r4,r5,1
1010a9b0:	003e7406 	br	1010a384 <__alt_data_end+0xfffea384>
1010a9b4:	00bfffc4 	movi	r2,-1
1010a9b8:	003c5806 	br	10109b1c <__alt_data_end+0xfffe9b1c>
1010a9bc:	d811883a 	mov	r8,sp
1010a9c0:	003ee806 	br	1010a564 <__alt_data_end+0xfffea564>
1010a9c4:	000b883a 	mov	r5,zero
1010a9c8:	01000044 	movi	r4,1
1010a9cc:	d811883a 	mov	r8,sp
1010a9d0:	003e7c06 	br	1010a3c4 <__alt_data_end+0xfffea3c4>
1010a9d4:	50800104 	addi	r2,r10,4
1010a9d8:	5480000b 	ldhu	r18,0(r10)
1010a9dc:	0027883a 	mov	r19,zero
1010a9e0:	483dcf0e 	bge	r9,zero,1010a120 <__alt_data_end+0xfffea120>
1010a9e4:	003fdf06 	br	1010a964 <__alt_data_end+0xfffea964>
1010a9e8:	54800017 	ldw	r18,0(r10)
1010a9ec:	52800104 	addi	r10,r10,4
1010a9f0:	0027883a 	mov	r19,zero
1010a9f4:	da802215 	stw	r10,136(sp)
1010a9f8:	003d5006 	br	10109f3c <__alt_data_end+0xfffe9f3c>
1010a9fc:	50800104 	addi	r2,r10,4
1010aa00:	5480000b 	ldhu	r18,0(r10)
1010aa04:	0027883a 	mov	r19,zero
1010aa08:	483f7d0e 	bge	r9,zero,1010a800 <__alt_data_end+0xfffea800>
1010aa0c:	003ddc06 	br	1010a180 <__alt_data_end+0xfffea180>
1010aa10:	d8c02215 	stw	r3,136(sp)
1010aa14:	0039883a 	mov	fp,zero
1010aa18:	003ddb06 	br	1010a188 <__alt_data_end+0xfffea188>
1010aa1c:	02840474 	movhi	r10,4113
1010aa20:	5284a204 	addi	r10,r10,4744
1010aa24:	da802415 	stw	r10,144(sp)
1010aa28:	003e8306 	br	1010a438 <__alt_data_end+0xfffea438>
1010aa2c:	d8801c17 	ldw	r2,112(sp)
1010aa30:	dd002117 	ldw	r20,132(sp)
1010aa34:	103eb926 	beq	r2,zero,1010a51c <__alt_data_end+0xfffea51c>
1010aa38:	d9002017 	ldw	r4,128(sp)
1010aa3c:	d9801a04 	addi	r6,sp,104
1010aa40:	a00b883a 	mov	r5,r20
1010aa44:	01096b40 	call	101096b4 <__sprint_r.part.0>
1010aa48:	003eb406 	br	1010a51c <__alt_data_end+0xfffea51c>
1010aa4c:	80c00043 	ldbu	r3,1(r16)
1010aa50:	a5000814 	ori	r20,r20,32
1010aa54:	84000044 	addi	r16,r16,1
1010aa58:	18c03fcc 	andi	r3,r3,255
1010aa5c:	18c0201c 	xori	r3,r3,128
1010aa60:	18ffe004 	addi	r3,r3,-128
1010aa64:	003bb706 	br	10109944 <__alt_data_end+0xfffe9944>
1010aa68:	a809883a 	mov	r4,r21
1010aa6c:	d8c02a15 	stw	r3,168(sp)
1010aa70:	da002b15 	stw	r8,172(sp)
1010aa74:	010372c0 	call	1010372c <strlen>
1010aa78:	d8c02a17 	ldw	r3,168(sp)
1010aa7c:	1027883a 	mov	r19,r2
1010aa80:	df001d83 	ldbu	fp,118(sp)
1010aa84:	d8c02215 	stw	r3,136(sp)
1010aa88:	0013883a 	mov	r9,zero
1010aa8c:	da002b17 	ldw	r8,172(sp)
1010aa90:	003c4d06 	br	10109bc8 <__alt_data_end+0xfffe9bc8>
1010aa94:	d9402117 	ldw	r5,132(sp)
1010aa98:	d9002017 	ldw	r4,128(sp)
1010aa9c:	d9801a04 	addi	r6,sp,104
1010aaa0:	da402c15 	stw	r9,176(sp)
1010aaa4:	01096b40 	call	101096b4 <__sprint_r.part.0>
1010aaa8:	da402c17 	ldw	r9,176(sp)
1010aaac:	103e9a1e 	bne	r2,zero,1010a518 <__alt_data_end+0xfffea518>
1010aab0:	d9401b17 	ldw	r5,108(sp)
1010aab4:	d8801c17 	ldw	r2,112(sp)
1010aab8:	d811883a 	mov	r8,sp
1010aabc:	29000044 	addi	r4,r5,1
1010aac0:	003e4206 	br	1010a3cc <__alt_data_end+0xfffea3cc>
1010aac4:	d9401b17 	ldw	r5,108(sp)
1010aac8:	01040474 	movhi	r4,4113
1010aacc:	2104a604 	addi	r4,r4,4760
1010aad0:	d9002415 	stw	r4,144(sp)
1010aad4:	29400044 	addi	r5,r5,1
1010aad8:	003c6d06 	br	10109c90 <__alt_data_end+0xfffe9c90>
1010aadc:	0039883a 	mov	fp,zero
1010aae0:	00800084 	movi	r2,2
1010aae4:	10803fcc 	andi	r2,r2,255
1010aae8:	01000044 	movi	r4,1
1010aaec:	11001e26 	beq	r2,r4,1010ab68 <___vfiprintf_internal_r+0x13a0>
1010aaf0:	01000084 	movi	r4,2
1010aaf4:	11001e1e 	bne	r2,r4,1010ab70 <___vfiprintf_internal_r+0x13a8>
1010aaf8:	1829883a 	mov	r20,r3
1010aafc:	003eea06 	br	1010a6a8 <__alt_data_end+0xfffea6a8>
1010ab00:	a007883a 	mov	r3,r20
1010ab04:	00800044 	movi	r2,1
1010ab08:	003ff606 	br	1010aae4 <__alt_data_end+0xfffeaae4>
1010ab0c:	00800184 	movi	r2,6
1010ab10:	1240012e 	bgeu	r2,r9,1010ab18 <___vfiprintf_internal_r+0x1350>
1010ab14:	1013883a 	mov	r9,r2
1010ab18:	4827883a 	mov	r19,r9
1010ab1c:	4825883a 	mov	r18,r9
1010ab20:	48001516 	blt	r9,zero,1010ab78 <___vfiprintf_internal_r+0x13b0>
1010ab24:	05440474 	movhi	r21,4113
1010ab28:	d8c02215 	stw	r3,136(sp)
1010ab2c:	ad444704 	addi	r21,r21,4380
1010ab30:	003d1406 	br	10109f84 <__alt_data_end+0xfffe9f84>
1010ab34:	02840474 	movhi	r10,4113
1010ab38:	5284a204 	addi	r10,r10,4744
1010ab3c:	da802415 	stw	r10,144(sp)
1010ab40:	200d883a 	mov	r6,r4
1010ab44:	003c9106 	br	10109d8c <__alt_data_end+0xfffe9d8c>
1010ab48:	5021883a 	mov	r16,r10
1010ab4c:	0013883a 	mov	r9,zero
1010ab50:	003b7d06 	br	10109948 <__alt_data_end+0xfffe9948>
1010ab54:	4827883a 	mov	r19,r9
1010ab58:	df001d83 	ldbu	fp,118(sp)
1010ab5c:	d8c02215 	stw	r3,136(sp)
1010ab60:	0013883a 	mov	r9,zero
1010ab64:	003c1806 	br	10109bc8 <__alt_data_end+0xfffe9bc8>
1010ab68:	1829883a 	mov	r20,r3
1010ab6c:	003d1806 	br	10109fd0 <__alt_data_end+0xfffe9fd0>
1010ab70:	1829883a 	mov	r20,r3
1010ab74:	003ccd06 	br	10109eac <__alt_data_end+0xfffe9eac>
1010ab78:	0025883a 	mov	r18,zero
1010ab7c:	003fe906 	br	1010ab24 <__alt_data_end+0xfffeab24>
1010ab80:	d8802217 	ldw	r2,136(sp)
1010ab84:	80c00043 	ldbu	r3,1(r16)
1010ab88:	5021883a 	mov	r16,r10
1010ab8c:	12400017 	ldw	r9,0(r2)
1010ab90:	10800104 	addi	r2,r2,4
1010ab94:	d8802215 	stw	r2,136(sp)
1010ab98:	483faf0e 	bge	r9,zero,1010aa58 <__alt_data_end+0xfffeaa58>
1010ab9c:	18c03fcc 	andi	r3,r3,255
1010aba0:	18c0201c 	xori	r3,r3,128
1010aba4:	027fffc4 	movi	r9,-1
1010aba8:	18ffe004 	addi	r3,r3,-128
1010abac:	003b6506 	br	10109944 <__alt_data_end+0xfffe9944>
1010abb0:	d9c01d85 	stb	r7,118(sp)
1010abb4:	003ca006 	br	10109e38 <__alt_data_end+0xfffe9e38>
1010abb8:	d9c01d85 	stb	r7,118(sp)
1010abbc:	003cad06 	br	10109e74 <__alt_data_end+0xfffe9e74>
1010abc0:	d9c01d85 	stb	r7,118(sp)
1010abc4:	003d7d06 	br	1010a1bc <__alt_data_end+0xfffea1bc>
1010abc8:	d9c01d85 	stb	r7,118(sp)
1010abcc:	003d5f06 	br	1010a14c <__alt_data_end+0xfffea14c>
1010abd0:	a080004c 	andi	r2,r20,1
1010abd4:	0039883a 	mov	fp,zero
1010abd8:	10000526 	beq	r2,zero,1010abf0 <___vfiprintf_internal_r+0x1428>
1010abdc:	00800c04 	movi	r2,48
1010abe0:	d88019c5 	stb	r2,103(sp)
1010abe4:	dcc02717 	ldw	r19,156(sp)
1010abe8:	dd4019c4 	addi	r21,sp,103
1010abec:	003bf606 	br	10109bc8 <__alt_data_end+0xfffe9bc8>
1010abf0:	0027883a 	mov	r19,zero
1010abf4:	dd401a04 	addi	r21,sp,104
1010abf8:	003bf306 	br	10109bc8 <__alt_data_end+0xfffe9bc8>
1010abfc:	d9c01d85 	stb	r7,118(sp)
1010ac00:	003dc806 	br	1010a324 <__alt_data_end+0xfffea324>
1010ac04:	d9c01d85 	stb	r7,118(sp)
1010ac08:	003d3a06 	br	1010a0f4 <__alt_data_end+0xfffea0f4>
1010ac0c:	d9c01d85 	stb	r7,118(sp)
1010ac10:	003d2a06 	br	1010a0bc <__alt_data_end+0xfffea0bc>
1010ac14:	d9c01d85 	stb	r7,118(sp)
1010ac18:	003cde06 	br	10109f94 <__alt_data_end+0xfffe9f94>
1010ac1c:	d9c01d85 	stb	r7,118(sp)
1010ac20:	003cbc06 	br	10109f14 <__alt_data_end+0xfffe9f14>

1010ac24 <__vfiprintf_internal>:
1010ac24:	00840474 	movhi	r2,4113
1010ac28:	108bb004 	addi	r2,r2,11968
1010ac2c:	300f883a 	mov	r7,r6
1010ac30:	280d883a 	mov	r6,r5
1010ac34:	200b883a 	mov	r5,r4
1010ac38:	11000017 	ldw	r4,0(r2)
1010ac3c:	01097c81 	jmpi	101097c8 <___vfiprintf_internal_r>

1010ac40 <__sbprintf>:
1010ac40:	2880030b 	ldhu	r2,12(r5)
1010ac44:	2ac01917 	ldw	r11,100(r5)
1010ac48:	2a80038b 	ldhu	r10,14(r5)
1010ac4c:	2a400717 	ldw	r9,28(r5)
1010ac50:	2a000917 	ldw	r8,36(r5)
1010ac54:	defee204 	addi	sp,sp,-1144
1010ac58:	00c10004 	movi	r3,1024
1010ac5c:	dc011a15 	stw	r16,1128(sp)
1010ac60:	10bfff4c 	andi	r2,r2,65533
1010ac64:	2821883a 	mov	r16,r5
1010ac68:	d8cb883a 	add	r5,sp,r3
1010ac6c:	dc811c15 	stw	r18,1136(sp)
1010ac70:	dc411b15 	stw	r17,1132(sp)
1010ac74:	dfc11d15 	stw	ra,1140(sp)
1010ac78:	2025883a 	mov	r18,r4
1010ac7c:	d881030d 	sth	r2,1036(sp)
1010ac80:	dac11915 	stw	r11,1124(sp)
1010ac84:	da81038d 	sth	r10,1038(sp)
1010ac88:	da410715 	stw	r9,1052(sp)
1010ac8c:	da010915 	stw	r8,1060(sp)
1010ac90:	dec10015 	stw	sp,1024(sp)
1010ac94:	dec10415 	stw	sp,1040(sp)
1010ac98:	d8c10215 	stw	r3,1032(sp)
1010ac9c:	d8c10515 	stw	r3,1044(sp)
1010aca0:	d8010615 	stw	zero,1048(sp)
1010aca4:	01097c80 	call	101097c8 <___vfiprintf_internal_r>
1010aca8:	1023883a 	mov	r17,r2
1010acac:	10000416 	blt	r2,zero,1010acc0 <__sbprintf+0x80>
1010acb0:	d9410004 	addi	r5,sp,1024
1010acb4:	9009883a 	mov	r4,r18
1010acb8:	01015cc0 	call	101015cc <_fflush_r>
1010acbc:	10000d1e 	bne	r2,zero,1010acf4 <__sbprintf+0xb4>
1010acc0:	d881030b 	ldhu	r2,1036(sp)
1010acc4:	1080100c 	andi	r2,r2,64
1010acc8:	10000326 	beq	r2,zero,1010acd8 <__sbprintf+0x98>
1010accc:	8080030b 	ldhu	r2,12(r16)
1010acd0:	10801014 	ori	r2,r2,64
1010acd4:	8080030d 	sth	r2,12(r16)
1010acd8:	8805883a 	mov	r2,r17
1010acdc:	dfc11d17 	ldw	ra,1140(sp)
1010ace0:	dc811c17 	ldw	r18,1136(sp)
1010ace4:	dc411b17 	ldw	r17,1132(sp)
1010ace8:	dc011a17 	ldw	r16,1128(sp)
1010acec:	dec11e04 	addi	sp,sp,1144
1010acf0:	f800283a 	ret
1010acf4:	047fffc4 	movi	r17,-1
1010acf8:	003ff106 	br	1010acc0 <__alt_data_end+0xfffeacc0>

1010acfc <_calloc_r>:
1010acfc:	298b383a 	mul	r5,r5,r6
1010ad00:	defffe04 	addi	sp,sp,-8
1010ad04:	dfc00115 	stw	ra,4(sp)
1010ad08:	dc000015 	stw	r16,0(sp)
1010ad0c:	01028500 	call	10102850 <_malloc_r>
1010ad10:	10002926 	beq	r2,zero,1010adb8 <_calloc_r+0xbc>
1010ad14:	11bfff17 	ldw	r6,-4(r2)
1010ad18:	1021883a 	mov	r16,r2
1010ad1c:	00bfff04 	movi	r2,-4
1010ad20:	308c703a 	and	r6,r6,r2
1010ad24:	00c00904 	movi	r3,36
1010ad28:	308d883a 	add	r6,r6,r2
1010ad2c:	19801636 	bltu	r3,r6,1010ad88 <_calloc_r+0x8c>
1010ad30:	008004c4 	movi	r2,19
1010ad34:	11800b2e 	bgeu	r2,r6,1010ad64 <_calloc_r+0x68>
1010ad38:	80000015 	stw	zero,0(r16)
1010ad3c:	80000115 	stw	zero,4(r16)
1010ad40:	008006c4 	movi	r2,27
1010ad44:	11801a2e 	bgeu	r2,r6,1010adb0 <_calloc_r+0xb4>
1010ad48:	80000215 	stw	zero,8(r16)
1010ad4c:	80000315 	stw	zero,12(r16)
1010ad50:	30c0151e 	bne	r6,r3,1010ada8 <_calloc_r+0xac>
1010ad54:	80000415 	stw	zero,16(r16)
1010ad58:	80800604 	addi	r2,r16,24
1010ad5c:	80000515 	stw	zero,20(r16)
1010ad60:	00000106 	br	1010ad68 <_calloc_r+0x6c>
1010ad64:	8005883a 	mov	r2,r16
1010ad68:	10000015 	stw	zero,0(r2)
1010ad6c:	10000115 	stw	zero,4(r2)
1010ad70:	10000215 	stw	zero,8(r2)
1010ad74:	8005883a 	mov	r2,r16
1010ad78:	dfc00117 	ldw	ra,4(sp)
1010ad7c:	dc000017 	ldw	r16,0(sp)
1010ad80:	dec00204 	addi	sp,sp,8
1010ad84:	f800283a 	ret
1010ad88:	000b883a 	mov	r5,zero
1010ad8c:	8009883a 	mov	r4,r16
1010ad90:	010305c0 	call	1010305c <memset>
1010ad94:	8005883a 	mov	r2,r16
1010ad98:	dfc00117 	ldw	ra,4(sp)
1010ad9c:	dc000017 	ldw	r16,0(sp)
1010ada0:	dec00204 	addi	sp,sp,8
1010ada4:	f800283a 	ret
1010ada8:	80800404 	addi	r2,r16,16
1010adac:	003fee06 	br	1010ad68 <__alt_data_end+0xfffead68>
1010adb0:	80800204 	addi	r2,r16,8
1010adb4:	003fec06 	br	1010ad68 <__alt_data_end+0xfffead68>
1010adb8:	0005883a 	mov	r2,zero
1010adbc:	003fee06 	br	1010ad78 <__alt_data_end+0xfffead78>

1010adc0 <__fputwc>:
1010adc0:	defff804 	addi	sp,sp,-32
1010adc4:	dcc00415 	stw	r19,16(sp)
1010adc8:	dc800315 	stw	r18,12(sp)
1010adcc:	dc000115 	stw	r16,4(sp)
1010add0:	dfc00715 	stw	ra,28(sp)
1010add4:	dd400615 	stw	r21,24(sp)
1010add8:	dd000515 	stw	r20,20(sp)
1010addc:	dc400215 	stw	r17,8(sp)
1010ade0:	2027883a 	mov	r19,r4
1010ade4:	2825883a 	mov	r18,r5
1010ade8:	3021883a 	mov	r16,r6
1010adec:	0107b680 	call	10107b68 <__locale_mb_cur_max>
1010adf0:	00c00044 	movi	r3,1
1010adf4:	10c03e26 	beq	r2,r3,1010aef0 <__fputwc+0x130>
1010adf8:	81c01704 	addi	r7,r16,92
1010adfc:	900d883a 	mov	r6,r18
1010ae00:	d80b883a 	mov	r5,sp
1010ae04:	9809883a 	mov	r4,r19
1010ae08:	010b1200 	call	1010b120 <_wcrtomb_r>
1010ae0c:	1029883a 	mov	r20,r2
1010ae10:	00bfffc4 	movi	r2,-1
1010ae14:	a0802026 	beq	r20,r2,1010ae98 <__fputwc+0xd8>
1010ae18:	d9400003 	ldbu	r5,0(sp)
1010ae1c:	a0001c26 	beq	r20,zero,1010ae90 <__fputwc+0xd0>
1010ae20:	0023883a 	mov	r17,zero
1010ae24:	05400284 	movi	r21,10
1010ae28:	00000906 	br	1010ae50 <__fputwc+0x90>
1010ae2c:	80800017 	ldw	r2,0(r16)
1010ae30:	11400005 	stb	r5,0(r2)
1010ae34:	80c00017 	ldw	r3,0(r16)
1010ae38:	18c00044 	addi	r3,r3,1
1010ae3c:	80c00015 	stw	r3,0(r16)
1010ae40:	8c400044 	addi	r17,r17,1
1010ae44:	dc45883a 	add	r2,sp,r17
1010ae48:	8d00112e 	bgeu	r17,r20,1010ae90 <__fputwc+0xd0>
1010ae4c:	11400003 	ldbu	r5,0(r2)
1010ae50:	80c00217 	ldw	r3,8(r16)
1010ae54:	18ffffc4 	addi	r3,r3,-1
1010ae58:	80c00215 	stw	r3,8(r16)
1010ae5c:	183ff30e 	bge	r3,zero,1010ae2c <__alt_data_end+0xfffeae2c>
1010ae60:	80800617 	ldw	r2,24(r16)
1010ae64:	18801916 	blt	r3,r2,1010aecc <__fputwc+0x10c>
1010ae68:	80800017 	ldw	r2,0(r16)
1010ae6c:	11400005 	stb	r5,0(r2)
1010ae70:	80800017 	ldw	r2,0(r16)
1010ae74:	10c00003 	ldbu	r3,0(r2)
1010ae78:	10800044 	addi	r2,r2,1
1010ae7c:	1d402326 	beq	r3,r21,1010af0c <__fputwc+0x14c>
1010ae80:	80800015 	stw	r2,0(r16)
1010ae84:	8c400044 	addi	r17,r17,1
1010ae88:	dc45883a 	add	r2,sp,r17
1010ae8c:	8d3fef36 	bltu	r17,r20,1010ae4c <__alt_data_end+0xfffeae4c>
1010ae90:	9005883a 	mov	r2,r18
1010ae94:	00000406 	br	1010aea8 <__fputwc+0xe8>
1010ae98:	80c0030b 	ldhu	r3,12(r16)
1010ae9c:	a005883a 	mov	r2,r20
1010aea0:	18c01014 	ori	r3,r3,64
1010aea4:	80c0030d 	sth	r3,12(r16)
1010aea8:	dfc00717 	ldw	ra,28(sp)
1010aeac:	dd400617 	ldw	r21,24(sp)
1010aeb0:	dd000517 	ldw	r20,20(sp)
1010aeb4:	dcc00417 	ldw	r19,16(sp)
1010aeb8:	dc800317 	ldw	r18,12(sp)
1010aebc:	dc400217 	ldw	r17,8(sp)
1010aec0:	dc000117 	ldw	r16,4(sp)
1010aec4:	dec00804 	addi	sp,sp,32
1010aec8:	f800283a 	ret
1010aecc:	800d883a 	mov	r6,r16
1010aed0:	29403fcc 	andi	r5,r5,255
1010aed4:	9809883a 	mov	r4,r19
1010aed8:	010afc80 	call	1010afc8 <__swbuf_r>
1010aedc:	10bfffe0 	cmpeqi	r2,r2,-1
1010aee0:	10803fcc 	andi	r2,r2,255
1010aee4:	103fd626 	beq	r2,zero,1010ae40 <__alt_data_end+0xfffeae40>
1010aee8:	00bfffc4 	movi	r2,-1
1010aeec:	003fee06 	br	1010aea8 <__alt_data_end+0xfffeaea8>
1010aef0:	90ffffc4 	addi	r3,r18,-1
1010aef4:	01003f84 	movi	r4,254
1010aef8:	20ffbf36 	bltu	r4,r3,1010adf8 <__alt_data_end+0xfffeadf8>
1010aefc:	900b883a 	mov	r5,r18
1010af00:	dc800005 	stb	r18,0(sp)
1010af04:	1029883a 	mov	r20,r2
1010af08:	003fc506 	br	1010ae20 <__alt_data_end+0xfffeae20>
1010af0c:	800d883a 	mov	r6,r16
1010af10:	a80b883a 	mov	r5,r21
1010af14:	9809883a 	mov	r4,r19
1010af18:	010afc80 	call	1010afc8 <__swbuf_r>
1010af1c:	10bfffe0 	cmpeqi	r2,r2,-1
1010af20:	003fef06 	br	1010aee0 <__alt_data_end+0xfffeaee0>

1010af24 <_fputwc_r>:
1010af24:	3080030b 	ldhu	r2,12(r6)
1010af28:	10c8000c 	andi	r3,r2,8192
1010af2c:	1800051e 	bne	r3,zero,1010af44 <_fputwc_r+0x20>
1010af30:	30c01917 	ldw	r3,100(r6)
1010af34:	10880014 	ori	r2,r2,8192
1010af38:	3080030d 	sth	r2,12(r6)
1010af3c:	18880014 	ori	r2,r3,8192
1010af40:	30801915 	stw	r2,100(r6)
1010af44:	010adc01 	jmpi	1010adc0 <__fputwc>

1010af48 <fputwc>:
1010af48:	00840474 	movhi	r2,4113
1010af4c:	defffc04 	addi	sp,sp,-16
1010af50:	108bb004 	addi	r2,r2,11968
1010af54:	dc000115 	stw	r16,4(sp)
1010af58:	14000017 	ldw	r16,0(r2)
1010af5c:	dc400215 	stw	r17,8(sp)
1010af60:	dfc00315 	stw	ra,12(sp)
1010af64:	2023883a 	mov	r17,r4
1010af68:	80000226 	beq	r16,zero,1010af74 <fputwc+0x2c>
1010af6c:	80800e17 	ldw	r2,56(r16)
1010af70:	10001026 	beq	r2,zero,1010afb4 <fputwc+0x6c>
1010af74:	2880030b 	ldhu	r2,12(r5)
1010af78:	10c8000c 	andi	r3,r2,8192
1010af7c:	1800051e 	bne	r3,zero,1010af94 <fputwc+0x4c>
1010af80:	28c01917 	ldw	r3,100(r5)
1010af84:	10880014 	ori	r2,r2,8192
1010af88:	2880030d 	sth	r2,12(r5)
1010af8c:	18880014 	ori	r2,r3,8192
1010af90:	28801915 	stw	r2,100(r5)
1010af94:	280d883a 	mov	r6,r5
1010af98:	8009883a 	mov	r4,r16
1010af9c:	880b883a 	mov	r5,r17
1010afa0:	dfc00317 	ldw	ra,12(sp)
1010afa4:	dc400217 	ldw	r17,8(sp)
1010afa8:	dc000117 	ldw	r16,4(sp)
1010afac:	dec00404 	addi	sp,sp,16
1010afb0:	010adc01 	jmpi	1010adc0 <__fputwc>
1010afb4:	8009883a 	mov	r4,r16
1010afb8:	d9400015 	stw	r5,0(sp)
1010afbc:	0101aa00 	call	10101aa0 <__sinit>
1010afc0:	d9400017 	ldw	r5,0(sp)
1010afc4:	003feb06 	br	1010af74 <__alt_data_end+0xfffeaf74>

1010afc8 <__swbuf_r>:
1010afc8:	defffb04 	addi	sp,sp,-20
1010afcc:	dcc00315 	stw	r19,12(sp)
1010afd0:	dc800215 	stw	r18,8(sp)
1010afd4:	dc000015 	stw	r16,0(sp)
1010afd8:	dfc00415 	stw	ra,16(sp)
1010afdc:	dc400115 	stw	r17,4(sp)
1010afe0:	2025883a 	mov	r18,r4
1010afe4:	2827883a 	mov	r19,r5
1010afe8:	3021883a 	mov	r16,r6
1010afec:	20000226 	beq	r4,zero,1010aff8 <__swbuf_r+0x30>
1010aff0:	20800e17 	ldw	r2,56(r4)
1010aff4:	10004226 	beq	r2,zero,1010b100 <__swbuf_r+0x138>
1010aff8:	80800617 	ldw	r2,24(r16)
1010affc:	8100030b 	ldhu	r4,12(r16)
1010b000:	80800215 	stw	r2,8(r16)
1010b004:	2080020c 	andi	r2,r4,8
1010b008:	10003626 	beq	r2,zero,1010b0e4 <__swbuf_r+0x11c>
1010b00c:	80c00417 	ldw	r3,16(r16)
1010b010:	18003426 	beq	r3,zero,1010b0e4 <__swbuf_r+0x11c>
1010b014:	2088000c 	andi	r2,r4,8192
1010b018:	9c403fcc 	andi	r17,r19,255
1010b01c:	10001a26 	beq	r2,zero,1010b088 <__swbuf_r+0xc0>
1010b020:	80800017 	ldw	r2,0(r16)
1010b024:	81000517 	ldw	r4,20(r16)
1010b028:	10c7c83a 	sub	r3,r2,r3
1010b02c:	1900200e 	bge	r3,r4,1010b0b0 <__swbuf_r+0xe8>
1010b030:	18c00044 	addi	r3,r3,1
1010b034:	81000217 	ldw	r4,8(r16)
1010b038:	11400044 	addi	r5,r2,1
1010b03c:	81400015 	stw	r5,0(r16)
1010b040:	213fffc4 	addi	r4,r4,-1
1010b044:	81000215 	stw	r4,8(r16)
1010b048:	14c00005 	stb	r19,0(r2)
1010b04c:	80800517 	ldw	r2,20(r16)
1010b050:	10c01e26 	beq	r2,r3,1010b0cc <__swbuf_r+0x104>
1010b054:	8080030b 	ldhu	r2,12(r16)
1010b058:	1080004c 	andi	r2,r2,1
1010b05c:	10000226 	beq	r2,zero,1010b068 <__swbuf_r+0xa0>
1010b060:	00800284 	movi	r2,10
1010b064:	88801926 	beq	r17,r2,1010b0cc <__swbuf_r+0x104>
1010b068:	8805883a 	mov	r2,r17
1010b06c:	dfc00417 	ldw	ra,16(sp)
1010b070:	dcc00317 	ldw	r19,12(sp)
1010b074:	dc800217 	ldw	r18,8(sp)
1010b078:	dc400117 	ldw	r17,4(sp)
1010b07c:	dc000017 	ldw	r16,0(sp)
1010b080:	dec00504 	addi	sp,sp,20
1010b084:	f800283a 	ret
1010b088:	81401917 	ldw	r5,100(r16)
1010b08c:	00b7ffc4 	movi	r2,-8193
1010b090:	21080014 	ori	r4,r4,8192
1010b094:	2884703a 	and	r2,r5,r2
1010b098:	80801915 	stw	r2,100(r16)
1010b09c:	80800017 	ldw	r2,0(r16)
1010b0a0:	8100030d 	sth	r4,12(r16)
1010b0a4:	81000517 	ldw	r4,20(r16)
1010b0a8:	10c7c83a 	sub	r3,r2,r3
1010b0ac:	193fe016 	blt	r3,r4,1010b030 <__alt_data_end+0xfffeb030>
1010b0b0:	800b883a 	mov	r5,r16
1010b0b4:	9009883a 	mov	r4,r18
1010b0b8:	01015cc0 	call	101015cc <_fflush_r>
1010b0bc:	1000071e 	bne	r2,zero,1010b0dc <__swbuf_r+0x114>
1010b0c0:	80800017 	ldw	r2,0(r16)
1010b0c4:	00c00044 	movi	r3,1
1010b0c8:	003fda06 	br	1010b034 <__alt_data_end+0xfffeb034>
1010b0cc:	800b883a 	mov	r5,r16
1010b0d0:	9009883a 	mov	r4,r18
1010b0d4:	01015cc0 	call	101015cc <_fflush_r>
1010b0d8:	103fe326 	beq	r2,zero,1010b068 <__alt_data_end+0xfffeb068>
1010b0dc:	00bfffc4 	movi	r2,-1
1010b0e0:	003fe206 	br	1010b06c <__alt_data_end+0xfffeb06c>
1010b0e4:	800b883a 	mov	r5,r16
1010b0e8:	9009883a 	mov	r4,r18
1010b0ec:	0105af40 	call	10105af4 <__swsetup_r>
1010b0f0:	103ffa1e 	bne	r2,zero,1010b0dc <__alt_data_end+0xfffeb0dc>
1010b0f4:	8100030b 	ldhu	r4,12(r16)
1010b0f8:	80c00417 	ldw	r3,16(r16)
1010b0fc:	003fc506 	br	1010b014 <__alt_data_end+0xfffeb014>
1010b100:	0101aa00 	call	10101aa0 <__sinit>
1010b104:	003fbc06 	br	1010aff8 <__alt_data_end+0xfffeaff8>

1010b108 <__swbuf>:
1010b108:	00840474 	movhi	r2,4113
1010b10c:	108bb004 	addi	r2,r2,11968
1010b110:	280d883a 	mov	r6,r5
1010b114:	200b883a 	mov	r5,r4
1010b118:	11000017 	ldw	r4,0(r2)
1010b11c:	010afc81 	jmpi	1010afc8 <__swbuf_r>

1010b120 <_wcrtomb_r>:
1010b120:	defff604 	addi	sp,sp,-40
1010b124:	00840474 	movhi	r2,4113
1010b128:	dc800815 	stw	r18,32(sp)
1010b12c:	dc400715 	stw	r17,28(sp)
1010b130:	dc000615 	stw	r16,24(sp)
1010b134:	108bb404 	addi	r2,r2,11984
1010b138:	dfc00915 	stw	ra,36(sp)
1010b13c:	2021883a 	mov	r16,r4
1010b140:	3823883a 	mov	r17,r7
1010b144:	14800017 	ldw	r18,0(r2)
1010b148:	28001426 	beq	r5,zero,1010b19c <_wcrtomb_r+0x7c>
1010b14c:	d9400415 	stw	r5,16(sp)
1010b150:	d9800515 	stw	r6,20(sp)
1010b154:	0107b5c0 	call	10107b5c <__locale_charset>
1010b158:	d9800517 	ldw	r6,20(sp)
1010b15c:	d9400417 	ldw	r5,16(sp)
1010b160:	100f883a 	mov	r7,r2
1010b164:	dc400015 	stw	r17,0(sp)
1010b168:	8009883a 	mov	r4,r16
1010b16c:	903ee83a 	callr	r18
1010b170:	00ffffc4 	movi	r3,-1
1010b174:	10c0031e 	bne	r2,r3,1010b184 <_wcrtomb_r+0x64>
1010b178:	88000015 	stw	zero,0(r17)
1010b17c:	00c02284 	movi	r3,138
1010b180:	80c00015 	stw	r3,0(r16)
1010b184:	dfc00917 	ldw	ra,36(sp)
1010b188:	dc800817 	ldw	r18,32(sp)
1010b18c:	dc400717 	ldw	r17,28(sp)
1010b190:	dc000617 	ldw	r16,24(sp)
1010b194:	dec00a04 	addi	sp,sp,40
1010b198:	f800283a 	ret
1010b19c:	0107b5c0 	call	10107b5c <__locale_charset>
1010b1a0:	100f883a 	mov	r7,r2
1010b1a4:	dc400015 	stw	r17,0(sp)
1010b1a8:	000d883a 	mov	r6,zero
1010b1ac:	d9400104 	addi	r5,sp,4
1010b1b0:	8009883a 	mov	r4,r16
1010b1b4:	903ee83a 	callr	r18
1010b1b8:	003fed06 	br	1010b170 <__alt_data_end+0xfffeb170>

1010b1bc <wcrtomb>:
1010b1bc:	defff604 	addi	sp,sp,-40
1010b1c0:	00840474 	movhi	r2,4113
1010b1c4:	dc800615 	stw	r18,24(sp)
1010b1c8:	dc400515 	stw	r17,20(sp)
1010b1cc:	108bb004 	addi	r2,r2,11968
1010b1d0:	dfc00915 	stw	ra,36(sp)
1010b1d4:	dd000815 	stw	r20,32(sp)
1010b1d8:	dcc00715 	stw	r19,28(sp)
1010b1dc:	dc000415 	stw	r16,16(sp)
1010b1e0:	3025883a 	mov	r18,r6
1010b1e4:	14400017 	ldw	r17,0(r2)
1010b1e8:	20001926 	beq	r4,zero,1010b250 <wcrtomb+0x94>
1010b1ec:	00840474 	movhi	r2,4113
1010b1f0:	108bb404 	addi	r2,r2,11984
1010b1f4:	15000017 	ldw	r20,0(r2)
1010b1f8:	2021883a 	mov	r16,r4
1010b1fc:	2827883a 	mov	r19,r5
1010b200:	0107b5c0 	call	10107b5c <__locale_charset>
1010b204:	100f883a 	mov	r7,r2
1010b208:	dc800015 	stw	r18,0(sp)
1010b20c:	980d883a 	mov	r6,r19
1010b210:	800b883a 	mov	r5,r16
1010b214:	8809883a 	mov	r4,r17
1010b218:	a03ee83a 	callr	r20
1010b21c:	00ffffc4 	movi	r3,-1
1010b220:	10c0031e 	bne	r2,r3,1010b230 <wcrtomb+0x74>
1010b224:	90000015 	stw	zero,0(r18)
1010b228:	00c02284 	movi	r3,138
1010b22c:	88c00015 	stw	r3,0(r17)
1010b230:	dfc00917 	ldw	ra,36(sp)
1010b234:	dd000817 	ldw	r20,32(sp)
1010b238:	dcc00717 	ldw	r19,28(sp)
1010b23c:	dc800617 	ldw	r18,24(sp)
1010b240:	dc400517 	ldw	r17,20(sp)
1010b244:	dc000417 	ldw	r16,16(sp)
1010b248:	dec00a04 	addi	sp,sp,40
1010b24c:	f800283a 	ret
1010b250:	00840474 	movhi	r2,4113
1010b254:	108bb404 	addi	r2,r2,11984
1010b258:	14000017 	ldw	r16,0(r2)
1010b25c:	0107b5c0 	call	10107b5c <__locale_charset>
1010b260:	100f883a 	mov	r7,r2
1010b264:	dc800015 	stw	r18,0(sp)
1010b268:	000d883a 	mov	r6,zero
1010b26c:	d9400104 	addi	r5,sp,4
1010b270:	8809883a 	mov	r4,r17
1010b274:	803ee83a 	callr	r16
1010b278:	003fe806 	br	1010b21c <__alt_data_end+0xfffeb21c>

1010b27c <__ascii_wctomb>:
1010b27c:	28000526 	beq	r5,zero,1010b294 <__ascii_wctomb+0x18>
1010b280:	00803fc4 	movi	r2,255
1010b284:	11800536 	bltu	r2,r6,1010b29c <__ascii_wctomb+0x20>
1010b288:	29800005 	stb	r6,0(r5)
1010b28c:	00800044 	movi	r2,1
1010b290:	f800283a 	ret
1010b294:	0005883a 	mov	r2,zero
1010b298:	f800283a 	ret
1010b29c:	00802284 	movi	r2,138
1010b2a0:	20800015 	stw	r2,0(r4)
1010b2a4:	00bfffc4 	movi	r2,-1
1010b2a8:	f800283a 	ret

1010b2ac <_wctomb_r>:
1010b2ac:	00840474 	movhi	r2,4113
1010b2b0:	defff904 	addi	sp,sp,-28
1010b2b4:	108bb404 	addi	r2,r2,11984
1010b2b8:	dfc00615 	stw	ra,24(sp)
1010b2bc:	dc400515 	stw	r17,20(sp)
1010b2c0:	dc000415 	stw	r16,16(sp)
1010b2c4:	3823883a 	mov	r17,r7
1010b2c8:	14000017 	ldw	r16,0(r2)
1010b2cc:	d9000115 	stw	r4,4(sp)
1010b2d0:	d9400215 	stw	r5,8(sp)
1010b2d4:	d9800315 	stw	r6,12(sp)
1010b2d8:	0107b5c0 	call	10107b5c <__locale_charset>
1010b2dc:	d9800317 	ldw	r6,12(sp)
1010b2e0:	d9400217 	ldw	r5,8(sp)
1010b2e4:	d9000117 	ldw	r4,4(sp)
1010b2e8:	100f883a 	mov	r7,r2
1010b2ec:	dc400015 	stw	r17,0(sp)
1010b2f0:	803ee83a 	callr	r16
1010b2f4:	dfc00617 	ldw	ra,24(sp)
1010b2f8:	dc400517 	ldw	r17,20(sp)
1010b2fc:	dc000417 	ldw	r16,16(sp)
1010b300:	dec00704 	addi	sp,sp,28
1010b304:	f800283a 	ret

1010b308 <__udivdi3>:
1010b308:	defff504 	addi	sp,sp,-44
1010b30c:	dcc00415 	stw	r19,16(sp)
1010b310:	dc000115 	stw	r16,4(sp)
1010b314:	dfc00a15 	stw	ra,40(sp)
1010b318:	df000915 	stw	fp,36(sp)
1010b31c:	ddc00815 	stw	r23,32(sp)
1010b320:	dd800715 	stw	r22,28(sp)
1010b324:	dd400615 	stw	r21,24(sp)
1010b328:	dd000515 	stw	r20,20(sp)
1010b32c:	dc800315 	stw	r18,12(sp)
1010b330:	dc400215 	stw	r17,8(sp)
1010b334:	2027883a 	mov	r19,r4
1010b338:	2821883a 	mov	r16,r5
1010b33c:	3800411e 	bne	r7,zero,1010b444 <__udivdi3+0x13c>
1010b340:	3023883a 	mov	r17,r6
1010b344:	2025883a 	mov	r18,r4
1010b348:	2980522e 	bgeu	r5,r6,1010b494 <__udivdi3+0x18c>
1010b34c:	00bfffd4 	movui	r2,65535
1010b350:	282d883a 	mov	r22,r5
1010b354:	1180a836 	bltu	r2,r6,1010b5f8 <__udivdi3+0x2f0>
1010b358:	00803fc4 	movi	r2,255
1010b35c:	1185803a 	cmpltu	r2,r2,r6
1010b360:	100490fa 	slli	r2,r2,3
1010b364:	3086d83a 	srl	r3,r6,r2
1010b368:	01040474 	movhi	r4,4113
1010b36c:	2104aa04 	addi	r4,r4,4776
1010b370:	20c7883a 	add	r3,r4,r3
1010b374:	18c00003 	ldbu	r3,0(r3)
1010b378:	1885883a 	add	r2,r3,r2
1010b37c:	00c00804 	movi	r3,32
1010b380:	1887c83a 	sub	r3,r3,r2
1010b384:	18000526 	beq	r3,zero,1010b39c <__udivdi3+0x94>
1010b388:	80e0983a 	sll	r16,r16,r3
1010b38c:	9884d83a 	srl	r2,r19,r2
1010b390:	30e2983a 	sll	r17,r6,r3
1010b394:	98e4983a 	sll	r18,r19,r3
1010b398:	142cb03a 	or	r22,r2,r16
1010b39c:	882ad43a 	srli	r21,r17,16
1010b3a0:	b009883a 	mov	r4,r22
1010b3a4:	8d3fffcc 	andi	r20,r17,65535
1010b3a8:	a80b883a 	mov	r5,r21
1010b3ac:	01012540 	call	10101254 <__umodsi3>
1010b3b0:	b009883a 	mov	r4,r22
1010b3b4:	a80b883a 	mov	r5,r21
1010b3b8:	1027883a 	mov	r19,r2
1010b3bc:	01011f00 	call	101011f0 <__udivsi3>
1010b3c0:	102d883a 	mov	r22,r2
1010b3c4:	9826943a 	slli	r19,r19,16
1010b3c8:	9004d43a 	srli	r2,r18,16
1010b3cc:	a5a1383a 	mul	r16,r20,r22
1010b3d0:	14c4b03a 	or	r2,r2,r19
1010b3d4:	1400052e 	bgeu	r2,r16,1010b3ec <__udivdi3+0xe4>
1010b3d8:	1445883a 	add	r2,r2,r17
1010b3dc:	b0ffffc4 	addi	r3,r22,-1
1010b3e0:	14400136 	bltu	r2,r17,1010b3e8 <__udivdi3+0xe0>
1010b3e4:	14012336 	bltu	r2,r16,1010b874 <__udivdi3+0x56c>
1010b3e8:	182d883a 	mov	r22,r3
1010b3ec:	1421c83a 	sub	r16,r2,r16
1010b3f0:	a80b883a 	mov	r5,r21
1010b3f4:	8009883a 	mov	r4,r16
1010b3f8:	01012540 	call	10101254 <__umodsi3>
1010b3fc:	1027883a 	mov	r19,r2
1010b400:	a80b883a 	mov	r5,r21
1010b404:	8009883a 	mov	r4,r16
1010b408:	01011f00 	call	101011f0 <__udivsi3>
1010b40c:	9826943a 	slli	r19,r19,16
1010b410:	a0a9383a 	mul	r20,r20,r2
1010b414:	94bfffcc 	andi	r18,r18,65535
1010b418:	94e4b03a 	or	r18,r18,r19
1010b41c:	9500052e 	bgeu	r18,r20,1010b434 <__udivdi3+0x12c>
1010b420:	8ca5883a 	add	r18,r17,r18
1010b424:	10ffffc4 	addi	r3,r2,-1
1010b428:	9440f136 	bltu	r18,r17,1010b7f0 <__udivdi3+0x4e8>
1010b42c:	9500f02e 	bgeu	r18,r20,1010b7f0 <__udivdi3+0x4e8>
1010b430:	10bfff84 	addi	r2,r2,-2
1010b434:	b00c943a 	slli	r6,r22,16
1010b438:	0007883a 	mov	r3,zero
1010b43c:	3084b03a 	or	r2,r6,r2
1010b440:	00005906 	br	1010b5a8 <__udivdi3+0x2a0>
1010b444:	29c05636 	bltu	r5,r7,1010b5a0 <__udivdi3+0x298>
1010b448:	00bfffd4 	movui	r2,65535
1010b44c:	11c0622e 	bgeu	r2,r7,1010b5d8 <__udivdi3+0x2d0>
1010b450:	00804034 	movhi	r2,256
1010b454:	10bfffc4 	addi	r2,r2,-1
1010b458:	11c0ee36 	bltu	r2,r7,1010b814 <__udivdi3+0x50c>
1010b45c:	00800404 	movi	r2,16
1010b460:	3886d83a 	srl	r3,r7,r2
1010b464:	01040474 	movhi	r4,4113
1010b468:	2104aa04 	addi	r4,r4,4776
1010b46c:	20c7883a 	add	r3,r4,r3
1010b470:	18c00003 	ldbu	r3,0(r3)
1010b474:	05400804 	movi	r21,32
1010b478:	1885883a 	add	r2,r3,r2
1010b47c:	a8abc83a 	sub	r21,r21,r2
1010b480:	a800621e 	bne	r21,zero,1010b60c <__udivdi3+0x304>
1010b484:	3c00e936 	bltu	r7,r16,1010b82c <__udivdi3+0x524>
1010b488:	9985403a 	cmpgeu	r2,r19,r6
1010b48c:	0007883a 	mov	r3,zero
1010b490:	00004506 	br	1010b5a8 <__udivdi3+0x2a0>
1010b494:	3000041e 	bne	r6,zero,1010b4a8 <__udivdi3+0x1a0>
1010b498:	000b883a 	mov	r5,zero
1010b49c:	01000044 	movi	r4,1
1010b4a0:	01011f00 	call	101011f0 <__udivsi3>
1010b4a4:	1023883a 	mov	r17,r2
1010b4a8:	00bfffd4 	movui	r2,65535
1010b4ac:	14404e2e 	bgeu	r2,r17,1010b5e8 <__udivdi3+0x2e0>
1010b4b0:	00804034 	movhi	r2,256
1010b4b4:	10bfffc4 	addi	r2,r2,-1
1010b4b8:	1440d836 	bltu	r2,r17,1010b81c <__udivdi3+0x514>
1010b4bc:	00800404 	movi	r2,16
1010b4c0:	8886d83a 	srl	r3,r17,r2
1010b4c4:	01040474 	movhi	r4,4113
1010b4c8:	2104aa04 	addi	r4,r4,4776
1010b4cc:	20c7883a 	add	r3,r4,r3
1010b4d0:	18c00003 	ldbu	r3,0(r3)
1010b4d4:	1885883a 	add	r2,r3,r2
1010b4d8:	00c00804 	movi	r3,32
1010b4dc:	1887c83a 	sub	r3,r3,r2
1010b4e0:	18008f1e 	bne	r3,zero,1010b720 <__udivdi3+0x418>
1010b4e4:	882ad43a 	srli	r21,r17,16
1010b4e8:	8461c83a 	sub	r16,r16,r17
1010b4ec:	8d3fffcc 	andi	r20,r17,65535
1010b4f0:	00c00044 	movi	r3,1
1010b4f4:	8009883a 	mov	r4,r16
1010b4f8:	a80b883a 	mov	r5,r21
1010b4fc:	d8c00015 	stw	r3,0(sp)
1010b500:	01012540 	call	10101254 <__umodsi3>
1010b504:	8009883a 	mov	r4,r16
1010b508:	a80b883a 	mov	r5,r21
1010b50c:	1027883a 	mov	r19,r2
1010b510:	01011f00 	call	101011f0 <__udivsi3>
1010b514:	9826943a 	slli	r19,r19,16
1010b518:	9008d43a 	srli	r4,r18,16
1010b51c:	1521383a 	mul	r16,r2,r20
1010b520:	102d883a 	mov	r22,r2
1010b524:	24c8b03a 	or	r4,r4,r19
1010b528:	d8c00017 	ldw	r3,0(sp)
1010b52c:	2400052e 	bgeu	r4,r16,1010b544 <__udivdi3+0x23c>
1010b530:	2449883a 	add	r4,r4,r17
1010b534:	b0bfffc4 	addi	r2,r22,-1
1010b538:	24400136 	bltu	r4,r17,1010b540 <__udivdi3+0x238>
1010b53c:	2400ca36 	bltu	r4,r16,1010b868 <__udivdi3+0x560>
1010b540:	102d883a 	mov	r22,r2
1010b544:	2421c83a 	sub	r16,r4,r16
1010b548:	a80b883a 	mov	r5,r21
1010b54c:	8009883a 	mov	r4,r16
1010b550:	d8c00015 	stw	r3,0(sp)
1010b554:	01012540 	call	10101254 <__umodsi3>
1010b558:	1027883a 	mov	r19,r2
1010b55c:	a80b883a 	mov	r5,r21
1010b560:	8009883a 	mov	r4,r16
1010b564:	01011f00 	call	101011f0 <__udivsi3>
1010b568:	9826943a 	slli	r19,r19,16
1010b56c:	1529383a 	mul	r20,r2,r20
1010b570:	94bfffcc 	andi	r18,r18,65535
1010b574:	94e4b03a 	or	r18,r18,r19
1010b578:	d8c00017 	ldw	r3,0(sp)
1010b57c:	9500052e 	bgeu	r18,r20,1010b594 <__udivdi3+0x28c>
1010b580:	8ca5883a 	add	r18,r17,r18
1010b584:	113fffc4 	addi	r4,r2,-1
1010b588:	94409736 	bltu	r18,r17,1010b7e8 <__udivdi3+0x4e0>
1010b58c:	9500962e 	bgeu	r18,r20,1010b7e8 <__udivdi3+0x4e0>
1010b590:	10bfff84 	addi	r2,r2,-2
1010b594:	b00c943a 	slli	r6,r22,16
1010b598:	3084b03a 	or	r2,r6,r2
1010b59c:	00000206 	br	1010b5a8 <__udivdi3+0x2a0>
1010b5a0:	0007883a 	mov	r3,zero
1010b5a4:	0005883a 	mov	r2,zero
1010b5a8:	dfc00a17 	ldw	ra,40(sp)
1010b5ac:	df000917 	ldw	fp,36(sp)
1010b5b0:	ddc00817 	ldw	r23,32(sp)
1010b5b4:	dd800717 	ldw	r22,28(sp)
1010b5b8:	dd400617 	ldw	r21,24(sp)
1010b5bc:	dd000517 	ldw	r20,20(sp)
1010b5c0:	dcc00417 	ldw	r19,16(sp)
1010b5c4:	dc800317 	ldw	r18,12(sp)
1010b5c8:	dc400217 	ldw	r17,8(sp)
1010b5cc:	dc000117 	ldw	r16,4(sp)
1010b5d0:	dec00b04 	addi	sp,sp,44
1010b5d4:	f800283a 	ret
1010b5d8:	00803fc4 	movi	r2,255
1010b5dc:	11c5803a 	cmpltu	r2,r2,r7
1010b5e0:	100490fa 	slli	r2,r2,3
1010b5e4:	003f9e06 	br	1010b460 <__alt_data_end+0xfffeb460>
1010b5e8:	00803fc4 	movi	r2,255
1010b5ec:	1445803a 	cmpltu	r2,r2,r17
1010b5f0:	100490fa 	slli	r2,r2,3
1010b5f4:	003fb206 	br	1010b4c0 <__alt_data_end+0xfffeb4c0>
1010b5f8:	00804034 	movhi	r2,256
1010b5fc:	10bfffc4 	addi	r2,r2,-1
1010b600:	11808836 	bltu	r2,r6,1010b824 <__udivdi3+0x51c>
1010b604:	00800404 	movi	r2,16
1010b608:	003f5606 	br	1010b364 <__alt_data_end+0xfffeb364>
1010b60c:	30aed83a 	srl	r23,r6,r2
1010b610:	3d4e983a 	sll	r7,r7,r21
1010b614:	80acd83a 	srl	r22,r16,r2
1010b618:	9884d83a 	srl	r2,r19,r2
1010b61c:	3deeb03a 	or	r23,r7,r23
1010b620:	b824d43a 	srli	r18,r23,16
1010b624:	8560983a 	sll	r16,r16,r21
1010b628:	b009883a 	mov	r4,r22
1010b62c:	900b883a 	mov	r5,r18
1010b630:	3568983a 	sll	r20,r6,r21
1010b634:	1420b03a 	or	r16,r2,r16
1010b638:	01012540 	call	10101254 <__umodsi3>
1010b63c:	b009883a 	mov	r4,r22
1010b640:	900b883a 	mov	r5,r18
1010b644:	1023883a 	mov	r17,r2
1010b648:	01011f00 	call	101011f0 <__udivsi3>
1010b64c:	8808943a 	slli	r4,r17,16
1010b650:	bf3fffcc 	andi	fp,r23,65535
1010b654:	8006d43a 	srli	r3,r16,16
1010b658:	e0a3383a 	mul	r17,fp,r2
1010b65c:	100d883a 	mov	r6,r2
1010b660:	1906b03a 	or	r3,r3,r4
1010b664:	1c40042e 	bgeu	r3,r17,1010b678 <__udivdi3+0x370>
1010b668:	1dc7883a 	add	r3,r3,r23
1010b66c:	10bfffc4 	addi	r2,r2,-1
1010b670:	1dc0752e 	bgeu	r3,r23,1010b848 <__udivdi3+0x540>
1010b674:	100d883a 	mov	r6,r2
1010b678:	1c63c83a 	sub	r17,r3,r17
1010b67c:	900b883a 	mov	r5,r18
1010b680:	8809883a 	mov	r4,r17
1010b684:	d9800015 	stw	r6,0(sp)
1010b688:	01012540 	call	10101254 <__umodsi3>
1010b68c:	102d883a 	mov	r22,r2
1010b690:	8809883a 	mov	r4,r17
1010b694:	900b883a 	mov	r5,r18
1010b698:	01011f00 	call	101011f0 <__udivsi3>
1010b69c:	b02c943a 	slli	r22,r22,16
1010b6a0:	e089383a 	mul	r4,fp,r2
1010b6a4:	843fffcc 	andi	r16,r16,65535
1010b6a8:	85a0b03a 	or	r16,r16,r22
1010b6ac:	d9800017 	ldw	r6,0(sp)
1010b6b0:	8100042e 	bgeu	r16,r4,1010b6c4 <__udivdi3+0x3bc>
1010b6b4:	85e1883a 	add	r16,r16,r23
1010b6b8:	10ffffc4 	addi	r3,r2,-1
1010b6bc:	85c05e2e 	bgeu	r16,r23,1010b838 <__udivdi3+0x530>
1010b6c0:	1805883a 	mov	r2,r3
1010b6c4:	300c943a 	slli	r6,r6,16
1010b6c8:	a17fffcc 	andi	r5,r20,65535
1010b6cc:	a028d43a 	srli	r20,r20,16
1010b6d0:	3084b03a 	or	r2,r6,r2
1010b6d4:	10ffffcc 	andi	r3,r2,65535
1010b6d8:	100cd43a 	srli	r6,r2,16
1010b6dc:	194f383a 	mul	r7,r3,r5
1010b6e0:	1d07383a 	mul	r3,r3,r20
1010b6e4:	314b383a 	mul	r5,r6,r5
1010b6e8:	3810d43a 	srli	r8,r7,16
1010b6ec:	8121c83a 	sub	r16,r16,r4
1010b6f0:	1947883a 	add	r3,r3,r5
1010b6f4:	40c7883a 	add	r3,r8,r3
1010b6f8:	350d383a 	mul	r6,r6,r20
1010b6fc:	1940022e 	bgeu	r3,r5,1010b708 <__udivdi3+0x400>
1010b700:	01000074 	movhi	r4,1
1010b704:	310d883a 	add	r6,r6,r4
1010b708:	1828d43a 	srli	r20,r3,16
1010b70c:	a18d883a 	add	r6,r20,r6
1010b710:	81803e36 	bltu	r16,r6,1010b80c <__udivdi3+0x504>
1010b714:	81803826 	beq	r16,r6,1010b7f8 <__udivdi3+0x4f0>
1010b718:	0007883a 	mov	r3,zero
1010b71c:	003fa206 	br	1010b5a8 <__alt_data_end+0xfffeb5a8>
1010b720:	88e2983a 	sll	r17,r17,r3
1010b724:	80a8d83a 	srl	r20,r16,r2
1010b728:	80e0983a 	sll	r16,r16,r3
1010b72c:	882ad43a 	srli	r21,r17,16
1010b730:	9884d83a 	srl	r2,r19,r2
1010b734:	a009883a 	mov	r4,r20
1010b738:	a80b883a 	mov	r5,r21
1010b73c:	142eb03a 	or	r23,r2,r16
1010b740:	98e4983a 	sll	r18,r19,r3
1010b744:	01012540 	call	10101254 <__umodsi3>
1010b748:	a009883a 	mov	r4,r20
1010b74c:	a80b883a 	mov	r5,r21
1010b750:	1021883a 	mov	r16,r2
1010b754:	01011f00 	call	101011f0 <__udivsi3>
1010b758:	1039883a 	mov	fp,r2
1010b75c:	8d3fffcc 	andi	r20,r17,65535
1010b760:	8020943a 	slli	r16,r16,16
1010b764:	b804d43a 	srli	r2,r23,16
1010b768:	a72d383a 	mul	r22,r20,fp
1010b76c:	1404b03a 	or	r2,r2,r16
1010b770:	1580062e 	bgeu	r2,r22,1010b78c <__udivdi3+0x484>
1010b774:	1445883a 	add	r2,r2,r17
1010b778:	e0ffffc4 	addi	r3,fp,-1
1010b77c:	14403836 	bltu	r2,r17,1010b860 <__udivdi3+0x558>
1010b780:	1580372e 	bgeu	r2,r22,1010b860 <__udivdi3+0x558>
1010b784:	e73fff84 	addi	fp,fp,-2
1010b788:	1445883a 	add	r2,r2,r17
1010b78c:	15adc83a 	sub	r22,r2,r22
1010b790:	a80b883a 	mov	r5,r21
1010b794:	b009883a 	mov	r4,r22
1010b798:	01012540 	call	10101254 <__umodsi3>
1010b79c:	1027883a 	mov	r19,r2
1010b7a0:	b009883a 	mov	r4,r22
1010b7a4:	a80b883a 	mov	r5,r21
1010b7a8:	01011f00 	call	101011f0 <__udivsi3>
1010b7ac:	9826943a 	slli	r19,r19,16
1010b7b0:	a0a1383a 	mul	r16,r20,r2
1010b7b4:	b93fffcc 	andi	r4,r23,65535
1010b7b8:	24c8b03a 	or	r4,r4,r19
1010b7bc:	2400062e 	bgeu	r4,r16,1010b7d8 <__udivdi3+0x4d0>
1010b7c0:	2449883a 	add	r4,r4,r17
1010b7c4:	10ffffc4 	addi	r3,r2,-1
1010b7c8:	24402336 	bltu	r4,r17,1010b858 <__udivdi3+0x550>
1010b7cc:	2400222e 	bgeu	r4,r16,1010b858 <__udivdi3+0x550>
1010b7d0:	10bfff84 	addi	r2,r2,-2
1010b7d4:	2449883a 	add	r4,r4,r17
1010b7d8:	e038943a 	slli	fp,fp,16
1010b7dc:	2421c83a 	sub	r16,r4,r16
1010b7e0:	e086b03a 	or	r3,fp,r2
1010b7e4:	003f4306 	br	1010b4f4 <__alt_data_end+0xfffeb4f4>
1010b7e8:	2005883a 	mov	r2,r4
1010b7ec:	003f6906 	br	1010b594 <__alt_data_end+0xfffeb594>
1010b7f0:	1805883a 	mov	r2,r3
1010b7f4:	003f0f06 	br	1010b434 <__alt_data_end+0xfffeb434>
1010b7f8:	1806943a 	slli	r3,r3,16
1010b7fc:	9d66983a 	sll	r19,r19,r21
1010b800:	39ffffcc 	andi	r7,r7,65535
1010b804:	19c7883a 	add	r3,r3,r7
1010b808:	98ffc32e 	bgeu	r19,r3,1010b718 <__alt_data_end+0xfffeb718>
1010b80c:	10bfffc4 	addi	r2,r2,-1
1010b810:	003fc106 	br	1010b718 <__alt_data_end+0xfffeb718>
1010b814:	00800604 	movi	r2,24
1010b818:	003f1106 	br	1010b460 <__alt_data_end+0xfffeb460>
1010b81c:	00800604 	movi	r2,24
1010b820:	003f2706 	br	1010b4c0 <__alt_data_end+0xfffeb4c0>
1010b824:	00800604 	movi	r2,24
1010b828:	003ece06 	br	1010b364 <__alt_data_end+0xfffeb364>
1010b82c:	0007883a 	mov	r3,zero
1010b830:	00800044 	movi	r2,1
1010b834:	003f5c06 	br	1010b5a8 <__alt_data_end+0xfffeb5a8>
1010b838:	813fa12e 	bgeu	r16,r4,1010b6c0 <__alt_data_end+0xfffeb6c0>
1010b83c:	10bfff84 	addi	r2,r2,-2
1010b840:	85e1883a 	add	r16,r16,r23
1010b844:	003f9f06 	br	1010b6c4 <__alt_data_end+0xfffeb6c4>
1010b848:	1c7f8a2e 	bgeu	r3,r17,1010b674 <__alt_data_end+0xfffeb674>
1010b84c:	31bfff84 	addi	r6,r6,-2
1010b850:	1dc7883a 	add	r3,r3,r23
1010b854:	003f8806 	br	1010b678 <__alt_data_end+0xfffeb678>
1010b858:	1805883a 	mov	r2,r3
1010b85c:	003fde06 	br	1010b7d8 <__alt_data_end+0xfffeb7d8>
1010b860:	1839883a 	mov	fp,r3
1010b864:	003fc906 	br	1010b78c <__alt_data_end+0xfffeb78c>
1010b868:	b5bfff84 	addi	r22,r22,-2
1010b86c:	2449883a 	add	r4,r4,r17
1010b870:	003f3406 	br	1010b544 <__alt_data_end+0xfffeb544>
1010b874:	b5bfff84 	addi	r22,r22,-2
1010b878:	1445883a 	add	r2,r2,r17
1010b87c:	003edb06 	br	1010b3ec <__alt_data_end+0xfffeb3ec>

1010b880 <__umoddi3>:
1010b880:	defff404 	addi	sp,sp,-48
1010b884:	df000a15 	stw	fp,40(sp)
1010b888:	dc400315 	stw	r17,12(sp)
1010b88c:	dc000215 	stw	r16,8(sp)
1010b890:	dfc00b15 	stw	ra,44(sp)
1010b894:	ddc00915 	stw	r23,36(sp)
1010b898:	dd800815 	stw	r22,32(sp)
1010b89c:	dd400715 	stw	r21,28(sp)
1010b8a0:	dd000615 	stw	r20,24(sp)
1010b8a4:	dcc00515 	stw	r19,20(sp)
1010b8a8:	dc800415 	stw	r18,16(sp)
1010b8ac:	2021883a 	mov	r16,r4
1010b8b0:	2823883a 	mov	r17,r5
1010b8b4:	2839883a 	mov	fp,r5
1010b8b8:	38003c1e 	bne	r7,zero,1010b9ac <__umoddi3+0x12c>
1010b8bc:	3027883a 	mov	r19,r6
1010b8c0:	2029883a 	mov	r20,r4
1010b8c4:	2980512e 	bgeu	r5,r6,1010ba0c <__umoddi3+0x18c>
1010b8c8:	00bfffd4 	movui	r2,65535
1010b8cc:	11809a36 	bltu	r2,r6,1010bb38 <__umoddi3+0x2b8>
1010b8d0:	01003fc4 	movi	r4,255
1010b8d4:	2189803a 	cmpltu	r4,r4,r6
1010b8d8:	200890fa 	slli	r4,r4,3
1010b8dc:	3104d83a 	srl	r2,r6,r4
1010b8e0:	00c40474 	movhi	r3,4113
1010b8e4:	18c4aa04 	addi	r3,r3,4776
1010b8e8:	1885883a 	add	r2,r3,r2
1010b8ec:	10c00003 	ldbu	r3,0(r2)
1010b8f0:	00800804 	movi	r2,32
1010b8f4:	1909883a 	add	r4,r3,r4
1010b8f8:	1125c83a 	sub	r18,r2,r4
1010b8fc:	90000526 	beq	r18,zero,1010b914 <__umoddi3+0x94>
1010b900:	8ca2983a 	sll	r17,r17,r18
1010b904:	8108d83a 	srl	r4,r16,r4
1010b908:	34a6983a 	sll	r19,r6,r18
1010b90c:	84a8983a 	sll	r20,r16,r18
1010b910:	2478b03a 	or	fp,r4,r17
1010b914:	982ed43a 	srli	r23,r19,16
1010b918:	e009883a 	mov	r4,fp
1010b91c:	9dbfffcc 	andi	r22,r19,65535
1010b920:	b80b883a 	mov	r5,r23
1010b924:	01012540 	call	10101254 <__umodsi3>
1010b928:	e009883a 	mov	r4,fp
1010b92c:	b80b883a 	mov	r5,r23
1010b930:	102b883a 	mov	r21,r2
1010b934:	01011f00 	call	101011f0 <__udivsi3>
1010b938:	a806943a 	slli	r3,r21,16
1010b93c:	a008d43a 	srli	r4,r20,16
1010b940:	b085383a 	mul	r2,r22,r2
1010b944:	20c8b03a 	or	r4,r4,r3
1010b948:	2080032e 	bgeu	r4,r2,1010b958 <__umoddi3+0xd8>
1010b94c:	24c9883a 	add	r4,r4,r19
1010b950:	24c00136 	bltu	r4,r19,1010b958 <__umoddi3+0xd8>
1010b954:	20811036 	bltu	r4,r2,1010bd98 <__umoddi3+0x518>
1010b958:	20abc83a 	sub	r21,r4,r2
1010b95c:	b80b883a 	mov	r5,r23
1010b960:	a809883a 	mov	r4,r21
1010b964:	01012540 	call	10101254 <__umodsi3>
1010b968:	1023883a 	mov	r17,r2
1010b96c:	b80b883a 	mov	r5,r23
1010b970:	a809883a 	mov	r4,r21
1010b974:	01011f00 	call	101011f0 <__udivsi3>
1010b978:	8822943a 	slli	r17,r17,16
1010b97c:	b085383a 	mul	r2,r22,r2
1010b980:	a0ffffcc 	andi	r3,r20,65535
1010b984:	1c46b03a 	or	r3,r3,r17
1010b988:	1880042e 	bgeu	r3,r2,1010b99c <__umoddi3+0x11c>
1010b98c:	1cc7883a 	add	r3,r3,r19
1010b990:	1cc00236 	bltu	r3,r19,1010b99c <__umoddi3+0x11c>
1010b994:	1880012e 	bgeu	r3,r2,1010b99c <__umoddi3+0x11c>
1010b998:	1cc7883a 	add	r3,r3,r19
1010b99c:	1885c83a 	sub	r2,r3,r2
1010b9a0:	1484d83a 	srl	r2,r2,r18
1010b9a4:	0007883a 	mov	r3,zero
1010b9a8:	00004f06 	br	1010bae8 <__umoddi3+0x268>
1010b9ac:	29c04c36 	bltu	r5,r7,1010bae0 <__umoddi3+0x260>
1010b9b0:	00bfffd4 	movui	r2,65535
1010b9b4:	11c0582e 	bgeu	r2,r7,1010bb18 <__umoddi3+0x298>
1010b9b8:	00804034 	movhi	r2,256
1010b9bc:	10bfffc4 	addi	r2,r2,-1
1010b9c0:	11c0e736 	bltu	r2,r7,1010bd60 <__umoddi3+0x4e0>
1010b9c4:	01000404 	movi	r4,16
1010b9c8:	3904d83a 	srl	r2,r7,r4
1010b9cc:	00c40474 	movhi	r3,4113
1010b9d0:	18c4aa04 	addi	r3,r3,4776
1010b9d4:	1885883a 	add	r2,r3,r2
1010b9d8:	14c00003 	ldbu	r19,0(r2)
1010b9dc:	00c00804 	movi	r3,32
1010b9e0:	9927883a 	add	r19,r19,r4
1010b9e4:	1ce9c83a 	sub	r20,r3,r19
1010b9e8:	a000581e 	bne	r20,zero,1010bb4c <__umoddi3+0x2cc>
1010b9ec:	3c400136 	bltu	r7,r17,1010b9f4 <__umoddi3+0x174>
1010b9f0:	8180eb36 	bltu	r16,r6,1010bda0 <__umoddi3+0x520>
1010b9f4:	8185c83a 	sub	r2,r16,r6
1010b9f8:	89e3c83a 	sub	r17,r17,r7
1010b9fc:	8089803a 	cmpltu	r4,r16,r2
1010ba00:	8939c83a 	sub	fp,r17,r4
1010ba04:	e007883a 	mov	r3,fp
1010ba08:	00003706 	br	1010bae8 <__umoddi3+0x268>
1010ba0c:	3000041e 	bne	r6,zero,1010ba20 <__umoddi3+0x1a0>
1010ba10:	000b883a 	mov	r5,zero
1010ba14:	01000044 	movi	r4,1
1010ba18:	01011f00 	call	101011f0 <__udivsi3>
1010ba1c:	1027883a 	mov	r19,r2
1010ba20:	00bfffd4 	movui	r2,65535
1010ba24:	14c0402e 	bgeu	r2,r19,1010bb28 <__umoddi3+0x2a8>
1010ba28:	00804034 	movhi	r2,256
1010ba2c:	10bfffc4 	addi	r2,r2,-1
1010ba30:	14c0cd36 	bltu	r2,r19,1010bd68 <__umoddi3+0x4e8>
1010ba34:	00800404 	movi	r2,16
1010ba38:	9886d83a 	srl	r3,r19,r2
1010ba3c:	01040474 	movhi	r4,4113
1010ba40:	2104aa04 	addi	r4,r4,4776
1010ba44:	20c7883a 	add	r3,r4,r3
1010ba48:	18c00003 	ldbu	r3,0(r3)
1010ba4c:	1887883a 	add	r3,r3,r2
1010ba50:	00800804 	movi	r2,32
1010ba54:	10e5c83a 	sub	r18,r2,r3
1010ba58:	9000901e 	bne	r18,zero,1010bc9c <__umoddi3+0x41c>
1010ba5c:	982cd43a 	srli	r22,r19,16
1010ba60:	8ce3c83a 	sub	r17,r17,r19
1010ba64:	9d7fffcc 	andi	r21,r19,65535
1010ba68:	b00b883a 	mov	r5,r22
1010ba6c:	8809883a 	mov	r4,r17
1010ba70:	01012540 	call	10101254 <__umodsi3>
1010ba74:	8809883a 	mov	r4,r17
1010ba78:	b00b883a 	mov	r5,r22
1010ba7c:	1021883a 	mov	r16,r2
1010ba80:	01011f00 	call	101011f0 <__udivsi3>
1010ba84:	8006943a 	slli	r3,r16,16
1010ba88:	a008d43a 	srli	r4,r20,16
1010ba8c:	1545383a 	mul	r2,r2,r21
1010ba90:	20c8b03a 	or	r4,r4,r3
1010ba94:	2080042e 	bgeu	r4,r2,1010baa8 <__umoddi3+0x228>
1010ba98:	24c9883a 	add	r4,r4,r19
1010ba9c:	24c00236 	bltu	r4,r19,1010baa8 <__umoddi3+0x228>
1010baa0:	2080012e 	bgeu	r4,r2,1010baa8 <__umoddi3+0x228>
1010baa4:	24c9883a 	add	r4,r4,r19
1010baa8:	20a1c83a 	sub	r16,r4,r2
1010baac:	b00b883a 	mov	r5,r22
1010bab0:	8009883a 	mov	r4,r16
1010bab4:	01012540 	call	10101254 <__umodsi3>
1010bab8:	1023883a 	mov	r17,r2
1010babc:	b00b883a 	mov	r5,r22
1010bac0:	8009883a 	mov	r4,r16
1010bac4:	01011f00 	call	101011f0 <__udivsi3>
1010bac8:	8822943a 	slli	r17,r17,16
1010bacc:	1545383a 	mul	r2,r2,r21
1010bad0:	a53fffcc 	andi	r20,r20,65535
1010bad4:	a446b03a 	or	r3,r20,r17
1010bad8:	18bfb02e 	bgeu	r3,r2,1010b99c <__alt_data_end+0xfffeb99c>
1010badc:	003fab06 	br	1010b98c <__alt_data_end+0xfffeb98c>
1010bae0:	2005883a 	mov	r2,r4
1010bae4:	2807883a 	mov	r3,r5
1010bae8:	dfc00b17 	ldw	ra,44(sp)
1010baec:	df000a17 	ldw	fp,40(sp)
1010baf0:	ddc00917 	ldw	r23,36(sp)
1010baf4:	dd800817 	ldw	r22,32(sp)
1010baf8:	dd400717 	ldw	r21,28(sp)
1010bafc:	dd000617 	ldw	r20,24(sp)
1010bb00:	dcc00517 	ldw	r19,20(sp)
1010bb04:	dc800417 	ldw	r18,16(sp)
1010bb08:	dc400317 	ldw	r17,12(sp)
1010bb0c:	dc000217 	ldw	r16,8(sp)
1010bb10:	dec00c04 	addi	sp,sp,48
1010bb14:	f800283a 	ret
1010bb18:	04c03fc4 	movi	r19,255
1010bb1c:	99c9803a 	cmpltu	r4,r19,r7
1010bb20:	200890fa 	slli	r4,r4,3
1010bb24:	003fa806 	br	1010b9c8 <__alt_data_end+0xfffeb9c8>
1010bb28:	00803fc4 	movi	r2,255
1010bb2c:	14c5803a 	cmpltu	r2,r2,r19
1010bb30:	100490fa 	slli	r2,r2,3
1010bb34:	003fc006 	br	1010ba38 <__alt_data_end+0xfffeba38>
1010bb38:	00804034 	movhi	r2,256
1010bb3c:	10bfffc4 	addi	r2,r2,-1
1010bb40:	11808b36 	bltu	r2,r6,1010bd70 <__umoddi3+0x4f0>
1010bb44:	01000404 	movi	r4,16
1010bb48:	003f6406 	br	1010b8dc <__alt_data_end+0xfffeb8dc>
1010bb4c:	34c4d83a 	srl	r2,r6,r19
1010bb50:	3d0e983a 	sll	r7,r7,r20
1010bb54:	8cf8d83a 	srl	fp,r17,r19
1010bb58:	8d10983a 	sll	r8,r17,r20
1010bb5c:	38aab03a 	or	r21,r7,r2
1010bb60:	a82cd43a 	srli	r22,r21,16
1010bb64:	84e2d83a 	srl	r17,r16,r19
1010bb68:	e009883a 	mov	r4,fp
1010bb6c:	b00b883a 	mov	r5,r22
1010bb70:	8a22b03a 	or	r17,r17,r8
1010bb74:	3524983a 	sll	r18,r6,r20
1010bb78:	01012540 	call	10101254 <__umodsi3>
1010bb7c:	e009883a 	mov	r4,fp
1010bb80:	b00b883a 	mov	r5,r22
1010bb84:	102f883a 	mov	r23,r2
1010bb88:	01011f00 	call	101011f0 <__udivsi3>
1010bb8c:	100d883a 	mov	r6,r2
1010bb90:	b808943a 	slli	r4,r23,16
1010bb94:	aa3fffcc 	andi	r8,r21,65535
1010bb98:	8804d43a 	srli	r2,r17,16
1010bb9c:	41af383a 	mul	r23,r8,r6
1010bba0:	8520983a 	sll	r16,r16,r20
1010bba4:	1104b03a 	or	r2,r2,r4
1010bba8:	15c0042e 	bgeu	r2,r23,1010bbbc <__umoddi3+0x33c>
1010bbac:	1545883a 	add	r2,r2,r21
1010bbb0:	30ffffc4 	addi	r3,r6,-1
1010bbb4:	1540742e 	bgeu	r2,r21,1010bd88 <__umoddi3+0x508>
1010bbb8:	180d883a 	mov	r6,r3
1010bbbc:	15efc83a 	sub	r23,r2,r23
1010bbc0:	b00b883a 	mov	r5,r22
1010bbc4:	b809883a 	mov	r4,r23
1010bbc8:	d9800115 	stw	r6,4(sp)
1010bbcc:	da000015 	stw	r8,0(sp)
1010bbd0:	01012540 	call	10101254 <__umodsi3>
1010bbd4:	b00b883a 	mov	r5,r22
1010bbd8:	b809883a 	mov	r4,r23
1010bbdc:	1039883a 	mov	fp,r2
1010bbe0:	01011f00 	call	101011f0 <__udivsi3>
1010bbe4:	da000017 	ldw	r8,0(sp)
1010bbe8:	e038943a 	slli	fp,fp,16
1010bbec:	100b883a 	mov	r5,r2
1010bbf0:	4089383a 	mul	r4,r8,r2
1010bbf4:	8a3fffcc 	andi	r8,r17,65535
1010bbf8:	4710b03a 	or	r8,r8,fp
1010bbfc:	d9800117 	ldw	r6,4(sp)
1010bc00:	4100042e 	bgeu	r8,r4,1010bc14 <__umoddi3+0x394>
1010bc04:	4551883a 	add	r8,r8,r21
1010bc08:	10bfffc4 	addi	r2,r2,-1
1010bc0c:	45405a2e 	bgeu	r8,r21,1010bd78 <__umoddi3+0x4f8>
1010bc10:	100b883a 	mov	r5,r2
1010bc14:	300c943a 	slli	r6,r6,16
1010bc18:	91ffffcc 	andi	r7,r18,65535
1010bc1c:	9004d43a 	srli	r2,r18,16
1010bc20:	314cb03a 	or	r6,r6,r5
1010bc24:	317fffcc 	andi	r5,r6,65535
1010bc28:	300cd43a 	srli	r6,r6,16
1010bc2c:	29d3383a 	mul	r9,r5,r7
1010bc30:	288b383a 	mul	r5,r5,r2
1010bc34:	31cf383a 	mul	r7,r6,r7
1010bc38:	4806d43a 	srli	r3,r9,16
1010bc3c:	4111c83a 	sub	r8,r8,r4
1010bc40:	29cb883a 	add	r5,r5,r7
1010bc44:	194b883a 	add	r5,r3,r5
1010bc48:	3085383a 	mul	r2,r6,r2
1010bc4c:	29c0022e 	bgeu	r5,r7,1010bc58 <__umoddi3+0x3d8>
1010bc50:	00c00074 	movhi	r3,1
1010bc54:	10c5883a 	add	r2,r2,r3
1010bc58:	2808d43a 	srli	r4,r5,16
1010bc5c:	280a943a 	slli	r5,r5,16
1010bc60:	4a7fffcc 	andi	r9,r9,65535
1010bc64:	2085883a 	add	r2,r4,r2
1010bc68:	2a4b883a 	add	r5,r5,r9
1010bc6c:	40803636 	bltu	r8,r2,1010bd48 <__umoddi3+0x4c8>
1010bc70:	40804d26 	beq	r8,r2,1010bda8 <__umoddi3+0x528>
1010bc74:	4089c83a 	sub	r4,r8,r2
1010bc78:	280f883a 	mov	r7,r5
1010bc7c:	81cfc83a 	sub	r7,r16,r7
1010bc80:	81c7803a 	cmpltu	r3,r16,r7
1010bc84:	20c7c83a 	sub	r3,r4,r3
1010bc88:	1cc4983a 	sll	r2,r3,r19
1010bc8c:	3d0ed83a 	srl	r7,r7,r20
1010bc90:	1d06d83a 	srl	r3,r3,r20
1010bc94:	11c4b03a 	or	r2,r2,r7
1010bc98:	003f9306 	br	1010bae8 <__alt_data_end+0xfffebae8>
1010bc9c:	9ca6983a 	sll	r19,r19,r18
1010bca0:	88e8d83a 	srl	r20,r17,r3
1010bca4:	80c4d83a 	srl	r2,r16,r3
1010bca8:	982cd43a 	srli	r22,r19,16
1010bcac:	8ca2983a 	sll	r17,r17,r18
1010bcb0:	a009883a 	mov	r4,r20
1010bcb4:	b00b883a 	mov	r5,r22
1010bcb8:	1478b03a 	or	fp,r2,r17
1010bcbc:	01012540 	call	10101254 <__umodsi3>
1010bcc0:	a009883a 	mov	r4,r20
1010bcc4:	b00b883a 	mov	r5,r22
1010bcc8:	1023883a 	mov	r17,r2
1010bccc:	01011f00 	call	101011f0 <__udivsi3>
1010bcd0:	9d7fffcc 	andi	r21,r19,65535
1010bcd4:	880a943a 	slli	r5,r17,16
1010bcd8:	e008d43a 	srli	r4,fp,16
1010bcdc:	a885383a 	mul	r2,r21,r2
1010bce0:	84a8983a 	sll	r20,r16,r18
1010bce4:	2148b03a 	or	r4,r4,r5
1010bce8:	2080042e 	bgeu	r4,r2,1010bcfc <__umoddi3+0x47c>
1010bcec:	24c9883a 	add	r4,r4,r19
1010bcf0:	24c00236 	bltu	r4,r19,1010bcfc <__umoddi3+0x47c>
1010bcf4:	2080012e 	bgeu	r4,r2,1010bcfc <__umoddi3+0x47c>
1010bcf8:	24c9883a 	add	r4,r4,r19
1010bcfc:	20a3c83a 	sub	r17,r4,r2
1010bd00:	b00b883a 	mov	r5,r22
1010bd04:	8809883a 	mov	r4,r17
1010bd08:	01012540 	call	10101254 <__umodsi3>
1010bd0c:	102f883a 	mov	r23,r2
1010bd10:	8809883a 	mov	r4,r17
1010bd14:	b00b883a 	mov	r5,r22
1010bd18:	01011f00 	call	101011f0 <__udivsi3>
1010bd1c:	b82e943a 	slli	r23,r23,16
1010bd20:	a885383a 	mul	r2,r21,r2
1010bd24:	e13fffcc 	andi	r4,fp,65535
1010bd28:	25c8b03a 	or	r4,r4,r23
1010bd2c:	2080042e 	bgeu	r4,r2,1010bd40 <__umoddi3+0x4c0>
1010bd30:	24c9883a 	add	r4,r4,r19
1010bd34:	24c00236 	bltu	r4,r19,1010bd40 <__umoddi3+0x4c0>
1010bd38:	2080012e 	bgeu	r4,r2,1010bd40 <__umoddi3+0x4c0>
1010bd3c:	24c9883a 	add	r4,r4,r19
1010bd40:	20a3c83a 	sub	r17,r4,r2
1010bd44:	003f4806 	br	1010ba68 <__alt_data_end+0xfffeba68>
1010bd48:	2c8fc83a 	sub	r7,r5,r18
1010bd4c:	1545c83a 	sub	r2,r2,r21
1010bd50:	29cb803a 	cmpltu	r5,r5,r7
1010bd54:	1145c83a 	sub	r2,r2,r5
1010bd58:	4089c83a 	sub	r4,r8,r2
1010bd5c:	003fc706 	br	1010bc7c <__alt_data_end+0xfffebc7c>
1010bd60:	01000604 	movi	r4,24
1010bd64:	003f1806 	br	1010b9c8 <__alt_data_end+0xfffeb9c8>
1010bd68:	00800604 	movi	r2,24
1010bd6c:	003f3206 	br	1010ba38 <__alt_data_end+0xfffeba38>
1010bd70:	01000604 	movi	r4,24
1010bd74:	003ed906 	br	1010b8dc <__alt_data_end+0xfffeb8dc>
1010bd78:	413fa52e 	bgeu	r8,r4,1010bc10 <__alt_data_end+0xfffebc10>
1010bd7c:	297fff84 	addi	r5,r5,-2
1010bd80:	4551883a 	add	r8,r8,r21
1010bd84:	003fa306 	br	1010bc14 <__alt_data_end+0xfffebc14>
1010bd88:	15ff8b2e 	bgeu	r2,r23,1010bbb8 <__alt_data_end+0xfffebbb8>
1010bd8c:	31bfff84 	addi	r6,r6,-2
1010bd90:	1545883a 	add	r2,r2,r21
1010bd94:	003f8906 	br	1010bbbc <__alt_data_end+0xfffebbbc>
1010bd98:	24c9883a 	add	r4,r4,r19
1010bd9c:	003eee06 	br	1010b958 <__alt_data_end+0xfffeb958>
1010bda0:	8005883a 	mov	r2,r16
1010bda4:	003f1706 	br	1010ba04 <__alt_data_end+0xfffeba04>
1010bda8:	817fe736 	bltu	r16,r5,1010bd48 <__alt_data_end+0xfffebd48>
1010bdac:	280f883a 	mov	r7,r5
1010bdb0:	0009883a 	mov	r4,zero
1010bdb4:	003fb106 	br	1010bc7c <__alt_data_end+0xfffebc7c>

1010bdb8 <__adddf3>:
1010bdb8:	02c00434 	movhi	r11,16
1010bdbc:	5affffc4 	addi	r11,r11,-1
1010bdc0:	2806d7fa 	srli	r3,r5,31
1010bdc4:	2ad4703a 	and	r10,r5,r11
1010bdc8:	3ad2703a 	and	r9,r7,r11
1010bdcc:	3804d53a 	srli	r2,r7,20
1010bdd0:	3018d77a 	srli	r12,r6,29
1010bdd4:	280ad53a 	srli	r5,r5,20
1010bdd8:	501490fa 	slli	r10,r10,3
1010bddc:	2010d77a 	srli	r8,r4,29
1010bde0:	481290fa 	slli	r9,r9,3
1010bde4:	380ed7fa 	srli	r7,r7,31
1010bde8:	defffb04 	addi	sp,sp,-20
1010bdec:	dc800215 	stw	r18,8(sp)
1010bdf0:	dc400115 	stw	r17,4(sp)
1010bdf4:	dc000015 	stw	r16,0(sp)
1010bdf8:	dfc00415 	stw	ra,16(sp)
1010bdfc:	dcc00315 	stw	r19,12(sp)
1010be00:	1c803fcc 	andi	r18,r3,255
1010be04:	2c01ffcc 	andi	r16,r5,2047
1010be08:	5210b03a 	or	r8,r10,r8
1010be0c:	202290fa 	slli	r17,r4,3
1010be10:	1081ffcc 	andi	r2,r2,2047
1010be14:	4b12b03a 	or	r9,r9,r12
1010be18:	300c90fa 	slli	r6,r6,3
1010be1c:	91c07526 	beq	r18,r7,1010bff4 <__adddf3+0x23c>
1010be20:	8087c83a 	sub	r3,r16,r2
1010be24:	00c0ab0e 	bge	zero,r3,1010c0d4 <__adddf3+0x31c>
1010be28:	10002a1e 	bne	r2,zero,1010bed4 <__adddf3+0x11c>
1010be2c:	4984b03a 	or	r2,r9,r6
1010be30:	1000961e 	bne	r2,zero,1010c08c <__adddf3+0x2d4>
1010be34:	888001cc 	andi	r2,r17,7
1010be38:	10000726 	beq	r2,zero,1010be58 <__adddf3+0xa0>
1010be3c:	888003cc 	andi	r2,r17,15
1010be40:	00c00104 	movi	r3,4
1010be44:	10c00426 	beq	r2,r3,1010be58 <__adddf3+0xa0>
1010be48:	88c7883a 	add	r3,r17,r3
1010be4c:	1c63803a 	cmpltu	r17,r3,r17
1010be50:	4451883a 	add	r8,r8,r17
1010be54:	1823883a 	mov	r17,r3
1010be58:	4080202c 	andhi	r2,r8,128
1010be5c:	10005926 	beq	r2,zero,1010bfc4 <__adddf3+0x20c>
1010be60:	84000044 	addi	r16,r16,1
1010be64:	0081ffc4 	movi	r2,2047
1010be68:	8080ba26 	beq	r16,r2,1010c154 <__adddf3+0x39c>
1010be6c:	00bfe034 	movhi	r2,65408
1010be70:	10bfffc4 	addi	r2,r2,-1
1010be74:	4090703a 	and	r8,r8,r2
1010be78:	4004977a 	slli	r2,r8,29
1010be7c:	4010927a 	slli	r8,r8,9
1010be80:	8822d0fa 	srli	r17,r17,3
1010be84:	8401ffcc 	andi	r16,r16,2047
1010be88:	4010d33a 	srli	r8,r8,12
1010be8c:	9007883a 	mov	r3,r18
1010be90:	1444b03a 	or	r2,r2,r17
1010be94:	8401ffcc 	andi	r16,r16,2047
1010be98:	8020953a 	slli	r16,r16,20
1010be9c:	18c03fcc 	andi	r3,r3,255
1010bea0:	01000434 	movhi	r4,16
1010bea4:	213fffc4 	addi	r4,r4,-1
1010bea8:	180697fa 	slli	r3,r3,31
1010beac:	4110703a 	and	r8,r8,r4
1010beb0:	4410b03a 	or	r8,r8,r16
1010beb4:	40c6b03a 	or	r3,r8,r3
1010beb8:	dfc00417 	ldw	ra,16(sp)
1010bebc:	dcc00317 	ldw	r19,12(sp)
1010bec0:	dc800217 	ldw	r18,8(sp)
1010bec4:	dc400117 	ldw	r17,4(sp)
1010bec8:	dc000017 	ldw	r16,0(sp)
1010becc:	dec00504 	addi	sp,sp,20
1010bed0:	f800283a 	ret
1010bed4:	0081ffc4 	movi	r2,2047
1010bed8:	80bfd626 	beq	r16,r2,1010be34 <__alt_data_end+0xfffebe34>
1010bedc:	4a402034 	orhi	r9,r9,128
1010bee0:	00800e04 	movi	r2,56
1010bee4:	10c09f16 	blt	r2,r3,1010c164 <__adddf3+0x3ac>
1010bee8:	008007c4 	movi	r2,31
1010beec:	10c0c216 	blt	r2,r3,1010c1f8 <__adddf3+0x440>
1010bef0:	00800804 	movi	r2,32
1010bef4:	10c5c83a 	sub	r2,r2,r3
1010bef8:	488a983a 	sll	r5,r9,r2
1010befc:	30c8d83a 	srl	r4,r6,r3
1010bf00:	3084983a 	sll	r2,r6,r2
1010bf04:	48c6d83a 	srl	r3,r9,r3
1010bf08:	290cb03a 	or	r6,r5,r4
1010bf0c:	1004c03a 	cmpne	r2,r2,zero
1010bf10:	308cb03a 	or	r6,r6,r2
1010bf14:	898dc83a 	sub	r6,r17,r6
1010bf18:	89a3803a 	cmpltu	r17,r17,r6
1010bf1c:	40d1c83a 	sub	r8,r8,r3
1010bf20:	4451c83a 	sub	r8,r8,r17
1010bf24:	3023883a 	mov	r17,r6
1010bf28:	4080202c 	andhi	r2,r8,128
1010bf2c:	10002326 	beq	r2,zero,1010bfbc <__adddf3+0x204>
1010bf30:	04c02034 	movhi	r19,128
1010bf34:	9cffffc4 	addi	r19,r19,-1
1010bf38:	44e6703a 	and	r19,r8,r19
1010bf3c:	98007626 	beq	r19,zero,1010c118 <__adddf3+0x360>
1010bf40:	9809883a 	mov	r4,r19
1010bf44:	010e3bc0 	call	1010e3bc <__clzsi2>
1010bf48:	10fffe04 	addi	r3,r2,-8
1010bf4c:	010007c4 	movi	r4,31
1010bf50:	20c07716 	blt	r4,r3,1010c130 <__adddf3+0x378>
1010bf54:	00800804 	movi	r2,32
1010bf58:	10c5c83a 	sub	r2,r2,r3
1010bf5c:	8884d83a 	srl	r2,r17,r2
1010bf60:	98d0983a 	sll	r8,r19,r3
1010bf64:	88e2983a 	sll	r17,r17,r3
1010bf68:	1204b03a 	or	r2,r2,r8
1010bf6c:	1c007416 	blt	r3,r16,1010c140 <__adddf3+0x388>
1010bf70:	1c21c83a 	sub	r16,r3,r16
1010bf74:	82000044 	addi	r8,r16,1
1010bf78:	00c007c4 	movi	r3,31
1010bf7c:	1a009116 	blt	r3,r8,1010c1c4 <__adddf3+0x40c>
1010bf80:	00c00804 	movi	r3,32
1010bf84:	1a07c83a 	sub	r3,r3,r8
1010bf88:	8a08d83a 	srl	r4,r17,r8
1010bf8c:	88e2983a 	sll	r17,r17,r3
1010bf90:	10c6983a 	sll	r3,r2,r3
1010bf94:	1210d83a 	srl	r8,r2,r8
1010bf98:	8804c03a 	cmpne	r2,r17,zero
1010bf9c:	1906b03a 	or	r3,r3,r4
1010bfa0:	18a2b03a 	or	r17,r3,r2
1010bfa4:	0021883a 	mov	r16,zero
1010bfa8:	003fa206 	br	1010be34 <__alt_data_end+0xfffebe34>
1010bfac:	1890b03a 	or	r8,r3,r2
1010bfb0:	40017d26 	beq	r8,zero,1010c5a8 <__adddf3+0x7f0>
1010bfb4:	1011883a 	mov	r8,r2
1010bfb8:	1823883a 	mov	r17,r3
1010bfbc:	888001cc 	andi	r2,r17,7
1010bfc0:	103f9e1e 	bne	r2,zero,1010be3c <__alt_data_end+0xfffebe3c>
1010bfc4:	4004977a 	slli	r2,r8,29
1010bfc8:	8822d0fa 	srli	r17,r17,3
1010bfcc:	4010d0fa 	srli	r8,r8,3
1010bfd0:	9007883a 	mov	r3,r18
1010bfd4:	1444b03a 	or	r2,r2,r17
1010bfd8:	0101ffc4 	movi	r4,2047
1010bfdc:	81002426 	beq	r16,r4,1010c070 <__adddf3+0x2b8>
1010bfe0:	8120703a 	and	r16,r16,r4
1010bfe4:	01000434 	movhi	r4,16
1010bfe8:	213fffc4 	addi	r4,r4,-1
1010bfec:	4110703a 	and	r8,r8,r4
1010bff0:	003fa806 	br	1010be94 <__alt_data_end+0xfffebe94>
1010bff4:	8089c83a 	sub	r4,r16,r2
1010bff8:	01005e0e 	bge	zero,r4,1010c174 <__adddf3+0x3bc>
1010bffc:	10002b26 	beq	r2,zero,1010c0ac <__adddf3+0x2f4>
1010c000:	0081ffc4 	movi	r2,2047
1010c004:	80bf8b26 	beq	r16,r2,1010be34 <__alt_data_end+0xfffebe34>
1010c008:	4a402034 	orhi	r9,r9,128
1010c00c:	00800e04 	movi	r2,56
1010c010:	1100a40e 	bge	r2,r4,1010c2a4 <__adddf3+0x4ec>
1010c014:	498cb03a 	or	r6,r9,r6
1010c018:	300ac03a 	cmpne	r5,r6,zero
1010c01c:	0013883a 	mov	r9,zero
1010c020:	2c4b883a 	add	r5,r5,r17
1010c024:	2c63803a 	cmpltu	r17,r5,r17
1010c028:	4a11883a 	add	r8,r9,r8
1010c02c:	8a11883a 	add	r8,r17,r8
1010c030:	2823883a 	mov	r17,r5
1010c034:	4080202c 	andhi	r2,r8,128
1010c038:	103fe026 	beq	r2,zero,1010bfbc <__alt_data_end+0xfffebfbc>
1010c03c:	84000044 	addi	r16,r16,1
1010c040:	0081ffc4 	movi	r2,2047
1010c044:	8080d226 	beq	r16,r2,1010c390 <__adddf3+0x5d8>
1010c048:	00bfe034 	movhi	r2,65408
1010c04c:	10bfffc4 	addi	r2,r2,-1
1010c050:	4090703a 	and	r8,r8,r2
1010c054:	880ad07a 	srli	r5,r17,1
1010c058:	400897fa 	slli	r4,r8,31
1010c05c:	88c0004c 	andi	r3,r17,1
1010c060:	28e2b03a 	or	r17,r5,r3
1010c064:	4010d07a 	srli	r8,r8,1
1010c068:	2462b03a 	or	r17,r4,r17
1010c06c:	003f7106 	br	1010be34 <__alt_data_end+0xfffebe34>
1010c070:	4088b03a 	or	r4,r8,r2
1010c074:	20014526 	beq	r4,zero,1010c58c <__adddf3+0x7d4>
1010c078:	01000434 	movhi	r4,16
1010c07c:	42000234 	orhi	r8,r8,8
1010c080:	213fffc4 	addi	r4,r4,-1
1010c084:	4110703a 	and	r8,r8,r4
1010c088:	003f8206 	br	1010be94 <__alt_data_end+0xfffebe94>
1010c08c:	18ffffc4 	addi	r3,r3,-1
1010c090:	1800491e 	bne	r3,zero,1010c1b8 <__adddf3+0x400>
1010c094:	898bc83a 	sub	r5,r17,r6
1010c098:	8963803a 	cmpltu	r17,r17,r5
1010c09c:	4251c83a 	sub	r8,r8,r9
1010c0a0:	4451c83a 	sub	r8,r8,r17
1010c0a4:	2823883a 	mov	r17,r5
1010c0a8:	003f9f06 	br	1010bf28 <__alt_data_end+0xfffebf28>
1010c0ac:	4984b03a 	or	r2,r9,r6
1010c0b0:	103f6026 	beq	r2,zero,1010be34 <__alt_data_end+0xfffebe34>
1010c0b4:	213fffc4 	addi	r4,r4,-1
1010c0b8:	2000931e 	bne	r4,zero,1010c308 <__adddf3+0x550>
1010c0bc:	898d883a 	add	r6,r17,r6
1010c0c0:	3463803a 	cmpltu	r17,r6,r17
1010c0c4:	4251883a 	add	r8,r8,r9
1010c0c8:	8a11883a 	add	r8,r17,r8
1010c0cc:	3023883a 	mov	r17,r6
1010c0d0:	003fd806 	br	1010c034 <__alt_data_end+0xfffec034>
1010c0d4:	1800541e 	bne	r3,zero,1010c228 <__adddf3+0x470>
1010c0d8:	80800044 	addi	r2,r16,1
1010c0dc:	1081ffcc 	andi	r2,r2,2047
1010c0e0:	00c00044 	movi	r3,1
1010c0e4:	1880a00e 	bge	r3,r2,1010c368 <__adddf3+0x5b0>
1010c0e8:	8989c83a 	sub	r4,r17,r6
1010c0ec:	8905803a 	cmpltu	r2,r17,r4
1010c0f0:	4267c83a 	sub	r19,r8,r9
1010c0f4:	98a7c83a 	sub	r19,r19,r2
1010c0f8:	9880202c 	andhi	r2,r19,128
1010c0fc:	10006326 	beq	r2,zero,1010c28c <__adddf3+0x4d4>
1010c100:	3463c83a 	sub	r17,r6,r17
1010c104:	4a07c83a 	sub	r3,r9,r8
1010c108:	344d803a 	cmpltu	r6,r6,r17
1010c10c:	19a7c83a 	sub	r19,r3,r6
1010c110:	3825883a 	mov	r18,r7
1010c114:	983f8a1e 	bne	r19,zero,1010bf40 <__alt_data_end+0xfffebf40>
1010c118:	8809883a 	mov	r4,r17
1010c11c:	010e3bc0 	call	1010e3bc <__clzsi2>
1010c120:	10800804 	addi	r2,r2,32
1010c124:	10fffe04 	addi	r3,r2,-8
1010c128:	010007c4 	movi	r4,31
1010c12c:	20ff890e 	bge	r4,r3,1010bf54 <__alt_data_end+0xfffebf54>
1010c130:	10bff604 	addi	r2,r2,-40
1010c134:	8884983a 	sll	r2,r17,r2
1010c138:	0023883a 	mov	r17,zero
1010c13c:	1c3f8c0e 	bge	r3,r16,1010bf70 <__alt_data_end+0xfffebf70>
1010c140:	023fe034 	movhi	r8,65408
1010c144:	423fffc4 	addi	r8,r8,-1
1010c148:	80e1c83a 	sub	r16,r16,r3
1010c14c:	1210703a 	and	r8,r2,r8
1010c150:	003f3806 	br	1010be34 <__alt_data_end+0xfffebe34>
1010c154:	9007883a 	mov	r3,r18
1010c158:	0011883a 	mov	r8,zero
1010c15c:	0005883a 	mov	r2,zero
1010c160:	003f4c06 	br	1010be94 <__alt_data_end+0xfffebe94>
1010c164:	498cb03a 	or	r6,r9,r6
1010c168:	300cc03a 	cmpne	r6,r6,zero
1010c16c:	0007883a 	mov	r3,zero
1010c170:	003f6806 	br	1010bf14 <__alt_data_end+0xfffebf14>
1010c174:	20009c1e 	bne	r4,zero,1010c3e8 <__adddf3+0x630>
1010c178:	80800044 	addi	r2,r16,1
1010c17c:	1141ffcc 	andi	r5,r2,2047
1010c180:	01000044 	movi	r4,1
1010c184:	2140670e 	bge	r4,r5,1010c324 <__adddf3+0x56c>
1010c188:	0101ffc4 	movi	r4,2047
1010c18c:	11007f26 	beq	r2,r4,1010c38c <__adddf3+0x5d4>
1010c190:	898d883a 	add	r6,r17,r6
1010c194:	4247883a 	add	r3,r8,r9
1010c198:	3451803a 	cmpltu	r8,r6,r17
1010c19c:	40d1883a 	add	r8,r8,r3
1010c1a0:	402297fa 	slli	r17,r8,31
1010c1a4:	300cd07a 	srli	r6,r6,1
1010c1a8:	4010d07a 	srli	r8,r8,1
1010c1ac:	1021883a 	mov	r16,r2
1010c1b0:	89a2b03a 	or	r17,r17,r6
1010c1b4:	003f1f06 	br	1010be34 <__alt_data_end+0xfffebe34>
1010c1b8:	0081ffc4 	movi	r2,2047
1010c1bc:	80bf481e 	bne	r16,r2,1010bee0 <__alt_data_end+0xfffebee0>
1010c1c0:	003f1c06 	br	1010be34 <__alt_data_end+0xfffebe34>
1010c1c4:	843ff844 	addi	r16,r16,-31
1010c1c8:	01000804 	movi	r4,32
1010c1cc:	1406d83a 	srl	r3,r2,r16
1010c1d0:	41005026 	beq	r8,r4,1010c314 <__adddf3+0x55c>
1010c1d4:	01001004 	movi	r4,64
1010c1d8:	2211c83a 	sub	r8,r4,r8
1010c1dc:	1204983a 	sll	r2,r2,r8
1010c1e0:	88a2b03a 	or	r17,r17,r2
1010c1e4:	8822c03a 	cmpne	r17,r17,zero
1010c1e8:	1c62b03a 	or	r17,r3,r17
1010c1ec:	0011883a 	mov	r8,zero
1010c1f0:	0021883a 	mov	r16,zero
1010c1f4:	003f7106 	br	1010bfbc <__alt_data_end+0xfffebfbc>
1010c1f8:	193ff804 	addi	r4,r3,-32
1010c1fc:	00800804 	movi	r2,32
1010c200:	4908d83a 	srl	r4,r9,r4
1010c204:	18804526 	beq	r3,r2,1010c31c <__adddf3+0x564>
1010c208:	00801004 	movi	r2,64
1010c20c:	10c5c83a 	sub	r2,r2,r3
1010c210:	4886983a 	sll	r3,r9,r2
1010c214:	198cb03a 	or	r6,r3,r6
1010c218:	300cc03a 	cmpne	r6,r6,zero
1010c21c:	218cb03a 	or	r6,r4,r6
1010c220:	0007883a 	mov	r3,zero
1010c224:	003f3b06 	br	1010bf14 <__alt_data_end+0xfffebf14>
1010c228:	80002a26 	beq	r16,zero,1010c2d4 <__adddf3+0x51c>
1010c22c:	0101ffc4 	movi	r4,2047
1010c230:	11006826 	beq	r2,r4,1010c3d4 <__adddf3+0x61c>
1010c234:	00c7c83a 	sub	r3,zero,r3
1010c238:	42002034 	orhi	r8,r8,128
1010c23c:	01000e04 	movi	r4,56
1010c240:	20c07c16 	blt	r4,r3,1010c434 <__adddf3+0x67c>
1010c244:	010007c4 	movi	r4,31
1010c248:	20c0da16 	blt	r4,r3,1010c5b4 <__adddf3+0x7fc>
1010c24c:	01000804 	movi	r4,32
1010c250:	20c9c83a 	sub	r4,r4,r3
1010c254:	4114983a 	sll	r10,r8,r4
1010c258:	88cad83a 	srl	r5,r17,r3
1010c25c:	8908983a 	sll	r4,r17,r4
1010c260:	40c6d83a 	srl	r3,r8,r3
1010c264:	5162b03a 	or	r17,r10,r5
1010c268:	2008c03a 	cmpne	r4,r4,zero
1010c26c:	8922b03a 	or	r17,r17,r4
1010c270:	3463c83a 	sub	r17,r6,r17
1010c274:	48c7c83a 	sub	r3,r9,r3
1010c278:	344d803a 	cmpltu	r6,r6,r17
1010c27c:	1991c83a 	sub	r8,r3,r6
1010c280:	1021883a 	mov	r16,r2
1010c284:	3825883a 	mov	r18,r7
1010c288:	003f2706 	br	1010bf28 <__alt_data_end+0xfffebf28>
1010c28c:	24d0b03a 	or	r8,r4,r19
1010c290:	40001b1e 	bne	r8,zero,1010c300 <__adddf3+0x548>
1010c294:	0005883a 	mov	r2,zero
1010c298:	0007883a 	mov	r3,zero
1010c29c:	0021883a 	mov	r16,zero
1010c2a0:	003f4d06 	br	1010bfd8 <__alt_data_end+0xfffebfd8>
1010c2a4:	008007c4 	movi	r2,31
1010c2a8:	11003c16 	blt	r2,r4,1010c39c <__adddf3+0x5e4>
1010c2ac:	00800804 	movi	r2,32
1010c2b0:	1105c83a 	sub	r2,r2,r4
1010c2b4:	488e983a 	sll	r7,r9,r2
1010c2b8:	310ad83a 	srl	r5,r6,r4
1010c2bc:	3084983a 	sll	r2,r6,r2
1010c2c0:	4912d83a 	srl	r9,r9,r4
1010c2c4:	394ab03a 	or	r5,r7,r5
1010c2c8:	1004c03a 	cmpne	r2,r2,zero
1010c2cc:	288ab03a 	or	r5,r5,r2
1010c2d0:	003f5306 	br	1010c020 <__alt_data_end+0xfffec020>
1010c2d4:	4448b03a 	or	r4,r8,r17
1010c2d8:	20003e26 	beq	r4,zero,1010c3d4 <__adddf3+0x61c>
1010c2dc:	00c6303a 	nor	r3,zero,r3
1010c2e0:	18003a1e 	bne	r3,zero,1010c3cc <__adddf3+0x614>
1010c2e4:	3463c83a 	sub	r17,r6,r17
1010c2e8:	4a07c83a 	sub	r3,r9,r8
1010c2ec:	344d803a 	cmpltu	r6,r6,r17
1010c2f0:	1991c83a 	sub	r8,r3,r6
1010c2f4:	1021883a 	mov	r16,r2
1010c2f8:	3825883a 	mov	r18,r7
1010c2fc:	003f0a06 	br	1010bf28 <__alt_data_end+0xfffebf28>
1010c300:	2023883a 	mov	r17,r4
1010c304:	003f0d06 	br	1010bf3c <__alt_data_end+0xfffebf3c>
1010c308:	0081ffc4 	movi	r2,2047
1010c30c:	80bf3f1e 	bne	r16,r2,1010c00c <__alt_data_end+0xfffec00c>
1010c310:	003ec806 	br	1010be34 <__alt_data_end+0xfffebe34>
1010c314:	0005883a 	mov	r2,zero
1010c318:	003fb106 	br	1010c1e0 <__alt_data_end+0xfffec1e0>
1010c31c:	0007883a 	mov	r3,zero
1010c320:	003fbc06 	br	1010c214 <__alt_data_end+0xfffec214>
1010c324:	4444b03a 	or	r2,r8,r17
1010c328:	8000871e 	bne	r16,zero,1010c548 <__adddf3+0x790>
1010c32c:	1000ba26 	beq	r2,zero,1010c618 <__adddf3+0x860>
1010c330:	4984b03a 	or	r2,r9,r6
1010c334:	103ebf26 	beq	r2,zero,1010be34 <__alt_data_end+0xfffebe34>
1010c338:	8985883a 	add	r2,r17,r6
1010c33c:	4247883a 	add	r3,r8,r9
1010c340:	1451803a 	cmpltu	r8,r2,r17
1010c344:	40d1883a 	add	r8,r8,r3
1010c348:	40c0202c 	andhi	r3,r8,128
1010c34c:	1023883a 	mov	r17,r2
1010c350:	183f1a26 	beq	r3,zero,1010bfbc <__alt_data_end+0xfffebfbc>
1010c354:	00bfe034 	movhi	r2,65408
1010c358:	10bfffc4 	addi	r2,r2,-1
1010c35c:	2021883a 	mov	r16,r4
1010c360:	4090703a 	and	r8,r8,r2
1010c364:	003eb306 	br	1010be34 <__alt_data_end+0xfffebe34>
1010c368:	4444b03a 	or	r2,r8,r17
1010c36c:	8000291e 	bne	r16,zero,1010c414 <__adddf3+0x65c>
1010c370:	10004b1e 	bne	r2,zero,1010c4a0 <__adddf3+0x6e8>
1010c374:	4990b03a 	or	r8,r9,r6
1010c378:	40008b26 	beq	r8,zero,1010c5a8 <__adddf3+0x7f0>
1010c37c:	4811883a 	mov	r8,r9
1010c380:	3023883a 	mov	r17,r6
1010c384:	3825883a 	mov	r18,r7
1010c388:	003eaa06 	br	1010be34 <__alt_data_end+0xfffebe34>
1010c38c:	1021883a 	mov	r16,r2
1010c390:	0011883a 	mov	r8,zero
1010c394:	0005883a 	mov	r2,zero
1010c398:	003f0f06 	br	1010bfd8 <__alt_data_end+0xfffebfd8>
1010c39c:	217ff804 	addi	r5,r4,-32
1010c3a0:	00800804 	movi	r2,32
1010c3a4:	494ad83a 	srl	r5,r9,r5
1010c3a8:	20807d26 	beq	r4,r2,1010c5a0 <__adddf3+0x7e8>
1010c3ac:	00801004 	movi	r2,64
1010c3b0:	1109c83a 	sub	r4,r2,r4
1010c3b4:	4912983a 	sll	r9,r9,r4
1010c3b8:	498cb03a 	or	r6,r9,r6
1010c3bc:	300cc03a 	cmpne	r6,r6,zero
1010c3c0:	298ab03a 	or	r5,r5,r6
1010c3c4:	0013883a 	mov	r9,zero
1010c3c8:	003f1506 	br	1010c020 <__alt_data_end+0xfffec020>
1010c3cc:	0101ffc4 	movi	r4,2047
1010c3d0:	113f9a1e 	bne	r2,r4,1010c23c <__alt_data_end+0xfffec23c>
1010c3d4:	4811883a 	mov	r8,r9
1010c3d8:	3023883a 	mov	r17,r6
1010c3dc:	1021883a 	mov	r16,r2
1010c3e0:	3825883a 	mov	r18,r7
1010c3e4:	003e9306 	br	1010be34 <__alt_data_end+0xfffebe34>
1010c3e8:	8000161e 	bne	r16,zero,1010c444 <__adddf3+0x68c>
1010c3ec:	444ab03a 	or	r5,r8,r17
1010c3f0:	28005126 	beq	r5,zero,1010c538 <__adddf3+0x780>
1010c3f4:	0108303a 	nor	r4,zero,r4
1010c3f8:	20004d1e 	bne	r4,zero,1010c530 <__adddf3+0x778>
1010c3fc:	89a3883a 	add	r17,r17,r6
1010c400:	4253883a 	add	r9,r8,r9
1010c404:	898d803a 	cmpltu	r6,r17,r6
1010c408:	3251883a 	add	r8,r6,r9
1010c40c:	1021883a 	mov	r16,r2
1010c410:	003f0806 	br	1010c034 <__alt_data_end+0xfffec034>
1010c414:	1000301e 	bne	r2,zero,1010c4d8 <__adddf3+0x720>
1010c418:	4984b03a 	or	r2,r9,r6
1010c41c:	10007126 	beq	r2,zero,1010c5e4 <__adddf3+0x82c>
1010c420:	4811883a 	mov	r8,r9
1010c424:	3023883a 	mov	r17,r6
1010c428:	3825883a 	mov	r18,r7
1010c42c:	0401ffc4 	movi	r16,2047
1010c430:	003e8006 	br	1010be34 <__alt_data_end+0xfffebe34>
1010c434:	4462b03a 	or	r17,r8,r17
1010c438:	8822c03a 	cmpne	r17,r17,zero
1010c43c:	0007883a 	mov	r3,zero
1010c440:	003f8b06 	br	1010c270 <__alt_data_end+0xfffec270>
1010c444:	0141ffc4 	movi	r5,2047
1010c448:	11403b26 	beq	r2,r5,1010c538 <__adddf3+0x780>
1010c44c:	0109c83a 	sub	r4,zero,r4
1010c450:	42002034 	orhi	r8,r8,128
1010c454:	01400e04 	movi	r5,56
1010c458:	29006716 	blt	r5,r4,1010c5f8 <__adddf3+0x840>
1010c45c:	014007c4 	movi	r5,31
1010c460:	29007016 	blt	r5,r4,1010c624 <__adddf3+0x86c>
1010c464:	01400804 	movi	r5,32
1010c468:	290bc83a 	sub	r5,r5,r4
1010c46c:	4154983a 	sll	r10,r8,r5
1010c470:	890ed83a 	srl	r7,r17,r4
1010c474:	894a983a 	sll	r5,r17,r5
1010c478:	4108d83a 	srl	r4,r8,r4
1010c47c:	51e2b03a 	or	r17,r10,r7
1010c480:	280ac03a 	cmpne	r5,r5,zero
1010c484:	8962b03a 	or	r17,r17,r5
1010c488:	89a3883a 	add	r17,r17,r6
1010c48c:	2253883a 	add	r9,r4,r9
1010c490:	898d803a 	cmpltu	r6,r17,r6
1010c494:	3251883a 	add	r8,r6,r9
1010c498:	1021883a 	mov	r16,r2
1010c49c:	003ee506 	br	1010c034 <__alt_data_end+0xfffec034>
1010c4a0:	4984b03a 	or	r2,r9,r6
1010c4a4:	103e6326 	beq	r2,zero,1010be34 <__alt_data_end+0xfffebe34>
1010c4a8:	8987c83a 	sub	r3,r17,r6
1010c4ac:	88c9803a 	cmpltu	r4,r17,r3
1010c4b0:	4245c83a 	sub	r2,r8,r9
1010c4b4:	1105c83a 	sub	r2,r2,r4
1010c4b8:	1100202c 	andhi	r4,r2,128
1010c4bc:	203ebb26 	beq	r4,zero,1010bfac <__alt_data_end+0xfffebfac>
1010c4c0:	3463c83a 	sub	r17,r6,r17
1010c4c4:	4a07c83a 	sub	r3,r9,r8
1010c4c8:	344d803a 	cmpltu	r6,r6,r17
1010c4cc:	1991c83a 	sub	r8,r3,r6
1010c4d0:	3825883a 	mov	r18,r7
1010c4d4:	003e5706 	br	1010be34 <__alt_data_end+0xfffebe34>
1010c4d8:	4984b03a 	or	r2,r9,r6
1010c4dc:	10002e26 	beq	r2,zero,1010c598 <__adddf3+0x7e0>
1010c4e0:	4004d0fa 	srli	r2,r8,3
1010c4e4:	8822d0fa 	srli	r17,r17,3
1010c4e8:	4010977a 	slli	r8,r8,29
1010c4ec:	10c0022c 	andhi	r3,r2,8
1010c4f0:	4462b03a 	or	r17,r8,r17
1010c4f4:	18000826 	beq	r3,zero,1010c518 <__adddf3+0x760>
1010c4f8:	4808d0fa 	srli	r4,r9,3
1010c4fc:	20c0022c 	andhi	r3,r4,8
1010c500:	1800051e 	bne	r3,zero,1010c518 <__adddf3+0x760>
1010c504:	300cd0fa 	srli	r6,r6,3
1010c508:	4806977a 	slli	r3,r9,29
1010c50c:	2005883a 	mov	r2,r4
1010c510:	3825883a 	mov	r18,r7
1010c514:	19a2b03a 	or	r17,r3,r6
1010c518:	8810d77a 	srli	r8,r17,29
1010c51c:	100490fa 	slli	r2,r2,3
1010c520:	882290fa 	slli	r17,r17,3
1010c524:	0401ffc4 	movi	r16,2047
1010c528:	4090b03a 	or	r8,r8,r2
1010c52c:	003e4106 	br	1010be34 <__alt_data_end+0xfffebe34>
1010c530:	0141ffc4 	movi	r5,2047
1010c534:	117fc71e 	bne	r2,r5,1010c454 <__alt_data_end+0xfffec454>
1010c538:	4811883a 	mov	r8,r9
1010c53c:	3023883a 	mov	r17,r6
1010c540:	1021883a 	mov	r16,r2
1010c544:	003e3b06 	br	1010be34 <__alt_data_end+0xfffebe34>
1010c548:	10002f26 	beq	r2,zero,1010c608 <__adddf3+0x850>
1010c54c:	4984b03a 	or	r2,r9,r6
1010c550:	10001126 	beq	r2,zero,1010c598 <__adddf3+0x7e0>
1010c554:	4004d0fa 	srli	r2,r8,3
1010c558:	8822d0fa 	srli	r17,r17,3
1010c55c:	4010977a 	slli	r8,r8,29
1010c560:	10c0022c 	andhi	r3,r2,8
1010c564:	4462b03a 	or	r17,r8,r17
1010c568:	183feb26 	beq	r3,zero,1010c518 <__alt_data_end+0xfffec518>
1010c56c:	4808d0fa 	srli	r4,r9,3
1010c570:	20c0022c 	andhi	r3,r4,8
1010c574:	183fe81e 	bne	r3,zero,1010c518 <__alt_data_end+0xfffec518>
1010c578:	300cd0fa 	srli	r6,r6,3
1010c57c:	4806977a 	slli	r3,r9,29
1010c580:	2005883a 	mov	r2,r4
1010c584:	19a2b03a 	or	r17,r3,r6
1010c588:	003fe306 	br	1010c518 <__alt_data_end+0xfffec518>
1010c58c:	0011883a 	mov	r8,zero
1010c590:	0005883a 	mov	r2,zero
1010c594:	003e3f06 	br	1010be94 <__alt_data_end+0xfffebe94>
1010c598:	0401ffc4 	movi	r16,2047
1010c59c:	003e2506 	br	1010be34 <__alt_data_end+0xfffebe34>
1010c5a0:	0013883a 	mov	r9,zero
1010c5a4:	003f8406 	br	1010c3b8 <__alt_data_end+0xfffec3b8>
1010c5a8:	0005883a 	mov	r2,zero
1010c5ac:	0007883a 	mov	r3,zero
1010c5b0:	003e8906 	br	1010bfd8 <__alt_data_end+0xfffebfd8>
1010c5b4:	197ff804 	addi	r5,r3,-32
1010c5b8:	01000804 	movi	r4,32
1010c5bc:	414ad83a 	srl	r5,r8,r5
1010c5c0:	19002426 	beq	r3,r4,1010c654 <__adddf3+0x89c>
1010c5c4:	01001004 	movi	r4,64
1010c5c8:	20c7c83a 	sub	r3,r4,r3
1010c5cc:	40c6983a 	sll	r3,r8,r3
1010c5d0:	1c46b03a 	or	r3,r3,r17
1010c5d4:	1806c03a 	cmpne	r3,r3,zero
1010c5d8:	28e2b03a 	or	r17,r5,r3
1010c5dc:	0007883a 	mov	r3,zero
1010c5e0:	003f2306 	br	1010c270 <__alt_data_end+0xfffec270>
1010c5e4:	0007883a 	mov	r3,zero
1010c5e8:	5811883a 	mov	r8,r11
1010c5ec:	00bfffc4 	movi	r2,-1
1010c5f0:	0401ffc4 	movi	r16,2047
1010c5f4:	003e7806 	br	1010bfd8 <__alt_data_end+0xfffebfd8>
1010c5f8:	4462b03a 	or	r17,r8,r17
1010c5fc:	8822c03a 	cmpne	r17,r17,zero
1010c600:	0009883a 	mov	r4,zero
1010c604:	003fa006 	br	1010c488 <__alt_data_end+0xfffec488>
1010c608:	4811883a 	mov	r8,r9
1010c60c:	3023883a 	mov	r17,r6
1010c610:	0401ffc4 	movi	r16,2047
1010c614:	003e0706 	br	1010be34 <__alt_data_end+0xfffebe34>
1010c618:	4811883a 	mov	r8,r9
1010c61c:	3023883a 	mov	r17,r6
1010c620:	003e0406 	br	1010be34 <__alt_data_end+0xfffebe34>
1010c624:	21fff804 	addi	r7,r4,-32
1010c628:	01400804 	movi	r5,32
1010c62c:	41ced83a 	srl	r7,r8,r7
1010c630:	21400a26 	beq	r4,r5,1010c65c <__adddf3+0x8a4>
1010c634:	01401004 	movi	r5,64
1010c638:	2909c83a 	sub	r4,r5,r4
1010c63c:	4108983a 	sll	r4,r8,r4
1010c640:	2448b03a 	or	r4,r4,r17
1010c644:	2008c03a 	cmpne	r4,r4,zero
1010c648:	3922b03a 	or	r17,r7,r4
1010c64c:	0009883a 	mov	r4,zero
1010c650:	003f8d06 	br	1010c488 <__alt_data_end+0xfffec488>
1010c654:	0007883a 	mov	r3,zero
1010c658:	003fdd06 	br	1010c5d0 <__alt_data_end+0xfffec5d0>
1010c65c:	0009883a 	mov	r4,zero
1010c660:	003ff706 	br	1010c640 <__alt_data_end+0xfffec640>

1010c664 <__divdf3>:
1010c664:	defff204 	addi	sp,sp,-56
1010c668:	dd400915 	stw	r21,36(sp)
1010c66c:	282ad53a 	srli	r21,r5,20
1010c670:	dd000815 	stw	r20,32(sp)
1010c674:	2828d7fa 	srli	r20,r5,31
1010c678:	dc000415 	stw	r16,16(sp)
1010c67c:	04000434 	movhi	r16,16
1010c680:	df000c15 	stw	fp,48(sp)
1010c684:	843fffc4 	addi	r16,r16,-1
1010c688:	dfc00d15 	stw	ra,52(sp)
1010c68c:	ddc00b15 	stw	r23,44(sp)
1010c690:	dd800a15 	stw	r22,40(sp)
1010c694:	dcc00715 	stw	r19,28(sp)
1010c698:	dc800615 	stw	r18,24(sp)
1010c69c:	dc400515 	stw	r17,20(sp)
1010c6a0:	ad41ffcc 	andi	r21,r21,2047
1010c6a4:	2c20703a 	and	r16,r5,r16
1010c6a8:	a7003fcc 	andi	fp,r20,255
1010c6ac:	a8006126 	beq	r21,zero,1010c834 <__divdf3+0x1d0>
1010c6b0:	0081ffc4 	movi	r2,2047
1010c6b4:	2025883a 	mov	r18,r4
1010c6b8:	a8803726 	beq	r21,r2,1010c798 <__divdf3+0x134>
1010c6bc:	80800434 	orhi	r2,r16,16
1010c6c0:	100490fa 	slli	r2,r2,3
1010c6c4:	2020d77a 	srli	r16,r4,29
1010c6c8:	202490fa 	slli	r18,r4,3
1010c6cc:	ad7f0044 	addi	r21,r21,-1023
1010c6d0:	80a0b03a 	or	r16,r16,r2
1010c6d4:	0027883a 	mov	r19,zero
1010c6d8:	0013883a 	mov	r9,zero
1010c6dc:	3804d53a 	srli	r2,r7,20
1010c6e0:	382cd7fa 	srli	r22,r7,31
1010c6e4:	04400434 	movhi	r17,16
1010c6e8:	8c7fffc4 	addi	r17,r17,-1
1010c6ec:	1081ffcc 	andi	r2,r2,2047
1010c6f0:	3011883a 	mov	r8,r6
1010c6f4:	3c62703a 	and	r17,r7,r17
1010c6f8:	b5c03fcc 	andi	r23,r22,255
1010c6fc:	10006c26 	beq	r2,zero,1010c8b0 <__divdf3+0x24c>
1010c700:	00c1ffc4 	movi	r3,2047
1010c704:	10c06426 	beq	r2,r3,1010c898 <__divdf3+0x234>
1010c708:	88c00434 	orhi	r3,r17,16
1010c70c:	180690fa 	slli	r3,r3,3
1010c710:	3022d77a 	srli	r17,r6,29
1010c714:	301090fa 	slli	r8,r6,3
1010c718:	10bf0044 	addi	r2,r2,-1023
1010c71c:	88e2b03a 	or	r17,r17,r3
1010c720:	000f883a 	mov	r7,zero
1010c724:	a58cf03a 	xor	r6,r20,r22
1010c728:	3cc8b03a 	or	r4,r7,r19
1010c72c:	a8abc83a 	sub	r21,r21,r2
1010c730:	008003c4 	movi	r2,15
1010c734:	3007883a 	mov	r3,r6
1010c738:	34c03fcc 	andi	r19,r6,255
1010c73c:	11009036 	bltu	r2,r4,1010c980 <__divdf3+0x31c>
1010c740:	200890ba 	slli	r4,r4,2
1010c744:	00840474 	movhi	r2,4113
1010c748:	10b1d604 	addi	r2,r2,-14504
1010c74c:	2089883a 	add	r4,r4,r2
1010c750:	20800017 	ldw	r2,0(r4)
1010c754:	1000683a 	jmp	r2
1010c758:	1010c980 	call	11010c98 <__alt_data_end+0xef0c98>
1010c75c:	1010c7d0 	cmplti	zero,r2,17183
1010c760:	1010c970 	cmpltui	zero,r2,17189
1010c764:	1010c7c4 	addi	zero,r2,17183
1010c768:	1010c970 	cmpltui	zero,r2,17189
1010c76c:	1010c944 	addi	zero,r2,17189
1010c770:	1010c970 	cmpltui	zero,r2,17189
1010c774:	1010c7c4 	addi	zero,r2,17183
1010c778:	1010c7d0 	cmplti	zero,r2,17183
1010c77c:	1010c7d0 	cmplti	zero,r2,17183
1010c780:	1010c944 	addi	zero,r2,17189
1010c784:	1010c7c4 	addi	zero,r2,17183
1010c788:	1010c7b4 	orhi	zero,r2,17182
1010c78c:	1010c7b4 	orhi	zero,r2,17182
1010c790:	1010c7b4 	orhi	zero,r2,17182
1010c794:	1010cc64 	muli	zero,r2,17201
1010c798:	2404b03a 	or	r2,r4,r16
1010c79c:	1000661e 	bne	r2,zero,1010c938 <__divdf3+0x2d4>
1010c7a0:	04c00204 	movi	r19,8
1010c7a4:	0021883a 	mov	r16,zero
1010c7a8:	0025883a 	mov	r18,zero
1010c7ac:	02400084 	movi	r9,2
1010c7b0:	003fca06 	br	1010c6dc <__alt_data_end+0xfffec6dc>
1010c7b4:	8023883a 	mov	r17,r16
1010c7b8:	9011883a 	mov	r8,r18
1010c7bc:	e02f883a 	mov	r23,fp
1010c7c0:	480f883a 	mov	r7,r9
1010c7c4:	00800084 	movi	r2,2
1010c7c8:	3881311e 	bne	r7,r2,1010cc90 <__divdf3+0x62c>
1010c7cc:	b827883a 	mov	r19,r23
1010c7d0:	98c0004c 	andi	r3,r19,1
1010c7d4:	0081ffc4 	movi	r2,2047
1010c7d8:	000b883a 	mov	r5,zero
1010c7dc:	0025883a 	mov	r18,zero
1010c7e0:	1004953a 	slli	r2,r2,20
1010c7e4:	18c03fcc 	andi	r3,r3,255
1010c7e8:	04400434 	movhi	r17,16
1010c7ec:	8c7fffc4 	addi	r17,r17,-1
1010c7f0:	180697fa 	slli	r3,r3,31
1010c7f4:	2c4a703a 	and	r5,r5,r17
1010c7f8:	288ab03a 	or	r5,r5,r2
1010c7fc:	28c6b03a 	or	r3,r5,r3
1010c800:	9005883a 	mov	r2,r18
1010c804:	dfc00d17 	ldw	ra,52(sp)
1010c808:	df000c17 	ldw	fp,48(sp)
1010c80c:	ddc00b17 	ldw	r23,44(sp)
1010c810:	dd800a17 	ldw	r22,40(sp)
1010c814:	dd400917 	ldw	r21,36(sp)
1010c818:	dd000817 	ldw	r20,32(sp)
1010c81c:	dcc00717 	ldw	r19,28(sp)
1010c820:	dc800617 	ldw	r18,24(sp)
1010c824:	dc400517 	ldw	r17,20(sp)
1010c828:	dc000417 	ldw	r16,16(sp)
1010c82c:	dec00e04 	addi	sp,sp,56
1010c830:	f800283a 	ret
1010c834:	2404b03a 	or	r2,r4,r16
1010c838:	2027883a 	mov	r19,r4
1010c83c:	10003926 	beq	r2,zero,1010c924 <__divdf3+0x2c0>
1010c840:	80012e26 	beq	r16,zero,1010ccfc <__divdf3+0x698>
1010c844:	8009883a 	mov	r4,r16
1010c848:	d9800315 	stw	r6,12(sp)
1010c84c:	d9c00215 	stw	r7,8(sp)
1010c850:	010e3bc0 	call	1010e3bc <__clzsi2>
1010c854:	d9800317 	ldw	r6,12(sp)
1010c858:	d9c00217 	ldw	r7,8(sp)
1010c85c:	113ffd44 	addi	r4,r2,-11
1010c860:	00c00704 	movi	r3,28
1010c864:	19012116 	blt	r3,r4,1010ccec <__divdf3+0x688>
1010c868:	00c00744 	movi	r3,29
1010c86c:	147ffe04 	addi	r17,r2,-8
1010c870:	1907c83a 	sub	r3,r3,r4
1010c874:	8460983a 	sll	r16,r16,r17
1010c878:	98c6d83a 	srl	r3,r19,r3
1010c87c:	9c64983a 	sll	r18,r19,r17
1010c880:	1c20b03a 	or	r16,r3,r16
1010c884:	1080fcc4 	addi	r2,r2,1011
1010c888:	00abc83a 	sub	r21,zero,r2
1010c88c:	0027883a 	mov	r19,zero
1010c890:	0013883a 	mov	r9,zero
1010c894:	003f9106 	br	1010c6dc <__alt_data_end+0xfffec6dc>
1010c898:	3446b03a 	or	r3,r6,r17
1010c89c:	18001f1e 	bne	r3,zero,1010c91c <__divdf3+0x2b8>
1010c8a0:	0023883a 	mov	r17,zero
1010c8a4:	0011883a 	mov	r8,zero
1010c8a8:	01c00084 	movi	r7,2
1010c8ac:	003f9d06 	br	1010c724 <__alt_data_end+0xfffec724>
1010c8b0:	3446b03a 	or	r3,r6,r17
1010c8b4:	18001526 	beq	r3,zero,1010c90c <__divdf3+0x2a8>
1010c8b8:	88011b26 	beq	r17,zero,1010cd28 <__divdf3+0x6c4>
1010c8bc:	8809883a 	mov	r4,r17
1010c8c0:	d9800315 	stw	r6,12(sp)
1010c8c4:	da400115 	stw	r9,4(sp)
1010c8c8:	010e3bc0 	call	1010e3bc <__clzsi2>
1010c8cc:	d9800317 	ldw	r6,12(sp)
1010c8d0:	da400117 	ldw	r9,4(sp)
1010c8d4:	113ffd44 	addi	r4,r2,-11
1010c8d8:	00c00704 	movi	r3,28
1010c8dc:	19010e16 	blt	r3,r4,1010cd18 <__divdf3+0x6b4>
1010c8e0:	00c00744 	movi	r3,29
1010c8e4:	123ffe04 	addi	r8,r2,-8
1010c8e8:	1907c83a 	sub	r3,r3,r4
1010c8ec:	8a22983a 	sll	r17,r17,r8
1010c8f0:	30c6d83a 	srl	r3,r6,r3
1010c8f4:	3210983a 	sll	r8,r6,r8
1010c8f8:	1c62b03a 	or	r17,r3,r17
1010c8fc:	1080fcc4 	addi	r2,r2,1011
1010c900:	0085c83a 	sub	r2,zero,r2
1010c904:	000f883a 	mov	r7,zero
1010c908:	003f8606 	br	1010c724 <__alt_data_end+0xfffec724>
1010c90c:	0023883a 	mov	r17,zero
1010c910:	0011883a 	mov	r8,zero
1010c914:	01c00044 	movi	r7,1
1010c918:	003f8206 	br	1010c724 <__alt_data_end+0xfffec724>
1010c91c:	01c000c4 	movi	r7,3
1010c920:	003f8006 	br	1010c724 <__alt_data_end+0xfffec724>
1010c924:	04c00104 	movi	r19,4
1010c928:	0021883a 	mov	r16,zero
1010c92c:	0025883a 	mov	r18,zero
1010c930:	02400044 	movi	r9,1
1010c934:	003f6906 	br	1010c6dc <__alt_data_end+0xfffec6dc>
1010c938:	04c00304 	movi	r19,12
1010c93c:	024000c4 	movi	r9,3
1010c940:	003f6606 	br	1010c6dc <__alt_data_end+0xfffec6dc>
1010c944:	01400434 	movhi	r5,16
1010c948:	0007883a 	mov	r3,zero
1010c94c:	297fffc4 	addi	r5,r5,-1
1010c950:	04bfffc4 	movi	r18,-1
1010c954:	0081ffc4 	movi	r2,2047
1010c958:	003fa106 	br	1010c7e0 <__alt_data_end+0xfffec7e0>
1010c95c:	00c00044 	movi	r3,1
1010c960:	1887c83a 	sub	r3,r3,r2
1010c964:	01000e04 	movi	r4,56
1010c968:	20c1210e 	bge	r4,r3,1010cdf0 <__divdf3+0x78c>
1010c96c:	98c0004c 	andi	r3,r19,1
1010c970:	0005883a 	mov	r2,zero
1010c974:	000b883a 	mov	r5,zero
1010c978:	0025883a 	mov	r18,zero
1010c97c:	003f9806 	br	1010c7e0 <__alt_data_end+0xfffec7e0>
1010c980:	8c00fd36 	bltu	r17,r16,1010cd78 <__divdf3+0x714>
1010c984:	8440fb26 	beq	r16,r17,1010cd74 <__divdf3+0x710>
1010c988:	8007883a 	mov	r3,r16
1010c98c:	ad7fffc4 	addi	r21,r21,-1
1010c990:	0021883a 	mov	r16,zero
1010c994:	4004d63a 	srli	r2,r8,24
1010c998:	8822923a 	slli	r17,r17,8
1010c99c:	1809883a 	mov	r4,r3
1010c9a0:	402c923a 	slli	r22,r8,8
1010c9a4:	88b8b03a 	or	fp,r17,r2
1010c9a8:	e028d43a 	srli	r20,fp,16
1010c9ac:	d8c00015 	stw	r3,0(sp)
1010c9b0:	e5ffffcc 	andi	r23,fp,65535
1010c9b4:	a00b883a 	mov	r5,r20
1010c9b8:	01011f00 	call	101011f0 <__udivsi3>
1010c9bc:	d8c00017 	ldw	r3,0(sp)
1010c9c0:	a00b883a 	mov	r5,r20
1010c9c4:	d8800315 	stw	r2,12(sp)
1010c9c8:	1809883a 	mov	r4,r3
1010c9cc:	01012540 	call	10101254 <__umodsi3>
1010c9d0:	d9800317 	ldw	r6,12(sp)
1010c9d4:	1006943a 	slli	r3,r2,16
1010c9d8:	9004d43a 	srli	r2,r18,16
1010c9dc:	b9a3383a 	mul	r17,r23,r6
1010c9e0:	10c4b03a 	or	r2,r2,r3
1010c9e4:	1440062e 	bgeu	r2,r17,1010ca00 <__divdf3+0x39c>
1010c9e8:	1705883a 	add	r2,r2,fp
1010c9ec:	30ffffc4 	addi	r3,r6,-1
1010c9f0:	1700ee36 	bltu	r2,fp,1010cdac <__divdf3+0x748>
1010c9f4:	1440ed2e 	bgeu	r2,r17,1010cdac <__divdf3+0x748>
1010c9f8:	31bfff84 	addi	r6,r6,-2
1010c9fc:	1705883a 	add	r2,r2,fp
1010ca00:	1463c83a 	sub	r17,r2,r17
1010ca04:	a00b883a 	mov	r5,r20
1010ca08:	8809883a 	mov	r4,r17
1010ca0c:	d9800315 	stw	r6,12(sp)
1010ca10:	01011f00 	call	101011f0 <__udivsi3>
1010ca14:	a00b883a 	mov	r5,r20
1010ca18:	8809883a 	mov	r4,r17
1010ca1c:	d8800215 	stw	r2,8(sp)
1010ca20:	01012540 	call	10101254 <__umodsi3>
1010ca24:	d9c00217 	ldw	r7,8(sp)
1010ca28:	1004943a 	slli	r2,r2,16
1010ca2c:	94bfffcc 	andi	r18,r18,65535
1010ca30:	b9d1383a 	mul	r8,r23,r7
1010ca34:	90a4b03a 	or	r18,r18,r2
1010ca38:	d9800317 	ldw	r6,12(sp)
1010ca3c:	9200062e 	bgeu	r18,r8,1010ca58 <__divdf3+0x3f4>
1010ca40:	9725883a 	add	r18,r18,fp
1010ca44:	38bfffc4 	addi	r2,r7,-1
1010ca48:	9700d636 	bltu	r18,fp,1010cda4 <__divdf3+0x740>
1010ca4c:	9200d52e 	bgeu	r18,r8,1010cda4 <__divdf3+0x740>
1010ca50:	39ffff84 	addi	r7,r7,-2
1010ca54:	9725883a 	add	r18,r18,fp
1010ca58:	3004943a 	slli	r2,r6,16
1010ca5c:	b012d43a 	srli	r9,r22,16
1010ca60:	b1bfffcc 	andi	r6,r22,65535
1010ca64:	11e2b03a 	or	r17,r2,r7
1010ca68:	8806d43a 	srli	r3,r17,16
1010ca6c:	893fffcc 	andi	r4,r17,65535
1010ca70:	218b383a 	mul	r5,r4,r6
1010ca74:	30c5383a 	mul	r2,r6,r3
1010ca78:	2249383a 	mul	r4,r4,r9
1010ca7c:	280ed43a 	srli	r7,r5,16
1010ca80:	9225c83a 	sub	r18,r18,r8
1010ca84:	2089883a 	add	r4,r4,r2
1010ca88:	3909883a 	add	r4,r7,r4
1010ca8c:	1a47383a 	mul	r3,r3,r9
1010ca90:	2080022e 	bgeu	r4,r2,1010ca9c <__divdf3+0x438>
1010ca94:	00800074 	movhi	r2,1
1010ca98:	1887883a 	add	r3,r3,r2
1010ca9c:	2004d43a 	srli	r2,r4,16
1010caa0:	2008943a 	slli	r4,r4,16
1010caa4:	297fffcc 	andi	r5,r5,65535
1010caa8:	10c7883a 	add	r3,r2,r3
1010caac:	2149883a 	add	r4,r4,r5
1010cab0:	90c0a536 	bltu	r18,r3,1010cd48 <__divdf3+0x6e4>
1010cab4:	90c0bf26 	beq	r18,r3,1010cdb4 <__divdf3+0x750>
1010cab8:	90c7c83a 	sub	r3,r18,r3
1010cabc:	810fc83a 	sub	r7,r16,r4
1010cac0:	81e5803a 	cmpltu	r18,r16,r7
1010cac4:	1ca5c83a 	sub	r18,r3,r18
1010cac8:	e480c126 	beq	fp,r18,1010cdd0 <__divdf3+0x76c>
1010cacc:	a00b883a 	mov	r5,r20
1010cad0:	9009883a 	mov	r4,r18
1010cad4:	d9800315 	stw	r6,12(sp)
1010cad8:	d9c00215 	stw	r7,8(sp)
1010cadc:	da400115 	stw	r9,4(sp)
1010cae0:	01011f00 	call	101011f0 <__udivsi3>
1010cae4:	a00b883a 	mov	r5,r20
1010cae8:	9009883a 	mov	r4,r18
1010caec:	d8800015 	stw	r2,0(sp)
1010caf0:	01012540 	call	10101254 <__umodsi3>
1010caf4:	d9c00217 	ldw	r7,8(sp)
1010caf8:	da000017 	ldw	r8,0(sp)
1010cafc:	1006943a 	slli	r3,r2,16
1010cb00:	3804d43a 	srli	r2,r7,16
1010cb04:	ba21383a 	mul	r16,r23,r8
1010cb08:	d9800317 	ldw	r6,12(sp)
1010cb0c:	10c4b03a 	or	r2,r2,r3
1010cb10:	da400117 	ldw	r9,4(sp)
1010cb14:	1400062e 	bgeu	r2,r16,1010cb30 <__divdf3+0x4cc>
1010cb18:	1705883a 	add	r2,r2,fp
1010cb1c:	40ffffc4 	addi	r3,r8,-1
1010cb20:	1700ad36 	bltu	r2,fp,1010cdd8 <__divdf3+0x774>
1010cb24:	1400ac2e 	bgeu	r2,r16,1010cdd8 <__divdf3+0x774>
1010cb28:	423fff84 	addi	r8,r8,-2
1010cb2c:	1705883a 	add	r2,r2,fp
1010cb30:	1421c83a 	sub	r16,r2,r16
1010cb34:	a00b883a 	mov	r5,r20
1010cb38:	8009883a 	mov	r4,r16
1010cb3c:	d9800315 	stw	r6,12(sp)
1010cb40:	d9c00215 	stw	r7,8(sp)
1010cb44:	da000015 	stw	r8,0(sp)
1010cb48:	da400115 	stw	r9,4(sp)
1010cb4c:	01011f00 	call	101011f0 <__udivsi3>
1010cb50:	8009883a 	mov	r4,r16
1010cb54:	a00b883a 	mov	r5,r20
1010cb58:	1025883a 	mov	r18,r2
1010cb5c:	01012540 	call	10101254 <__umodsi3>
1010cb60:	d9c00217 	ldw	r7,8(sp)
1010cb64:	1004943a 	slli	r2,r2,16
1010cb68:	bcaf383a 	mul	r23,r23,r18
1010cb6c:	393fffcc 	andi	r4,r7,65535
1010cb70:	2088b03a 	or	r4,r4,r2
1010cb74:	d9800317 	ldw	r6,12(sp)
1010cb78:	da000017 	ldw	r8,0(sp)
1010cb7c:	da400117 	ldw	r9,4(sp)
1010cb80:	25c0062e 	bgeu	r4,r23,1010cb9c <__divdf3+0x538>
1010cb84:	2709883a 	add	r4,r4,fp
1010cb88:	90bfffc4 	addi	r2,r18,-1
1010cb8c:	27009436 	bltu	r4,fp,1010cde0 <__divdf3+0x77c>
1010cb90:	25c0932e 	bgeu	r4,r23,1010cde0 <__divdf3+0x77c>
1010cb94:	94bfff84 	addi	r18,r18,-2
1010cb98:	2709883a 	add	r4,r4,fp
1010cb9c:	4004943a 	slli	r2,r8,16
1010cba0:	25efc83a 	sub	r23,r4,r23
1010cba4:	1490b03a 	or	r8,r2,r18
1010cba8:	4008d43a 	srli	r4,r8,16
1010cbac:	40ffffcc 	andi	r3,r8,65535
1010cbb0:	30c5383a 	mul	r2,r6,r3
1010cbb4:	1a47383a 	mul	r3,r3,r9
1010cbb8:	310d383a 	mul	r6,r6,r4
1010cbbc:	100ad43a 	srli	r5,r2,16
1010cbc0:	4913383a 	mul	r9,r9,r4
1010cbc4:	1987883a 	add	r3,r3,r6
1010cbc8:	28c7883a 	add	r3,r5,r3
1010cbcc:	1980022e 	bgeu	r3,r6,1010cbd8 <__divdf3+0x574>
1010cbd0:	01000074 	movhi	r4,1
1010cbd4:	4913883a 	add	r9,r9,r4
1010cbd8:	1808d43a 	srli	r4,r3,16
1010cbdc:	1806943a 	slli	r3,r3,16
1010cbe0:	10bfffcc 	andi	r2,r2,65535
1010cbe4:	2253883a 	add	r9,r4,r9
1010cbe8:	1887883a 	add	r3,r3,r2
1010cbec:	ba403836 	bltu	r23,r9,1010ccd0 <__divdf3+0x66c>
1010cbf0:	ba403626 	beq	r23,r9,1010cccc <__divdf3+0x668>
1010cbf4:	42000054 	ori	r8,r8,1
1010cbf8:	a880ffc4 	addi	r2,r21,1023
1010cbfc:	00bf570e 	bge	zero,r2,1010c95c <__alt_data_end+0xfffec95c>
1010cc00:	40c001cc 	andi	r3,r8,7
1010cc04:	18000726 	beq	r3,zero,1010cc24 <__divdf3+0x5c0>
1010cc08:	40c003cc 	andi	r3,r8,15
1010cc0c:	01000104 	movi	r4,4
1010cc10:	19000426 	beq	r3,r4,1010cc24 <__divdf3+0x5c0>
1010cc14:	4107883a 	add	r3,r8,r4
1010cc18:	1a11803a 	cmpltu	r8,r3,r8
1010cc1c:	8a23883a 	add	r17,r17,r8
1010cc20:	1811883a 	mov	r8,r3
1010cc24:	88c0402c 	andhi	r3,r17,256
1010cc28:	18000426 	beq	r3,zero,1010cc3c <__divdf3+0x5d8>
1010cc2c:	00ffc034 	movhi	r3,65280
1010cc30:	18ffffc4 	addi	r3,r3,-1
1010cc34:	a8810004 	addi	r2,r21,1024
1010cc38:	88e2703a 	and	r17,r17,r3
1010cc3c:	00c1ff84 	movi	r3,2046
1010cc40:	18bee316 	blt	r3,r2,1010c7d0 <__alt_data_end+0xfffec7d0>
1010cc44:	8824977a 	slli	r18,r17,29
1010cc48:	4010d0fa 	srli	r8,r8,3
1010cc4c:	8822927a 	slli	r17,r17,9
1010cc50:	1081ffcc 	andi	r2,r2,2047
1010cc54:	9224b03a 	or	r18,r18,r8
1010cc58:	880ad33a 	srli	r5,r17,12
1010cc5c:	98c0004c 	andi	r3,r19,1
1010cc60:	003edf06 	br	1010c7e0 <__alt_data_end+0xfffec7e0>
1010cc64:	8080022c 	andhi	r2,r16,8
1010cc68:	10001226 	beq	r2,zero,1010ccb4 <__divdf3+0x650>
1010cc6c:	8880022c 	andhi	r2,r17,8
1010cc70:	1000101e 	bne	r2,zero,1010ccb4 <__divdf3+0x650>
1010cc74:	00800434 	movhi	r2,16
1010cc78:	89400234 	orhi	r5,r17,8
1010cc7c:	10bfffc4 	addi	r2,r2,-1
1010cc80:	b007883a 	mov	r3,r22
1010cc84:	288a703a 	and	r5,r5,r2
1010cc88:	4025883a 	mov	r18,r8
1010cc8c:	003f3106 	br	1010c954 <__alt_data_end+0xfffec954>
1010cc90:	008000c4 	movi	r2,3
1010cc94:	3880a626 	beq	r7,r2,1010cf30 <__divdf3+0x8cc>
1010cc98:	00800044 	movi	r2,1
1010cc9c:	3880521e 	bne	r7,r2,1010cde8 <__divdf3+0x784>
1010cca0:	b807883a 	mov	r3,r23
1010cca4:	0005883a 	mov	r2,zero
1010cca8:	000b883a 	mov	r5,zero
1010ccac:	0025883a 	mov	r18,zero
1010ccb0:	003ecb06 	br	1010c7e0 <__alt_data_end+0xfffec7e0>
1010ccb4:	00800434 	movhi	r2,16
1010ccb8:	81400234 	orhi	r5,r16,8
1010ccbc:	10bfffc4 	addi	r2,r2,-1
1010ccc0:	a007883a 	mov	r3,r20
1010ccc4:	288a703a 	and	r5,r5,r2
1010ccc8:	003f2206 	br	1010c954 <__alt_data_end+0xfffec954>
1010cccc:	183fca26 	beq	r3,zero,1010cbf8 <__alt_data_end+0xfffecbf8>
1010ccd0:	e5ef883a 	add	r23,fp,r23
1010ccd4:	40bfffc4 	addi	r2,r8,-1
1010ccd8:	bf00392e 	bgeu	r23,fp,1010cdc0 <__divdf3+0x75c>
1010ccdc:	1011883a 	mov	r8,r2
1010cce0:	ba7fc41e 	bne	r23,r9,1010cbf4 <__alt_data_end+0xfffecbf4>
1010cce4:	b0ffc31e 	bne	r22,r3,1010cbf4 <__alt_data_end+0xfffecbf4>
1010cce8:	003fc306 	br	1010cbf8 <__alt_data_end+0xfffecbf8>
1010ccec:	143ff604 	addi	r16,r2,-40
1010ccf0:	9c20983a 	sll	r16,r19,r16
1010ccf4:	0025883a 	mov	r18,zero
1010ccf8:	003ee206 	br	1010c884 <__alt_data_end+0xfffec884>
1010ccfc:	d9800315 	stw	r6,12(sp)
1010cd00:	d9c00215 	stw	r7,8(sp)
1010cd04:	010e3bc0 	call	1010e3bc <__clzsi2>
1010cd08:	10800804 	addi	r2,r2,32
1010cd0c:	d9c00217 	ldw	r7,8(sp)
1010cd10:	d9800317 	ldw	r6,12(sp)
1010cd14:	003ed106 	br	1010c85c <__alt_data_end+0xfffec85c>
1010cd18:	147ff604 	addi	r17,r2,-40
1010cd1c:	3462983a 	sll	r17,r6,r17
1010cd20:	0011883a 	mov	r8,zero
1010cd24:	003ef506 	br	1010c8fc <__alt_data_end+0xfffec8fc>
1010cd28:	3009883a 	mov	r4,r6
1010cd2c:	d9800315 	stw	r6,12(sp)
1010cd30:	da400115 	stw	r9,4(sp)
1010cd34:	010e3bc0 	call	1010e3bc <__clzsi2>
1010cd38:	10800804 	addi	r2,r2,32
1010cd3c:	da400117 	ldw	r9,4(sp)
1010cd40:	d9800317 	ldw	r6,12(sp)
1010cd44:	003ee306 	br	1010c8d4 <__alt_data_end+0xfffec8d4>
1010cd48:	85a1883a 	add	r16,r16,r22
1010cd4c:	8585803a 	cmpltu	r2,r16,r22
1010cd50:	1705883a 	add	r2,r2,fp
1010cd54:	14a5883a 	add	r18,r2,r18
1010cd58:	88bfffc4 	addi	r2,r17,-1
1010cd5c:	e4800c2e 	bgeu	fp,r18,1010cd90 <__divdf3+0x72c>
1010cd60:	90c03e36 	bltu	r18,r3,1010ce5c <__divdf3+0x7f8>
1010cd64:	1c806926 	beq	r3,r18,1010cf0c <__divdf3+0x8a8>
1010cd68:	90c7c83a 	sub	r3,r18,r3
1010cd6c:	1023883a 	mov	r17,r2
1010cd70:	003f5206 	br	1010cabc <__alt_data_end+0xfffecabc>
1010cd74:	923f0436 	bltu	r18,r8,1010c988 <__alt_data_end+0xfffec988>
1010cd78:	800897fa 	slli	r4,r16,31
1010cd7c:	9004d07a 	srli	r2,r18,1
1010cd80:	8006d07a 	srli	r3,r16,1
1010cd84:	902097fa 	slli	r16,r18,31
1010cd88:	20a4b03a 	or	r18,r4,r2
1010cd8c:	003f0106 	br	1010c994 <__alt_data_end+0xfffec994>
1010cd90:	e4bff51e 	bne	fp,r18,1010cd68 <__alt_data_end+0xfffecd68>
1010cd94:	85bff22e 	bgeu	r16,r22,1010cd60 <__alt_data_end+0xfffecd60>
1010cd98:	e0c7c83a 	sub	r3,fp,r3
1010cd9c:	1023883a 	mov	r17,r2
1010cda0:	003f4606 	br	1010cabc <__alt_data_end+0xfffecabc>
1010cda4:	100f883a 	mov	r7,r2
1010cda8:	003f2b06 	br	1010ca58 <__alt_data_end+0xfffeca58>
1010cdac:	180d883a 	mov	r6,r3
1010cdb0:	003f1306 	br	1010ca00 <__alt_data_end+0xfffeca00>
1010cdb4:	813fe436 	bltu	r16,r4,1010cd48 <__alt_data_end+0xfffecd48>
1010cdb8:	0007883a 	mov	r3,zero
1010cdbc:	003f3f06 	br	1010cabc <__alt_data_end+0xfffecabc>
1010cdc0:	ba402c36 	bltu	r23,r9,1010ce74 <__divdf3+0x810>
1010cdc4:	4dc05426 	beq	r9,r23,1010cf18 <__divdf3+0x8b4>
1010cdc8:	1011883a 	mov	r8,r2
1010cdcc:	003f8906 	br	1010cbf4 <__alt_data_end+0xfffecbf4>
1010cdd0:	023fffc4 	movi	r8,-1
1010cdd4:	003f8806 	br	1010cbf8 <__alt_data_end+0xfffecbf8>
1010cdd8:	1811883a 	mov	r8,r3
1010cddc:	003f5406 	br	1010cb30 <__alt_data_end+0xfffecb30>
1010cde0:	1025883a 	mov	r18,r2
1010cde4:	003f6d06 	br	1010cb9c <__alt_data_end+0xfffecb9c>
1010cde8:	b827883a 	mov	r19,r23
1010cdec:	003f8206 	br	1010cbf8 <__alt_data_end+0xfffecbf8>
1010cdf0:	010007c4 	movi	r4,31
1010cdf4:	20c02616 	blt	r4,r3,1010ce90 <__divdf3+0x82c>
1010cdf8:	00800804 	movi	r2,32
1010cdfc:	10c5c83a 	sub	r2,r2,r3
1010ce00:	888a983a 	sll	r5,r17,r2
1010ce04:	40c8d83a 	srl	r4,r8,r3
1010ce08:	4084983a 	sll	r2,r8,r2
1010ce0c:	88e2d83a 	srl	r17,r17,r3
1010ce10:	2906b03a 	or	r3,r5,r4
1010ce14:	1004c03a 	cmpne	r2,r2,zero
1010ce18:	1886b03a 	or	r3,r3,r2
1010ce1c:	188001cc 	andi	r2,r3,7
1010ce20:	10000726 	beq	r2,zero,1010ce40 <__divdf3+0x7dc>
1010ce24:	188003cc 	andi	r2,r3,15
1010ce28:	01000104 	movi	r4,4
1010ce2c:	11000426 	beq	r2,r4,1010ce40 <__divdf3+0x7dc>
1010ce30:	1805883a 	mov	r2,r3
1010ce34:	10c00104 	addi	r3,r2,4
1010ce38:	1885803a 	cmpltu	r2,r3,r2
1010ce3c:	88a3883a 	add	r17,r17,r2
1010ce40:	8880202c 	andhi	r2,r17,128
1010ce44:	10002726 	beq	r2,zero,1010cee4 <__divdf3+0x880>
1010ce48:	98c0004c 	andi	r3,r19,1
1010ce4c:	00800044 	movi	r2,1
1010ce50:	000b883a 	mov	r5,zero
1010ce54:	0025883a 	mov	r18,zero
1010ce58:	003e6106 	br	1010c7e0 <__alt_data_end+0xfffec7e0>
1010ce5c:	85a1883a 	add	r16,r16,r22
1010ce60:	8585803a 	cmpltu	r2,r16,r22
1010ce64:	1705883a 	add	r2,r2,fp
1010ce68:	14a5883a 	add	r18,r2,r18
1010ce6c:	8c7fff84 	addi	r17,r17,-2
1010ce70:	003f1106 	br	1010cab8 <__alt_data_end+0xfffecab8>
1010ce74:	b589883a 	add	r4,r22,r22
1010ce78:	25ad803a 	cmpltu	r22,r4,r22
1010ce7c:	b739883a 	add	fp,r22,fp
1010ce80:	40bfff84 	addi	r2,r8,-2
1010ce84:	bf2f883a 	add	r23,r23,fp
1010ce88:	202d883a 	mov	r22,r4
1010ce8c:	003f9306 	br	1010ccdc <__alt_data_end+0xfffeccdc>
1010ce90:	013ff844 	movi	r4,-31
1010ce94:	2085c83a 	sub	r2,r4,r2
1010ce98:	8888d83a 	srl	r4,r17,r2
1010ce9c:	00800804 	movi	r2,32
1010cea0:	18802126 	beq	r3,r2,1010cf28 <__divdf3+0x8c4>
1010cea4:	00801004 	movi	r2,64
1010cea8:	10c5c83a 	sub	r2,r2,r3
1010ceac:	8884983a 	sll	r2,r17,r2
1010ceb0:	1204b03a 	or	r2,r2,r8
1010ceb4:	1004c03a 	cmpne	r2,r2,zero
1010ceb8:	2084b03a 	or	r2,r4,r2
1010cebc:	144001cc 	andi	r17,r2,7
1010cec0:	88000d1e 	bne	r17,zero,1010cef8 <__divdf3+0x894>
1010cec4:	000b883a 	mov	r5,zero
1010cec8:	1024d0fa 	srli	r18,r2,3
1010cecc:	98c0004c 	andi	r3,r19,1
1010ced0:	0005883a 	mov	r2,zero
1010ced4:	9464b03a 	or	r18,r18,r17
1010ced8:	003e4106 	br	1010c7e0 <__alt_data_end+0xfffec7e0>
1010cedc:	1007883a 	mov	r3,r2
1010cee0:	0023883a 	mov	r17,zero
1010cee4:	880a927a 	slli	r5,r17,9
1010cee8:	1805883a 	mov	r2,r3
1010ceec:	8822977a 	slli	r17,r17,29
1010cef0:	280ad33a 	srli	r5,r5,12
1010cef4:	003ff406 	br	1010cec8 <__alt_data_end+0xfffecec8>
1010cef8:	10c003cc 	andi	r3,r2,15
1010cefc:	01000104 	movi	r4,4
1010cf00:	193ff626 	beq	r3,r4,1010cedc <__alt_data_end+0xfffecedc>
1010cf04:	0023883a 	mov	r17,zero
1010cf08:	003fca06 	br	1010ce34 <__alt_data_end+0xfffece34>
1010cf0c:	813fd336 	bltu	r16,r4,1010ce5c <__alt_data_end+0xfffece5c>
1010cf10:	1023883a 	mov	r17,r2
1010cf14:	003fa806 	br	1010cdb8 <__alt_data_end+0xfffecdb8>
1010cf18:	b0ffd636 	bltu	r22,r3,1010ce74 <__alt_data_end+0xfffece74>
1010cf1c:	1011883a 	mov	r8,r2
1010cf20:	b0ff341e 	bne	r22,r3,1010cbf4 <__alt_data_end+0xfffecbf4>
1010cf24:	003f3406 	br	1010cbf8 <__alt_data_end+0xfffecbf8>
1010cf28:	0005883a 	mov	r2,zero
1010cf2c:	003fe006 	br	1010ceb0 <__alt_data_end+0xfffeceb0>
1010cf30:	00800434 	movhi	r2,16
1010cf34:	89400234 	orhi	r5,r17,8
1010cf38:	10bfffc4 	addi	r2,r2,-1
1010cf3c:	b807883a 	mov	r3,r23
1010cf40:	288a703a 	and	r5,r5,r2
1010cf44:	4025883a 	mov	r18,r8
1010cf48:	003e8206 	br	1010c954 <__alt_data_end+0xfffec954>

1010cf4c <__eqdf2>:
1010cf4c:	2804d53a 	srli	r2,r5,20
1010cf50:	3806d53a 	srli	r3,r7,20
1010cf54:	02000434 	movhi	r8,16
1010cf58:	423fffc4 	addi	r8,r8,-1
1010cf5c:	1081ffcc 	andi	r2,r2,2047
1010cf60:	0281ffc4 	movi	r10,2047
1010cf64:	2a12703a 	and	r9,r5,r8
1010cf68:	18c1ffcc 	andi	r3,r3,2047
1010cf6c:	3a10703a 	and	r8,r7,r8
1010cf70:	280ad7fa 	srli	r5,r5,31
1010cf74:	380ed7fa 	srli	r7,r7,31
1010cf78:	12801026 	beq	r2,r10,1010cfbc <__eqdf2+0x70>
1010cf7c:	0281ffc4 	movi	r10,2047
1010cf80:	1a800a26 	beq	r3,r10,1010cfac <__eqdf2+0x60>
1010cf84:	10c00226 	beq	r2,r3,1010cf90 <__eqdf2+0x44>
1010cf88:	00800044 	movi	r2,1
1010cf8c:	f800283a 	ret
1010cf90:	4a3ffd1e 	bne	r9,r8,1010cf88 <__alt_data_end+0xfffecf88>
1010cf94:	21bffc1e 	bne	r4,r6,1010cf88 <__alt_data_end+0xfffecf88>
1010cf98:	29c00c26 	beq	r5,r7,1010cfcc <__eqdf2+0x80>
1010cf9c:	103ffa1e 	bne	r2,zero,1010cf88 <__alt_data_end+0xfffecf88>
1010cfa0:	2244b03a 	or	r2,r4,r9
1010cfa4:	1004c03a 	cmpne	r2,r2,zero
1010cfa8:	f800283a 	ret
1010cfac:	3214b03a 	or	r10,r6,r8
1010cfb0:	503ff426 	beq	r10,zero,1010cf84 <__alt_data_end+0xfffecf84>
1010cfb4:	00800044 	movi	r2,1
1010cfb8:	f800283a 	ret
1010cfbc:	2254b03a 	or	r10,r4,r9
1010cfc0:	503fee26 	beq	r10,zero,1010cf7c <__alt_data_end+0xfffecf7c>
1010cfc4:	00800044 	movi	r2,1
1010cfc8:	f800283a 	ret
1010cfcc:	0005883a 	mov	r2,zero
1010cfd0:	f800283a 	ret

1010cfd4 <__gedf2>:
1010cfd4:	2804d53a 	srli	r2,r5,20
1010cfd8:	3806d53a 	srli	r3,r7,20
1010cfdc:	02000434 	movhi	r8,16
1010cfe0:	423fffc4 	addi	r8,r8,-1
1010cfe4:	1081ffcc 	andi	r2,r2,2047
1010cfe8:	0241ffc4 	movi	r9,2047
1010cfec:	2a14703a 	and	r10,r5,r8
1010cff0:	18c1ffcc 	andi	r3,r3,2047
1010cff4:	3a10703a 	and	r8,r7,r8
1010cff8:	280ad7fa 	srli	r5,r5,31
1010cffc:	380ed7fa 	srli	r7,r7,31
1010d000:	12401d26 	beq	r2,r9,1010d078 <__gedf2+0xa4>
1010d004:	0241ffc4 	movi	r9,2047
1010d008:	1a401226 	beq	r3,r9,1010d054 <__gedf2+0x80>
1010d00c:	1000081e 	bne	r2,zero,1010d030 <__gedf2+0x5c>
1010d010:	2296b03a 	or	r11,r4,r10
1010d014:	5813003a 	cmpeq	r9,r11,zero
1010d018:	1800091e 	bne	r3,zero,1010d040 <__gedf2+0x6c>
1010d01c:	3218b03a 	or	r12,r6,r8
1010d020:	6000071e 	bne	r12,zero,1010d040 <__gedf2+0x6c>
1010d024:	0005883a 	mov	r2,zero
1010d028:	5800101e 	bne	r11,zero,1010d06c <__gedf2+0x98>
1010d02c:	f800283a 	ret
1010d030:	18000c1e 	bne	r3,zero,1010d064 <__gedf2+0x90>
1010d034:	3212b03a 	or	r9,r6,r8
1010d038:	48000c26 	beq	r9,zero,1010d06c <__gedf2+0x98>
1010d03c:	0013883a 	mov	r9,zero
1010d040:	39c03fcc 	andi	r7,r7,255
1010d044:	48000826 	beq	r9,zero,1010d068 <__gedf2+0x94>
1010d048:	38000926 	beq	r7,zero,1010d070 <__gedf2+0x9c>
1010d04c:	00800044 	movi	r2,1
1010d050:	f800283a 	ret
1010d054:	3212b03a 	or	r9,r6,r8
1010d058:	483fec26 	beq	r9,zero,1010d00c <__alt_data_end+0xfffed00c>
1010d05c:	00bfff84 	movi	r2,-2
1010d060:	f800283a 	ret
1010d064:	39c03fcc 	andi	r7,r7,255
1010d068:	29c00626 	beq	r5,r7,1010d084 <__gedf2+0xb0>
1010d06c:	283ff726 	beq	r5,zero,1010d04c <__alt_data_end+0xfffed04c>
1010d070:	00bfffc4 	movi	r2,-1
1010d074:	f800283a 	ret
1010d078:	2292b03a 	or	r9,r4,r10
1010d07c:	483fe126 	beq	r9,zero,1010d004 <__alt_data_end+0xfffed004>
1010d080:	003ff606 	br	1010d05c <__alt_data_end+0xfffed05c>
1010d084:	18bff916 	blt	r3,r2,1010d06c <__alt_data_end+0xfffed06c>
1010d088:	10c00316 	blt	r2,r3,1010d098 <__gedf2+0xc4>
1010d08c:	42bff736 	bltu	r8,r10,1010d06c <__alt_data_end+0xfffed06c>
1010d090:	52000326 	beq	r10,r8,1010d0a0 <__gedf2+0xcc>
1010d094:	5200042e 	bgeu	r10,r8,1010d0a8 <__gedf2+0xd4>
1010d098:	283fec1e 	bne	r5,zero,1010d04c <__alt_data_end+0xfffed04c>
1010d09c:	003ff406 	br	1010d070 <__alt_data_end+0xfffed070>
1010d0a0:	313ff236 	bltu	r6,r4,1010d06c <__alt_data_end+0xfffed06c>
1010d0a4:	21bffc36 	bltu	r4,r6,1010d098 <__alt_data_end+0xfffed098>
1010d0a8:	0005883a 	mov	r2,zero
1010d0ac:	f800283a 	ret

1010d0b0 <__ledf2>:
1010d0b0:	2804d53a 	srli	r2,r5,20
1010d0b4:	3810d53a 	srli	r8,r7,20
1010d0b8:	00c00434 	movhi	r3,16
1010d0bc:	18ffffc4 	addi	r3,r3,-1
1010d0c0:	1081ffcc 	andi	r2,r2,2047
1010d0c4:	0241ffc4 	movi	r9,2047
1010d0c8:	28d4703a 	and	r10,r5,r3
1010d0cc:	4201ffcc 	andi	r8,r8,2047
1010d0d0:	38c6703a 	and	r3,r7,r3
1010d0d4:	280ad7fa 	srli	r5,r5,31
1010d0d8:	380ed7fa 	srli	r7,r7,31
1010d0dc:	12401f26 	beq	r2,r9,1010d15c <__ledf2+0xac>
1010d0e0:	0241ffc4 	movi	r9,2047
1010d0e4:	42401426 	beq	r8,r9,1010d138 <__ledf2+0x88>
1010d0e8:	1000091e 	bne	r2,zero,1010d110 <__ledf2+0x60>
1010d0ec:	2296b03a 	or	r11,r4,r10
1010d0f0:	5813003a 	cmpeq	r9,r11,zero
1010d0f4:	29403fcc 	andi	r5,r5,255
1010d0f8:	40000a1e 	bne	r8,zero,1010d124 <__ledf2+0x74>
1010d0fc:	30d8b03a 	or	r12,r6,r3
1010d100:	6000081e 	bne	r12,zero,1010d124 <__ledf2+0x74>
1010d104:	0005883a 	mov	r2,zero
1010d108:	5800111e 	bne	r11,zero,1010d150 <__ledf2+0xa0>
1010d10c:	f800283a 	ret
1010d110:	29403fcc 	andi	r5,r5,255
1010d114:	40000c1e 	bne	r8,zero,1010d148 <__ledf2+0x98>
1010d118:	30d2b03a 	or	r9,r6,r3
1010d11c:	48000c26 	beq	r9,zero,1010d150 <__ledf2+0xa0>
1010d120:	0013883a 	mov	r9,zero
1010d124:	39c03fcc 	andi	r7,r7,255
1010d128:	48000826 	beq	r9,zero,1010d14c <__ledf2+0x9c>
1010d12c:	38001126 	beq	r7,zero,1010d174 <__ledf2+0xc4>
1010d130:	00800044 	movi	r2,1
1010d134:	f800283a 	ret
1010d138:	30d2b03a 	or	r9,r6,r3
1010d13c:	483fea26 	beq	r9,zero,1010d0e8 <__alt_data_end+0xfffed0e8>
1010d140:	00800084 	movi	r2,2
1010d144:	f800283a 	ret
1010d148:	39c03fcc 	andi	r7,r7,255
1010d14c:	39400726 	beq	r7,r5,1010d16c <__ledf2+0xbc>
1010d150:	2800081e 	bne	r5,zero,1010d174 <__ledf2+0xc4>
1010d154:	00800044 	movi	r2,1
1010d158:	f800283a 	ret
1010d15c:	2292b03a 	or	r9,r4,r10
1010d160:	483fdf26 	beq	r9,zero,1010d0e0 <__alt_data_end+0xfffed0e0>
1010d164:	00800084 	movi	r2,2
1010d168:	f800283a 	ret
1010d16c:	4080030e 	bge	r8,r2,1010d17c <__ledf2+0xcc>
1010d170:	383fef26 	beq	r7,zero,1010d130 <__alt_data_end+0xfffed130>
1010d174:	00bfffc4 	movi	r2,-1
1010d178:	f800283a 	ret
1010d17c:	123feb16 	blt	r2,r8,1010d12c <__alt_data_end+0xfffed12c>
1010d180:	1abff336 	bltu	r3,r10,1010d150 <__alt_data_end+0xfffed150>
1010d184:	50c00326 	beq	r10,r3,1010d194 <__ledf2+0xe4>
1010d188:	50c0042e 	bgeu	r10,r3,1010d19c <__ledf2+0xec>
1010d18c:	283fe81e 	bne	r5,zero,1010d130 <__alt_data_end+0xfffed130>
1010d190:	003ff806 	br	1010d174 <__alt_data_end+0xfffed174>
1010d194:	313fee36 	bltu	r6,r4,1010d150 <__alt_data_end+0xfffed150>
1010d198:	21bffc36 	bltu	r4,r6,1010d18c <__alt_data_end+0xfffed18c>
1010d19c:	0005883a 	mov	r2,zero
1010d1a0:	f800283a 	ret

1010d1a4 <__muldf3>:
1010d1a4:	defff304 	addi	sp,sp,-52
1010d1a8:	2804d53a 	srli	r2,r5,20
1010d1ac:	dd800915 	stw	r22,36(sp)
1010d1b0:	282cd7fa 	srli	r22,r5,31
1010d1b4:	dc000315 	stw	r16,12(sp)
1010d1b8:	04000434 	movhi	r16,16
1010d1bc:	dd400815 	stw	r21,32(sp)
1010d1c0:	dc800515 	stw	r18,20(sp)
1010d1c4:	843fffc4 	addi	r16,r16,-1
1010d1c8:	dfc00c15 	stw	ra,48(sp)
1010d1cc:	df000b15 	stw	fp,44(sp)
1010d1d0:	ddc00a15 	stw	r23,40(sp)
1010d1d4:	dd000715 	stw	r20,28(sp)
1010d1d8:	dcc00615 	stw	r19,24(sp)
1010d1dc:	dc400415 	stw	r17,16(sp)
1010d1e0:	1481ffcc 	andi	r18,r2,2047
1010d1e4:	2c20703a 	and	r16,r5,r16
1010d1e8:	b02b883a 	mov	r21,r22
1010d1ec:	b2403fcc 	andi	r9,r22,255
1010d1f0:	90006026 	beq	r18,zero,1010d374 <__muldf3+0x1d0>
1010d1f4:	0081ffc4 	movi	r2,2047
1010d1f8:	2029883a 	mov	r20,r4
1010d1fc:	90803626 	beq	r18,r2,1010d2d8 <__muldf3+0x134>
1010d200:	80800434 	orhi	r2,r16,16
1010d204:	100490fa 	slli	r2,r2,3
1010d208:	2020d77a 	srli	r16,r4,29
1010d20c:	202890fa 	slli	r20,r4,3
1010d210:	94bf0044 	addi	r18,r18,-1023
1010d214:	80a0b03a 	or	r16,r16,r2
1010d218:	0027883a 	mov	r19,zero
1010d21c:	0039883a 	mov	fp,zero
1010d220:	3804d53a 	srli	r2,r7,20
1010d224:	382ed7fa 	srli	r23,r7,31
1010d228:	04400434 	movhi	r17,16
1010d22c:	8c7fffc4 	addi	r17,r17,-1
1010d230:	1081ffcc 	andi	r2,r2,2047
1010d234:	3011883a 	mov	r8,r6
1010d238:	3c62703a 	and	r17,r7,r17
1010d23c:	ba803fcc 	andi	r10,r23,255
1010d240:	10006d26 	beq	r2,zero,1010d3f8 <__muldf3+0x254>
1010d244:	00c1ffc4 	movi	r3,2047
1010d248:	10c06526 	beq	r2,r3,1010d3e0 <__muldf3+0x23c>
1010d24c:	88c00434 	orhi	r3,r17,16
1010d250:	180690fa 	slli	r3,r3,3
1010d254:	3022d77a 	srli	r17,r6,29
1010d258:	301090fa 	slli	r8,r6,3
1010d25c:	10bf0044 	addi	r2,r2,-1023
1010d260:	88e2b03a 	or	r17,r17,r3
1010d264:	000b883a 	mov	r5,zero
1010d268:	9085883a 	add	r2,r18,r2
1010d26c:	2cc8b03a 	or	r4,r5,r19
1010d270:	00c003c4 	movi	r3,15
1010d274:	bdacf03a 	xor	r22,r23,r22
1010d278:	12c00044 	addi	r11,r2,1
1010d27c:	19009936 	bltu	r3,r4,1010d4e4 <__muldf3+0x340>
1010d280:	200890ba 	slli	r4,r4,2
1010d284:	00c40474 	movhi	r3,4113
1010d288:	18f4a604 	addi	r3,r3,-11624
1010d28c:	20c9883a 	add	r4,r4,r3
1010d290:	20c00017 	ldw	r3,0(r4)
1010d294:	1800683a 	jmp	r3
1010d298:	1010d4e4 	muli	zero,r2,17235
1010d29c:	1010d2f8 	rdprs	zero,r2,17227
1010d2a0:	1010d2f8 	rdprs	zero,r2,17227
1010d2a4:	1010d2f4 	orhi	zero,r2,17227
1010d2a8:	1010d4c0 	call	11010d4c <__alt_data_end+0xef0d4c>
1010d2ac:	1010d4c0 	call	11010d4c <__alt_data_end+0xef0d4c>
1010d2b0:	1010d4a8 	cmpgeui	zero,r2,17234
1010d2b4:	1010d2f4 	orhi	zero,r2,17227
1010d2b8:	1010d4c0 	call	11010d4c <__alt_data_end+0xef0d4c>
1010d2bc:	1010d4a8 	cmpgeui	zero,r2,17234
1010d2c0:	1010d4c0 	call	11010d4c <__alt_data_end+0xef0d4c>
1010d2c4:	1010d2f4 	orhi	zero,r2,17227
1010d2c8:	1010d4d0 	cmplti	zero,r2,17235
1010d2cc:	1010d4d0 	cmplti	zero,r2,17235
1010d2d0:	1010d4d0 	cmplti	zero,r2,17235
1010d2d4:	1010d6ec 	andhi	zero,r2,17243
1010d2d8:	2404b03a 	or	r2,r4,r16
1010d2dc:	10006f1e 	bne	r2,zero,1010d49c <__muldf3+0x2f8>
1010d2e0:	04c00204 	movi	r19,8
1010d2e4:	0021883a 	mov	r16,zero
1010d2e8:	0029883a 	mov	r20,zero
1010d2ec:	07000084 	movi	fp,2
1010d2f0:	003fcb06 	br	1010d220 <__alt_data_end+0xfffed220>
1010d2f4:	502d883a 	mov	r22,r10
1010d2f8:	00800084 	movi	r2,2
1010d2fc:	28805726 	beq	r5,r2,1010d45c <__muldf3+0x2b8>
1010d300:	008000c4 	movi	r2,3
1010d304:	28816626 	beq	r5,r2,1010d8a0 <__muldf3+0x6fc>
1010d308:	00800044 	movi	r2,1
1010d30c:	2881411e 	bne	r5,r2,1010d814 <__muldf3+0x670>
1010d310:	b02b883a 	mov	r21,r22
1010d314:	0005883a 	mov	r2,zero
1010d318:	000b883a 	mov	r5,zero
1010d31c:	0029883a 	mov	r20,zero
1010d320:	1004953a 	slli	r2,r2,20
1010d324:	a8c03fcc 	andi	r3,r21,255
1010d328:	04400434 	movhi	r17,16
1010d32c:	8c7fffc4 	addi	r17,r17,-1
1010d330:	180697fa 	slli	r3,r3,31
1010d334:	2c4a703a 	and	r5,r5,r17
1010d338:	288ab03a 	or	r5,r5,r2
1010d33c:	28c6b03a 	or	r3,r5,r3
1010d340:	a005883a 	mov	r2,r20
1010d344:	dfc00c17 	ldw	ra,48(sp)
1010d348:	df000b17 	ldw	fp,44(sp)
1010d34c:	ddc00a17 	ldw	r23,40(sp)
1010d350:	dd800917 	ldw	r22,36(sp)
1010d354:	dd400817 	ldw	r21,32(sp)
1010d358:	dd000717 	ldw	r20,28(sp)
1010d35c:	dcc00617 	ldw	r19,24(sp)
1010d360:	dc800517 	ldw	r18,20(sp)
1010d364:	dc400417 	ldw	r17,16(sp)
1010d368:	dc000317 	ldw	r16,12(sp)
1010d36c:	dec00d04 	addi	sp,sp,52
1010d370:	f800283a 	ret
1010d374:	2404b03a 	or	r2,r4,r16
1010d378:	2027883a 	mov	r19,r4
1010d37c:	10004226 	beq	r2,zero,1010d488 <__muldf3+0x2e4>
1010d380:	8000fc26 	beq	r16,zero,1010d774 <__muldf3+0x5d0>
1010d384:	8009883a 	mov	r4,r16
1010d388:	d9800215 	stw	r6,8(sp)
1010d38c:	d9c00015 	stw	r7,0(sp)
1010d390:	da400115 	stw	r9,4(sp)
1010d394:	010e3bc0 	call	1010e3bc <__clzsi2>
1010d398:	d9800217 	ldw	r6,8(sp)
1010d39c:	d9c00017 	ldw	r7,0(sp)
1010d3a0:	da400117 	ldw	r9,4(sp)
1010d3a4:	113ffd44 	addi	r4,r2,-11
1010d3a8:	00c00704 	movi	r3,28
1010d3ac:	1900ed16 	blt	r3,r4,1010d764 <__muldf3+0x5c0>
1010d3b0:	00c00744 	movi	r3,29
1010d3b4:	147ffe04 	addi	r17,r2,-8
1010d3b8:	1907c83a 	sub	r3,r3,r4
1010d3bc:	8460983a 	sll	r16,r16,r17
1010d3c0:	98c6d83a 	srl	r3,r19,r3
1010d3c4:	9c68983a 	sll	r20,r19,r17
1010d3c8:	1c20b03a 	or	r16,r3,r16
1010d3cc:	1080fcc4 	addi	r2,r2,1011
1010d3d0:	00a5c83a 	sub	r18,zero,r2
1010d3d4:	0027883a 	mov	r19,zero
1010d3d8:	0039883a 	mov	fp,zero
1010d3dc:	003f9006 	br	1010d220 <__alt_data_end+0xfffed220>
1010d3e0:	3446b03a 	or	r3,r6,r17
1010d3e4:	1800261e 	bne	r3,zero,1010d480 <__muldf3+0x2dc>
1010d3e8:	0023883a 	mov	r17,zero
1010d3ec:	0011883a 	mov	r8,zero
1010d3f0:	01400084 	movi	r5,2
1010d3f4:	003f9c06 	br	1010d268 <__alt_data_end+0xfffed268>
1010d3f8:	3446b03a 	or	r3,r6,r17
1010d3fc:	18001c26 	beq	r3,zero,1010d470 <__muldf3+0x2cc>
1010d400:	8800ce26 	beq	r17,zero,1010d73c <__muldf3+0x598>
1010d404:	8809883a 	mov	r4,r17
1010d408:	d9800215 	stw	r6,8(sp)
1010d40c:	da400115 	stw	r9,4(sp)
1010d410:	da800015 	stw	r10,0(sp)
1010d414:	010e3bc0 	call	1010e3bc <__clzsi2>
1010d418:	d9800217 	ldw	r6,8(sp)
1010d41c:	da400117 	ldw	r9,4(sp)
1010d420:	da800017 	ldw	r10,0(sp)
1010d424:	113ffd44 	addi	r4,r2,-11
1010d428:	00c00704 	movi	r3,28
1010d42c:	1900bf16 	blt	r3,r4,1010d72c <__muldf3+0x588>
1010d430:	00c00744 	movi	r3,29
1010d434:	123ffe04 	addi	r8,r2,-8
1010d438:	1907c83a 	sub	r3,r3,r4
1010d43c:	8a22983a 	sll	r17,r17,r8
1010d440:	30c6d83a 	srl	r3,r6,r3
1010d444:	3210983a 	sll	r8,r6,r8
1010d448:	1c62b03a 	or	r17,r3,r17
1010d44c:	1080fcc4 	addi	r2,r2,1011
1010d450:	0085c83a 	sub	r2,zero,r2
1010d454:	000b883a 	mov	r5,zero
1010d458:	003f8306 	br	1010d268 <__alt_data_end+0xfffed268>
1010d45c:	b02b883a 	mov	r21,r22
1010d460:	0081ffc4 	movi	r2,2047
1010d464:	000b883a 	mov	r5,zero
1010d468:	0029883a 	mov	r20,zero
1010d46c:	003fac06 	br	1010d320 <__alt_data_end+0xfffed320>
1010d470:	0023883a 	mov	r17,zero
1010d474:	0011883a 	mov	r8,zero
1010d478:	01400044 	movi	r5,1
1010d47c:	003f7a06 	br	1010d268 <__alt_data_end+0xfffed268>
1010d480:	014000c4 	movi	r5,3
1010d484:	003f7806 	br	1010d268 <__alt_data_end+0xfffed268>
1010d488:	04c00104 	movi	r19,4
1010d48c:	0021883a 	mov	r16,zero
1010d490:	0029883a 	mov	r20,zero
1010d494:	07000044 	movi	fp,1
1010d498:	003f6106 	br	1010d220 <__alt_data_end+0xfffed220>
1010d49c:	04c00304 	movi	r19,12
1010d4a0:	070000c4 	movi	fp,3
1010d4a4:	003f5e06 	br	1010d220 <__alt_data_end+0xfffed220>
1010d4a8:	01400434 	movhi	r5,16
1010d4ac:	002b883a 	mov	r21,zero
1010d4b0:	297fffc4 	addi	r5,r5,-1
1010d4b4:	053fffc4 	movi	r20,-1
1010d4b8:	0081ffc4 	movi	r2,2047
1010d4bc:	003f9806 	br	1010d320 <__alt_data_end+0xfffed320>
1010d4c0:	8023883a 	mov	r17,r16
1010d4c4:	a011883a 	mov	r8,r20
1010d4c8:	e00b883a 	mov	r5,fp
1010d4cc:	003f8a06 	br	1010d2f8 <__alt_data_end+0xfffed2f8>
1010d4d0:	8023883a 	mov	r17,r16
1010d4d4:	a011883a 	mov	r8,r20
1010d4d8:	482d883a 	mov	r22,r9
1010d4dc:	e00b883a 	mov	r5,fp
1010d4e0:	003f8506 	br	1010d2f8 <__alt_data_end+0xfffed2f8>
1010d4e4:	a00ad43a 	srli	r5,r20,16
1010d4e8:	401ad43a 	srli	r13,r8,16
1010d4ec:	a53fffcc 	andi	r20,r20,65535
1010d4f0:	423fffcc 	andi	r8,r8,65535
1010d4f4:	4519383a 	mul	r12,r8,r20
1010d4f8:	4147383a 	mul	r3,r8,r5
1010d4fc:	6d09383a 	mul	r4,r13,r20
1010d500:	600cd43a 	srli	r6,r12,16
1010d504:	2b5d383a 	mul	r14,r5,r13
1010d508:	20c9883a 	add	r4,r4,r3
1010d50c:	310d883a 	add	r6,r6,r4
1010d510:	30c0022e 	bgeu	r6,r3,1010d51c <__muldf3+0x378>
1010d514:	00c00074 	movhi	r3,1
1010d518:	70dd883a 	add	r14,r14,r3
1010d51c:	8826d43a 	srli	r19,r17,16
1010d520:	8bffffcc 	andi	r15,r17,65535
1010d524:	7d23383a 	mul	r17,r15,r20
1010d528:	7949383a 	mul	r4,r15,r5
1010d52c:	9d29383a 	mul	r20,r19,r20
1010d530:	8814d43a 	srli	r10,r17,16
1010d534:	3012943a 	slli	r9,r6,16
1010d538:	a129883a 	add	r20,r20,r4
1010d53c:	633fffcc 	andi	r12,r12,65535
1010d540:	5515883a 	add	r10,r10,r20
1010d544:	3006d43a 	srli	r3,r6,16
1010d548:	4b13883a 	add	r9,r9,r12
1010d54c:	2ccb383a 	mul	r5,r5,r19
1010d550:	5100022e 	bgeu	r10,r4,1010d55c <__muldf3+0x3b8>
1010d554:	01000074 	movhi	r4,1
1010d558:	290b883a 	add	r5,r5,r4
1010d55c:	802ad43a 	srli	r21,r16,16
1010d560:	843fffcc 	andi	r16,r16,65535
1010d564:	440d383a 	mul	r6,r8,r16
1010d568:	4565383a 	mul	r18,r8,r21
1010d56c:	8349383a 	mul	r4,r16,r13
1010d570:	500e943a 	slli	r7,r10,16
1010d574:	3010d43a 	srli	r8,r6,16
1010d578:	5028d43a 	srli	r20,r10,16
1010d57c:	2489883a 	add	r4,r4,r18
1010d580:	8abfffcc 	andi	r10,r17,65535
1010d584:	3a95883a 	add	r10,r7,r10
1010d588:	4119883a 	add	r12,r8,r4
1010d58c:	a169883a 	add	r20,r20,r5
1010d590:	1a87883a 	add	r3,r3,r10
1010d594:	6d5b383a 	mul	r13,r13,r21
1010d598:	6480022e 	bgeu	r12,r18,1010d5a4 <__muldf3+0x400>
1010d59c:	01000074 	movhi	r4,1
1010d5a0:	691b883a 	add	r13,r13,r4
1010d5a4:	7c25383a 	mul	r18,r15,r16
1010d5a8:	7d4b383a 	mul	r5,r15,r21
1010d5ac:	84cf383a 	mul	r7,r16,r19
1010d5b0:	901ed43a 	srli	r15,r18,16
1010d5b4:	6008d43a 	srli	r4,r12,16
1010d5b8:	6010943a 	slli	r8,r12,16
1010d5bc:	394f883a 	add	r7,r7,r5
1010d5c0:	333fffcc 	andi	r12,r6,65535
1010d5c4:	79df883a 	add	r15,r15,r7
1010d5c8:	235b883a 	add	r13,r4,r13
1010d5cc:	9d63383a 	mul	r17,r19,r21
1010d5d0:	4309883a 	add	r4,r8,r12
1010d5d4:	7940022e 	bgeu	r15,r5,1010d5e0 <__muldf3+0x43c>
1010d5d8:	01400074 	movhi	r5,1
1010d5dc:	8963883a 	add	r17,r17,r5
1010d5e0:	780a943a 	slli	r5,r15,16
1010d5e4:	91bfffcc 	andi	r6,r18,65535
1010d5e8:	70c7883a 	add	r3,r14,r3
1010d5ec:	298d883a 	add	r6,r5,r6
1010d5f0:	1a8f803a 	cmpltu	r7,r3,r10
1010d5f4:	350b883a 	add	r5,r6,r20
1010d5f8:	20c7883a 	add	r3,r4,r3
1010d5fc:	3955883a 	add	r10,r7,r5
1010d600:	1909803a 	cmpltu	r4,r3,r4
1010d604:	6a91883a 	add	r8,r13,r10
1010d608:	780cd43a 	srli	r6,r15,16
1010d60c:	2219883a 	add	r12,r4,r8
1010d610:	2d0b803a 	cmpltu	r5,r5,r20
1010d614:	51cf803a 	cmpltu	r7,r10,r7
1010d618:	29ceb03a 	or	r7,r5,r7
1010d61c:	4351803a 	cmpltu	r8,r8,r13
1010d620:	610b803a 	cmpltu	r5,r12,r4
1010d624:	4148b03a 	or	r4,r8,r5
1010d628:	398f883a 	add	r7,r7,r6
1010d62c:	3909883a 	add	r4,r7,r4
1010d630:	1810927a 	slli	r8,r3,9
1010d634:	2449883a 	add	r4,r4,r17
1010d638:	2008927a 	slli	r4,r4,9
1010d63c:	6022d5fa 	srli	r17,r12,23
1010d640:	1806d5fa 	srli	r3,r3,23
1010d644:	4252b03a 	or	r9,r8,r9
1010d648:	600a927a 	slli	r5,r12,9
1010d64c:	4810c03a 	cmpne	r8,r9,zero
1010d650:	2462b03a 	or	r17,r4,r17
1010d654:	40c6b03a 	or	r3,r8,r3
1010d658:	8900402c 	andhi	r4,r17,256
1010d65c:	1950b03a 	or	r8,r3,r5
1010d660:	20000726 	beq	r4,zero,1010d680 <__muldf3+0x4dc>
1010d664:	4006d07a 	srli	r3,r8,1
1010d668:	880497fa 	slli	r2,r17,31
1010d66c:	4200004c 	andi	r8,r8,1
1010d670:	8822d07a 	srli	r17,r17,1
1010d674:	1a10b03a 	or	r8,r3,r8
1010d678:	1210b03a 	or	r8,r2,r8
1010d67c:	5805883a 	mov	r2,r11
1010d680:	1140ffc4 	addi	r5,r2,1023
1010d684:	0140440e 	bge	zero,r5,1010d798 <__muldf3+0x5f4>
1010d688:	40c001cc 	andi	r3,r8,7
1010d68c:	18000726 	beq	r3,zero,1010d6ac <__muldf3+0x508>
1010d690:	40c003cc 	andi	r3,r8,15
1010d694:	01000104 	movi	r4,4
1010d698:	19000426 	beq	r3,r4,1010d6ac <__muldf3+0x508>
1010d69c:	4107883a 	add	r3,r8,r4
1010d6a0:	1a11803a 	cmpltu	r8,r3,r8
1010d6a4:	8a23883a 	add	r17,r17,r8
1010d6a8:	1811883a 	mov	r8,r3
1010d6ac:	88c0402c 	andhi	r3,r17,256
1010d6b0:	18000426 	beq	r3,zero,1010d6c4 <__muldf3+0x520>
1010d6b4:	11410004 	addi	r5,r2,1024
1010d6b8:	00bfc034 	movhi	r2,65280
1010d6bc:	10bfffc4 	addi	r2,r2,-1
1010d6c0:	88a2703a 	and	r17,r17,r2
1010d6c4:	0081ff84 	movi	r2,2046
1010d6c8:	117f6416 	blt	r2,r5,1010d45c <__alt_data_end+0xfffed45c>
1010d6cc:	8828977a 	slli	r20,r17,29
1010d6d0:	4010d0fa 	srli	r8,r8,3
1010d6d4:	8822927a 	slli	r17,r17,9
1010d6d8:	2881ffcc 	andi	r2,r5,2047
1010d6dc:	a228b03a 	or	r20,r20,r8
1010d6e0:	880ad33a 	srli	r5,r17,12
1010d6e4:	b02b883a 	mov	r21,r22
1010d6e8:	003f0d06 	br	1010d320 <__alt_data_end+0xfffed320>
1010d6ec:	8080022c 	andhi	r2,r16,8
1010d6f0:	10000926 	beq	r2,zero,1010d718 <__muldf3+0x574>
1010d6f4:	8880022c 	andhi	r2,r17,8
1010d6f8:	1000071e 	bne	r2,zero,1010d718 <__muldf3+0x574>
1010d6fc:	00800434 	movhi	r2,16
1010d700:	89400234 	orhi	r5,r17,8
1010d704:	10bfffc4 	addi	r2,r2,-1
1010d708:	b82b883a 	mov	r21,r23
1010d70c:	288a703a 	and	r5,r5,r2
1010d710:	4029883a 	mov	r20,r8
1010d714:	003f6806 	br	1010d4b8 <__alt_data_end+0xfffed4b8>
1010d718:	00800434 	movhi	r2,16
1010d71c:	81400234 	orhi	r5,r16,8
1010d720:	10bfffc4 	addi	r2,r2,-1
1010d724:	288a703a 	and	r5,r5,r2
1010d728:	003f6306 	br	1010d4b8 <__alt_data_end+0xfffed4b8>
1010d72c:	147ff604 	addi	r17,r2,-40
1010d730:	3462983a 	sll	r17,r6,r17
1010d734:	0011883a 	mov	r8,zero
1010d738:	003f4406 	br	1010d44c <__alt_data_end+0xfffed44c>
1010d73c:	3009883a 	mov	r4,r6
1010d740:	d9800215 	stw	r6,8(sp)
1010d744:	da400115 	stw	r9,4(sp)
1010d748:	da800015 	stw	r10,0(sp)
1010d74c:	010e3bc0 	call	1010e3bc <__clzsi2>
1010d750:	10800804 	addi	r2,r2,32
1010d754:	da800017 	ldw	r10,0(sp)
1010d758:	da400117 	ldw	r9,4(sp)
1010d75c:	d9800217 	ldw	r6,8(sp)
1010d760:	003f3006 	br	1010d424 <__alt_data_end+0xfffed424>
1010d764:	143ff604 	addi	r16,r2,-40
1010d768:	9c20983a 	sll	r16,r19,r16
1010d76c:	0029883a 	mov	r20,zero
1010d770:	003f1606 	br	1010d3cc <__alt_data_end+0xfffed3cc>
1010d774:	d9800215 	stw	r6,8(sp)
1010d778:	d9c00015 	stw	r7,0(sp)
1010d77c:	da400115 	stw	r9,4(sp)
1010d780:	010e3bc0 	call	1010e3bc <__clzsi2>
1010d784:	10800804 	addi	r2,r2,32
1010d788:	da400117 	ldw	r9,4(sp)
1010d78c:	d9c00017 	ldw	r7,0(sp)
1010d790:	d9800217 	ldw	r6,8(sp)
1010d794:	003f0306 	br	1010d3a4 <__alt_data_end+0xfffed3a4>
1010d798:	00c00044 	movi	r3,1
1010d79c:	1947c83a 	sub	r3,r3,r5
1010d7a0:	00800e04 	movi	r2,56
1010d7a4:	10feda16 	blt	r2,r3,1010d310 <__alt_data_end+0xfffed310>
1010d7a8:	008007c4 	movi	r2,31
1010d7ac:	10c01b16 	blt	r2,r3,1010d81c <__muldf3+0x678>
1010d7b0:	00800804 	movi	r2,32
1010d7b4:	10c5c83a 	sub	r2,r2,r3
1010d7b8:	888a983a 	sll	r5,r17,r2
1010d7bc:	40c8d83a 	srl	r4,r8,r3
1010d7c0:	4084983a 	sll	r2,r8,r2
1010d7c4:	88e2d83a 	srl	r17,r17,r3
1010d7c8:	2906b03a 	or	r3,r5,r4
1010d7cc:	1004c03a 	cmpne	r2,r2,zero
1010d7d0:	1886b03a 	or	r3,r3,r2
1010d7d4:	188001cc 	andi	r2,r3,7
1010d7d8:	10000726 	beq	r2,zero,1010d7f8 <__muldf3+0x654>
1010d7dc:	188003cc 	andi	r2,r3,15
1010d7e0:	01000104 	movi	r4,4
1010d7e4:	11000426 	beq	r2,r4,1010d7f8 <__muldf3+0x654>
1010d7e8:	1805883a 	mov	r2,r3
1010d7ec:	10c00104 	addi	r3,r2,4
1010d7f0:	1885803a 	cmpltu	r2,r3,r2
1010d7f4:	88a3883a 	add	r17,r17,r2
1010d7f8:	8880202c 	andhi	r2,r17,128
1010d7fc:	10001c26 	beq	r2,zero,1010d870 <__muldf3+0x6cc>
1010d800:	b02b883a 	mov	r21,r22
1010d804:	00800044 	movi	r2,1
1010d808:	000b883a 	mov	r5,zero
1010d80c:	0029883a 	mov	r20,zero
1010d810:	003ec306 	br	1010d320 <__alt_data_end+0xfffed320>
1010d814:	5805883a 	mov	r2,r11
1010d818:	003f9906 	br	1010d680 <__alt_data_end+0xfffed680>
1010d81c:	00bff844 	movi	r2,-31
1010d820:	1145c83a 	sub	r2,r2,r5
1010d824:	8888d83a 	srl	r4,r17,r2
1010d828:	00800804 	movi	r2,32
1010d82c:	18801a26 	beq	r3,r2,1010d898 <__muldf3+0x6f4>
1010d830:	00801004 	movi	r2,64
1010d834:	10c5c83a 	sub	r2,r2,r3
1010d838:	8884983a 	sll	r2,r17,r2
1010d83c:	1204b03a 	or	r2,r2,r8
1010d840:	1004c03a 	cmpne	r2,r2,zero
1010d844:	2084b03a 	or	r2,r4,r2
1010d848:	144001cc 	andi	r17,r2,7
1010d84c:	88000d1e 	bne	r17,zero,1010d884 <__muldf3+0x6e0>
1010d850:	000b883a 	mov	r5,zero
1010d854:	1028d0fa 	srli	r20,r2,3
1010d858:	b02b883a 	mov	r21,r22
1010d85c:	0005883a 	mov	r2,zero
1010d860:	a468b03a 	or	r20,r20,r17
1010d864:	003eae06 	br	1010d320 <__alt_data_end+0xfffed320>
1010d868:	1007883a 	mov	r3,r2
1010d86c:	0023883a 	mov	r17,zero
1010d870:	880a927a 	slli	r5,r17,9
1010d874:	1805883a 	mov	r2,r3
1010d878:	8822977a 	slli	r17,r17,29
1010d87c:	280ad33a 	srli	r5,r5,12
1010d880:	003ff406 	br	1010d854 <__alt_data_end+0xfffed854>
1010d884:	10c003cc 	andi	r3,r2,15
1010d888:	01000104 	movi	r4,4
1010d88c:	193ff626 	beq	r3,r4,1010d868 <__alt_data_end+0xfffed868>
1010d890:	0023883a 	mov	r17,zero
1010d894:	003fd506 	br	1010d7ec <__alt_data_end+0xfffed7ec>
1010d898:	0005883a 	mov	r2,zero
1010d89c:	003fe706 	br	1010d83c <__alt_data_end+0xfffed83c>
1010d8a0:	00800434 	movhi	r2,16
1010d8a4:	89400234 	orhi	r5,r17,8
1010d8a8:	10bfffc4 	addi	r2,r2,-1
1010d8ac:	b02b883a 	mov	r21,r22
1010d8b0:	288a703a 	and	r5,r5,r2
1010d8b4:	4029883a 	mov	r20,r8
1010d8b8:	003eff06 	br	1010d4b8 <__alt_data_end+0xfffed4b8>

1010d8bc <__subdf3>:
1010d8bc:	02000434 	movhi	r8,16
1010d8c0:	423fffc4 	addi	r8,r8,-1
1010d8c4:	defffb04 	addi	sp,sp,-20
1010d8c8:	2a14703a 	and	r10,r5,r8
1010d8cc:	3812d53a 	srli	r9,r7,20
1010d8d0:	3a10703a 	and	r8,r7,r8
1010d8d4:	2006d77a 	srli	r3,r4,29
1010d8d8:	3004d77a 	srli	r2,r6,29
1010d8dc:	dc000015 	stw	r16,0(sp)
1010d8e0:	501490fa 	slli	r10,r10,3
1010d8e4:	2820d53a 	srli	r16,r5,20
1010d8e8:	401090fa 	slli	r8,r8,3
1010d8ec:	dc800215 	stw	r18,8(sp)
1010d8f0:	dc400115 	stw	r17,4(sp)
1010d8f4:	dfc00415 	stw	ra,16(sp)
1010d8f8:	202290fa 	slli	r17,r4,3
1010d8fc:	dcc00315 	stw	r19,12(sp)
1010d900:	4a41ffcc 	andi	r9,r9,2047
1010d904:	0101ffc4 	movi	r4,2047
1010d908:	2824d7fa 	srli	r18,r5,31
1010d90c:	8401ffcc 	andi	r16,r16,2047
1010d910:	50c6b03a 	or	r3,r10,r3
1010d914:	380ed7fa 	srli	r7,r7,31
1010d918:	408ab03a 	or	r5,r8,r2
1010d91c:	300c90fa 	slli	r6,r6,3
1010d920:	49009626 	beq	r9,r4,1010db7c <__subdf3+0x2c0>
1010d924:	39c0005c 	xori	r7,r7,1
1010d928:	8245c83a 	sub	r2,r16,r9
1010d92c:	3c807426 	beq	r7,r18,1010db00 <__subdf3+0x244>
1010d930:	0080af0e 	bge	zero,r2,1010dbf0 <__subdf3+0x334>
1010d934:	48002a1e 	bne	r9,zero,1010d9e0 <__subdf3+0x124>
1010d938:	2988b03a 	or	r4,r5,r6
1010d93c:	20009a1e 	bne	r4,zero,1010dba8 <__subdf3+0x2ec>
1010d940:	888001cc 	andi	r2,r17,7
1010d944:	10000726 	beq	r2,zero,1010d964 <__subdf3+0xa8>
1010d948:	888003cc 	andi	r2,r17,15
1010d94c:	01000104 	movi	r4,4
1010d950:	11000426 	beq	r2,r4,1010d964 <__subdf3+0xa8>
1010d954:	890b883a 	add	r5,r17,r4
1010d958:	2c63803a 	cmpltu	r17,r5,r17
1010d95c:	1c47883a 	add	r3,r3,r17
1010d960:	2823883a 	mov	r17,r5
1010d964:	1880202c 	andhi	r2,r3,128
1010d968:	10005926 	beq	r2,zero,1010dad0 <__subdf3+0x214>
1010d96c:	84000044 	addi	r16,r16,1
1010d970:	0081ffc4 	movi	r2,2047
1010d974:	8080be26 	beq	r16,r2,1010dc70 <__subdf3+0x3b4>
1010d978:	017fe034 	movhi	r5,65408
1010d97c:	297fffc4 	addi	r5,r5,-1
1010d980:	1946703a 	and	r3,r3,r5
1010d984:	1804977a 	slli	r2,r3,29
1010d988:	1806927a 	slli	r3,r3,9
1010d98c:	8822d0fa 	srli	r17,r17,3
1010d990:	8401ffcc 	andi	r16,r16,2047
1010d994:	180ad33a 	srli	r5,r3,12
1010d998:	9100004c 	andi	r4,r18,1
1010d99c:	1444b03a 	or	r2,r2,r17
1010d9a0:	80c1ffcc 	andi	r3,r16,2047
1010d9a4:	1820953a 	slli	r16,r3,20
1010d9a8:	20c03fcc 	andi	r3,r4,255
1010d9ac:	180897fa 	slli	r4,r3,31
1010d9b0:	00c00434 	movhi	r3,16
1010d9b4:	18ffffc4 	addi	r3,r3,-1
1010d9b8:	28c6703a 	and	r3,r5,r3
1010d9bc:	1c06b03a 	or	r3,r3,r16
1010d9c0:	1906b03a 	or	r3,r3,r4
1010d9c4:	dfc00417 	ldw	ra,16(sp)
1010d9c8:	dcc00317 	ldw	r19,12(sp)
1010d9cc:	dc800217 	ldw	r18,8(sp)
1010d9d0:	dc400117 	ldw	r17,4(sp)
1010d9d4:	dc000017 	ldw	r16,0(sp)
1010d9d8:	dec00504 	addi	sp,sp,20
1010d9dc:	f800283a 	ret
1010d9e0:	0101ffc4 	movi	r4,2047
1010d9e4:	813fd626 	beq	r16,r4,1010d940 <__alt_data_end+0xfffed940>
1010d9e8:	29402034 	orhi	r5,r5,128
1010d9ec:	01000e04 	movi	r4,56
1010d9f0:	2080a316 	blt	r4,r2,1010dc80 <__subdf3+0x3c4>
1010d9f4:	010007c4 	movi	r4,31
1010d9f8:	2080c616 	blt	r4,r2,1010dd14 <__subdf3+0x458>
1010d9fc:	01000804 	movi	r4,32
1010da00:	2089c83a 	sub	r4,r4,r2
1010da04:	2910983a 	sll	r8,r5,r4
1010da08:	308ed83a 	srl	r7,r6,r2
1010da0c:	3108983a 	sll	r4,r6,r4
1010da10:	2884d83a 	srl	r2,r5,r2
1010da14:	41ccb03a 	or	r6,r8,r7
1010da18:	2008c03a 	cmpne	r4,r4,zero
1010da1c:	310cb03a 	or	r6,r6,r4
1010da20:	898dc83a 	sub	r6,r17,r6
1010da24:	89a3803a 	cmpltu	r17,r17,r6
1010da28:	1887c83a 	sub	r3,r3,r2
1010da2c:	1c47c83a 	sub	r3,r3,r17
1010da30:	3023883a 	mov	r17,r6
1010da34:	1880202c 	andhi	r2,r3,128
1010da38:	10002326 	beq	r2,zero,1010dac8 <__subdf3+0x20c>
1010da3c:	04c02034 	movhi	r19,128
1010da40:	9cffffc4 	addi	r19,r19,-1
1010da44:	1ce6703a 	and	r19,r3,r19
1010da48:	98007a26 	beq	r19,zero,1010dc34 <__subdf3+0x378>
1010da4c:	9809883a 	mov	r4,r19
1010da50:	010e3bc0 	call	1010e3bc <__clzsi2>
1010da54:	113ffe04 	addi	r4,r2,-8
1010da58:	00c007c4 	movi	r3,31
1010da5c:	19007b16 	blt	r3,r4,1010dc4c <__subdf3+0x390>
1010da60:	00800804 	movi	r2,32
1010da64:	1105c83a 	sub	r2,r2,r4
1010da68:	8884d83a 	srl	r2,r17,r2
1010da6c:	9906983a 	sll	r3,r19,r4
1010da70:	8922983a 	sll	r17,r17,r4
1010da74:	10c4b03a 	or	r2,r2,r3
1010da78:	24007816 	blt	r4,r16,1010dc5c <__subdf3+0x3a0>
1010da7c:	2421c83a 	sub	r16,r4,r16
1010da80:	80c00044 	addi	r3,r16,1
1010da84:	010007c4 	movi	r4,31
1010da88:	20c09516 	blt	r4,r3,1010dce0 <__subdf3+0x424>
1010da8c:	01400804 	movi	r5,32
1010da90:	28cbc83a 	sub	r5,r5,r3
1010da94:	88c8d83a 	srl	r4,r17,r3
1010da98:	8962983a 	sll	r17,r17,r5
1010da9c:	114a983a 	sll	r5,r2,r5
1010daa0:	10c6d83a 	srl	r3,r2,r3
1010daa4:	8804c03a 	cmpne	r2,r17,zero
1010daa8:	290ab03a 	or	r5,r5,r4
1010daac:	28a2b03a 	or	r17,r5,r2
1010dab0:	0021883a 	mov	r16,zero
1010dab4:	003fa206 	br	1010d940 <__alt_data_end+0xfffed940>
1010dab8:	2090b03a 	or	r8,r4,r2
1010dabc:	40018e26 	beq	r8,zero,1010e0f8 <__subdf3+0x83c>
1010dac0:	1007883a 	mov	r3,r2
1010dac4:	2023883a 	mov	r17,r4
1010dac8:	888001cc 	andi	r2,r17,7
1010dacc:	103f9e1e 	bne	r2,zero,1010d948 <__alt_data_end+0xfffed948>
1010dad0:	1804977a 	slli	r2,r3,29
1010dad4:	8822d0fa 	srli	r17,r17,3
1010dad8:	1810d0fa 	srli	r8,r3,3
1010dadc:	9100004c 	andi	r4,r18,1
1010dae0:	1444b03a 	or	r2,r2,r17
1010dae4:	00c1ffc4 	movi	r3,2047
1010dae8:	80c02826 	beq	r16,r3,1010db8c <__subdf3+0x2d0>
1010daec:	01400434 	movhi	r5,16
1010daf0:	297fffc4 	addi	r5,r5,-1
1010daf4:	80e0703a 	and	r16,r16,r3
1010daf8:	414a703a 	and	r5,r8,r5
1010dafc:	003fa806 	br	1010d9a0 <__alt_data_end+0xfffed9a0>
1010db00:	0080630e 	bge	zero,r2,1010dc90 <__subdf3+0x3d4>
1010db04:	48003026 	beq	r9,zero,1010dbc8 <__subdf3+0x30c>
1010db08:	0101ffc4 	movi	r4,2047
1010db0c:	813f8c26 	beq	r16,r4,1010d940 <__alt_data_end+0xfffed940>
1010db10:	29402034 	orhi	r5,r5,128
1010db14:	01000e04 	movi	r4,56
1010db18:	2080a90e 	bge	r4,r2,1010ddc0 <__subdf3+0x504>
1010db1c:	298cb03a 	or	r6,r5,r6
1010db20:	3012c03a 	cmpne	r9,r6,zero
1010db24:	0005883a 	mov	r2,zero
1010db28:	4c53883a 	add	r9,r9,r17
1010db2c:	4c63803a 	cmpltu	r17,r9,r17
1010db30:	10c7883a 	add	r3,r2,r3
1010db34:	88c7883a 	add	r3,r17,r3
1010db38:	4823883a 	mov	r17,r9
1010db3c:	1880202c 	andhi	r2,r3,128
1010db40:	1000d026 	beq	r2,zero,1010de84 <__subdf3+0x5c8>
1010db44:	84000044 	addi	r16,r16,1
1010db48:	0081ffc4 	movi	r2,2047
1010db4c:	8080fe26 	beq	r16,r2,1010df48 <__subdf3+0x68c>
1010db50:	00bfe034 	movhi	r2,65408
1010db54:	10bfffc4 	addi	r2,r2,-1
1010db58:	1886703a 	and	r3,r3,r2
1010db5c:	880ad07a 	srli	r5,r17,1
1010db60:	180497fa 	slli	r2,r3,31
1010db64:	8900004c 	andi	r4,r17,1
1010db68:	2922b03a 	or	r17,r5,r4
1010db6c:	1806d07a 	srli	r3,r3,1
1010db70:	1462b03a 	or	r17,r2,r17
1010db74:	3825883a 	mov	r18,r7
1010db78:	003f7106 	br	1010d940 <__alt_data_end+0xfffed940>
1010db7c:	2984b03a 	or	r2,r5,r6
1010db80:	103f6826 	beq	r2,zero,1010d924 <__alt_data_end+0xfffed924>
1010db84:	39c03fcc 	andi	r7,r7,255
1010db88:	003f6706 	br	1010d928 <__alt_data_end+0xfffed928>
1010db8c:	4086b03a 	or	r3,r8,r2
1010db90:	18015226 	beq	r3,zero,1010e0dc <__subdf3+0x820>
1010db94:	00c00434 	movhi	r3,16
1010db98:	41400234 	orhi	r5,r8,8
1010db9c:	18ffffc4 	addi	r3,r3,-1
1010dba0:	28ca703a 	and	r5,r5,r3
1010dba4:	003f7e06 	br	1010d9a0 <__alt_data_end+0xfffed9a0>
1010dba8:	10bfffc4 	addi	r2,r2,-1
1010dbac:	1000491e 	bne	r2,zero,1010dcd4 <__subdf3+0x418>
1010dbb0:	898fc83a 	sub	r7,r17,r6
1010dbb4:	89e3803a 	cmpltu	r17,r17,r7
1010dbb8:	1947c83a 	sub	r3,r3,r5
1010dbbc:	1c47c83a 	sub	r3,r3,r17
1010dbc0:	3823883a 	mov	r17,r7
1010dbc4:	003f9b06 	br	1010da34 <__alt_data_end+0xfffeda34>
1010dbc8:	2988b03a 	or	r4,r5,r6
1010dbcc:	203f5c26 	beq	r4,zero,1010d940 <__alt_data_end+0xfffed940>
1010dbd0:	10bfffc4 	addi	r2,r2,-1
1010dbd4:	1000931e 	bne	r2,zero,1010de24 <__subdf3+0x568>
1010dbd8:	898d883a 	add	r6,r17,r6
1010dbdc:	3463803a 	cmpltu	r17,r6,r17
1010dbe0:	1947883a 	add	r3,r3,r5
1010dbe4:	88c7883a 	add	r3,r17,r3
1010dbe8:	3023883a 	mov	r17,r6
1010dbec:	003fd306 	br	1010db3c <__alt_data_end+0xfffedb3c>
1010dbf0:	1000541e 	bne	r2,zero,1010dd44 <__subdf3+0x488>
1010dbf4:	80800044 	addi	r2,r16,1
1010dbf8:	1081ffcc 	andi	r2,r2,2047
1010dbfc:	01000044 	movi	r4,1
1010dc00:	2080a20e 	bge	r4,r2,1010de8c <__subdf3+0x5d0>
1010dc04:	8989c83a 	sub	r4,r17,r6
1010dc08:	8905803a 	cmpltu	r2,r17,r4
1010dc0c:	1967c83a 	sub	r19,r3,r5
1010dc10:	98a7c83a 	sub	r19,r19,r2
1010dc14:	9880202c 	andhi	r2,r19,128
1010dc18:	10006326 	beq	r2,zero,1010dda8 <__subdf3+0x4ec>
1010dc1c:	3463c83a 	sub	r17,r6,r17
1010dc20:	28c7c83a 	sub	r3,r5,r3
1010dc24:	344d803a 	cmpltu	r6,r6,r17
1010dc28:	19a7c83a 	sub	r19,r3,r6
1010dc2c:	3825883a 	mov	r18,r7
1010dc30:	983f861e 	bne	r19,zero,1010da4c <__alt_data_end+0xfffeda4c>
1010dc34:	8809883a 	mov	r4,r17
1010dc38:	010e3bc0 	call	1010e3bc <__clzsi2>
1010dc3c:	10800804 	addi	r2,r2,32
1010dc40:	113ffe04 	addi	r4,r2,-8
1010dc44:	00c007c4 	movi	r3,31
1010dc48:	193f850e 	bge	r3,r4,1010da60 <__alt_data_end+0xfffeda60>
1010dc4c:	10bff604 	addi	r2,r2,-40
1010dc50:	8884983a 	sll	r2,r17,r2
1010dc54:	0023883a 	mov	r17,zero
1010dc58:	243f880e 	bge	r4,r16,1010da7c <__alt_data_end+0xfffeda7c>
1010dc5c:	00ffe034 	movhi	r3,65408
1010dc60:	18ffffc4 	addi	r3,r3,-1
1010dc64:	8121c83a 	sub	r16,r16,r4
1010dc68:	10c6703a 	and	r3,r2,r3
1010dc6c:	003f3406 	br	1010d940 <__alt_data_end+0xfffed940>
1010dc70:	9100004c 	andi	r4,r18,1
1010dc74:	000b883a 	mov	r5,zero
1010dc78:	0005883a 	mov	r2,zero
1010dc7c:	003f4806 	br	1010d9a0 <__alt_data_end+0xfffed9a0>
1010dc80:	298cb03a 	or	r6,r5,r6
1010dc84:	300cc03a 	cmpne	r6,r6,zero
1010dc88:	0005883a 	mov	r2,zero
1010dc8c:	003f6406 	br	1010da20 <__alt_data_end+0xfffeda20>
1010dc90:	10009a1e 	bne	r2,zero,1010defc <__subdf3+0x640>
1010dc94:	82400044 	addi	r9,r16,1
1010dc98:	4881ffcc 	andi	r2,r9,2047
1010dc9c:	02800044 	movi	r10,1
1010dca0:	5080670e 	bge	r10,r2,1010de40 <__subdf3+0x584>
1010dca4:	0081ffc4 	movi	r2,2047
1010dca8:	4880af26 	beq	r9,r2,1010df68 <__subdf3+0x6ac>
1010dcac:	898d883a 	add	r6,r17,r6
1010dcb0:	1945883a 	add	r2,r3,r5
1010dcb4:	3447803a 	cmpltu	r3,r6,r17
1010dcb8:	1887883a 	add	r3,r3,r2
1010dcbc:	182297fa 	slli	r17,r3,31
1010dcc0:	300cd07a 	srli	r6,r6,1
1010dcc4:	1806d07a 	srli	r3,r3,1
1010dcc8:	4821883a 	mov	r16,r9
1010dccc:	89a2b03a 	or	r17,r17,r6
1010dcd0:	003f1b06 	br	1010d940 <__alt_data_end+0xfffed940>
1010dcd4:	0101ffc4 	movi	r4,2047
1010dcd8:	813f441e 	bne	r16,r4,1010d9ec <__alt_data_end+0xfffed9ec>
1010dcdc:	003f1806 	br	1010d940 <__alt_data_end+0xfffed940>
1010dce0:	843ff844 	addi	r16,r16,-31
1010dce4:	01400804 	movi	r5,32
1010dce8:	1408d83a 	srl	r4,r2,r16
1010dcec:	19405026 	beq	r3,r5,1010de30 <__subdf3+0x574>
1010dcf0:	01401004 	movi	r5,64
1010dcf4:	28c7c83a 	sub	r3,r5,r3
1010dcf8:	10c4983a 	sll	r2,r2,r3
1010dcfc:	88a2b03a 	or	r17,r17,r2
1010dd00:	8822c03a 	cmpne	r17,r17,zero
1010dd04:	2462b03a 	or	r17,r4,r17
1010dd08:	0007883a 	mov	r3,zero
1010dd0c:	0021883a 	mov	r16,zero
1010dd10:	003f6d06 	br	1010dac8 <__alt_data_end+0xfffedac8>
1010dd14:	11fff804 	addi	r7,r2,-32
1010dd18:	01000804 	movi	r4,32
1010dd1c:	29ced83a 	srl	r7,r5,r7
1010dd20:	11004526 	beq	r2,r4,1010de38 <__subdf3+0x57c>
1010dd24:	01001004 	movi	r4,64
1010dd28:	2089c83a 	sub	r4,r4,r2
1010dd2c:	2904983a 	sll	r2,r5,r4
1010dd30:	118cb03a 	or	r6,r2,r6
1010dd34:	300cc03a 	cmpne	r6,r6,zero
1010dd38:	398cb03a 	or	r6,r7,r6
1010dd3c:	0005883a 	mov	r2,zero
1010dd40:	003f3706 	br	1010da20 <__alt_data_end+0xfffeda20>
1010dd44:	80002a26 	beq	r16,zero,1010ddf0 <__subdf3+0x534>
1010dd48:	0101ffc4 	movi	r4,2047
1010dd4c:	49006626 	beq	r9,r4,1010dee8 <__subdf3+0x62c>
1010dd50:	0085c83a 	sub	r2,zero,r2
1010dd54:	18c02034 	orhi	r3,r3,128
1010dd58:	01000e04 	movi	r4,56
1010dd5c:	20807e16 	blt	r4,r2,1010df58 <__subdf3+0x69c>
1010dd60:	010007c4 	movi	r4,31
1010dd64:	2080e716 	blt	r4,r2,1010e104 <__subdf3+0x848>
1010dd68:	01000804 	movi	r4,32
1010dd6c:	2089c83a 	sub	r4,r4,r2
1010dd70:	1914983a 	sll	r10,r3,r4
1010dd74:	8890d83a 	srl	r8,r17,r2
1010dd78:	8908983a 	sll	r4,r17,r4
1010dd7c:	1884d83a 	srl	r2,r3,r2
1010dd80:	5222b03a 	or	r17,r10,r8
1010dd84:	2006c03a 	cmpne	r3,r4,zero
1010dd88:	88e2b03a 	or	r17,r17,r3
1010dd8c:	3463c83a 	sub	r17,r6,r17
1010dd90:	2885c83a 	sub	r2,r5,r2
1010dd94:	344d803a 	cmpltu	r6,r6,r17
1010dd98:	1187c83a 	sub	r3,r2,r6
1010dd9c:	4821883a 	mov	r16,r9
1010dda0:	3825883a 	mov	r18,r7
1010dda4:	003f2306 	br	1010da34 <__alt_data_end+0xfffeda34>
1010dda8:	24d0b03a 	or	r8,r4,r19
1010ddac:	40001b1e 	bne	r8,zero,1010de1c <__subdf3+0x560>
1010ddb0:	0005883a 	mov	r2,zero
1010ddb4:	0009883a 	mov	r4,zero
1010ddb8:	0021883a 	mov	r16,zero
1010ddbc:	003f4906 	br	1010dae4 <__alt_data_end+0xfffedae4>
1010ddc0:	010007c4 	movi	r4,31
1010ddc4:	20803a16 	blt	r4,r2,1010deb0 <__subdf3+0x5f4>
1010ddc8:	01000804 	movi	r4,32
1010ddcc:	2089c83a 	sub	r4,r4,r2
1010ddd0:	2912983a 	sll	r9,r5,r4
1010ddd4:	3090d83a 	srl	r8,r6,r2
1010ddd8:	3108983a 	sll	r4,r6,r4
1010dddc:	2884d83a 	srl	r2,r5,r2
1010dde0:	4a12b03a 	or	r9,r9,r8
1010dde4:	2008c03a 	cmpne	r4,r4,zero
1010dde8:	4912b03a 	or	r9,r9,r4
1010ddec:	003f4e06 	br	1010db28 <__alt_data_end+0xfffedb28>
1010ddf0:	1c48b03a 	or	r4,r3,r17
1010ddf4:	20003c26 	beq	r4,zero,1010dee8 <__subdf3+0x62c>
1010ddf8:	0084303a 	nor	r2,zero,r2
1010ddfc:	1000381e 	bne	r2,zero,1010dee0 <__subdf3+0x624>
1010de00:	3463c83a 	sub	r17,r6,r17
1010de04:	28c5c83a 	sub	r2,r5,r3
1010de08:	344d803a 	cmpltu	r6,r6,r17
1010de0c:	1187c83a 	sub	r3,r2,r6
1010de10:	4821883a 	mov	r16,r9
1010de14:	3825883a 	mov	r18,r7
1010de18:	003f0606 	br	1010da34 <__alt_data_end+0xfffeda34>
1010de1c:	2023883a 	mov	r17,r4
1010de20:	003f0906 	br	1010da48 <__alt_data_end+0xfffeda48>
1010de24:	0101ffc4 	movi	r4,2047
1010de28:	813f3a1e 	bne	r16,r4,1010db14 <__alt_data_end+0xfffedb14>
1010de2c:	003ec406 	br	1010d940 <__alt_data_end+0xfffed940>
1010de30:	0005883a 	mov	r2,zero
1010de34:	003fb106 	br	1010dcfc <__alt_data_end+0xfffedcfc>
1010de38:	0005883a 	mov	r2,zero
1010de3c:	003fbc06 	br	1010dd30 <__alt_data_end+0xfffedd30>
1010de40:	1c44b03a 	or	r2,r3,r17
1010de44:	80008e1e 	bne	r16,zero,1010e080 <__subdf3+0x7c4>
1010de48:	1000c826 	beq	r2,zero,1010e16c <__subdf3+0x8b0>
1010de4c:	2984b03a 	or	r2,r5,r6
1010de50:	103ebb26 	beq	r2,zero,1010d940 <__alt_data_end+0xfffed940>
1010de54:	8989883a 	add	r4,r17,r6
1010de58:	1945883a 	add	r2,r3,r5
1010de5c:	2447803a 	cmpltu	r3,r4,r17
1010de60:	1887883a 	add	r3,r3,r2
1010de64:	1880202c 	andhi	r2,r3,128
1010de68:	2023883a 	mov	r17,r4
1010de6c:	103f1626 	beq	r2,zero,1010dac8 <__alt_data_end+0xfffedac8>
1010de70:	00bfe034 	movhi	r2,65408
1010de74:	10bfffc4 	addi	r2,r2,-1
1010de78:	5021883a 	mov	r16,r10
1010de7c:	1886703a 	and	r3,r3,r2
1010de80:	003eaf06 	br	1010d940 <__alt_data_end+0xfffed940>
1010de84:	3825883a 	mov	r18,r7
1010de88:	003f0f06 	br	1010dac8 <__alt_data_end+0xfffedac8>
1010de8c:	1c44b03a 	or	r2,r3,r17
1010de90:	8000251e 	bne	r16,zero,1010df28 <__subdf3+0x66c>
1010de94:	1000661e 	bne	r2,zero,1010e030 <__subdf3+0x774>
1010de98:	2990b03a 	or	r8,r5,r6
1010de9c:	40009626 	beq	r8,zero,1010e0f8 <__subdf3+0x83c>
1010dea0:	2807883a 	mov	r3,r5
1010dea4:	3023883a 	mov	r17,r6
1010dea8:	3825883a 	mov	r18,r7
1010deac:	003ea406 	br	1010d940 <__alt_data_end+0xfffed940>
1010deb0:	127ff804 	addi	r9,r2,-32
1010deb4:	01000804 	movi	r4,32
1010deb8:	2a52d83a 	srl	r9,r5,r9
1010debc:	11008c26 	beq	r2,r4,1010e0f0 <__subdf3+0x834>
1010dec0:	01001004 	movi	r4,64
1010dec4:	2085c83a 	sub	r2,r4,r2
1010dec8:	2884983a 	sll	r2,r5,r2
1010decc:	118cb03a 	or	r6,r2,r6
1010ded0:	300cc03a 	cmpne	r6,r6,zero
1010ded4:	4992b03a 	or	r9,r9,r6
1010ded8:	0005883a 	mov	r2,zero
1010dedc:	003f1206 	br	1010db28 <__alt_data_end+0xfffedb28>
1010dee0:	0101ffc4 	movi	r4,2047
1010dee4:	493f9c1e 	bne	r9,r4,1010dd58 <__alt_data_end+0xfffedd58>
1010dee8:	2807883a 	mov	r3,r5
1010deec:	3023883a 	mov	r17,r6
1010def0:	4821883a 	mov	r16,r9
1010def4:	3825883a 	mov	r18,r7
1010def8:	003e9106 	br	1010d940 <__alt_data_end+0xfffed940>
1010defc:	80001f1e 	bne	r16,zero,1010df7c <__subdf3+0x6c0>
1010df00:	1c48b03a 	or	r4,r3,r17
1010df04:	20005a26 	beq	r4,zero,1010e070 <__subdf3+0x7b4>
1010df08:	0084303a 	nor	r2,zero,r2
1010df0c:	1000561e 	bne	r2,zero,1010e068 <__subdf3+0x7ac>
1010df10:	89a3883a 	add	r17,r17,r6
1010df14:	1945883a 	add	r2,r3,r5
1010df18:	898d803a 	cmpltu	r6,r17,r6
1010df1c:	3087883a 	add	r3,r6,r2
1010df20:	4821883a 	mov	r16,r9
1010df24:	003f0506 	br	1010db3c <__alt_data_end+0xfffedb3c>
1010df28:	10002b1e 	bne	r2,zero,1010dfd8 <__subdf3+0x71c>
1010df2c:	2984b03a 	or	r2,r5,r6
1010df30:	10008026 	beq	r2,zero,1010e134 <__subdf3+0x878>
1010df34:	2807883a 	mov	r3,r5
1010df38:	3023883a 	mov	r17,r6
1010df3c:	3825883a 	mov	r18,r7
1010df40:	0401ffc4 	movi	r16,2047
1010df44:	003e7e06 	br	1010d940 <__alt_data_end+0xfffed940>
1010df48:	3809883a 	mov	r4,r7
1010df4c:	0011883a 	mov	r8,zero
1010df50:	0005883a 	mov	r2,zero
1010df54:	003ee306 	br	1010dae4 <__alt_data_end+0xfffedae4>
1010df58:	1c62b03a 	or	r17,r3,r17
1010df5c:	8822c03a 	cmpne	r17,r17,zero
1010df60:	0005883a 	mov	r2,zero
1010df64:	003f8906 	br	1010dd8c <__alt_data_end+0xfffedd8c>
1010df68:	3809883a 	mov	r4,r7
1010df6c:	4821883a 	mov	r16,r9
1010df70:	0011883a 	mov	r8,zero
1010df74:	0005883a 	mov	r2,zero
1010df78:	003eda06 	br	1010dae4 <__alt_data_end+0xfffedae4>
1010df7c:	0101ffc4 	movi	r4,2047
1010df80:	49003b26 	beq	r9,r4,1010e070 <__subdf3+0x7b4>
1010df84:	0085c83a 	sub	r2,zero,r2
1010df88:	18c02034 	orhi	r3,r3,128
1010df8c:	01000e04 	movi	r4,56
1010df90:	20806e16 	blt	r4,r2,1010e14c <__subdf3+0x890>
1010df94:	010007c4 	movi	r4,31
1010df98:	20807716 	blt	r4,r2,1010e178 <__subdf3+0x8bc>
1010df9c:	01000804 	movi	r4,32
1010dfa0:	2089c83a 	sub	r4,r4,r2
1010dfa4:	1914983a 	sll	r10,r3,r4
1010dfa8:	8890d83a 	srl	r8,r17,r2
1010dfac:	8908983a 	sll	r4,r17,r4
1010dfb0:	1884d83a 	srl	r2,r3,r2
1010dfb4:	5222b03a 	or	r17,r10,r8
1010dfb8:	2006c03a 	cmpne	r3,r4,zero
1010dfbc:	88e2b03a 	or	r17,r17,r3
1010dfc0:	89a3883a 	add	r17,r17,r6
1010dfc4:	1145883a 	add	r2,r2,r5
1010dfc8:	898d803a 	cmpltu	r6,r17,r6
1010dfcc:	3087883a 	add	r3,r6,r2
1010dfd0:	4821883a 	mov	r16,r9
1010dfd4:	003ed906 	br	1010db3c <__alt_data_end+0xfffedb3c>
1010dfd8:	2984b03a 	or	r2,r5,r6
1010dfdc:	10004226 	beq	r2,zero,1010e0e8 <__subdf3+0x82c>
1010dfe0:	1808d0fa 	srli	r4,r3,3
1010dfe4:	8822d0fa 	srli	r17,r17,3
1010dfe8:	1806977a 	slli	r3,r3,29
1010dfec:	2080022c 	andhi	r2,r4,8
1010dff0:	1c62b03a 	or	r17,r3,r17
1010dff4:	10000826 	beq	r2,zero,1010e018 <__subdf3+0x75c>
1010dff8:	2812d0fa 	srli	r9,r5,3
1010dffc:	4880022c 	andhi	r2,r9,8
1010e000:	1000051e 	bne	r2,zero,1010e018 <__subdf3+0x75c>
1010e004:	300cd0fa 	srli	r6,r6,3
1010e008:	2804977a 	slli	r2,r5,29
1010e00c:	4809883a 	mov	r4,r9
1010e010:	3825883a 	mov	r18,r7
1010e014:	11a2b03a 	or	r17,r2,r6
1010e018:	8806d77a 	srli	r3,r17,29
1010e01c:	200890fa 	slli	r4,r4,3
1010e020:	882290fa 	slli	r17,r17,3
1010e024:	0401ffc4 	movi	r16,2047
1010e028:	1906b03a 	or	r3,r3,r4
1010e02c:	003e4406 	br	1010d940 <__alt_data_end+0xfffed940>
1010e030:	2984b03a 	or	r2,r5,r6
1010e034:	103e4226 	beq	r2,zero,1010d940 <__alt_data_end+0xfffed940>
1010e038:	8989c83a 	sub	r4,r17,r6
1010e03c:	8911803a 	cmpltu	r8,r17,r4
1010e040:	1945c83a 	sub	r2,r3,r5
1010e044:	1205c83a 	sub	r2,r2,r8
1010e048:	1200202c 	andhi	r8,r2,128
1010e04c:	403e9a26 	beq	r8,zero,1010dab8 <__alt_data_end+0xfffedab8>
1010e050:	3463c83a 	sub	r17,r6,r17
1010e054:	28c5c83a 	sub	r2,r5,r3
1010e058:	344d803a 	cmpltu	r6,r6,r17
1010e05c:	1187c83a 	sub	r3,r2,r6
1010e060:	3825883a 	mov	r18,r7
1010e064:	003e3606 	br	1010d940 <__alt_data_end+0xfffed940>
1010e068:	0101ffc4 	movi	r4,2047
1010e06c:	493fc71e 	bne	r9,r4,1010df8c <__alt_data_end+0xfffedf8c>
1010e070:	2807883a 	mov	r3,r5
1010e074:	3023883a 	mov	r17,r6
1010e078:	4821883a 	mov	r16,r9
1010e07c:	003e3006 	br	1010d940 <__alt_data_end+0xfffed940>
1010e080:	10003626 	beq	r2,zero,1010e15c <__subdf3+0x8a0>
1010e084:	2984b03a 	or	r2,r5,r6
1010e088:	10001726 	beq	r2,zero,1010e0e8 <__subdf3+0x82c>
1010e08c:	1808d0fa 	srli	r4,r3,3
1010e090:	8822d0fa 	srli	r17,r17,3
1010e094:	1806977a 	slli	r3,r3,29
1010e098:	2080022c 	andhi	r2,r4,8
1010e09c:	1c62b03a 	or	r17,r3,r17
1010e0a0:	10000726 	beq	r2,zero,1010e0c0 <__subdf3+0x804>
1010e0a4:	2812d0fa 	srli	r9,r5,3
1010e0a8:	4880022c 	andhi	r2,r9,8
1010e0ac:	1000041e 	bne	r2,zero,1010e0c0 <__subdf3+0x804>
1010e0b0:	300cd0fa 	srli	r6,r6,3
1010e0b4:	2804977a 	slli	r2,r5,29
1010e0b8:	4809883a 	mov	r4,r9
1010e0bc:	11a2b03a 	or	r17,r2,r6
1010e0c0:	8806d77a 	srli	r3,r17,29
1010e0c4:	200890fa 	slli	r4,r4,3
1010e0c8:	882290fa 	slli	r17,r17,3
1010e0cc:	3825883a 	mov	r18,r7
1010e0d0:	1906b03a 	or	r3,r3,r4
1010e0d4:	0401ffc4 	movi	r16,2047
1010e0d8:	003e1906 	br	1010d940 <__alt_data_end+0xfffed940>
1010e0dc:	000b883a 	mov	r5,zero
1010e0e0:	0005883a 	mov	r2,zero
1010e0e4:	003e2e06 	br	1010d9a0 <__alt_data_end+0xfffed9a0>
1010e0e8:	0401ffc4 	movi	r16,2047
1010e0ec:	003e1406 	br	1010d940 <__alt_data_end+0xfffed940>
1010e0f0:	0005883a 	mov	r2,zero
1010e0f4:	003f7506 	br	1010decc <__alt_data_end+0xfffedecc>
1010e0f8:	0005883a 	mov	r2,zero
1010e0fc:	0009883a 	mov	r4,zero
1010e100:	003e7806 	br	1010dae4 <__alt_data_end+0xfffedae4>
1010e104:	123ff804 	addi	r8,r2,-32
1010e108:	01000804 	movi	r4,32
1010e10c:	1a10d83a 	srl	r8,r3,r8
1010e110:	11002526 	beq	r2,r4,1010e1a8 <__subdf3+0x8ec>
1010e114:	01001004 	movi	r4,64
1010e118:	2085c83a 	sub	r2,r4,r2
1010e11c:	1884983a 	sll	r2,r3,r2
1010e120:	1444b03a 	or	r2,r2,r17
1010e124:	1004c03a 	cmpne	r2,r2,zero
1010e128:	40a2b03a 	or	r17,r8,r2
1010e12c:	0005883a 	mov	r2,zero
1010e130:	003f1606 	br	1010dd8c <__alt_data_end+0xfffedd8c>
1010e134:	02000434 	movhi	r8,16
1010e138:	0009883a 	mov	r4,zero
1010e13c:	423fffc4 	addi	r8,r8,-1
1010e140:	00bfffc4 	movi	r2,-1
1010e144:	0401ffc4 	movi	r16,2047
1010e148:	003e6606 	br	1010dae4 <__alt_data_end+0xfffedae4>
1010e14c:	1c62b03a 	or	r17,r3,r17
1010e150:	8822c03a 	cmpne	r17,r17,zero
1010e154:	0005883a 	mov	r2,zero
1010e158:	003f9906 	br	1010dfc0 <__alt_data_end+0xfffedfc0>
1010e15c:	2807883a 	mov	r3,r5
1010e160:	3023883a 	mov	r17,r6
1010e164:	0401ffc4 	movi	r16,2047
1010e168:	003df506 	br	1010d940 <__alt_data_end+0xfffed940>
1010e16c:	2807883a 	mov	r3,r5
1010e170:	3023883a 	mov	r17,r6
1010e174:	003df206 	br	1010d940 <__alt_data_end+0xfffed940>
1010e178:	123ff804 	addi	r8,r2,-32
1010e17c:	01000804 	movi	r4,32
1010e180:	1a10d83a 	srl	r8,r3,r8
1010e184:	11000a26 	beq	r2,r4,1010e1b0 <__subdf3+0x8f4>
1010e188:	01001004 	movi	r4,64
1010e18c:	2085c83a 	sub	r2,r4,r2
1010e190:	1884983a 	sll	r2,r3,r2
1010e194:	1444b03a 	or	r2,r2,r17
1010e198:	1004c03a 	cmpne	r2,r2,zero
1010e19c:	40a2b03a 	or	r17,r8,r2
1010e1a0:	0005883a 	mov	r2,zero
1010e1a4:	003f8606 	br	1010dfc0 <__alt_data_end+0xfffedfc0>
1010e1a8:	0005883a 	mov	r2,zero
1010e1ac:	003fdc06 	br	1010e120 <__alt_data_end+0xfffee120>
1010e1b0:	0005883a 	mov	r2,zero
1010e1b4:	003ff706 	br	1010e194 <__alt_data_end+0xfffee194>

1010e1b8 <__fixdfsi>:
1010e1b8:	280cd53a 	srli	r6,r5,20
1010e1bc:	00c00434 	movhi	r3,16
1010e1c0:	18ffffc4 	addi	r3,r3,-1
1010e1c4:	3181ffcc 	andi	r6,r6,2047
1010e1c8:	01c0ff84 	movi	r7,1022
1010e1cc:	28c6703a 	and	r3,r5,r3
1010e1d0:	280ad7fa 	srli	r5,r5,31
1010e1d4:	3980120e 	bge	r7,r6,1010e220 <__fixdfsi+0x68>
1010e1d8:	00810744 	movi	r2,1053
1010e1dc:	11800c16 	blt	r2,r6,1010e210 <__fixdfsi+0x58>
1010e1e0:	00810cc4 	movi	r2,1075
1010e1e4:	1185c83a 	sub	r2,r2,r6
1010e1e8:	01c007c4 	movi	r7,31
1010e1ec:	18c00434 	orhi	r3,r3,16
1010e1f0:	38800d16 	blt	r7,r2,1010e228 <__fixdfsi+0x70>
1010e1f4:	31befb44 	addi	r6,r6,-1043
1010e1f8:	2084d83a 	srl	r2,r4,r2
1010e1fc:	1986983a 	sll	r3,r3,r6
1010e200:	1884b03a 	or	r2,r3,r2
1010e204:	28000726 	beq	r5,zero,1010e224 <__fixdfsi+0x6c>
1010e208:	0085c83a 	sub	r2,zero,r2
1010e20c:	f800283a 	ret
1010e210:	00a00034 	movhi	r2,32768
1010e214:	10bfffc4 	addi	r2,r2,-1
1010e218:	2885883a 	add	r2,r5,r2
1010e21c:	f800283a 	ret
1010e220:	0005883a 	mov	r2,zero
1010e224:	f800283a 	ret
1010e228:	008104c4 	movi	r2,1043
1010e22c:	1185c83a 	sub	r2,r2,r6
1010e230:	1884d83a 	srl	r2,r3,r2
1010e234:	003ff306 	br	1010e204 <__alt_data_end+0xfffee204>

1010e238 <__floatsidf>:
1010e238:	defffd04 	addi	sp,sp,-12
1010e23c:	dfc00215 	stw	ra,8(sp)
1010e240:	dc400115 	stw	r17,4(sp)
1010e244:	dc000015 	stw	r16,0(sp)
1010e248:	20002b26 	beq	r4,zero,1010e2f8 <__floatsidf+0xc0>
1010e24c:	2023883a 	mov	r17,r4
1010e250:	2020d7fa 	srli	r16,r4,31
1010e254:	20002d16 	blt	r4,zero,1010e30c <__floatsidf+0xd4>
1010e258:	8809883a 	mov	r4,r17
1010e25c:	010e3bc0 	call	1010e3bc <__clzsi2>
1010e260:	01410784 	movi	r5,1054
1010e264:	288bc83a 	sub	r5,r5,r2
1010e268:	01010cc4 	movi	r4,1075
1010e26c:	2149c83a 	sub	r4,r4,r5
1010e270:	00c007c4 	movi	r3,31
1010e274:	1900160e 	bge	r3,r4,1010e2d0 <__floatsidf+0x98>
1010e278:	00c104c4 	movi	r3,1043
1010e27c:	1947c83a 	sub	r3,r3,r5
1010e280:	88c6983a 	sll	r3,r17,r3
1010e284:	00800434 	movhi	r2,16
1010e288:	10bfffc4 	addi	r2,r2,-1
1010e28c:	1886703a 	and	r3,r3,r2
1010e290:	2941ffcc 	andi	r5,r5,2047
1010e294:	800d883a 	mov	r6,r16
1010e298:	0005883a 	mov	r2,zero
1010e29c:	280a953a 	slli	r5,r5,20
1010e2a0:	31803fcc 	andi	r6,r6,255
1010e2a4:	01000434 	movhi	r4,16
1010e2a8:	300c97fa 	slli	r6,r6,31
1010e2ac:	213fffc4 	addi	r4,r4,-1
1010e2b0:	1906703a 	and	r3,r3,r4
1010e2b4:	1946b03a 	or	r3,r3,r5
1010e2b8:	1986b03a 	or	r3,r3,r6
1010e2bc:	dfc00217 	ldw	ra,8(sp)
1010e2c0:	dc400117 	ldw	r17,4(sp)
1010e2c4:	dc000017 	ldw	r16,0(sp)
1010e2c8:	dec00304 	addi	sp,sp,12
1010e2cc:	f800283a 	ret
1010e2d0:	00c002c4 	movi	r3,11
1010e2d4:	1887c83a 	sub	r3,r3,r2
1010e2d8:	88c6d83a 	srl	r3,r17,r3
1010e2dc:	8904983a 	sll	r2,r17,r4
1010e2e0:	01000434 	movhi	r4,16
1010e2e4:	213fffc4 	addi	r4,r4,-1
1010e2e8:	2941ffcc 	andi	r5,r5,2047
1010e2ec:	1906703a 	and	r3,r3,r4
1010e2f0:	800d883a 	mov	r6,r16
1010e2f4:	003fe906 	br	1010e29c <__alt_data_end+0xfffee29c>
1010e2f8:	000d883a 	mov	r6,zero
1010e2fc:	000b883a 	mov	r5,zero
1010e300:	0007883a 	mov	r3,zero
1010e304:	0005883a 	mov	r2,zero
1010e308:	003fe406 	br	1010e29c <__alt_data_end+0xfffee29c>
1010e30c:	0123c83a 	sub	r17,zero,r4
1010e310:	003fd106 	br	1010e258 <__alt_data_end+0xfffee258>

1010e314 <__floatunsidf>:
1010e314:	defffe04 	addi	sp,sp,-8
1010e318:	dc000015 	stw	r16,0(sp)
1010e31c:	dfc00115 	stw	ra,4(sp)
1010e320:	2021883a 	mov	r16,r4
1010e324:	20002226 	beq	r4,zero,1010e3b0 <__floatunsidf+0x9c>
1010e328:	010e3bc0 	call	1010e3bc <__clzsi2>
1010e32c:	01010784 	movi	r4,1054
1010e330:	2089c83a 	sub	r4,r4,r2
1010e334:	01810cc4 	movi	r6,1075
1010e338:	310dc83a 	sub	r6,r6,r4
1010e33c:	00c007c4 	movi	r3,31
1010e340:	1980120e 	bge	r3,r6,1010e38c <__floatunsidf+0x78>
1010e344:	00c104c4 	movi	r3,1043
1010e348:	1907c83a 	sub	r3,r3,r4
1010e34c:	80ca983a 	sll	r5,r16,r3
1010e350:	00800434 	movhi	r2,16
1010e354:	10bfffc4 	addi	r2,r2,-1
1010e358:	2101ffcc 	andi	r4,r4,2047
1010e35c:	0021883a 	mov	r16,zero
1010e360:	288a703a 	and	r5,r5,r2
1010e364:	2008953a 	slli	r4,r4,20
1010e368:	00c00434 	movhi	r3,16
1010e36c:	18ffffc4 	addi	r3,r3,-1
1010e370:	28c6703a 	and	r3,r5,r3
1010e374:	8005883a 	mov	r2,r16
1010e378:	1906b03a 	or	r3,r3,r4
1010e37c:	dfc00117 	ldw	ra,4(sp)
1010e380:	dc000017 	ldw	r16,0(sp)
1010e384:	dec00204 	addi	sp,sp,8
1010e388:	f800283a 	ret
1010e38c:	00c002c4 	movi	r3,11
1010e390:	188bc83a 	sub	r5,r3,r2
1010e394:	814ad83a 	srl	r5,r16,r5
1010e398:	00c00434 	movhi	r3,16
1010e39c:	18ffffc4 	addi	r3,r3,-1
1010e3a0:	81a0983a 	sll	r16,r16,r6
1010e3a4:	2101ffcc 	andi	r4,r4,2047
1010e3a8:	28ca703a 	and	r5,r5,r3
1010e3ac:	003fed06 	br	1010e364 <__alt_data_end+0xfffee364>
1010e3b0:	0009883a 	mov	r4,zero
1010e3b4:	000b883a 	mov	r5,zero
1010e3b8:	003fea06 	br	1010e364 <__alt_data_end+0xfffee364>

1010e3bc <__clzsi2>:
1010e3bc:	00bfffd4 	movui	r2,65535
1010e3c0:	11000536 	bltu	r2,r4,1010e3d8 <__clzsi2+0x1c>
1010e3c4:	00803fc4 	movi	r2,255
1010e3c8:	11000f36 	bltu	r2,r4,1010e408 <__clzsi2+0x4c>
1010e3cc:	00800804 	movi	r2,32
1010e3d0:	0007883a 	mov	r3,zero
1010e3d4:	00000506 	br	1010e3ec <__clzsi2+0x30>
1010e3d8:	00804034 	movhi	r2,256
1010e3dc:	10bfffc4 	addi	r2,r2,-1
1010e3e0:	11000c2e 	bgeu	r2,r4,1010e414 <__clzsi2+0x58>
1010e3e4:	00800204 	movi	r2,8
1010e3e8:	00c00604 	movi	r3,24
1010e3ec:	20c8d83a 	srl	r4,r4,r3
1010e3f0:	00c40474 	movhi	r3,4113
1010e3f4:	18c4aa04 	addi	r3,r3,4776
1010e3f8:	1909883a 	add	r4,r3,r4
1010e3fc:	20c00003 	ldbu	r3,0(r4)
1010e400:	10c5c83a 	sub	r2,r2,r3
1010e404:	f800283a 	ret
1010e408:	00800604 	movi	r2,24
1010e40c:	00c00204 	movi	r3,8
1010e410:	003ff606 	br	1010e3ec <__alt_data_end+0xfffee3ec>
1010e414:	00800404 	movi	r2,16
1010e418:	1007883a 	mov	r3,r2
1010e41c:	003ff306 	br	1010e3ec <__alt_data_end+0xfffee3ec>

1010e420 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010e420:	defffe04 	addi	sp,sp,-8
1010e424:	dfc00115 	stw	ra,4(sp)
1010e428:	df000015 	stw	fp,0(sp)
1010e42c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010e430:	d0a00b17 	ldw	r2,-32724(gp)
1010e434:	10000326 	beq	r2,zero,1010e444 <alt_get_errno+0x24>
1010e438:	d0a00b17 	ldw	r2,-32724(gp)
1010e43c:	103ee83a 	callr	r2
1010e440:	00000106 	br	1010e448 <alt_get_errno+0x28>
1010e444:	d0a6f904 	addi	r2,gp,-25628
}
1010e448:	e037883a 	mov	sp,fp
1010e44c:	dfc00117 	ldw	ra,4(sp)
1010e450:	df000017 	ldw	fp,0(sp)
1010e454:	dec00204 	addi	sp,sp,8
1010e458:	f800283a 	ret

1010e45c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1010e45c:	defffb04 	addi	sp,sp,-20
1010e460:	dfc00415 	stw	ra,16(sp)
1010e464:	df000315 	stw	fp,12(sp)
1010e468:	df000304 	addi	fp,sp,12
1010e46c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1010e470:	e0bfff17 	ldw	r2,-4(fp)
1010e474:	10000616 	blt	r2,zero,1010e490 <close+0x34>
1010e478:	e0bfff17 	ldw	r2,-4(fp)
1010e47c:	10c00324 	muli	r3,r2,12
1010e480:	00840474 	movhi	r2,4113
1010e484:	10872d04 	addi	r2,r2,7348
1010e488:	1885883a 	add	r2,r3,r2
1010e48c:	00000106 	br	1010e494 <close+0x38>
1010e490:	0005883a 	mov	r2,zero
1010e494:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1010e498:	e0bffd17 	ldw	r2,-12(fp)
1010e49c:	10001926 	beq	r2,zero,1010e504 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1010e4a0:	e0bffd17 	ldw	r2,-12(fp)
1010e4a4:	10800017 	ldw	r2,0(r2)
1010e4a8:	10800417 	ldw	r2,16(r2)
1010e4ac:	10000626 	beq	r2,zero,1010e4c8 <close+0x6c>
1010e4b0:	e0bffd17 	ldw	r2,-12(fp)
1010e4b4:	10800017 	ldw	r2,0(r2)
1010e4b8:	10800417 	ldw	r2,16(r2)
1010e4bc:	e13ffd17 	ldw	r4,-12(fp)
1010e4c0:	103ee83a 	callr	r2
1010e4c4:	00000106 	br	1010e4cc <close+0x70>
1010e4c8:	0005883a 	mov	r2,zero
1010e4cc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1010e4d0:	e13fff17 	ldw	r4,-4(fp)
1010e4d4:	010ed700 	call	1010ed70 <alt_release_fd>
    if (rval < 0)
1010e4d8:	e0bffe17 	ldw	r2,-8(fp)
1010e4dc:	1000070e 	bge	r2,zero,1010e4fc <close+0xa0>
    {
      ALT_ERRNO = -rval;
1010e4e0:	010e4200 	call	1010e420 <alt_get_errno>
1010e4e4:	1007883a 	mov	r3,r2
1010e4e8:	e0bffe17 	ldw	r2,-8(fp)
1010e4ec:	0085c83a 	sub	r2,zero,r2
1010e4f0:	18800015 	stw	r2,0(r3)
      return -1;
1010e4f4:	00bfffc4 	movi	r2,-1
1010e4f8:	00000706 	br	1010e518 <close+0xbc>
    }
    return 0;
1010e4fc:	0005883a 	mov	r2,zero
1010e500:	00000506 	br	1010e518 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1010e504:	010e4200 	call	1010e420 <alt_get_errno>
1010e508:	1007883a 	mov	r3,r2
1010e50c:	00801444 	movi	r2,81
1010e510:	18800015 	stw	r2,0(r3)
    return -1;
1010e514:	00bfffc4 	movi	r2,-1
  }
}
1010e518:	e037883a 	mov	sp,fp
1010e51c:	dfc00117 	ldw	ra,4(sp)
1010e520:	df000017 	ldw	fp,0(sp)
1010e524:	dec00204 	addi	sp,sp,8
1010e528:	f800283a 	ret

1010e52c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1010e52c:	defffc04 	addi	sp,sp,-16
1010e530:	df000315 	stw	fp,12(sp)
1010e534:	df000304 	addi	fp,sp,12
1010e538:	e13ffd15 	stw	r4,-12(fp)
1010e53c:	e17ffe15 	stw	r5,-8(fp)
1010e540:	e1bfff15 	stw	r6,-4(fp)
  return len;
1010e544:	e0bfff17 	ldw	r2,-4(fp)
}
1010e548:	e037883a 	mov	sp,fp
1010e54c:	df000017 	ldw	fp,0(sp)
1010e550:	dec00104 	addi	sp,sp,4
1010e554:	f800283a 	ret

1010e558 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010e558:	defffe04 	addi	sp,sp,-8
1010e55c:	dfc00115 	stw	ra,4(sp)
1010e560:	df000015 	stw	fp,0(sp)
1010e564:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010e568:	d0a00b17 	ldw	r2,-32724(gp)
1010e56c:	10000326 	beq	r2,zero,1010e57c <alt_get_errno+0x24>
1010e570:	d0a00b17 	ldw	r2,-32724(gp)
1010e574:	103ee83a 	callr	r2
1010e578:	00000106 	br	1010e580 <alt_get_errno+0x28>
1010e57c:	d0a6f904 	addi	r2,gp,-25628
}
1010e580:	e037883a 	mov	sp,fp
1010e584:	dfc00117 	ldw	ra,4(sp)
1010e588:	df000017 	ldw	fp,0(sp)
1010e58c:	dec00204 	addi	sp,sp,8
1010e590:	f800283a 	ret

1010e594 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1010e594:	defffb04 	addi	sp,sp,-20
1010e598:	dfc00415 	stw	ra,16(sp)
1010e59c:	df000315 	stw	fp,12(sp)
1010e5a0:	df000304 	addi	fp,sp,12
1010e5a4:	e13ffe15 	stw	r4,-8(fp)
1010e5a8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1010e5ac:	e0bffe17 	ldw	r2,-8(fp)
1010e5b0:	10000616 	blt	r2,zero,1010e5cc <fstat+0x38>
1010e5b4:	e0bffe17 	ldw	r2,-8(fp)
1010e5b8:	10c00324 	muli	r3,r2,12
1010e5bc:	00840474 	movhi	r2,4113
1010e5c0:	10872d04 	addi	r2,r2,7348
1010e5c4:	1885883a 	add	r2,r3,r2
1010e5c8:	00000106 	br	1010e5d0 <fstat+0x3c>
1010e5cc:	0005883a 	mov	r2,zero
1010e5d0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1010e5d4:	e0bffd17 	ldw	r2,-12(fp)
1010e5d8:	10001026 	beq	r2,zero,1010e61c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1010e5dc:	e0bffd17 	ldw	r2,-12(fp)
1010e5e0:	10800017 	ldw	r2,0(r2)
1010e5e4:	10800817 	ldw	r2,32(r2)
1010e5e8:	10000726 	beq	r2,zero,1010e608 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
1010e5ec:	e0bffd17 	ldw	r2,-12(fp)
1010e5f0:	10800017 	ldw	r2,0(r2)
1010e5f4:	10800817 	ldw	r2,32(r2)
1010e5f8:	e17fff17 	ldw	r5,-4(fp)
1010e5fc:	e13ffd17 	ldw	r4,-12(fp)
1010e600:	103ee83a 	callr	r2
1010e604:	00000a06 	br	1010e630 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1010e608:	e0bfff17 	ldw	r2,-4(fp)
1010e60c:	00c80004 	movi	r3,8192
1010e610:	10c00115 	stw	r3,4(r2)
      return 0;
1010e614:	0005883a 	mov	r2,zero
1010e618:	00000506 	br	1010e630 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1010e61c:	010e5580 	call	1010e558 <alt_get_errno>
1010e620:	1007883a 	mov	r3,r2
1010e624:	00801444 	movi	r2,81
1010e628:	18800015 	stw	r2,0(r3)
    return -1;
1010e62c:	00bfffc4 	movi	r2,-1
  }
}
1010e630:	e037883a 	mov	sp,fp
1010e634:	dfc00117 	ldw	ra,4(sp)
1010e638:	df000017 	ldw	fp,0(sp)
1010e63c:	dec00204 	addi	sp,sp,8
1010e640:	f800283a 	ret

1010e644 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010e644:	defffe04 	addi	sp,sp,-8
1010e648:	dfc00115 	stw	ra,4(sp)
1010e64c:	df000015 	stw	fp,0(sp)
1010e650:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010e654:	d0a00b17 	ldw	r2,-32724(gp)
1010e658:	10000326 	beq	r2,zero,1010e668 <alt_get_errno+0x24>
1010e65c:	d0a00b17 	ldw	r2,-32724(gp)
1010e660:	103ee83a 	callr	r2
1010e664:	00000106 	br	1010e66c <alt_get_errno+0x28>
1010e668:	d0a6f904 	addi	r2,gp,-25628
}
1010e66c:	e037883a 	mov	sp,fp
1010e670:	dfc00117 	ldw	ra,4(sp)
1010e674:	df000017 	ldw	fp,0(sp)
1010e678:	dec00204 	addi	sp,sp,8
1010e67c:	f800283a 	ret

1010e680 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1010e680:	deffed04 	addi	sp,sp,-76
1010e684:	dfc01215 	stw	ra,72(sp)
1010e688:	df001115 	stw	fp,68(sp)
1010e68c:	df001104 	addi	fp,sp,68
1010e690:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1010e694:	e0bfff17 	ldw	r2,-4(fp)
1010e698:	10000616 	blt	r2,zero,1010e6b4 <isatty+0x34>
1010e69c:	e0bfff17 	ldw	r2,-4(fp)
1010e6a0:	10c00324 	muli	r3,r2,12
1010e6a4:	00840474 	movhi	r2,4113
1010e6a8:	10872d04 	addi	r2,r2,7348
1010e6ac:	1885883a 	add	r2,r3,r2
1010e6b0:	00000106 	br	1010e6b8 <isatty+0x38>
1010e6b4:	0005883a 	mov	r2,zero
1010e6b8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
1010e6bc:	e0bfef17 	ldw	r2,-68(fp)
1010e6c0:	10000e26 	beq	r2,zero,1010e6fc <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1010e6c4:	e0bfef17 	ldw	r2,-68(fp)
1010e6c8:	10800017 	ldw	r2,0(r2)
1010e6cc:	10800817 	ldw	r2,32(r2)
1010e6d0:	1000021e 	bne	r2,zero,1010e6dc <isatty+0x5c>
    {
      return 1;
1010e6d4:	00800044 	movi	r2,1
1010e6d8:	00000d06 	br	1010e710 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1010e6dc:	e0bff004 	addi	r2,fp,-64
1010e6e0:	100b883a 	mov	r5,r2
1010e6e4:	e13fff17 	ldw	r4,-4(fp)
1010e6e8:	010e5940 	call	1010e594 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1010e6ec:	e0bff117 	ldw	r2,-60(fp)
1010e6f0:	10880020 	cmpeqi	r2,r2,8192
1010e6f4:	10803fcc 	andi	r2,r2,255
1010e6f8:	00000506 	br	1010e710 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1010e6fc:	010e6440 	call	1010e644 <alt_get_errno>
1010e700:	1007883a 	mov	r3,r2
1010e704:	00801444 	movi	r2,81
1010e708:	18800015 	stw	r2,0(r3)
    return 0;
1010e70c:	0005883a 	mov	r2,zero
  }
}
1010e710:	e037883a 	mov	sp,fp
1010e714:	dfc00117 	ldw	ra,4(sp)
1010e718:	df000017 	ldw	fp,0(sp)
1010e71c:	dec00204 	addi	sp,sp,8
1010e720:	f800283a 	ret

1010e724 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1010e724:	defffc04 	addi	sp,sp,-16
1010e728:	df000315 	stw	fp,12(sp)
1010e72c:	df000304 	addi	fp,sp,12
1010e730:	e13ffd15 	stw	r4,-12(fp)
1010e734:	e17ffe15 	stw	r5,-8(fp)
1010e738:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
1010e73c:	e0fffe17 	ldw	r3,-8(fp)
1010e740:	e0bffd17 	ldw	r2,-12(fp)
1010e744:	18800c26 	beq	r3,r2,1010e778 <alt_load_section+0x54>
  {
    while( to != end )
1010e748:	00000806 	br	1010e76c <alt_load_section+0x48>
    {
      *to++ = *from++;
1010e74c:	e0bffe17 	ldw	r2,-8(fp)
1010e750:	10c00104 	addi	r3,r2,4
1010e754:	e0fffe15 	stw	r3,-8(fp)
1010e758:	e0fffd17 	ldw	r3,-12(fp)
1010e75c:	19000104 	addi	r4,r3,4
1010e760:	e13ffd15 	stw	r4,-12(fp)
1010e764:	18c00017 	ldw	r3,0(r3)
1010e768:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
1010e76c:	e0fffe17 	ldw	r3,-8(fp)
1010e770:	e0bfff17 	ldw	r2,-4(fp)
1010e774:	18bff51e 	bne	r3,r2,1010e74c <__alt_data_end+0xfffee74c>
    {
      *to++ = *from++;
    }
  }
}
1010e778:	0001883a 	nop
1010e77c:	e037883a 	mov	sp,fp
1010e780:	df000017 	ldw	fp,0(sp)
1010e784:	dec00104 	addi	sp,sp,4
1010e788:	f800283a 	ret

1010e78c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1010e78c:	defffe04 	addi	sp,sp,-8
1010e790:	dfc00115 	stw	ra,4(sp)
1010e794:	df000015 	stw	fp,0(sp)
1010e798:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1010e79c:	01840474 	movhi	r6,4113
1010e7a0:	318bd104 	addi	r6,r6,12100
1010e7a4:	01440474 	movhi	r5,4113
1010e7a8:	2944fa04 	addi	r5,r5,5096
1010e7ac:	01040474 	movhi	r4,4113
1010e7b0:	210bd104 	addi	r4,r4,12100
1010e7b4:	010e7240 	call	1010e724 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1010e7b8:	01840434 	movhi	r6,4112
1010e7bc:	31809104 	addi	r6,r6,580
1010e7c0:	01440434 	movhi	r5,4112
1010e7c4:	29400804 	addi	r5,r5,32
1010e7c8:	01040434 	movhi	r4,4112
1010e7cc:	21000804 	addi	r4,r4,32
1010e7d0:	010e7240 	call	1010e724 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
1010e7d4:	01840474 	movhi	r6,4113
1010e7d8:	3184fa04 	addi	r6,r6,5096
1010e7dc:	01440474 	movhi	r5,4113
1010e7e0:	2943f404 	addi	r5,r5,4048
1010e7e4:	01040474 	movhi	r4,4113
1010e7e8:	2103f404 	addi	r4,r4,4048
1010e7ec:	010e7240 	call	1010e724 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
1010e7f0:	01100900 	call	10110090 <alt_dcache_flush_all>
  alt_icache_flush_all();
1010e7f4:	01105340 	call	10110534 <alt_icache_flush_all>
}
1010e7f8:	0001883a 	nop
1010e7fc:	e037883a 	mov	sp,fp
1010e800:	dfc00117 	ldw	ra,4(sp)
1010e804:	df000017 	ldw	fp,0(sp)
1010e808:	dec00204 	addi	sp,sp,8
1010e80c:	f800283a 	ret

1010e810 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010e810:	defffe04 	addi	sp,sp,-8
1010e814:	dfc00115 	stw	ra,4(sp)
1010e818:	df000015 	stw	fp,0(sp)
1010e81c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010e820:	d0a00b17 	ldw	r2,-32724(gp)
1010e824:	10000326 	beq	r2,zero,1010e834 <alt_get_errno+0x24>
1010e828:	d0a00b17 	ldw	r2,-32724(gp)
1010e82c:	103ee83a 	callr	r2
1010e830:	00000106 	br	1010e838 <alt_get_errno+0x28>
1010e834:	d0a6f904 	addi	r2,gp,-25628
}
1010e838:	e037883a 	mov	sp,fp
1010e83c:	dfc00117 	ldw	ra,4(sp)
1010e840:	df000017 	ldw	fp,0(sp)
1010e844:	dec00204 	addi	sp,sp,8
1010e848:	f800283a 	ret

1010e84c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1010e84c:	defff904 	addi	sp,sp,-28
1010e850:	dfc00615 	stw	ra,24(sp)
1010e854:	df000515 	stw	fp,20(sp)
1010e858:	df000504 	addi	fp,sp,20
1010e85c:	e13ffd15 	stw	r4,-12(fp)
1010e860:	e17ffe15 	stw	r5,-8(fp)
1010e864:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1010e868:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1010e86c:	e0bffd17 	ldw	r2,-12(fp)
1010e870:	10000616 	blt	r2,zero,1010e88c <lseek+0x40>
1010e874:	e0bffd17 	ldw	r2,-12(fp)
1010e878:	10c00324 	muli	r3,r2,12
1010e87c:	00840474 	movhi	r2,4113
1010e880:	10872d04 	addi	r2,r2,7348
1010e884:	1885883a 	add	r2,r3,r2
1010e888:	00000106 	br	1010e890 <lseek+0x44>
1010e88c:	0005883a 	mov	r2,zero
1010e890:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
1010e894:	e0bffc17 	ldw	r2,-16(fp)
1010e898:	10001026 	beq	r2,zero,1010e8dc <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
1010e89c:	e0bffc17 	ldw	r2,-16(fp)
1010e8a0:	10800017 	ldw	r2,0(r2)
1010e8a4:	10800717 	ldw	r2,28(r2)
1010e8a8:	10000926 	beq	r2,zero,1010e8d0 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
1010e8ac:	e0bffc17 	ldw	r2,-16(fp)
1010e8b0:	10800017 	ldw	r2,0(r2)
1010e8b4:	10800717 	ldw	r2,28(r2)
1010e8b8:	e1bfff17 	ldw	r6,-4(fp)
1010e8bc:	e17ffe17 	ldw	r5,-8(fp)
1010e8c0:	e13ffc17 	ldw	r4,-16(fp)
1010e8c4:	103ee83a 	callr	r2
1010e8c8:	e0bffb15 	stw	r2,-20(fp)
1010e8cc:	00000506 	br	1010e8e4 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1010e8d0:	00bfde84 	movi	r2,-134
1010e8d4:	e0bffb15 	stw	r2,-20(fp)
1010e8d8:	00000206 	br	1010e8e4 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
1010e8dc:	00bfebc4 	movi	r2,-81
1010e8e0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
1010e8e4:	e0bffb17 	ldw	r2,-20(fp)
1010e8e8:	1000070e 	bge	r2,zero,1010e908 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
1010e8ec:	010e8100 	call	1010e810 <alt_get_errno>
1010e8f0:	1007883a 	mov	r3,r2
1010e8f4:	e0bffb17 	ldw	r2,-20(fp)
1010e8f8:	0085c83a 	sub	r2,zero,r2
1010e8fc:	18800015 	stw	r2,0(r3)
    rc = -1;
1010e900:	00bfffc4 	movi	r2,-1
1010e904:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
1010e908:	e0bffb17 	ldw	r2,-20(fp)
}
1010e90c:	e037883a 	mov	sp,fp
1010e910:	dfc00117 	ldw	ra,4(sp)
1010e914:	df000017 	ldw	fp,0(sp)
1010e918:	dec00204 	addi	sp,sp,8
1010e91c:	f800283a 	ret

1010e920 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1010e920:	defffd04 	addi	sp,sp,-12
1010e924:	dfc00215 	stw	ra,8(sp)
1010e928:	df000115 	stw	fp,4(sp)
1010e92c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1010e930:	0009883a 	mov	r4,zero
1010e934:	010efec0 	call	1010efec <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
1010e938:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1010e93c:	010f0240 	call	1010f024 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1010e940:	01840474 	movhi	r6,4113
1010e944:	3184ed04 	addi	r6,r6,5044
1010e948:	01440474 	movhi	r5,4113
1010e94c:	2944ed04 	addi	r5,r5,5044
1010e950:	01040474 	movhi	r4,4113
1010e954:	2104ed04 	addi	r4,r4,5044
1010e958:	01108cc0 	call	101108cc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1010e95c:	01101b80 	call	101101b8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1010e960:	01040474 	movhi	r4,4113
1010e964:	21008604 	addi	r4,r4,536
1010e968:	0110c3c0 	call	10110c3c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1010e96c:	d0a70017 	ldw	r2,-25600(gp)
1010e970:	d0e70117 	ldw	r3,-25596(gp)
1010e974:	d1270217 	ldw	r4,-25592(gp)
1010e978:	200d883a 	mov	r6,r4
1010e97c:	180b883a 	mov	r5,r3
1010e980:	1009883a 	mov	r4,r2
1010e984:	01010800 	call	10101080 <main>
1010e988:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1010e98c:	01000044 	movi	r4,1
1010e990:	010e45c0 	call	1010e45c <close>
  exit (result);
1010e994:	e13fff17 	ldw	r4,-4(fp)
1010e998:	0110c500 	call	10110c50 <exit>

1010e99c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
1010e99c:	defffe04 	addi	sp,sp,-8
1010e9a0:	df000115 	stw	fp,4(sp)
1010e9a4:	df000104 	addi	fp,sp,4
1010e9a8:	e13fff15 	stw	r4,-4(fp)
}
1010e9ac:	0001883a 	nop
1010e9b0:	e037883a 	mov	sp,fp
1010e9b4:	df000017 	ldw	fp,0(sp)
1010e9b8:	dec00104 	addi	sp,sp,4
1010e9bc:	f800283a 	ret

1010e9c0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
1010e9c0:	defffe04 	addi	sp,sp,-8
1010e9c4:	df000115 	stw	fp,4(sp)
1010e9c8:	df000104 	addi	fp,sp,4
1010e9cc:	e13fff15 	stw	r4,-4(fp)
}
1010e9d0:	0001883a 	nop
1010e9d4:	e037883a 	mov	sp,fp
1010e9d8:	df000017 	ldw	fp,0(sp)
1010e9dc:	dec00104 	addi	sp,sp,4
1010e9e0:	f800283a 	ret

1010e9e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010e9e4:	defffe04 	addi	sp,sp,-8
1010e9e8:	dfc00115 	stw	ra,4(sp)
1010e9ec:	df000015 	stw	fp,0(sp)
1010e9f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010e9f4:	d0a00b17 	ldw	r2,-32724(gp)
1010e9f8:	10000326 	beq	r2,zero,1010ea08 <alt_get_errno+0x24>
1010e9fc:	d0a00b17 	ldw	r2,-32724(gp)
1010ea00:	103ee83a 	callr	r2
1010ea04:	00000106 	br	1010ea0c <alt_get_errno+0x28>
1010ea08:	d0a6f904 	addi	r2,gp,-25628
}
1010ea0c:	e037883a 	mov	sp,fp
1010ea10:	dfc00117 	ldw	ra,4(sp)
1010ea14:	df000017 	ldw	fp,0(sp)
1010ea18:	dec00204 	addi	sp,sp,8
1010ea1c:	f800283a 	ret

1010ea20 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
1010ea20:	defffd04 	addi	sp,sp,-12
1010ea24:	df000215 	stw	fp,8(sp)
1010ea28:	df000204 	addi	fp,sp,8
1010ea2c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
1010ea30:	e0bfff17 	ldw	r2,-4(fp)
1010ea34:	10800217 	ldw	r2,8(r2)
1010ea38:	10d00034 	orhi	r3,r2,16384
1010ea3c:	e0bfff17 	ldw	r2,-4(fp)
1010ea40:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1010ea44:	e03ffe15 	stw	zero,-8(fp)
1010ea48:	00001d06 	br	1010eac0 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1010ea4c:	00840474 	movhi	r2,4113
1010ea50:	10872d04 	addi	r2,r2,7348
1010ea54:	e0fffe17 	ldw	r3,-8(fp)
1010ea58:	18c00324 	muli	r3,r3,12
1010ea5c:	10c5883a 	add	r2,r2,r3
1010ea60:	10c00017 	ldw	r3,0(r2)
1010ea64:	e0bfff17 	ldw	r2,-4(fp)
1010ea68:	10800017 	ldw	r2,0(r2)
1010ea6c:	1880111e 	bne	r3,r2,1010eab4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1010ea70:	00840474 	movhi	r2,4113
1010ea74:	10872d04 	addi	r2,r2,7348
1010ea78:	e0fffe17 	ldw	r3,-8(fp)
1010ea7c:	18c00324 	muli	r3,r3,12
1010ea80:	10c5883a 	add	r2,r2,r3
1010ea84:	10800204 	addi	r2,r2,8
1010ea88:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1010ea8c:	1000090e 	bge	r2,zero,1010eab4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
1010ea90:	e0bffe17 	ldw	r2,-8(fp)
1010ea94:	10c00324 	muli	r3,r2,12
1010ea98:	00840474 	movhi	r2,4113
1010ea9c:	10872d04 	addi	r2,r2,7348
1010eaa0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1010eaa4:	e0bfff17 	ldw	r2,-4(fp)
1010eaa8:	18800226 	beq	r3,r2,1010eab4 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
1010eaac:	00bffcc4 	movi	r2,-13
1010eab0:	00000806 	br	1010ead4 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1010eab4:	e0bffe17 	ldw	r2,-8(fp)
1010eab8:	10800044 	addi	r2,r2,1
1010eabc:	e0bffe15 	stw	r2,-8(fp)
1010eac0:	d0a00a17 	ldw	r2,-32728(gp)
1010eac4:	1007883a 	mov	r3,r2
1010eac8:	e0bffe17 	ldw	r2,-8(fp)
1010eacc:	18bfdf2e 	bgeu	r3,r2,1010ea4c <__alt_data_end+0xfffeea4c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
1010ead0:	0005883a 	mov	r2,zero
}
1010ead4:	e037883a 	mov	sp,fp
1010ead8:	df000017 	ldw	fp,0(sp)
1010eadc:	dec00104 	addi	sp,sp,4
1010eae0:	f800283a 	ret

1010eae4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
1010eae4:	defff604 	addi	sp,sp,-40
1010eae8:	dfc00915 	stw	ra,36(sp)
1010eaec:	df000815 	stw	fp,32(sp)
1010eaf0:	df000804 	addi	fp,sp,32
1010eaf4:	e13ffd15 	stw	r4,-12(fp)
1010eaf8:	e17ffe15 	stw	r5,-8(fp)
1010eafc:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
1010eb00:	00bfffc4 	movi	r2,-1
1010eb04:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
1010eb08:	00bffb44 	movi	r2,-19
1010eb0c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
1010eb10:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
1010eb14:	d1600804 	addi	r5,gp,-32736
1010eb18:	e13ffd17 	ldw	r4,-12(fp)
1010eb1c:	01102780 	call	10110278 <alt_find_dev>
1010eb20:	e0bff815 	stw	r2,-32(fp)
1010eb24:	e0bff817 	ldw	r2,-32(fp)
1010eb28:	1000051e 	bne	r2,zero,1010eb40 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
1010eb2c:	e13ffd17 	ldw	r4,-12(fp)
1010eb30:	01103080 	call	10110308 <alt_find_file>
1010eb34:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
1010eb38:	00800044 	movi	r2,1
1010eb3c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
1010eb40:	e0bff817 	ldw	r2,-32(fp)
1010eb44:	10002926 	beq	r2,zero,1010ebec <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
1010eb48:	e13ff817 	ldw	r4,-32(fp)
1010eb4c:	01104900 	call	10110490 <alt_get_fd>
1010eb50:	e0bff915 	stw	r2,-28(fp)
1010eb54:	e0bff917 	ldw	r2,-28(fp)
1010eb58:	1000030e 	bge	r2,zero,1010eb68 <open+0x84>
    {
      status = index;
1010eb5c:	e0bff917 	ldw	r2,-28(fp)
1010eb60:	e0bffa15 	stw	r2,-24(fp)
1010eb64:	00002306 	br	1010ebf4 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
1010eb68:	e0bff917 	ldw	r2,-28(fp)
1010eb6c:	10c00324 	muli	r3,r2,12
1010eb70:	00840474 	movhi	r2,4113
1010eb74:	10872d04 	addi	r2,r2,7348
1010eb78:	1885883a 	add	r2,r3,r2
1010eb7c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
1010eb80:	e0fffe17 	ldw	r3,-8(fp)
1010eb84:	00900034 	movhi	r2,16384
1010eb88:	10bfffc4 	addi	r2,r2,-1
1010eb8c:	1886703a 	and	r3,r3,r2
1010eb90:	e0bffc17 	ldw	r2,-16(fp)
1010eb94:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
1010eb98:	e0bffb17 	ldw	r2,-20(fp)
1010eb9c:	1000051e 	bne	r2,zero,1010ebb4 <open+0xd0>
1010eba0:	e13ffc17 	ldw	r4,-16(fp)
1010eba4:	010ea200 	call	1010ea20 <alt_file_locked>
1010eba8:	e0bffa15 	stw	r2,-24(fp)
1010ebac:	e0bffa17 	ldw	r2,-24(fp)
1010ebb0:	10001016 	blt	r2,zero,1010ebf4 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
1010ebb4:	e0bff817 	ldw	r2,-32(fp)
1010ebb8:	10800317 	ldw	r2,12(r2)
1010ebbc:	10000826 	beq	r2,zero,1010ebe0 <open+0xfc>
1010ebc0:	e0bff817 	ldw	r2,-32(fp)
1010ebc4:	10800317 	ldw	r2,12(r2)
1010ebc8:	e1ffff17 	ldw	r7,-4(fp)
1010ebcc:	e1bffe17 	ldw	r6,-8(fp)
1010ebd0:	e17ffd17 	ldw	r5,-12(fp)
1010ebd4:	e13ffc17 	ldw	r4,-16(fp)
1010ebd8:	103ee83a 	callr	r2
1010ebdc:	00000106 	br	1010ebe4 <open+0x100>
1010ebe0:	0005883a 	mov	r2,zero
1010ebe4:	e0bffa15 	stw	r2,-24(fp)
1010ebe8:	00000206 	br	1010ebf4 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
1010ebec:	00bffb44 	movi	r2,-19
1010ebf0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
1010ebf4:	e0bffa17 	ldw	r2,-24(fp)
1010ebf8:	1000090e 	bge	r2,zero,1010ec20 <open+0x13c>
  {
    alt_release_fd (index);  
1010ebfc:	e13ff917 	ldw	r4,-28(fp)
1010ec00:	010ed700 	call	1010ed70 <alt_release_fd>
    ALT_ERRNO = -status;
1010ec04:	010e9e40 	call	1010e9e4 <alt_get_errno>
1010ec08:	1007883a 	mov	r3,r2
1010ec0c:	e0bffa17 	ldw	r2,-24(fp)
1010ec10:	0085c83a 	sub	r2,zero,r2
1010ec14:	18800015 	stw	r2,0(r3)
    return -1;
1010ec18:	00bfffc4 	movi	r2,-1
1010ec1c:	00000106 	br	1010ec24 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
1010ec20:	e0bff917 	ldw	r2,-28(fp)
}
1010ec24:	e037883a 	mov	sp,fp
1010ec28:	dfc00117 	ldw	ra,4(sp)
1010ec2c:	df000017 	ldw	fp,0(sp)
1010ec30:	dec00204 	addi	sp,sp,8
1010ec34:	f800283a 	ret

1010ec38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010ec38:	defffe04 	addi	sp,sp,-8
1010ec3c:	dfc00115 	stw	ra,4(sp)
1010ec40:	df000015 	stw	fp,0(sp)
1010ec44:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010ec48:	d0a00b17 	ldw	r2,-32724(gp)
1010ec4c:	10000326 	beq	r2,zero,1010ec5c <alt_get_errno+0x24>
1010ec50:	d0a00b17 	ldw	r2,-32724(gp)
1010ec54:	103ee83a 	callr	r2
1010ec58:	00000106 	br	1010ec60 <alt_get_errno+0x28>
1010ec5c:	d0a6f904 	addi	r2,gp,-25628
}
1010ec60:	e037883a 	mov	sp,fp
1010ec64:	dfc00117 	ldw	ra,4(sp)
1010ec68:	df000017 	ldw	fp,0(sp)
1010ec6c:	dec00204 	addi	sp,sp,8
1010ec70:	f800283a 	ret

1010ec74 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
1010ec74:	defff904 	addi	sp,sp,-28
1010ec78:	dfc00615 	stw	ra,24(sp)
1010ec7c:	df000515 	stw	fp,20(sp)
1010ec80:	df000504 	addi	fp,sp,20
1010ec84:	e13ffd15 	stw	r4,-12(fp)
1010ec88:	e17ffe15 	stw	r5,-8(fp)
1010ec8c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1010ec90:	e0bffd17 	ldw	r2,-12(fp)
1010ec94:	10000616 	blt	r2,zero,1010ecb0 <read+0x3c>
1010ec98:	e0bffd17 	ldw	r2,-12(fp)
1010ec9c:	10c00324 	muli	r3,r2,12
1010eca0:	00840474 	movhi	r2,4113
1010eca4:	10872d04 	addi	r2,r2,7348
1010eca8:	1885883a 	add	r2,r3,r2
1010ecac:	00000106 	br	1010ecb4 <read+0x40>
1010ecb0:	0005883a 	mov	r2,zero
1010ecb4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1010ecb8:	e0bffb17 	ldw	r2,-20(fp)
1010ecbc:	10002226 	beq	r2,zero,1010ed48 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1010ecc0:	e0bffb17 	ldw	r2,-20(fp)
1010ecc4:	10800217 	ldw	r2,8(r2)
1010ecc8:	108000cc 	andi	r2,r2,3
1010eccc:	10800060 	cmpeqi	r2,r2,1
1010ecd0:	1000181e 	bne	r2,zero,1010ed34 <read+0xc0>
        (fd->dev->read))
1010ecd4:	e0bffb17 	ldw	r2,-20(fp)
1010ecd8:	10800017 	ldw	r2,0(r2)
1010ecdc:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1010ece0:	10001426 	beq	r2,zero,1010ed34 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
1010ece4:	e0bffb17 	ldw	r2,-20(fp)
1010ece8:	10800017 	ldw	r2,0(r2)
1010ecec:	10800517 	ldw	r2,20(r2)
1010ecf0:	e0ffff17 	ldw	r3,-4(fp)
1010ecf4:	180d883a 	mov	r6,r3
1010ecf8:	e17ffe17 	ldw	r5,-8(fp)
1010ecfc:	e13ffb17 	ldw	r4,-20(fp)
1010ed00:	103ee83a 	callr	r2
1010ed04:	e0bffc15 	stw	r2,-16(fp)
1010ed08:	e0bffc17 	ldw	r2,-16(fp)
1010ed0c:	1000070e 	bge	r2,zero,1010ed2c <read+0xb8>
        {
          ALT_ERRNO = -rval;
1010ed10:	010ec380 	call	1010ec38 <alt_get_errno>
1010ed14:	1007883a 	mov	r3,r2
1010ed18:	e0bffc17 	ldw	r2,-16(fp)
1010ed1c:	0085c83a 	sub	r2,zero,r2
1010ed20:	18800015 	stw	r2,0(r3)
          return -1;
1010ed24:	00bfffc4 	movi	r2,-1
1010ed28:	00000c06 	br	1010ed5c <read+0xe8>
        }
        return rval;
1010ed2c:	e0bffc17 	ldw	r2,-16(fp)
1010ed30:	00000a06 	br	1010ed5c <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
1010ed34:	010ec380 	call	1010ec38 <alt_get_errno>
1010ed38:	1007883a 	mov	r3,r2
1010ed3c:	00800344 	movi	r2,13
1010ed40:	18800015 	stw	r2,0(r3)
1010ed44:	00000406 	br	1010ed58 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
1010ed48:	010ec380 	call	1010ec38 <alt_get_errno>
1010ed4c:	1007883a 	mov	r3,r2
1010ed50:	00801444 	movi	r2,81
1010ed54:	18800015 	stw	r2,0(r3)
  }
  return -1;
1010ed58:	00bfffc4 	movi	r2,-1
}
1010ed5c:	e037883a 	mov	sp,fp
1010ed60:	dfc00117 	ldw	ra,4(sp)
1010ed64:	df000017 	ldw	fp,0(sp)
1010ed68:	dec00204 	addi	sp,sp,8
1010ed6c:	f800283a 	ret

1010ed70 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1010ed70:	defffe04 	addi	sp,sp,-8
1010ed74:	df000115 	stw	fp,4(sp)
1010ed78:	df000104 	addi	fp,sp,4
1010ed7c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
1010ed80:	e0bfff17 	ldw	r2,-4(fp)
1010ed84:	108000d0 	cmplti	r2,r2,3
1010ed88:	10000d1e 	bne	r2,zero,1010edc0 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
1010ed8c:	00840474 	movhi	r2,4113
1010ed90:	10872d04 	addi	r2,r2,7348
1010ed94:	e0ffff17 	ldw	r3,-4(fp)
1010ed98:	18c00324 	muli	r3,r3,12
1010ed9c:	10c5883a 	add	r2,r2,r3
1010eda0:	10800204 	addi	r2,r2,8
1010eda4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
1010eda8:	00840474 	movhi	r2,4113
1010edac:	10872d04 	addi	r2,r2,7348
1010edb0:	e0ffff17 	ldw	r3,-4(fp)
1010edb4:	18c00324 	muli	r3,r3,12
1010edb8:	10c5883a 	add	r2,r2,r3
1010edbc:	10000015 	stw	zero,0(r2)
  }
}
1010edc0:	0001883a 	nop
1010edc4:	e037883a 	mov	sp,fp
1010edc8:	df000017 	ldw	fp,0(sp)
1010edcc:	dec00104 	addi	sp,sp,4
1010edd0:	f800283a 	ret

1010edd4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
1010edd4:	defff904 	addi	sp,sp,-28
1010edd8:	df000615 	stw	fp,24(sp)
1010eddc:	df000604 	addi	fp,sp,24
1010ede0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1010ede4:	0005303a 	rdctl	r2,status
1010ede8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1010edec:	e0fffe17 	ldw	r3,-8(fp)
1010edf0:	00bfff84 	movi	r2,-2
1010edf4:	1884703a 	and	r2,r3,r2
1010edf8:	1001703a 	wrctl	status,r2
  
  return context;
1010edfc:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
1010ee00:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
1010ee04:	d0a00c17 	ldw	r2,-32720(gp)
1010ee08:	10c000c4 	addi	r3,r2,3
1010ee0c:	00bfff04 	movi	r2,-4
1010ee10:	1884703a 	and	r2,r3,r2
1010ee14:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1010ee18:	d0e00c17 	ldw	r3,-32720(gp)
1010ee1c:	e0bfff17 	ldw	r2,-4(fp)
1010ee20:	1887883a 	add	r3,r3,r2
1010ee24:	008404b4 	movhi	r2,4114
1010ee28:	10800004 	addi	r2,r2,0
1010ee2c:	10c0062e 	bgeu	r2,r3,1010ee48 <sbrk+0x74>
1010ee30:	e0bffb17 	ldw	r2,-20(fp)
1010ee34:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1010ee38:	e0bffa17 	ldw	r2,-24(fp)
1010ee3c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
1010ee40:	00bfffc4 	movi	r2,-1
1010ee44:	00000b06 	br	1010ee74 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
1010ee48:	d0a00c17 	ldw	r2,-32720(gp)
1010ee4c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
1010ee50:	d0e00c17 	ldw	r3,-32720(gp)
1010ee54:	e0bfff17 	ldw	r2,-4(fp)
1010ee58:	1885883a 	add	r2,r3,r2
1010ee5c:	d0a00c15 	stw	r2,-32720(gp)
1010ee60:	e0bffb17 	ldw	r2,-20(fp)
1010ee64:	e0bffc15 	stw	r2,-16(fp)
1010ee68:	e0bffc17 	ldw	r2,-16(fp)
1010ee6c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
1010ee70:	e0bffd17 	ldw	r2,-12(fp)
} 
1010ee74:	e037883a 	mov	sp,fp
1010ee78:	df000017 	ldw	fp,0(sp)
1010ee7c:	dec00104 	addi	sp,sp,4
1010ee80:	f800283a 	ret

1010ee84 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010ee84:	defffe04 	addi	sp,sp,-8
1010ee88:	dfc00115 	stw	ra,4(sp)
1010ee8c:	df000015 	stw	fp,0(sp)
1010ee90:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010ee94:	d0a00b17 	ldw	r2,-32724(gp)
1010ee98:	10000326 	beq	r2,zero,1010eea8 <alt_get_errno+0x24>
1010ee9c:	d0a00b17 	ldw	r2,-32724(gp)
1010eea0:	103ee83a 	callr	r2
1010eea4:	00000106 	br	1010eeac <alt_get_errno+0x28>
1010eea8:	d0a6f904 	addi	r2,gp,-25628
}
1010eeac:	e037883a 	mov	sp,fp
1010eeb0:	dfc00117 	ldw	ra,4(sp)
1010eeb4:	df000017 	ldw	fp,0(sp)
1010eeb8:	dec00204 	addi	sp,sp,8
1010eebc:	f800283a 	ret

1010eec0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
1010eec0:	defff904 	addi	sp,sp,-28
1010eec4:	dfc00615 	stw	ra,24(sp)
1010eec8:	df000515 	stw	fp,20(sp)
1010eecc:	df000504 	addi	fp,sp,20
1010eed0:	e13ffd15 	stw	r4,-12(fp)
1010eed4:	e17ffe15 	stw	r5,-8(fp)
1010eed8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1010eedc:	e0bffd17 	ldw	r2,-12(fp)
1010eee0:	10000616 	blt	r2,zero,1010eefc <write+0x3c>
1010eee4:	e0bffd17 	ldw	r2,-12(fp)
1010eee8:	10c00324 	muli	r3,r2,12
1010eeec:	00840474 	movhi	r2,4113
1010eef0:	10872d04 	addi	r2,r2,7348
1010eef4:	1885883a 	add	r2,r3,r2
1010eef8:	00000106 	br	1010ef00 <write+0x40>
1010eefc:	0005883a 	mov	r2,zero
1010ef00:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1010ef04:	e0bffb17 	ldw	r2,-20(fp)
1010ef08:	10002126 	beq	r2,zero,1010ef90 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
1010ef0c:	e0bffb17 	ldw	r2,-20(fp)
1010ef10:	10800217 	ldw	r2,8(r2)
1010ef14:	108000cc 	andi	r2,r2,3
1010ef18:	10001826 	beq	r2,zero,1010ef7c <write+0xbc>
1010ef1c:	e0bffb17 	ldw	r2,-20(fp)
1010ef20:	10800017 	ldw	r2,0(r2)
1010ef24:	10800617 	ldw	r2,24(r2)
1010ef28:	10001426 	beq	r2,zero,1010ef7c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
1010ef2c:	e0bffb17 	ldw	r2,-20(fp)
1010ef30:	10800017 	ldw	r2,0(r2)
1010ef34:	10800617 	ldw	r2,24(r2)
1010ef38:	e0ffff17 	ldw	r3,-4(fp)
1010ef3c:	180d883a 	mov	r6,r3
1010ef40:	e17ffe17 	ldw	r5,-8(fp)
1010ef44:	e13ffb17 	ldw	r4,-20(fp)
1010ef48:	103ee83a 	callr	r2
1010ef4c:	e0bffc15 	stw	r2,-16(fp)
1010ef50:	e0bffc17 	ldw	r2,-16(fp)
1010ef54:	1000070e 	bge	r2,zero,1010ef74 <write+0xb4>
      {
        ALT_ERRNO = -rval;
1010ef58:	010ee840 	call	1010ee84 <alt_get_errno>
1010ef5c:	1007883a 	mov	r3,r2
1010ef60:	e0bffc17 	ldw	r2,-16(fp)
1010ef64:	0085c83a 	sub	r2,zero,r2
1010ef68:	18800015 	stw	r2,0(r3)
        return -1;
1010ef6c:	00bfffc4 	movi	r2,-1
1010ef70:	00000c06 	br	1010efa4 <write+0xe4>
      }
      return rval;
1010ef74:	e0bffc17 	ldw	r2,-16(fp)
1010ef78:	00000a06 	br	1010efa4 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
1010ef7c:	010ee840 	call	1010ee84 <alt_get_errno>
1010ef80:	1007883a 	mov	r3,r2
1010ef84:	00800344 	movi	r2,13
1010ef88:	18800015 	stw	r2,0(r3)
1010ef8c:	00000406 	br	1010efa0 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
1010ef90:	010ee840 	call	1010ee84 <alt_get_errno>
1010ef94:	1007883a 	mov	r3,r2
1010ef98:	00801444 	movi	r2,81
1010ef9c:	18800015 	stw	r2,0(r3)
  }
  return -1;
1010efa0:	00bfffc4 	movi	r2,-1
}
1010efa4:	e037883a 	mov	sp,fp
1010efa8:	dfc00117 	ldw	ra,4(sp)
1010efac:	df000017 	ldw	fp,0(sp)
1010efb0:	dec00204 	addi	sp,sp,8
1010efb4:	f800283a 	ret

1010efb8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
1010efb8:	defffd04 	addi	sp,sp,-12
1010efbc:	dfc00215 	stw	ra,8(sp)
1010efc0:	df000115 	stw	fp,4(sp)
1010efc4:	df000104 	addi	fp,sp,4
1010efc8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
1010efcc:	d1600804 	addi	r5,gp,-32736
1010efd0:	e13fff17 	ldw	r4,-4(fp)
1010efd4:	01101140 	call	10110114 <alt_dev_llist_insert>
}
1010efd8:	e037883a 	mov	sp,fp
1010efdc:	dfc00117 	ldw	ra,4(sp)
1010efe0:	df000017 	ldw	fp,0(sp)
1010efe4:	dec00204 	addi	sp,sp,8
1010efe8:	f800283a 	ret

1010efec <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
1010efec:	defffd04 	addi	sp,sp,-12
1010eff0:	dfc00215 	stw	ra,8(sp)
1010eff4:	df000115 	stw	fp,4(sp)
1010eff8:	df000104 	addi	fp,sp,4
1010effc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
1010f000:	0110aec0 	call	10110aec <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
1010f004:	00800044 	movi	r2,1
1010f008:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
1010f00c:	0001883a 	nop
1010f010:	e037883a 	mov	sp,fp
1010f014:	dfc00117 	ldw	ra,4(sp)
1010f018:	df000017 	ldw	fp,0(sp)
1010f01c:	dec00204 	addi	sp,sp,8
1010f020:	f800283a 	ret

1010f024 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
1010f024:	defffe04 	addi	sp,sp,-8
1010f028:	dfc00115 	stw	ra,4(sp)
1010f02c:	df000015 	stw	fp,0(sp)
1010f030:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
1010f034:	000d883a 	mov	r6,zero
1010f038:	000b883a 	mov	r5,zero
1010f03c:	01040474 	movhi	r4,4113
1010f040:	21079704 	addi	r4,r4,7772
1010f044:	010f1dc0 	call	1010f1dc <altera_avalon_jtag_uart_init>
1010f048:	01040474 	movhi	r4,4113
1010f04c:	21078d04 	addi	r4,r4,7732
1010f050:	010efb80 	call	1010efb8 <alt_dev_reg>
    ALTERA_HOSTFS_INIT ( ALTERA_HOSTFS, altera_hostfs);
1010f054:	01040474 	movhi	r4,4113
1010f058:	210ba504 	addi	r4,r4,11924
1010f05c:	01104100 	call	10110410 <alt_fs_reg>
}
1010f060:	0001883a 	nop
1010f064:	e037883a 	mov	sp,fp
1010f068:	dfc00117 	ldw	ra,4(sp)
1010f06c:	df000017 	ldw	fp,0(sp)
1010f070:	dec00204 	addi	sp,sp,8
1010f074:	f800283a 	ret

1010f078 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
1010f078:	defffa04 	addi	sp,sp,-24
1010f07c:	dfc00515 	stw	ra,20(sp)
1010f080:	df000415 	stw	fp,16(sp)
1010f084:	df000404 	addi	fp,sp,16
1010f088:	e13ffd15 	stw	r4,-12(fp)
1010f08c:	e17ffe15 	stw	r5,-8(fp)
1010f090:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1010f094:	e0bffd17 	ldw	r2,-12(fp)
1010f098:	10800017 	ldw	r2,0(r2)
1010f09c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
1010f0a0:	e0bffc17 	ldw	r2,-16(fp)
1010f0a4:	10c00a04 	addi	r3,r2,40
1010f0a8:	e0bffd17 	ldw	r2,-12(fp)
1010f0ac:	10800217 	ldw	r2,8(r2)
1010f0b0:	100f883a 	mov	r7,r2
1010f0b4:	e1bfff17 	ldw	r6,-4(fp)
1010f0b8:	e17ffe17 	ldw	r5,-8(fp)
1010f0bc:	1809883a 	mov	r4,r3
1010f0c0:	010f6a00 	call	1010f6a0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
1010f0c4:	e037883a 	mov	sp,fp
1010f0c8:	dfc00117 	ldw	ra,4(sp)
1010f0cc:	df000017 	ldw	fp,0(sp)
1010f0d0:	dec00204 	addi	sp,sp,8
1010f0d4:	f800283a 	ret

1010f0d8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
1010f0d8:	defffa04 	addi	sp,sp,-24
1010f0dc:	dfc00515 	stw	ra,20(sp)
1010f0e0:	df000415 	stw	fp,16(sp)
1010f0e4:	df000404 	addi	fp,sp,16
1010f0e8:	e13ffd15 	stw	r4,-12(fp)
1010f0ec:	e17ffe15 	stw	r5,-8(fp)
1010f0f0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1010f0f4:	e0bffd17 	ldw	r2,-12(fp)
1010f0f8:	10800017 	ldw	r2,0(r2)
1010f0fc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
1010f100:	e0bffc17 	ldw	r2,-16(fp)
1010f104:	10c00a04 	addi	r3,r2,40
1010f108:	e0bffd17 	ldw	r2,-12(fp)
1010f10c:	10800217 	ldw	r2,8(r2)
1010f110:	100f883a 	mov	r7,r2
1010f114:	e1bfff17 	ldw	r6,-4(fp)
1010f118:	e17ffe17 	ldw	r5,-8(fp)
1010f11c:	1809883a 	mov	r4,r3
1010f120:	010f8bc0 	call	1010f8bc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
1010f124:	e037883a 	mov	sp,fp
1010f128:	dfc00117 	ldw	ra,4(sp)
1010f12c:	df000017 	ldw	fp,0(sp)
1010f130:	dec00204 	addi	sp,sp,8
1010f134:	f800283a 	ret

1010f138 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
1010f138:	defffc04 	addi	sp,sp,-16
1010f13c:	dfc00315 	stw	ra,12(sp)
1010f140:	df000215 	stw	fp,8(sp)
1010f144:	df000204 	addi	fp,sp,8
1010f148:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1010f14c:	e0bfff17 	ldw	r2,-4(fp)
1010f150:	10800017 	ldw	r2,0(r2)
1010f154:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
1010f158:	e0bffe17 	ldw	r2,-8(fp)
1010f15c:	10c00a04 	addi	r3,r2,40
1010f160:	e0bfff17 	ldw	r2,-4(fp)
1010f164:	10800217 	ldw	r2,8(r2)
1010f168:	100b883a 	mov	r5,r2
1010f16c:	1809883a 	mov	r4,r3
1010f170:	010f5480 	call	1010f548 <altera_avalon_jtag_uart_close>
}
1010f174:	e037883a 	mov	sp,fp
1010f178:	dfc00117 	ldw	ra,4(sp)
1010f17c:	df000017 	ldw	fp,0(sp)
1010f180:	dec00204 	addi	sp,sp,8
1010f184:	f800283a 	ret

1010f188 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
1010f188:	defffa04 	addi	sp,sp,-24
1010f18c:	dfc00515 	stw	ra,20(sp)
1010f190:	df000415 	stw	fp,16(sp)
1010f194:	df000404 	addi	fp,sp,16
1010f198:	e13ffd15 	stw	r4,-12(fp)
1010f19c:	e17ffe15 	stw	r5,-8(fp)
1010f1a0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
1010f1a4:	e0bffd17 	ldw	r2,-12(fp)
1010f1a8:	10800017 	ldw	r2,0(r2)
1010f1ac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
1010f1b0:	e0bffc17 	ldw	r2,-16(fp)
1010f1b4:	10800a04 	addi	r2,r2,40
1010f1b8:	e1bfff17 	ldw	r6,-4(fp)
1010f1bc:	e17ffe17 	ldw	r5,-8(fp)
1010f1c0:	1009883a 	mov	r4,r2
1010f1c4:	010f5b00 	call	1010f5b0 <altera_avalon_jtag_uart_ioctl>
}
1010f1c8:	e037883a 	mov	sp,fp
1010f1cc:	dfc00117 	ldw	ra,4(sp)
1010f1d0:	df000017 	ldw	fp,0(sp)
1010f1d4:	dec00204 	addi	sp,sp,8
1010f1d8:	f800283a 	ret

1010f1dc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
1010f1dc:	defffa04 	addi	sp,sp,-24
1010f1e0:	dfc00515 	stw	ra,20(sp)
1010f1e4:	df000415 	stw	fp,16(sp)
1010f1e8:	df000404 	addi	fp,sp,16
1010f1ec:	e13ffd15 	stw	r4,-12(fp)
1010f1f0:	e17ffe15 	stw	r5,-8(fp)
1010f1f4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1010f1f8:	e0bffd17 	ldw	r2,-12(fp)
1010f1fc:	00c00044 	movi	r3,1
1010f200:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
1010f204:	e0bffd17 	ldw	r2,-12(fp)
1010f208:	10800017 	ldw	r2,0(r2)
1010f20c:	10800104 	addi	r2,r2,4
1010f210:	1007883a 	mov	r3,r2
1010f214:	e0bffd17 	ldw	r2,-12(fp)
1010f218:	10800817 	ldw	r2,32(r2)
1010f21c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
1010f220:	e0bffe17 	ldw	r2,-8(fp)
1010f224:	e0ffff17 	ldw	r3,-4(fp)
1010f228:	d8000015 	stw	zero,0(sp)
1010f22c:	e1fffd17 	ldw	r7,-12(fp)
1010f230:	01840474 	movhi	r6,4113
1010f234:	31bca704 	addi	r6,r6,-3428
1010f238:	180b883a 	mov	r5,r3
1010f23c:	1009883a 	mov	r4,r2
1010f240:	01105680 	call	10110568 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
1010f244:	e0bffd17 	ldw	r2,-12(fp)
1010f248:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
1010f24c:	e0bffd17 	ldw	r2,-12(fp)
1010f250:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
1010f254:	d0e70417 	ldw	r3,-25584(gp)
1010f258:	e1fffd17 	ldw	r7,-12(fp)
1010f25c:	01840474 	movhi	r6,4113
1010f260:	31bd2a04 	addi	r6,r6,-2904
1010f264:	180b883a 	mov	r5,r3
1010f268:	1009883a 	mov	r4,r2
1010f26c:	010ff640 	call	1010ff64 <alt_alarm_start>
1010f270:	1000040e 	bge	r2,zero,1010f284 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
1010f274:	e0fffd17 	ldw	r3,-12(fp)
1010f278:	00a00034 	movhi	r2,32768
1010f27c:	10bfffc4 	addi	r2,r2,-1
1010f280:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
1010f284:	0001883a 	nop
1010f288:	e037883a 	mov	sp,fp
1010f28c:	dfc00117 	ldw	ra,4(sp)
1010f290:	df000017 	ldw	fp,0(sp)
1010f294:	dec00204 	addi	sp,sp,8
1010f298:	f800283a 	ret

1010f29c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
1010f29c:	defff804 	addi	sp,sp,-32
1010f2a0:	df000715 	stw	fp,28(sp)
1010f2a4:	df000704 	addi	fp,sp,28
1010f2a8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
1010f2ac:	e0bfff17 	ldw	r2,-4(fp)
1010f2b0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
1010f2b4:	e0bffb17 	ldw	r2,-20(fp)
1010f2b8:	10800017 	ldw	r2,0(r2)
1010f2bc:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1010f2c0:	e0bffc17 	ldw	r2,-16(fp)
1010f2c4:	10800104 	addi	r2,r2,4
1010f2c8:	10800037 	ldwio	r2,0(r2)
1010f2cc:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
1010f2d0:	e0bffd17 	ldw	r2,-12(fp)
1010f2d4:	1080c00c 	andi	r2,r2,768
1010f2d8:	10006d26 	beq	r2,zero,1010f490 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
1010f2dc:	e0bffd17 	ldw	r2,-12(fp)
1010f2e0:	1080400c 	andi	r2,r2,256
1010f2e4:	10003526 	beq	r2,zero,1010f3bc <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
1010f2e8:	00800074 	movhi	r2,1
1010f2ec:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1010f2f0:	e0bffb17 	ldw	r2,-20(fp)
1010f2f4:	10800a17 	ldw	r2,40(r2)
1010f2f8:	10800044 	addi	r2,r2,1
1010f2fc:	1081ffcc 	andi	r2,r2,2047
1010f300:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
1010f304:	e0bffb17 	ldw	r2,-20(fp)
1010f308:	10c00b17 	ldw	r3,44(r2)
1010f30c:	e0bffe17 	ldw	r2,-8(fp)
1010f310:	18801526 	beq	r3,r2,1010f368 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
1010f314:	e0bffc17 	ldw	r2,-16(fp)
1010f318:	10800037 	ldwio	r2,0(r2)
1010f31c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
1010f320:	e0bff917 	ldw	r2,-28(fp)
1010f324:	10a0000c 	andi	r2,r2,32768
1010f328:	10001126 	beq	r2,zero,1010f370 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
1010f32c:	e0bffb17 	ldw	r2,-20(fp)
1010f330:	10800a17 	ldw	r2,40(r2)
1010f334:	e0fff917 	ldw	r3,-28(fp)
1010f338:	1809883a 	mov	r4,r3
1010f33c:	e0fffb17 	ldw	r3,-20(fp)
1010f340:	1885883a 	add	r2,r3,r2
1010f344:	10800e04 	addi	r2,r2,56
1010f348:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1010f34c:	e0bffb17 	ldw	r2,-20(fp)
1010f350:	10800a17 	ldw	r2,40(r2)
1010f354:	10800044 	addi	r2,r2,1
1010f358:	10c1ffcc 	andi	r3,r2,2047
1010f35c:	e0bffb17 	ldw	r2,-20(fp)
1010f360:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
1010f364:	003fe206 	br	1010f2f0 <__alt_data_end+0xfffef2f0>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
1010f368:	0001883a 	nop
1010f36c:	00000106 	br	1010f374 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
1010f370:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
1010f374:	e0bff917 	ldw	r2,-28(fp)
1010f378:	10bfffec 	andhi	r2,r2,65535
1010f37c:	10000f26 	beq	r2,zero,1010f3bc <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1010f380:	e0bffb17 	ldw	r2,-20(fp)
1010f384:	10c00817 	ldw	r3,32(r2)
1010f388:	00bfff84 	movi	r2,-2
1010f38c:	1886703a 	and	r3,r3,r2
1010f390:	e0bffb17 	ldw	r2,-20(fp)
1010f394:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
1010f398:	e0bffc17 	ldw	r2,-16(fp)
1010f39c:	10800104 	addi	r2,r2,4
1010f3a0:	1007883a 	mov	r3,r2
1010f3a4:	e0bffb17 	ldw	r2,-20(fp)
1010f3a8:	10800817 	ldw	r2,32(r2)
1010f3ac:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1010f3b0:	e0bffc17 	ldw	r2,-16(fp)
1010f3b4:	10800104 	addi	r2,r2,4
1010f3b8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
1010f3bc:	e0bffd17 	ldw	r2,-12(fp)
1010f3c0:	1080800c 	andi	r2,r2,512
1010f3c4:	103fbe26 	beq	r2,zero,1010f2c0 <__alt_data_end+0xfffef2c0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
1010f3c8:	e0bffd17 	ldw	r2,-12(fp)
1010f3cc:	1004d43a 	srli	r2,r2,16
1010f3d0:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
1010f3d4:	00001406 	br	1010f428 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
1010f3d8:	e0bffc17 	ldw	r2,-16(fp)
1010f3dc:	e0fffb17 	ldw	r3,-20(fp)
1010f3e0:	18c00d17 	ldw	r3,52(r3)
1010f3e4:	e13ffb17 	ldw	r4,-20(fp)
1010f3e8:	20c7883a 	add	r3,r4,r3
1010f3ec:	18c20e04 	addi	r3,r3,2104
1010f3f0:	18c00003 	ldbu	r3,0(r3)
1010f3f4:	18c03fcc 	andi	r3,r3,255
1010f3f8:	18c0201c 	xori	r3,r3,128
1010f3fc:	18ffe004 	addi	r3,r3,-128
1010f400:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1010f404:	e0bffb17 	ldw	r2,-20(fp)
1010f408:	10800d17 	ldw	r2,52(r2)
1010f40c:	10800044 	addi	r2,r2,1
1010f410:	10c1ffcc 	andi	r3,r2,2047
1010f414:	e0bffb17 	ldw	r2,-20(fp)
1010f418:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
1010f41c:	e0bffa17 	ldw	r2,-24(fp)
1010f420:	10bfffc4 	addi	r2,r2,-1
1010f424:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
1010f428:	e0bffa17 	ldw	r2,-24(fp)
1010f42c:	10000526 	beq	r2,zero,1010f444 <altera_avalon_jtag_uart_irq+0x1a8>
1010f430:	e0bffb17 	ldw	r2,-20(fp)
1010f434:	10c00d17 	ldw	r3,52(r2)
1010f438:	e0bffb17 	ldw	r2,-20(fp)
1010f43c:	10800c17 	ldw	r2,48(r2)
1010f440:	18bfe51e 	bne	r3,r2,1010f3d8 <__alt_data_end+0xfffef3d8>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
1010f444:	e0bffa17 	ldw	r2,-24(fp)
1010f448:	103f9d26 	beq	r2,zero,1010f2c0 <__alt_data_end+0xfffef2c0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1010f44c:	e0bffb17 	ldw	r2,-20(fp)
1010f450:	10c00817 	ldw	r3,32(r2)
1010f454:	00bfff44 	movi	r2,-3
1010f458:	1886703a 	and	r3,r3,r2
1010f45c:	e0bffb17 	ldw	r2,-20(fp)
1010f460:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1010f464:	e0bffb17 	ldw	r2,-20(fp)
1010f468:	10800017 	ldw	r2,0(r2)
1010f46c:	10800104 	addi	r2,r2,4
1010f470:	1007883a 	mov	r3,r2
1010f474:	e0bffb17 	ldw	r2,-20(fp)
1010f478:	10800817 	ldw	r2,32(r2)
1010f47c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1010f480:	e0bffc17 	ldw	r2,-16(fp)
1010f484:	10800104 	addi	r2,r2,4
1010f488:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
1010f48c:	003f8c06 	br	1010f2c0 <__alt_data_end+0xfffef2c0>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
1010f490:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
1010f494:	0001883a 	nop
1010f498:	e037883a 	mov	sp,fp
1010f49c:	df000017 	ldw	fp,0(sp)
1010f4a0:	dec00104 	addi	sp,sp,4
1010f4a4:	f800283a 	ret

1010f4a8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
1010f4a8:	defff804 	addi	sp,sp,-32
1010f4ac:	df000715 	stw	fp,28(sp)
1010f4b0:	df000704 	addi	fp,sp,28
1010f4b4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
1010f4b8:	e0bffb17 	ldw	r2,-20(fp)
1010f4bc:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
1010f4c0:	e0bff917 	ldw	r2,-28(fp)
1010f4c4:	10800017 	ldw	r2,0(r2)
1010f4c8:	10800104 	addi	r2,r2,4
1010f4cc:	10800037 	ldwio	r2,0(r2)
1010f4d0:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
1010f4d4:	e0bffa17 	ldw	r2,-24(fp)
1010f4d8:	1081000c 	andi	r2,r2,1024
1010f4dc:	10000b26 	beq	r2,zero,1010f50c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
1010f4e0:	e0bff917 	ldw	r2,-28(fp)
1010f4e4:	10800017 	ldw	r2,0(r2)
1010f4e8:	10800104 	addi	r2,r2,4
1010f4ec:	1007883a 	mov	r3,r2
1010f4f0:	e0bff917 	ldw	r2,-28(fp)
1010f4f4:	10800817 	ldw	r2,32(r2)
1010f4f8:	10810014 	ori	r2,r2,1024
1010f4fc:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
1010f500:	e0bff917 	ldw	r2,-28(fp)
1010f504:	10000915 	stw	zero,36(r2)
1010f508:	00000a06 	br	1010f534 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
1010f50c:	e0bff917 	ldw	r2,-28(fp)
1010f510:	10c00917 	ldw	r3,36(r2)
1010f514:	00a00034 	movhi	r2,32768
1010f518:	10bfff04 	addi	r2,r2,-4
1010f51c:	10c00536 	bltu	r2,r3,1010f534 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
1010f520:	e0bff917 	ldw	r2,-28(fp)
1010f524:	10800917 	ldw	r2,36(r2)
1010f528:	10c00044 	addi	r3,r2,1
1010f52c:	e0bff917 	ldw	r2,-28(fp)
1010f530:	10c00915 	stw	r3,36(r2)
1010f534:	d0a70417 	ldw	r2,-25584(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
1010f538:	e037883a 	mov	sp,fp
1010f53c:	df000017 	ldw	fp,0(sp)
1010f540:	dec00104 	addi	sp,sp,4
1010f544:	f800283a 	ret

1010f548 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
1010f548:	defffd04 	addi	sp,sp,-12
1010f54c:	df000215 	stw	fp,8(sp)
1010f550:	df000204 	addi	fp,sp,8
1010f554:	e13ffe15 	stw	r4,-8(fp)
1010f558:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1010f55c:	00000506 	br	1010f574 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
1010f560:	e0bfff17 	ldw	r2,-4(fp)
1010f564:	1090000c 	andi	r2,r2,16384
1010f568:	10000226 	beq	r2,zero,1010f574 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
1010f56c:	00bffd44 	movi	r2,-11
1010f570:	00000b06 	br	1010f5a0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1010f574:	e0bffe17 	ldw	r2,-8(fp)
1010f578:	10c00d17 	ldw	r3,52(r2)
1010f57c:	e0bffe17 	ldw	r2,-8(fp)
1010f580:	10800c17 	ldw	r2,48(r2)
1010f584:	18800526 	beq	r3,r2,1010f59c <altera_avalon_jtag_uart_close+0x54>
1010f588:	e0bffe17 	ldw	r2,-8(fp)
1010f58c:	10c00917 	ldw	r3,36(r2)
1010f590:	e0bffe17 	ldw	r2,-8(fp)
1010f594:	10800117 	ldw	r2,4(r2)
1010f598:	18bff136 	bltu	r3,r2,1010f560 <__alt_data_end+0xfffef560>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
1010f59c:	0005883a 	mov	r2,zero
}
1010f5a0:	e037883a 	mov	sp,fp
1010f5a4:	df000017 	ldw	fp,0(sp)
1010f5a8:	dec00104 	addi	sp,sp,4
1010f5ac:	f800283a 	ret

1010f5b0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
1010f5b0:	defffa04 	addi	sp,sp,-24
1010f5b4:	df000515 	stw	fp,20(sp)
1010f5b8:	df000504 	addi	fp,sp,20
1010f5bc:	e13ffd15 	stw	r4,-12(fp)
1010f5c0:	e17ffe15 	stw	r5,-8(fp)
1010f5c4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
1010f5c8:	00bff9c4 	movi	r2,-25
1010f5cc:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
1010f5d0:	e0bffe17 	ldw	r2,-8(fp)
1010f5d4:	10da8060 	cmpeqi	r3,r2,27137
1010f5d8:	1800031e 	bne	r3,zero,1010f5e8 <altera_avalon_jtag_uart_ioctl+0x38>
1010f5dc:	109a80a0 	cmpeqi	r2,r2,27138
1010f5e0:	1000181e 	bne	r2,zero,1010f644 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
1010f5e4:	00002906 	br	1010f68c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
1010f5e8:	e0bffd17 	ldw	r2,-12(fp)
1010f5ec:	10c00117 	ldw	r3,4(r2)
1010f5f0:	00a00034 	movhi	r2,32768
1010f5f4:	10bfffc4 	addi	r2,r2,-1
1010f5f8:	18802126 	beq	r3,r2,1010f680 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
1010f5fc:	e0bfff17 	ldw	r2,-4(fp)
1010f600:	10800017 	ldw	r2,0(r2)
1010f604:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
1010f608:	e0bffc17 	ldw	r2,-16(fp)
1010f60c:	10800090 	cmplti	r2,r2,2
1010f610:	1000061e 	bne	r2,zero,1010f62c <altera_avalon_jtag_uart_ioctl+0x7c>
1010f614:	e0fffc17 	ldw	r3,-16(fp)
1010f618:	00a00034 	movhi	r2,32768
1010f61c:	10bfffc4 	addi	r2,r2,-1
1010f620:	18800226 	beq	r3,r2,1010f62c <altera_avalon_jtag_uart_ioctl+0x7c>
1010f624:	e0bffc17 	ldw	r2,-16(fp)
1010f628:	00000206 	br	1010f634 <altera_avalon_jtag_uart_ioctl+0x84>
1010f62c:	00a00034 	movhi	r2,32768
1010f630:	10bfff84 	addi	r2,r2,-2
1010f634:	e0fffd17 	ldw	r3,-12(fp)
1010f638:	18800115 	stw	r2,4(r3)
      rc = 0;
1010f63c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1010f640:	00000f06 	br	1010f680 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
1010f644:	e0bffd17 	ldw	r2,-12(fp)
1010f648:	10c00117 	ldw	r3,4(r2)
1010f64c:	00a00034 	movhi	r2,32768
1010f650:	10bfffc4 	addi	r2,r2,-1
1010f654:	18800c26 	beq	r3,r2,1010f688 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
1010f658:	e0bffd17 	ldw	r2,-12(fp)
1010f65c:	10c00917 	ldw	r3,36(r2)
1010f660:	e0bffd17 	ldw	r2,-12(fp)
1010f664:	10800117 	ldw	r2,4(r2)
1010f668:	1885803a 	cmpltu	r2,r3,r2
1010f66c:	10c03fcc 	andi	r3,r2,255
1010f670:	e0bfff17 	ldw	r2,-4(fp)
1010f674:	10c00015 	stw	r3,0(r2)
      rc = 0;
1010f678:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1010f67c:	00000206 	br	1010f688 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
1010f680:	0001883a 	nop
1010f684:	00000106 	br	1010f68c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
1010f688:	0001883a 	nop

  default:
    break;
  }

  return rc;
1010f68c:	e0bffb17 	ldw	r2,-20(fp)
}
1010f690:	e037883a 	mov	sp,fp
1010f694:	df000017 	ldw	fp,0(sp)
1010f698:	dec00104 	addi	sp,sp,4
1010f69c:	f800283a 	ret

1010f6a0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
1010f6a0:	defff304 	addi	sp,sp,-52
1010f6a4:	dfc00c15 	stw	ra,48(sp)
1010f6a8:	df000b15 	stw	fp,44(sp)
1010f6ac:	df000b04 	addi	fp,sp,44
1010f6b0:	e13ffc15 	stw	r4,-16(fp)
1010f6b4:	e17ffd15 	stw	r5,-12(fp)
1010f6b8:	e1bffe15 	stw	r6,-8(fp)
1010f6bc:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
1010f6c0:	e0bffd17 	ldw	r2,-12(fp)
1010f6c4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1010f6c8:	00004706 	br	1010f7e8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
1010f6cc:	e0bffc17 	ldw	r2,-16(fp)
1010f6d0:	10800a17 	ldw	r2,40(r2)
1010f6d4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
1010f6d8:	e0bffc17 	ldw	r2,-16(fp)
1010f6dc:	10800b17 	ldw	r2,44(r2)
1010f6e0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
1010f6e4:	e0fff717 	ldw	r3,-36(fp)
1010f6e8:	e0bff817 	ldw	r2,-32(fp)
1010f6ec:	18800536 	bltu	r3,r2,1010f704 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
1010f6f0:	e0fff717 	ldw	r3,-36(fp)
1010f6f4:	e0bff817 	ldw	r2,-32(fp)
1010f6f8:	1885c83a 	sub	r2,r3,r2
1010f6fc:	e0bff615 	stw	r2,-40(fp)
1010f700:	00000406 	br	1010f714 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
1010f704:	00c20004 	movi	r3,2048
1010f708:	e0bff817 	ldw	r2,-32(fp)
1010f70c:	1885c83a 	sub	r2,r3,r2
1010f710:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1010f714:	e0bff617 	ldw	r2,-40(fp)
1010f718:	10001e26 	beq	r2,zero,1010f794 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
1010f71c:	e0fffe17 	ldw	r3,-8(fp)
1010f720:	e0bff617 	ldw	r2,-40(fp)
1010f724:	1880022e 	bgeu	r3,r2,1010f730 <altera_avalon_jtag_uart_read+0x90>
        n = space;
1010f728:	e0bffe17 	ldw	r2,-8(fp)
1010f72c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
1010f730:	e0bffc17 	ldw	r2,-16(fp)
1010f734:	10c00e04 	addi	r3,r2,56
1010f738:	e0bff817 	ldw	r2,-32(fp)
1010f73c:	1885883a 	add	r2,r3,r2
1010f740:	e1bff617 	ldw	r6,-40(fp)
1010f744:	100b883a 	mov	r5,r2
1010f748:	e13ff517 	ldw	r4,-44(fp)
1010f74c:	0107d000 	call	10107d00 <memcpy>
      ptr   += n;
1010f750:	e0fff517 	ldw	r3,-44(fp)
1010f754:	e0bff617 	ldw	r2,-40(fp)
1010f758:	1885883a 	add	r2,r3,r2
1010f75c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
1010f760:	e0fffe17 	ldw	r3,-8(fp)
1010f764:	e0bff617 	ldw	r2,-40(fp)
1010f768:	1885c83a 	sub	r2,r3,r2
1010f76c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1010f770:	e0fff817 	ldw	r3,-32(fp)
1010f774:	e0bff617 	ldw	r2,-40(fp)
1010f778:	1885883a 	add	r2,r3,r2
1010f77c:	10c1ffcc 	andi	r3,r2,2047
1010f780:	e0bffc17 	ldw	r2,-16(fp)
1010f784:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
1010f788:	e0bffe17 	ldw	r2,-8(fp)
1010f78c:	00bfcf16 	blt	zero,r2,1010f6cc <__alt_data_end+0xfffef6cc>
1010f790:	00000106 	br	1010f798 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
1010f794:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
1010f798:	e0fff517 	ldw	r3,-44(fp)
1010f79c:	e0bffd17 	ldw	r2,-12(fp)
1010f7a0:	1880141e 	bne	r3,r2,1010f7f4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
1010f7a4:	e0bfff17 	ldw	r2,-4(fp)
1010f7a8:	1090000c 	andi	r2,r2,16384
1010f7ac:	1000131e 	bne	r2,zero,1010f7fc <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
1010f7b0:	0001883a 	nop
1010f7b4:	e0bffc17 	ldw	r2,-16(fp)
1010f7b8:	10c00a17 	ldw	r3,40(r2)
1010f7bc:	e0bff717 	ldw	r2,-36(fp)
1010f7c0:	1880051e 	bne	r3,r2,1010f7d8 <altera_avalon_jtag_uart_read+0x138>
1010f7c4:	e0bffc17 	ldw	r2,-16(fp)
1010f7c8:	10c00917 	ldw	r3,36(r2)
1010f7cc:	e0bffc17 	ldw	r2,-16(fp)
1010f7d0:	10800117 	ldw	r2,4(r2)
1010f7d4:	18bff736 	bltu	r3,r2,1010f7b4 <__alt_data_end+0xfffef7b4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
1010f7d8:	e0bffc17 	ldw	r2,-16(fp)
1010f7dc:	10c00a17 	ldw	r3,40(r2)
1010f7e0:	e0bff717 	ldw	r2,-36(fp)
1010f7e4:	18800726 	beq	r3,r2,1010f804 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1010f7e8:	e0bffe17 	ldw	r2,-8(fp)
1010f7ec:	00bfb716 	blt	zero,r2,1010f6cc <__alt_data_end+0xfffef6cc>
1010f7f0:	00000506 	br	1010f808 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
1010f7f4:	0001883a 	nop
1010f7f8:	00000306 	br	1010f808 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
1010f7fc:	0001883a 	nop
1010f800:	00000106 	br	1010f808 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
1010f804:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
1010f808:	e0fff517 	ldw	r3,-44(fp)
1010f80c:	e0bffd17 	ldw	r2,-12(fp)
1010f810:	18801826 	beq	r3,r2,1010f874 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1010f814:	0005303a 	rdctl	r2,status
1010f818:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1010f81c:	e0fffb17 	ldw	r3,-20(fp)
1010f820:	00bfff84 	movi	r2,-2
1010f824:	1884703a 	and	r2,r3,r2
1010f828:	1001703a 	wrctl	status,r2
  
  return context;
1010f82c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
1010f830:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1010f834:	e0bffc17 	ldw	r2,-16(fp)
1010f838:	10800817 	ldw	r2,32(r2)
1010f83c:	10c00054 	ori	r3,r2,1
1010f840:	e0bffc17 	ldw	r2,-16(fp)
1010f844:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1010f848:	e0bffc17 	ldw	r2,-16(fp)
1010f84c:	10800017 	ldw	r2,0(r2)
1010f850:	10800104 	addi	r2,r2,4
1010f854:	1007883a 	mov	r3,r2
1010f858:	e0bffc17 	ldw	r2,-16(fp)
1010f85c:	10800817 	ldw	r2,32(r2)
1010f860:	18800035 	stwio	r2,0(r3)
1010f864:	e0bffa17 	ldw	r2,-24(fp)
1010f868:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1010f86c:	e0bff917 	ldw	r2,-28(fp)
1010f870:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
1010f874:	e0fff517 	ldw	r3,-44(fp)
1010f878:	e0bffd17 	ldw	r2,-12(fp)
1010f87c:	18800426 	beq	r3,r2,1010f890 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
1010f880:	e0fff517 	ldw	r3,-44(fp)
1010f884:	e0bffd17 	ldw	r2,-12(fp)
1010f888:	1885c83a 	sub	r2,r3,r2
1010f88c:	00000606 	br	1010f8a8 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
1010f890:	e0bfff17 	ldw	r2,-4(fp)
1010f894:	1090000c 	andi	r2,r2,16384
1010f898:	10000226 	beq	r2,zero,1010f8a4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
1010f89c:	00bffd44 	movi	r2,-11
1010f8a0:	00000106 	br	1010f8a8 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
1010f8a4:	00bffec4 	movi	r2,-5
}
1010f8a8:	e037883a 	mov	sp,fp
1010f8ac:	dfc00117 	ldw	ra,4(sp)
1010f8b0:	df000017 	ldw	fp,0(sp)
1010f8b4:	dec00204 	addi	sp,sp,8
1010f8b8:	f800283a 	ret

1010f8bc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
1010f8bc:	defff304 	addi	sp,sp,-52
1010f8c0:	dfc00c15 	stw	ra,48(sp)
1010f8c4:	df000b15 	stw	fp,44(sp)
1010f8c8:	df000b04 	addi	fp,sp,44
1010f8cc:	e13ffc15 	stw	r4,-16(fp)
1010f8d0:	e17ffd15 	stw	r5,-12(fp)
1010f8d4:	e1bffe15 	stw	r6,-8(fp)
1010f8d8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
1010f8dc:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
1010f8e0:	e0bffd17 	ldw	r2,-12(fp)
1010f8e4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1010f8e8:	00003706 	br	1010f9c8 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
1010f8ec:	e0bffc17 	ldw	r2,-16(fp)
1010f8f0:	10800c17 	ldw	r2,48(r2)
1010f8f4:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
1010f8f8:	e0bffc17 	ldw	r2,-16(fp)
1010f8fc:	10800d17 	ldw	r2,52(r2)
1010f900:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
1010f904:	e0fff917 	ldw	r3,-28(fp)
1010f908:	e0bff517 	ldw	r2,-44(fp)
1010f90c:	1880062e 	bgeu	r3,r2,1010f928 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
1010f910:	e0fff517 	ldw	r3,-44(fp)
1010f914:	e0bff917 	ldw	r2,-28(fp)
1010f918:	1885c83a 	sub	r2,r3,r2
1010f91c:	10bfffc4 	addi	r2,r2,-1
1010f920:	e0bff615 	stw	r2,-40(fp)
1010f924:	00000b06 	br	1010f954 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
1010f928:	e0bff517 	ldw	r2,-44(fp)
1010f92c:	10000526 	beq	r2,zero,1010f944 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
1010f930:	00c20004 	movi	r3,2048
1010f934:	e0bff917 	ldw	r2,-28(fp)
1010f938:	1885c83a 	sub	r2,r3,r2
1010f93c:	e0bff615 	stw	r2,-40(fp)
1010f940:	00000406 	br	1010f954 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
1010f944:	00c1ffc4 	movi	r3,2047
1010f948:	e0bff917 	ldw	r2,-28(fp)
1010f94c:	1885c83a 	sub	r2,r3,r2
1010f950:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1010f954:	e0bff617 	ldw	r2,-40(fp)
1010f958:	10001e26 	beq	r2,zero,1010f9d4 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
1010f95c:	e0fffe17 	ldw	r3,-8(fp)
1010f960:	e0bff617 	ldw	r2,-40(fp)
1010f964:	1880022e 	bgeu	r3,r2,1010f970 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
1010f968:	e0bffe17 	ldw	r2,-8(fp)
1010f96c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
1010f970:	e0bffc17 	ldw	r2,-16(fp)
1010f974:	10c20e04 	addi	r3,r2,2104
1010f978:	e0bff917 	ldw	r2,-28(fp)
1010f97c:	1885883a 	add	r2,r3,r2
1010f980:	e1bff617 	ldw	r6,-40(fp)
1010f984:	e17ffd17 	ldw	r5,-12(fp)
1010f988:	1009883a 	mov	r4,r2
1010f98c:	0107d000 	call	10107d00 <memcpy>
      ptr   += n;
1010f990:	e0fffd17 	ldw	r3,-12(fp)
1010f994:	e0bff617 	ldw	r2,-40(fp)
1010f998:	1885883a 	add	r2,r3,r2
1010f99c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
1010f9a0:	e0fffe17 	ldw	r3,-8(fp)
1010f9a4:	e0bff617 	ldw	r2,-40(fp)
1010f9a8:	1885c83a 	sub	r2,r3,r2
1010f9ac:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1010f9b0:	e0fff917 	ldw	r3,-28(fp)
1010f9b4:	e0bff617 	ldw	r2,-40(fp)
1010f9b8:	1885883a 	add	r2,r3,r2
1010f9bc:	10c1ffcc 	andi	r3,r2,2047
1010f9c0:	e0bffc17 	ldw	r2,-16(fp)
1010f9c4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1010f9c8:	e0bffe17 	ldw	r2,-8(fp)
1010f9cc:	00bfc716 	blt	zero,r2,1010f8ec <__alt_data_end+0xfffef8ec>
1010f9d0:	00000106 	br	1010f9d8 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
1010f9d4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1010f9d8:	0005303a 	rdctl	r2,status
1010f9dc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1010f9e0:	e0fffb17 	ldw	r3,-20(fp)
1010f9e4:	00bfff84 	movi	r2,-2
1010f9e8:	1884703a 	and	r2,r3,r2
1010f9ec:	1001703a 	wrctl	status,r2
  
  return context;
1010f9f0:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
1010f9f4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1010f9f8:	e0bffc17 	ldw	r2,-16(fp)
1010f9fc:	10800817 	ldw	r2,32(r2)
1010fa00:	10c00094 	ori	r3,r2,2
1010fa04:	e0bffc17 	ldw	r2,-16(fp)
1010fa08:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1010fa0c:	e0bffc17 	ldw	r2,-16(fp)
1010fa10:	10800017 	ldw	r2,0(r2)
1010fa14:	10800104 	addi	r2,r2,4
1010fa18:	1007883a 	mov	r3,r2
1010fa1c:	e0bffc17 	ldw	r2,-16(fp)
1010fa20:	10800817 	ldw	r2,32(r2)
1010fa24:	18800035 	stwio	r2,0(r3)
1010fa28:	e0bffa17 	ldw	r2,-24(fp)
1010fa2c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1010fa30:	e0bff817 	ldw	r2,-32(fp)
1010fa34:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
1010fa38:	e0bffe17 	ldw	r2,-8(fp)
1010fa3c:	0080100e 	bge	zero,r2,1010fa80 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
1010fa40:	e0bfff17 	ldw	r2,-4(fp)
1010fa44:	1090000c 	andi	r2,r2,16384
1010fa48:	1000101e 	bne	r2,zero,1010fa8c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
1010fa4c:	0001883a 	nop
1010fa50:	e0bffc17 	ldw	r2,-16(fp)
1010fa54:	10c00d17 	ldw	r3,52(r2)
1010fa58:	e0bff517 	ldw	r2,-44(fp)
1010fa5c:	1880051e 	bne	r3,r2,1010fa74 <altera_avalon_jtag_uart_write+0x1b8>
1010fa60:	e0bffc17 	ldw	r2,-16(fp)
1010fa64:	10c00917 	ldw	r3,36(r2)
1010fa68:	e0bffc17 	ldw	r2,-16(fp)
1010fa6c:	10800117 	ldw	r2,4(r2)
1010fa70:	18bff736 	bltu	r3,r2,1010fa50 <__alt_data_end+0xfffefa50>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
1010fa74:	e0bffc17 	ldw	r2,-16(fp)
1010fa78:	10800917 	ldw	r2,36(r2)
1010fa7c:	1000051e 	bne	r2,zero,1010fa94 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
1010fa80:	e0bffe17 	ldw	r2,-8(fp)
1010fa84:	00bfd016 	blt	zero,r2,1010f9c8 <__alt_data_end+0xfffef9c8>
1010fa88:	00000306 	br	1010fa98 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
1010fa8c:	0001883a 	nop
1010fa90:	00000106 	br	1010fa98 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
1010fa94:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
1010fa98:	e0fffd17 	ldw	r3,-12(fp)
1010fa9c:	e0bff717 	ldw	r2,-36(fp)
1010faa0:	18800426 	beq	r3,r2,1010fab4 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
1010faa4:	e0fffd17 	ldw	r3,-12(fp)
1010faa8:	e0bff717 	ldw	r2,-36(fp)
1010faac:	1885c83a 	sub	r2,r3,r2
1010fab0:	00000606 	br	1010facc <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
1010fab4:	e0bfff17 	ldw	r2,-4(fp)
1010fab8:	1090000c 	andi	r2,r2,16384
1010fabc:	10000226 	beq	r2,zero,1010fac8 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
1010fac0:	00bffd44 	movi	r2,-11
1010fac4:	00000106 	br	1010facc <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
1010fac8:	00bffec4 	movi	r2,-5
}
1010facc:	e037883a 	mov	sp,fp
1010fad0:	dfc00117 	ldw	ra,4(sp)
1010fad4:	df000017 	ldw	fp,0(sp)
1010fad8:	dec00204 	addi	sp,sp,8
1010fadc:	f800283a 	ret

1010fae0 <alt_hostfs_open>:
* alt_hostfs_open
*
* If we can't find anything return -1
*/
int alt_hostfs_open(alt_fd* fd, const char * name, int flags, int mode)
{
1010fae0:	defff404 	addi	sp,sp,-48
1010fae4:	df000b15 	stw	fp,44(sp)
1010fae8:	df000b04 	addi	fp,sp,44
1010faec:	e13ffc15 	stw	r4,-16(fp)
1010faf0:	e17ffd15 	stw	r5,-12(fp)
1010faf4:	e1bffe15 	stw	r6,-8(fp)
1010faf8:	e1ffff15 	stw	r7,-4(fp)
  static const struct HOSTCALL_INFO hcinfo = { 0x0103, "open" };

  alt_hostfs_dev* dev= (alt_hostfs_dev*)fd->dev;
1010fafc:	e0bffc17 	ldw	r2,-16(fp)
1010fb00:	10800017 	ldw	r2,0(r2)
1010fb04:	e0bff515 	stw	r2,-44(fp)
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
1010fb08:	e0bff517 	ldw	r2,-44(fp)
1010fb0c:	10800217 	ldw	r2,8(r2)
1010fb10:	e0bff615 	stw	r2,-40(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
1010fb14:	e0bff617 	ldw	r2,-40(fp)
1010fb18:	10bfffc4 	addi	r2,r2,-1
1010fb1c:	e0bffb15 	stw	r2,-20(fp)

  while (*++ptr != 0)
1010fb20:	e0bffb17 	ldw	r2,-20(fp)
1010fb24:	10800044 	addi	r2,r2,1
1010fb28:	e0bffb15 	stw	r2,-20(fp)
1010fb2c:	e0bffb17 	ldw	r2,-20(fp)
1010fb30:	10800003 	ldbu	r2,0(r2)
1010fb34:	10803fcc 	andi	r2,r2,255
1010fb38:	1080201c 	xori	r2,r2,128
1010fb3c:	10bfe004 	addi	r2,r2,-128
1010fb40:	103ff71e 	bne	r2,zero,1010fb20 <__alt_data_end+0xfffefb20>
    ;

  return ptr - string;
1010fb44:	e0fffb17 	ldw	r3,-20(fp)
1010fb48:	e0bff617 	ldw	r2,-40(fp)
1010fb4c:	1885c83a 	sub	r2,r3,r2
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
1010fb50:	10800044 	addi	r2,r2,1
1010fb54:	1007883a 	mov	r3,r2
1010fb58:	e0bffd17 	ldw	r2,-12(fp)
1010fb5c:	10c5883a 	add	r2,r2,r3
1010fb60:	e0bffd15 	stw	r2,-12(fp)

  r3 = (int)&hcinfo;
1010fb64:	d0a00d04 	addi	r2,gp,-32716
1010fb68:	1007883a 	mov	r3,r2
  r4 = (int)name;
1010fb6c:	e0bffd17 	ldw	r2,-12(fp)
1010fb70:	1009883a 	mov	r4,r2
  r5 = flags;
1010fb74:	e17ffe17 	ldw	r5,-8(fp)
  r6 = mode;
1010fb78:	e1bfff17 	ldw	r6,-4(fp)
1010fb7c:	e0bffd17 	ldw	r2,-12(fp)
1010fb80:	e0bff915 	stw	r2,-28(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
1010fb84:	e0bff917 	ldw	r2,-28(fp)
1010fb88:	10bfffc4 	addi	r2,r2,-1
1010fb8c:	e0bffa15 	stw	r2,-24(fp)

  while (*++ptr != 0)
1010fb90:	e0bffa17 	ldw	r2,-24(fp)
1010fb94:	10800044 	addi	r2,r2,1
1010fb98:	e0bffa15 	stw	r2,-24(fp)
1010fb9c:	e0bffa17 	ldw	r2,-24(fp)
1010fba0:	10800003 	ldbu	r2,0(r2)
1010fba4:	10803fcc 	andi	r2,r2,255
1010fba8:	1080201c 	xori	r2,r2,128
1010fbac:	10bfe004 	addi	r2,r2,-128
1010fbb0:	103ff71e 	bne	r2,zero,1010fb90 <__alt_data_end+0xfffefb90>
    ;

  return ptr - string;
1010fbb4:	e1fffa17 	ldw	r7,-24(fp)
1010fbb8:	e0bff917 	ldw	r2,-28(fp)
1010fbbc:	3885c83a 	sub	r2,r7,r2

  r3 = (int)&hcinfo;
  r4 = (int)name;
  r5 = flags;
  r6 = mode;
  r7 = inline_strlen(name);
1010fbc0:	100f883a 	mov	r7,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6), "r" (r7) : "memory" );
1010fbc4:	003da07a 	break	1

  handle = (void *)r2;
1010fbc8:	e0bff715 	stw	r2,-36(fp)
  error = r3;
1010fbcc:	e0fff815 	stw	r3,-32(fp)

  if (error == 0)
1010fbd0:	e0bff817 	ldw	r2,-32(fp)
1010fbd4:	1000031e 	bne	r2,zero,1010fbe4 <alt_hostfs_open+0x104>
    fd->priv = handle;
1010fbd8:	e0bffc17 	ldw	r2,-16(fp)
1010fbdc:	e0fff717 	ldw	r3,-36(fp)
1010fbe0:	10c00115 	stw	r3,4(r2)

  return -error;
1010fbe4:	e0bff817 	ldw	r2,-32(fp)
1010fbe8:	0085c83a 	sub	r2,zero,r2
}
1010fbec:	e037883a 	mov	sp,fp
1010fbf0:	df000017 	ldw	fp,0(sp)
1010fbf4:	dec00104 	addi	sp,sp,4
1010fbf8:	f800283a 	ret

1010fbfc <alt_hostfs_close>:
* alt_hostfs_close
*
* Read the file
*/
int alt_hostfs_close(alt_fd* fd)
{
1010fbfc:	defffd04 	addi	sp,sp,-12
1010fc00:	df000215 	stw	fp,8(sp)
1010fc04:	df000204 	addi	fp,sp,8
1010fc08:	e13fff15 	stw	r4,-4(fp)

  /* Input and output parameters for the hostcall */
  register int r3 asm ("r3");
  register int r4 asm ("r4");

  r3 = (int)&hcinfo;
1010fc0c:	d0a01004 	addi	r2,gp,-32704
1010fc10:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
1010fc14:	e0bfff17 	ldw	r2,-4(fp)
1010fc18:	10800117 	ldw	r2,4(r2)
1010fc1c:	1009883a 	mov	r4,r2

  __asm__ volatile("break 1" : "+r" (r3) : "r" (r4) );
1010fc20:	003da07a 	break	1

  error = r3;
1010fc24:	e0fffe15 	stw	r3,-8(fp)

  return -error;
1010fc28:	e0bffe17 	ldw	r2,-8(fp)
1010fc2c:	0085c83a 	sub	r2,zero,r2
}
1010fc30:	e037883a 	mov	sp,fp
1010fc34:	df000017 	ldw	fp,0(sp)
1010fc38:	dec00104 	addi	sp,sp,4
1010fc3c:	f800283a 	ret

1010fc40 <alt_hostfs_read>:
* alt_hostfs_read
*
* Read the file
*/
int alt_hostfs_read(alt_fd* fd, char * ptr, int len)
{
1010fc40:	defffa04 	addi	sp,sp,-24
1010fc44:	df000515 	stw	fp,20(sp)
1010fc48:	df000504 	addi	fp,sp,20
1010fc4c:	e13ffd15 	stw	r4,-12(fp)
1010fc50:	e17ffe15 	stw	r5,-8(fp)
1010fc54:	e1bfff15 	stw	r6,-4(fp)
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");


  r3 = (int)&hcinfo;
1010fc58:	d0a01304 	addi	r2,gp,-32692
1010fc5c:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
1010fc60:	e0bffd17 	ldw	r2,-12(fp)
1010fc64:	10800117 	ldw	r2,4(r2)
1010fc68:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
1010fc6c:	e0bffe17 	ldw	r2,-8(fp)
1010fc70:	100b883a 	mov	r5,r2
  r6 = len;
1010fc74:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
1010fc78:	003da07a 	break	1

  rc = r2;
1010fc7c:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
1010fc80:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
1010fc84:	e0bffc17 	ldw	r2,-16(fp)
1010fc88:	10000326 	beq	r2,zero,1010fc98 <alt_hostfs_read+0x58>
1010fc8c:	e0bffc17 	ldw	r2,-16(fp)
1010fc90:	0085c83a 	sub	r2,zero,r2
1010fc94:	00000106 	br	1010fc9c <alt_hostfs_read+0x5c>
1010fc98:	e0bffb17 	ldw	r2,-20(fp)
}
1010fc9c:	e037883a 	mov	sp,fp
1010fca0:	df000017 	ldw	fp,0(sp)
1010fca4:	dec00104 	addi	sp,sp,4
1010fca8:	f800283a 	ret

1010fcac <alt_hostfs_write>:
* alt_hostfs_write
*
* Read the file
*/
int alt_hostfs_write(alt_fd* fd, const char * ptr, int len)
{
1010fcac:	defffa04 	addi	sp,sp,-24
1010fcb0:	df000515 	stw	fp,20(sp)
1010fcb4:	df000504 	addi	fp,sp,20
1010fcb8:	e13ffd15 	stw	r4,-12(fp)
1010fcbc:	e17ffe15 	stw	r5,-8(fp)
1010fcc0:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
1010fcc4:	d0a01604 	addi	r2,gp,-32680
1010fcc8:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
1010fccc:	e0bffd17 	ldw	r2,-12(fp)
1010fcd0:	10800117 	ldw	r2,4(r2)
1010fcd4:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
1010fcd8:	e0bffe17 	ldw	r2,-8(fp)
1010fcdc:	100b883a 	mov	r5,r2
  r6 = len;
1010fce0:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
1010fce4:	003da07a 	break	1

  rc = r2;
1010fce8:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
1010fcec:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
1010fcf0:	e0bffc17 	ldw	r2,-16(fp)
1010fcf4:	10000326 	beq	r2,zero,1010fd04 <alt_hostfs_write+0x58>
1010fcf8:	e0bffc17 	ldw	r2,-16(fp)
1010fcfc:	0085c83a 	sub	r2,zero,r2
1010fd00:	00000106 	br	1010fd08 <alt_hostfs_write+0x5c>
1010fd04:	e0bffb17 	ldw	r2,-20(fp)
}
1010fd08:	e037883a 	mov	sp,fp
1010fd0c:	df000017 	ldw	fp,0(sp)
1010fd10:	dec00104 	addi	sp,sp,4
1010fd14:	f800283a 	ret

1010fd18 <alt_hostfs_seek>:
* Move around within a file
*
* returns -errno for an error or the offset within the file
*/
int alt_hostfs_seek(alt_fd* fd, int ptr, int dir)
{
1010fd18:	defffa04 	addi	sp,sp,-24
1010fd1c:	df000515 	stw	fp,20(sp)
1010fd20:	df000504 	addi	fp,sp,20
1010fd24:	e13ffd15 	stw	r4,-12(fp)
1010fd28:	e17ffe15 	stw	r5,-8(fp)
1010fd2c:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
1010fd30:	d0a01904 	addi	r2,gp,-32668
1010fd34:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
1010fd38:	e0bffd17 	ldw	r2,-12(fp)
1010fd3c:	10800117 	ldw	r2,4(r2)
1010fd40:	1009883a 	mov	r4,r2
  r5 = ptr;
1010fd44:	e17ffe17 	ldw	r5,-8(fp)
  r6 = dir;
1010fd48:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
1010fd4c:	003da07a 	break	1

  rc = r2;
1010fd50:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
1010fd54:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
1010fd58:	e0bffc17 	ldw	r2,-16(fp)
1010fd5c:	10000326 	beq	r2,zero,1010fd6c <alt_hostfs_seek+0x54>
1010fd60:	e0bffc17 	ldw	r2,-16(fp)
1010fd64:	0085c83a 	sub	r2,zero,r2
1010fd68:	00000106 	br	1010fd70 <alt_hostfs_seek+0x58>
1010fd6c:	e0bffb17 	ldw	r2,-20(fp)
}
1010fd70:	e037883a 	mov	sp,fp
1010fd74:	df000017 	ldw	fp,0(sp)
1010fd78:	dec00104 	addi	sp,sp,4
1010fd7c:	f800283a 	ret

1010fd80 <alt_hostfs_fstat>:
* at the lower address.
* We need to copy the structure and byte swap it to make it match our local
* layout of struct stat.
*/
int alt_hostfs_fstat(alt_fd* fd, struct stat* st)
{
1010fd80:	deffe904 	addi	sp,sp,-92
1010fd84:	df001615 	stw	fp,88(sp)
1010fd88:	df001604 	addi	fp,sp,88
1010fd8c:	e13ffe15 	stw	r4,-8(fp)
1010fd90:	e17fff15 	stw	r5,-4(fp)
  register int r2 asm ("r2");
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");

  r3 = (int)&hcinfo;
1010fd94:	d0a01c04 	addi	r2,gp,-32656
1010fd98:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
1010fd9c:	e0bffe17 	ldw	r2,-8(fp)
1010fda0:	10800117 	ldw	r2,4(r2)
1010fda4:	1009883a 	mov	r4,r2
  r5 = (int)&hoststat;
1010fda8:	e0bfee04 	addi	r2,fp,-72
1010fdac:	100b883a 	mov	r5,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5) : "memory" );
1010fdb0:	003da07a 	break	1

  rc = r2;
1010fdb4:	e0bfeb15 	stw	r2,-84(fp)
  error = r3;
1010fdb8:	e0ffec15 	stw	r3,-80(fp)

  if (error == 0)
1010fdbc:	e0bfec17 	ldw	r2,-80(fp)
1010fdc0:	1000621e 	bne	r2,zero,1010ff4c <alt_hostfs_fstat+0x1cc>
     * no change is required.  On a little-endian processor we need to swap
     * the bytes in each word.
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
1010fdc4:	e0bfee04 	addi	r2,fp,-72
1010fdc8:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
1010fdcc:	e0bfea17 	ldw	r2,-88(fp)
1010fdd0:	10801004 	addi	r2,r2,64
1010fdd4:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
1010fdd8:	00001606 	br	1010fe34 <alt_hostfs_fstat+0xb4>
      *ptr = ((*ptr & 0xFF000000) >> 24) |
1010fddc:	e0bfea17 	ldw	r2,-88(fp)
1010fde0:	10800017 	ldw	r2,0(r2)
1010fde4:	1006d63a 	srli	r3,r2,24
             ((*ptr & 0x00FF0000) >> 8)  |
1010fde8:	e0bfea17 	ldw	r2,-88(fp)
1010fdec:	10800017 	ldw	r2,0(r2)
1010fdf0:	10803fec 	andhi	r2,r2,255
1010fdf4:	1004d23a 	srli	r2,r2,8

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
1010fdf8:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
1010fdfc:	e0bfea17 	ldw	r2,-88(fp)
1010fe00:	10800017 	ldw	r2,0(r2)
1010fe04:	10bfc00c 	andi	r2,r2,65280
1010fe08:	1004923a 	slli	r2,r2,8
#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
1010fe0c:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
1010fe10:	e0bfea17 	ldw	r2,-88(fp)
1010fe14:	10800017 	ldw	r2,0(r2)
1010fe18:	1004963a 	slli	r2,r2,24
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
1010fe1c:	1886b03a 	or	r3,r3,r2

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
1010fe20:	e0bfea17 	ldw	r2,-88(fp)
1010fe24:	10c00015 	stw	r3,0(r2)
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
1010fe28:	e0bfea17 	ldw	r2,-88(fp)
1010fe2c:	10800104 	addi	r2,r2,4
1010fe30:	e0bfea15 	stw	r2,-88(fp)
1010fe34:	e0ffea17 	ldw	r3,-88(fp)
1010fe38:	e0bfed17 	ldw	r2,-76(fp)
1010fe3c:	18bfe736 	bltu	r3,r2,1010fddc <__alt_data_end+0xfffefddc>
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
1010fe40:	e0bfff17 	ldw	r2,-4(fp)
1010fe44:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
1010fe48:	e0bfea17 	ldw	r2,-88(fp)
1010fe4c:	10800f04 	addi	r2,r2,60
1010fe50:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
1010fe54:	00000506 	br	1010fe6c <alt_hostfs_fstat+0xec>
      *ptr = 0;
1010fe58:	e0bfea17 	ldw	r2,-88(fp)
1010fe5c:	10000015 	stw	zero,0(r2)
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
    for ( ; ptr < end ; ptr++)
1010fe60:	e0bfea17 	ldw	r2,-88(fp)
1010fe64:	10800104 	addi	r2,r2,4
1010fe68:	e0bfea15 	stw	r2,-88(fp)
1010fe6c:	e0ffea17 	ldw	r3,-88(fp)
1010fe70:	e0bfed17 	ldw	r2,-76(fp)
1010fe74:	18bff836 	bltu	r3,r2,1010fe58 <__alt_data_end+0xfffefe58>

    /* Copy the data provided by the host into our local copy, for data which
     * is provided as 64bit values by the host we just use the least
     * significant word.
     */
    st->st_dev     = hoststat.fst_dev;
1010fe78:	e0bfee17 	ldw	r2,-72(fp)
1010fe7c:	1007883a 	mov	r3,r2
1010fe80:	e0bfff17 	ldw	r2,-4(fp)
1010fe84:	10c0000d 	sth	r3,0(r2)
    st->st_ino     = hoststat.fst_ino;
1010fe88:	e0bfef17 	ldw	r2,-68(fp)
1010fe8c:	1007883a 	mov	r3,r2
1010fe90:	e0bfff17 	ldw	r2,-4(fp)
1010fe94:	10c0008d 	sth	r3,2(r2)
    st->st_mode    = hoststat.fst_mode;
1010fe98:	e0fff017 	ldw	r3,-64(fp)
1010fe9c:	e0bfff17 	ldw	r2,-4(fp)
1010fea0:	10c00115 	stw	r3,4(r2)
    st->st_nlink   = hoststat.fst_nlink;
1010fea4:	e0bff117 	ldw	r2,-60(fp)
1010fea8:	1007883a 	mov	r3,r2
1010feac:	e0bfff17 	ldw	r2,-4(fp)
1010feb0:	10c0020d 	sth	r3,8(r2)
    st->st_uid     = hoststat.fst_uid;
1010feb4:	e0bff217 	ldw	r2,-56(fp)
1010feb8:	1007883a 	mov	r3,r2
1010febc:	e0bfff17 	ldw	r2,-4(fp)
1010fec0:	10c0028d 	sth	r3,10(r2)
    st->st_gid     = hoststat.fst_gid;
1010fec4:	e0bff317 	ldw	r2,-52(fp)
1010fec8:	1007883a 	mov	r3,r2
1010fecc:	e0bfff17 	ldw	r2,-4(fp)
1010fed0:	10c0030d 	sth	r3,12(r2)
    st->st_rdev    = hoststat.fst_rdev;
1010fed4:	e0bff417 	ldw	r2,-48(fp)
1010fed8:	1007883a 	mov	r3,r2
1010fedc:	e0bfff17 	ldw	r2,-4(fp)
1010fee0:	10c0038d 	sth	r3,14(r2)
    st->st_size    = hoststat.fst_size[1];
1010fee4:	e0bff617 	ldw	r2,-40(fp)
1010fee8:	1007883a 	mov	r3,r2
1010feec:	e0bfff17 	ldw	r2,-4(fp)
1010fef0:	10c00415 	stw	r3,16(r2)

    st->st_atime   = hoststat.fst_atime;
1010fef4:	e0bffb17 	ldw	r2,-20(fp)
1010fef8:	1007883a 	mov	r3,r2
1010fefc:	e0bfff17 	ldw	r2,-4(fp)
1010ff00:	10c00515 	stw	r3,20(r2)
    st->st_mtime   = hoststat.fst_mtime;
1010ff04:	e0bffc17 	ldw	r2,-16(fp)
1010ff08:	1007883a 	mov	r3,r2
1010ff0c:	e0bfff17 	ldw	r2,-4(fp)
1010ff10:	10c00715 	stw	r3,28(r2)
    st->st_ctime   = hoststat.fst_ctime;
1010ff14:	e0bffd17 	ldw	r2,-12(fp)
1010ff18:	1007883a 	mov	r3,r2
1010ff1c:	e0bfff17 	ldw	r2,-4(fp)
1010ff20:	10c00915 	stw	r3,36(r2)

    st->st_blksize = hoststat.fst_blksize[1];
1010ff24:	e0bff817 	ldw	r2,-32(fp)
1010ff28:	1007883a 	mov	r3,r2
1010ff2c:	e0bfff17 	ldw	r2,-4(fp)
1010ff30:	10c00b15 	stw	r3,44(r2)
    st->st_blocks  = hoststat.fst_blocks[1];
1010ff34:	e0bffa17 	ldw	r2,-24(fp)
1010ff38:	1007883a 	mov	r3,r2
1010ff3c:	e0bfff17 	ldw	r2,-4(fp)
1010ff40:	10c00c15 	stw	r3,48(r2)

    return rc;
1010ff44:	e0bfeb17 	ldw	r2,-84(fp)
1010ff48:	00000206 	br	1010ff54 <alt_hostfs_fstat+0x1d4>
  }
  else
    return -error;
1010ff4c:	e0bfec17 	ldw	r2,-80(fp)
1010ff50:	0085c83a 	sub	r2,zero,r2
}
1010ff54:	e037883a 	mov	sp,fp
1010ff58:	df000017 	ldw	fp,0(sp)
1010ff5c:	dec00104 	addi	sp,sp,4
1010ff60:	f800283a 	ret

1010ff64 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
1010ff64:	defff504 	addi	sp,sp,-44
1010ff68:	df000a15 	stw	fp,40(sp)
1010ff6c:	df000a04 	addi	fp,sp,40
1010ff70:	e13ffc15 	stw	r4,-16(fp)
1010ff74:	e17ffd15 	stw	r5,-12(fp)
1010ff78:	e1bffe15 	stw	r6,-8(fp)
1010ff7c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
1010ff80:	e03ff615 	stw	zero,-40(fp)
1010ff84:	d0a70417 	ldw	r2,-25584(gp)
  
  if (alt_ticks_per_second ())
1010ff88:	10003c26 	beq	r2,zero,1011007c <alt_alarm_start+0x118>
  {
    if (alarm)
1010ff8c:	e0bffc17 	ldw	r2,-16(fp)
1010ff90:	10003826 	beq	r2,zero,10110074 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
1010ff94:	e0bffc17 	ldw	r2,-16(fp)
1010ff98:	e0fffe17 	ldw	r3,-8(fp)
1010ff9c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
1010ffa0:	e0bffc17 	ldw	r2,-16(fp)
1010ffa4:	e0ffff17 	ldw	r3,-4(fp)
1010ffa8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1010ffac:	0005303a 	rdctl	r2,status
1010ffb0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1010ffb4:	e0fff917 	ldw	r3,-28(fp)
1010ffb8:	00bfff84 	movi	r2,-2
1010ffbc:	1884703a 	and	r2,r3,r2
1010ffc0:	1001703a 	wrctl	status,r2
  
  return context;
1010ffc4:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
1010ffc8:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
1010ffcc:	d0a70517 	ldw	r2,-25580(gp)
      
      current_nticks = alt_nticks();
1010ffd0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
1010ffd4:	e0fffd17 	ldw	r3,-12(fp)
1010ffd8:	e0bff617 	ldw	r2,-40(fp)
1010ffdc:	1885883a 	add	r2,r3,r2
1010ffe0:	10c00044 	addi	r3,r2,1
1010ffe4:	e0bffc17 	ldw	r2,-16(fp)
1010ffe8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
1010ffec:	e0bffc17 	ldw	r2,-16(fp)
1010fff0:	10c00217 	ldw	r3,8(r2)
1010fff4:	e0bff617 	ldw	r2,-40(fp)
1010fff8:	1880042e 	bgeu	r3,r2,1011000c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
1010fffc:	e0bffc17 	ldw	r2,-16(fp)
10110000:	00c00044 	movi	r3,1
10110004:	10c00405 	stb	r3,16(r2)
10110008:	00000206 	br	10110014 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
1011000c:	e0bffc17 	ldw	r2,-16(fp)
10110010:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
10110014:	e0bffc17 	ldw	r2,-16(fp)
10110018:	d0e02004 	addi	r3,gp,-32640
1011001c:	e0fffa15 	stw	r3,-24(fp)
10110020:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10110024:	e0bffb17 	ldw	r2,-20(fp)
10110028:	e0fffa17 	ldw	r3,-24(fp)
1011002c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10110030:	e0bffa17 	ldw	r2,-24(fp)
10110034:	10c00017 	ldw	r3,0(r2)
10110038:	e0bffb17 	ldw	r2,-20(fp)
1011003c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10110040:	e0bffa17 	ldw	r2,-24(fp)
10110044:	10800017 	ldw	r2,0(r2)
10110048:	e0fffb17 	ldw	r3,-20(fp)
1011004c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10110050:	e0bffa17 	ldw	r2,-24(fp)
10110054:	e0fffb17 	ldw	r3,-20(fp)
10110058:	10c00015 	stw	r3,0(r2)
1011005c:	e0bff817 	ldw	r2,-32(fp)
10110060:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10110064:	e0bff717 	ldw	r2,-36(fp)
10110068:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
1011006c:	0005883a 	mov	r2,zero
10110070:	00000306 	br	10110080 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
10110074:	00bffa84 	movi	r2,-22
10110078:	00000106 	br	10110080 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
1011007c:	00bfde84 	movi	r2,-134
  }
}
10110080:	e037883a 	mov	sp,fp
10110084:	df000017 	ldw	fp,0(sp)
10110088:	dec00104 	addi	sp,sp,4
1011008c:	f800283a 	ret

10110090 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
10110090:	defffe04 	addi	sp,sp,-8
10110094:	df000115 	stw	fp,4(sp)
10110098:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
1011009c:	e03fff15 	stw	zero,-4(fp)
101100a0:	00000506 	br	101100b8 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
101100a4:	e0bfff17 	ldw	r2,-4(fp)
101100a8:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
101100ac:	e0bfff17 	ldw	r2,-4(fp)
101100b0:	10800804 	addi	r2,r2,32
101100b4:	e0bfff15 	stw	r2,-4(fp)
101100b8:	e0bfff17 	ldw	r2,-4(fp)
101100bc:	10820030 	cmpltui	r2,r2,2048
101100c0:	103ff81e 	bne	r2,zero,101100a4 <__alt_data_end+0xffff00a4>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
101100c4:	0001883a 	nop
101100c8:	e037883a 	mov	sp,fp
101100cc:	df000017 	ldw	fp,0(sp)
101100d0:	dec00104 	addi	sp,sp,4
101100d4:	f800283a 	ret

101100d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
101100d8:	defffe04 	addi	sp,sp,-8
101100dc:	dfc00115 	stw	ra,4(sp)
101100e0:	df000015 	stw	fp,0(sp)
101100e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
101100e8:	d0a00b17 	ldw	r2,-32724(gp)
101100ec:	10000326 	beq	r2,zero,101100fc <alt_get_errno+0x24>
101100f0:	d0a00b17 	ldw	r2,-32724(gp)
101100f4:	103ee83a 	callr	r2
101100f8:	00000106 	br	10110100 <alt_get_errno+0x28>
101100fc:	d0a6f904 	addi	r2,gp,-25628
}
10110100:	e037883a 	mov	sp,fp
10110104:	dfc00117 	ldw	ra,4(sp)
10110108:	df000017 	ldw	fp,0(sp)
1011010c:	dec00204 	addi	sp,sp,8
10110110:	f800283a 	ret

10110114 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
10110114:	defffa04 	addi	sp,sp,-24
10110118:	dfc00515 	stw	ra,20(sp)
1011011c:	df000415 	stw	fp,16(sp)
10110120:	df000404 	addi	fp,sp,16
10110124:	e13ffe15 	stw	r4,-8(fp)
10110128:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
1011012c:	e0bffe17 	ldw	r2,-8(fp)
10110130:	10000326 	beq	r2,zero,10110140 <alt_dev_llist_insert+0x2c>
10110134:	e0bffe17 	ldw	r2,-8(fp)
10110138:	10800217 	ldw	r2,8(r2)
1011013c:	1000061e 	bne	r2,zero,10110158 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
10110140:	01100d80 	call	101100d8 <alt_get_errno>
10110144:	1007883a 	mov	r3,r2
10110148:	00800584 	movi	r2,22
1011014c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
10110150:	00bffa84 	movi	r2,-22
10110154:	00001306 	br	101101a4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
10110158:	e0bffe17 	ldw	r2,-8(fp)
1011015c:	e0ffff17 	ldw	r3,-4(fp)
10110160:	e0fffc15 	stw	r3,-16(fp)
10110164:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10110168:	e0bffd17 	ldw	r2,-12(fp)
1011016c:	e0fffc17 	ldw	r3,-16(fp)
10110170:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10110174:	e0bffc17 	ldw	r2,-16(fp)
10110178:	10c00017 	ldw	r3,0(r2)
1011017c:	e0bffd17 	ldw	r2,-12(fp)
10110180:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10110184:	e0bffc17 	ldw	r2,-16(fp)
10110188:	10800017 	ldw	r2,0(r2)
1011018c:	e0fffd17 	ldw	r3,-12(fp)
10110190:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10110194:	e0bffc17 	ldw	r2,-16(fp)
10110198:	e0fffd17 	ldw	r3,-12(fp)
1011019c:	10c00015 	stw	r3,0(r2)

  return 0;  
101101a0:	0005883a 	mov	r2,zero
}
101101a4:	e037883a 	mov	sp,fp
101101a8:	dfc00117 	ldw	ra,4(sp)
101101ac:	df000017 	ldw	fp,0(sp)
101101b0:	dec00204 	addi	sp,sp,8
101101b4:	f800283a 	ret

101101b8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
101101b8:	defffd04 	addi	sp,sp,-12
101101bc:	dfc00215 	stw	ra,8(sp)
101101c0:	df000115 	stw	fp,4(sp)
101101c4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
101101c8:	00840474 	movhi	r2,4113
101101cc:	1083f304 	addi	r2,r2,4044
101101d0:	e0bfff15 	stw	r2,-4(fp)
101101d4:	00000606 	br	101101f0 <_do_ctors+0x38>
        (*ctor) (); 
101101d8:	e0bfff17 	ldw	r2,-4(fp)
101101dc:	10800017 	ldw	r2,0(r2)
101101e0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
101101e4:	e0bfff17 	ldw	r2,-4(fp)
101101e8:	10bfff04 	addi	r2,r2,-4
101101ec:	e0bfff15 	stw	r2,-4(fp)
101101f0:	e0ffff17 	ldw	r3,-4(fp)
101101f4:	00840474 	movhi	r2,4113
101101f8:	1083f404 	addi	r2,r2,4048
101101fc:	18bff62e 	bgeu	r3,r2,101101d8 <__alt_data_end+0xffff01d8>
        (*ctor) (); 
}
10110200:	0001883a 	nop
10110204:	e037883a 	mov	sp,fp
10110208:	dfc00117 	ldw	ra,4(sp)
1011020c:	df000017 	ldw	fp,0(sp)
10110210:	dec00204 	addi	sp,sp,8
10110214:	f800283a 	ret

10110218 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
10110218:	defffd04 	addi	sp,sp,-12
1011021c:	dfc00215 	stw	ra,8(sp)
10110220:	df000115 	stw	fp,4(sp)
10110224:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10110228:	00840474 	movhi	r2,4113
1011022c:	1083f304 	addi	r2,r2,4044
10110230:	e0bfff15 	stw	r2,-4(fp)
10110234:	00000606 	br	10110250 <_do_dtors+0x38>
        (*dtor) (); 
10110238:	e0bfff17 	ldw	r2,-4(fp)
1011023c:	10800017 	ldw	r2,0(r2)
10110240:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10110244:	e0bfff17 	ldw	r2,-4(fp)
10110248:	10bfff04 	addi	r2,r2,-4
1011024c:	e0bfff15 	stw	r2,-4(fp)
10110250:	e0ffff17 	ldw	r3,-4(fp)
10110254:	00840474 	movhi	r2,4113
10110258:	1083f404 	addi	r2,r2,4048
1011025c:	18bff62e 	bgeu	r3,r2,10110238 <__alt_data_end+0xffff0238>
        (*dtor) (); 
}
10110260:	0001883a 	nop
10110264:	e037883a 	mov	sp,fp
10110268:	dfc00117 	ldw	ra,4(sp)
1011026c:	df000017 	ldw	fp,0(sp)
10110270:	dec00204 	addi	sp,sp,8
10110274:	f800283a 	ret

10110278 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10110278:	defffa04 	addi	sp,sp,-24
1011027c:	dfc00515 	stw	ra,20(sp)
10110280:	df000415 	stw	fp,16(sp)
10110284:	df000404 	addi	fp,sp,16
10110288:	e13ffe15 	stw	r4,-8(fp)
1011028c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
10110290:	e0bfff17 	ldw	r2,-4(fp)
10110294:	10800017 	ldw	r2,0(r2)
10110298:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
1011029c:	e13ffe17 	ldw	r4,-8(fp)
101102a0:	010372c0 	call	1010372c <strlen>
101102a4:	10800044 	addi	r2,r2,1
101102a8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
101102ac:	00000d06 	br	101102e4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
101102b0:	e0bffc17 	ldw	r2,-16(fp)
101102b4:	10800217 	ldw	r2,8(r2)
101102b8:	e0fffd17 	ldw	r3,-12(fp)
101102bc:	180d883a 	mov	r6,r3
101102c0:	e17ffe17 	ldw	r5,-8(fp)
101102c4:	1009883a 	mov	r4,r2
101102c8:	0110c880 	call	10110c88 <memcmp>
101102cc:	1000021e 	bne	r2,zero,101102d8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
101102d0:	e0bffc17 	ldw	r2,-16(fp)
101102d4:	00000706 	br	101102f4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
101102d8:	e0bffc17 	ldw	r2,-16(fp)
101102dc:	10800017 	ldw	r2,0(r2)
101102e0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
101102e4:	e0fffc17 	ldw	r3,-16(fp)
101102e8:	e0bfff17 	ldw	r2,-4(fp)
101102ec:	18bff01e 	bne	r3,r2,101102b0 <__alt_data_end+0xffff02b0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
101102f0:	0005883a 	mov	r2,zero
}
101102f4:	e037883a 	mov	sp,fp
101102f8:	dfc00117 	ldw	ra,4(sp)
101102fc:	df000017 	ldw	fp,0(sp)
10110300:	dec00204 	addi	sp,sp,8
10110304:	f800283a 	ret

10110308 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10110308:	defffb04 	addi	sp,sp,-20
1011030c:	dfc00415 	stw	ra,16(sp)
10110310:	df000315 	stw	fp,12(sp)
10110314:	df000304 	addi	fp,sp,12
10110318:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
1011031c:	d0a00617 	ldw	r2,-32744(gp)
10110320:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10110324:	00003106 	br	101103ec <alt_find_file+0xe4>
  {
    len = strlen(next->name);
10110328:	e0bffd17 	ldw	r2,-12(fp)
1011032c:	10800217 	ldw	r2,8(r2)
10110330:	1009883a 	mov	r4,r2
10110334:	010372c0 	call	1010372c <strlen>
10110338:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
1011033c:	e0bffd17 	ldw	r2,-12(fp)
10110340:	10c00217 	ldw	r3,8(r2)
10110344:	e0bffe17 	ldw	r2,-8(fp)
10110348:	10bfffc4 	addi	r2,r2,-1
1011034c:	1885883a 	add	r2,r3,r2
10110350:	10800003 	ldbu	r2,0(r2)
10110354:	10803fcc 	andi	r2,r2,255
10110358:	1080201c 	xori	r2,r2,128
1011035c:	10bfe004 	addi	r2,r2,-128
10110360:	10800bd8 	cmpnei	r2,r2,47
10110364:	1000031e 	bne	r2,zero,10110374 <alt_find_file+0x6c>
    {
      len -= 1;
10110368:	e0bffe17 	ldw	r2,-8(fp)
1011036c:	10bfffc4 	addi	r2,r2,-1
10110370:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10110374:	e0bffe17 	ldw	r2,-8(fp)
10110378:	e0ffff17 	ldw	r3,-4(fp)
1011037c:	1885883a 	add	r2,r3,r2
10110380:	10800003 	ldbu	r2,0(r2)
10110384:	10803fcc 	andi	r2,r2,255
10110388:	1080201c 	xori	r2,r2,128
1011038c:	10bfe004 	addi	r2,r2,-128
10110390:	10800be0 	cmpeqi	r2,r2,47
10110394:	1000081e 	bne	r2,zero,101103b8 <alt_find_file+0xb0>
10110398:	e0bffe17 	ldw	r2,-8(fp)
1011039c:	e0ffff17 	ldw	r3,-4(fp)
101103a0:	1885883a 	add	r2,r3,r2
101103a4:	10800003 	ldbu	r2,0(r2)
101103a8:	10803fcc 	andi	r2,r2,255
101103ac:	1080201c 	xori	r2,r2,128
101103b0:	10bfe004 	addi	r2,r2,-128
101103b4:	10000a1e 	bne	r2,zero,101103e0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
101103b8:	e0bffd17 	ldw	r2,-12(fp)
101103bc:	10800217 	ldw	r2,8(r2)
101103c0:	e0fffe17 	ldw	r3,-8(fp)
101103c4:	180d883a 	mov	r6,r3
101103c8:	e17fff17 	ldw	r5,-4(fp)
101103cc:	1009883a 	mov	r4,r2
101103d0:	0110c880 	call	10110c88 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
101103d4:	1000021e 	bne	r2,zero,101103e0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
101103d8:	e0bffd17 	ldw	r2,-12(fp)
101103dc:	00000706 	br	101103fc <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
101103e0:	e0bffd17 	ldw	r2,-12(fp)
101103e4:	10800017 	ldw	r2,0(r2)
101103e8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
101103ec:	e0fffd17 	ldw	r3,-12(fp)
101103f0:	d0a00604 	addi	r2,gp,-32744
101103f4:	18bfcc1e 	bne	r3,r2,10110328 <__alt_data_end+0xffff0328>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
101103f8:	0005883a 	mov	r2,zero
}
101103fc:	e037883a 	mov	sp,fp
10110400:	dfc00117 	ldw	ra,4(sp)
10110404:	df000017 	ldw	fp,0(sp)
10110408:	dec00204 	addi	sp,sp,8
1011040c:	f800283a 	ret

10110410 <alt_fs_reg>:
 * A return value of zero indicates success. A negative return value indicates
 * failure. 
 */
 
int alt_fs_reg (alt_dev* dev)
{
10110410:	defffc04 	addi	sp,sp,-16
10110414:	df000315 	stw	fp,12(sp)
10110418:	df000304 	addi	fp,sp,12
1011041c:	e13fff15 	stw	r4,-4(fp)
  /*
   * check that the device has a name.
   */

  if (!dev->name)
10110420:	e0bfff17 	ldw	r2,-4(fp)
10110424:	10800217 	ldw	r2,8(r2)
10110428:	1000021e 	bne	r2,zero,10110434 <alt_fs_reg+0x24>
  {
    return -ENODEV;
1011042c:	00bffb44 	movi	r2,-19
10110430:	00001306 	br	10110480 <alt_fs_reg+0x70>
  
  /*
   * register the file system.
   */

  alt_llist_insert(&alt_fs_list, &dev->llist);
10110434:	e0bfff17 	ldw	r2,-4(fp)
10110438:	d0e00604 	addi	r3,gp,-32744
1011043c:	e0fffd15 	stw	r3,-12(fp)
10110440:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10110444:	e0bffe17 	ldw	r2,-8(fp)
10110448:	e0fffd17 	ldw	r3,-12(fp)
1011044c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10110450:	e0bffd17 	ldw	r2,-12(fp)
10110454:	10c00017 	ldw	r3,0(r2)
10110458:	e0bffe17 	ldw	r2,-8(fp)
1011045c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10110460:	e0bffd17 	ldw	r2,-12(fp)
10110464:	10800017 	ldw	r2,0(r2)
10110468:	e0fffe17 	ldw	r3,-8(fp)
1011046c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10110470:	e0bffd17 	ldw	r2,-12(fp)
10110474:	e0fffe17 	ldw	r3,-8(fp)
10110478:	10c00015 	stw	r3,0(r2)

  return 0;
1011047c:	0005883a 	mov	r2,zero
} 
10110480:	e037883a 	mov	sp,fp
10110484:	df000017 	ldw	fp,0(sp)
10110488:	dec00104 	addi	sp,sp,4
1011048c:	f800283a 	ret

10110490 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10110490:	defffc04 	addi	sp,sp,-16
10110494:	df000315 	stw	fp,12(sp)
10110498:	df000304 	addi	fp,sp,12
1011049c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
101104a0:	00bffa04 	movi	r2,-24
101104a4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
101104a8:	e03ffd15 	stw	zero,-12(fp)
101104ac:	00001906 	br	10110514 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
101104b0:	00840474 	movhi	r2,4113
101104b4:	10872d04 	addi	r2,r2,7348
101104b8:	e0fffd17 	ldw	r3,-12(fp)
101104bc:	18c00324 	muli	r3,r3,12
101104c0:	10c5883a 	add	r2,r2,r3
101104c4:	10800017 	ldw	r2,0(r2)
101104c8:	10000f1e 	bne	r2,zero,10110508 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
101104cc:	00840474 	movhi	r2,4113
101104d0:	10872d04 	addi	r2,r2,7348
101104d4:	e0fffd17 	ldw	r3,-12(fp)
101104d8:	18c00324 	muli	r3,r3,12
101104dc:	10c5883a 	add	r2,r2,r3
101104e0:	e0ffff17 	ldw	r3,-4(fp)
101104e4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
101104e8:	d0e00a17 	ldw	r3,-32728(gp)
101104ec:	e0bffd17 	ldw	r2,-12(fp)
101104f0:	1880020e 	bge	r3,r2,101104fc <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
101104f4:	e0bffd17 	ldw	r2,-12(fp)
101104f8:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
101104fc:	e0bffd17 	ldw	r2,-12(fp)
10110500:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
10110504:	00000606 	br	10110520 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10110508:	e0bffd17 	ldw	r2,-12(fp)
1011050c:	10800044 	addi	r2,r2,1
10110510:	e0bffd15 	stw	r2,-12(fp)
10110514:	e0bffd17 	ldw	r2,-12(fp)
10110518:	10800810 	cmplti	r2,r2,32
1011051c:	103fe41e 	bne	r2,zero,101104b0 <__alt_data_end+0xffff04b0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10110520:	e0bffe17 	ldw	r2,-8(fp)
}
10110524:	e037883a 	mov	sp,fp
10110528:	df000017 	ldw	fp,0(sp)
1011052c:	dec00104 	addi	sp,sp,4
10110530:	f800283a 	ret

10110534 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10110534:	defffe04 	addi	sp,sp,-8
10110538:	dfc00115 	stw	ra,4(sp)
1011053c:	df000015 	stw	fp,0(sp)
10110540:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
10110544:	01440004 	movi	r5,4096
10110548:	0009883a 	mov	r4,zero
1011054c:	0110b100 	call	10110b10 <alt_icache_flush>
#endif
}
10110550:	0001883a 	nop
10110554:	e037883a 	mov	sp,fp
10110558:	dfc00117 	ldw	ra,4(sp)
1011055c:	df000017 	ldw	fp,0(sp)
10110560:	dec00204 	addi	sp,sp,8
10110564:	f800283a 	ret

10110568 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10110568:	defff904 	addi	sp,sp,-28
1011056c:	dfc00615 	stw	ra,24(sp)
10110570:	df000515 	stw	fp,20(sp)
10110574:	df000504 	addi	fp,sp,20
10110578:	e13ffc15 	stw	r4,-16(fp)
1011057c:	e17ffd15 	stw	r5,-12(fp)
10110580:	e1bffe15 	stw	r6,-8(fp)
10110584:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
10110588:	e0800217 	ldw	r2,8(fp)
1011058c:	d8800015 	stw	r2,0(sp)
10110590:	e1ffff17 	ldw	r7,-4(fp)
10110594:	e1bffe17 	ldw	r6,-8(fp)
10110598:	e17ffd17 	ldw	r5,-12(fp)
1011059c:	e13ffc17 	ldw	r4,-16(fp)
101105a0:	01107180 	call	10110718 <alt_iic_isr_register>
}  
101105a4:	e037883a 	mov	sp,fp
101105a8:	dfc00117 	ldw	ra,4(sp)
101105ac:	df000017 	ldw	fp,0(sp)
101105b0:	dec00204 	addi	sp,sp,8
101105b4:	f800283a 	ret

101105b8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
101105b8:	defff904 	addi	sp,sp,-28
101105bc:	df000615 	stw	fp,24(sp)
101105c0:	df000604 	addi	fp,sp,24
101105c4:	e13ffe15 	stw	r4,-8(fp)
101105c8:	e17fff15 	stw	r5,-4(fp)
101105cc:	e0bfff17 	ldw	r2,-4(fp)
101105d0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
101105d4:	0005303a 	rdctl	r2,status
101105d8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
101105dc:	e0fffb17 	ldw	r3,-20(fp)
101105e0:	00bfff84 	movi	r2,-2
101105e4:	1884703a 	and	r2,r3,r2
101105e8:	1001703a 	wrctl	status,r2
  
  return context;
101105ec:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
101105f0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
101105f4:	00c00044 	movi	r3,1
101105f8:	e0bffa17 	ldw	r2,-24(fp)
101105fc:	1884983a 	sll	r2,r3,r2
10110600:	1007883a 	mov	r3,r2
10110604:	d0a70317 	ldw	r2,-25588(gp)
10110608:	1884b03a 	or	r2,r3,r2
1011060c:	d0a70315 	stw	r2,-25588(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10110610:	d0a70317 	ldw	r2,-25588(gp)
10110614:	100170fa 	wrctl	ienable,r2
10110618:	e0bffc17 	ldw	r2,-16(fp)
1011061c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10110620:	e0bffd17 	ldw	r2,-12(fp)
10110624:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10110628:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
1011062c:	0001883a 	nop
}
10110630:	e037883a 	mov	sp,fp
10110634:	df000017 	ldw	fp,0(sp)
10110638:	dec00104 	addi	sp,sp,4
1011063c:	f800283a 	ret

10110640 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
10110640:	defff904 	addi	sp,sp,-28
10110644:	df000615 	stw	fp,24(sp)
10110648:	df000604 	addi	fp,sp,24
1011064c:	e13ffe15 	stw	r4,-8(fp)
10110650:	e17fff15 	stw	r5,-4(fp)
10110654:	e0bfff17 	ldw	r2,-4(fp)
10110658:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1011065c:	0005303a 	rdctl	r2,status
10110660:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10110664:	e0fffb17 	ldw	r3,-20(fp)
10110668:	00bfff84 	movi	r2,-2
1011066c:	1884703a 	and	r2,r3,r2
10110670:	1001703a 	wrctl	status,r2
  
  return context;
10110674:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10110678:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
1011067c:	00c00044 	movi	r3,1
10110680:	e0bffa17 	ldw	r2,-24(fp)
10110684:	1884983a 	sll	r2,r3,r2
10110688:	0084303a 	nor	r2,zero,r2
1011068c:	1007883a 	mov	r3,r2
10110690:	d0a70317 	ldw	r2,-25588(gp)
10110694:	1884703a 	and	r2,r3,r2
10110698:	d0a70315 	stw	r2,-25588(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1011069c:	d0a70317 	ldw	r2,-25588(gp)
101106a0:	100170fa 	wrctl	ienable,r2
101106a4:	e0bffc17 	ldw	r2,-16(fp)
101106a8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
101106ac:	e0bffd17 	ldw	r2,-12(fp)
101106b0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
101106b4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
101106b8:	0001883a 	nop
}
101106bc:	e037883a 	mov	sp,fp
101106c0:	df000017 	ldw	fp,0(sp)
101106c4:	dec00104 	addi	sp,sp,4
101106c8:	f800283a 	ret

101106cc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
101106cc:	defffc04 	addi	sp,sp,-16
101106d0:	df000315 	stw	fp,12(sp)
101106d4:	df000304 	addi	fp,sp,12
101106d8:	e13ffe15 	stw	r4,-8(fp)
101106dc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
101106e0:	000530fa 	rdctl	r2,ienable
101106e4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
101106e8:	00c00044 	movi	r3,1
101106ec:	e0bfff17 	ldw	r2,-4(fp)
101106f0:	1884983a 	sll	r2,r3,r2
101106f4:	1007883a 	mov	r3,r2
101106f8:	e0bffd17 	ldw	r2,-12(fp)
101106fc:	1884703a 	and	r2,r3,r2
10110700:	1004c03a 	cmpne	r2,r2,zero
10110704:	10803fcc 	andi	r2,r2,255
}
10110708:	e037883a 	mov	sp,fp
1011070c:	df000017 	ldw	fp,0(sp)
10110710:	dec00104 	addi	sp,sp,4
10110714:	f800283a 	ret

10110718 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10110718:	defff504 	addi	sp,sp,-44
1011071c:	dfc00a15 	stw	ra,40(sp)
10110720:	df000915 	stw	fp,36(sp)
10110724:	df000904 	addi	fp,sp,36
10110728:	e13ffc15 	stw	r4,-16(fp)
1011072c:	e17ffd15 	stw	r5,-12(fp)
10110730:	e1bffe15 	stw	r6,-8(fp)
10110734:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
10110738:	00bffa84 	movi	r2,-22
1011073c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10110740:	e0bffd17 	ldw	r2,-12(fp)
10110744:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
10110748:	e0bff817 	ldw	r2,-32(fp)
1011074c:	10800808 	cmpgei	r2,r2,32
10110750:	1000271e 	bne	r2,zero,101107f0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10110754:	0005303a 	rdctl	r2,status
10110758:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1011075c:	e0fffb17 	ldw	r3,-20(fp)
10110760:	00bfff84 	movi	r2,-2
10110764:	1884703a 	and	r2,r3,r2
10110768:	1001703a 	wrctl	status,r2
  
  return context;
1011076c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10110770:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
10110774:	00840474 	movhi	r2,4113
10110778:	1092c004 	addi	r2,r2,19200
1011077c:	e0fff817 	ldw	r3,-32(fp)
10110780:	180690fa 	slli	r3,r3,3
10110784:	10c5883a 	add	r2,r2,r3
10110788:	e0fffe17 	ldw	r3,-8(fp)
1011078c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
10110790:	00840474 	movhi	r2,4113
10110794:	1092c004 	addi	r2,r2,19200
10110798:	e0fff817 	ldw	r3,-32(fp)
1011079c:	180690fa 	slli	r3,r3,3
101107a0:	10c5883a 	add	r2,r2,r3
101107a4:	10800104 	addi	r2,r2,4
101107a8:	e0ffff17 	ldw	r3,-4(fp)
101107ac:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
101107b0:	e0bffe17 	ldw	r2,-8(fp)
101107b4:	10000526 	beq	r2,zero,101107cc <alt_iic_isr_register+0xb4>
101107b8:	e0bff817 	ldw	r2,-32(fp)
101107bc:	100b883a 	mov	r5,r2
101107c0:	e13ffc17 	ldw	r4,-16(fp)
101107c4:	01105b80 	call	101105b8 <alt_ic_irq_enable>
101107c8:	00000406 	br	101107dc <alt_iic_isr_register+0xc4>
101107cc:	e0bff817 	ldw	r2,-32(fp)
101107d0:	100b883a 	mov	r5,r2
101107d4:	e13ffc17 	ldw	r4,-16(fp)
101107d8:	01106400 	call	10110640 <alt_ic_irq_disable>
101107dc:	e0bff715 	stw	r2,-36(fp)
101107e0:	e0bffa17 	ldw	r2,-24(fp)
101107e4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
101107e8:	e0bff917 	ldw	r2,-28(fp)
101107ec:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
101107f0:	e0bff717 	ldw	r2,-36(fp)
}
101107f4:	e037883a 	mov	sp,fp
101107f8:	dfc00117 	ldw	ra,4(sp)
101107fc:	df000017 	ldw	fp,0(sp)
10110800:	dec00204 	addi	sp,sp,8
10110804:	f800283a 	ret

10110808 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10110808:	defff904 	addi	sp,sp,-28
1011080c:	dfc00615 	stw	ra,24(sp)
10110810:	df000515 	stw	fp,20(sp)
10110814:	df000504 	addi	fp,sp,20
10110818:	e13ffc15 	stw	r4,-16(fp)
1011081c:	e17ffd15 	stw	r5,-12(fp)
10110820:	e1bffe15 	stw	r6,-8(fp)
10110824:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
10110828:	e1bfff17 	ldw	r6,-4(fp)
1011082c:	e17ffe17 	ldw	r5,-8(fp)
10110830:	e13ffd17 	ldw	r4,-12(fp)
10110834:	010eae40 	call	1010eae4 <open>
10110838:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
1011083c:	e0bffb17 	ldw	r2,-20(fp)
10110840:	10001c16 	blt	r2,zero,101108b4 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
10110844:	00840474 	movhi	r2,4113
10110848:	10872d04 	addi	r2,r2,7348
1011084c:	e0fffb17 	ldw	r3,-20(fp)
10110850:	18c00324 	muli	r3,r3,12
10110854:	10c5883a 	add	r2,r2,r3
10110858:	10c00017 	ldw	r3,0(r2)
1011085c:	e0bffc17 	ldw	r2,-16(fp)
10110860:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
10110864:	00840474 	movhi	r2,4113
10110868:	10872d04 	addi	r2,r2,7348
1011086c:	e0fffb17 	ldw	r3,-20(fp)
10110870:	18c00324 	muli	r3,r3,12
10110874:	10c5883a 	add	r2,r2,r3
10110878:	10800104 	addi	r2,r2,4
1011087c:	10c00017 	ldw	r3,0(r2)
10110880:	e0bffc17 	ldw	r2,-16(fp)
10110884:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10110888:	00840474 	movhi	r2,4113
1011088c:	10872d04 	addi	r2,r2,7348
10110890:	e0fffb17 	ldw	r3,-20(fp)
10110894:	18c00324 	muli	r3,r3,12
10110898:	10c5883a 	add	r2,r2,r3
1011089c:	10800204 	addi	r2,r2,8
101108a0:	10c00017 	ldw	r3,0(r2)
101108a4:	e0bffc17 	ldw	r2,-16(fp)
101108a8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
101108ac:	e13ffb17 	ldw	r4,-20(fp)
101108b0:	010ed700 	call	1010ed70 <alt_release_fd>
  }
} 
101108b4:	0001883a 	nop
101108b8:	e037883a 	mov	sp,fp
101108bc:	dfc00117 	ldw	ra,4(sp)
101108c0:	df000017 	ldw	fp,0(sp)
101108c4:	dec00204 	addi	sp,sp,8
101108c8:	f800283a 	ret

101108cc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
101108cc:	defffb04 	addi	sp,sp,-20
101108d0:	dfc00415 	stw	ra,16(sp)
101108d4:	df000315 	stw	fp,12(sp)
101108d8:	df000304 	addi	fp,sp,12
101108dc:	e13ffd15 	stw	r4,-12(fp)
101108e0:	e17ffe15 	stw	r5,-8(fp)
101108e4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
101108e8:	01c07fc4 	movi	r7,511
101108ec:	01800044 	movi	r6,1
101108f0:	e17ffd17 	ldw	r5,-12(fp)
101108f4:	01040474 	movhi	r4,4113
101108f8:	21073004 	addi	r4,r4,7360
101108fc:	01108080 	call	10110808 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10110900:	01c07fc4 	movi	r7,511
10110904:	000d883a 	mov	r6,zero
10110908:	e17ffe17 	ldw	r5,-8(fp)
1011090c:	01040474 	movhi	r4,4113
10110910:	21072d04 	addi	r4,r4,7348
10110914:	01108080 	call	10110808 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10110918:	01c07fc4 	movi	r7,511
1011091c:	01800044 	movi	r6,1
10110920:	e17fff17 	ldw	r5,-4(fp)
10110924:	01040474 	movhi	r4,4113
10110928:	21073304 	addi	r4,r4,7372
1011092c:	01108080 	call	10110808 <alt_open_fd>
}  
10110930:	0001883a 	nop
10110934:	e037883a 	mov	sp,fp
10110938:	dfc00117 	ldw	ra,4(sp)
1011093c:	df000017 	ldw	fp,0(sp)
10110940:	dec00204 	addi	sp,sp,8
10110944:	f800283a 	ret

10110948 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10110948:	defffa04 	addi	sp,sp,-24
1011094c:	df000515 	stw	fp,20(sp)
10110950:	df000504 	addi	fp,sp,20
10110954:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10110958:	0005303a 	rdctl	r2,status
1011095c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10110960:	e0fffc17 	ldw	r3,-16(fp)
10110964:	00bfff84 	movi	r2,-2
10110968:	1884703a 	and	r2,r3,r2
1011096c:	1001703a 	wrctl	status,r2
  
  return context;
10110970:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
10110974:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
10110978:	e0bfff17 	ldw	r2,-4(fp)
1011097c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10110980:	e0bffd17 	ldw	r2,-12(fp)
10110984:	10800017 	ldw	r2,0(r2)
10110988:	e0fffd17 	ldw	r3,-12(fp)
1011098c:	18c00117 	ldw	r3,4(r3)
10110990:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
10110994:	e0bffd17 	ldw	r2,-12(fp)
10110998:	10800117 	ldw	r2,4(r2)
1011099c:	e0fffd17 	ldw	r3,-12(fp)
101109a0:	18c00017 	ldw	r3,0(r3)
101109a4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
101109a8:	e0bffd17 	ldw	r2,-12(fp)
101109ac:	e0fffd17 	ldw	r3,-12(fp)
101109b0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
101109b4:	e0bffd17 	ldw	r2,-12(fp)
101109b8:	e0fffd17 	ldw	r3,-12(fp)
101109bc:	10c00015 	stw	r3,0(r2)
101109c0:	e0bffb17 	ldw	r2,-20(fp)
101109c4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
101109c8:	e0bffe17 	ldw	r2,-8(fp)
101109cc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
101109d0:	0001883a 	nop
101109d4:	e037883a 	mov	sp,fp
101109d8:	df000017 	ldw	fp,0(sp)
101109dc:	dec00104 	addi	sp,sp,4
101109e0:	f800283a 	ret

101109e4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
101109e4:	defffb04 	addi	sp,sp,-20
101109e8:	dfc00415 	stw	ra,16(sp)
101109ec:	df000315 	stw	fp,12(sp)
101109f0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
101109f4:	d0a02017 	ldw	r2,-32640(gp)
101109f8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
101109fc:	d0a70517 	ldw	r2,-25580(gp)
10110a00:	10800044 	addi	r2,r2,1
10110a04:	d0a70515 	stw	r2,-25580(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10110a08:	00002e06 	br	10110ac4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10110a0c:	e0bffd17 	ldw	r2,-12(fp)
10110a10:	10800017 	ldw	r2,0(r2)
10110a14:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10110a18:	e0bffd17 	ldw	r2,-12(fp)
10110a1c:	10800403 	ldbu	r2,16(r2)
10110a20:	10803fcc 	andi	r2,r2,255
10110a24:	10000426 	beq	r2,zero,10110a38 <alt_tick+0x54>
10110a28:	d0a70517 	ldw	r2,-25580(gp)
10110a2c:	1000021e 	bne	r2,zero,10110a38 <alt_tick+0x54>
    {
      alarm->rollover = 0;
10110a30:	e0bffd17 	ldw	r2,-12(fp)
10110a34:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10110a38:	e0bffd17 	ldw	r2,-12(fp)
10110a3c:	10800217 	ldw	r2,8(r2)
10110a40:	d0e70517 	ldw	r3,-25580(gp)
10110a44:	18801d36 	bltu	r3,r2,10110abc <alt_tick+0xd8>
10110a48:	e0bffd17 	ldw	r2,-12(fp)
10110a4c:	10800403 	ldbu	r2,16(r2)
10110a50:	10803fcc 	andi	r2,r2,255
10110a54:	1000191e 	bne	r2,zero,10110abc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
10110a58:	e0bffd17 	ldw	r2,-12(fp)
10110a5c:	10800317 	ldw	r2,12(r2)
10110a60:	e0fffd17 	ldw	r3,-12(fp)
10110a64:	18c00517 	ldw	r3,20(r3)
10110a68:	1809883a 	mov	r4,r3
10110a6c:	103ee83a 	callr	r2
10110a70:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10110a74:	e0bfff17 	ldw	r2,-4(fp)
10110a78:	1000031e 	bne	r2,zero,10110a88 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
10110a7c:	e13ffd17 	ldw	r4,-12(fp)
10110a80:	01109480 	call	10110948 <alt_alarm_stop>
10110a84:	00000d06 	br	10110abc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
10110a88:	e0bffd17 	ldw	r2,-12(fp)
10110a8c:	10c00217 	ldw	r3,8(r2)
10110a90:	e0bfff17 	ldw	r2,-4(fp)
10110a94:	1887883a 	add	r3,r3,r2
10110a98:	e0bffd17 	ldw	r2,-12(fp)
10110a9c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
10110aa0:	e0bffd17 	ldw	r2,-12(fp)
10110aa4:	10c00217 	ldw	r3,8(r2)
10110aa8:	d0a70517 	ldw	r2,-25580(gp)
10110aac:	1880032e 	bgeu	r3,r2,10110abc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
10110ab0:	e0bffd17 	ldw	r2,-12(fp)
10110ab4:	00c00044 	movi	r3,1
10110ab8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
10110abc:	e0bffe17 	ldw	r2,-8(fp)
10110ac0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10110ac4:	e0fffd17 	ldw	r3,-12(fp)
10110ac8:	d0a02004 	addi	r2,gp,-32640
10110acc:	18bfcf1e 	bne	r3,r2,10110a0c <__alt_data_end+0xffff0a0c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
10110ad0:	0001883a 	nop
}
10110ad4:	0001883a 	nop
10110ad8:	e037883a 	mov	sp,fp
10110adc:	dfc00117 	ldw	ra,4(sp)
10110ae0:	df000017 	ldw	fp,0(sp)
10110ae4:	dec00204 	addi	sp,sp,8
10110ae8:	f800283a 	ret

10110aec <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
10110aec:	deffff04 	addi	sp,sp,-4
10110af0:	df000015 	stw	fp,0(sp)
10110af4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10110af8:	000170fa 	wrctl	ienable,zero
}
10110afc:	0001883a 	nop
10110b00:	e037883a 	mov	sp,fp
10110b04:	df000017 	ldw	fp,0(sp)
10110b08:	dec00104 	addi	sp,sp,4
10110b0c:	f800283a 	ret

10110b10 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
10110b10:	defffb04 	addi	sp,sp,-20
10110b14:	df000415 	stw	fp,16(sp)
10110b18:	df000404 	addi	fp,sp,16
10110b1c:	e13ffe15 	stw	r4,-8(fp)
10110b20:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
10110b24:	e0bfff17 	ldw	r2,-4(fp)
10110b28:	10840070 	cmpltui	r2,r2,4097
10110b2c:	1000021e 	bne	r2,zero,10110b38 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
10110b30:	00840004 	movi	r2,4096
10110b34:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
10110b38:	e0fffe17 	ldw	r3,-8(fp)
10110b3c:	e0bfff17 	ldw	r2,-4(fp)
10110b40:	1885883a 	add	r2,r3,r2
10110b44:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
10110b48:	e0bffe17 	ldw	r2,-8(fp)
10110b4c:	e0bffc15 	stw	r2,-16(fp)
10110b50:	00000506 	br	10110b68 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
10110b54:	e0bffc17 	ldw	r2,-16(fp)
10110b58:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
10110b5c:	e0bffc17 	ldw	r2,-16(fp)
10110b60:	10800804 	addi	r2,r2,32
10110b64:	e0bffc15 	stw	r2,-16(fp)
10110b68:	e0fffc17 	ldw	r3,-16(fp)
10110b6c:	e0bffd17 	ldw	r2,-12(fp)
10110b70:	18bff836 	bltu	r3,r2,10110b54 <__alt_data_end+0xffff0b54>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
10110b74:	e0bffe17 	ldw	r2,-8(fp)
10110b78:	108007cc 	andi	r2,r2,31
10110b7c:	10000226 	beq	r2,zero,10110b88 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
10110b80:	e0bffc17 	ldw	r2,-16(fp)
10110b84:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
10110b88:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
10110b8c:	0001883a 	nop
10110b90:	e037883a 	mov	sp,fp
10110b94:	df000017 	ldw	fp,0(sp)
10110b98:	dec00104 	addi	sp,sp,4
10110b9c:	f800283a 	ret

10110ba0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
10110ba0:	defffe04 	addi	sp,sp,-8
10110ba4:	df000115 	stw	fp,4(sp)
10110ba8:	df000104 	addi	fp,sp,4
10110bac:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
10110bb0:	e0bfff17 	ldw	r2,-4(fp)
10110bb4:	10bffe84 	addi	r2,r2,-6
10110bb8:	10c00428 	cmpgeui	r3,r2,16
10110bbc:	18001a1e 	bne	r3,zero,10110c28 <alt_exception_cause_generated_bad_addr+0x88>
10110bc0:	100690ba 	slli	r3,r2,2
10110bc4:	00840474 	movhi	r2,4113
10110bc8:	1082f604 	addi	r2,r2,3032
10110bcc:	1885883a 	add	r2,r3,r2
10110bd0:	10800017 	ldw	r2,0(r2)
10110bd4:	1000683a 	jmp	r2
10110bd8:	10110c18 	cmpnei	zero,r2,17456
10110bdc:	10110c18 	cmpnei	zero,r2,17456
10110be0:	10110c28 	cmpgeui	zero,r2,17456
10110be4:	10110c28 	cmpgeui	zero,r2,17456
10110be8:	10110c28 	cmpgeui	zero,r2,17456
10110bec:	10110c18 	cmpnei	zero,r2,17456
10110bf0:	10110c20 	cmpeqi	zero,r2,17456
10110bf4:	10110c28 	cmpgeui	zero,r2,17456
10110bf8:	10110c18 	cmpnei	zero,r2,17456
10110bfc:	10110c18 	cmpnei	zero,r2,17456
10110c00:	10110c28 	cmpgeui	zero,r2,17456
10110c04:	10110c18 	cmpnei	zero,r2,17456
10110c08:	10110c20 	cmpeqi	zero,r2,17456
10110c0c:	10110c28 	cmpgeui	zero,r2,17456
10110c10:	10110c28 	cmpgeui	zero,r2,17456
10110c14:	10110c18 	cmpnei	zero,r2,17456
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
10110c18:	00800044 	movi	r2,1
10110c1c:	00000306 	br	10110c2c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
10110c20:	0005883a 	mov	r2,zero
10110c24:	00000106 	br	10110c2c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
10110c28:	0005883a 	mov	r2,zero
  }
}
10110c2c:	e037883a 	mov	sp,fp
10110c30:	df000017 	ldw	fp,0(sp)
10110c34:	dec00104 	addi	sp,sp,4
10110c38:	f800283a 	ret

10110c3c <atexit>:
10110c3c:	200b883a 	mov	r5,r4
10110c40:	000f883a 	mov	r7,zero
10110c44:	000d883a 	mov	r6,zero
10110c48:	0009883a 	mov	r4,zero
10110c4c:	0110d041 	jmpi	10110d04 <__register_exitproc>

10110c50 <exit>:
10110c50:	defffe04 	addi	sp,sp,-8
10110c54:	000b883a 	mov	r5,zero
10110c58:	dc000015 	stw	r16,0(sp)
10110c5c:	dfc00115 	stw	ra,4(sp)
10110c60:	2021883a 	mov	r16,r4
10110c64:	0110e1c0 	call	10110e1c <__call_exitprocs>
10110c68:	00840474 	movhi	r2,4113
10110c6c:	108baf04 	addi	r2,r2,11964
10110c70:	11000017 	ldw	r4,0(r2)
10110c74:	20800f17 	ldw	r2,60(r4)
10110c78:	10000126 	beq	r2,zero,10110c80 <exit+0x30>
10110c7c:	103ee83a 	callr	r2
10110c80:	8009883a 	mov	r4,r16
10110c84:	0110f9c0 	call	10110f9c <_exit>

10110c88 <memcmp>:
10110c88:	01c000c4 	movi	r7,3
10110c8c:	3980192e 	bgeu	r7,r6,10110cf4 <memcmp+0x6c>
10110c90:	2144b03a 	or	r2,r4,r5
10110c94:	11c4703a 	and	r2,r2,r7
10110c98:	10000f26 	beq	r2,zero,10110cd8 <memcmp+0x50>
10110c9c:	20800003 	ldbu	r2,0(r4)
10110ca0:	28c00003 	ldbu	r3,0(r5)
10110ca4:	10c0151e 	bne	r2,r3,10110cfc <memcmp+0x74>
10110ca8:	31bfff84 	addi	r6,r6,-2
10110cac:	01ffffc4 	movi	r7,-1
10110cb0:	00000406 	br	10110cc4 <memcmp+0x3c>
10110cb4:	20800003 	ldbu	r2,0(r4)
10110cb8:	28c00003 	ldbu	r3,0(r5)
10110cbc:	31bfffc4 	addi	r6,r6,-1
10110cc0:	10c00e1e 	bne	r2,r3,10110cfc <memcmp+0x74>
10110cc4:	21000044 	addi	r4,r4,1
10110cc8:	29400044 	addi	r5,r5,1
10110ccc:	31fff91e 	bne	r6,r7,10110cb4 <__alt_data_end+0xffff0cb4>
10110cd0:	0005883a 	mov	r2,zero
10110cd4:	f800283a 	ret
10110cd8:	20c00017 	ldw	r3,0(r4)
10110cdc:	28800017 	ldw	r2,0(r5)
10110ce0:	18bfee1e 	bne	r3,r2,10110c9c <__alt_data_end+0xffff0c9c>
10110ce4:	31bfff04 	addi	r6,r6,-4
10110ce8:	21000104 	addi	r4,r4,4
10110cec:	29400104 	addi	r5,r5,4
10110cf0:	39bff936 	bltu	r7,r6,10110cd8 <__alt_data_end+0xffff0cd8>
10110cf4:	303fe91e 	bne	r6,zero,10110c9c <__alt_data_end+0xffff0c9c>
10110cf8:	003ff506 	br	10110cd0 <__alt_data_end+0xffff0cd0>
10110cfc:	10c5c83a 	sub	r2,r2,r3
10110d00:	f800283a 	ret

10110d04 <__register_exitproc>:
10110d04:	defffa04 	addi	sp,sp,-24
10110d08:	dc000315 	stw	r16,12(sp)
10110d0c:	04040474 	movhi	r16,4113
10110d10:	840baf04 	addi	r16,r16,11964
10110d14:	80c00017 	ldw	r3,0(r16)
10110d18:	dc400415 	stw	r17,16(sp)
10110d1c:	dfc00515 	stw	ra,20(sp)
10110d20:	18805217 	ldw	r2,328(r3)
10110d24:	2023883a 	mov	r17,r4
10110d28:	10003726 	beq	r2,zero,10110e08 <__register_exitproc+0x104>
10110d2c:	10c00117 	ldw	r3,4(r2)
10110d30:	010007c4 	movi	r4,31
10110d34:	20c00e16 	blt	r4,r3,10110d70 <__register_exitproc+0x6c>
10110d38:	1a000044 	addi	r8,r3,1
10110d3c:	8800221e 	bne	r17,zero,10110dc8 <__register_exitproc+0xc4>
10110d40:	18c00084 	addi	r3,r3,2
10110d44:	18c7883a 	add	r3,r3,r3
10110d48:	18c7883a 	add	r3,r3,r3
10110d4c:	12000115 	stw	r8,4(r2)
10110d50:	10c7883a 	add	r3,r2,r3
10110d54:	19400015 	stw	r5,0(r3)
10110d58:	0005883a 	mov	r2,zero
10110d5c:	dfc00517 	ldw	ra,20(sp)
10110d60:	dc400417 	ldw	r17,16(sp)
10110d64:	dc000317 	ldw	r16,12(sp)
10110d68:	dec00604 	addi	sp,sp,24
10110d6c:	f800283a 	ret
10110d70:	00800034 	movhi	r2,0
10110d74:	10800004 	addi	r2,r2,0
10110d78:	10002626 	beq	r2,zero,10110e14 <__register_exitproc+0x110>
10110d7c:	01006404 	movi	r4,400
10110d80:	d9400015 	stw	r5,0(sp)
10110d84:	d9800115 	stw	r6,4(sp)
10110d88:	d9c00215 	stw	r7,8(sp)
10110d8c:	00000000 	call	10000000 <__reset-0x100000>
10110d90:	d9400017 	ldw	r5,0(sp)
10110d94:	d9800117 	ldw	r6,4(sp)
10110d98:	d9c00217 	ldw	r7,8(sp)
10110d9c:	10001d26 	beq	r2,zero,10110e14 <__register_exitproc+0x110>
10110da0:	81000017 	ldw	r4,0(r16)
10110da4:	10000115 	stw	zero,4(r2)
10110da8:	02000044 	movi	r8,1
10110dac:	22405217 	ldw	r9,328(r4)
10110db0:	0007883a 	mov	r3,zero
10110db4:	12400015 	stw	r9,0(r2)
10110db8:	20805215 	stw	r2,328(r4)
10110dbc:	10006215 	stw	zero,392(r2)
10110dc0:	10006315 	stw	zero,396(r2)
10110dc4:	883fde26 	beq	r17,zero,10110d40 <__alt_data_end+0xffff0d40>
10110dc8:	18c9883a 	add	r4,r3,r3
10110dcc:	2109883a 	add	r4,r4,r4
10110dd0:	1109883a 	add	r4,r2,r4
10110dd4:	21802215 	stw	r6,136(r4)
10110dd8:	01800044 	movi	r6,1
10110ddc:	12406217 	ldw	r9,392(r2)
10110de0:	30cc983a 	sll	r6,r6,r3
10110de4:	4992b03a 	or	r9,r9,r6
10110de8:	12406215 	stw	r9,392(r2)
10110dec:	21c04215 	stw	r7,264(r4)
10110df0:	01000084 	movi	r4,2
10110df4:	893fd21e 	bne	r17,r4,10110d40 <__alt_data_end+0xffff0d40>
10110df8:	11006317 	ldw	r4,396(r2)
10110dfc:	218cb03a 	or	r6,r4,r6
10110e00:	11806315 	stw	r6,396(r2)
10110e04:	003fce06 	br	10110d40 <__alt_data_end+0xffff0d40>
10110e08:	18805304 	addi	r2,r3,332
10110e0c:	18805215 	stw	r2,328(r3)
10110e10:	003fc606 	br	10110d2c <__alt_data_end+0xffff0d2c>
10110e14:	00bfffc4 	movi	r2,-1
10110e18:	003fd006 	br	10110d5c <__alt_data_end+0xffff0d5c>

10110e1c <__call_exitprocs>:
10110e1c:	defff504 	addi	sp,sp,-44
10110e20:	df000915 	stw	fp,36(sp)
10110e24:	dd400615 	stw	r21,24(sp)
10110e28:	dc800315 	stw	r18,12(sp)
10110e2c:	dfc00a15 	stw	ra,40(sp)
10110e30:	ddc00815 	stw	r23,32(sp)
10110e34:	dd800715 	stw	r22,28(sp)
10110e38:	dd000515 	stw	r20,20(sp)
10110e3c:	dcc00415 	stw	r19,16(sp)
10110e40:	dc400215 	stw	r17,8(sp)
10110e44:	dc000115 	stw	r16,4(sp)
10110e48:	d9000015 	stw	r4,0(sp)
10110e4c:	2839883a 	mov	fp,r5
10110e50:	04800044 	movi	r18,1
10110e54:	057fffc4 	movi	r21,-1
10110e58:	00840474 	movhi	r2,4113
10110e5c:	108baf04 	addi	r2,r2,11964
10110e60:	12000017 	ldw	r8,0(r2)
10110e64:	45005217 	ldw	r20,328(r8)
10110e68:	44c05204 	addi	r19,r8,328
10110e6c:	a0001c26 	beq	r20,zero,10110ee0 <__call_exitprocs+0xc4>
10110e70:	a0800117 	ldw	r2,4(r20)
10110e74:	15ffffc4 	addi	r23,r2,-1
10110e78:	b8000d16 	blt	r23,zero,10110eb0 <__call_exitprocs+0x94>
10110e7c:	14000044 	addi	r16,r2,1
10110e80:	8421883a 	add	r16,r16,r16
10110e84:	8421883a 	add	r16,r16,r16
10110e88:	84402004 	addi	r17,r16,128
10110e8c:	a463883a 	add	r17,r20,r17
10110e90:	a421883a 	add	r16,r20,r16
10110e94:	e0001e26 	beq	fp,zero,10110f10 <__call_exitprocs+0xf4>
10110e98:	80804017 	ldw	r2,256(r16)
10110e9c:	e0801c26 	beq	fp,r2,10110f10 <__call_exitprocs+0xf4>
10110ea0:	bdffffc4 	addi	r23,r23,-1
10110ea4:	843fff04 	addi	r16,r16,-4
10110ea8:	8c7fff04 	addi	r17,r17,-4
10110eac:	bd7ff91e 	bne	r23,r21,10110e94 <__alt_data_end+0xffff0e94>
10110eb0:	00800034 	movhi	r2,0
10110eb4:	10800004 	addi	r2,r2,0
10110eb8:	10000926 	beq	r2,zero,10110ee0 <__call_exitprocs+0xc4>
10110ebc:	a0800117 	ldw	r2,4(r20)
10110ec0:	1000301e 	bne	r2,zero,10110f84 <__call_exitprocs+0x168>
10110ec4:	a0800017 	ldw	r2,0(r20)
10110ec8:	10003226 	beq	r2,zero,10110f94 <__call_exitprocs+0x178>
10110ecc:	a009883a 	mov	r4,r20
10110ed0:	98800015 	stw	r2,0(r19)
10110ed4:	00000000 	call	10000000 <__reset-0x100000>
10110ed8:	9d000017 	ldw	r20,0(r19)
10110edc:	a03fe41e 	bne	r20,zero,10110e70 <__alt_data_end+0xffff0e70>
10110ee0:	dfc00a17 	ldw	ra,40(sp)
10110ee4:	df000917 	ldw	fp,36(sp)
10110ee8:	ddc00817 	ldw	r23,32(sp)
10110eec:	dd800717 	ldw	r22,28(sp)
10110ef0:	dd400617 	ldw	r21,24(sp)
10110ef4:	dd000517 	ldw	r20,20(sp)
10110ef8:	dcc00417 	ldw	r19,16(sp)
10110efc:	dc800317 	ldw	r18,12(sp)
10110f00:	dc400217 	ldw	r17,8(sp)
10110f04:	dc000117 	ldw	r16,4(sp)
10110f08:	dec00b04 	addi	sp,sp,44
10110f0c:	f800283a 	ret
10110f10:	a0800117 	ldw	r2,4(r20)
10110f14:	80c00017 	ldw	r3,0(r16)
10110f18:	10bfffc4 	addi	r2,r2,-1
10110f1c:	15c01426 	beq	r2,r23,10110f70 <__call_exitprocs+0x154>
10110f20:	80000015 	stw	zero,0(r16)
10110f24:	183fde26 	beq	r3,zero,10110ea0 <__alt_data_end+0xffff0ea0>
10110f28:	95c8983a 	sll	r4,r18,r23
10110f2c:	a0806217 	ldw	r2,392(r20)
10110f30:	a5800117 	ldw	r22,4(r20)
10110f34:	2084703a 	and	r2,r4,r2
10110f38:	10000b26 	beq	r2,zero,10110f68 <__call_exitprocs+0x14c>
10110f3c:	a0806317 	ldw	r2,396(r20)
10110f40:	2088703a 	and	r4,r4,r2
10110f44:	20000c1e 	bne	r4,zero,10110f78 <__call_exitprocs+0x15c>
10110f48:	89400017 	ldw	r5,0(r17)
10110f4c:	d9000017 	ldw	r4,0(sp)
10110f50:	183ee83a 	callr	r3
10110f54:	a0800117 	ldw	r2,4(r20)
10110f58:	15bfbf1e 	bne	r2,r22,10110e58 <__alt_data_end+0xffff0e58>
10110f5c:	98800017 	ldw	r2,0(r19)
10110f60:	153fcf26 	beq	r2,r20,10110ea0 <__alt_data_end+0xffff0ea0>
10110f64:	003fbc06 	br	10110e58 <__alt_data_end+0xffff0e58>
10110f68:	183ee83a 	callr	r3
10110f6c:	003ff906 	br	10110f54 <__alt_data_end+0xffff0f54>
10110f70:	a5c00115 	stw	r23,4(r20)
10110f74:	003feb06 	br	10110f24 <__alt_data_end+0xffff0f24>
10110f78:	89000017 	ldw	r4,0(r17)
10110f7c:	183ee83a 	callr	r3
10110f80:	003ff406 	br	10110f54 <__alt_data_end+0xffff0f54>
10110f84:	a0800017 	ldw	r2,0(r20)
10110f88:	a027883a 	mov	r19,r20
10110f8c:	1029883a 	mov	r20,r2
10110f90:	003fb606 	br	10110e6c <__alt_data_end+0xffff0e6c>
10110f94:	0005883a 	mov	r2,zero
10110f98:	003ffb06 	br	10110f88 <__alt_data_end+0xffff0f88>

10110f9c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
10110f9c:	defffd04 	addi	sp,sp,-12
10110fa0:	df000215 	stw	fp,8(sp)
10110fa4:	df000204 	addi	fp,sp,8
10110fa8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
10110fac:	0001883a 	nop
10110fb0:	e0bfff17 	ldw	r2,-4(fp)
10110fb4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10110fb8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10110fbc:	10000226 	beq	r2,zero,10110fc8 <_exit+0x2c>
    ALT_SIM_FAIL();
10110fc0:	002af070 	cmpltui	zero,zero,43969
10110fc4:	00000106 	br	10110fcc <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10110fc8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10110fcc:	003fff06 	br	10110fcc <__alt_data_end+0xffff0fcc>
